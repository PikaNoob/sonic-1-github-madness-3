00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_Anakama
00002416 FB00                       	dc.w $FB00
00002418 0007                       	dc.w 7
00002418 0007                       	dc.w 7
0000241A                            
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            ; Pallet data
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000249A                            Pal_Title:	incbin	pallet\title.bin
0000251A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000259A                            Pal_Sonic:	incbin	pallet\sonic.bin
000025BA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000261A                            Pal_LZ:		incbin	pallet\lz.bin
0000267A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026FA                            Pal_MZ:		incbin	pallet\mz.bin
0000275A                            Pal_SLZ:	incbin	pallet\slz.bin
000027BA                            Pal_SYZ:	incbin	pallet\syz.bin
0000281A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000287A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028DA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000295A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029BA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A3A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A5A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A7A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AFA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B3A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BBA                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BDA                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BFA                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C1A                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C3A                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002CBA                            
00002CBA                            ; ---------------------------------------------------------------------------
00002CBA                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002CBA                            ; ---------------------------------------------------------------------------
00002CBA                            
00002CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBA                            
00002CBA                            
00002CBA                            DelayProgram:				; XREF: PauseGame
00002CBA 46FC 2300                  		move	#$2300,sr
00002CBE                            
00002CBE                            loc_29AC:
00002CBE 4A38 F62A                  		tst.b	($FFFFF62A).w
00002CC2 66FA                       		bne.s	loc_29AC
00002CC4 4E75                       		rts	
00002CC6                            ; End of function DelayProgram
00002CC6                            
00002CC6                            ; ---------------------------------------------------------------------------
00002CC6                            ; Subroutine to	generate a pseudo-random number	in d0
00002CC6                            ; ---------------------------------------------------------------------------
00002CC6                            
00002CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CC6                            
00002CC6                            
00002CC6                            RandomNumber:
00002CC6 2238 F636                  		move.l	($FFFFF636).w,d1
00002CCA 6600                       		bne.s	loc_29C0
00002CCC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CD2                            
00002CD2                            loc_29C0:
00002CD2 2001                       		move.l	d1,d0
00002CD4 E581                       		asl.l	#2,d1
00002CD6 D280                       		add.l	d0,d1
00002CD8 E781                       		asl.l	#3,d1
00002CDA D280                       		add.l	d0,d1
00002CDC 3001                       		move.w	d1,d0
00002CDE 4841                       		swap	d1
00002CE0 D041                       		add.w	d1,d0
00002CE2 3200                       		move.w	d0,d1
00002CE4 4841                       		swap	d1
00002CE6 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CEA 4E75                       		rts	
00002CEC                            ; End of function RandomNumber
00002CEC                            
00002CEC                            
00002CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CEC                            
00002CEC                            
00002CEC                            CalcSine:				; XREF: SS_BGAnimate; et al
00002CEC 0240 00FF                  		andi.w	#$FF,d0
00002CF0 D040                       		add.w	d0,d0
00002CF2 0640 0080                  		addi.w	#$80,d0
00002CF6 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002CFA 0440 0080                  		subi.w	#$80,d0
00002CFE 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D02 4E75                       		rts	
00002D04                            ; End of function CalcSine
00002D04                            
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F84                            
00002F84                            ; ===========================================================================
00002F84 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F88 3200                       		move.w	d0,d1
00002F8A 4841                       		swap	d1
00002F8C 7000                       		moveq	#0,d0
00002F8E 3200                       		move.w	d0,d1
00002F90 7407                       		moveq	#7,d2
00002F92                            
00002F92                            loc_2C80:
00002F92 E599                       		rol.l	#2,d1
00002F94 D040                       		add.w	d0,d0
00002F96 5240                       		addq.w	#1,d0
00002F98 9240                       		sub.w	d0,d1
00002F9A 6400                       		bcc.s	loc_2C9A
00002F9C D240                       		add.w	d0,d1
00002F9E 5340                       		subq.w	#1,d0
00002FA0 51CA FFF0                  		dbf	d2,loc_2C80
00002FA4 E248                       		lsr.w	#1,d0
00002FA6 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FAA 4E75                       		rts	
00002FAC                            ; ===========================================================================
00002FAC                            
00002FAC                            loc_2C9A:
00002FAC 5240                       		addq.w	#1,d0
00002FAE 51CA FFE2                  		dbf	d2,loc_2C80
00002FB2 E248                       		lsr.w	#1,d0
00002FB4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FB8 4E75                       		rts	
00002FBA                            
00002FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FBA                            
00002FBA                            
00002FBA                            CalcAngle:
00002FBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00002FBE 7600                       		moveq	#0,d3
00002FC0 7800                       		moveq	#0,d4
00002FC2 3601                       		move.w	d1,d3
00002FC4 3802                       		move.w	d2,d4
00002FC6 8843                       		or.w	d3,d4
00002FC8 6700                       		beq.s	loc_2D04
00002FCA 3802                       		move.w	d2,d4
00002FCC 4A43                       		tst.w	d3
00002FCE 6A00 0000                  		bpl.w	loc_2CC2
00002FD2 4443                       		neg.w	d3
00002FD4                            
00002FD4                            loc_2CC2:
00002FD4 4A44                       		tst.w	d4
00002FD6 6A00 0000                  		bpl.w	loc_2CCA
00002FDA 4444                       		neg.w	d4
00002FDC                            
00002FDC                            loc_2CCA:
00002FDC B843                       		cmp.w	d3,d4
00002FDE 6400 0000                  		bcc.w	loc_2CDC
00002FE2 E18C                       		lsl.l	#8,d4
00002FE4 88C3                       		divu.w	d3,d4
00002FE6 7000                       		moveq	#0,d0
00002FE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FEC 6000                       		bra.s	loc_2CE6
00002FEE                            ; ===========================================================================
00002FEE                            
00002FEE                            loc_2CDC:				; XREF: CalcAngle
00002FEE E18B                       		lsl.l	#8,d3
00002FF0 86C4                       		divu.w	d4,d3
00002FF2 7040                       		moveq	#$40,d0
00002FF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002FF8                            
00002FF8                            loc_2CE6:
00002FF8 4A41                       		tst.w	d1
00002FFA 6A00 0000                  		bpl.w	loc_2CF2
00002FFE 4440                       		neg.w	d0
00003000 0640 0080                  		addi.w	#$80,d0
00003004                            
00003004                            loc_2CF2:
00003004 4A42                       		tst.w	d2
00003006 6A00 0000                  		bpl.w	loc_2CFE
0000300A 4440                       		neg.w	d0
0000300C 0640 0100                  		addi.w	#$100,d0
00003010                            
00003010                            loc_2CFE:
00003010 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003014 4E75                       		rts	
00003016                            ; ===========================================================================
00003016                            
00003016                            loc_2D04:				; XREF: CalcAngle
00003016 303C 0040                  		move.w	#$40,d0
0000301A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000301E 4E75                       		rts	
00003020                            ; End of function CalcAngle
00003020                            
00003020                            ; ===========================================================================
00003020                            
00003020                            Angle_Data:	incbin	misc\angles.bin
00003122                            
00003122                            ; ===========================================================================
00003122                            
00003122                            ; ---------------------------------------------------------------------------
00003122                            ; Sega screen
00003122                            ; ---------------------------------------------------------------------------
00003122                            
00003122                            SegaScreen:				; XREF: GameModeArray
00003122 103C 00E4                  		move.b	#$E4,d0
00003126 6100 E498                  		bsr.w	PlaySound_Special ; stop music
0000312A 6100 E6D6                  		bsr.w	ClearPLC
0000312E 6100 EF0C                  		bsr.w	Pal_FadeFrom
00003132 4DF9 00C0 0004             		lea	($C00004).l,a6
00003138 3CBC 8004                  		move.w	#$8004,(a6)
0000313C 3CBC 8230                  		move.w	#$8230,(a6)
00003140 3CBC 8407                  		move.w	#$8407,(a6)
00003144 3CBC 8700                  		move.w	#$8700,(a6)
00003148 3CBC 8B00                  		move.w	#$8B00,(a6)
0000314C 4238 F64E                  		clr.b	($FFFFF64E).w
00003150 46FC 2700                  		move	#$2700,sr
00003154 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003158 0200 00BF                  		andi.b	#$BF,d0
0000315C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003162 6100 E384                  		bsr.w	ClearScreen
00003166 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003170 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003176 6100 E4EC                  		bsr.w	NemDec
0000317A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003180 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003186 303C 0000                  		move.w	#0,d0
0000318A 6100 E7B6                  		bsr.w	EniDec
0000318E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003194 203C 6510 0003             		move.l	#$65100003,d0
0000319A 7217                       		moveq	#$17,d1
0000319C 7407                       		moveq	#7,d2
0000319E 6100 E4A4                  		bsr.w	ShowVDPGraphics
000031A2 43F9 00FF 0180             		lea	($FF0180).l,a1
000031A8 203C 4000 0003             		move.l	#$40000003,d0
000031AE 7227                       		moveq	#$27,d1
000031B0 741B                       		moveq	#$1B,d2
000031B2 6100 E490                  		bsr.w	ShowVDPGraphics
000031B6 7000                       		moveq	#0,d0
000031B8 6100 F148                  		bsr.w	PalLoad2	; load Sega logo pallet
000031BC 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031C2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000031C8 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000031CE 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000031D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D8 0000 0040                  		ori.b	#$40,d0
000031DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E2                            
000031E2                            Sega_WaitPallet:
000031E2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031E8 6100 FAD0                  		bsr.w	DelayProgram
000031EC 6100 F006                  		bsr.w	PalCycle_Sega
000031F0 66F0                       		bne.s	Sega_WaitPallet
000031F2                            
000031F2 103C 00E1                  		move.b	#$E1,d0
000031F6 6100 E3C8                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000031FA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003200 6100 FAB8                  		bsr.w	DelayProgram
00003204 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000320A                            
0000320A                            Sega_WaitEnd:
0000320A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003210 6100 FAA8                  		bsr.w	DelayProgram
00003214 4A78 F614                  		tst.w	($FFFFF614).w
00003218 6700                       		beq.s	Sega_GotoTitle
0000321A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003220 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003222                            
00003222                            Sega_GotoTitle:
00003222 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003228 4E75                       		rts	
0000322A                            ; ===========================================================================
0000322A                            
0000322A                            ; ---------------------------------------------------------------------------
0000322A                            ; Title	screen
0000322A                            ; ---------------------------------------------------------------------------
0000322A                            
0000322A                            TitleScreen:				; XREF: GameModeArray
0000322A 103C 00E4                  		move.b	#$E4,d0
0000322E 6100 E390                  		bsr.w	PlaySound_Special ; stop music
00003232 6100 EE08                  		bsr.w	Pal_FadeFrom
00003236 6100 E5CA                  		bsr.w	ClearPLC
0000323A 46FC 2700                  		move	#$2700,sr
0000323E 6100 E336                  		bsr.w	SoundDriverLoad
00003242 4DF9 00C0 0004             		lea	($C00004).l,a6
00003248 3CBC 8004                  		move.w	#$8004,(a6)
0000324C 3CBC 8230                  		move.w	#$8230,(a6)
00003250 3CBC 8407                  		move.w	#$8407,(a6)
00003254 3CBC 9001                  		move.w	#$9001,(a6)
00003258 3CBC 9200                  		move.w	#$9200,(a6)
0000325C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003260 3CBC 8720                  		move.w	#$8720,(a6)
00003264 4238 F64E                  		clr.b	($FFFFF64E).w
00003268 6100 E27E                  		bsr.w	ClearScreen
0000326C 43F8 D000                  		lea	($FFFFD000).w,a1
00003270 7000                       		moveq	#0,d0
00003272 323C 07FF                  		move.w	#$7FF,d1
00003276                            
00003276                            Title_ClrObjRam:
00003276 22C0                       		move.l	d0,(a1)+
00003278 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000327C                            
0000327C                            ; gomer
0000327C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003286 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000328C 6100 E3D6                  		bsr.w	NemDec
00003290 7003                       		moveq	#3,d0		; load Sonic's pallet
00003292 6100 F052                  		bsr.w	PalLoad1
00003296                            
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032A2 303C 0000                  		move.w	#0,d0
000032A6 6100 E69A                  		bsr.w	EniDec
000032AA                            ; help how the fuck can i do this IT SHOWS NOTHING
000032AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000032B0 203C 4000 0003             		move.l	#$40000003,d0
000032B6 7227                       		moveq	#$27,d1
000032B8 741B                       		moveq	#$1B,d2
000032BA 6100 E388                  		bsr.w	ShowVDPGraphics
000032BE                            
000032BE                            
000032BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032C4 203C 6000 0003             		move.l	#$60000003,d0
000032CA 7227                       		moveq	#$27,d1
000032CC 741B                       		moveq	#$1B,d2
000032CE                            
000032CE 6100 ECC6                  		bsr.w	Pal_FadeTo
000032D2 6100 ED68                  		bsr.w	Pal_FadeFrom
000032D6                            
000032D6                            
000032D6 6100 E210                  		bsr.w	ClearScreen
000032DA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032E4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000032EA 6100 E378                  		bsr.w	NemDec
000032EE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000032F8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000032FE 6100 E364                  		bsr.w	NemDec
00003302 43F9 00FF 0000             		lea	($FF0000).l,a1
00003308 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000330E 303C 0000                  		move.w	#0,d0
00003312 6100 E62E                  		bsr.w	EniDec
00003316 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331C 203C 4000 0003             		move.l	#$40000003,d0
00003322 7227                       		moveq	#$27,d1
00003324 741B                       		moveq	#$1B,d2
00003326 6100 E31C                  		bsr.w	ShowVDPGraphics
0000332A 6100 ED10                  		bsr.w	Pal_FadeFrom
0000332E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003332 7000                       		moveq	#0,d0
00003334 323C 001F                  		move.w	#$1F,d1
00003338                            
00003338                            
00003338                            Title_ClrPallet:
00003338 22C0                       		move.l	d0,(a1)+
0000333A 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000333E                            
0000333E 7003                       		moveq	#3,d0		; load Sonic's pallet
00003340 6100 EFA4                  		bsr.w	PalLoad1
00003344 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000334A 4EB9 0000 0000             		jsr	ObjectsLoad
00003350 4EB9 0000 0000             		jsr	BuildSprites
00003356 6100 EC3E                  		bsr.w	Pal_FadeTo
0000335A 46FC 2700                  		move	#$2700,sr
0000335E 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003368 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000336E 6100 E2F4                  		bsr.w	NemDec
00003372 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000337C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003382 6100 E2E0                  		bsr.w	NemDec
00003386 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003390 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003396 6100 E2CC                  		bsr.w	NemDec
0000339A 4DF9 00C0 0000             		lea	($C00000).l,a6
000033A0 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033A8 4BF9 0000 05F4             		lea	(Art_Text).l,a5
000033AE 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033B2                            
000033B2                            Title_LoadText:
000033B2 2C9D                       		move.l	(a5)+,(a6)
000033B4 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000033B8                            
000033B8 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000033BE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000033C4 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000033CA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000033D0 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000033D6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000033DC 6100 0000                  		bsr.w	LevelSizeLoad
000033E0 6100 0000                  		bsr.w	DeformBgLayer
000033E4                            
000033E4 43F8 B000                  		lea	($FFFFB000).w,a1
000033E8 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000033EE 303C 0000                  		move.w	#0,d0
000033F2 6100 E54E                  		bsr.w	EniDec
000033F6 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000033FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003402 6100 E6BC                  		bsr.w	KosDec
00003406 6100 0000                  		bsr.w	LevelLayoutLoad
0000340A                            
0000340A 46FC 2700                  		move	#$2700,sr
0000340E 6100 E0D8                  		bsr.w	ClearScreen
00003412 4BF9 00C0 0004             		lea	($C00004).l,a5
00003418 4DF9 00C0 0000             		lea	($C00000).l,a6
0000341E 47F8 F708                  		lea	($FFFFF708).w,a3
00003422 49F8 A440                  		lea	($FFFFA440).w,a4
00003426 343C 6000                  		move.w	#$6000,d2
0000342A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000342E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003434 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000343A 303C 0000                  		move.w	#0,d0
0000343E 6100 E502                  		bsr.w	EniDec
00003442 43F9 00FF 0000             		lea	($FF0000).l,a1
00003448 203C 4206 0003             		move.l	#$42060003,d0
0000344E 7221                       		moveq	#$21,d1
00003450 7415                       		moveq	#$15,d2
00003452 6100 E1F0                  		bsr.w	ShowVDPGraphics
00003456 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003460 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003466 6100 E1FC                  		bsr.w	NemDec
0000346A 7001                       		moveq	#1,d0		; load title screen pallet
0000346C 6100 EE78                  		bsr.w	PalLoad1
00003470 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003474 6100 E14A                  		bsr.w	PlaySound_Special
00003478 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000347E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003484 43F8 D080                  		lea	($FFFFD080).w,a1
00003488 7000                       		moveq	#0,d0
0000348A 323C 000F                  		move.w	#$F,d1
0000348E                            
0000348E                            Title_ClrObjRam2:
0000348E 22C0                       		move.l	d0,(a1)+
00003490 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003494                            
00003494 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000349A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034A0 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034A6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034AC 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034B2 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000034B8 4EB9 0000 0000             		jsr	ObjectsLoad
000034BE 6100 0000                  		bsr.w	DeformBgLayer
000034C2 4EB9 0000 0000             		jsr	BuildSprites
000034C8 7000                       		moveq	#0,d0
000034CA 6100 E30A                  		bsr.w	LoadPLC2
000034CE 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034D4 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000034DA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000034DE 0000 0040                  		ori.b	#$40,d0
000034E2 33C0 00C0 0004             		move.w	d0,($C00004).l
000034E8 6100 EAAC                  		bsr.w	Pal_FadeTo
000034EC                            
000034EC                            loc_317C:
000034EC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034F2 6100 F7C6                  		bsr.w	DelayProgram
000034F6 4EB9 0000 0000             		jsr	ObjectsLoad
000034FC 6100 0000                  		bsr.w	DeformBgLayer
00003500 4EB9 0000 0000             		jsr	BuildSprites
00003506 6100 E678                  		bsr.w	PalCycle_Title
0000350A 6100 E304                  		bsr.w	RunPLC_RAM
0000350E 3038 D008                  		move.w	($FFFFD008).w,d0
00003512 5440                       		addq.w	#2,d0
00003514 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003518 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000351C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000351E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003524 4E75                       		rts	
00003526                            ; ===========================================================================
00003526                            
00003526                            Title_ChkRegion:
00003526 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000352A 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000352C 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003532 6000                       		bra.s	Title_EnterCheat
00003534                            ; ===========================================================================
00003534                            
00003534                            Title_RegionJ:				; XREF: Title_ChkRegion
00003534 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
0000353A                            
0000353A                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000353A 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000353E D0C0                       		adda.w	d0,a0
00003540 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003544 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003548 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000354A 6600                       		bne.s	loc_3210	; if not, branch
0000354C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003550 4A00                       		tst.b	d0
00003552 6600                       		bne.s	Title_CountC
00003554 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003558 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000355C E249                       		lsr.w	#1,d1
0000355E 0241 0003                  		andi.w	#3,d1
00003562 6700                       		beq.s	Title_PlayRing
00003564 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003568 6A00                       		bpl.s	Title_PlayRing
0000356A 7201                       		moveq	#1,d1
0000356C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003570                            
00003570                            Title_PlayRing:
00003570 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003576 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000357A 6100 E044                  		bsr.w	PlaySound_Special
0000357E 6000                       		bra.s	Title_CountC
00003580                            ; ===========================================================================
00003580                            
00003580                            loc_3210:				; XREF: Title_EnterCheat
00003580 4A00                       		tst.b	d0
00003582 6700                       		beq.s	Title_CountC
00003584 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000358A 6700                       		beq.s	Title_CountC
0000358C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003592                            
00003592                            Title_CountC:
00003592 1038 F605                  		move.b	($FFFFF605).w,d0
00003596 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000359A 6700                       		beq.s	loc_3230	; if not, branch
0000359C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035A0                            
000035A0                            loc_3230:
000035A0 4A78 F614                  		tst.w	($FFFFF614).w
000035A4 6700 0000                  		beq.w	Demo
000035A8                            		; (temporary until we have an actual options screen)
000035A8 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035AE 6700                       		beq.s	@notc
000035B0                            
000035B0 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035B4 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
000035BA 6D00                       		blt.s	@notoverflow
000035BC 11FC 0000 FFE8             		move.b	#0,(v_character).w
000035C2                            	@notoverflow:
000035C2 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C6 6100 DFF8                  		bsr.w	PlaySound_Special
000035CA                            	@notc:
000035CA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000035D0 6700 FF1A                  		beq.w	loc_317C	; if not, branch
000035D4                            
000035D4                            Title_ChkLevSel:
000035D4 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000035D8 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035DC 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035E2 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035E6                            		
000035E6                            		
000035E6 7002                       		moveq	#2,d0
000035E8 6100 ED18                  		bsr.w	PalLoad2	; load level select pallet
000035EC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000035F0 7000                       		moveq	#0,d0
000035F2 323C 00DF                  		move.w	#$DF,d1
000035F6                            
000035F6                            Title_ClrScroll:
000035F6 22C0                       		move.l	d0,(a1)+
000035F8 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000035FC                            
000035FC 21C0 F616                  		move.l	d0,($FFFFF616).w
00003600 46FC 2700                  		move	#$2700,sr
00003604 4DF9 00C0 0000             		lea	($C00000).l,a6
0000360A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003614 323C 03FF                  		move.w	#$3FF,d1
00003618                            
00003618                            Title_ClrVram:
00003618 2C80                       		move.l	d0,(a6)
0000361A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000361E                            
0000361E 6100 0000                  		bsr.w	LevSelTextLoad
00003622                            		
00003622                            		; sound test fix
00003622 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003626 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000362C                            		
0000362C 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003630 0C46 0014                  		cmpi.w	#$14,d6
00003634 6700                       		beq.s	@issndtst
00003636 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
0000363A                            	@issndtst:
0000363A 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000363E 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003642                            		
00003642 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003646 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000364E                            		
0000364E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003654 6700                       		beq.s	@issndtst2
00003656                            		
00003656 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
0000365C 6100 0000                  		bsr.w	CStringSlop
00003660 6000                       		bra.s	LevelSelect
00003662                            	@issndtst2:
00003662 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003668 6100 0000                  		bsr.w	CStringSlop
0000366C                            ; ---------------------------------------------------------------------------
0000366C                            ; Level	Select
0000366C                            ; ---------------------------------------------------------------------------
0000366C                            LevelSelect:
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F646                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	LevSelControls
0000367A 6100 E194                  		bsr.w	RunPLC_RAM
0000367E 4AB8 F680                  		tst.l	($FFFFF680).w
00003682 66E8                       		bne.s	LevelSelect
00003684 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000368A 67E0                       		beq.s	LevelSelect	; if not, branch
0000368C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003690 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003694 6600                       		bne.s	@dont	; if not, dont blow this place up
00003696                            			
00003696 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000369C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036A2 6100 F616                  		bsr.w	DelayProgram
000036A6                            	@dont:
000036A6 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036AA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036AC                            		
000036AC 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036B2 67B8                       		beq.s	LevelSelect	; if not, branch
000036B4                            		
000036B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000036BA 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000036BC                            		
000036BC 1038 FF84                  		move.b	($FFFFFF84).w,d0
000036C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000036C4                            		
000036C4 4EB9 0000 0000             		jsr		ShowNow_Playing
000036CA 60A0                       		bra.s	LevelSelect
000036CC                            ; ===========================================================================
000036CC                            
000036CC                            LevSel_SEGA:				; XREF: LevelSelect
000036CC 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
000036D2 4E75                       		rts	
000036D4                            ; ===========================================================================
000036D4                            
000036D4                            LevSel_Ending:				; XREF: LevelSelect
000036D4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000036DA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036E0 4E75                       		rts	
000036E2                            ; ===========================================================================
000036E2                            
000036E2                            LevSel_Credits:				; XREF: LevelSelect
000036E2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036E8 103C 0091                  		move.b	#$91,d0
000036EC 6100 DED2                  		bsr.w	PlaySound_Special ; play credits music
000036F0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000036F6 4E75                       		rts	
000036F8                            ; ===========================================================================
000036F8                            
000036F8                            LevSel_Level_SS:			; XREF: LevelSelect
000036F8 D040                       		add.w	d0,d0
000036FA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000036FE 6B00 FF6C                  		bmi.w	LevelSelect
00003702 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003706 6600                       		bne.s	LevSel_Level	; if not, branch
00003708 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000370E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003712 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003718 7000                       		moveq	#0,d0
0000371A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000371E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003722 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003726 4E75                       		rts	
00003728                            ; ===========================================================================
00003728                            
00003728                            LevSel_Level:				; XREF: LevSel_Level_SS
00003728 0240 3FFF                  		andi.w	#$3FFF,d0
0000372C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003730                            
00003730                            PlayLevel:				; XREF: ROM:00003246j ...
00003730 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003736 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000373C 7000                       		moveq	#0,d0
0000373E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003742 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003746 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000374A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000374E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003752 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003756 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000375A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000375E 103C 00E0                  		move.b	#$E0,d0
00003762 6100 DE5C                  		bsr.w	PlaySound_Special ; fade out music
00003766 4E75                       		rts	
00003768                            ; ===========================================================================
00003768                            ; ---------------------------------------------------------------------------
00003768                            ; Level	select - level pointers
00003768                            ; ---------------------------------------------------------------------------
00003768                            LSelectPointers:
00003768                            		incbin	misc\ls_point.bin
00003792                            		even
00003792                            ; ---------------------------------------------------------------------------
00003792                            ; Level	select codes
00003792                            ; ---------------------------------------------------------------------------
00003792                            LevelSelectCode_J:
00003792                            		incbin	misc\ls_jcode.bin
00003798                            		even
00003798                            
00003798                            LevelSelectCode_US:
00003798                            		incbin	misc\ls_ucode.bin
0000379E                            		even
0000379E                            ; ===========================================================================
0000379E                            
0000379E                            ; ---------------------------------------------------------------------------
0000379E                            ; Demo mode
0000379E                            ; ---------------------------------------------------------------------------
0000379E                            
0000379E                            Demo:					; XREF: TitleScreen
0000379E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037A4                            
000037A4                            loc_33B6:				; XREF: loc_33E4
000037A4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037AA 6100 F50E                  		bsr.w	DelayProgram
000037AE 6100 0000                  		bsr.w	DeformBgLayer
000037B2 6100 E3AC                  		bsr.w	PalCycle_Load
000037B6 6100 E058                  		bsr.w	RunPLC_RAM
000037BA 3038 D008                  		move.w	($FFFFD008).w,d0
000037BE 5440                       		addq.w	#2,d0
000037C0 31C0 D008                  		move.w	d0,($FFFFD008).w
000037C4 0C40 1C00                  		cmpi.w	#$1C00,d0
000037C8 6500                       		bcs.s	loc_33E4
000037CA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000037D0 4E75                       		rts	
000037D2                            ; ===========================================================================
000037D2                            
000037D2                            loc_33E4:				; XREF: Demo
000037D2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000037D8 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000037DC 4A78 F614                  		tst.w	($FFFFF614).w
000037E0 6600 FFC2                  		bne.w	loc_33B6
000037E4 103C 00E0                  		move.b	#$E0,d0
000037E8 6100 DDD6                  		bsr.w	PlaySound_Special ; fade out music
000037EC 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000037F0 0240 0007                  		andi.w	#7,d0
000037F4 D040                       		add.w	d0,d0
000037F6 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000037FA 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000037FE 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003802 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003808 6500                       		bcs.s	loc_3422	; if yes, branch
0000380A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003810                            
00003810                            loc_3422:
00003810 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003816 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000381C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003820 6600                       		bne.s	Demo_Level	; if not, branch
00003822 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003828 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000382C 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003830                            
00003830                            Demo_Level:
00003830 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003836 7000                       		moveq	#0,d0
00003838 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000383C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003840 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003844 4E75                       		rts	
00003846                            ; ===========================================================================
00003846                            ; ---------------------------------------------------------------------------
00003846                            ; Levels used in demos
00003846                            ; ---------------------------------------------------------------------------
00003846                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000384E                            		even
0000384E                            
0000384E                            ; ---------------------------------------------------------------------------
0000384E                            ; Subroutine to	change what you're selecting in the level select
0000384E                            ; ---------------------------------------------------------------------------
0000384E                            
0000384E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000384E                            
0000384E                            
0000384E                            LevSelControls:				; XREF: LevelSelect
0000384E 1238 F605                  		move.b	($FFFFF605).w,d1
00003852 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003856 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003858 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000385C 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003860                            
00003860                            LevSel_UpDown:
00003860 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003866 1238 F604                  		move.b	($FFFFF604).w,d1
0000386A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000386E 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003872 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003876 0801 0000                  		btst	#0,d1		; is up	pressed?
0000387A 6700                       		beq.s	LevSel_Down	; if not, branch
0000387C 5346                       		subq.w	#1,d6		; move up 1 selection
0000387E 6400                       		bcc.s	LevSel_Down
00003880 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003882                            
00003882                            LevSel_Down:
00003882 0801 0001                  		btst	#1,d1		; is down pressed?
00003886 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003888 5246                       		addq.w	#1,d6		; move down 1 selection
0000388A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000388E 6500                       		bcs.s	LevSel_Refresh
00003890 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003892 6000                       		bra.s	LevSel_Refresh
00003894                            		
00003894                            LevSel_LR:
00003894 0801 0002                  		btst	#2,d1		; is left pressed?
00003898 6700                       		beq.s	LevSel_Right	; if not, branch
0000389A 0446 0000                  		sub.w	#lsrow2size,d6
0000389E 64E2                       		bcc.s	LevSel_Down
000038A0 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038A4                            LevSel_Right:
000038A4 0801 0003                  		btst	#3,d1		; is right pressed?
000038A8 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038AA 0646 0000                  		add.w	#lsrow1size,d6
000038AE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038B2 6500                       		bcs.s	LevSel_Refresh
000038B4 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000038B8                            ; ===========================================================================
000038B8                            LevSel_Refresh:
000038B8                            		
000038B8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038BC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038C0                            		
000038C0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038C6 6600                       		bne.s	@exitsndtest
000038C8                            		
000038C8 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000038CC 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000038D2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038DA 6100 0000                  		bsr.w	CStringSlop
000038DE                            	@exitsndtest:
000038DE                            	
000038DE 363C C65F                  		move.w	#$C680-$21,d3
000038E2 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038E6 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038EA                            		
000038EA 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000038F0 6600                       		bne.s	@entersndtest
000038F2                            		
000038F2 363C C65F                  		move.w	#$C680-$21,d3
000038F6 43F9 0000 0000             		lea	(Controls_SND).l,a1
000038FC 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003904 6100 0000                  		bsr.w	CStringSlop
00003908                            	@entersndtest:
00003908 4E75                       		rts	
0000390A                            		
0000390A                            LevSel_SndTest:				; XREF: LevSelControls
0000390A 1238 F605                  		move.b	($FFFFF605).w,d1
0000390E 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003912 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003914 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000391A 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000391E                            		
0000391E 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003922 0801 0002                  		btst	#2,d1		; is left pressed?
00003926 6700                       		beq.s	SndTest_Right	; if not, branch
00003928 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000392A                            		; no need the fact it's a byte does the trick
0000392A                            
0000392A                            SndTest_Right:
0000392A 0801 0003                  		btst	#3,d1		; is right pressed?
0000392E 6700                       		beq.s	SndTest_A	; if not, branch
00003930 5200                       		addq.b	#1,d0		; add 1	to sound test
00003932                            		; same here
00003932                            		
00003932                            SndTest_A:
00003932 0801 0006                  		btst	#6,d1		; is A pressed?
00003936 6700                       		beq.s	SndTest_B	; if not, branch
00003938 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000393A 5100                       		subq.b	#8,d0
0000393C                            		
0000393C                            SndTest_B:
0000393C 0801 0004                  		btst	#4,d1		; is B pressed?
00003940 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003942 5000                       		addq.b	#8,d0		; add $10 to sound test
00003944 5000                       		addq.b	#8,d0
00003946                            
00003946                            SndTest_Refresh:
00003946 363C C65F                  		move.w	#$C680-$21,d3
0000394A 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000394E 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003952                            
00003952                            LevSel_NoMove:
00003952 4E75                       		rts	
00003954                            ; End of function LevSelControls
00003954                            
00003954                            ; ---------------------------------------------------------------------------
00003954                            ; Subroutine to load level select text
00003954                            ; ---------------------------------------------------------------------------
00003954                            
00003954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003954                            
00003954                            LevSelTextLoad_loop:
00003954 2D44 0004                  		move.l	d4,4(a6)
00003958 6100 0000                  		bsr.w	LevSel_ChgLine
0000395C 0684 0080 0000             		addi.l	#$800000,d4
00003962 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003966 4E75                       		rts
00003968                            LevSelTextLoad:				; XREF: TitleScreen
00003968 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000396E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003974 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003978 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000397E                            		
0000397E 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003982 61D0                       		bsr.s	LevSelTextLoad_loop
00003984                            		
00003984                            		
00003984 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
0000398A 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000398E 61C4                       		bsr.s	LevSelTextLoad_loop
00003990 363C C65F                  		move.w	#$C680-$21,d3
00003994                            		
00003994                            LevSelHighlightCode:
00003994 4DF9 00C0 0000             		lea	($C00000).l,a6
0000399A 7000                       		moveq	#0,d0
0000399C 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039A0 3200                       		move.w	d0,d1
000039A2 283C 6086 0003             		move.l	#lsscrpos,d4
000039A8                            		
000039A8 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039AC 6D00                       		blt.s	@notsecond
000039AE                            		
000039AE 0440 0000                  		sub.w	#lsrow1size,d0
000039B2 0684 0024 0000             		addi.l	#lsoff,d4
000039B8                            	@notsecond:
000039B8 EF48                       		lsl.w	#7,d0
000039BA 4840                       		swap	d0
000039BC D880                       		add.l	d0,d4
000039BE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039C4 E749                       		lsl.w	#3,d1
000039C6 D241                       		add.w	d1,d1
000039C8 D2C1                       		adda.w	d1,a1
000039CA 2D44 0004                  		move.l	d4,4(a6)
000039CE 6100 0000                  		bsr.w	LevSel_ChgLine
000039D2 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000039D8 6700                       		beq.s	LevSelSndTest
000039DA 4E75                       		rts
000039DC                            
000039DC                            LevSelSndTest:
000039DC 0643 0030                  		add.w	#$30,d3
000039E0 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000039EA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039EE 1400                       		move.b	d0,d2
000039F0 E808                       		lsr.b	#4,d0
000039F2 6100 0000                  		bsr.w	LevSel_ChgSnd
000039F6 1002                       		move.b	d2,d0
000039F8 6100 0000                  		bsr.w	LevSel_ChgSnd
000039FC 4E75                       		rts	
000039FE                            ; End of function LevSelTextLoad
000039FE                            
000039FE                            
000039FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039FE                            
000039FE                            
000039FE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000039FE 0240 000F                  		andi.w	#$F,d0
00003A02 0C00 000A                  		cmpi.b	#$A,d0
00003A06 6500                       		bcs.s	loc_3580
00003A08 5E00                       		addi.b	#7,d0
00003A0A                            
00003A0A                            loc_3580:
00003A0A D043                       		add.w	d3,d0
00003A0C 3C80                       		move.w	d0,(a6)
00003A0E 4E75                       		rts	
00003A10                            ; End of function LevSel_ChgSnd
00003A10                            
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A10 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A12                            
00003A12                            @loop:
00003A12 7000                       		moveq	#0,d0
00003A14 1019                       		move.b	(a1)+,d0
00003A16 0C00 0020                  		cmpi.b	#$20,d0
00003A1A 6E00                       		bgt.s	@draw
00003A1C 3CBC 0000                  		move.w	#0,(a6)
00003A20 51CA FFF0                  		dbf	d2,@loop
00003A24 4E75                       		rts	
00003A26                            ; ===========================================================================
00003A26                            
00003A26                            @draw:				; XREF: LevSel_ChgLine
00003A26 D043                       		add.w	d3,d0
00003A28 3C80                       		move.w	d0,(a6)
00003A2A 51CA FFE6                  		dbf	d2,@loop
00003A2E 4E75                       		rts	
00003A30                            ; End of function LevSel_ChgLine
00003A30                            		
00003A30                            CStringSlop_draw:
00003A30 D043                       		add.w	d3,d0
00003A32 3C80                       		move.w	d0,(a6)
00003A34                            CStringSlop:				; XREF: LevSelTextLoad
00003A34 7000                       		moveq	#0,d0
00003A36 1019                       		move.b	(a1)+,d0
00003A38 0C00 0020                  		cmpi.b	#$20,d0
00003A3C 6EF2                       		bgt.s	CStringSlop_draw
00003A3E                            		
00003A3E 0C00 0001                  		cmpi.b	#1,d0
00003A42 6700                       		beq.s	@InsertSpaces
00003A44 6500                       		blo.s	@end
00003A46                            		
00003A46 3CBC 0000                  		move.w	#0,(a6)
00003A4A 60E8                       		bra.s	CStringSlop
00003A4C                            	@end:
00003A4C 4E75                       		rts
00003A4E                            	@InsertSpaces:
00003A4E 7000                       		moveq	#0,d0
00003A50 1019                       		move.b	(a1)+,d0
00003A52                            		
00003A52                            	@insert:
00003A52 3CBC 0000                  		move.w	#0,(a6)
00003A56 51C8 FFFA                  		dbf.w	d0,@insert
00003A5A 60D8                       		bra.s	CStringSlop
00003A5C                            ; End of function LevSel_ChgLine
00003A5C                            
00003A5C                            ; ===========================================================================
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            LevelMenuText:	
00003A5C 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A6C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A7C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A8C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A9C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AAC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ABC 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003ACC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ADC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AEC 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003AFC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B0C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B1C                            LMTSecondRow:
00003B1C 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B2C 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B3C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B4C 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B5C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B6C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B7C 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B8C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B9C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003BAC 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003BBC 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003BCC                            LMTSelectableEnd:
00003BCC 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003BDC                            LMTEnd:
00003BDC                            
00003BDC                            Now_Playing:
00003BDC 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003BEC                            		even
00003BEC                            NP_Track:
00003BEC 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003BF4                            		even
00003BF4                            NP_SFX:
00003BF4 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003BFC                            		even
00003BFC                            
00003BFC                            ShowNow_Playing:
00003BFC 1C00                       		move.b	d0,d6
00003BFE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C02 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C06 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C0C 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C14 6100 FE1E                  		bsr.w	CStringSlop
00003C18                            		
00003C18 43FA FFD2                  		lea	NP_Track(pc),a1
00003C1C 0C06 00A0                  		cmpi.b	#$A0,d6
00003C20 6D00                       		blt.s	@track
00003C22                            		
00003C22 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C26                            	@track:
00003C26 6100 FE0C                  		bsr.w	CStringSlop
00003C2A                            		
00003C2A 0643 0030                  		add.w	#$30,d3
00003C2E 1006                       		move.b	d6,d0
00003C30 1400                       		move.b	d0,d2
00003C32 E808                       		lsr.b	#4,d0
00003C34 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C38 1002                       		move.b	d2,d0
00003C3A 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C3E 4E75                       		rts	
00003C40                            
00003C40                            ; 1 is insert spaces btw
00003C40                            Controls_Normal:
00003C40 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C4C                            		even		
00003C4C                            Controls_SND:
00003C4C 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C72 00                         		even
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            ; Music	playlist
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            MusicList1:	incbin	misc\muslist1.bin
00003C7A                            		even
00003C7A                            MusicList2:	incbin	misc\muslist2.bin
00003C80                            		even
00003C80                            MusicList3:	incbin	misc\muslist3.bin
00003C86                            		even
00003C86                            MusicList4:	incbin	misc\muslist4.bin
00003C8C                            		even
00003C8C                            ; ===========================================================================
00003C8C                            
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            ; Level
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            
00003C8C                            Level:					; XREF: GameModeArray
00003C8C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C92 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C96 6B00                       		bmi.s	loc_37B6
00003C98 103C 00E0                  		move.b	#$E0,d0
00003C9C 6100 D922                  		bsr.w	PlaySound_Special ; fade out music
00003CA0                            
00003CA0                            loc_37B6:
00003CA0 6100 DB60                  		bsr.w	ClearPLC
00003CA4 6100 E396                  		bsr.w	Pal_FadeFrom
00003CA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CAC 6B00                       		bmi.s	Level_ClrRam
00003CAE 46FC 2700                  		move	#$2700,sr
00003CB2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003CBC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003CC2 6100 D9A0                  		bsr.w	NemDec
00003CC6 46FC 2300                  		move	#$2300,sr
00003CCA 7000                       		moveq	#0,d0
00003CCC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CD0 E948                       		lsl.w	#4,d0
00003CD2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CD8 45F2 0000                  		lea	(a2,d0.w),a2
00003CDC 7000                       		moveq	#0,d0
00003CDE 1012                       		move.b	(a2),d0
00003CE0 6700                       		beq.s	loc_37FC
00003CE2 6100 DAC0                  		bsr.w	LoadPLC		; load level patterns
00003CE6                            
00003CE6                            loc_37FC:
00003CE6 7001                       		moveq	#1,d0
00003CE8 6100 DABA                  		bsr.w	LoadPLC		; load standard	patterns
00003CEC                            
00003CEC                            Level_ClrRam:
00003CEC 43F8 D000                  		lea	($FFFFD000).w,a1
00003CF0 7000                       		moveq	#0,d0
00003CF2 323C 07FF                  		move.w	#$7FF,d1
00003CF6                            
00003CF6                            Level_ClrObjRam:
00003CF6 22C0                       		move.l	d0,(a1)+
00003CF8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003CFC                            
00003CFC 43F8 F628                  		lea	($FFFFF628).w,a1
00003D00 7000                       		moveq	#0,d0
00003D02 323C 0015                  		move.w	#$15,d1
00003D06                            
00003D06                            Level_ClrVars:
00003D06 22C0                       		move.l	d0,(a1)+
00003D08 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003D0C                            
00003D0C 43F8 F700                  		lea	($FFFFF700).w,a1
00003D10 7000                       		moveq	#0,d0
00003D12 323C 003F                  		move.w	#$3F,d1
00003D16                            
00003D16                            Level_ClrVars2:
00003D16 22C0                       		move.l	d0,(a1)+
00003D18 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D1C                            
00003D1C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D20 7000                       		moveq	#0,d0
00003D22 323C 0047                  		move.w	#$47,d1
00003D26                            
00003D26                            Level_ClrVars3:
00003D26 22C0                       		move.l	d0,(a1)+
00003D28 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D2C                            
00003D2C 46FC 2700                  		move	#$2700,sr
00003D30 6100 D7B6                  		bsr.w	ClearScreen
00003D34 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D3A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D3E 3CBC 8230                  		move.w	#$8230,(a6)
00003D42 3CBC 8407                  		move.w	#$8407,(a6)
00003D46 3CBC 857C                  		move.w	#$857C,(a6)
00003D4A 3CBC 9001                  		move.w	#$9001,(a6)
00003D4E 3CBC 8004                  		move.w	#$8004,(a6)
00003D52 3CBC 8720                  		move.w	#$8720,(a6)
00003D56 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D5C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D60 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D66 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D68 3CBC 8014                  		move.w	#$8014,(a6)
00003D6C 7000                       		moveq	#0,d0
00003D6E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D72 D040                       		add.w	d0,d0
00003D74 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D7A 3031 0000                  		move.w	(a1,d0.w),d0
00003D7E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D82 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D86 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D8A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D8E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D92 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D98 6000 0000                  		bra.w	Level_LoadPal
00003D9C                            Player_Palette:
00003D9C                            		; normal, lz, sbz, blank
00003D9C 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003DA4                            		
00003DA4 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003DAC 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003DB4                            		; add more player palettes
00003DB4                            Level_LoadPal:
00003DB4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003DBA 46FC 2300                  		move	#$2300,sr
00003DBE                            
00003DBE 7200                       		moveq	#0,d1
00003DC0 1238 FFE8                  		move.b	(v_character),d1
00003DC4 D241                       		add.w	d1,d1
00003DC6 D241                       		add.w	d1,d1
00003DC8 D241                       		add.w	d1,d1
00003DCA 303B 10D0                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003DCE                            		
00003DCE 6100 E532                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003DD2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DD8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003DDA 303B 10C2                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003DDE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DE4 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DE6 303B 10B8                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003DEA                            
00003DEA                            Level_WaterPal:
00003DEA 6100 E52E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003DEE 4A38 FE30                  		tst.b	($FFFFFE30).w
00003DF2 6700                       		beq.s	Level_GetBgm
00003DF4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003DFA                            
00003DFA                            ; NineKode begins here - How to play different songs on different acts
00003DFA                             
00003DFA                            Level_GetBgm:
00003DFA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFE 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003E02 7000                       		moveq	#0,d0
00003E04 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E08                             
00003E08 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003E0E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003E10 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003E16 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E18                             
00003E18                            Level_GetBgm2:
00003E18 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003E1E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003E20 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003E26 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E28                             
00003E28                            Level_GetBgm3:
00003E28 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003E2E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003E30 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003E36 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E38                             
00003E38                            Level_GetBgm4:
00003E38 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E3E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E40 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E46                             
00003E46                            Level_PlayBgm:
00003E46 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E4A 6100 D76E                  		bsr.w	PlaySound	; play music
00003E4E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E54                             
00003E54                            ; NineKode ends here
00003E54                            
00003E54                            Level_TtlCard:
00003E54 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E5A 6100 EE5E                  		bsr.w	DelayProgram
00003E5E 4EB9 0000 0000             		jsr	ObjectsLoad
00003E64 4EB9 0000 0000             		jsr	BuildSprites
00003E6A 6100 D9A4                  		bsr.w	RunPLC_RAM
00003E6E 3038 D108                  		move.w	($FFFFD108).w,d0
00003E72 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E76 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E78 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E7C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E7E 4EB9 0000 0000             		jsr	Hud_Base
00003E84                            
00003E84                            loc_3946:
00003E84 7003                       		moveq	#3,d0
00003E86 6100 E45E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E8A 6100 0000                  		bsr.w	LevelSizeLoad
00003E8E 6100 0000                  		bsr.w	DeformBgLayer
00003E92 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E98 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E9C 6100 0000                  		bsr.w	LoadTilesFromStart
00003EA0 4EB9 0000 0000             		jsr	FloorLog_Unk
00003EA6 6100 0000                  		bsr.w	ColIndexLoad
00003EAA 6100 0000                  		bsr.w	LZWaterEffects
00003EAE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003EB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EB8 6B00                       		bmi.s	Level_ChkDebug
00003EBA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003EC0                            
00003EC0                            Level_ChkDebug:
00003EC0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003EC4 6700                       		beq.s	Level_ChkWater	; if not, branch
00003EC6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003ECC 6700                       		beq.s	Level_ChkWater	; if not, branch
00003ECE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003ED4                            
00003ED4                            Level_ChkWater:
00003ED4 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003EDA 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EE0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EE6 6600                       		bne.s	Level_LoadObj	; if not, branch
00003EE8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003EEE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003EF4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003EFA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003F00                            
00003F00                            Level_LoadObj:
00003F00 4EB9 0000 0000             		jsr	ObjPosLoad
00003F06 4EB9 0000 0000             		jsr	ObjectsLoad
00003F0C 4EB9 0000 0000             		jsr	BuildSprites
00003F12 7000                       		moveq	#0,d0
00003F14 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003F18 6600                       		bne.s	loc_39E8	; if yes, branch
00003F1A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F1E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F22 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003F26                            
00003F26                            loc_39E8:
00003F26 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003F2A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003F2E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003F32 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003F36                            		; move.b	d0,($FFFFFE2F).w
00003F36 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F3C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F40 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F44 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F48 6100 0000                  		bsr.w	OscillateNumInit
00003F4C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F52 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F58 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F5E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F64 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F6A 7000                       		moveq	#0,d0
00003F6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F70 E548                       		lsl.w	#2,d0
00003F72 2271 0000                  		movea.l	(a1,d0.w),a1
00003F76 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F7A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F7C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F82 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F86 5340                       		subq.w	#1,d0
00003F88 E548                       		lsl.w	#2,d0
00003F8A 2271 0000                  		movea.l	(a1,d0.w),a1
00003F8E                            
00003F8E                            Level_Demo:
00003F8E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F94 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F98 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FA2 6A00                       		bpl.s	Level_ChkWaterPal
00003FA4 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003FAA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003FB0 6600                       		bne.s	Level_ChkWaterPal
00003FB2 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003FB8                            
00003FB8                            Level_ChkWaterPal:
00003FB8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003FBE 6600                       		bne.s	Level_Delay	; if not, branch
00003FC0 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003FC2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003FC8 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003FCA 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003FCC                            
00003FCC                            Level_WaterPal2:
00003FCC 6100 E368                  		bsr.w	PalLoad4_Water
00003FD0                            
00003FD0                            Level_Delay:
00003FD0 323C 0003                  		move.w	#3,d1
00003FD4                            
00003FD4                            Level_DelayLoop:
00003FD4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FDA 6100 ECDE                  		bsr.w	DelayProgram
00003FDE 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003FE2                            
00003FE2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003FE8 6100 DFB2                  		bsr.w	Pal_FadeTo2
00003FEC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FF0 6B00                       		bmi.s	Level_ClrCardArt
00003FF2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003FF6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003FFA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003FFE 5838 D164                  		addq.b	#4,($FFFFD164).w
00004002 6000                       		bra.s	Level_StartGame
00004004                            ; ===========================================================================
00004004                            
00004004                            Level_ClrCardArt:
00004004 7002                       		moveq	#2,d0
00004006 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000400C 7000                       		moveq	#0,d0
0000400E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004012 0640 0015                  		addi.w	#$15,d0
00004016 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000401C                            
0000401C                            Level_StartGame:
0000401C 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004022                            
00004022                            ; ---------------------------------------------------------------------------
00004022                            ; Main level loop (when	all title card and loading sequences are finished)
00004022                            ; ---------------------------------------------------------------------------
00004022                            
00004022                            Level_MainLoop:
00004022 6100 D5A8                  		bsr.w	PauseGame
00004026 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000402C 6100 EC8C                  		bsr.w	DelayProgram
00004030 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004034 6100 0000                  		bsr.w	MoveSonicInDemo
00004038 6100 0000                  		bsr.w	LZWaterEffects
0000403C 4EB9 0000 0000             		jsr	ObjectsLoad
00004042 4A78 FE08                  		tst.w	($FFFFFE08).w
00004046 6600                       		bne.s	loc_3B10
00004048 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000404E 6400                       		bcc.s	loc_3B14
00004050                            
00004050                            loc_3B10:
00004050 6100 0000                  		bsr.w	DeformBgLayer
00004054                            
00004054                            loc_3B14:
00004054 4EB9 0000 0000             		jsr	BuildSprites
0000405A 4EB9 0000 0000             		jsr	ObjPosLoad
00004060 6100 DAFE                  		bsr.w	PalCycle_Load
00004064 6100 D7AA                  		bsr.w	RunPLC_RAM
00004068 6100 0000                  		bsr.w	OscillateNumDo
0000406C 6100 0000                  		bsr.w	ChangeRingFrame
00004070 6100 0000                  		bsr.w	SignpostArtLoad
00004074 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000407A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000407C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004080 6600 FC0A                  		bne.w	Level		; if yes, branch
00004084 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000408A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000408E 4E75                       		rts	
00004090                            ; ===========================================================================
00004090                            
00004090                            Level_ChkDemo:				; XREF: Level_MainLoop
00004090 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004094 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004096 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000409A 6700                       		beq.s	Level_EndDemo	; if not, branch
0000409C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040A2 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000040A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040AC 4E75                       		rts	
000040AE                            ; ===========================================================================
000040AE                            
000040AE                            Level_EndDemo:				; XREF: Level_ChkDemo
000040AE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000040B4 6600                       		bne.s	loc_3B88	; if not, branch
000040B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040C0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000040C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000040C8                            
000040C8                            loc_3B88:
000040C8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000040CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000040D4 4278 F794                  		clr.w	($FFFFF794).w
000040D8                            
000040D8                            loc_3B98:
000040D8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040DE 6100 EBDA                  		bsr.w	DelayProgram
000040E2 6100 0000                  		bsr.w	MoveSonicInDemo
000040E6 4EB9 0000 0000             		jsr	ObjectsLoad
000040EC 4EB9 0000 0000             		jsr	BuildSprites
000040F2 4EB9 0000 0000             		jsr	ObjPosLoad
000040F8 5378 F794                  		subq.w	#1,($FFFFF794).w
000040FC 6A00                       		bpl.s	loc_3BC8
000040FE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004104 6100 DF56                  		bsr.w	Pal_FadeOut
00004108                            
00004108                            loc_3BC8:
00004108 4A78 F614                  		tst.w	($FFFFF614).w
0000410C 66CA                       		bne.s	loc_3B98
0000410E 4E75                       		rts	
00004110                            ; ===========================================================================
00004110                            ; ---------------------------------------------------------------------------
00004110                            ; Subroutine to	do special water effects in Labyrinth Zone
00004110                            ; ---------------------------------------------------------------------------
00004110                            
00004110                            LZWaterEffects:				; XREF: Level
00004110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004116 6600                       		bne.s	locret_3C28	; if not, branch
00004118 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000411E 6400                       		bcc.s	LZMoveWater
00004120 6100 0000                  		bsr.w	LZWindTunnels
00004124 6100 0000                  		bsr.w	LZWaterSlides
00004128 6100 0000                  		bsr.w	LZDynamicWater
0000412C                            
0000412C                            LZMoveWater:
0000412C 4238 F64E                  		clr.b	($FFFFF64E).w
00004130 7000                       		moveq	#0,d0
00004132 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004136 E248                       		lsr.w	#1,d0
00004138 D078 F648                  		add.w	($FFFFF648).w,d0
0000413C 31C0 F646                  		move.w	d0,($FFFFF646).w
00004140 3038 F646                  		move.w	($FFFFF646).w,d0
00004144 9078 F704                  		sub.w	($FFFFF704).w,d0
00004148 6400                       		bcc.s	loc_3C1A
0000414A 4A40                       		tst.w	d0
0000414C 6A00                       		bpl.s	loc_3C1A
0000414E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004154 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000415A                            
0000415A                            loc_3C1A:
0000415A 0C40 00DF                  		cmpi.w	#$DF,d0
0000415E 6500                       		bcs.s	loc_3C24
00004160 303C 00DF                  		move.w	#$DF,d0
00004164                            
00004164                            loc_3C24:
00004164 11C0 F625                  		move.b	d0,($FFFFF625).w
00004168                            
00004168                            locret_3C28:
00004168 4E75                       		rts	
0000416A                            ; ===========================================================================
0000416A                            ; ---------------------------------------------------------------------------
0000416A                            ; Labyrinth default water heights
0000416A                            ; ---------------------------------------------------------------------------
0000416A                            WaterHeight:	incbin	misc\lz_heigh.bin
00004172                            		even
00004172                            ; ===========================================================================
00004172                            
00004172                            ; ---------------------------------------------------------------------------
00004172                            ; Labyrinth dynamic water routines
00004172                            ; ---------------------------------------------------------------------------
00004172                            
00004172                            LZDynamicWater:				; XREF: LZWaterEffects
00004172 7000                       		moveq	#0,d0
00004174 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004178 D040                       		add.w	d0,d0
0000417A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000417E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004182 7200                       		moveq	#0,d1
00004184 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004188 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000418C 9078 F648                  		sub.w	($FFFFF648).w,d0
00004190 6700                       		beq.s	locret_3C5A
00004192 6400                       		bcc.s	loc_3C56
00004194 4441                       		neg.w	d1
00004196                            
00004196                            loc_3C56:
00004196 D378 F648                  		add.w	d1,($FFFFF648).w
0000419A                            
0000419A                            locret_3C5A:
0000419A 4E75                       		rts	
0000419C                            ; ===========================================================================
0000419C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000419E 0000                       		dc.w DynWater_LZ2-DynWater_Index
000041A0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000041A2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000041A4                            ; ===========================================================================
000041A4                            
000041A4                            DynWater_LZ1:				; XREF: DynWater_Index
000041A4 3038 F700                  		move.w	($FFFFF700).w,d0
000041A8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041AC 6600                       		bne.s	loc_3CD0
000041AE 323C 00B8                  		move.w	#$B8,d1
000041B2 0C40 0600                  		cmpi.w	#$600,d0
000041B6 6500                       		bcs.s	loc_3CB4
000041B8 323C 0108                  		move.w	#$108,d1
000041BC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000041C2 6500                       		bcs.s	loc_3CBA
000041C4 0C40 0C00                  		cmpi.w	#$C00,d0
000041C8 6500                       		bcs.s	loc_3CB4
000041CA 323C 0318                  		move.w	#$318,d1
000041CE 0C40 1080                  		cmpi.w	#$1080,d0
000041D2 6500                       		bcs.s	loc_3CB4
000041D4 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000041DA 323C 05C8                  		move.w	#$5C8,d1
000041DE 0C40 1380                  		cmpi.w	#$1380,d0
000041E2 6500                       		bcs.s	loc_3CB4
000041E4 323C 03A8                  		move.w	#$3A8,d1
000041E8 B278 F648                  		cmp.w	($FFFFF648).w,d1
000041EC 6600                       		bne.s	loc_3CB4
000041EE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000041F4                            
000041F4                            loc_3CB4:
000041F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            loc_3CBA:				; XREF: DynWater_LZ1
000041FA 0C40 0C80                  		cmpi.w	#$C80,d0
000041FE 65F4                       		bcs.s	loc_3CB4
00004200 323C 00E8                  		move.w	#$E8,d1
00004204 0C40 1500                  		cmpi.w	#$1500,d0
00004208 65EA                       		bcs.s	loc_3CB4
0000420A 323C 0108                  		move.w	#$108,d1
0000420E 60E4                       		bra.s	loc_3CB4
00004210                            ; ===========================================================================
00004210                            
00004210                            loc_3CD0:				; XREF: DynWater_LZ1
00004210 5302                       		subq.b	#1,d2
00004212 6600                       		bne.s	locret_3CF4
00004214 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000421A 6400                       		bcc.s	locret_3CF4
0000421C 323C 03A8                  		move.w	#$3A8,d1
00004220 0C40 1300                  		cmpi.w	#$1300,d0
00004224 6500                       		bcs.s	loc_3CF0
00004226 323C 0108                  		move.w	#$108,d1
0000422A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004230                            
00004230                            loc_3CF0:
00004230 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004234                            
00004234                            locret_3CF4:
00004234 4E75                       		rts	
00004236                            ; ===========================================================================
00004236                            
00004236                            DynWater_LZ2:				; XREF: DynWater_Index
00004236 3038 F700                  		move.w	($FFFFF700).w,d0
0000423A 323C 0328                  		move.w	#$328,d1
0000423E 0C40 0500                  		cmpi.w	#$500,d0
00004242 6500                       		bcs.s	loc_3D12
00004244 323C 03C8                  		move.w	#$3C8,d1
00004248 0C40 0B00                  		cmpi.w	#$B00,d0
0000424C 6500                       		bcs.s	loc_3D12
0000424E 323C 0428                  		move.w	#$428,d1
00004252                            
00004252                            loc_3D12:
00004252 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004256 4E75                       		rts	
00004258                            ; ===========================================================================
00004258                            
00004258                            DynWater_LZ3:				; XREF: DynWater_Index
00004258 3038 F700                  		move.w	($FFFFF700).w,d0
0000425C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004260 6600                       		bne.s	loc_3D5E
00004262 323C 0500                  		move.w	#$500,d1
00004266 0C40 0600                  		cmpi.w	#$600,d0
0000426A 6500                       		bcs.s	loc_3D54
0000426C 0C40 1B00                  		cmpi.w	#$1B00,d0
00004270 6500                       		bcs.s	loc_3D54
00004272 323C 0850                  		move.w	#$850,d1
00004276                            
00004276                            loc_3D54:
00004276 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000427A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000427E 4E75                       		rts	
00004280                            ; ===========================================================================
00004280                            
00004280                            loc_3D5E:				; XREF: DynWater_LZ3
00004280 5302                       		subq.b	#1,d2
00004282 6600                       		bne.s	loc_3DA8
00004284 323C 04C8                  		move.w	#$4C8,d1
00004288 0C40 0770                  		cmpi.w	#$770,d0
0000428C 6500                       		bcs.s	loc_3DA2
0000428E 323C 0308                  		move.w	#$308,d1
00004292 0C40 1400                  		cmpi.w	#$1400,d0
00004296 6500                       		bcs.s	loc_3DA2
00004298 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000429E 6700                       		beq.s	loc_3D8E
000042A0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000042A6 6400                       		bcc.s	loc_3D8E
000042A8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000042AE 6400                       		bcc.s	loc_3DA2
000042B0                            
000042B0                            loc_3D8E:
000042B0 323C 0508                  		move.w	#$508,d1
000042B4 31C1 F648                  		move.w	d1,($FFFFF648).w
000042B8 0C40 1770                  		cmpi.w	#$1770,d0
000042BC 6500                       		bcs.s	loc_3DA2
000042BE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000042C4                            
000042C4                            loc_3DA2:
000042C4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042C8 4E75                       		rts	
000042CA                            ; ===========================================================================
000042CA                            
000042CA                            loc_3DA8:
000042CA 5302                       		subq.b	#1,d2
000042CC 6600                       		bne.s	loc_3DD2
000042CE 323C 0508                  		move.w	#$508,d1
000042D2 0C40 1860                  		cmpi.w	#$1860,d0
000042D6 6500                       		bcs.s	loc_3DCC
000042D8 323C 0188                  		move.w	#$188,d1
000042DC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042E0 6400                       		bcc.s	loc_3DC6
000042E2 B278 F648                  		cmp.w	($FFFFF648).w,d1
000042E6 6600                       		bne.s	loc_3DCC
000042E8                            
000042E8                            loc_3DC6:
000042E8 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000042EE                            
000042EE                            loc_3DCC:
000042EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042F2 4E75                       		rts	
000042F4                            ; ===========================================================================
000042F4                            
000042F4                            loc_3DD2:
000042F4 5302                       		subq.b	#1,d2
000042F6 6600                       		bne.s	loc_3E0E
000042F8 323C 0188                  		move.w	#$188,d1
000042FC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004300 6500                       		bcs.s	loc_3E04
00004302 323C 0900                  		move.w	#$900,d1
00004306 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000430A 6500                       		bcs.s	loc_3E04
0000430C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004312 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004318 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000431E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004324 4E75                       		rts	
00004326                            ; ===========================================================================
00004326                            
00004326                            loc_3E04:
00004326 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000432A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000432E 4E75                       		rts	
00004330                            ; ===========================================================================
00004330                            
00004330                            loc_3E0E:
00004330 0C40 1E00                  		cmpi.w	#$1E00,d0
00004334 6500                       		bcs.s	locret_3E1A
00004336 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000433C                            
0000433C                            locret_3E1A:
0000433C 4E75                       		rts	
0000433E                            ; ===========================================================================
0000433E                            
0000433E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000433E 323C 0228                  		move.w	#$228,d1
00004342 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004348 6500                       		bcs.s	loc_3E2C
0000434A 323C 04C8                  		move.w	#$4C8,d1
0000434E                            
0000434E                            loc_3E2C:
0000434E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004352 4E75                       		rts
00004354                            
00004354                            ; ---------------------------------------------------------------------------
00004354                            ; Labyrinth Zone "wind tunnels"	subroutine
00004354                            ; ---------------------------------------------------------------------------
00004354                            
00004354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004354                            
00004354                            
00004354                            LZWindTunnels:				; XREF: LZWaterEffects
00004354 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004358 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000435C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004362 7000                       		moveq	#0,d0
00004364 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004368 E748                       		lsl.w	#3,d0
0000436A D4C0                       		adda.w	d0,a2
0000436C 7200                       		moveq	#0,d1
0000436E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004372 6600                       		bne.s	loc_3E56
00004374 7201                       		moveq	#1,d1
00004376 514A                       		subq.w	#8,a2
00004378                            
00004378                            loc_3E56:
00004378 43F8 D000                  		lea	($FFFFD000).w,a1
0000437C                            
0000437C                            LZWind_Loop:
0000437C 3029 0008                  		move.w	8(a1),d0
00004380 B052                       		cmp.w	(a2),d0
00004382 6500 0000                  		bcs.w	loc_3EF4
00004386 B06A 0004                  		cmp.w	4(a2),d0
0000438A 6400 0000                  		bcc.w	loc_3EF4
0000438E 3429 000C                  		move.w	$C(a1),d2
00004392 B46A 0002                  		cmp.w	2(a2),d2
00004396 6500                       		bcs.s	loc_3EF4
00004398 B46A 0006                  		cmp.w	6(a2),d2
0000439C 6400                       		bcc.s	loc_3EF4
0000439E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043A2 0200 003F                  		andi.b	#$3F,d0
000043A6 6600                       		bne.s	loc_3E90
000043A8 303C 00D0                  		move.w	#$D0,d0
000043AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
000043B2                            
000043B2                            loc_3E90:
000043B2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000043B6 6600 0000                  		bne.w	locret_3F0A
000043BA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000043C0 6400                       		bcc.s	loc_3F06
000043C2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000043C8 0440 0080                  		subi.w	#$80,d0
000043CC B052                       		cmp.w	(a2),d0
000043CE 6400                       		bcc.s	LZWind_Move
000043D0 7002                       		moveq	#2,d0
000043D2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000043D8 6600                       		bne.s	loc_3EBA
000043DA 4440                       		neg.w	d0
000043DC                            
000043DC                            loc_3EBA:
000043DC D169 000C                  		add.w	d0,$C(a1)
000043E0                            
000043E0                            LZWind_Move:
000043E0 5869 0008                  		addq.w	#4,8(a1)
000043E4 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000043EA 337C 0000 0012             		move.w	#0,$12(a1)
000043F0 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000043F6 08E9 0001 0022             		bset	#1,$22(a1)
000043FC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004402 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004404 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004408                            
00004408                            LZWind_MoveDown:
00004408 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000440E 6700                       		beq.s	locret_3EF2	; if not, branch
00004410 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004414                            
00004414                            locret_3EF2:
00004414 4E75                       		rts	
00004416                            ; ===========================================================================
00004416                            
00004416                            loc_3EF4:				; XREF: LZWindTunnels
00004416 504A                       		addq.w	#8,a2
00004418 51C9 FF62                  		dbf	d1,LZWind_Loop
0000441C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004420 6700                       		beq.s	locret_3F0A
00004422 137C 0000 001C             		move.b	#0,$1C(a1)
00004428                            
00004428                            loc_3F06:
00004428 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000442C                            
0000442C                            locret_3F0A:
0000442C 4E75                       		rts	
0000442E                            ; End of function LZWindTunnels
0000442E                            
0000442E                            ; ===========================================================================
0000442E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004436 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004448 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004456                            					; XREF: LZWindTunnels
00004456                            		even
00004456                            
00004456                            ; ---------------------------------------------------------------------------
00004456                            ; Labyrinth Zone water slide subroutine
00004456                            ; ---------------------------------------------------------------------------
00004456                            
00004456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004456                            
00004456                            
00004456                            LZWaterSlides:				; XREF: LZWaterEffects
00004456 43F8 D000                  		lea	($FFFFD000).w,a1
0000445A 0829 0001 0022             		btst	#1,$22(a1)
00004460 6600                       		bne.s	loc_3F6A
00004462 3029 000C                  		move.w	$C(a1),d0
00004466 E248                       		lsr.w	#1,d0
00004468 0240 0380                  		andi.w	#$380,d0
0000446C 1229 0008                  		move.b	8(a1),d1
00004470 0241 007F                  		andi.w	#$7F,d1
00004474 D041                       		add.w	d1,d0
00004476 45F8 A400                  		lea	($FFFFA400).w,a2
0000447A 1032 0000                  		move.b	(a2,d0.w),d0
0000447E 45FA 0000                  		lea	byte_3FCF(pc),a2
00004482 7206                       		moveq	#6,d1
00004484                            
00004484                            loc_3F62:
00004484 B022                       		cmp.b	-(a2),d0
00004486 57C9 FFFC                  		dbeq	d1,loc_3F62
0000448A 6700                       		beq.s	LZSlide_Move
0000448C                            
0000448C                            loc_3F6A:
0000448C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004490 6700                       		beq.s	locret_3F7A
00004492 337C 0005 003E             		move.w	#5,$3E(a1)
00004498 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000449C                            
0000449C                            locret_3F7A:
0000449C 4E75                       		rts	
0000449E                            ; ===========================================================================
0000449E                            
0000449E                            LZSlide_Move:				; XREF: LZWaterSlides
0000449E 0C41 0003                  		cmpi.w	#3,d1
000044A2 6400                       		bcc.s	loc_3F84
000044A4 4E71                       		nop	
000044A6                            
000044A6                            loc_3F84:
000044A6 08A9 0000 0022             		bclr	#0,$22(a1)
000044AC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000044B0 1340 0014                  		move.b	d0,$14(a1)
000044B4 6A00                       		bpl.s	loc_3F9A
000044B6 08E9 0000 0022             		bset	#0,$22(a1)
000044BC                            
000044BC                            loc_3F9A:
000044BC 4229 0015                  		clr.b	$15(a1)
000044C0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000044C6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000044CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044D0 0200 001F                  		andi.b	#$1F,d0
000044D4 6600                       		bne.s	locret_3FBE
000044D6 303C 00D0                  		move.w	#$D0,d0
000044DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
000044E0                            
000044E0                            locret_3FBE:
000044E0 4E75                       		rts	
000044E2                            ; End of function LZWaterSlides
000044E2                            
000044E2                            ; ===========================================================================
000044E2 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000044F1 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000044F2                            		even
000044F2                            
000044F2                            ; ---------------------------------------------------------------------------
000044F2                            ; Subroutine to	move Sonic in demo mode
000044F2                            ; ---------------------------------------------------------------------------
000044F2                            
000044F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044F2                            
000044F2                            
000044F2                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000044F2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044F6 6600                       		bne.s	MoveDemo_On	; if yes, branch
000044F8 4E75                       		rts	
000044FA                            ; ===========================================================================
000044FA                            
000044FA                            ; This is an unused subroutine for recording a demo
000044FA                            
000044FA                            MoveDemo_Record:
000044FA 43F9 0008 0000             		lea	($80000).l,a1
00004500 3038 F790                  		move.w	($FFFFF790).w,d0
00004504 D2C0                       		adda.w	d0,a1
00004506 1038 F604                  		move.b	($FFFFF604).w,d0
0000450A B011                       		cmp.b	(a1),d0
0000450C 6600                       		bne.s	loc_3FFA
0000450E 5229 0001                  		addq.b	#1,1(a1)
00004512 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004518 6700                       		beq.s	loc_3FFA
0000451A 4E75                       		rts	
0000451C                            ; ===========================================================================
0000451C                            
0000451C                            loc_3FFA:				; XREF: MoveDemo_Record
0000451C 1340 0002                  		move.b	d0,2(a1)
00004520 137C 0000 0003             		move.b	#0,3(a1)
00004526 5478 F790                  		addq.w	#2,($FFFFF790).w
0000452A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004530 4E75                       		rts	
00004532                            ; ===========================================================================
00004532                            
00004532                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004532 4A38 F604                  		tst.b	($FFFFF604).w
00004536 6A00                       		bpl.s	loc_4022
00004538 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000453C 6B00                       		bmi.s	loc_4022
0000453E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004544                            
00004544                            loc_4022:
00004544 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000454A 7000                       		moveq	#0,d0
0000454C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004550 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004556 6600                       		bne.s	loc_4038
00004558 7006                       		moveq	#6,d0
0000455A                            
0000455A                            loc_4038:
0000455A E548                       		lsl.w	#2,d0
0000455C 2271 0000                  		movea.l	(a1,d0.w),a1
00004560 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004564 6A00                       		bpl.s	loc_4056
00004566 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000456C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004570 5340                       		subq.w	#1,d0
00004572 E548                       		lsl.w	#2,d0
00004574 2271 0000                  		movea.l	(a1,d0.w),a1
00004578                            
00004578                            loc_4056:
00004578 3038 F790                  		move.w	($FFFFF790).w,d0
0000457C D2C0                       		adda.w	d0,a1
0000457E 1011                       		move.b	(a1),d0
00004580 41F8 F604                  		lea	($FFFFF604).w,a0
00004584 1200                       		move.b	d0,d1
00004586 1410                       		move.b	(a0),d2
00004588 B500                       		eor.b	d2,d0
0000458A 10C1                       		move.b	d1,(a0)+
0000458C C001                       		and.b	d1,d0
0000458E 10C0                       		move.b	d0,(a0)+
00004590 5338 F792                  		subq.b	#1,($FFFFF792).w
00004594 6400                       		bcc.s	locret_407E
00004596 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000459C 5478 F790                  		addq.w	#2,($FFFFF790).w
000045A0                            
000045A0                            locret_407E:
000045A0 4E75                       		rts	
000045A2                            ; End of function MoveSonicInDemo
000045A2                            
000045A2                            ; ===========================================================================
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            ; Demo sequence	pointers
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            Demo_Index:
000045A2                            	include "_inc\Demo pointers for intro.asm"
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            ; Demo sequence	pointers
000045A2                            ; ---------------------------------------------------------------------------
000045A2 0000 0000                  	dc.l Demo_GHZ
000045A6 0000 0000                  	dc.l Demo_GHZ
000045AA 0000 0000                  	dc.l Demo_MZ
000045AE 0000 0000                  	dc.l Demo_MZ
000045B2 0000 0000                  	dc.l Demo_SYZ
000045B6 0000 0000                  	dc.l Demo_SYZ
000045BA 0000 0000                  	dc.l Demo_SS
000045BE 0000 0000                  	dc.l Demo_SS
000045BE 0000 0000                  	dc.l Demo_SS
000045C2                            
000045C2                            Demo_EndIndex:
000045C2                            	include "_inc\Demo pointers for ending.asm"
000045C2                            ; ---------------------------------------------------------------------------
000045C2                            ; Demo (ending) sequence pointers
000045C2                            ; ---------------------------------------------------------------------------
000045C2 0000 0000                  	dc.l Demo_EndGHZ1
000045C6 0000 0000                  	dc.l Demo_EndMZ
000045CA 0000 0000                  	dc.l Demo_EndSYZ
000045CE 0000 0000                  	dc.l Demo_EndLZ
000045D2 0000 0000                  	dc.l Demo_EndSLZ
000045D6 0000 0000                  	dc.l Demo_EndSBZ1
000045DA 0000 0000                  	dc.l Demo_EndSBZ2
000045DE 0000 0000                  	dc.l Demo_EndGHZ2
000045DE 0000 0000                  	dc.l Demo_EndGHZ2
000045E2                            
000045E2 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000045F2 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004602 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004612                            		even
00004612                            
00004612                            ; ---------------------------------------------------------------------------
00004612                            ; Collision index loading subroutine
00004612                            ; ---------------------------------------------------------------------------
00004612                            
00004612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004612                            
00004612                            
00004612                            ColIndexLoad:				; XREF: Level
00004612 7000                       		moveq	#0,d0
00004614 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004618 E548                       		lsl.w	#2,d0
0000461A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004620 4E75                       		rts	
00004622                            ; End of function ColIndexLoad
00004622                            
00004622                            ; ===========================================================================
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Collision index pointers
00004622                            ; ---------------------------------------------------------------------------
00004622                            ColPointers:
00004622                            	include "_inc\Collision index pointers.asm"
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Collision index pointers
00004622                            ; ---------------------------------------------------------------------------
00004622 0000 0000                  	dc.l Col_GHZ
00004626 0000 0000                  	dc.l Col_LZ
0000462A 0000 0000                  	dc.l Col_MZ
0000462E 0000 0000                  	dc.l Col_SLZ
00004632 0000 0000                  	dc.l Col_SYZ
00004636 0000 0000                  	dc.l Col_SBZ
00004636 0000 0000                  	dc.l Col_SBZ
0000463A                            
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            ; Oscillating number subroutine
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            
0000463A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000463A                            
0000463A                            
0000463A                            OscillateNumInit:			; XREF: Level
0000463A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000463E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004644 7220                       		moveq	#$20,d1
00004646                            
00004646                            Osc_Loop:
00004646 32DA                       		move.w	(a2)+,(a1)+
00004648 51C9 FFFC                  		dbf	d1,Osc_Loop
0000464C 4E75                       		rts	
0000464E                            ; End of function OscillateNumInit
0000464E                            
0000464E                            ; ===========================================================================
0000464E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004652 0000 0080                  		dc.w 0,	$80
00004656 0000 0080                  		dc.w 0,	$80
0000465A 0000 0080                  		dc.w 0,	$80
0000465E 0000 0080                  		dc.w 0,	$80
00004662 0000 0080                  		dc.w 0,	$80
00004666 0000 0080                  		dc.w 0,	$80
0000466A 0000 0080                  		dc.w 0,	$80
0000466E 0000 0080                  		dc.w 0,	$80
00004672 0000 50F0                  		dc.w 0,	$50F0
00004676 011E 2080                  		dc.w $11E, $2080
0000467A 00B4 3080                  		dc.w $B4, $3080
0000467E 010E 5080                  		dc.w $10E, $5080
00004682 01C2 7080                  		dc.w $1C2, $7080
00004686 0276 0080                  		dc.w $276, $80
0000468A 0000 0080                  		dc.w 0,	$80
0000468E 0000                       		dc.w 0
00004690                            		even
00004690                            
00004690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004690                            
00004690                            
00004690                            OscillateNumDo:				; XREF: Level
00004690 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004696 6400                       		bcc.s	locret_41C4
00004698 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000469C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046A2 3619                       		move.w	(a1)+,d3
000046A4 720F                       		moveq	#$F,d1
000046A6                            
000046A6                            loc_4184:
000046A6 341A                       		move.w	(a2)+,d2
000046A8 381A                       		move.w	(a2)+,d4
000046AA 0303                       		btst	d1,d3
000046AC 6600                       		bne.s	loc_41A4
000046AE 3029 0002                  		move.w	2(a1),d0
000046B2 D042                       		add.w	d2,d0
000046B4 3340 0002                  		move.w	d0,2(a1)
000046B8 D151                       		add.w	d0,0(a1)
000046BA B811                       		cmp.b	0(a1),d4
000046BC 6200                       		bhi.s	loc_41BA
000046BE 03C3                       		bset	d1,d3
000046C0 6000                       		bra.s	loc_41BA
000046C2                            ; ===========================================================================
000046C2                            
000046C2                            loc_41A4:				; XREF: OscillateNumDo
000046C2 3029 0002                  		move.w	2(a1),d0
000046C6 9042                       		sub.w	d2,d0
000046C8 3340 0002                  		move.w	d0,2(a1)
000046CC D151                       		add.w	d0,0(a1)
000046CE B811                       		cmp.b	0(a1),d4
000046D0 6300                       		bls.s	loc_41BA
000046D2 0383                       		bclr	d1,d3
000046D4                            
000046D4                            loc_41BA:
000046D4 5849                       		addq.w	#4,a1
000046D6 51C9 FFCE                  		dbf	d1,loc_4184
000046DA 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046DE                            
000046DE                            locret_41C4:
000046DE 4E75                       		rts	
000046E0                            ; End of function OscillateNumDo
000046E0                            
000046E0                            ; ===========================================================================
000046E0 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046E4 0002 0018                  		dc.w 2,	$18
000046E8 0002 0020                  		dc.w 2,	$20
000046EC 0002 0030                  		dc.w 2,	$30
000046F0 0004 0020                  		dc.w 4,	$20
000046F4 0008 0008                  		dc.w 8,	8
000046F8 0008 0040                  		dc.w 8,	$40
000046FC 0004 0040                  		dc.w 4,	$40
00004700 0002 0050                  		dc.w 2,	$50
00004704 0002 0050                  		dc.w 2,	$50
00004708 0002 0020                  		dc.w 2,	$20
0000470C 0003 0030                  		dc.w 3,	$30
00004710 0005 0050                  		dc.w 5,	$50
00004714 0007 0070                  		dc.w 7,	$70
00004718 0002 0010                  		dc.w 2,	$10
0000471C 0002 0010                  		dc.w 2,	$10
00004720                            		even
00004720                            
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004720                            ; ---------------------------------------------------------------------------
00004720                            
00004720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004720                            
00004720                            
00004720                            ChangeRingFrame:			; XREF: Level
00004720 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004724 6A00                       		bpl.s	loc_421C
00004726 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000472C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004730 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004736                            
00004736                            loc_421C:
00004736 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000473A 6A00                       		bpl.s	loc_4232
0000473C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004742 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004746 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000474C                            
0000474C                            loc_4232:
0000474C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004750 6A00                       		bpl.s	loc_4250
00004752 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004758 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000475C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004762 6500                       		bcs.s	loc_4250
00004764 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000476A                            
0000476A                            loc_4250:
0000476A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000476E 6700                       		beq.s	locret_4272
00004770 7000                       		moveq	#0,d0
00004772 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004776 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000477A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000477E EF58                       		rol.w	#7,d0
00004780 0240 0003                  		andi.w	#3,d0
00004784 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004788 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000478C                            
0000478C                            locret_4272:
0000478C 4E75                       		rts	
0000478E                            ; End of function ChangeRingFrame
0000478E                            
0000478E                            ; ---------------------------------------------------------------------------
0000478E                            ; End-of-act signpost pattern loading subroutine
0000478E                            ; ---------------------------------------------------------------------------
0000478E                            
0000478E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000478E                            
0000478E                            
0000478E                            SignpostArtLoad:			; XREF: Level
0000478E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004792 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004796 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000479C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000479E 3038 F700                  		move.w	($FFFFF700).w,d0
000047A2 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047A6 0441 0100                  		subi.w	#$100,d1
000047AA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047AC 6D00                       		blt.s	Signpost_Exit	; if not, branch
000047AE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000047B2 6700                       		beq.s	Signpost_Exit
000047B4 B278 F728                  		cmp.w	($FFFFF728).w,d1
000047B8 6700                       		beq.s	Signpost_Exit
000047BA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000047BE 7012                       		moveq	#$12,d0
000047C0 6000 D014                  		bra.w	LoadPLC2	; load signpost	patterns
000047C4                            ; ===========================================================================
000047C4                            
000047C4                            Signpost_Exit:
000047C4 4E75                       		rts	
000047C6                            ; End of function SignpostArtLoad
000047C6                            
000047C6                            ; ===========================================================================
000047C6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004846                            Demo_MZ:	incbin	demodata\i_mz.bin
00004976                            Demo_SYZ:	incbin	demodata\i_syz.bin
000049F6                            Demo_SS:	incbin	demodata\i_ss.bin
00004AF6                            ; ===========================================================================
00004AF6                            
00004AF6                            ; ---------------------------------------------------------------------------
00004AF6                            ; Special Stage
00004AF6                            ; ---------------------------------------------------------------------------
00004AF6                            
00004AF6                            SpecialStage:				; XREF: GameModeArray
00004AF6 303C 00CA                  		move.w	#$CA,d0
00004AFA 6100 CAC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004AFE 6100 D666                  		bsr.w	Pal_MakeFlash
00004B02 46FC 2700                  		move	#$2700,sr
00004B06 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B0C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B10 3CBC 8004                  		move.w	#$8004,(a6)
00004B14 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B1A 3CBC 9011                  		move.w	#$9011,(a6)
00004B1E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B22 0200 00BF                  		andi.b	#$BF,d0
00004B26 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B2C 6100 C9BA                  		bsr.w	ClearScreen
00004B30 46FC 2300                  		move	#$2300,sr
00004B34 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B3A 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B3E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B44 3ABC 9780                  		move.w	#$9780,(a5)
00004B48 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B4E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B56                            
00004B56                            loc_463C:
00004B56 3215                       		move.w	(a5),d1
00004B58 0801 0001                  		btst	#1,d1
00004B5C 66F8                       		bne.s	loc_463C
00004B5E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B62 6100 0000                  		bsr.w	SS_BGLoad
00004B66 7014                       		moveq	#$14,d0
00004B68 6100 CDA6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00004B70 7000                       		moveq	#0,d0
00004B72 323C 07FF                  		move.w	#$7FF,d1
00004B76                            
00004B76                            SS_ClrObjRam:
00004B76 22C0                       		move.l	d0,(a1)+
00004B78 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B7C                            
00004B7C 43F8 F700                  		lea	($FFFFF700).w,a1
00004B80 7000                       		moveq	#0,d0
00004B82 323C 003F                  		move.w	#$3F,d1
00004B86                            
00004B86                            SS_ClrRam:
00004B86 22C0                       		move.l	d0,(a1)+
00004B88 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B8C                            
00004B8C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B90 7000                       		moveq	#0,d0
00004B92 323C 0027                  		move.w	#$27,d1
00004B96                            
00004B96                            SS_ClrRam2:
00004B96 22C0                       		move.l	d0,(a1)+
00004B98 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B9C                            
00004B9C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BA0 7000                       		moveq	#0,d0
00004BA2 323C 007F                  		move.w	#$7F,d1
00004BA6                            
00004BA6                            SS_ClrNemRam:
00004BA6 22C0                       		move.l	d0,(a1)+
00004BA8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BAC                            
00004BAC 4238 F64E                  		clr.b	($FFFFF64E).w
00004BB0 4278 FE02                  		clr.w	($FFFFFE02).w
00004BB4 700A                       		moveq	#$A,d0
00004BB6 6100 D72E                  		bsr.w	PalLoad1	; load special stage pallet
00004BBA 4EB9 0000 0000             		jsr	SS_Load
00004BC0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004BC8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004BD0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004BD6 6100 0000                  		bsr.w	PalCycle_SS
00004BDA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004BDE 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004BE4 303C 0089                  		move.w	#$89,d0
00004BE8 6100 C9D0                  		bsr.w	PlaySound	; play special stage BG	music
00004BEC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004BF2 43F9 0000 45A2             		lea	(Demo_Index).l,a1
00004BF8 7006                       		moveq	#6,d0
00004BFA E548                       		lsl.w	#2,d0
00004BFC 2271 0000                  		movea.l	(a1,d0.w),a1
00004C00 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C06 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C0A 4278 FE20                  		clr.w	($FFFFFE20).w
00004C0E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C12 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C18 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C1E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C22 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C24 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C2A 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C2C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C32                            
00004C32                            SS_NoDebug:
00004C32 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C36 0000 0040                  		ori.b	#$40,d0
00004C3A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C40 6100 D478                  		bsr.w	Pal_MakeWhite
00004C44                            
00004C44                            ; ---------------------------------------------------------------------------
00004C44                            ; Main Special Stage loop
00004C44                            ; ---------------------------------------------------------------------------
00004C44                            
00004C44                            SS_MainLoop:
00004C44 6100 C986                  		bsr.w	PauseGame
00004C48 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C4E 6100 E06A                  		bsr.w	DelayProgram
00004C52 6100 F89E                  		bsr.w	MoveSonicInDemo
00004C56 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C5C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C62 4EB9 0000 0000             		jsr	BuildSprites
00004C68 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C6E 6100 0000                  		bsr.w	SS_BGAnimate
00004C72 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C76 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C78 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C7C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C80                            
00004C80                            SS_ChkEnd:
00004C80 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C86 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004C8A                            
00004C8A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C8E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C92 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C98 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C9E 6500                       		bcs.s	SS_End		; if not, branch
00004CA0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004CA4                            
00004CA4                            SS_End:
00004CA4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CAA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CB0 4278 F794                  		clr.w	($FFFFF794).w
00004CB4                            
00004CB4                            SS_EndLoop:
00004CB4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004CBA 6100 DFFE                  		bsr.w	DelayProgram
00004CBE 6100 F832                  		bsr.w	MoveSonicInDemo
00004CC2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CC8 4EB9 0000 0000             		jsr	ObjectsLoad
00004CCE 4EB9 0000 0000             		jsr	BuildSprites
00004CD4 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CDA 6100 0000                  		bsr.w	SS_BGAnimate
00004CDE 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CE2 6A00                       		bpl.s	loc_47D4
00004CE4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004CEA 6100 D49A                  		bsr.w	Pal_ToWhite
00004CEE                            
00004CEE                            loc_47D4:
00004CEE 4A78 F614                  		tst.w	($FFFFF614).w
00004CF2 66C0                       		bne.s	SS_EndLoop
00004CF4                            
00004CF4 46FC 2700                  		move	#$2700,sr
00004CF8 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CFE 3CBC 8230                  		move.w	#$8230,(a6)
00004D02 3CBC 8407                  		move.w	#$8407,(a6)
00004D06 3CBC 9001                  		move.w	#$9001,(a6)
00004D0A 6100 C7DC                  		bsr.w	ClearScreen
00004D0E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D18 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D1E 6100 C944                  		bsr.w	NemDec
00004D22 4EB9 0000 0000             		jsr	Hud_Base
00004D28 46FC 2300                  		move	#$2300,sr
00004D2C 7011                       		moveq	#$11,d0
00004D2E 6100 D5D2                  		bsr.w	PalLoad2	; load results screen pallet
00004D32 7000                       		moveq	#0,d0
00004D34 6100 CAA0                  		bsr.w	LoadPLC2
00004D38 701B                       		moveq	#$1B,d0
00004D3A 6100 CA68                  		bsr.w	LoadPLC		; load results screen patterns
00004D3E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D44 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D4A 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D4E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D52 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D56 303C 008E                  		move.w	#$8E,d0
00004D5A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D60 43F8 D000                  		lea	($FFFFD000).w,a1
00004D64 7000                       		moveq	#0,d0
00004D66 323C 07FF                  		move.w	#$7FF,d1
00004D6A                            
00004D6A                            SS_EndClrObjRam:
00004D6A 22C0                       		move.l	d0,(a1)+
00004D6C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D70                            
00004D70 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D76                            
00004D76                            SS_NormalExit:
00004D76 6100 C854                  		bsr.w	PauseGame
00004D7A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D80 6100 DF38                  		bsr.w	DelayProgram
00004D84 4EB9 0000 0000             		jsr	ObjectsLoad
00004D8A 4EB9 0000 0000             		jsr	BuildSprites
00004D90 6100 CA7E                  		bsr.w	RunPLC_RAM
00004D94 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D98 67DC                       		beq.s	SS_NormalExit
00004D9A 4AB8 F680                  		tst.l	($FFFFF680).w
00004D9E 66D6                       		bne.s	SS_NormalExit
00004DA0 303C 00CA                  		move.w	#$CA,d0
00004DA4 6100 C81A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DA8 6100 D3BC                  		bsr.w	Pal_MakeFlash
00004DAC 4E75                       		rts	
00004DAE                            ; ===========================================================================
00004DAE                            
00004DAE                            SS_ToSegaScreen:
00004DAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004DB4 4E75                       		rts
00004DB6                            
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            ; Special stage	background loading subroutine
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            
00004DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DB6                            
00004DB6                            
00004DB6                            SS_BGLoad:				; XREF: SpecialStage
00004DB6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DBC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004DC2 303C 4051                  		move.w	#$4051,d0
00004DC6 6100 CB7A                  		bsr.w	EniDec
00004DCA 263C 5000 0001             		move.l	#$50000001,d3
00004DD0 45F9 00FF 0080             		lea	($FF0080).l,a2
00004DD6 7E06                       		moveq	#6,d7
00004DD8                            
00004DD8                            loc_48BE:
00004DD8 2003                       		move.l	d3,d0
00004DDA 7C03                       		moveq	#3,d6
00004DDC 7800                       		moveq	#0,d4
00004DDE 0C47 0003                  		cmpi.w	#3,d7
00004DE2 6400                       		bcc.s	loc_48CC
00004DE4 7801                       		moveq	#1,d4
00004DE6                            
00004DE6                            loc_48CC:
00004DE6 7A07                       		moveq	#7,d5
00004DE8                            
00004DE8                            loc_48CE:
00004DE8 224A                       		movea.l	a2,a1
00004DEA 0A04 0001                  		eori.b	#1,d4
00004DEE 6600                       		bne.s	loc_48E2
00004DF0 0C47 0006                  		cmpi.w	#6,d7
00004DF4 6600                       		bne.s	loc_48F2
00004DF6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DFC                            
00004DFC                            loc_48E2:
00004DFC 48E7 F800                  		movem.l	d0-d4,-(sp)
00004E00 7207                       		moveq	#7,d1
00004E02 7407                       		moveq	#7,d2
00004E04 6100 C83E                  		bsr.w	ShowVDPGraphics
00004E08 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E0C                            
00004E0C                            loc_48F2:
00004E0C 0680 0010 0000             		addi.l	#$100000,d0
00004E12 51CD FFD4                  		dbf	d5,loc_48CE
00004E16 0680 0380 0000             		addi.l	#$3800000,d0
00004E1C 0A04 0001                  		eori.b	#1,d4
00004E20 51CE FFC4                  		dbf	d6,loc_48CC
00004E24 0683 1000 0000             		addi.l	#$10000000,d3
00004E2A 6A00                       		bpl.s	loc_491C
00004E2C 4843                       		swap	d3
00004E2E 0683 0000 C000             		addi.l	#$C000,d3
00004E34 4843                       		swap	d3
00004E36                            
00004E36                            loc_491C:
00004E36 D4FC 0080                  		adda.w	#$80,a2
00004E3A 51CF FF9C                  		dbf	d7,loc_48BE
00004E3E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E44 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E4A 303C 4000                  		move.w	#$4000,d0
00004E4E 6100 CAF2                  		bsr.w	EniDec
00004E52 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E58 203C 4000 0003             		move.l	#$40000003,d0
00004E5E 723F                       		moveq	#$3F,d1
00004E60 741F                       		moveq	#$1F,d2
00004E62 6100 C7E0                  		bsr.w	ShowVDPGraphics
00004E66 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E6C 203C 5000 0003             		move.l	#$50000003,d0
00004E72 723F                       		moveq	#$3F,d1
00004E74 743F                       		moveq	#$3F,d2
00004E76 6100 C7CC                  		bsr.w	ShowVDPGraphics
00004E7A 4E75                       		rts	
00004E7C                            ; End of function SS_BGLoad
00004E7C                            
00004E7C                            ; ---------------------------------------------------------------------------
00004E7C                            ; Pallet cycling routine - special stage
00004E7C                            ; ---------------------------------------------------------------------------
00004E7C                            
00004E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E7C                            
00004E7C                            
00004E7C                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E7C 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E80 6600                       		bne.s	locret_49E6
00004E82 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E86 6A00                       		bpl.s	locret_49E6
00004E88 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E8E 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E92 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E96 0240 001F                  		andi.w	#$1F,d0
00004E9A E548                       		lsl.w	#2,d0
00004E9C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004EA2 D0C0                       		adda.w	d0,a0
00004EA4 1018                       		move.b	(a0)+,d0
00004EA6 6A00                       		bpl.s	loc_4992
00004EA8 303C 01FF                  		move.w	#$1FF,d0
00004EAC                            
00004EAC                            loc_4992:
00004EAC 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004EB0 7000                       		moveq	#0,d0
00004EB2 1018                       		move.b	(a0)+,d0
00004EB4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004EB8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004EBE 43F1 0000                  		lea	(a1,d0.w),a1
00004EC2 303C 8200                  		move.w	#-$7E00,d0
00004EC6 1019                       		move.b	(a1)+,d0
00004EC8 3C80                       		move.w	d0,(a6)
00004ECA 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004ECE 303C 8400                  		move.w	#-$7C00,d0
00004ED2 1018                       		move.b	(a0)+,d0
00004ED4 3C80                       		move.w	d0,(a6)
00004ED6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EE0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004EE8 7000                       		moveq	#0,d0
00004EEA 1018                       		move.b	(a0)+,d0
00004EEC 6B00                       		bmi.s	loc_49E8
00004EEE 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004EF4 D2C0                       		adda.w	d0,a1
00004EF6 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004EFA 24D9                       		move.l	(a1)+,(a2)+
00004EFC 24D9                       		move.l	(a1)+,(a2)+
00004EFE 24D9                       		move.l	(a1)+,(a2)+
00004F00                            
00004F00                            locret_49E6:
00004F00 4E75                       		rts	
00004F02                            ; ===========================================================================
00004F02                            
00004F02                            loc_49E8:				; XREF: PalCycle_SS
00004F02 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004F06 0C40 008A                  		cmpi.w	#$8A,d0
00004F0A 6500                       		bcs.s	loc_49F4
00004F0C 5241                       		addq.w	#1,d1
00004F0E                            
00004F0E                            loc_49F4:
00004F0E C2FC 002A                  		mulu.w	#$2A,d1
00004F12 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004F18 D2C1                       		adda.w	d1,a1
00004F1A 0240 007F                  		andi.w	#$7F,d0
00004F1E 0880 0000                  		bclr	#0,d0
00004F22 6700                       		beq.s	loc_4A18
00004F24 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004F28 24D1                       		move.l	(a1),(a2)+
00004F2A 24E9 0004                  		move.l	4(a1),(a2)+
00004F2E 24E9 0008                  		move.l	8(a1),(a2)+
00004F32                            
00004F32                            loc_4A18:
00004F32 D2FC 000C                  		adda.w	#$C,a1
00004F36 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004F3A 0C40 000A                  		cmpi.w	#$A,d0
00004F3E 6500                       		bcs.s	loc_4A2E
00004F40 0440 000A                  		subi.w	#$A,d0
00004F44 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F48                            
00004F48                            loc_4A2E:
00004F48 3200                       		move.w	d0,d1
00004F4A D040                       		add.w	d0,d0
00004F4C D041                       		add.w	d1,d0
00004F4E D2C0                       		adda.w	d0,a1
00004F50 24D9                       		move.l	(a1)+,(a2)+
00004F52 34D9                       		move.w	(a1)+,(a2)+
00004F54 4E75                       		rts	
00004F56                            ; End of function PalCycle_SS
00004F56                            
00004F56                            ; ===========================================================================
00004F56 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F66                            					; XREF: PalCycle_SS
00004F66 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F76 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F86 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F96 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004FA6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004FB6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004FC6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004FD6                            		even
00004FD6 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FE4                            					; XREF: PalCycle_SS
00004FE4                            		even
00004FE4                            
00004FE4                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000502C                            		even
0000502C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000050FE                            		even
000050FE                            
000050FE                            ; ---------------------------------------------------------------------------
000050FE                            ; Subroutine to	make the special stage background animated
000050FE                            ; ---------------------------------------------------------------------------
000050FE                            
000050FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050FE                            
000050FE                            
000050FE                            SS_BGAnimate:				; XREF: SpecialStage
000050FE 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005102 6600                       		bne.s	loc_4BF6
00005104 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000510A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005110                            
00005110                            loc_4BF6:
00005110 0C40 0008                  		cmpi.w	#8,d0
00005114 6400                       		bcc.s	loc_4C4E
00005116 0C40 0006                  		cmpi.w	#6,d0
0000511A 6600                       		bne.s	loc_4C10
0000511C 5278 F718                  		addq.w	#1,($FFFFF718).w
00005120 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005124 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000512A                            
0000512A                            loc_4C10:
0000512A 7000                       		moveq	#0,d0
0000512C 3038 F708                  		move.w	($FFFFF708).w,d0
00005130 4440                       		neg.w	d0
00005132 4840                       		swap	d0
00005134 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000513A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000513E 7609                       		moveq	#9,d3
00005140                            
00005140                            loc_4C26:
00005140 302B 0002                  		move.w	2(a3),d0
00005144 6100 DBA6                  		bsr.w	CalcSine
00005148 7400                       		moveq	#0,d2
0000514A 1419                       		move.b	(a1)+,d2
0000514C C1C2                       		muls.w	d2,d0
0000514E E080                       		asr.l	#8,d0
00005150 36C0                       		move.w	d0,(a3)+
00005152 1419                       		move.b	(a1)+,d2
00005154 4882                       		ext.w	d2
00005156 D55B                       		add.w	d2,(a3)+
00005158 51CB FFE6                  		dbf	d3,loc_4C26
0000515C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005160 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005166 6000                       		bra.s	loc_4C7E
00005168                            ; ===========================================================================
00005168                            
00005168                            loc_4C4E:				; XREF: SS_BGAnimate
00005168 0C40 000C                  		cmpi.w	#$C,d0
0000516C 6600                       		bne.s	loc_4C74
0000516E 5378 F718                  		subq.w	#1,($FFFFF718).w
00005172 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005176 243C 0001 8000             		move.l	#$18000,d2
0000517C 7206                       		moveq	#6,d1
0000517E                            
0000517E                            loc_4C64:
0000517E 2013                       		move.l	(a3),d0
00005180 9082                       		sub.l	d2,d0
00005182 26C0                       		move.l	d0,(a3)+
00005184 0482 0000 2000             		subi.l	#$2000,d2
0000518A 51C9 FFF2                  		dbf	d1,loc_4C64
0000518E                            
0000518E                            loc_4C74:
0000518E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005192 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005198                            
00005198                            loc_4C7E:
00005198 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000519C 3038 F718                  		move.w	($FFFFF718).w,d0
000051A0 4440                       		neg.w	d0
000051A2 4840                       		swap	d0
000051A4 7600                       		moveq	#0,d3
000051A6 161A                       		move.b	(a2)+,d3
000051A8 3438 F70C                  		move.w	($FFFFF70C).w,d2
000051AC 4442                       		neg.w	d2
000051AE 0242 00FF                  		andi.w	#$FF,d2
000051B2 E54A                       		lsl.w	#2,d2
000051B4                            
000051B4                            loc_4C9A:
000051B4 301B                       		move.w	(a3)+,d0
000051B6 544B                       		addq.w	#2,a3
000051B8 7200                       		moveq	#0,d1
000051BA 121A                       		move.b	(a2)+,d1
000051BC 5341                       		subq.w	#1,d1
000051BE                            
000051BE                            loc_4CA4:
000051BE 2380 2000                  		move.l	d0,(a1,d2.w)
000051C2 5842                       		addq.w	#4,d2
000051C4 0242 03FC                  		andi.w	#$3FC,d2
000051C8 51C9 FFF4                  		dbf	d1,loc_4CA4
000051CC 51CB FFE6                  		dbf	d3,loc_4C9A
000051D0 4E75                       		rts	
000051D2                            ; End of function SS_BGAnimate
000051D2                            
000051D2                            ; ===========================================================================
000051D2 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000051DE                            		even
000051DE 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051E6                            		even
000051E6 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000051FA                            		even
000051FA                            					; XREF: SS_BGAnimate
000051FA                            ; ===========================================================================
000051FA                            
000051FA                            ; ---------------------------------------------------------------------------
000051FA                            ; Continue screen
000051FA                            ; ---------------------------------------------------------------------------
000051FA                            
000051FA                            ContinueScreen:				; XREF: GameModeArray
000051FA 6100 CE40                  		bsr.w	Pal_FadeFrom
000051FE 46FC 2700                  		move	#$2700,sr
00005202 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005206 0200 00BF                  		andi.b	#$BF,d0
0000520A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005210 4DF9 00C0 0004             		lea	($C00004).l,a6
00005216 3CBC 8004                  		move.w	#$8004,(a6)
0000521A 3CBC 8700                  		move.w	#$8700,(a6)
0000521E 6100 C2C8                  		bsr.w	ClearScreen
00005222 43F8 D000                  		lea	($FFFFD000).w,a1
00005226 7000                       		moveq	#0,d0
00005228 323C 07FF                  		move.w	#$7FF,d1
0000522C                            
0000522C                            Cont_ClrObjRam:
0000522C 22C0                       		move.l	d0,(a1)+
0000522E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005232                            
00005232 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000523C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005242 6100 C420                  		bsr.w	NemDec
00005246 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005250 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005256 6100 C40C                  		bsr.w	NemDec
0000525A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005264 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000526A 6100 C3F8                  		bsr.w	NemDec
0000526E 720A                       		moveq	#10,d1
00005270 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005276 7012                       		moveq	#$12,d0
00005278 6100 D06C                  		bsr.w	PalLoad1	; load continue	screen pallet
0000527C 103C 0090                  		move.b	#$90,d0
00005280 6100 C338                  		bsr.w	PlaySound	; play continue	music
00005284 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000528A 42B8 F700                  		clr.l	($FFFFF700).w
0000528E 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005296 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000529C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000052A2 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000052A8 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000052AE 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000052B4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000052BA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000052C0 4EB9 0000 0000             		jsr	ObjectsLoad
000052C6 4EB9 0000 0000             		jsr	BuildSprites
000052CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052D0 0000 0040                  		ori.b	#$40,d0
000052D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000052DA 6100 CCBA                  		bsr.w	Pal_FadeTo
000052DE                            
000052DE                            ; ---------------------------------------------------------------------------
000052DE                            ; Continue screen main loop
000052DE                            ; ---------------------------------------------------------------------------
000052DE                            
000052DE                            Cont_MainLoop:
000052DE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052E4 6100 D9D4                  		bsr.w	DelayProgram
000052E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052EE 6400                       		bcc.s	loc_4DF2
000052F0 46FC 2700                  		move	#$2700,sr
000052F4 3238 F614                  		move.w	($FFFFF614).w,d1
000052F8 82FC 003C                  		divu.w	#$3C,d1
000052FC 0281 0000 000F             		andi.l	#$F,d1
00005302 4EB9 0000 0000             		jsr	ContScrCounter
00005308 46FC 2300                  		move	#$2300,sr
0000530C                            
0000530C                            loc_4DF2:
0000530C 4EB9 0000 0000             		jsr	ObjectsLoad
00005312 4EB9 0000 0000             		jsr	BuildSprites
00005318 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000531E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005320 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005326 64B6                       		bcc.s	Cont_MainLoop
00005328 4A78 F614                  		tst.w	($FFFFF614).w
0000532C 6600 FFB0                  		bne.w	Cont_MainLoop
00005330 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005336 4E75                       		rts	
00005338                            ; ===========================================================================
00005338                            
00005338                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005338 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000533E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005344 7000                       		moveq	#0,d0
00005346 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000534A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000534E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005352 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005356 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000535A 4E75                       		rts	
0000535C                            ; ===========================================================================
0000535C                            
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            ; Object 80 - Continue screen elements
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            
0000535C                            Obj80:					; XREF: Obj_Index
0000535C 7000                       		moveq	#0,d0
0000535E 1028 0024                  		move.b	$24(a0),d0
00005362 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005366 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000536A                            ; ===========================================================================
0000536A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000536C 0000                       		dc.w Obj80_Display-Obj80_Index
0000536E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005370 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj80_Main:				; XREF: Obj80_Index
00005372 5428 0024                  		addq.b	#2,$24(a0)
00005376 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000537E 317C 8500 0002             		move.w	#$8500,2(a0)
00005384 117C 0000 0001             		move.b	#0,1(a0)
0000538A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005390 317C 0120 0008             		move.w	#$120,8(a0)
00005396 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000539C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000053A2                            
000053A2                            Obj80_Display:				; XREF: Obj80_Index
000053A2 4EF9 0000 0000             		jmp	DisplaySprite
000053A8                            ; ===========================================================================
000053A8                            Obj80_MiniSonicPos:
000053A8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000053BA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000053C6                            ; ===========================================================================
000053C6                            
000053C6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000053C6 2248                       		movea.l	a0,a1
000053C8 45F9 0000 53A8             		lea	(Obj80_MiniSonicPos).l,a2
000053CE 7200                       		moveq	#0,d1
000053D0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000053D4 5501                       		subq.b	#2,d1
000053D6 6400                       		bcc.s	loc_4EC4
000053D8 4EF9 0000 0000             		jmp	DeleteObject
000053DE                            ; ===========================================================================
000053DE                            
000053DE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000053DE 7601                       		moveq	#1,d3
000053E0 0C01 000E                  		cmpi.b	#$E,d1
000053E4 6500                       		bcs.s	loc_4ED0
000053E6 7600                       		moveq	#0,d3
000053E8 720E                       		moveq	#$E,d1
000053EA                            
000053EA                            loc_4ED0:
000053EA 1401                       		move.b	d1,d2
000053EC 0202 0001                  		andi.b	#1,d2
000053F0                            
000053F0                            Obj80_MiniSonLoop:
000053F0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000053F4 335A 0008                  		move.w	(a2)+,8(a1)
000053F8 4A02                       		tst.b	d2
000053FA 6700                       		beq.s	loc_4EEA
000053FC 0469 000A 0008             		subi.w	#$A,8(a1)
00005402                            
00005402                            loc_4EEA:
00005402 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005408 137C 0006 001A             		move.b	#6,$1A(a1)
0000540E 137C 0006 0024             		move.b	#6,$24(a1)
00005414 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000541C 337C 8551 0002             		move.w	#$8551,2(a1)
00005422 137C 0000 0001             		move.b	#0,1(a1)
00005428 43E9 0040                  		lea	$40(a1),a1
0000542C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005430 43E9 FFC0                  		lea	-$40(a1),a1
00005434 1343 0028                  		move.b	d3,$28(a1)
00005438                            
00005438                            Obj80_ChkType:				; XREF: Obj80_Index
00005438 4A28 0028                  		tst.b	$28(a0)
0000543C 6700                       		beq.s	loc_4F40
0000543E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005444 6500                       		bcs.s	loc_4F40
00005446 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000544A 0200 0001                  		andi.b	#1,d0
0000544E 6600                       		bne.s	loc_4F40
00005450 4A78 D010                  		tst.w	($FFFFD010).w
00005454 6600                       		bne.s	Obj80_Delete
00005456 4E75                       		rts	
00005458                            ; ===========================================================================
00005458                            
00005458                            loc_4F40:				; XREF: Obj80_ChkType
00005458 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000545C 0200 000F                  		andi.b	#$F,d0
00005460 6600                       		bne.s	Obj80_Display2
00005462 0868 0000 001A             		bchg	#0,$1A(a0)
00005468                            
00005468                            Obj80_Display2:
00005468 4EF9 0000 0000             		jmp	DisplaySprite
0000546E                            ; ===========================================================================
0000546E                            
0000546E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000546E 4EF9 0000 0000             		jmp	DeleteObject
00005474                            ; ===========================================================================
00005474                            
00005474                            ; ---------------------------------------------------------------------------
00005474                            ; Object 81 - Sonic on the continue screen
00005474                            ; ---------------------------------------------------------------------------
00005474                            
00005474                            Obj81:					; XREF: Obj_Index
00005474 7000                       		moveq	#0,d0
00005476 1028 0024                  		move.b	$24(a0),d0
0000547A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000547E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005482 4EF9 0000 0000             		jmp	DisplaySprite
00005488                            ; ===========================================================================
00005488 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000548A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000548C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000548E 0000                       		dc.w Obj81_Run-Obj81_Index
00005490                            ; ===========================================================================
00005490                            
00005490                            Obj81_Main:				; XREF: Obj81_Index
00005490 5428 0024                  		addq.b	#2,$24(a0)
00005494 317C 00A0 0008             		move.w	#$A0,8(a0)
0000549A 317C 00C0 000C             		move.w	#$C0,$C(a0)
000054A0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054A8 317C 0780 0002             		move.w	#$780,2(a0)
000054AE 117C 0004 0001             		move.b	#4,1(a0)
000054B4 117C 0002 0018             		move.b	#2,$18(a0)
000054BA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000054C0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000054C6                            
000054C6                            Obj81_ChkLand:				; XREF: Obj81_Index
000054C6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000054CC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000054CE 5428 0024                  		addq.b	#2,$24(a0)
000054D2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000054D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054DE 317C 8500 0002             		move.w	#$8500,2(a0)
000054E4 117C 0000 001C             		move.b	#0,$1C(a0)
000054EA 6000                       		bra.s	Obj81_Animate
000054EC                            ; ===========================================================================
000054EC                            
000054EC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000054EC 4EB9 0000 0000             		jsr	SpeedToPos
000054F2 4EB9 0000 0000             		jsr	Sonic_Animate
000054F8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054FE                            ; ===========================================================================
000054FE                            
000054FE                            Obj81_Animate:				; XREF: Obj81_Index
000054FE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005502 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005504 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000550A 4EF9 0000 0000             		jmp	AnimateSprite
00005510                            ; ===========================================================================
00005510                            
00005510                            Obj81_GetUp:				; XREF: Obj81_Animate
00005510 5428 0024                  		addq.b	#2,$24(a0)
00005514 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000551C 317C 0780 0002             		move.w	#$780,2(a0)
00005522 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005528 4268 0014                  		clr.w	$14(a0)
0000552C 5168 000C                  		subq.w	#8,$C(a0)
00005530 103C 00E0                  		move.b	#$E0,d0
00005534 6100 C08A                  		bsr.w	PlaySound_Special ; fade out music
00005538                            
00005538                            Obj81_Run:				; XREF: Obj81_Index
00005538 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000553E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005540 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005546 6000                       		bra.s	Obj81_ShowRun
00005548                            ; ===========================================================================
00005548                            
00005548                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005548 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000554E                            
0000554E                            Obj81_ShowRun:				; XREF: Obj81_Run
0000554E 4EB9 0000 0000             		jsr	SpeedToPos
00005554 4EB9 0000 0000             		jsr	Sonic_Animate
0000555A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005560                            ; ===========================================================================
00005560                            Ani_obj81:
00005560                            	include "_anim\obj81.asm"
00005560                            ; ---------------------------------------------------------------------------
00005560                            ; Animation script - Sonic on the continue screen
00005560                            ; ---------------------------------------------------------------------------
00005560 0000                       		dc.w byte_504A-Ani_obj81
00005562 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000556E 00                         		even
0000556E 00                         		even
0000556E                            
0000556E                            ; ---------------------------------------------------------------------------
0000556E                            ; Sprite mappings - Continue screen
0000556E                            ; ---------------------------------------------------------------------------
0000556E                            Map_obj80:
0000556E                            	include "_maps\obj80.asm"
0000556E                            ; ---------------------------------------------------------------------------
0000556E                            ; Sprite mappings - Continue screen
0000556E                            ; ---------------------------------------------------------------------------
0000556E 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005572 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005576 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000557A 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000557E 0B                         byte_5066:	dc.b $B
0000557F F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005584 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005589 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000558E F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005593 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005598 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000559D F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000055A2 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000055A7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000055AC 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000055B1 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000055B6 03                         byte_509E:	dc.b 3
000055B7 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000055BC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055C1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055C6 03                         byte_50AE:	dc.b 3
000055C7 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000055CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055D1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055D6 03                         byte_50BE:	dc.b 3
000055D7 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000055DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055E1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055E6 02                         byte_50CE:	dc.b 2
000055E7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000055EC 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000055F1 01                         byte_50D9:	dc.b 1
000055F2 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000055F7 01                         byte_50DF:	dc.b 1
000055F8 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000055FE 00                         		even
000055FE 00                         		even
000055FE                            
000055FE                            ; ===========================================================================
000055FE                            ; ---------------------------------------------------------------------------
000055FE                            ; Ending sequence in Green Hill	Zone
000055FE                            ; ---------------------------------------------------------------------------
000055FE                            
000055FE                            EndingSequence:				; XREF: GameModeArray
000055FE 103C 00E4                  		move.b	#$E4,d0
00005602 6100 BFBC                  		bsr.w	PlaySound_Special ; stop music
00005606 6100 CA34                  		bsr.w	Pal_FadeFrom
0000560A 43F8 D000                  		lea	($FFFFD000).w,a1
0000560E 7000                       		moveq	#0,d0
00005610 323C 07FF                  		move.w	#$7FF,d1
00005614                            
00005614                            End_ClrObjRam:
00005614 22C0                       		move.l	d0,(a1)+
00005616 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000561A                            
0000561A 43F8 F628                  		lea	($FFFFF628).w,a1
0000561E 7000                       		moveq	#0,d0
00005620 323C 0015                  		move.w	#$15,d1
00005624                            
00005624                            End_ClrRam:
00005624 22C0                       		move.l	d0,(a1)+
00005626 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000562A                            
0000562A 43F8 F700                  		lea	($FFFFF700).w,a1
0000562E 7000                       		moveq	#0,d0
00005630 323C 003F                  		move.w	#$3F,d1
00005634                            
00005634                            End_ClrRam2:
00005634 22C0                       		move.l	d0,(a1)+
00005636 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000563A                            
0000563A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000563E 7000                       		moveq	#0,d0
00005640 323C 0047                  		move.w	#$47,d1
00005644                            
00005644                            End_ClrRam3:
00005644 22C0                       		move.l	d0,(a1)+
00005646 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000564A                            
0000564A 46FC 2700                  		move	#$2700,sr
0000564E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005652 0200 00BF                  		andi.b	#$BF,d0
00005656 33C0 00C0 0004             		move.w	d0,($C00004).l
0000565C 6100 BE8A                  		bsr.w	ClearScreen
00005660 4DF9 00C0 0004             		lea	($C00004).l,a6
00005666 3CBC 8B03                  		move.w	#$8B03,(a6)
0000566A 3CBC 8230                  		move.w	#$8230,(a6)
0000566E 3CBC 8407                  		move.w	#$8407,(a6)
00005672 3CBC 857C                  		move.w	#$857C,(a6)
00005676 3CBC 9001                  		move.w	#$9001,(a6)
0000567A 3CBC 8004                  		move.w	#$8004,(a6)
0000567E 3CBC 8720                  		move.w	#$8720,(a6)
00005682 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005688 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000568C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005692 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005698 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000569E 6700                       		beq.s	End_LoadData	; if yes, branch
000056A0 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000056A6                            
000056A6                            End_LoadData:
000056A6 701C                       		moveq	#$1C,d0
000056A8 6100 C266                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000056AC 4EB9 0000 0000             		jsr	Hud_Base
000056B2 6100 0000                  		bsr.w	LevelSizeLoad
000056B6 6100 0000                  		bsr.w	DeformBgLayer
000056BA 08F8 0002 F754             		bset	#2,($FFFFF754).w
000056C0 6100 0000                  		bsr.w	MainLoadBlockLoad
000056C4 6100 0000                  		bsr.w	LoadTilesFromStart
000056C8 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000056D0 46FC 2300                  		move	#$2300,sr
000056D4 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000056DA 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000056DE 6100 C3E0                  		bsr.w	KosDec
000056E2 7003                       		moveq	#3,d0
000056E4 6100 CC00                  		bsr.w	PalLoad1	; load Sonic's pallet
000056E8 303C 008B                  		move.w	#$8B,d0
000056EC 6100 BECC                  		bsr.w	PlaySound	; play ending sequence music
000056F0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000056F6 6700                       		beq.s	End_LoadSonic	; if not, branch
000056F8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000056FE                            
000056FE                            End_LoadSonic:
000056FE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005704 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000570A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005710 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005716 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000571C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005722 4EB9 0000 0000             		jsr	ObjPosLoad
00005728 4EB9 0000 0000             		jsr	ObjectsLoad
0000572E 4EB9 0000 0000             		jsr	BuildSprites
00005734 7000                       		moveq	#0,d0
00005736 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000573A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000573E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005742 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005746 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000574A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000574E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005752 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005756 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000575A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000575E 6100 EEDA                  		bsr.w	OscillateNumInit
00005762 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005768 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000576E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005774 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000577A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005780 6100 D538                  		bsr.w	DelayProgram
00005784 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005788 0000 0040                  		ori.b	#$40,d0
0000578C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005792 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005798 6100 C7FC                  		bsr.w	Pal_FadeTo
0000579C                            
0000579C                            ; ---------------------------------------------------------------------------
0000579C                            ; Main ending sequence loop
0000579C                            ; ---------------------------------------------------------------------------
0000579C                            
0000579C                            End_MainLoop:
0000579C 6100 BE2E                  		bsr.w	PauseGame
000057A0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057A6 6100 D512                  		bsr.w	DelayProgram
000057AA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057AE 6100 0000                  		bsr.w	End_MoveSonic
000057B2 4EB9 0000 0000             		jsr	ObjectsLoad
000057B8 6100 0000                  		bsr.w	DeformBgLayer
000057BC 4EB9 0000 0000             		jsr	BuildSprites
000057C2 4EB9 0000 0000             		jsr	ObjPosLoad
000057C8 6100 C396                  		bsr.w	PalCycle_Load
000057CC 6100 EEC2                  		bsr.w	OscillateNumDo
000057D0 6100 EF4E                  		bsr.w	ChangeRingFrame
000057D4 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000057DA 6700                       		beq.s	loc_52DA	; if yes, branch
000057DC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057E2 103C 0091                  		move.b	#$91,d0
000057E6 6100 BDD8                  		bsr.w	PlaySound_Special ; play credits music
000057EA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000057F0 4E75                       		rts	
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            loc_52DA:
000057F2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000057F6 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000057FA                            
000057FA 4278 FE02                  		clr.w	($FFFFFE02).w
000057FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005804 4278 F794                  		clr.w	($FFFFF794).w
00005808                            
00005808                            End_AllEmlds:				; XREF: loc_5334
00005808 6100 BDC2                  		bsr.w	PauseGame
0000580C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005812 6100 D4A6                  		bsr.w	DelayProgram
00005816 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000581A 6100 0000                  		bsr.w	End_MoveSonic
0000581E 4EB9 0000 0000             		jsr	ObjectsLoad
00005824 6100 0000                  		bsr.w	DeformBgLayer
00005828 4EB9 0000 0000             		jsr	BuildSprites
0000582E 4EB9 0000 0000             		jsr	ObjPosLoad
00005834 6100 EE5A                  		bsr.w	OscillateNumDo
00005838 6100 EEE6                  		bsr.w	ChangeRingFrame
0000583C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005840 6A00                       		bpl.s	loc_5334
00005842 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005848 6100 C93C                  		bsr.w	Pal_ToWhite
0000584C                            
0000584C                            loc_5334:
0000584C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005850 6700 FFB6                  		beq.w	End_AllEmlds
00005854 4278 FE02                  		clr.w	($FFFFFE02).w
00005858 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000585E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005864 4DF9 00C0 0000             		lea	($C00000).l,a6
0000586A 47F8 F700                  		lea	($FFFFF700).w,a3
0000586E 49F8 A400                  		lea	($FFFFA400).w,a4
00005872 343C 4000                  		move.w	#$4000,d2
00005876 6100 0000                  		bsr.w	LoadTilesFromStart2
0000587A 7013                       		moveq	#$13,d0
0000587C 6100 CA68                  		bsr.w	PalLoad1	; load ending pallet
00005880 6100 C838                  		bsr.w	Pal_MakeWhite
00005884 6000 FF16                  		bra.w	End_MainLoop
00005888                            
00005888                            ; ---------------------------------------------------------------------------
00005888                            ; Subroutine controlling Sonic on the ending sequence
00005888                            ; ---------------------------------------------------------------------------
00005888                            
00005888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005888                            
00005888                            
00005888                            End_MoveSonic:				; XREF: End_MainLoop
00005888 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000588C 6600                       		bne.s	End_MoveSonic2
0000588E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005894 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005896 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000589A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000058A0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000058A6 4E75                       		rts	
000058A8                            ; ===========================================================================
000058A8                            
000058A8                            End_MoveSonic2:				; XREF: End_MoveSonic
000058A8 5500                       		subq.b	#2,d0
000058AA 6600                       		bne.s	End_MoveSonic3
000058AC 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000058B2 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000058B4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058B8 7000                       		moveq	#0,d0
000058BA 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000058BE 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000058C2 31C0 D014                  		move.w	d0,($FFFFD014).w
000058C6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000058CC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000058D2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000058D8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000058DE 4E75                       		rts	
000058E0                            ; ===========================================================================
000058E0                            
000058E0                            End_MoveSonic3:				; XREF: End_MoveSonic
000058E0 5500                       		subq.b	#2,d0
000058E2 6600                       		bne.s	End_MoveSonExit
000058E4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058E8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000058EE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000058F4 4278 D024                  		clr.w	($FFFFD024).w
000058F8                            
000058F8                            End_MoveSonExit:
000058F8 4E75                       		rts	
000058FA                            ; End of function End_MoveSonic
000058FA                            
000058FA                            ; ===========================================================================
000058FA                            ; ---------------------------------------------------------------------------
000058FA                            ; Object 87 - Sonic on ending sequence
000058FA                            ; ---------------------------------------------------------------------------
000058FA                            
000058FA                            Obj87:					; XREF: Obj_Index
000058FA 7000                       		moveq	#0,d0
000058FC 1028 0025                  		move.b	$25(a0),d0
00005900 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005904 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005908 4EF9 0000 0000             		jmp	DisplaySprite
0000590E                            ; ===========================================================================
0000590E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005912 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005916 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000591A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000591E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005922                            ; ===========================================================================
00005922                            
00005922                            Obj87_Main:				; XREF: Obj87_Index
00005922 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005928 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000592A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005930 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005936 4E75                       		rts	
00005938                            ; ===========================================================================
00005938                            
00005938                            Obj87_Main2:				; XREF: Obj87_Main
00005938 5428 0025                  		addq.b	#2,$25(a0)
0000593C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005944 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000594A 117C 0004 0001             		move.b	#4,1(a0)
00005950 4228 0022                  		clr.b	$22(a0)
00005954 117C 0002 0018             		move.b	#2,$18(a0)
0000595A 117C 0000 001A             		move.b	#0,$1A(a0)
00005960 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005966                            
00005966                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005966 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000596A 6600                       		bne.s	Obj87_Wait
0000596C 5428 0025                  		addq.b	#2,$25(a0)
00005970 317C 0001 001C             		move.w	#1,$1C(a0)
00005976 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000597C                            
0000597C                            Obj87_Wait:
0000597C 4E75                       		rts	
0000597E                            ; ===========================================================================
0000597E                            
0000597E                            Obj87_LookUp:				; XREF: Obj87_Index
0000597E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005986 6600                       		bne.s	locret_5480
00005988 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000598E 317C 005A 0030             		move.w	#$5A,$30(a0)
00005994 5428 0025                  		addq.b	#2,$25(a0)
00005998                            
00005998                            locret_5480:
00005998 4E75                       		rts	
0000599A                            ; ===========================================================================
0000599A                            
0000599A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000599A 5368 0030                  		subq.w	#1,$30(a0)
0000599E 6600                       		bne.s	Obj87_Wait2
000059A0 43F8 D400                  		lea	($FFFFD400).w,a1
000059A4 323C 00FF                  		move.w	#$FF,d1
000059A8                            
000059A8                            Obj87_ClrLoop:
000059A8 4299                       		clr.l	(a1)+
000059AA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000059AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000059B4 5428 0025                  		addq.b	#2,$25(a0)
000059B8 117C 0001 001C             		move.b	#1,$1C(a0)
000059BE 317C 003C 0030             		move.w	#$3C,$30(a0)
000059C4                            
000059C4                            Obj87_Wait2:
000059C4 4E75                       		rts	
000059C6                            ; ===========================================================================
000059C6                            
000059C6                            Obj87_MakeLogo:				; XREF: Obj87_Index
000059C6 5368 0030                  		subq.w	#1,$30(a0)
000059CA 6600                       		bne.s	Obj87_Wait3
000059CC 5428 0025                  		addq.b	#2,$25(a0)
000059D0 317C 00B4 0030             		move.w	#$B4,$30(a0)
000059D6 117C 0002 001C             		move.b	#2,$1C(a0)
000059DC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059E2                            
000059E2                            Obj87_Wait3:
000059E2 4E75                       		rts	
000059E4                            ; ===========================================================================
000059E4                            
000059E4                            Obj87_Animate:				; XREF: Obj87_Index
000059E4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000059EA 4EF9 0000 0000             		jmp	AnimateSprite
000059F0                            ; ===========================================================================
000059F0                            
000059F0                            Obj87_Leap:				; XREF: Obj87_Index
000059F0 5368 0030                  		subq.w	#1,$30(a0)
000059F4 6600                       		bne.s	Obj87_Wait4
000059F6 5428 0025                  		addq.b	#2,$25(a0)
000059FA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A02 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A08 117C 0004 0001             		move.b	#4,1(a0)
00005A0E 4228 0022                  		clr.b	$22(a0)
00005A12 117C 0002 0018             		move.b	#2,$18(a0)
00005A18 117C 0005 001A             		move.b	#5,$1A(a0)
00005A1E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005A24 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A2A 60B8                       		bra.s	Obj87_Animate
00005A2C                            ; ===========================================================================
00005A2C                            
00005A2C                            Obj87_Wait4:				; XREF: Obj87_Leap
00005A2C 4E75                       		rts	
00005A2E                            ; ===========================================================================
00005A2E                            Ani_obj87:
00005A2E                            	include "_anim\obj87.asm"
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E                            ; Animation script - Sonic on the ending sequence
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E 0000                       		dc.w byte_551C-Ani_obj87
00005A30 0000                       		dc.w byte_552A-Ani_obj87
00005A32 0000                       		dc.w byte_5534-Ani_obj87
00005A34 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A42 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A4C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A54                            		even
00005A54                            		even
00005A54                            
00005A54                            ; ===========================================================================
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            ; Object 88 - chaos emeralds on	the ending sequence
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            
00005A54                            Obj88:					; XREF: Obj_Index
00005A54 7000                       		moveq	#0,d0
00005A56 1028 0024                  		move.b	$24(a0),d0
00005A5A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A5E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A62 4EF9 0000 0000             		jmp	DisplaySprite
00005A68                            ; ===========================================================================
00005A68 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A6A 0000                       		dc.w Obj88_Move-Obj88_Index
00005A6C                            ; ===========================================================================
00005A6C                            
00005A6C                            Obj88_Main:				; XREF: Obj88_Index
00005A6C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A72 6700                       		beq.s	Obj88_Main2
00005A74 588F                       		addq.l	#4,sp
00005A76 4E75                       		rts	
00005A78                            ; ===========================================================================
00005A78                            
00005A78                            Obj88_Main2:				; XREF: Obj88_Main
00005A78 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A7E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A84 2248                       		movea.l	a0,a1
00005A86 7600                       		moveq	#0,d3
00005A88 7401                       		moveq	#1,d2
00005A8A 7205                       		moveq	#5,d1
00005A8C                            
00005A8C                            Obj88_MainLoop:
00005A8C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A90 5429 0024                  		addq.b	#2,$24(a1)
00005A94 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A9C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AA2 137C 0004 0001             		move.b	#4,1(a1)
00005AA8 137C 0001 0018             		move.b	#1,$18(a1)
00005AAE 3368 0008 0038             		move.w	8(a0),$38(a1)
00005AB4 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005ABA 1342 001C                  		move.b	d2,$1C(a1)
00005ABE 1342 001A                  		move.b	d2,$1A(a1)
00005AC2 5202                       		addq.b	#1,d2
00005AC4 1343 0026                  		move.b	d3,$26(a1)
00005AC8 0603 002A                  		addi.b	#$2A,d3
00005ACC 43E9 0040                  		lea	$40(a1),a1
00005AD0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005AD4                            
00005AD4                            Obj88_Move:				; XREF: Obj88_Index
00005AD4 3028 003E                  		move.w	$3E(a0),d0
00005AD8 D168 0026                  		add.w	d0,$26(a0)
00005ADC 1028 0026                  		move.b	$26(a0),d0
00005AE0 4EB9 0000 2CEC             		jsr	(CalcSine).l
00005AE6 7800                       		moveq	#0,d4
00005AE8 1828 003C                  		move.b	$3C(a0),d4
00005AEC C3C4                       		muls.w	d4,d1
00005AEE E081                       		asr.l	#8,d1
00005AF0 C1C4                       		muls.w	d4,d0
00005AF2 E080                       		asr.l	#8,d0
00005AF4 D268 0038                  		add.w	$38(a0),d1
00005AF8 D068 003A                  		add.w	$3A(a0),d0
00005AFC 3141 0008                  		move.w	d1,8(a0)
00005B00 3140 000C                  		move.w	d0,$C(a0)
00005B04 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005B0A 6700                       		beq.s	loc_55FA
00005B0C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005B12                            
00005B12                            loc_55FA:
00005B12 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005B18 6700                       		beq.s	loc_5608
00005B1A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005B20                            
00005B20                            loc_5608:
00005B20 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005B26 6700                       		beq.s	locret_5614
00005B28 5368 003A                  		subq.w	#1,$3A(a0)
00005B2C                            
00005B2C                            locret_5614:
00005B2C 4E75                       		rts	
00005B2E                            ; ===========================================================================
00005B2E                            ; ---------------------------------------------------------------------------
00005B2E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005B2E                            ; ---------------------------------------------------------------------------
00005B2E                            
00005B2E                            Obj89:					; XREF: Obj_Index
00005B2E 7000                       		moveq	#0,d0
00005B30 1028 0024                  		move.b	$24(a0),d0
00005B34 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005B38 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B3C                            ; ===========================================================================
00005B3C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B3E 0000                       		dc.w Obj89_Move-Obj89_Index
00005B40 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B42                            ; ===========================================================================
00005B42                            
00005B42                            Obj89_Main:				; XREF: Obj89_Index
00005B42 5428 0024                  		addq.b	#2,$24(a0)
00005B46 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B4C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B52 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B5A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B60 117C 0000 0001             		move.b	#0,1(a0)
00005B66 117C 0000 0018             		move.b	#0,$18(a0)
00005B6C                            
00005B6C                            Obj89_Move:				; XREF: Obj89_Index
00005B6C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B72 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B74 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B7A 4EB9 0000 0000             		jsr	DisplaySprite
00005B80                            ; ===========================================================================
00005B80                            
00005B80                            Obj89_Delay:				; XREF: Obj89_Move
00005B80 5428 0024                  		addq.b	#2,$24(a0)
00005B84 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B8A                            
00005B8A                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B8A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B8E 6A00                       		bpl.s	Obj89_Display
00005B90 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B96                            
00005B96                            Obj89_Display:
00005B96 4EB9 0000 0000             		jsr	DisplaySprite
00005B9C                            ; ===========================================================================
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C                            ; Sprite mappings - Sonic on the ending	sequence
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C                            Map_obj87:
00005B9C                            	include "_maps\obj87.asm"
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C                            ; Sprite mappings - Sonic on the ending	sequence
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005BA0 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005BA4 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005BA8 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005BAC 02                         byte_5690:	dc.b 2
00005BAD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005BB2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BB7 03                         byte_569B:	dc.b 3
00005BB8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005BBD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005BC2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BC7 02                         byte_56AB:	dc.b 2
00005BC8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005BCD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005BD2 02                         byte_56B6:	dc.b 2
00005BD3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005BD8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005BDD 02                         byte_56C1:	dc.b 2
00005BDE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BE3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005BE8 03                         byte_56CC:	dc.b 3
00005BE9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005BEE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005BF3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005BF8 07                         byte_56DC:	dc.b 7
00005BF9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005BFE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005C03 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005C08 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005C0D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005C12 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005C17 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005C1C 18                         byte_5700:	dc.b $18
00005C1D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005C22 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005C27 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005C2C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005C31 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005C36 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005C3B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C40 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C45 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C4A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C4F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C54 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C59 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C5E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C63 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C68 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C6D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C72 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C77 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C7C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C81 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C86 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C8B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C90 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C96 00                         		even
00005C96 00                         		even
00005C96                            
00005C96                            ; ---------------------------------------------------------------------------
00005C96                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C96                            ; ---------------------------------------------------------------------------
00005C96                            Map_obj88:
00005C96                            	include "_maps\obj88.asm"
00005C96                            ; ---------------------------------------------------------------------------
00005C96                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C96                            ; ---------------------------------------------------------------------------
00005C96 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C9A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C9E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005CA2 0000                       		dc.w byte_57AC-Map_obj88
00005CA4 01                         byte_5788:	dc.b 1
00005CA5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005CAA 01                         byte_578E:	dc.b 1
00005CAB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005CB0 01                         byte_5794:	dc.b 1
00005CB1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005CB6 01                         byte_579A:	dc.b 1
00005CB7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005CBC 01                         byte_57A0:	dc.b 1
00005CBD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005CC2 01                         byte_57A6:	dc.b 1
00005CC3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005CC8 01                         byte_57AC:	dc.b 1
00005CC9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005CCE                            		even
00005CCE                            		even
00005CCE                            
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            Map_obj89:
00005CCE                            	include "_maps\obj89.asm"
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE 0000                       		dc.w byte_57B4-Map_obj89
00005CD0 03                         byte_57B4:	dc.b 3
00005CD1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005CD6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005CDB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CE0                            		even
00005CE0                            		even
00005CE0                            
00005CE0                            ; ===========================================================================
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            ; Credits ending sequence
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            
00005CE0                            Credits:				; XREF: GameModeArray
00005CE0 6100 BB20                  		bsr.w	ClearPLC
00005CE4 6100 C356                  		bsr.w	Pal_FadeFrom
00005CE8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CEE 3CBC 8004                  		move.w	#$8004,(a6)
00005CF2 3CBC 8230                  		move.w	#$8230,(a6)
00005CF6 3CBC 8407                  		move.w	#$8407,(a6)
00005CFA 3CBC 9001                  		move.w	#$9001,(a6)
00005CFE 3CBC 9200                  		move.w	#$9200,(a6)
00005D02 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D06 3CBC 8720                  		move.w	#$8720,(a6)
00005D0A 4238 F64E                  		clr.b	($FFFFF64E).w
00005D0E 6100 B7D8                  		bsr.w	ClearScreen
00005D12 43F8 D000                  		lea	($FFFFD000).w,a1
00005D16 7000                       		moveq	#0,d0
00005D18 323C 07FF                  		move.w	#$7FF,d1
00005D1C                            
00005D1C                            Cred_ClrObjRam:
00005D1C 22C0                       		move.l	d0,(a1)+
00005D1E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005D22                            
00005D22 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005D2C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005D32 6100 B930                  		bsr.w	NemDec
00005D36 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D3A 7000                       		moveq	#0,d0
00005D3C 323C 001F                  		move.w	#$1F,d1
00005D40                            
00005D40                            Cred_ClrPallet:
00005D40 22C0                       		move.l	d0,(a1)+
00005D42 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D46                            
00005D46 7003                       		moveq	#3,d0
00005D48 6100 C59C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D4C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D52 4EB9 0000 0000             		jsr	ObjectsLoad
00005D58 4EB9 0000 0000             		jsr	BuildSprites
00005D5E 6100 0000                  		bsr.w	EndingDemoLoad
00005D62 7000                       		moveq	#0,d0
00005D64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D68 E948                       		lsl.w	#4,d0
00005D6A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D70 45F2 0000                  		lea	(a2,d0.w),a2
00005D74 7000                       		moveq	#0,d0
00005D76 1012                       		move.b	(a2),d0
00005D78 6700                       		beq.s	loc_5862
00005D7A 6100 BA28                  		bsr.w	LoadPLC		; load level patterns
00005D7E                            
00005D7E                            loc_5862:
00005D7E 7001                       		moveq	#1,d0
00005D80 6100 BA22                  		bsr.w	LoadPLC		; load standard	level patterns
00005D84 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D8A 6100 C20A                  		bsr.w	Pal_FadeTo
00005D8E                            
00005D8E                            Cred_WaitLoop:
00005D8E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D94 6100 CF24                  		bsr.w	DelayProgram
00005D98 6100 BA76                  		bsr.w	RunPLC_RAM
00005D9C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005DA0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005DA2 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005DA6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005DA8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005DAE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005DB2 4E75                       		rts	
00005DB4                            
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            ; Ending sequence demo loading subroutine
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            
00005DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DB4                            
00005DB4                            
00005DB4                            EndingDemoLoad:				; XREF: Credits
00005DB4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005DB8 0240 000F                  		andi.w	#$F,d0
00005DBC D040                       		add.w	d0,d0
00005DBE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005DC2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005DC6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005DCA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005DD0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005DD2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005DD8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005DDE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DE4 7000                       		moveq	#0,d0
00005DE6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005DEA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005DEE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005DF2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005DF6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005DFC 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005DFE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005E04 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005E08 303C 0008                  		move.w	#8,d0
00005E0C                            
00005E0C                            EndDemo_LampLoad:
00005E0C 24D9                       		move.l	(a1)+,(a2)+
00005E0E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005E12                            
00005E12                            EndDemo_Exit:
00005E12 4E75                       		rts	
00005E14                            ; End of function EndingDemoLoad
00005E14                            
00005E14                            ; ===========================================================================
00005E14                            ; ---------------------------------------------------------------------------
00005E14                            ; Levels used in the end sequence demos
00005E14                            ; ---------------------------------------------------------------------------
00005E14                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005E24                            
00005E24                            ; ---------------------------------------------------------------------------
00005E24                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005E24                            ; ---------------------------------------------------------------------------
00005E24                            EndDemo_LampVar:
00005E24 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005E26 0A00 062C 000D             		dc.w $A00, $62C, $D
00005E2C 0000 0000                  		dc.l 0
00005E30 0000                       		dc.b 0,	0
00005E32 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E46 0101                       		dc.b 1,	1
00005E48                            ; ===========================================================================
00005E48                            ; ---------------------------------------------------------------------------
00005E48                            ; "TRY AGAIN" and "END"	screens
00005E48                            ; ---------------------------------------------------------------------------
00005E48                            
00005E48                            TryAgainEnd:				; XREF: Credits
00005E48 6100 B9B8                  		bsr.w	ClearPLC
00005E4C 6100 C1EE                  		bsr.w	Pal_FadeFrom
00005E50 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E56 3CBC 8004                  		move.w	#$8004,(a6)
00005E5A 3CBC 8230                  		move.w	#$8230,(a6)
00005E5E 3CBC 8407                  		move.w	#$8407,(a6)
00005E62 3CBC 9001                  		move.w	#$9001,(a6)
00005E66 3CBC 9200                  		move.w	#$9200,(a6)
00005E6A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E6E 3CBC 8720                  		move.w	#$8720,(a6)
00005E72 4238 F64E                  		clr.b	($FFFFF64E).w
00005E76 6100 B670                  		bsr.w	ClearScreen
00005E7A 43F8 D000                  		lea	($FFFFD000).w,a1
00005E7E 7000                       		moveq	#0,d0
00005E80 323C 07FF                  		move.w	#$7FF,d1
00005E84                            
00005E84                            TryAg_ClrObjRam:
00005E84 22C0                       		move.l	d0,(a1)+
00005E86 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E8A                            
00005E8A 701D                       		moveq	#$1D,d0
00005E8C 6100 BA82                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E90 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E94 7000                       		moveq	#0,d0
00005E96 323C 001F                  		move.w	#$1F,d1
00005E9A                            
00005E9A                            TryAg_ClrPallet:
00005E9A 22C0                       		move.l	d0,(a1)+
00005E9C 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005EA0                            
00005EA0 7013                       		moveq	#$13,d0
00005EA2 6100 C442                  		bsr.w	PalLoad1	; load ending pallet
00005EA6 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005EAA 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005EB0 4EB9 0000 0000             		jsr	ObjectsLoad
00005EB6 4EB9 0000 0000             		jsr	BuildSprites
00005EBC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005EC2 6100 C0D2                  		bsr.w	Pal_FadeTo
00005EC6                            
00005EC6                            ; ---------------------------------------------------------------------------
00005EC6                            ; "TRY AGAIN" and "END"	screen main loop
00005EC6                            ; ---------------------------------------------------------------------------
00005EC6                            TryAg_MainLoop:
00005EC6 6100 B704                  		bsr.w	PauseGame
00005ECA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005ED0 6100 CDE8                  		bsr.w	DelayProgram
00005ED4 4EB9 0000 0000             		jsr	ObjectsLoad
00005EDA 4EB9 0000 0000             		jsr	BuildSprites
00005EE0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EE6 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005EE8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005EEC 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005EEE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005EF4 67D0                       		beq.s	TryAg_MainLoop
00005EF6                            
00005EF6                            TryAg_Exit:
00005EF6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005EFC 4E75                       		rts	
00005EFE                            
00005EFE                            ; ===========================================================================
00005EFE                            ; ---------------------------------------------------------------------------
00005EFE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005EFE                            ; ---------------------------------------------------------------------------
00005EFE                            
00005EFE                            Obj8B:					; XREF: Obj_Index
00005EFE 7000                       		moveq	#0,d0
00005F00 1028 0024                  		move.b	$24(a0),d0
00005F04 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005F08 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005F0C 4EF9 0000 0000             		jmp	DisplaySprite
00005F12                            ; ===========================================================================
00005F12 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005F14 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005F16 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005F18 0000                       		dc.w loc_5A8E-Obj8B_Index
00005F1A                            ; ===========================================================================
00005F1A                            
00005F1A                            Obj8B_Main:				; XREF: Obj8B_Index
00005F1A 5428 0024                  		addq.b	#2,$24(a0)
00005F1E 317C 0120 0008             		move.w	#$120,8(a0)
00005F24 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005F2A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005F32 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F38 117C 0000 0001             		move.b	#0,1(a0)
00005F3E 117C 0002 0018             		move.b	#2,$18(a0)
00005F44 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F4A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F50 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F52 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F58 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F5E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F64 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F6A                            
00005F6A                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F6A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F70 4EF9 0000 0000             		jmp	AnimateSprite
00005F76                            ; ===========================================================================
00005F76                            
00005F76                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F76 5428 0024                  		addq.b	#2,$24(a0)
00005F7A 7002                       		moveq	#2,d0
00005F7C 0828 0000 001C             		btst	#0,$1C(a0)
00005F82 6700                       		beq.s	loc_5A6A
00005F84 4440                       		neg.w	d0
00005F86                            
00005F86                            loc_5A6A:
00005F86 43F8 D800                  		lea	($FFFFD800).w,a1
00005F8A 7205                       		moveq	#5,d1
00005F8C                            
00005F8C                            loc_5A70:
00005F8C 1340 003E                  		move.b	d0,$3E(a1)
00005F90 3400                       		move.w	d0,d2
00005F92 E742                       		asl.w	#3,d2
00005F94 D529 0026                  		add.b	d2,$26(a1)
00005F98 43E9 0040                  		lea	$40(a1),a1
00005F9C 51C9 FFEE                  		dbf	d1,loc_5A70
00005FA0 5228 001A                  		addq.b	#1,$1A(a0)
00005FA4 317C 0070 0030             		move.w	#112,$30(a0)
00005FAA                            
00005FAA                            loc_5A8E:				; XREF: Obj8B_Index
00005FAA 5368 0030                  		subq.w	#1,$30(a0)
00005FAE 6A00                       		bpl.s	locret_5AA0
00005FB0 0868 0000 001C             		bchg	#0,$1C(a0)
00005FB6 117C 0002 0024             		move.b	#2,$24(a0)
00005FBC                            
00005FBC                            locret_5AA0:
00005FBC 4E75                       		rts	
00005FBE                            ; ===========================================================================
00005FBE                            Ani_obj8B:
00005FBE                            	include "_anim\obj8B.asm"
00005FBE                            ; ---------------------------------------------------------------------------
00005FBE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005FBE                            ; ---------------------------------------------------------------------------
00005FBE 0000                       		dc.w byte_5AA8-Ani_obj8B
00005FC0 0000                       		dc.w byte_5AAC-Ani_obj8B
00005FC2 0000                       		dc.w byte_5AB0-Ani_obj8B
00005FC4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005FC8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005FCC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005FDE                            		even
00005FDE                            		even
00005FDE                            
00005FDE                            ; ===========================================================================
00005FDE                            ; ---------------------------------------------------------------------------
00005FDE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005FDE                            ; ---------------------------------------------------------------------------
00005FDE                            
00005FDE                            Obj8C:					; XREF: Obj_Index
00005FDE 7000                       		moveq	#0,d0
00005FE0 1028 0024                  		move.b	$24(a0),d0
00005FE4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005FE8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005FEC 4EF9 0000 0000             		jmp	DisplaySprite
00005FF2                            ; ===========================================================================
00005FF2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005FF4 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005FF6                            ; ===========================================================================
00005FF6                            
00005FF6                            Obj8C_Main:				; XREF: Obj8C_Index
00005FF6 2248                       		movea.l	a0,a1
00005FF8 7400                       		moveq	#0,d2
00005FFA 7600                       		moveq	#0,d3
00005FFC 7205                       		moveq	#5,d1
00005FFE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006002                            
00006002                            Obj8C_MakeEms:				; XREF: loc_5B42
00006002 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006006 5429 0024                  		addq.b	#2,$24(a1)
0000600A 237C 0000 5C96 0004        		move.l	#Map_obj88,4(a1)
00006012 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006018 137C 0000 0001             		move.b	#0,1(a1)
0000601E 137C 0001 0018             		move.b	#1,$18(a1)
00006024 337C 0104 0008             		move.w	#$104,8(a1)
0000602A 337C 0120 0038             		move.w	#$120,$38(a1)
00006030 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006036 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000603C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006042 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006046                            
00006046                            Obj8C_ChkEms:
00006046 7000                       		moveq	#0,d0
00006048 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000604C 5340                       		subq.w	#1,d0
0000604E 6500                       		bcs.s	loc_5B42
00006050                            
00006050                            Obj8C_ChkEmLoop:
00006050 B433 0000                  		cmp.b	(a3,d0.w),d2
00006054 6600                       		bne.s	loc_5B3E
00006056 5202                       		addq.b	#1,d2
00006058 60EC                       		bra.s	Obj8C_ChkEms
0000605A                            ; ===========================================================================
0000605A                            
0000605A                            loc_5B3E:
0000605A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000605E                            
0000605E                            loc_5B42:
0000605E 1342 001A                  		move.b	d2,$1A(a1)
00006062 5229 001A                  		addq.b	#1,$1A(a1)
00006066 5202                       		addq.b	#1,d2
00006068 137C 0080 0026             		move.b	#$80,$26(a1)
0000606E 1343 001E                  		move.b	d3,$1E(a1)
00006072 1343 001F                  		move.b	d3,$1F(a1)
00006076 0643 000A                  		addi.w	#$A,d3
0000607A 43E9 0040                  		lea	$40(a1),a1
0000607E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006082                            
00006082                            Obj8C_Move:				; XREF: Obj8C_Index
00006082 4A68 003E                  		tst.w	$3E(a0)
00006086 6700                       		beq.s	locret_5BBA
00006088 4A28 001E                  		tst.b	$1E(a0)
0000608C 6700                       		beq.s	loc_5B78
0000608E 5328 001E                  		subq.b	#1,$1E(a0)
00006092 6600                       		bne.s	loc_5B80
00006094                            
00006094                            loc_5B78:
00006094 3028 003E                  		move.w	$3E(a0),d0
00006098 D168 0026                  		add.w	d0,$26(a0)
0000609C                            
0000609C                            loc_5B80:
0000609C 1028 0026                  		move.b	$26(a0),d0
000060A0 6700                       		beq.s	loc_5B8C
000060A2 0C00 0080                  		cmpi.b	#$80,d0
000060A6 6600                       		bne.s	loc_5B96
000060A8                            
000060A8                            loc_5B8C:
000060A8 4268 003E                  		clr.w	$3E(a0)
000060AC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000060B2                            
000060B2                            loc_5B96:
000060B2 4EB9 0000 2CEC             		jsr	(CalcSine).l
000060B8 7800                       		moveq	#0,d4
000060BA 1828 003C                  		move.b	$3C(a0),d4
000060BE C3C4                       		muls.w	d4,d1
000060C0 E081                       		asr.l	#8,d1
000060C2 C1C4                       		muls.w	d4,d0
000060C4 E080                       		asr.l	#8,d0
000060C6 D268 0038                  		add.w	$38(a0),d1
000060CA D068 003A                  		add.w	$3A(a0),d0
000060CE 3141 0008                  		move.w	d1,8(a0)
000060D2 3140 000A                  		move.w	d0,$A(a0)
000060D6                            
000060D6                            locret_5BBA:
000060D6 4E75                       		rts	
000060D8                            ; ===========================================================================
000060D8                            ; ---------------------------------------------------------------------------
000060D8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000060D8                            ; ---------------------------------------------------------------------------
000060D8                            Map_obj8B:
000060D8                            	include "_maps\obj8B.asm"
000060D8                            ; ---------------------------------------------------------------------------
000060D8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000060D8                            ; ---------------------------------------------------------------------------
000060D8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000060DC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060E0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060E4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000060E8 08                         byte_5BCC:	dc.b 8
000060E9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000060EE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000060F3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000060F8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000060FD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006102 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006107 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000610C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006111 08                         byte_5BF5:	dc.b 8
00006112 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006117 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000611C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006121 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006126 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000612B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006130 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006135 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000613A 08                         byte_5C1E:	dc.b 8
0000613B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006140 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006145 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000614A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000614F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006154 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006159 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000615E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006163 08                         byte_5C47:	dc.b 8
00006164 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006169 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000616E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006173 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006178 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000617D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006182 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006187 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000618C 0C                         byte_5C70:	dc.b $C
0000618D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006192 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006197 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000619C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000061A1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000061A6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000061AB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000061B0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000061B5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000061BA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000061BF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061C4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061C9 0A                         byte_5CAD:	dc.b $A
000061CA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000061CF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000061D4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000061D9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000061DE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061E3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000061E8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061ED 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061F2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000061F7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000061FC 0A                         byte_5CE0:	dc.b $A
000061FD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006202 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006207 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000620C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006211 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006216 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000621B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006220 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006225 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000622A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000622F 0C                         byte_5D13:	dc.b $C
00006230 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006235 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000623A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000623F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006244 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006249 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000624E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006253 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006258 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000625D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006262 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006267 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000626C                            		even
0000626C                            		even
0000626C                            
0000626C                            ; ---------------------------------------------------------------------------
0000626C                            ; Ending sequence demos
0000626C                            ; ---------------------------------------------------------------------------
0000626C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000629A                            		even
0000629A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000062DA                            		even
000062DA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000630A                            		even
0000630A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000633A                            		even
0000633A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000635A                            		even
0000635A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000637A                            		even
0000637A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000063AA                            		even
000063AA                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000063DA                            		even
000063DA                            
000063DA                            ; ---------------------------------------------------------------------------
000063DA                            ; Subroutine to	load level boundaries and start	locations
000063DA                            ; ---------------------------------------------------------------------------
000063DA                            
000063DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063DA                            
000063DA                            
000063DA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000063DA 7000                       		moveq	#0,d0
000063DC 11C0 F740                  		move.b	d0,($FFFFF740).w
000063E0 11C0 F741                  		move.b	d0,($FFFFF741).w
000063E4 11C0 F746                  		move.b	d0,($FFFFF746).w
000063E8 11C0 F748                  		move.b	d0,($FFFFF748).w
000063EC 11C0 F742                  		move.b	d0,($FFFFF742).w
000063F0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063F4 ED08                       		lsl.b	#6,d0
000063F6 E848                       		lsr.w	#4,d0
000063F8 3200                       		move.w	d0,d1
000063FA D040                       		add.w	d0,d0
000063FC D041                       		add.w	d1,d0
000063FE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006402 3018                       		move.w	(a0)+,d0
00006404 31C0 F730                  		move.w	d0,($FFFFF730).w
00006408 2018                       		move.l	(a0)+,d0
0000640A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000640E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006412 2018                       		move.l	(a0)+,d0
00006414 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006418 21C0 F724                  		move.l	d0,($FFFFF724).w
0000641C 3038 F728                  		move.w	($FFFFF728).w,d0
00006420 0640 0240                  		addi.w	#$240,d0
00006424 31C0 F732                  		move.w	d0,($FFFFF732).w
00006428 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000642E 3018                       		move.w	(a0)+,d0
00006430 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006434 6000 0000                  		bra.w	LevSz_ChkLamp
00006438                            ; ===========================================================================
00006438                            ; ---------------------------------------------------------------------------
00006438                            ; Level size array and ending start location array
00006438                            ; ---------------------------------------------------------------------------
00006438                            LevelSizeArray:        ; GHZ
00006438 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006444 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006450 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000645C 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006468                                    ; LZ
00006468 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006474 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006480 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
0000648C 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006498                                    ; MZ
00006498 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000064A4 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000064B0 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000064BC 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000064C8                                    ; SLZ
000064C8 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000064D4 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064E0 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
000064EC 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064F8                                    ; SYZ
000064F8 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006504 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006510 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000651C 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006528                                    ; SBZ
00006528 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006534 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006540 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000654C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006558                                    ; Ending
00006558 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006564 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006570 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
0000657C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006588                                    even
00006588                            EndingStLocArray:
00006588                            		incbin	misc\sloc_end.bin
000065A8                            		even
000065A8                            
000065A8                            ; ===========================================================================
000065A8                            
000065A8                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000065A8 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000065AC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000065AE 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000065B4 3238 D008                  		move.w	($FFFFD008).w,d1
000065B8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000065BC 6000                       		bra.s	loc_60D0
000065BE                            ; ===========================================================================
000065BE                            
000065BE                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000065BE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000065C2 ED08                       		lsl.b	#6,d0
000065C4 E848                       		lsr.w	#4,d0
000065C6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000065CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000065CE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000065D0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065D4 5340                       		subq.w	#1,d0
000065D6 E548                       		lsl.w	#2,d0
000065D8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000065DC                            
000065DC                            LevSz_SonicPos:
000065DC 7200                       		moveq	#0,d1
000065DE 3219                       		move.w	(a1)+,d1
000065E0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065E4 7000                       		moveq	#0,d0
000065E6 3011                       		move.w	(a1),d0
000065E8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065EC                            
000065EC                            loc_60D0:				; XREF: LevSz_ChkLamp
000065EC 0441 00A0                  		subi.w	#$A0,d1
000065F0 6400                       		bcc.s	loc_60D8
000065F2 7200                       		moveq	#0,d1
000065F4                            
000065F4                            loc_60D8:
000065F4 3438 F72A                  		move.w	($FFFFF72A).w,d2
000065F8 B242                       		cmp.w	d2,d1
000065FA 6500                       		bcs.s	loc_60E2
000065FC 3202                       		move.w	d2,d1
000065FE                            
000065FE                            loc_60E2:
000065FE 31C1 F700                  		move.w	d1,($FFFFF700).w
00006602 0440 0060                  		subi.w	#$60,d0
00006606 6400                       		bcc.s	loc_60EE
00006608 7000                       		moveq	#0,d0
0000660A                            
0000660A                            loc_60EE:
0000660A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000660E 6D00                       		blt.s	loc_60F8
00006610 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006614                            
00006614                            loc_60F8:
00006614 31C0 F704                  		move.w	d0,($FFFFF704).w
00006618 6100 0000                  		bsr.w	BgScrollSpeed
0000661C 7000                       		moveq	#0,d0
0000661E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006622 E508                       		lsl.b	#2,d0
00006624 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000662A 6000 0000                  		bra.w	LevSz_Unk
0000662E                            ; ===========================================================================
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            ; Sonic	start location array
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            StartLocArray:	incbin	misc\sloc_lev.bin
0000669E                            		even
0000669E                            
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000669E                            ; loop,	loop, tunnel, tunnel
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            LoopTileNums:	incbin	misc\loopnums.bin
000066BA                            		even
000066BA                            
000066BA                            ; ===========================================================================
000066BA                            
000066BA                            LevSz_Unk:				; XREF: LevelSizeLoad
000066BA 7000                       		moveq	#0,d0
000066BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000066C0 E748                       		lsl.w	#3,d0
000066C2 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000066C6 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000066CA 24D9                       		move.l	(a1)+,(a2)+
000066CC 24D9                       		move.l	(a1)+,(a2)+
000066CE 4E75                       		rts	
000066D0                            ; End of function LevelSizeLoad
000066D0                            
000066D0                            ; ===========================================================================
000066D0 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000066D8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066E0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066E8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006700 0070 0100 0100 0100        		dc.l $700100, $1000100
00006708                            
00006708                            ; ---------------------------------------------------------------------------
00006708                            ; Subroutine to	set scroll speed of some backgrounds
00006708                            ; ---------------------------------------------------------------------------
00006708                            
00006708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006708                            
00006708                            
00006708                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006708 4A38 FE30                  		tst.b	($FFFFFE30).w
0000670C 6600                       		bne.s	loc_6206
0000670E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006712 31C0 F714                  		move.w	d0,($FFFFF714).w
00006716 31C1 F708                  		move.w	d1,($FFFFF708).w
0000671A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000671E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006722                            
00006722                            loc_6206:
00006722 7400                       		moveq	#0,d2
00006724 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006728 D442                       		add.w	d2,d2
0000672A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000672E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006732                            ; End of function BgScrollSpeed
00006732                            
00006732                            ; ===========================================================================
00006732 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006736 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000673A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000673E 0000                       		dc.w BgScroll_End-BgScroll_Index
00006740                            ; ===========================================================================
00006740                            
00006740                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006740 6000 0000                  		bra.w	Deform_GHZ
00006744                            ; ===========================================================================
00006744                            
00006744                            BgScroll_LZ:				; XREF: BgScroll_Index
00006744 E280                       		asr.l	#1,d0
00006746 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000674A 4E75                       		rts	
0000674C                            ; ===========================================================================
0000674C                            
0000674C                            BgScroll_MZ:				; XREF: BgScroll_Index
0000674C 4E75                       		rts	
0000674E                            ; ===========================================================================
0000674E                            
0000674E                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000674E E280                       		asr.l	#1,d0
00006750 0640 00C0                  		addi.w	#$C0,d0
00006754 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006758 4E75                       		rts	
0000675A                            ; ===========================================================================
0000675A                            
0000675A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000675A E980                       		asl.l	#4,d0
0000675C 2400                       		move.l	d0,d2
0000675E E380                       		asl.l	#1,d0
00006760 D082                       		add.l	d2,d0
00006762 E080                       		asr.l	#8,d0
00006764 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006768 31C0 F714                  		move.w	d0,($FFFFF714).w
0000676C 4E75                       		rts	
0000676E                            ; ===========================================================================
0000676E                            
0000676E                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000676E E980                       		asl.l	#4,d0
00006770 E380                       		asl.l	#1,d0
00006772 E080                       		asr.l	#8,d0
00006774 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006778 4E75                       		rts	
0000677A                            ; ===========================================================================
0000677A                            
0000677A                            BgScroll_End:				; XREF: BgScroll_Index
0000677A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006780 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006786 4E75                       		rts	
00006788                            ; ===========================================================================
00006788 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000678E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006794 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000679A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000067A0 4E75                       		rts
000067A2                            
000067A2                            ; ---------------------------------------------------------------------------
000067A2                            ; Background layer deformation subroutines
000067A2                            ; ---------------------------------------------------------------------------
000067A2                            
000067A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067A2                            
000067A2                            
000067A2                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000067A2 4A38 F744                  		tst.b	($FFFFF744).w
000067A6 6700                       		beq.s	loc_628E
000067A8 4E75                       		rts	
000067AA                            ; ===========================================================================
000067AA                            
000067AA                            loc_628E:
000067AA 4278 F754                  		clr.w	($FFFFF754).w
000067AE 4278 F756                  		clr.w	($FFFFF756).w
000067B2 4278 F758                  		clr.w	($FFFFF758).w
000067B6 4278 F75A                  		clr.w	($FFFFF75A).w
000067BA 6100 0000                  		bsr.w	ScrollHoriz
000067BE 6100 0000                  		bsr.w	ScrollVertical
000067C2 6100 0000                  		bsr.w	DynScrResizeLoad
000067C6 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000067CC 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000067D2 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000067D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067DE 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067E4 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000067EA 7000                       		moveq	#0,d0
000067EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067F0 D040                       		add.w	d0,d0
000067F2 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000067F6 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000067FA                            ; End of function DeformBgLayer
000067FA                            
000067FA                            ; ===========================================================================
000067FA                            ; ---------------------------------------------------------------------------
000067FA                            ; Offset index for background layer deformation	code
000067FA                            ; ---------------------------------------------------------------------------
000067FA 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000067FE 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006802 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006806 0000                       		dc.w Deform_GHZ-Deform_Index
00006808                            ; ---------------------------------------------------------------------------
00006808                            ; Green	Hill Zone background layer deformation code
00006808                            ; ---------------------------------------------------------------------------
00006808                            
00006808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006808                            
00006808                            
00006808                            Deform_GHZ:				; XREF: Deform_Index
00006808 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000680C 48C4                       		ext.l	d4
0000680E EB84                       		asl.l	#5,d4
00006810 2204                       		move.l	d4,d1
00006812 E384                       		asl.l	#1,d4
00006814 D881                       		add.l	d1,d4
00006816 7A00                       		moveq	#0,d5
00006818 6100 0000                  		bsr.w	ScrollBlock1
0000681C 6100 0000                  		bsr.w	ScrollBlock4
00006820 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006824 3038 F704                  		move.w	($FFFFF704).w,d0
00006828 0240 07FF                  		andi.w	#$7FF,d0
0000682C EA48                       		lsr.w	#5,d0
0000682E 4440                       		neg.w	d0
00006830 0640 0026                  		addi.w	#$26,d0
00006834 31C0 F714                  		move.w	d0,($FFFFF714).w
00006838 3800                       		move.w	d0,d4
0000683A 6100 0000                  		bsr.w	ScrollBlock3
0000683E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006844 323C 006F                  		move.w	#$6F,d1
00006848 9244                       		sub.w	d4,d1
0000684A 3038 F700                  		move.w	($FFFFF700).w,d0
0000684E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006854 6600                       		bne.s	loc_633C
00006856 7000                       		moveq	#0,d0
00006858                            
00006858                            loc_633C:
00006858 4440                       		neg.w	d0
0000685A 4840                       		swap	d0
0000685C 3038 F708                  		move.w	($FFFFF708).w,d0
00006860 4440                       		neg.w	d0
00006862                            
00006862                            loc_6346:
00006862 22C0                       		move.l	d0,(a1)+
00006864 51C9 FFFC                  		dbf	d1,loc_6346
00006868 323C 0027                  		move.w	#$27,d1
0000686C 3038 F710                  		move.w	($FFFFF710).w,d0
00006870 4440                       		neg.w	d0
00006872                            
00006872                            loc_6356:
00006872 22C0                       		move.l	d0,(a1)+
00006874 51C9 FFFC                  		dbf	d1,loc_6356
00006878 3038 F710                  		move.w	($FFFFF710).w,d0
0000687C 0640 0000                  		addi.w	#0,d0
00006880 3438 F700                  		move.w	($FFFFF700).w,d2
00006884 0642 FE00                  		addi.w	#-$200,d2
00006888 9440                       		sub.w	d0,d2
0000688A 48C2                       		ext.l	d2
0000688C E182                       		asl.l	#8,d2
0000688E 85FC 0068                  		divs.w	#$68,d2
00006892 48C2                       		ext.l	d2
00006894 E182                       		asl.l	#8,d2
00006896 7600                       		moveq	#0,d3
00006898 3600                       		move.w	d0,d3
0000689A 323C 0047                  		move.w	#$47,d1
0000689E D244                       		add.w	d4,d1
000068A0                            
000068A0                            loc_6384:
000068A0 3003                       		move.w	d3,d0
000068A2 4440                       		neg.w	d0
000068A4 22C0                       		move.l	d0,(a1)+
000068A6 4843                       		swap	d3
000068A8 D682                       		add.l	d2,d3
000068AA 4843                       		swap	d3
000068AC 51C9 FFF2                  		dbf	d1,loc_6384
000068B0 4E75                       		rts	
000068B2                            ; End of function Deform_GHZ
000068B2                            
000068B2                            ; ---------------------------------------------------------------------------
000068B2                            ; Labyrinth Zone background layer deformation code
000068B2                            ; ---------------------------------------------------------------------------
000068B2                            
000068B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B2                            
000068B2                            
000068B2                            Deform_LZ:				; XREF: Deform_Index
000068B2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068B6 48C4                       		ext.l	d4
000068B8 EF84                       		asl.l	#7,d4
000068BA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068BE 48C5                       		ext.l	d5
000068C0 EF85                       		asl.l	#7,d5
000068C2 6100 0000                  		bsr.w	ScrollBlock1
000068C6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068CC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068D0 323C 00DF                  		move.w	#$DF,d1
000068D4 3038 F700                  		move.w	($FFFFF700).w,d0
000068D8 4440                       		neg.w	d0
000068DA 4840                       		swap	d0
000068DC 3038 F708                  		move.w	($FFFFF708).w,d0
000068E0 4440                       		neg.w	d0
000068E2                            
000068E2                            loc_63C6:
000068E2 22C0                       		move.l	d0,(a1)+
000068E4 51C9 FFFC                  		dbf	d1,loc_63C6
000068E8 3038 F646                  		move.w	($FFFFF646).w,d0
000068EC 9078 F704                  		sub.w	($FFFFF704).w,d0
000068F0 4E75                       		rts	
000068F2                            ; End of function Deform_LZ
000068F2                            
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            ; Marble Zone background layer deformation code
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            
000068F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068F2                            
000068F2                            
000068F2                            Deform_MZ:				; XREF: Deform_Index
000068F2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068F6 48C4                       		ext.l	d4
000068F8 ED84                       		asl.l	#6,d4
000068FA 2204                       		move.l	d4,d1
000068FC E384                       		asl.l	#1,d4
000068FE D881                       		add.l	d1,d4
00006900 7A00                       		moveq	#0,d5
00006902 6100 0000                  		bsr.w	ScrollBlock1
00006906 303C 0200                  		move.w	#$200,d0
0000690A 3238 F704                  		move.w	($FFFFF704).w,d1
0000690E 0441 01C8                  		subi.w	#$1C8,d1
00006912 6500                       		bcs.s	loc_6402
00006914 3401                       		move.w	d1,d2
00006916 D241                       		add.w	d1,d1
00006918 D242                       		add.w	d2,d1
0000691A E441                       		asr.w	#2,d1
0000691C D041                       		add.w	d1,d0
0000691E                            
0000691E                            loc_6402:
0000691E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006922 6100 0000                  		bsr.w	ScrollBlock3
00006926 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000692C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006930 323C 00DF                  		move.w	#$DF,d1
00006934 3038 F700                  		move.w	($FFFFF700).w,d0
00006938 4440                       		neg.w	d0
0000693A 4840                       		swap	d0
0000693C 3038 F708                  		move.w	($FFFFF708).w,d0
00006940 4440                       		neg.w	d0
00006942                            
00006942                            loc_6426:
00006942 22C0                       		move.l	d0,(a1)+
00006944 51C9 FFFC                  		dbf	d1,loc_6426
00006948 4E75                       		rts	
0000694A                            ; End of function Deform_MZ
0000694A                            
0000694A                            ; ---------------------------------------------------------------------------
0000694A                            ; Star Light Zone background layer deformation code
0000694A                            ; ---------------------------------------------------------------------------
0000694A                            
0000694A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000694A                            
0000694A                            
0000694A                            Deform_SLZ:				; XREF: Deform_Index
0000694A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000694E 48C4                       		ext.l	d4
00006950 EB84                       		asl.l	#5,d4
00006952 2204                       		move.l	d4,d1
00006954 E384                       		asl.l	#1,d4
00006956 D881                       		add.l	d1,d4
00006958 7A00                       		moveq	#0,d5
0000695A 6100 0000                  		bsr.w	ScrollBlock1
0000695E 6100 0000                  		bsr.w	ScrollBlock3
00006962 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006966                            	;	move.w	($FFFFF704).w,d0
00006966                            	;	andi.w	#$7FF,d0
00006966 EA48                       		lsr.w	#5,d0
00006968 4440                       		neg.w	d0
0000696A 0640 0026                  		addi.w	#$26,d0
0000696E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006972 3800                       		move.w	d0,d4
00006974                            	;	bsr.w	ScrollBlock3
00006974 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000697A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000697E                            
0000697E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006982 4440                       		neg.w	d0			; negate (positive to negative)
00006984 4840                       		swap	d0			; send to the left side of d0
00006986 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000698A 45F8 A800                  		lea	($FFFFA800).w,a2
0000698E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006994 069A 0000 C000             		addi.l	#$C000,(a2)+
0000699A 3038 A800                  		move.w	($FFFFA800).w,d0
0000699E 4440                       		neg.w	d0			; negate (positive to negative)
000069A0 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069A2 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069A6                            slz_DeformLoop_1:
000069A6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000069AC                            
000069AC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069B0 4440                       		neg.w	d0			; negate (positive to negative)
000069B2 4840                       		swap	d0			; send to the left side of d0
000069B4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B8 45F8 A800                  		lea	($FFFFA800).w,a2
000069BC 069A 0000 5000             		addi.l	#$5000,(a2)+
000069C2 069A 0000 C000             		addi.l	#$C000,(a2)+
000069C8 3038 A800                  		move.w	($FFFFA800).w,d0
000069CC 4440                       		neg.w	d0			; negate (positive to negative)
000069CE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069D0 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D4                            slz_DeformLoop_2:
000069D4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000069DA                            
000069DA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069DE 4440                       		neg.w	d0			; negate (positive to negative)
000069E0 4840                       		swap	d0			; send to the left side of d0
000069E2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069E6 45F8 A800                  		lea	($FFFFA800).w,a2
000069EA 069A 0000 5000             		addi.l	#$5000,(a2)+
000069F0 069A 0000 C000             		addi.l	#$C000,(a2)+
000069F6 3038 A800                  		move.w	($FFFFA800).w,d0
000069FA 4440                       		neg.w	d0			; negate (positive to negative)
000069FC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069FE 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A02                            slz_DeformLoop_3:
00006A02 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A04 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006A08                            
00006A08 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A0C 4440                       		neg.w	d0			; negate (positive to negative)
00006A0E 4840                       		swap	d0			; send to the left side of d0
00006A10 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A14 45F8 A800                  		lea	($FFFFA800).w,a2
00006A18 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A1E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A24 3038 A800                  		move.w	($FFFFA800).w,d0
00006A28 4440                       		neg.w	d0			; negate (positive to negative)
00006A2A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A2C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A30                            slz_DeformLoop_4:
00006A30 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A32 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006A36                            
00006A36 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A3A 4440                       		neg.w	d0			; negate (positive to negative)
00006A3C 4840                       		swap	d0			; send to the left side of d0
00006A3E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A42 45F8 A800                  		lea	($FFFFA800).w,a2
00006A46 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A4C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A52 3038 A800                  		move.w	($FFFFA800).w,d0
00006A56 4440                       		neg.w	d0			; negate (positive to negative)
00006A58 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A5A 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A5E                            slz_DeformLoop_5:
00006A5E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A60 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A64                            
00006A64 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A 4840                       		swap	d0			; send to the left side of d0
00006A6C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A70 4440                       		neg.w	d0			; negate (positive to negative)
00006A72 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A74 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A78                            slz_DeformLoop_6:
00006A78 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A7E                            
00006A7E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 4840                       		swap	d0			; send to the left side of d0
00006A86 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8A 4440                       		neg.w	d0			; negate (positive to negative)
00006A8C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A8E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A92                            slz_DeformLoop_7:
00006A92 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A94 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A98                            
00006A98 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A9C 4440                       		neg.w	d0			; negate (positive to negative)
00006A9E 4840                       		swap	d0			; send to the left side of d0
00006AA0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AA4 4440                       		neg.w	d0			; negate (positive to negative)
00006AA6 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006AA8 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAC                            slz_DeformLoop_8:
00006AAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006AB2                            
00006AB2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB6 4440                       		neg.w	d0			; negate (positive to negative)
00006AB8 4840                       		swap	d0			; send to the left side of d0
00006ABA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ABE 4440                       		neg.w	d0			; negate (positive to negative)
00006AC0 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006AC2 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC6                            slz_DeformLoop_9:
00006AC6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006ACC                            
00006ACC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AD0 4440                       		neg.w	d0			; negate (positive to negative)
00006AD2 4840                       		swap	d0			; send to the left side of d0
00006AD4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD8 4440                       		neg.w	d0			; negate (positive to negative)
00006ADA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006ADC 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AE0                            slz_DeformLoop_10:
00006AE0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AE2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AE6                            
00006AE6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AEA 4440                       		neg.w	d0			; negate (positive to negative)
00006AEC 4840                       		swap	d0			; send to the left side of d0
00006AEE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AF2 4440                       		neg.w	d0			; negate (positive to negative)
00006AF4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006AF6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AFA                            slz_DeformLoop_11:
00006AFA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AFC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006B00                            
00006B00 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B04 4440                       		neg.w	d0			; negate (positive to negative)
00006B06 4840                       		swap	d0			; send to the left side of d0
00006B08 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B0C 4440                       		neg.w	d0			; negate (positive to negative)
00006B0E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B10 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B14                            slz_DeformLoop_12:
00006B14 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B16 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006B1A                            
00006B1A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B1E 4440                       		neg.w	d0			; negate (positive to negative)
00006B20 4840                       		swap	d0			; send to the left side of d0
00006B22 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B26 4440                       		neg.w	d0			; negate (positive to negative)
00006B28 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B2A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B2E                            slz_DeformLoop_13:
00006B2E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B30 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006B34 4E75                       		rts	
00006B36                            ; End of function Deform_SLZ
00006B36 4E75                       		rts	
00006B38                            ; End of function Deform_SLZ_2
00006B38                            
00006B38                            ; ---------------------------------------------------------------------------
00006B38                            ; Spring Yard Zone background layer deformation	code
00006B38                            ; ---------------------------------------------------------------------------
00006B38                            
00006B38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B38                            
00006B38                            
00006B38                            Deform_SYZ:				; XREF: Deform_Index
00006B38 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B3C 48C4                       		ext.l	d4
00006B3E ED84                       		asl.l	#6,d4
00006B40 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B44 48C5                       		ext.l	d5
00006B46 E985                       		asl.l	#4,d5
00006B48 2205                       		move.l	d5,d1
00006B4A E385                       		asl.l	#1,d5
00006B4C DA81                       		add.l	d1,d5
00006B4E 6100 0000                  		bsr.w	ScrollBlock1
00006B52 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B58 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B5C 323C 00DF                  		move.w	#$DF,d1
00006B60 3038 F700                  		move.w	($FFFFF700).w,d0
00006B64 4440                       		neg.w	d0
00006B66 4840                       		swap	d0
00006B68 3038 F708                  		move.w	($FFFFF708).w,d0
00006B6C 4440                       		neg.w	d0
00006B6E                            
00006B6E                            loc_653C:
00006B6E 22C0                       		move.l	d0,(a1)+
00006B70 51C9 FFFC                  		dbf	d1,loc_653C
00006B74 4E75                       		rts	
00006B76                            ; End of function Deform_SYZ
00006B76                            
00006B76                            ; ---------------------------------------------------------------------------
00006B76                            ; Scrap	Brain Zone background layer deformation	code
00006B76                            ; ---------------------------------------------------------------------------
00006B76                            
00006B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B76                            
00006B76                            
00006B76                            Deform_SBZ:				; XREF: Deform_Index
00006B76 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B7A 48C4                       		ext.l	d4
00006B7C ED84                       		asl.l	#6,d4
00006B7E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B82 48C5                       		ext.l	d5
00006B84 E985                       		asl.l	#4,d5
00006B86 E385                       		asl.l	#1,d5
00006B88 6100 0000                  		bsr.w	ScrollBlock1
00006B8C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B92 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B96 323C 00DF                  		move.w	#$DF,d1
00006B9A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B9E 4440                       		neg.w	d0
00006BA0 4840                       		swap	d0
00006BA2 3038 F708                  		move.w	($FFFFF708).w,d0
00006BA6 4440                       		neg.w	d0
00006BA8                            
00006BA8                            loc_6576:
00006BA8 22C0                       		move.l	d0,(a1)+
00006BAA 51C9 FFFC                  		dbf	d1,loc_6576
00006BAE 4E75                       		rts	
00006BB0                            ; End of function Deform_SBZ
00006BB0                            
00006BB0                            ; ---------------------------------------------------------------------------
00006BB0                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BB0                            ; ---------------------------------------------------------------------------
00006BB0                            
00006BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BB0                            
00006BB0                            
00006BB0                            ScrollHoriz:				; XREF: DeformBgLayer
00006BB0 3838 F700                  		move.w	($FFFFF700).w,d4
00006BB4 6100                       		bsr.s	ScrollHoriz2
00006BB6 3038 F700                  		move.w	($FFFFF700).w,d0
00006BBA 0240 0010                  		andi.w	#$10,d0
00006BBE 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BC2 B300                       		eor.b	d1,d0
00006BC4 6600                       		bne.s	locret_65B0
00006BC6 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BCC 3038 F700                  		move.w	($FFFFF700).w,d0
00006BD0 9044                       		sub.w	d4,d0
00006BD2 6A00                       		bpl.s	loc_65AA
00006BD4 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BDA 4E75                       		rts	
00006BDC                            ; ===========================================================================
00006BDC                            
00006BDC                            loc_65AA:
00006BDC 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BE2                            
00006BE2                            locret_65B0:
00006BE2 4E75                       		rts	
00006BE4                            ; End of function ScrollHoriz
00006BE4                            
00006BE4                            
00006BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE4                            
00006BE4                            
00006BE4                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BE4 3038 D008                  		move.w	($FFFFD008).w,d0
00006BE8 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BEC 0440 0090                  		subi.w	#$90,d0
00006BF0 6500                       		bcs.s	loc_65F6
00006BF2 0440 0010                  		subi.w	#$10,d0
00006BF6 6400                       		bcc.s	loc_65CC
00006BF8 4278 F73A                  		clr.w	($FFFFF73A).w
00006BFC 4E75                       		rts	
00006BFE                            ; ===========================================================================
00006BFE                            
00006BFE                            loc_65CC:
00006BFE 0C40 0010                  		cmpi.w	#$10,d0
00006C02 6500                       		bcs.s	loc_65D6
00006C04 303C 0010                  		move.w	#$10,d0
00006C08                            
00006C08                            loc_65D6:
00006C08 D078 F700                  		add.w	($FFFFF700).w,d0
00006C0C B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C10 6D00                       		blt.s	loc_65E4
00006C12 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C16                            
00006C16                            loc_65E4:
00006C16 3200                       		move.w	d0,d1
00006C18 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C1C E141                       		asl.w	#8,d1
00006C1E 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C22 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C26 4E75                       		rts	
00006C28                            ; ===========================================================================
00006C28                            
00006C28                            loc_65F6:				; XREF: ScrollHoriz2
00006C28 D078 F700                  		add.w	($FFFFF700).w,d0
00006C2C B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C30 6EE4                       		bgt.s	loc_65E4
00006C32 3038 F728                  		move.w	($FFFFF728).w,d0
00006C36 60DE                       		bra.s	loc_65E4
00006C38                            ; End of function ScrollHoriz2
00006C38                            
00006C38                            ; ===========================================================================
00006C38 4A40                       		tst.w	d0
00006C3A 6A00                       		bpl.s	loc_6610
00006C3C 303C FFFE                  		move.w	#-2,d0
00006C40 60E6                       		bra.s	loc_65F6
00006C42                            ; ===========================================================================
00006C42                            
00006C42                            loc_6610:
00006C42 303C 0002                  		move.w	#2,d0
00006C46 60B6                       		bra.s	loc_65CC
00006C48                            
00006C48                            ; ---------------------------------------------------------------------------
00006C48                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C48                            ; ---------------------------------------------------------------------------
00006C48                            
00006C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C48                            
00006C48                            
00006C48                            ScrollVertical:				; XREF: DeformBgLayer
00006C48 7200                       		moveq	#0,d1
00006C4A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C4E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C52 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C58 6700                       		beq.s	loc_662A
00006C5A 5B40                       		subq.w	#5,d0
00006C5C                            
00006C5C                            loc_662A:
00006C5C 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C62 6700                       		beq.s	loc_664A
00006C64 0640 0020                  		addi.w	#$20,d0
00006C68 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C6C 6500                       		bcs.s	loc_6696
00006C6E 0440 0040                  		subi.w	#$40,d0
00006C72 6400                       		bcc.s	loc_6696
00006C74 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C78 6600                       		bne.s	loc_66A8
00006C7A 6000                       		bra.s	loc_6656
00006C7C                            ; ===========================================================================
00006C7C                            
00006C7C                            loc_664A:
00006C7C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C80 6600                       		bne.s	loc_665C
00006C82 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C86 6600                       		bne.s	loc_66A8
00006C88                            
00006C88                            loc_6656:
00006C88 4278 F73C                  		clr.w	($FFFFF73C).w
00006C8C 4E75                       		rts	
00006C8E                            ; ===========================================================================
00006C8E                            
00006C8E                            loc_665C:
00006C8E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C94 6600                       		bne.s	loc_6684
00006C96 3238 D014                  		move.w	($FFFFD014).w,d1
00006C9A 6A00                       		bpl.s	loc_666C
00006C9C 4441                       		neg.w	d1
00006C9E                            
00006C9E                            loc_666C:
00006C9E 0C41 0800                  		cmpi.w	#$800,d1
00006CA2 6400                       		bcc.s	loc_6696
00006CA4 323C 0600                  		move.w	#$600,d1
00006CA8 0C40 0006                  		cmpi.w	#6,d0
00006CAC 6E00                       		bgt.s	loc_66F6
00006CAE 0C40 FFFA                  		cmpi.w	#-6,d0
00006CB2 6D00                       		blt.s	loc_66C0
00006CB4 6000                       		bra.s	loc_66AE
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            loc_6684:
00006CB6 323C 0200                  		move.w	#$200,d1
00006CBA 0C40 0002                  		cmpi.w	#2,d0
00006CBE 6E00                       		bgt.s	loc_66F6
00006CC0 0C40 FFFE                  		cmpi.w	#-2,d0
00006CC4 6D00                       		blt.s	loc_66C0
00006CC6 6000                       		bra.s	loc_66AE
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            loc_6696:
00006CC8 323C 1000                  		move.w	#$1000,d1
00006CCC 0C40 0010                  		cmpi.w	#$10,d0
00006CD0 6E00                       		bgt.s	loc_66F6
00006CD2 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CD6 6D00                       		blt.s	loc_66C0
00006CD8 6000                       		bra.s	loc_66AE
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_66A8:
00006CDA 7000                       		moveq	#0,d0
00006CDC 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CE0                            
00006CE0                            loc_66AE:
00006CE0 7200                       		moveq	#0,d1
00006CE2 3200                       		move.w	d0,d1
00006CE4 D278 F704                  		add.w	($FFFFF704).w,d1
00006CE8 4A40                       		tst.w	d0
00006CEA 6A00 0000                  		bpl.w	loc_6700
00006CEE 6000 0000                  		bra.w	loc_66CC
00006CF2                            ; ===========================================================================
00006CF2                            
00006CF2                            loc_66C0:
00006CF2 4441                       		neg.w	d1
00006CF4 48C1                       		ext.l	d1
00006CF6 E181                       		asl.l	#8,d1
00006CF8 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CFC 4841                       		swap	d1
00006CFE                            
00006CFE                            loc_66CC:
00006CFE B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006D02 6E00                       		bgt.s	loc_6724
00006D04 0C41 FF00                  		cmpi.w	#-$100,d1
00006D08 6E00                       		bgt.s	loc_66F0
00006D0A 0241 07FF                  		andi.w	#$7FF,d1
00006D0E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D14 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D1A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D20 6000                       		bra.s	loc_6724
00006D22                            ; ===========================================================================
00006D22                            
00006D22                            loc_66F0:
00006D22 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D26 6000                       		bra.s	loc_6724
00006D28                            ; ===========================================================================
00006D28                            
00006D28                            loc_66F6:
00006D28 48C1                       		ext.l	d1
00006D2A E181                       		asl.l	#8,d1
00006D2C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D30 4841                       		swap	d1
00006D32                            
00006D32                            loc_6700:
00006D32 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D36 6D00                       		blt.s	loc_6724
00006D38 0441 0800                  		subi.w	#$800,d1
00006D3C 6500                       		bcs.s	loc_6720
00006D3E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D44 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D4A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D50 6000                       		bra.s	loc_6724
00006D52                            ; ===========================================================================
00006D52                            
00006D52                            loc_6720:
00006D52 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D56                            
00006D56                            loc_6724:
00006D56 3838 F704                  		move.w	($FFFFF704).w,d4
00006D5A 4841                       		swap	d1
00006D5C 2601                       		move.l	d1,d3
00006D5E 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D62 E09B                       		ror.l	#8,d3
00006D64 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D68 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D6C 3038 F704                  		move.w	($FFFFF704).w,d0
00006D70 0240 0010                  		andi.w	#$10,d0
00006D74 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D78 B300                       		eor.b	d1,d0
00006D7A 6600                       		bne.s	locret_6766
00006D7C 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D82 3038 F704                  		move.w	($FFFFF704).w,d0
00006D86 9044                       		sub.w	d4,d0
00006D88 6A00                       		bpl.s	loc_6760
00006D8A 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D90 4E75                       		rts	
00006D92                            ; ===========================================================================
00006D92                            
00006D92                            loc_6760:
00006D92 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D98                            
00006D98                            locret_6766:
00006D98 4E75                       		rts	
00006D9A                            ; End of function ScrollVertical
00006D9A                            
00006D9A                            
00006D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D9A                            
00006D9A                            
00006D9A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D9A 2438 F708                  		move.l	($FFFFF708).w,d2
00006D9E 2002                       		move.l	d2,d0
00006DA0 D084                       		add.l	d4,d0
00006DA2 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DA6 2200                       		move.l	d0,d1
00006DA8 4841                       		swap	d1
00006DAA 0241 0010                  		andi.w	#$10,d1
00006DAE 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DB2 B701                       		eor.b	d3,d1
00006DB4 6600                       		bne.s	loc_679C
00006DB6 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DBC 9082                       		sub.l	d2,d0
00006DBE 6A00                       		bpl.s	loc_6796
00006DC0 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DC6 6000                       		bra.s	loc_679C
00006DC8                            ; ===========================================================================
00006DC8                            
00006DC8                            loc_6796:
00006DC8 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DCE                            
00006DCE                            loc_679C:
00006DCE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DD2 2003                       		move.l	d3,d0
00006DD4 D085                       		add.l	d5,d0
00006DD6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DDA 2200                       		move.l	d0,d1
00006DDC 4841                       		swap	d1
00006DDE 0241 0010                  		andi.w	#$10,d1
00006DE2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DE6 B501                       		eor.b	d2,d1
00006DE8 6600                       		bne.s	locret_67D0
00006DEA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DF0 9083                       		sub.l	d3,d0
00006DF2 6A00                       		bpl.s	loc_67CA
00006DF4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DFA 4E75                       		rts	
00006DFC                            ; ===========================================================================
00006DFC                            
00006DFC                            loc_67CA:
00006DFC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E02                            
00006E02                            locret_67D0:
00006E02 4E75                       		rts	
00006E04                            ; End of function ScrollBlock1
00006E04                            
00006E04                            
00006E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E04                            
00006E04                            
00006E04                            ScrollBlock2:				; XREF: Deform_SLZ
00006E04 2438 F708                  		move.l	($FFFFF708).w,d2
00006E08 2002                       		move.l	d2,d0
00006E0A D084                       		add.l	d4,d0
00006E0C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E10 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E14 2003                       		move.l	d3,d0
00006E16 D085                       		add.l	d5,d0
00006E18 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E1C 2200                       		move.l	d0,d1
00006E1E 4841                       		swap	d1
00006E20 0241 0010                  		andi.w	#$10,d1
00006E24 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E28 B501                       		eor.b	d2,d1
00006E2A 6600                       		bne.s	locret_6812
00006E2C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E32 9083                       		sub.l	d3,d0
00006E34 6A00                       		bpl.s	loc_680C
00006E36 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E3C 4E75                       		rts	
00006E3E                            ; ===========================================================================
00006E3E                            
00006E3E                            loc_680C:
00006E3E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E44                            
00006E44                            locret_6812:
00006E44 4E75                       		rts	
00006E46                            ; End of function ScrollBlock2
00006E46                            
00006E46                            
00006E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E46                            
00006E46                            
00006E46                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E46 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E4A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E4E 3200                       		move.w	d0,d1
00006E50 0241 0010                  		andi.w	#$10,d1
00006E54 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E58 B501                       		eor.b	d2,d1
00006E5A 6600                       		bne.s	locret_6842
00006E5C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E62 9043                       		sub.w	d3,d0
00006E64 6A00                       		bpl.s	loc_683C
00006E66 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E6C 4E75                       		rts	
00006E6E                            ; ===========================================================================
00006E6E                            
00006E6E                            loc_683C:
00006E6E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E74                            
00006E74                            locret_6842:
00006E74 4E75                       		rts	
00006E76                            ; End of function ScrollBlock3
00006E76                            
00006E76                            
00006E76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E76                            
00006E76                            
00006E76                            ScrollBlock4:				; XREF: Deform_GHZ
00006E76 3438 F710                  		move.w	($FFFFF710).w,d2
00006E7A 3638 F714                  		move.w	($FFFFF714).w,d3
00006E7E 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E82 48C0                       		ext.l	d0
00006E84 EF80                       		asl.l	#7,d0
00006E86 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E8A 3038 F710                  		move.w	($FFFFF710).w,d0
00006E8E 0240 0010                  		andi.w	#$10,d0
00006E92 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E96 B300                       		eor.b	d1,d0
00006E98 6600                       		bne.s	locret_6884
00006E9A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006EA0 3038 F710                  		move.w	($FFFFF710).w,d0
00006EA4 9042                       		sub.w	d2,d0
00006EA6 6A00                       		bpl.s	loc_687E
00006EA8 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EAE 6000                       		bra.s	locret_6884
00006EB0                            ; ===========================================================================
00006EB0                            
00006EB0                            loc_687E:
00006EB0 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006EB6                            
00006EB6                            locret_6884:
00006EB6 4E75                       		rts	
00006EB8                            ; End of function ScrollBlock4
00006EB8                            
00006EB8                            
00006EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB8                            
00006EB8                            
00006EB8                            sub_6886:				; XREF: loc_C44
00006EB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EBE 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EC4 45F8 F756                  		lea	($FFFFF756).w,a2
00006EC8 47F8 F708                  		lea	($FFFFF708).w,a3
00006ECC 49F8 A440                  		lea	($FFFFA440).w,a4
00006ED0 343C 6000                  		move.w	#$6000,d2
00006ED4 6100 0000                  		bsr.w	sub_6954
00006ED8 45F8 F758                  		lea	($FFFFF758).w,a2
00006EDC 47F8 F710                  		lea	($FFFFF710).w,a3
00006EE0 6000 0000                  		bra.w	sub_69F4
00006EE4                            ; End of function sub_6886
00006EE4                            
00006EE4                            ; ---------------------------------------------------------------------------
00006EE4                            ; Subroutine to	display	correct	tiles as you move
00006EE4                            ; ---------------------------------------------------------------------------
00006EE4                            
00006EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EE4                            
00006EE4                            
00006EE4                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EE4 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EEA 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EF0 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EF4 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EF8 49F8 A440                  		lea	($FFFFA440).w,a4
00006EFC 343C 6000                  		move.w	#$6000,d2
00006F00 6100 0000                  		bsr.w	sub_6954
00006F04 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F08 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F0C 6100 0000                  		bsr.w	sub_69F4
00006F10 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F14 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F18 49F8 A400                  		lea	($FFFFA400).w,a4
00006F1C 343C 4000                  		move.w	#$4000,d2
00006F20 4A12                       		tst.b	(a2)
00006F22 6700                       		beq.s	locret_6952
00006F24 0892 0000                  		bclr	#0,(a2)
00006F28 6700                       		beq.s	loc_6908
00006F2A 78F0                       		moveq	#-$10,d4
00006F2C 7AF0                       		moveq	#-$10,d5
00006F2E 6100 0000                  		bsr.w	sub_6C20
00006F32 78F0                       		moveq	#-$10,d4
00006F34 7AF0                       		moveq	#-$10,d5
00006F36 6100 0000                  		bsr.w	sub_6AD8
00006F3A                            
00006F3A                            loc_6908:
00006F3A 0892 0001                  		bclr	#1,(a2)
00006F3E 6700                       		beq.s	loc_6922
00006F40 383C 00E0                  		move.w	#$E0,d4
00006F44 7AF0                       		moveq	#-$10,d5
00006F46 6100 0000                  		bsr.w	sub_6C20
00006F4A 383C 00E0                  		move.w	#$E0,d4
00006F4E 7AF0                       		moveq	#-$10,d5
00006F50 6100 0000                  		bsr.w	sub_6AD8
00006F54                            
00006F54                            loc_6922:
00006F54 0892 0002                  		bclr	#2,(a2)
00006F58 6700                       		beq.s	loc_6938
00006F5A 78F0                       		moveq	#-$10,d4
00006F5C 7AF0                       		moveq	#-$10,d5
00006F5E 6100 0000                  		bsr.w	sub_6C20
00006F62 78F0                       		moveq	#-$10,d4
00006F64 7AF0                       		moveq	#-$10,d5
00006F66 6100 0000                  		bsr.w	sub_6B04
00006F6A                            
00006F6A                            loc_6938:
00006F6A 0892 0003                  		bclr	#3,(a2)
00006F6E 6700                       		beq.s	locret_6952
00006F70 78F0                       		moveq	#-$10,d4
00006F72 3A3C 0140                  		move.w	#$140,d5
00006F76 6100 0000                  		bsr.w	sub_6C20
00006F7A 78F0                       		moveq	#-$10,d4
00006F7C 3A3C 0140                  		move.w	#$140,d5
00006F80 6100 0000                  		bsr.w	sub_6B04
00006F84                            
00006F84                            locret_6952:
00006F84 4E75                       		rts	
00006F86                            ; End of function LoadTilesAsYouMove
00006F86                            
00006F86                            
00006F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F86                            
00006F86                            
00006F86                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F86 4A12                       		tst.b	(a2)
00006F88 6700 0000                  		beq.w	locret_69F2
00006F8C 0892 0000                  		bclr	#0,(a2)
00006F90 6700                       		beq.s	loc_6972
00006F92 78F0                       		moveq	#-$10,d4
00006F94 7AF0                       		moveq	#-$10,d5
00006F96 6100 0000                  		bsr.w	sub_6C20
00006F9A 78F0                       		moveq	#-$10,d4
00006F9C 7AF0                       		moveq	#-$10,d5
00006F9E 7C1F                       		moveq	#$1F,d6
00006FA0 6100 0000                  		bsr.w	sub_6ADA
00006FA4                            
00006FA4                            loc_6972:
00006FA4 0892 0001                  		bclr	#1,(a2)
00006FA8 6700                       		beq.s	loc_698E
00006FAA 383C 00E0                  		move.w	#$E0,d4
00006FAE 7AF0                       		moveq	#-$10,d5
00006FB0 6100 0000                  		bsr.w	sub_6C20
00006FB4 383C 00E0                  		move.w	#$E0,d4
00006FB8 7AF0                       		moveq	#-$10,d5
00006FBA 7C1F                       		moveq	#$1F,d6
00006FBC 6100 0000                  		bsr.w	sub_6ADA
00006FC0                            
00006FC0                            loc_698E:
00006FC0 0892 0002                  		bclr	#2,(a2)
00006FC4 6700                       		beq.s	loc_69BE
00006FC6 78F0                       		moveq	#-$10,d4
00006FC8 7AF0                       		moveq	#-$10,d5
00006FCA 6100 0000                  		bsr.w	sub_6C20
00006FCE 78F0                       		moveq	#-$10,d4
00006FD0 7AF0                       		moveq	#-$10,d5
00006FD2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FD6 322B 0004                  		move.w	4(a3),d1
00006FDA 0241 FFF0                  		andi.w	#-$10,d1
00006FDE 9C41                       		sub.w	d1,d6
00006FE0 6D00                       		blt.s	loc_69BE
00006FE2 E84E                       		lsr.w	#4,d6
00006FE4 0C46 000F                  		cmpi.w	#$F,d6
00006FE8 6500                       		bcs.s	loc_69BA
00006FEA 7C0F                       		moveq	#$F,d6
00006FEC                            
00006FEC                            loc_69BA:
00006FEC 6100 0000                  		bsr.w	sub_6B06
00006FF0                            
00006FF0                            loc_69BE:
00006FF0 0892 0003                  		bclr	#3,(a2)
00006FF4 6700                       		beq.s	locret_69F2
00006FF6 78F0                       		moveq	#-$10,d4
00006FF8 3A3C 0140                  		move.w	#$140,d5
00006FFC 6100 0000                  		bsr.w	sub_6C20
00007000 78F0                       		moveq	#-$10,d4
00007002 3A3C 0140                  		move.w	#$140,d5
00007006 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000700A 322B 0004                  		move.w	4(a3),d1
0000700E 0241 FFF0                  		andi.w	#-$10,d1
00007012 9C41                       		sub.w	d1,d6
00007014 6D00                       		blt.s	locret_69F2
00007016 E84E                       		lsr.w	#4,d6
00007018 0C46 000F                  		cmpi.w	#$F,d6
0000701C 6500                       		bcs.s	loc_69EE
0000701E 7C0F                       		moveq	#$F,d6
00007020                            
00007020                            loc_69EE:
00007020 6100 0000                  		bsr.w	sub_6B06
00007024                            
00007024                            locret_69F2:
00007024 4E75                       		rts	
00007026                            ; End of function sub_6954
00007026                            
00007026                            
00007026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007026                            
00007026                            
00007026                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007026 4A12                       		tst.b	(a2)
00007028 6700 0000                  		beq.w	locret_6A80
0000702C 0892 0002                  		bclr	#2,(a2)
00007030 6700                       		beq.s	loc_6A3E
00007032 0C53 0010                  		cmpi.w	#$10,(a3)
00007036 6500                       		bcs.s	loc_6A3E
00007038 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000703C 322B 0004                  		move.w	4(a3),d1
00007040 0241 FFF0                  		andi.w	#-$10,d1
00007044 9841                       		sub.w	d1,d4
00007046 3F04                       		move.w	d4,-(sp)
00007048 7AF0                       		moveq	#-$10,d5
0000704A 6100 0000                  		bsr.w	sub_6C20
0000704E 381F                       		move.w	(sp)+,d4
00007050 7AF0                       		moveq	#-$10,d5
00007052 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007056 322B 0004                  		move.w	4(a3),d1
0000705A 0241 FFF0                  		andi.w	#-$10,d1
0000705E 9C41                       		sub.w	d1,d6
00007060 6D00                       		blt.s	loc_6A3E
00007062 E84E                       		lsr.w	#4,d6
00007064 0446 000E                  		subi.w	#$E,d6
00007068 6400                       		bcc.s	loc_6A3E
0000706A 4446                       		neg.w	d6
0000706C 6100 0000                  		bsr.w	sub_6B06
00007070                            
00007070                            loc_6A3E:
00007070 0892 0003                  		bclr	#3,(a2)
00007074 6700                       		beq.s	locret_6A80
00007076 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000707A 322B 0004                  		move.w	4(a3),d1
0000707E 0241 FFF0                  		andi.w	#-$10,d1
00007082 9841                       		sub.w	d1,d4
00007084 3F04                       		move.w	d4,-(sp)
00007086 3A3C 0140                  		move.w	#$140,d5
0000708A 6100 0000                  		bsr.w	sub_6C20
0000708E 381F                       		move.w	(sp)+,d4
00007090 3A3C 0140                  		move.w	#$140,d5
00007094 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007098 322B 0004                  		move.w	4(a3),d1
0000709C 0241 FFF0                  		andi.w	#-$10,d1
000070A0 9C41                       		sub.w	d1,d6
000070A2 6D00                       		blt.s	locret_6A80
000070A4 E84E                       		lsr.w	#4,d6
000070A6 0446 000E                  		subi.w	#$E,d6
000070AA 6400                       		bcc.s	locret_6A80
000070AC 4446                       		neg.w	d6
000070AE 6100 0000                  		bsr.w	sub_6B06
000070B2                            
000070B2                            locret_6A80:
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_69F4
000070B4                            
000070B4                            ; ===========================================================================
000070B4 4A12                       		tst.b	(a2)
000070B6 6700                       		beq.s	locret_6AD6
000070B8 0892 0002                  		bclr	#2,(a2)
000070BC 6700                       		beq.s	loc_6AAC
000070BE 383C 00D0                  		move.w	#$D0,d4
000070C2 322B 0004                  		move.w	4(a3),d1
000070C6 0241 FFF0                  		andi.w	#-$10,d1
000070CA 9841                       		sub.w	d1,d4
000070CC 3F04                       		move.w	d4,-(sp)
000070CE 7AF0                       		moveq	#-$10,d5
000070D0 6100 0000                  		bsr.w	sub_6C3C
000070D4 381F                       		move.w	(sp)+,d4
000070D6 7AF0                       		moveq	#-$10,d5
000070D8 7C02                       		moveq	#2,d6
000070DA 6100 0000                  		bsr.w	sub_6B06
000070DE                            
000070DE                            loc_6AAC:
000070DE 0892 0003                  		bclr	#3,(a2)
000070E2 6700                       		beq.s	locret_6AD6
000070E4 383C 00D0                  		move.w	#$D0,d4
000070E8 322B 0004                  		move.w	4(a3),d1
000070EC 0241 FFF0                  		andi.w	#-$10,d1
000070F0 9841                       		sub.w	d1,d4
000070F2 3F04                       		move.w	d4,-(sp)
000070F4 3A3C 0140                  		move.w	#$140,d5
000070F8 6100 0000                  		bsr.w	sub_6C3C
000070FC 381F                       		move.w	(sp)+,d4
000070FE 3A3C 0140                  		move.w	#$140,d5
00007102 7C02                       		moveq	#2,d6
00007104 6100 0000                  		bsr.w	sub_6B06
00007108                            
00007108                            locret_6AD6:
00007108 4E75                       		rts	
0000710A                            
0000710A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710A                            
0000710A                            
0000710A                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000710A 7C15                       		moveq	#$15,d6
0000710C                            ; End of function sub_6AD8
0000710C                            
0000710C                            
0000710C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710C                            
0000710C                            
0000710C                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000710C 2E3C 0080 0000             		move.l	#$800000,d7
00007112 2200                       		move.l	d0,d1
00007114                            
00007114                            loc_6AE2:
00007114 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007118 6100 0000                  		bsr.w	sub_6BD6
0000711C 2001                       		move.l	d1,d0
0000711E 6100 0000                  		bsr.w	sub_6B32
00007122 5801                       		addq.b	#4,d1
00007124 0201 007F                  		andi.b	#$7F,d1
00007128 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000712C 0645 0010                  		addi.w	#$10,d5
00007130 51CE FFE2                  		dbf	d6,loc_6AE2
00007134 4E75                       		rts	
00007136                            ; End of function sub_6ADA
00007136                            
00007136                            
00007136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007136                            
00007136                            
00007136                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007136 7C0F                       		moveq	#$F,d6
00007138                            ; End of function sub_6B04
00007138                            
00007138                            
00007138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007138                            
00007138                            
00007138                            sub_6B06:				; XREF: sub_6954
00007138 2E3C 0080 0000             		move.l	#$800000,d7
0000713E 2200                       		move.l	d0,d1
00007140                            
00007140                            loc_6B0E:
00007140 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007144 6100 0000                  		bsr.w	sub_6BD6
00007148 2001                       		move.l	d1,d0
0000714A 6100 0000                  		bsr.w	sub_6B32
0000714E 0641 0100                  		addi.w	#$100,d1
00007152 0241 0FFF                  		andi.w	#$FFF,d1
00007156 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000715A 0644 0010                  		addi.w	#$10,d4
0000715E 51CE FFE0                  		dbf	d6,loc_6B0E
00007162 4E75                       		rts	
00007164                            ; End of function sub_6B06
00007164                            
00007164                            
00007164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007164                            
00007164                            
00007164                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007164 8042                       		or.w	d2,d0
00007166 4840                       		swap	d0
00007168 0810 0004                  		btst	#4,(a0)
0000716C 6600                       		bne.s	loc_6B6E
0000716E 0810 0003                  		btst	#3,(a0)
00007172 6600                       		bne.s	loc_6B4E
00007174 2A80                       		move.l	d0,(a5)
00007176 2C99                       		move.l	(a1)+,(a6)
00007178 D087                       		add.l	d7,d0
0000717A 2A80                       		move.l	d0,(a5)
0000717C 2C99                       		move.l	(a1)+,(a6)
0000717E 4E75                       		rts	
00007180                            ; ===========================================================================
00007180                            
00007180                            loc_6B4E:
00007180 2A80                       		move.l	d0,(a5)
00007182 2819                       		move.l	(a1)+,d4
00007184 0A84 0800 0800             		eori.l	#$8000800,d4
0000718A 4844                       		swap	d4
0000718C 2C84                       		move.l	d4,(a6)
0000718E D087                       		add.l	d7,d0
00007190 2A80                       		move.l	d0,(a5)
00007192 2819                       		move.l	(a1)+,d4
00007194 0A84 0800 0800             		eori.l	#$8000800,d4
0000719A 4844                       		swap	d4
0000719C 2C84                       		move.l	d4,(a6)
0000719E 4E75                       		rts	
000071A0                            ; ===========================================================================
000071A0                            
000071A0                            loc_6B6E:
000071A0 0810 0003                  		btst	#3,(a0)
000071A4 6600                       		bne.s	loc_6B90
000071A6 2A80                       		move.l	d0,(a5)
000071A8 2A19                       		move.l	(a1)+,d5
000071AA 2819                       		move.l	(a1)+,d4
000071AC 0A84 1000 1000             		eori.l	#$10001000,d4
000071B2 2C84                       		move.l	d4,(a6)
000071B4 D087                       		add.l	d7,d0
000071B6 2A80                       		move.l	d0,(a5)
000071B8 0A85 1000 1000             		eori.l	#$10001000,d5
000071BE 2C85                       		move.l	d5,(a6)
000071C0 4E75                       		rts	
000071C2                            ; ===========================================================================
000071C2                            
000071C2                            loc_6B90:
000071C2 2A80                       		move.l	d0,(a5)
000071C4 2A19                       		move.l	(a1)+,d5
000071C6 2819                       		move.l	(a1)+,d4
000071C8 0A84 1800 1800             		eori.l	#$18001800,d4
000071CE 4844                       		swap	d4
000071D0 2C84                       		move.l	d4,(a6)
000071D2 D087                       		add.l	d7,d0
000071D4 2A80                       		move.l	d0,(a5)
000071D6 0A85 1800 1800             		eori.l	#$18001800,d5
000071DC 4845                       		swap	d5
000071DE 2C85                       		move.l	d5,(a6)
000071E0 4E75                       		rts	
000071E2                            ; End of function sub_6B32
000071E2                            
000071E2                            ; ===========================================================================
000071E2 4E75                       		rts	
000071E4                            ; ===========================================================================
000071E4 2A80                       		move.l	d0,(a5)
000071E6 3A3C 2000                  		move.w	#$2000,d5
000071EA 3819                       		move.w	(a1)+,d4
000071EC D845                       		add.w	d5,d4
000071EE 3C84                       		move.w	d4,(a6)
000071F0 3819                       		move.w	(a1)+,d4
000071F2 D845                       		add.w	d5,d4
000071F4 3C84                       		move.w	d4,(a6)
000071F6 D087                       		add.l	d7,d0
000071F8 2A80                       		move.l	d0,(a5)
000071FA 3819                       		move.w	(a1)+,d4
000071FC D845                       		add.w	d5,d4
000071FE 3C84                       		move.w	d4,(a6)
00007200 3819                       		move.w	(a1)+,d4
00007202 D845                       		add.w	d5,d4
00007204 3C84                       		move.w	d4,(a6)
00007206 4E75                       		rts	
00007208                            
00007208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007208                            
00007208                            
00007208                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007208 43F8 B000                  		lea	($FFFFB000).w,a1
0000720C D86B 0004                  		add.w	4(a3),d4
00007210 DA53                       		add.w	(a3),d5
00007212 3604                       		move.w	d4,d3
00007214 E24B                       		lsr.w	#1,d3
00007216 0243 0380                  		andi.w	#$380,d3
0000721A E64D                       		lsr.w	#3,d5
0000721C 3005                       		move.w	d5,d0
0000721E EA48                       		lsr.w	#5,d0
00007220 0240 007F                  		andi.w	#$7F,d0
00007224 D043                       		add.w	d3,d0
00007226 76FF                       		moveq	#-1,d3
00007228 1634 0000                  		move.b	(a4,d0.w),d3
0000722C 6700                       		beq.s	locret_6C1E
0000722E 5303                       		subq.b	#1,d3
00007230 0243 007F                  		andi.w	#$7F,d3
00007234 EE5B                       		ror.w	#7,d3
00007236 D844                       		add.w	d4,d4
00007238 0244 01E0                  		andi.w	#$1E0,d4
0000723C 0245 001E                  		andi.w	#$1E,d5
00007240 D644                       		add.w	d4,d3
00007242 D645                       		add.w	d5,d3
00007244 2043                       		movea.l	d3,a0
00007246 3610                       		move.w	(a0),d3
00007248 0243 03FF                  		andi.w	#$3FF,d3
0000724C E74B                       		lsl.w	#3,d3
0000724E D2C3                       		adda.w	d3,a1
00007250                            
00007250                            locret_6C1E:
00007250 4E75                       		rts	
00007252                            ; End of function sub_6BD6
00007252                            
00007252                            
00007252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007252                            
00007252                            
00007252                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007252 D86B 0004                  		add.w	4(a3),d4
00007256 DA53                       		add.w	(a3),d5
00007258 0244 00F0                  		andi.w	#$F0,d4
0000725C 0245 01F0                  		andi.w	#$1F0,d5
00007260 E94C                       		lsl.w	#4,d4
00007262 E44D                       		lsr.w	#2,d5
00007264 D845                       		add.w	d5,d4
00007266 7003                       		moveq	#3,d0
00007268 4840                       		swap	d0
0000726A 3004                       		move.w	d4,d0
0000726C 4E75                       		rts	
0000726E                            ; End of function sub_6C20
0000726E                            
0000726E                            
0000726E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000726E                            ; not used
0000726E                            
0000726E                            
0000726E                            sub_6C3C:
0000726E D86B 0004                  		add.w	4(a3),d4
00007272 DA53                       		add.w	(a3),d5
00007274 0244 00F0                  		andi.w	#$F0,d4
00007278 0245 01F0                  		andi.w	#$1F0,d5
0000727C E94C                       		lsl.w	#4,d4
0000727E E44D                       		lsr.w	#2,d5
00007280 D845                       		add.w	d5,d4
00007282 7002                       		moveq	#2,d0
00007284 4840                       		swap	d0
00007286 3004                       		move.w	d4,d0
00007288 4E75                       		rts	
0000728A                            ; End of function sub_6C3C
0000728A                            
0000728A                            ; ---------------------------------------------------------------------------
0000728A                            ; Subroutine to	load tiles as soon as the level	appears
0000728A                            ; ---------------------------------------------------------------------------
0000728A                            
0000728A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728A                            
0000728A                            
0000728A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000728A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007290 4DF9 00C0 0000             		lea	($C00000).l,a6
00007296 47F8 F700                  		lea	($FFFFF700).w,a3
0000729A 49F8 A400                  		lea	($FFFFA400).w,a4
0000729E 343C 4000                  		move.w	#$4000,d2
000072A2 6100                       		bsr.s	LoadTilesFromStart2
000072A4 47F8 F708                  		lea	($FFFFF708).w,a3
000072A8 49F8 A440                  		lea	($FFFFA440).w,a4
000072AC 343C 6000                  		move.w	#$6000,d2
000072B0                            ; End of function LoadTilesFromStart
000072B0                            
000072B0                            
000072B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B0                            
000072B0                            
000072B0                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072B0 78F0                       		moveq	#-$10,d4
000072B2 7C0F                       		moveq	#$F,d6
000072B4                            
000072B4                            loc_6C82:
000072B4 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072B8 7A00                       		moveq	#0,d5
000072BA 3204                       		move.w	d4,d1
000072BC 6100 FF94                  		bsr.w	sub_6C20
000072C0 3801                       		move.w	d1,d4
000072C2 7A00                       		moveq	#0,d5
000072C4 7C1F                       		moveq	#$1F,d6
000072C6 6100 FE44                  		bsr.w	sub_6ADA
000072CA 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072CE 0644 0010                  		addi.w	#$10,d4
000072D2 51CE FFE0                  		dbf	d6,loc_6C82
000072D6 4E75                       		rts	
000072D8                            ; End of function LoadTilesFromStart2
000072D8                            
000072D8                            ; ---------------------------------------------------------------------------
000072D8                            ; Main Load Block loading subroutine
000072D8                            ; ---------------------------------------------------------------------------
000072D8                            
000072D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D8                            
000072D8                            
000072D8                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072D8 7000                       		moveq	#0,d0
000072DA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072DE E948                       		lsl.w	#4,d0
000072E0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072E6 45F2 0000                  		lea	(a2,d0.w),a2
000072EA 2F0A                       		move.l	a2,-(sp)
000072EC 588A                       		addq.l	#4,a2
000072EE 205A                       		movea.l	(a2)+,a0
000072F0 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072F4 303C 0000                  		move.w	#0,d0
000072F8 6100 A648                  		bsr.w	EniDec
000072FC 205A                       		movea.l	(a2)+,a0
000072FE 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007304 6100 A7BA                  		bsr.w	KosDec
00007308 6100 0000                  		bsr.w	LevelLayoutLoad
0000730C 301A                       		move.w	(a2)+,d0
0000730E 3012                       		move.w	(a2),d0
00007310 0240 00FF                  		andi.w	#$FF,d0
00007314 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000731A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000731C 700C                       		moveq	#$C,d0		; use SB3 pallet
0000731E                            
0000731E                            MLB_ChkSBZPal:
0000731E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007324 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007326 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000732C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000732E                            
0000732E                            MLB_UsePal0E:
0000732E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007330                            
00007330                            MLB_NormalPal:
00007330 6100 AFB4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007334 245F                       		movea.l	(sp)+,a2
00007336 584A                       		addq.w	#4,a2
00007338 7000                       		moveq	#0,d0
0000733A 1012                       		move.b	(a2),d0
0000733C 6700                       		beq.s	locret_6D10
0000733E 6100 A464                  		bsr.w	LoadPLC		; load pattern load cues
00007342                            
00007342                            locret_6D10:
00007342 4E75                       		rts	
00007344                            ; End of function MainLoadBlockLoad
00007344                            
00007344                            ; ---------------------------------------------------------------------------
00007344                            ; Level	layout loading subroutine
00007344                            ; ---------------------------------------------------------------------------
00007344                            
00007344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007344                            
00007344                            
00007344                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007344 47F8 A400                  		lea	($FFFFA400).w,a3
00007348 323C 01FF                  		move.w	#$1FF,d1
0000734C 7000                       		moveq	#0,d0
0000734E                            
0000734E                            LevLoad_ClrRam:
0000734E 26C0                       		move.l	d0,(a3)+
00007350 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007354                            
00007354 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007358 7200                       		moveq	#0,d1
0000735A 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000735E 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007362 7202                       		moveq	#2,d1
00007364                            ; End of function LevelLayoutLoad
00007364                            
00007364                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007364                            
00007364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007364                            
00007364                            
00007364                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007364 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007368 ED08                       		lsl.b	#6,d0
0000736A EA48                       		lsr.w	#5,d0
0000736C 3400                       		move.w	d0,d2
0000736E D040                       		add.w	d0,d0
00007370 D042                       		add.w	d2,d0
00007372 D041                       		add.w	d1,d0
00007374 43F9 0000 0000             		lea	(Level_Index).l,a1
0000737A 3031 0000                  		move.w	(a1,d0.w),d0
0000737E 43F1 0000                  		lea	(a1,d0.w),a1
00007382 7200                       		moveq	#0,d1
00007384 3401                       		move.w	d1,d2
00007386 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007388 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000738A                            
0000738A                            LevLoad_NumRows:
0000738A 3001                       		move.w	d1,d0
0000738C 204B                       		movea.l	a3,a0
0000738E                            
0000738E                            LevLoad_Row:
0000738E 10D9                       		move.b	(a1)+,(a0)+
00007390 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007394 47EB 0080                  		lea	$80(a3),a3	; do next row
00007398 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000739C 4E75                       		rts	
0000739E                            ; End of function LevelLayoutLoad2
0000739E                            
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            ; Dynamic screen resize	loading	subroutine
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000739E 7000                       		moveq	#0,d0
000073A0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000073A4 D040                       		add.w	d0,d0
000073A6 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073AA 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073AE 7202                       		moveq	#2,d1
000073B0 3038 F726                  		move.w	($FFFFF726).w,d0
000073B4 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000073B8 6700                       		beq.s	locret_6DAA
000073BA 6400                       		bcc.s	loc_6DAC
000073BC 4441                       		neg.w	d1
000073BE 3038 F704                  		move.w	($FFFFF704).w,d0
000073C2 B078 F726                  		cmp.w	($FFFFF726).w,d0
000073C6 6300                       		bls.s	loc_6DA0
000073C8 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073CC 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073D2                            
000073D2                            loc_6DA0:
000073D2 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073D6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073DC                            
000073DC                            locret_6DAA:
000073DC 4E75                       		rts	
000073DE                            ; ===========================================================================
000073DE                            
000073DE                            loc_6DAC:				; XREF: DynScrResizeLoad
000073DE 3038 F704                  		move.w	($FFFFF704).w,d0
000073E2 5040                       		addq.w	#8,d0
000073E4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073E8 6500                       		bcs.s	loc_6DC4
000073EA 0838 0001 D022             		btst	#1,($FFFFD022).w
000073F0 6700                       		beq.s	loc_6DC4
000073F2 D241                       		add.w	d1,d1
000073F4 D241                       		add.w	d1,d1
000073F6                            
000073F6                            loc_6DC4:
000073F6 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073FA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007400 4E75                       		rts	
00007402                            ; End of function DynScrResizeLoad
00007402                            
00007402                            ; ===========================================================================
00007402                            ; ---------------------------------------------------------------------------
00007402                            ; Offset index for dynamic screen resizing
00007402                            ; ---------------------------------------------------------------------------
00007402 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007406 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000740A 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000740E 0000                       		dc.w Resize_Ending-Resize_Index
00007410                            ; ===========================================================================
00007410                            ; ---------------------------------------------------------------------------
00007410                            ; Green	Hill Zone dynamic screen resizing
00007410                            ; ---------------------------------------------------------------------------
00007410                            
00007410                            Resize_GHZ:				; XREF: Resize_Index
00007410 7000                       		moveq	#0,d0
00007412 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007416 D040                       		add.w	d0,d0
00007418 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000741C 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007420                            ; ===========================================================================
00007420 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007422 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007424 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007426                            ; ===========================================================================
00007426                            
00007426                            Resize_GHZ1:
00007426 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000742C 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007432 6500                       		bcs.s	locret_6E08	; if not, branch
00007434 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000743A                            
0000743A                            locret_6E08:
0000743A 4E75                       		rts	
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            Resize_GHZ2:
0000743C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007442 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007448 6500                       		bcs.s	locret_6E3A
0000744A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007450 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007456 6500                       		bcs.s	locret_6E3A
00007458 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000745E 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007464 6500                       		bcs.s	locret_6E3A
00007466 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000746C                            
0000746C                            locret_6E3A:
0000746C 4E75                       		rts	
0000746E                            ; ===========================================================================
0000746E                            
0000746E                            Resize_GHZ3:
0000746E 7000                       		moveq	#0,d0
00007470 1038 F742                  		move.b	($FFFFF742).w,d0
00007474 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007478 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000747C                            ; ===========================================================================
0000747C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000747E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007480 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007482                            ; ===========================================================================
00007482                            
00007482                            Resize_GHZ3main:
00007482 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007488 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000748E 6500                       		bcs.s	locret_6E96
00007490 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007496 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000749C 6500                       		bcs.s	locret_6E96
0000749E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000074A4 6500                       		bcs.s	loc_6E98
000074A6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074AC 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000074B2 6400                       		bcc.s	loc_6E8E
000074B4 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074BA 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074C0                            
000074C0                            loc_6E8E:
000074C0 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074C6 6400                       		bcc.s	loc_6E98
000074C8                            
000074C8                            locret_6E96:
000074C8 4E75                       		rts	
000074CA                            ; ===========================================================================
000074CA                            
000074CA                            loc_6E98:
000074CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000074D4 4E75                       		rts	
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            Resize_GHZ3boss:
000074D6 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074DC 6400                       		bcc.s	loc_6EB0
000074DE 5538 F742                  		subq.b	#2,($FFFFF742).w
000074E2                            
000074E2                            loc_6EB0:
000074E2 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074E8 6500                       		bcs.s	locret_6EE8
000074EA 6100 0000                  		bsr.w	SingleObjLoad
000074EE 6600                       		bne.s	loc_6ED0
000074F0 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074F4 337C 2A60 0008             		move.w	#$2A60,8(a1)
000074FA 337C 0280 000C             		move.w	#$280,$C(a1)
00007500                            
00007500                            loc_6ED0:
00007500 303C 008C                  		move.w	#$8C,d0
00007504 6100 A0B4                  		bsr.w	PlaySound	; play boss music
00007508 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000750E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007512 7011                       		moveq	#$11,d0
00007514 6000 A28E                  		bra.w	LoadPLC		; load boss patterns
00007518                            ; ===========================================================================
00007518                            
00007518                            locret_6EE8:
00007518 4E75                       		rts	
0000751A                            ; ===========================================================================
0000751A                            
0000751A                            Resize_GHZ3end:
0000751A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007520 4E75                       		rts	
00007522                            ; ===========================================================================
00007522                            ; ---------------------------------------------------------------------------
00007522                            ; Labyrinth Zone dynamic screen	resizing
00007522                            ; ---------------------------------------------------------------------------
00007522                            
00007522                            Resize_LZ:				; XREF: Resize_Index
00007522 7000                       		moveq	#0,d0
00007524 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007528 D040                       		add.w	d0,d0
0000752A 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000752E 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007532                            ; ===========================================================================
00007532 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007534 0000                       		dc.w Resize_LZ12-Resize_LZx
00007536 0000                       		dc.w Resize_LZ3-Resize_LZx
00007538 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000753A                            ; ===========================================================================
0000753A                            
0000753A                            Resize_LZ12:
0000753A 4E75                       		rts	
0000753C                            ; ===========================================================================
0000753C                            
0000753C                            Resize_LZ3:
0000753C 7000                       		moveq	#0,d0
0000753E 1038 F742                  		move.b	($FFFFF742).w,d0
00007542 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007546 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000754A                            ; ===========================================================================
0000754A                            off_6E4A2:	
0000754A 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000754C 0000                       		dc.w Resize_LZ3end-off_6E4A2
0000754E                            ; ===========================================================================
0000754E                            Resize_LZ3boss:
0000754E 4A38 F742                  		tst.b	($FFFFF742).w
00007552 6600                       		bne.s	locret_6F62
00007554 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000755A 6500                       		bcs.s	locret_6F62
0000755C 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007562 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007568                            
00007568 6100 0000                  		bsr.w	SingleObjLoad
0000756C 6600                       		bne.s	loc_6F4A
0000756E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007572 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007578 337C 06E0 000C             		move.w	#$6E0,$C(a1)
0000757E                            loc_6F4A:
0000757E 303C 008C                  		move.w	#$8C,d0
00007582 6100 A036                  		bsr.w	PlaySound	; play boss music
00007586 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000758C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007590 7020                       		moveq	#$20,d0
00007592 6000 A210                  		bra.w	LoadPLC		; load boss patterns
00007596                            ; ===========================================================================
00007596                            
00007596                            locret_6F62:
00007596 4E75                       		rts	
00007598                            ; ===========================================================================
00007598                            
00007598                            Resize_LZ3end:
00007598 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000759E 4E75                       		rts	
000075A0                            ; ===========================================================================
000075A0                            
000075A0                            Resize_SBZ3:
000075A0 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075A6 6500                       		bcs.s	locret_6F8C
000075A8 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000075AE 6400                       		bcc.s	locret_6F8C	; if not, branch
000075B0 4238 FE30                  		clr.b	($FFFFFE30).w
000075B4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075BA 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075C0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075C6                            
000075C6                            locret_6F8C:
000075C6 4E75                       		rts	
000075C8                            ; ===========================================================================
000075C8                            ; ---------------------------------------------------------------------------
000075C8                            ; Marble Zone dynamic screen resizing
000075C8                            ; ---------------------------------------------------------------------------
000075C8                            
000075C8                            Resize_MZ:				; XREF: Resize_Index
000075C8 7000                       		moveq	#0,d0
000075CA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075CE D040                       		add.w	d0,d0
000075D0 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075D4 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075D8                            ; ===========================================================================
000075D8 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000075DA 0000                       		dc.w Resize_MZ2-Resize_MZx
000075DC 0000                       		dc.w Resize_MZ3-Resize_MZx
000075DE                            ; ===========================================================================
000075DE                            
000075DE                            Resize_MZ1:
000075DE 7000                       		moveq	#0,d0
000075E0 1038 F742                  		move.b	($FFFFF742).w,d0
000075E4 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075E8 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075EC                            ; ===========================================================================
000075EC 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075EE 0000                       		dc.w loc_6FEA-off_6FB2
000075F0 0000                       		dc.w loc_702E-off_6FB2
000075F2 0000                       		dc.w loc_7050-off_6FB2
000075F4                            ; ===========================================================================
000075F4                            
000075F4                            loc_6FBA:
000075F4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000075FA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007600 6500                       		bcs.s	locret_6FE8
00007602 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007608 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000760E 6500                       		bcs.s	locret_6FE8
00007610 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007616 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000761C 6500                       		bcs.s	locret_6FE8
0000761E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007622                            
00007622                            locret_6FE8:
00007622 4E75                       		rts	
00007624                            ; ===========================================================================
00007624                            
00007624                            loc_6FEA:
00007624 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000762A 6400                       		bcc.s	loc_6FF8
0000762C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007630 4E75                       		rts	
00007632                            ; ===========================================================================
00007632                            
00007632                            loc_6FF8:
00007632 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007638 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000763E 6400                       		bcc.s	locret_702C
00007640 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007646 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000764C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007652 6400                       		bcc.s	locret_702C
00007654 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000765A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007660 6500                       		bcs.s	locret_702C
00007662 5438 F742                  		addq.b	#2,($FFFFF742).w
00007666                            
00007666                            locret_702C:
00007666 4E75                       		rts	
00007668                            ; ===========================================================================
00007668                            
00007668                            loc_702E:
00007668 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000766E 6400                       		bcc.s	loc_703C
00007670 5538 F742                  		subq.b	#2,($FFFFF742).w
00007674 4E75                       		rts	
00007676                            ; ===========================================================================
00007676                            
00007676                            loc_703C:
00007676 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000767C 6500                       		bcs.s	locret_704E
0000767E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007684 5438 F742                  		addq.b	#2,($FFFFF742).w
00007688                            
00007688                            locret_704E:
00007688 4E75                       		rts	
0000768A                            ; ===========================================================================
0000768A                            
0000768A                            loc_7050:
0000768A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7072
00007692 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007698 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000769E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000076A4 6500                       		bcs.s	locret_7072
000076A6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076AC                            
000076AC                            locret_7072:
000076AC 4E75                       		rts	
000076AE                            ; ===========================================================================
000076AE                            
000076AE                            Resize_MZ2:
000076AE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076B4 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076BA 6500                       		bcs.s	locret_7088
000076BC 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076C2                            
000076C2                            locret_7088:
000076C2 4E75                       		rts	
000076C4                            ; ===========================================================================
000076C4                            
000076C4                            Resize_MZ3:
000076C4 7000                       		moveq	#0,d0
000076C6 1038 F742                  		move.b	($FFFFF742).w,d0
000076CA 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076CE 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076D2                            ; ===========================================================================
000076D2 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076D4 0000                       		dc.w Resize_MZ3end-off_7098
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_MZ3boss:
000076D6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076DC 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076E2 6500                       		bcs.s	locret_70E8
000076E4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076EA 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076F0 6500                       		bcs.s	locret_70E8
000076F2 6100 0000                  		bsr.w	SingleObjLoad
000076F6 6600                       		bne.s	loc_70D0
000076F8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000076FC 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007702 337C 022C 000C             		move.w	#$22C,$C(a1)
00007708                            
00007708                            loc_70D0:
00007708 303C 008C                  		move.w	#$8C,d0
0000770C 6100 9EAC                  		bsr.w	PlaySound	; play boss music
00007710 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007716 5438 F742                  		addq.b	#2,($FFFFF742).w
0000771A 7011                       		moveq	#$11,d0
0000771C 6000 A086                  		bra.w	LoadPLC		; load boss patterns
00007720                            ; ===========================================================================
00007720                            
00007720                            locret_70E8:
00007720 4E75                       		rts	
00007722                            ; ===========================================================================
00007722                            
00007722                            Resize_MZ3end:
00007722 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007728 4E75                       		rts	
0000772A                            ; ===========================================================================
0000772A                            ; ---------------------------------------------------------------------------
0000772A                            ; Star Light Zone dynamic screen resizing
0000772A                            ; ---------------------------------------------------------------------------
0000772A                            
0000772A                            Resize_SLZ:				; XREF: Resize_Index
0000772A 7000                       		moveq	#0,d0
0000772C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007730 D040                       		add.w	d0,d0
00007732 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007736 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000773A                            ; ===========================================================================
0000773A 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000773C 0000                       		dc.w Resize_SLZ2-Resize_SLZx
0000773E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007740                            ; ===========================================================================
00007740                            
00007740                            Resize_SLZ1:
00007740 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007746 4E75                       		rts	
00007748                            
00007748                            Resize_SLZ2:
00007748 4E75                       		rts	
0000774A                            ; ===========================================================================
0000774A                            
0000774A                            Resize_SLZ3:
0000774A 7000                       		moveq	#0,d0
0000774C 1038 F742                  		move.b	($FFFFF742).w,d0
00007750 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007754 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007758                            ; ===========================================================================
00007758 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000775A 0000                       		dc.w Resize_SLZ3boss-off_7118
0000775C 0000                       		dc.w Resize_SLZ3end-off_7118
0000775E                            ; ===========================================================================
0000775E                            
0000775E                            Resize_SLZ3main:
0000775E 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007764 6500                       		bcs.s	locret_7130
00007766 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000776C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007770                            
00007770                            locret_7130:
00007770 4E75                       		rts	
00007772                            ; ===========================================================================
00007772                            
00007772                            Resize_SLZ3boss:
00007772 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007778 6500                       		bcs.s	locret_715C
0000777A 6100 0000                  		bsr.w	SingleObjLoad
0000777E 6600                       		bne.s	loc_7144
00007780 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007784                            
00007784                            loc_7144:
00007784 303C 008C                  		move.w	#$8C,d0
00007788 6100 9E30                  		bsr.w	PlaySound	; play boss music
0000778C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007792 5438 F742                  		addq.b	#2,($FFFFF742).w
00007796 7011                       		moveq	#$11,d0
00007798 6000 A00A                  		bra.w	LoadPLC		; load boss patterns
0000779C                            ; ===========================================================================
0000779C                            
0000779C                            locret_715C:
0000779C 4E75                       		rts	
0000779E                            ; ===========================================================================
0000779E                            
0000779E                            Resize_SLZ3end:
0000779E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077A4 4E75                       		rts
000077A6 4E75                       		rts
000077A8                            ; ===========================================================================
000077A8                            ; ---------------------------------------------------------------------------
000077A8                            ; Spring Yard Zone dynamic screen resizing
000077A8                            ; ---------------------------------------------------------------------------
000077A8                            
000077A8                            Resize_SYZ:				; XREF: Resize_Index
000077A8 7000                       		moveq	#0,d0
000077AA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077AE D040                       		add.w	d0,d0
000077B0 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000077B4 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077B8                            ; ===========================================================================
000077B8 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077BA 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077BC 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077BE                            ; ===========================================================================
000077BE                            
000077BE                            Resize_SYZ1:
000077BE 4E75                       		rts	
000077C0                            ; ===========================================================================
000077C0                            
000077C0                            Resize_SYZ2:
000077C0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077C6 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077CC 6500                       		bcs.s	locret_71A2
000077CE 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077D4 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000077DA 6500                       		bcs.s	locret_71A2
000077DC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077E2                            
000077E2                            locret_71A2:
000077E2 4E75                       		rts	
000077E4                            ; ===========================================================================
000077E4                            
000077E4                            Resize_SYZ3:
000077E4 7000                       		moveq	#0,d0
000077E6 1038 F742                  		move.b	($FFFFF742).w,d0
000077EA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077EE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077F2                            ; ===========================================================================
000077F2 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077F4 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077F6 0000                       		dc.w Resize_SYZ3end-off_71B2
000077F8                            ; ===========================================================================
000077F8                            
000077F8                            Resize_SYZ3main:
000077F8 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077FE 6500                       		bcs.s	locret_71CE
00007800 6100 0000                  		bsr.w	SingleObjLoad
00007804 6600                       		bne.s	locret_71CE
00007806 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000780A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000780E                            
0000780E                            locret_71CE:
0000780E 4E75                       		rts	
00007810                            ; ===========================================================================
00007810                            
00007810                            Resize_SYZ3boss:
00007810 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007816 6500                       		bcs.s	locret_7200
00007818 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000781E 6100 0000                  		bsr.w	SingleObjLoad
00007822 6600                       		bne.s	loc_71EC
00007824 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007828 5438 F742                  		addq.b	#2,($FFFFF742).w
0000782C                            
0000782C                            loc_71EC:
0000782C 303C 008C                  		move.w	#$8C,d0
00007830 6100 9D88                  		bsr.w	PlaySound	; play boss music
00007834 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000783A 7011                       		moveq	#$11,d0
0000783C 6000 9F66                  		bra.w	LoadPLC		; load boss patterns
00007840                            ; ===========================================================================
00007840                            
00007840                            locret_7200:
00007840 4E75                       		rts	
00007842                            ; ===========================================================================
00007842                            
00007842                            Resize_SYZ3end:
00007842 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007848 4E75                       		rts	
0000784A                            ; ===========================================================================
0000784A                            ; ---------------------------------------------------------------------------
0000784A                            ; Scrap	Brain Zone dynamic screen resizing
0000784A                            ; ---------------------------------------------------------------------------
0000784A                            
0000784A                            Resize_SBZ:				; XREF: Resize_Index
0000784A 7000                       		moveq	#0,d0
0000784C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007850 D040                       		add.w	d0,d0
00007852 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007856 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000785A                            ; ===========================================================================
0000785A 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000785C 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000785E 0000                       		dc.w Resize_FZ-Resize_SBZx
00007860                            ; ===========================================================================
00007860                            
00007860                            Resize_SBZ1:
00007860 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007866 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000786C 6500                       		bcs.s	locret_7242
0000786E 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007874 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000787A 6500                       		bcs.s	locret_7242
0000787C 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007882                            
00007882                            locret_7242:
00007882 4E75                       		rts	
00007884                            ; ===========================================================================
00007884                            
00007884                            Resize_SBZ2:
00007884 7000                       		moveq	#0,d0
00007886 1038 F742                  		move.b	($FFFFF742).w,d0
0000788A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000788E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007892                            ; ===========================================================================
00007892 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007894 0000                       		dc.w Resize_SBZ2boss-off_7252
00007896 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007898 0000                       		dc.w Resize_SBZ2end-off_7252
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            Resize_SBZ2main:
0000789A 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000078A0 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000078A6 6500                       		bcs.s	locret_727A
000078A8 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000078AE 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000078B4 6500                       		bcs.s	locret_727A
000078B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000078BA                            
000078BA                            locret_727A:
000078BA 4E75                       		rts	
000078BC                            ; ===========================================================================
000078BC                            
000078BC                            Resize_SBZ2boss:
000078BC 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078C2 6500                       		bcs.s	locret_7298
000078C4 6100 0000                  		bsr.w	SingleObjLoad
000078C8 6600                       		bne.s	locret_7298
000078CA 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000078D2 701E                       		moveq	#$1E,d0
000078D4 6000 9ECE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078D8                            ; ===========================================================================
000078D8                            
000078D8                            locret_7298:
000078D8 4E75                       		rts	
000078DA                            ; ===========================================================================
000078DA                            
000078DA                            Resize_SBZ2boss2:
000078DA 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078E0 6500                       		bcs.s	loc_72B6
000078E2 6100 0000                  		bsr.w	SingleObjLoad
000078E6 6600                       		bne.s	loc_72B0
000078E8 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F0                            
000078F0                            loc_72B0:
000078F0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078F6                            
000078F6                            loc_72B6:
000078F6 6000                       		bra.s	loc_72C2
000078F8                            ; ===========================================================================
000078F8                            
000078F8                            Resize_SBZ2end:
000078F8 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078FE 6500                       		bcs.s	loc_72C2
00007900 4E75                       		rts	
00007902                            ; ===========================================================================
00007902                            
00007902                            loc_72C2:
00007902 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007908 4E75                       		rts	
0000790A                            ; ===========================================================================
0000790A                            
0000790A                            Resize_FZ:
0000790A 7000                       		moveq	#0,d0
0000790C 1038 F742                  		move.b	($FFFFF742).w,d0
00007910 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007914 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007918                            ; ===========================================================================
00007918 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000791C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007920 0000                       		dc.w Resize_FZend2-off_72D8
00007922                            ; ===========================================================================
00007922                            
00007922                            Resize_FZmain:
00007922 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007928 6500                       		bcs.s	loc_72F4
0000792A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000792E 701F                       		moveq	#$1F,d0
00007930 6100 9E72                  		bsr.w	LoadPLC		; load FZ boss patterns
00007934                            
00007934                            loc_72F4:
00007934 60CC                       		bra.s	loc_72C2
00007936                            ; ===========================================================================
00007936                            
00007936                            Resize_FZboss:
00007936 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000793C 6500                       		bcs.s	loc_7312
0000793E 6100 0000                  		bsr.w	SingleObjLoad
00007942 6600                       		bne.s	loc_7312
00007944 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007948 5438 F742                  		addq.b	#2,($FFFFF742).w
0000794C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007952                            
00007952                            loc_7312:
00007952 60AE                       		bra.s	loc_72C2
00007954                            ; ===========================================================================
00007954                            
00007954                            Resize_FZend:
00007954 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000795A 6500                       		bcs.s	loc_7320
0000795C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007960                            
00007960                            loc_7320:
00007960 60A0                       		bra.s	loc_72C2
00007962                            ; ===========================================================================
00007962                            
00007962                            locret_7322:
00007962 4E75                       		rts	
00007964                            ; ===========================================================================
00007964                            
00007964                            Resize_FZend2:
00007964 609C                       		bra.s	loc_72C2
00007966                            ; ===========================================================================
00007966                            ; ---------------------------------------------------------------------------
00007966                            ; Ending sequence dynamic screen resizing (empty)
00007966                            ; ---------------------------------------------------------------------------
00007966                            
00007966                            Resize_Ending:				; XREF: Resize_Index
00007966 4E75                       		rts	
00007968                            ; ===========================================================================
00007968                            ; ---------------------------------------------------------------------------
00007968                            ; Object 11 - GHZ bridge
00007968                            ; ---------------------------------------------------------------------------
00007968                            
00007968                            Obj11:					; XREF: Obj_Index
00007968 7000                       		moveq	#0,d0
0000796A 1028 0024                  		move.b	$24(a0),d0
0000796E 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007972 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007976                            ; ===========================================================================
00007976 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000797A 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000797E 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007982                            ; ===========================================================================
00007982                            
00007982                            Obj11_Main:				; XREF: Obj11_Index
00007982 5428 0024                  		addq.b	#2,$24(a0)
00007986 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000798E 317C 438E 0002             		move.w	#$438E,2(a0)
00007994 117C 0004 0001             		move.b	#4,1(a0)
0000799A 117C 0003 0018             		move.b	#3,$18(a0)
000079A0 117C 0080 0019             		move.b	#$80,$19(a0)
000079A6 3428 000C                  		move.w	$C(a0),d2
000079AA 3628 0008                  		move.w	8(a0),d3
000079AE 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000079B0 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000079B4 7200                       		moveq	#0,d1
000079B6 1212                       		move.b	(a2),d1		; copy a2 to d1
000079B8 14FC 0000                  		move.b	#0,(a2)+
000079BC 3001                       		move.w	d1,d0
000079BE E248                       		lsr.w	#1,d0
000079C0 E948                       		lsl.w	#4,d0
000079C2 9640                       		sub.w	d0,d3
000079C4 5501                       		subq.b	#2,d1
000079C6 6500                       		bcs.s	Obj11_Action
000079C8                            
000079C8                            Obj11_MakeBdg:
000079C8 6100 0000                  		bsr.w	SingleObjLoad
000079CC 6600                       		bne.s	Obj11_Action
000079CE 5228 0028                  		addq.b	#1,$28(a0)
000079D2 B668 0008                  		cmp.w	8(a0),d3
000079D6 6600                       		bne.s	loc_73B8
000079D8 0643 0010                  		addi.w	#$10,d3
000079DC 3142 000C                  		move.w	d2,$C(a0)
000079E0 3142 003C                  		move.w	d2,$3C(a0)
000079E4 3A08                       		move.w	a0,d5
000079E6 0445 D000                  		subi.w	#-$3000,d5
000079EA EC4D                       		lsr.w	#6,d5
000079EC 0245 007F                  		andi.w	#$7F,d5
000079F0 14C5                       		move.b	d5,(a2)+
000079F2 5228 0028                  		addq.b	#1,$28(a0)
000079F6                            
000079F6                            loc_73B8:				; XREF: ROM:00007398j
000079F6 3A09                       		move.w	a1,d5
000079F8 0445 D000                  		subi.w	#-$3000,d5
000079FC EC4D                       		lsr.w	#6,d5
000079FE 0245 007F                  		andi.w	#$7F,d5
00007A02 14C5                       		move.b	d5,(a2)+
00007A04 137C 000A 0024             		move.b	#$A,$24(a1)
00007A0A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A0C 3342 000C                  		move.w	d2,$C(a1)
00007A10 3342 003C                  		move.w	d2,$3C(a1)
00007A14 3343 0008                  		move.w	d3,8(a1)
00007A18 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A20 337C 438E 0002             		move.w	#$438E,2(a1)
00007A26 137C 0004 0001             		move.b	#4,1(a1)
00007A2C 137C 0003 0018             		move.b	#3,$18(a1)
00007A32 137C 0008 0019             		move.b	#8,$19(a1)
00007A38 0643 0010                  		addi.w	#$10,d3
00007A3C 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A40                            
00007A40                            Obj11_Action:				; XREF: Obj11_Index
00007A40 6100                       		bsr.s	Obj11_Solid
00007A42 4A28 003E                  		tst.b	$3E(a0)
00007A46 6700                       		beq.s	Obj11_Display
00007A48 5928 003E                  		subq.b	#4,$3E(a0)
00007A4C 6100 0000                  		bsr.w	Obj11_Bend
00007A50                            
00007A50                            Obj11_Display:
00007A50 6100 0000                  		bsr.w	DisplaySprite
00007A54 6000 0000                  		bra.w	Obj11_ChkDel
00007A58                            
00007A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A58                            
00007A58                            
00007A58                            Obj11_Solid:				; XREF: Obj11_Action
00007A58 7200                       		moveq	#0,d1
00007A5A 1228 0028                  		move.b	$28(a0),d1
00007A5E E749                       		lsl.w	#3,d1
00007A60 3401                       		move.w	d1,d2
00007A62 5041                       		addq.w	#8,d1
00007A64 D442                       		add.w	d2,d2
00007A66 43F8 D000                  		lea	($FFFFD000).w,a1
00007A6A 4A69 0012                  		tst.w	$12(a1)
00007A6E 6B00 0000                  		bmi.w	locret_751E
00007A72 3029 0008                  		move.w	8(a1),d0
00007A76 9068 0008                  		sub.w	8(a0),d0
00007A7A D041                       		add.w	d1,d0
00007A7C 6B00 0000                  		bmi.w	locret_751E
00007A80 B042                       		cmp.w	d2,d0
00007A82 6400 0000                  		bcc.w	locret_751E
00007A86 6000                       		bra.s	Platform2
00007A88                            ; End of function Obj11_Solid
00007A88                            
00007A88                            ; ---------------------------------------------------------------------------
00007A88                            ; Platform subroutine
00007A88                            ; ---------------------------------------------------------------------------
00007A88                            
00007A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A88                            
00007A88                            
00007A88                            PlatformObject:
00007A88 43F8 D000                  		lea	($FFFFD000).w,a1
00007A8C 4A69 0012                  		tst.w	$12(a1)
00007A90 6B00 0000                  		bmi.w	locret_751E
00007A94 3029 0008                  		move.w	8(a1),d0
00007A98 9068 0008                  		sub.w	8(a0),d0
00007A9C D041                       		add.w	d1,d0
00007A9E 6B00 0000                  		bmi.w	locret_751E
00007AA2 D241                       		add.w	d1,d1
00007AA4 B041                       		cmp.w	d1,d0
00007AA6 6400 0000                  		bcc.w	locret_751E
00007AAA                            
00007AAA                            Platform2:
00007AAA 3028 000C                  		move.w	$C(a0),d0
00007AAE 5140                       		subq.w	#8,d0
00007AB0                            
00007AB0                            Platform3:
00007AB0 3429 000C                  		move.w	$C(a1),d2
00007AB4 1229 0016                  		move.b	$16(a1),d1
00007AB8 4881                       		ext.w	d1
00007ABA D242                       		add.w	d2,d1
00007ABC 5841                       		addq.w	#4,d1
00007ABE 9041                       		sub.w	d1,d0
00007AC0 6200 0000                  		bhi.w	locret_751E
00007AC4 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AC8 6500 0000                  		bcs.w	locret_751E
00007ACC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007AD0 6B00 0000                  		bmi.w	locret_751E
00007AD4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007ADA 6400 0000                  		bcc.w	locret_751E
00007ADE D440                       		add.w	d0,d2
00007AE0 5642                       		addq.w	#3,d2
00007AE2 3342 000C                  		move.w	d2,$C(a1)
00007AE6 5428 0024                  		addq.b	#2,$24(a0)
00007AEA                            
00007AEA                            loc_74AE:
00007AEA 0829 0003 0022             		btst	#3,$22(a1)
00007AF0 6700                       		beq.s	loc_74DC
00007AF2 7000                       		moveq	#0,d0
00007AF4 1029 003D                  		move.b	$3D(a1),d0
00007AF8 ED48                       		lsl.w	#6,d0
00007AFA 0680 00FF D000             		addi.l	#$FFD000,d0
00007B00 2440                       		movea.l	d0,a2
00007B02 08AA 0003 0022             		bclr	#3,$22(a2)
00007B08 422A 0025                  		clr.b	$25(a2)
00007B0C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B12 6600                       		bne.s	loc_74DC
00007B14 552A 0024                  		subq.b	#2,$24(a2)
00007B18                            
00007B18                            loc_74DC:
00007B18 3008                       		move.w	a0,d0
00007B1A 0440 D000                  		subi.w	#-$3000,d0
00007B1E EC48                       		lsr.w	#6,d0
00007B20 0240 007F                  		andi.w	#$7F,d0
00007B24 1340 003D                  		move.b	d0,$3D(a1)
00007B28 137C 0000 0026             		move.b	#0,$26(a1)
00007B2E 337C 0000 0012             		move.w	#0,$12(a1)
00007B34 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B3A 0829 0001 0022             		btst	#1,$22(a1)
00007B40 6700                       		beq.s	loc_7512
00007B42 2F08                       		move.l	a0,-(sp)
00007B44 2049                       		movea.l	a1,a0
00007B46 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B4C 205F                       		movea.l	(sp)+,a0
00007B4E                            
00007B4E                            loc_7512:
00007B4E 08E9 0003 0022             		bset	#3,$22(a1)
00007B54 08E8 0003 0022             		bset	#3,$22(a0)
00007B5A                            
00007B5A                            locret_751E:
00007B5A 4E75                       		rts	
00007B5C                            ; End of function PlatformObject
00007B5C                            
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            
00007B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B5C                            
00007B5C                            
00007B5C                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007B60 4A69 0012                  		tst.w	$12(a1)
00007B64 6B00 FFF4                  		bmi.w	locret_751E
00007B68 3029 0008                  		move.w	8(a1),d0
00007B6C 9068 0008                  		sub.w	8(a0),d0
00007B70 D041                       		add.w	d1,d0
00007B72 6BE6                       		bmi.s	locret_751E
00007B74 D241                       		add.w	d1,d1
00007B76 B041                       		cmp.w	d1,d0
00007B78 64E0                       		bcc.s	locret_751E
00007B7A 0828 0000 0001             		btst	#0,1(a0)
00007B80 6700                       		beq.s	loc_754A
00007B82 4640                       		not.w	d0
00007B84 D041                       		add.w	d1,d0
00007B86                            
00007B86                            loc_754A:
00007B86 E248                       		lsr.w	#1,d0
00007B88 7600                       		moveq	#0,d3
00007B8A 1632 0000                  		move.b	(a2,d0.w),d3
00007B8E 3028 000C                  		move.w	$C(a0),d0
00007B92 9043                       		sub.w	d3,d0
00007B94 6000 FF1A                  		bra.w	Platform3
00007B98                            ; End of function SlopeObject
00007B98                            
00007B98                            
00007B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B98                            
00007B98                            
00007B98                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B98 43F8 D000                  		lea	($FFFFD000).w,a1
00007B9C 4A69 0012                  		tst.w	$12(a1)
00007BA0 6B00 FFB8                  		bmi.w	locret_751E
00007BA4 3029 0008                  		move.w	8(a1),d0
00007BA8 9068 0008                  		sub.w	8(a0),d0
00007BAC D041                       		add.w	d1,d0
00007BAE 6B00 FFAA                  		bmi.w	locret_751E
00007BB2 D241                       		add.w	d1,d1
00007BB4 B041                       		cmp.w	d1,d0
00007BB6 6400 FFA2                  		bcc.w	locret_751E
00007BBA 3028 000C                  		move.w	$C(a0),d0
00007BBE 9043                       		sub.w	d3,d0
00007BC0 6000 FEEE                  		bra.w	Platform3
00007BC4                            ; End of function Obj15_Solid
00007BC4                            
00007BC4                            ; ===========================================================================
00007BC4                            
00007BC4                            Obj11_Action2:				; XREF: Obj11_Index
00007BC4 6100                       		bsr.s	Obj11_WalkOff
00007BC6 6100 0000                  		bsr.w	DisplaySprite
00007BCA 6000 0000                  		bra.w	Obj11_ChkDel
00007BCE                            
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            ; Subroutine allowing Sonic to walk off a bridge
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            
00007BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BCE                            
00007BCE                            
00007BCE                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BCE 7200                       		moveq	#0,d1
00007BD0 1228 0028                  		move.b	$28(a0),d1
00007BD4 E749                       		lsl.w	#3,d1
00007BD6 3401                       		move.w	d1,d2
00007BD8 5041                       		addq.w	#8,d1
00007BDA 6100                       		bsr.s	ExitPlatform2
00007BDC 6400                       		bcc.s	locret_75BE
00007BDE E848                       		lsr.w	#4,d0
00007BE0 1140 003F                  		move.b	d0,$3F(a0)
00007BE4 1028 003E                  		move.b	$3E(a0),d0
00007BE8 0C00 0040                  		cmpi.b	#$40,d0
00007BEC 6700                       		beq.s	loc_75B6
00007BEE 5828 003E                  		addq.b	#4,$3E(a0)
00007BF2                            
00007BF2                            loc_75B6:
00007BF2 6100 0000                  		bsr.w	Obj11_Bend
00007BF6 6100 0000                  		bsr.w	Obj11_MoveSonic
00007BFA                            
00007BFA                            locret_75BE:
00007BFA 4E75                       		rts	
00007BFC                            ; End of function Obj11_WalkOff
00007BFC                            
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            
00007BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BFC                            
00007BFC                            
00007BFC                            ExitPlatform:
00007BFC 3401                       		move.w	d1,d2
00007BFE                            
00007BFE                            ExitPlatform2:
00007BFE D442                       		add.w	d2,d2
00007C00 43F8 D000                  		lea	($FFFFD000).w,a1
00007C04 0829 0001 0022             		btst	#1,$22(a1)
00007C0A 6600                       		bne.s	loc_75E0
00007C0C 3029 0008                  		move.w	8(a1),d0
00007C10 9068 0008                  		sub.w	8(a0),d0
00007C14 D041                       		add.w	d1,d0
00007C16 6B00                       		bmi.s	loc_75E0
00007C18 B042                       		cmp.w	d2,d0
00007C1A 6500                       		bcs.s	locret_75F2
00007C1C                            
00007C1C                            loc_75E0:
00007C1C 08A9 0003 0022             		bclr	#3,$22(a1)
00007C22 117C 0002 0024             		move.b	#2,$24(a0)
00007C28 08A8 0003 0022             		bclr	#3,$22(a0)
00007C2E                            
00007C2E                            locret_75F2:
00007C2E 4E75                       		rts	
00007C30                            ; End of function ExitPlatform
00007C30                            
00007C30                            
00007C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C30                            
00007C30                            
00007C30                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C30 7000                       		moveq	#0,d0
00007C32 1028 003F                  		move.b	$3F(a0),d0
00007C36 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C3A ED48                       		lsl.w	#6,d0
00007C3C 0680 00FF D000             		addi.l	#$FFD000,d0
00007C42 2440                       		movea.l	d0,a2
00007C44 43F8 D000                  		lea	($FFFFD000).w,a1
00007C48 302A 000C                  		move.w	$C(a2),d0
00007C4C 5140                       		subq.w	#8,d0
00007C4E 7200                       		moveq	#0,d1
00007C50 1229 0016                  		move.b	$16(a1),d1
00007C54 9041                       		sub.w	d1,d0
00007C56 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C5A 4E75                       		rts	
00007C5C                            ; End of function Obj11_MoveSonic
00007C5C                            
00007C5C                            
00007C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C5C                            
00007C5C                            
00007C5C                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C5C 1028 003E                  		move.b	$3E(a0),d0
00007C60 6100 B08A                  		bsr.w	CalcSine
00007C64 3800                       		move.w	d0,d4
00007C66 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C6C 7000                       		moveq	#0,d0
00007C6E 1028 0028                  		move.b	$28(a0),d0
00007C72 E948                       		lsl.w	#4,d0
00007C74 7600                       		moveq	#0,d3
00007C76 1628 003F                  		move.b	$3F(a0),d3
00007C7A 3403                       		move.w	d3,d2
00007C7C D640                       		add.w	d0,d3
00007C7E 7A00                       		moveq	#0,d5
00007C80 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C86 1A35 3000                  		move.b	(a5,d3.w),d5
00007C8A 0243 000F                  		andi.w	#$F,d3
00007C8E E94B                       		lsl.w	#4,d3
00007C90 47F4 3000                  		lea	(a4,d3.w),a3
00007C94 45E8 0029                  		lea	$29(a0),a2
00007C98                            
00007C98                            loc_765C:
00007C98 7000                       		moveq	#0,d0
00007C9A 101A                       		move.b	(a2)+,d0
00007C9C ED48                       		lsl.w	#6,d0
00007C9E 0680 00FF D000             		addi.l	#$FFD000,d0
00007CA4 2240                       		movea.l	d0,a1
00007CA6 7000                       		moveq	#0,d0
00007CA8 101B                       		move.b	(a3)+,d0
00007CAA 5240                       		addq.w	#1,d0
00007CAC C0C5                       		mulu.w	d5,d0
00007CAE C0C4                       		mulu.w	d4,d0
00007CB0 4840                       		swap	d0
00007CB2 D069 003C                  		add.w	$3C(a1),d0
00007CB6 3340 000C                  		move.w	d0,$C(a1)
00007CBA 51CA FFDC                  		dbf	d2,loc_765C
00007CBE 7000                       		moveq	#0,d0
00007CC0 1028 0028                  		move.b	$28(a0),d0
00007CC4 7600                       		moveq	#0,d3
00007CC6 1628 003F                  		move.b	$3F(a0),d3
00007CCA 5203                       		addq.b	#1,d3
00007CCC 9600                       		sub.b	d0,d3
00007CCE 4403                       		neg.b	d3
00007CD0 6B00                       		bmi.s	locret_76CA
00007CD2 3403                       		move.w	d3,d2
00007CD4 E94B                       		lsl.w	#4,d3
00007CD6 47F4 3000                  		lea	(a4,d3.w),a3
00007CDA D6C2                       		adda.w	d2,a3
00007CDC 5342                       		subq.w	#1,d2
00007CDE 6500                       		bcs.s	locret_76CA
00007CE0                            
00007CE0                            loc_76A4:
00007CE0 7000                       		moveq	#0,d0
00007CE2 101A                       		move.b	(a2)+,d0
00007CE4 ED48                       		lsl.w	#6,d0
00007CE6 0680 00FF D000             		addi.l	#$FFD000,d0
00007CEC 2240                       		movea.l	d0,a1
00007CEE 7000                       		moveq	#0,d0
00007CF0 1023                       		move.b	-(a3),d0
00007CF2 5240                       		addq.w	#1,d0
00007CF4 C0C5                       		mulu.w	d5,d0
00007CF6 C0C4                       		mulu.w	d4,d0
00007CF8 4840                       		swap	d0
00007CFA D069 003C                  		add.w	$3C(a1),d0
00007CFE 3340 000C                  		move.w	d0,$C(a1)
00007D02 51CA FFDC                  		dbf	d2,loc_76A4
00007D06                            
00007D06                            locret_76CA:
00007D06 4E75                       		rts	
00007D08                            ; End of function Obj11_Bend
00007D08                            
00007D08                            ; ===========================================================================
00007D08                            ; ---------------------------------------------------------------------------
00007D08                            ; GHZ bridge-bending data
00007D08                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D08                            ; ---------------------------------------------------------------------------
00007D08                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E18                            		even
00007E18                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F18                            		even
00007F18                            
00007F18                            ; ===========================================================================
00007F18                            
00007F18                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F18 3028 0008                  		move.w	8(a0),d0
00007F1C 0240 FF80                  		andi.w	#$FF80,d0
00007F20 3238 F700                  		move.w	($FFFFF700).w,d1
00007F24 0441 0080                  		subi.w	#$80,d1
00007F28 0241 FF80                  		andi.w	#$FF80,d1
00007F2C 9041                       		sub.w	d1,d0
00007F2E 0C40 0280                  		cmpi.w	#$280,d0
00007F32 6200 0000                  		bhi.w	Obj11_DelAll
00007F36 4E75                       		rts	
00007F38                            ; ===========================================================================
00007F38                            
00007F38                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F38 7400                       		moveq	#0,d2
00007F3A 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F3E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F40 5302                       		subq.b	#1,d2		; subtract 1
00007F42 6500                       		bcs.s	Obj11_Delete
00007F44                            
00007F44                            Obj11_DelLoop:
00007F44 7000                       		moveq	#0,d0
00007F46 101A                       		move.b	(a2)+,d0
00007F48 ED48                       		lsl.w	#6,d0
00007F4A 0680 00FF D000             		addi.l	#$FFD000,d0
00007F50 2240                       		movea.l	d0,a1
00007F52 B048                       		cmp.w	a0,d0
00007F54 6700                       		beq.s	loc_791E
00007F56 6100 0000                  		bsr.w	DeleteObject2
00007F5A                            
00007F5A                            loc_791E:
00007F5A 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F5E                            
00007F5E                            Obj11_Delete:
00007F5E 6100 0000                  		bsr.w	DeleteObject
00007F62 4E75                       		rts	
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            Obj11_Delete2:				; XREF: Obj11_Index
00007F64 6100 0000                  		bsr.w	DeleteObject
00007F68 4E75                       		rts	
00007F6A                            ; ===========================================================================
00007F6A                            
00007F6A                            Obj11_Display2:				; XREF: Obj11_Index
00007F6A 6100 0000                  		bsr.w	DisplaySprite
00007F6E 4E75                       		rts	
00007F70                            ; ===========================================================================
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Sprite mappings - GHZ	bridge
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            Map_obj11:
00007F70                            	include "_maps\obj11.asm"
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Sprite mappings - GHZ	bridge
00007F70                            ; ---------------------------------------------------------------------------
00007F70 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F74 0000                       		dc.w byte_794B-Map_obj11
00007F76 01                         byte_793A:	dc.b 1
00007F77 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F7C 02                         byte_7940:	dc.b 2
00007F7D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F82 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F87 01                         byte_794B:	dc.b 1
00007F88 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F8E 00                         		even
00007F8E 00                         		even
00007F8E                            
00007F8E                            ; ===========================================================================
00007F8E                            ; ---------------------------------------------------------------------------
00007F8E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F8E                            ;	    - spiked ball on a chain (SBZ)
00007F8E                            ; ---------------------------------------------------------------------------
00007F8E                            
00007F8E                            Obj15:					; XREF: Obj_Index
00007F8E 7000                       		moveq	#0,d0
00007F90 1028 0024                  		move.b	$24(a0),d0
00007F94 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F98 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F9C                            ; ===========================================================================
00007F9C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007FA0 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007FA4 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007FA8 0000                       		dc.w Obj15_Action-Obj15_Index
00007FAA                            ; ===========================================================================
00007FAA                            
00007FAA                            Obj15_Main:				; XREF: Obj15_Index
00007FAA 5428 0024                  		addq.b	#2,$24(a0)
00007FAE 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FB6 317C 4380 0002             		move.w	#$4380,2(a0)
00007FBC 117C 0004 0001             		move.b	#4,1(a0)
00007FC2 117C 0003 0018             		move.b	#3,$18(a0)
00007FC8 117C 0018 0019             		move.b	#$18,$19(a0)
00007FCE 117C 0008 0016             		move.b	#8,$16(a0)
00007FD4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007FDA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FE0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FE6 6600                       		bne.s	Obj15_NotSLZ
00007FE8 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FF0 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FF6 117C 0020 0019             		move.b	#$20,$19(a0)
00007FFC 117C 0010 0016             		move.b	#$10,$16(a0)
00008002 117C 0099 0020             		move.b	#$99,$20(a0)
00008008                            
00008008                            Obj15_NotSLZ:
00008008 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000800E 6600                       		bne.s	Obj15_SetLength
00008010 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008018 317C 0391 0002             		move.w	#$391,2(a0)
0000801E 117C 0018 0019             		move.b	#$18,$19(a0)
00008024 117C 0018 0016             		move.b	#$18,$16(a0)
0000802A 117C 0086 0020             		move.b	#$86,$20(a0)
00008030 117C 000C 0024             		move.b	#$C,$24(a0)
00008036                            
00008036                            Obj15_SetLength:
00008036 1810                       		move.b	0(a0),d4
00008038 7200                       		moveq	#0,d1
0000803A 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000803E 1212                       		move.b	(a2),d1		; move a2 to d1
00008040 3F01                       		move.w	d1,-(sp)
00008042 0241 000F                  		andi.w	#$F,d1
00008046 14FC 0000                  		move.b	#0,(a2)+
0000804A 3601                       		move.w	d1,d3
0000804C E94B                       		lsl.w	#4,d3
0000804E 5003                       		addq.b	#8,d3
00008050 1143 003C                  		move.b	d3,$3C(a0)
00008054 5103                       		subq.b	#8,d3
00008056 4A28 001A                  		tst.b	$1A(a0)
0000805A 6700                       		beq.s	Obj15_MakeChain
0000805C 5003                       		addq.b	#8,d3
0000805E 5341                       		subq.w	#1,d1
00008060                            
00008060                            Obj15_MakeChain:
00008060 6100 0000                  		bsr.w	SingleObjLoad
00008064 6600                       		bne.s	loc_7A92
00008066 5228 0028                  		addq.b	#1,$28(a0)
0000806A 3A09                       		move.w	a1,d5
0000806C 0445 D000                  		subi.w	#-$3000,d5
00008070 EC4D                       		lsr.w	#6,d5
00008072 0245 007F                  		andi.w	#$7F,d5
00008076 14C5                       		move.b	d5,(a2)+
00008078 137C 000A 0024             		move.b	#$A,$24(a1)
0000807E 1284                       		move.b	d4,0(a1)	; load swinging	object
00008080 2368 0004 0004             		move.l	4(a0),4(a1)
00008086 3368 0002 0002             		move.w	2(a0),2(a1)
0000808C 08A9 0006 0002             		bclr	#6,2(a1)
00008092 137C 0004 0001             		move.b	#4,1(a1)
00008098 137C 0004 0018             		move.b	#4,$18(a1)
0000809E 137C 0008 0019             		move.b	#8,$19(a1)
000080A4 137C 0001 001A             		move.b	#1,$1A(a1)
000080AA 1343 003C                  		move.b	d3,$3C(a1)
000080AE 0403 0010                  		subi.b	#$10,d3
000080B2 6400                       		bcc.s	loc_7A8E
000080B4 137C 0002 001A             		move.b	#2,$1A(a1)
000080BA 137C 0003 0018             		move.b	#3,$18(a1)
000080C0 08E9 0006 0002             		bset	#6,2(a1)
000080C6                            
000080C6                            loc_7A8E:
000080C6 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080CA                            
000080CA                            loc_7A92:
000080CA 3A08                       		move.w	a0,d5
000080CC 0445 D000                  		subi.w	#-$3000,d5
000080D0 EC4D                       		lsr.w	#6,d5
000080D2 0245 007F                  		andi.w	#$7F,d5
000080D6 14C5                       		move.b	d5,(a2)+
000080D8 317C 4080 0026             		move.w	#$4080,$26(a0)
000080DE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080E4 321F                       		move.w	(sp)+,d1
000080E6 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080EA 6700                       		beq.s	loc_7AD4	; if not, branch
000080EC 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080F4 317C 43AA 0002             		move.w	#$43AA,2(a0)
000080FA 117C 0001 001A             		move.b	#1,$1A(a0)
00008100 117C 0002 0018             		move.b	#2,$18(a0)
00008106 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000810C                            
0000810C                            loc_7AD4:
0000810C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008112 6700                       		beq.s	Obj15_Action	; if yes, branch
00008114                            
00008114                            Obj15_SetSolid:				; XREF: Obj15_Index
00008114 7200                       		moveq	#0,d1
00008116 1228 0019                  		move.b	$19(a0),d1
0000811A 7600                       		moveq	#0,d3
0000811C 1628 0016                  		move.b	$16(a0),d3
00008120 6100 FA76                  		bsr.w	Obj15_Solid
00008124                            
00008124                            Obj15_Action:				; XREF: Obj15_Index
00008124 6100 0000                  		bsr.w	Obj15_Move
00008128 6100 0000                  		bsr.w	DisplaySprite
0000812C 6000 0000                  		bra.w	Obj15_ChkDel
00008130                            ; ===========================================================================
00008130                            
00008130                            Obj15_Action2:				; XREF: Obj15_Index
00008130 7200                       		moveq	#0,d1
00008132 1228 0019                  		move.b	$19(a0),d1
00008136 6100 FAC4                  		bsr.w	ExitPlatform
0000813A 3F28 0008                  		move.w	8(a0),-(sp)
0000813E 6100 0000                  		bsr.w	Obj15_Move
00008142 341F                       		move.w	(sp)+,d2
00008144 7600                       		moveq	#0,d3
00008146 1628 0016                  		move.b	$16(a0),d3
0000814A 5203                       		addq.b	#1,d3
0000814C 6100 0000                  		bsr.w	MvSonicOnPtfm
00008150 6100 0000                  		bsr.w	DisplaySprite
00008154 6000 0000                  		bra.w	Obj15_ChkDel
00008158                            
00008158 4E75                       		rts
0000815A                            
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            ; Subroutine to	change Sonic's position with a platform
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            
0000815A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000815A                            
0000815A                            
0000815A                            MvSonicOnPtfm:
0000815A 43F8 D000                  		lea	($FFFFD000).w,a1
0000815E 3028 000C                  		move.w	$C(a0),d0
00008162 9043                       		sub.w	d3,d0
00008164 6000                       		bra.s	MvSonic2
00008166                            ; End of function MvSonicOnPtfm
00008166                            
00008166                            ; ---------------------------------------------------------------------------
00008166                            ; Subroutine to	change Sonic's position with a platform
00008166                            ; ---------------------------------------------------------------------------
00008166                            
00008166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008166                            
00008166                            
00008166                            MvSonicOnPtfm2:
00008166 43F8 D000                  		lea	($FFFFD000).w,a1
0000816A 3028 000C                  		move.w	$C(a0),d0
0000816E 0440 0009                  		subi.w	#9,d0
00008172                            
00008172                            MvSonic2:
00008172 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008176 6B00                       		bmi.s	locret_7B62
00008178 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000817E 6400                       		bcc.s	locret_7B62
00008180 4A78 FE08                  		tst.w	($FFFFFE08).w
00008184 6600                       		bne.s	locret_7B62
00008186 7200                       		moveq	#0,d1
00008188 1229 0016                  		move.b	$16(a1),d1
0000818C 9041                       		sub.w	d1,d0
0000818E 3340 000C                  		move.w	d0,$C(a1)
00008192 9468 0008                  		sub.w	8(a0),d2
00008196 9569 0008                  		sub.w	d2,8(a1)
0000819A                            
0000819A                            locret_7B62:
0000819A 4E75                       		rts	
0000819C                            ; End of function MvSonicOnPtfm2
0000819C                            
0000819C                            
0000819C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000819C                            
0000819C                            
0000819C                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000819C 1038 FE78                  		move.b	($FFFFFE78).w,d0
000081A0 323C 0080                  		move.w	#$80,d1
000081A4 0828 0000 0022             		btst	#0,$22(a0)
000081AA 6700                       		beq.s	loc_7B78
000081AC 4440                       		neg.w	d0
000081AE D041                       		add.w	d1,d0
000081B0                            
000081B0                            loc_7B78:
000081B0 6000                       		bra.s	Obj15_Move2
000081B2                            ; End of function Obj15_Move
000081B2                            
000081B2                            
000081B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B2                            
000081B2                            
000081B2                            Obj48_Move:				; XREF: Obj48_Display2
000081B2 4A28 003D                  		tst.b	$3D(a0)
000081B6 6600                       		bne.s	loc_7B9C
000081B8 3028 003E                  		move.w	$3E(a0),d0
000081BC 5040                       		addq.w	#8,d0
000081BE 3140 003E                  		move.w	d0,$3E(a0)
000081C2 D168 0026                  		add.w	d0,$26(a0)
000081C6 0C40 0200                  		cmpi.w	#$200,d0
000081CA 6600                       		bne.s	loc_7BB6
000081CC 117C 0001 003D             		move.b	#1,$3D(a0)
000081D2 6000                       		bra.s	loc_7BB6
000081D4                            ; ===========================================================================
000081D4                            
000081D4                            loc_7B9C:
000081D4 3028 003E                  		move.w	$3E(a0),d0
000081D8 5140                       		subq.w	#8,d0
000081DA 3140 003E                  		move.w	d0,$3E(a0)
000081DE D168 0026                  		add.w	d0,$26(a0)
000081E2 0C40 FE00                  		cmpi.w	#-$200,d0
000081E6 6600                       		bne.s	loc_7BB6
000081E8 117C 0000 003D             		move.b	#0,$3D(a0)
000081EE                            
000081EE                            loc_7BB6:
000081EE 1028 0026                  		move.b	$26(a0),d0
000081F2                            ; End of function Obj48_Move
000081F2                            
000081F2                            
000081F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F2                            
000081F2                            
000081F2                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081F2 6100 AAF8                  		bsr.w	CalcSine
000081F6 3428 0038                  		move.w	$38(a0),d2
000081FA 3628 003A                  		move.w	$3A(a0),d3
000081FE 45E8 0028                  		lea	$28(a0),a2
00008202 7C00                       		moveq	#0,d6
00008204 1C1A                       		move.b	(a2)+,d6
00008206                            
00008206                            loc_7BCE:
00008206 7800                       		moveq	#0,d4
00008208 181A                       		move.b	(a2)+,d4
0000820A ED4C                       		lsl.w	#6,d4
0000820C 0684 00FF D000             		addi.l	#$FFD000,d4
00008212 2244                       		movea.l	d4,a1
00008214 7800                       		moveq	#0,d4
00008216 1829 003C                  		move.b	$3C(a1),d4
0000821A 2A04                       		move.l	d4,d5
0000821C C9C0                       		muls.w	d0,d4
0000821E E084                       		asr.l	#8,d4
00008220 CBC1                       		muls.w	d1,d5
00008222 E085                       		asr.l	#8,d5
00008224 D842                       		add.w	d2,d4
00008226 DA43                       		add.w	d3,d5
00008228 3344 000C                  		move.w	d4,$C(a1)
0000822C 3345 0008                  		move.w	d5,8(a1)
00008230 51CE FFD4                  		dbf	d6,loc_7BCE
00008234 4E75                       		rts	
00008236                            ; End of function Obj15_Move2
00008236                            
00008236                            ; ===========================================================================
00008236                            
00008236                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008236 3028 003A                  		move.w	$3A(a0),d0
0000823A 0240 FF80                  		andi.w	#$FF80,d0
0000823E 3238 F700                  		move.w	($FFFFF700).w,d1
00008242 0441 0080                  		subi.w	#$80,d1
00008246 0241 FF80                  		andi.w	#$FF80,d1
0000824A 9041                       		sub.w	d1,d0
0000824C 0C40 0280                  		cmpi.w	#$280,d0
00008250 6200 0000                  		bhi.w	Obj15_DelAll
00008254 4E75                       		rts	
00008256                            ; ===========================================================================
00008256                            
00008256                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008256 7400                       		moveq	#0,d2
00008258 45E8 0028                  		lea	$28(a0),a2
0000825C 141A                       		move.b	(a2)+,d2
0000825E                            
0000825E                            Obj15_DelLoop:
0000825E 7000                       		moveq	#0,d0
00008260 101A                       		move.b	(a2)+,d0
00008262 ED48                       		lsl.w	#6,d0
00008264 0680 00FF D000             		addi.l	#$FFD000,d0
0000826A 2240                       		movea.l	d0,a1
0000826C 6100 0000                  		bsr.w	DeleteObject2
00008270 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008274 4E75                       		rts	
00008276                            ; ===========================================================================
00008276                            
00008276                            Obj15_Delete:				; XREF: Obj15_Index
00008276 6100 0000                  		bsr.w	DeleteObject
0000827A 4E75                       		rts	
0000827C                            ; ===========================================================================
0000827C                            
0000827C                            Obj15_Display:				; XREF: Obj15_Index
0000827C 6000 0000                  		bra.w	DisplaySprite
00008280                            ; ===========================================================================
00008280                            ; ---------------------------------------------------------------------------
00008280                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008280                            ; ---------------------------------------------------------------------------
00008280                            Map_obj15:
00008280                            	include "_maps\obj15ghz.asm"
00008280                            ; ---------------------------------------------------------------------------
00008280                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008280                            ; ---------------------------------------------------------------------------
00008280 0000                       		dc.w byte_7C4E-Map_obj15
00008282 0000                       		dc.w byte_7C59-Map_obj15
00008284 0000                       		dc.w byte_7C5F-Map_obj15
00008286 02                         byte_7C4E:	dc.b 2
00008287 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000828C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008291 01                         byte_7C59:	dc.b 1
00008292 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008297 01                         byte_7C5F:	dc.b 1
00008298 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000829E 00                         		even
0000829E 00                         		even
0000829E                            
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            ; Sprite mappings - SLZ	swinging platforms
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            Map_obj15a:
0000829E                            	include "_maps\obj15slz.asm"
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            ; Sprite mappings - SLZ	swinging platforms
0000829E                            ; ---------------------------------------------------------------------------
0000829E 0000                       		dc.w byte_7C6C-Map_obj15a
000082A0 0000                       		dc.w byte_7C95-Map_obj15a
000082A2 0000                       		dc.w byte_7C9B-Map_obj15a
000082A4 08                         byte_7C6C:	dc.b 8
000082A5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082AA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000082AF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000082B4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082B9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082BE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082C3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082C8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082CD 01                         byte_7C95:	dc.b 1
000082CE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082D3 01                         byte_7C9B:	dc.b 1
000082D4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000082DA 00                         		even
000082DA 00                         		even
000082DA                            
000082DA                            ; ===========================================================================
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            ; Object 17 - helix of spikes on a pole	(GHZ)
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            
000082DA                            Obj17:					; XREF: Obj_Index
000082DA 7000                       		moveq	#0,d0
000082DC 1028 0024                  		move.b	$24(a0),d0
000082E0 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082E4 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082E8                            ; ===========================================================================
000082E8 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082EA 0000                       		dc.w Obj17_Action-Obj17_Index
000082EC 0000                       		dc.w Obj17_Action-Obj17_Index
000082EE 0000                       		dc.w Obj17_Delete-Obj17_Index
000082F0 0000                       		dc.w Obj17_Display-Obj17_Index
000082F2                            ; ===========================================================================
000082F2                            
000082F2                            Obj17_Main:				; XREF: Obj17_Index
000082F2 5428 0024                  		addq.b	#2,$24(a0)
000082F6 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000082FE 317C 4398 0002             		move.w	#$4398,2(a0)
00008304 117C 0007 0022             		move.b	#7,$22(a0)
0000830A 117C 0004 0001             		move.b	#4,1(a0)
00008310 117C 0003 0018             		move.b	#3,$18(a0)
00008316 117C 0008 0019             		move.b	#8,$19(a0)
0000831C 3428 000C                  		move.w	$C(a0),d2
00008320 3628 0008                  		move.w	8(a0),d3
00008324 1810                       		move.b	0(a0),d4
00008326 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000832A 7200                       		moveq	#0,d1
0000832C 1212                       		move.b	(a2),d1		; move a2 to d1
0000832E 14FC 0000                  		move.b	#0,(a2)+
00008332 3001                       		move.w	d1,d0
00008334 E248                       		lsr.w	#1,d0
00008336 E948                       		lsl.w	#4,d0
00008338 9640                       		sub.w	d0,d3
0000833A 5501                       		subq.b	#2,d1
0000833C 6500                       		bcs.s	Obj17_Action
0000833E 7C00                       		moveq	#0,d6
00008340                            
00008340                            Obj17_MakeHelix:
00008340 6100 0000                  		bsr.w	SingleObjLoad
00008344 6600                       		bne.s	Obj17_Action
00008346 5228 0028                  		addq.b	#1,$28(a0)
0000834A 3A09                       		move.w	a1,d5
0000834C 0445 D000                  		subi.w	#$D000,d5
00008350 EC4D                       		lsr.w	#6,d5
00008352 0245 007F                  		andi.w	#$7F,d5
00008356 14C5                       		move.b	d5,(a2)+
00008358 137C 0008 0024             		move.b	#8,$24(a1)
0000835E 1284                       		move.b	d4,0(a1)
00008360 3342 000C                  		move.w	d2,$C(a1)
00008364 3343 0008                  		move.w	d3,8(a1)
00008368 2368 0004 0004             		move.l	4(a0),4(a1)
0000836E 337C 4398 0002             		move.w	#$4398,2(a1)
00008374 137C 0004 0001             		move.b	#4,1(a1)
0000837A 137C 0003 0018             		move.b	#3,$18(a1)
00008380 137C 0008 0019             		move.b	#8,$19(a1)
00008386 1346 003E                  		move.b	d6,$3E(a1)
0000838A 5206                       		addq.b	#1,d6
0000838C 0206 0007                  		andi.b	#7,d6
00008390 0643 0010                  		addi.w	#$10,d3
00008394 B668 0008                  		cmp.w	8(a0),d3
00008398 6600                       		bne.s	loc_7D78
0000839A 1146 003E                  		move.b	d6,$3E(a0)
0000839E 5206                       		addq.b	#1,d6
000083A0 0206 0007                  		andi.b	#7,d6
000083A4 0643 0010                  		addi.w	#$10,d3
000083A8 5228 0028                  		addq.b	#1,$28(a0)
000083AC                            
000083AC                            loc_7D78:
000083AC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000083B0                            
000083B0                            Obj17_Action:				; XREF: Obj17_Index
000083B0 6100 0000                  		bsr.w	Obj17_RotateSpikes
000083B4 6100 0000                  		bsr.w	DisplaySprite
000083B8 6000 0000                  		bra.w	Obj17_ChkDel
000083BC                            
000083BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083BC                            
000083BC                            
000083BC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083BC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083C0 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083C6 D028 003E                  		add.b	$3E(a0),d0
000083CA 0200 0007                  		andi.b	#7,d0
000083CE 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083D2 6600                       		bne.s	locret_7DA6
000083D4 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000083DA                            
000083DA                            locret_7DA6:
000083DA 4E75                       		rts	
000083DC                            ; End of function Obj17_RotateSpikes
000083DC                            
000083DC                            ; ===========================================================================
000083DC                            
000083DC                            Obj17_ChkDel:				; XREF: Obj17_Action
000083DC 3028 0008                  		move.w	8(a0),d0
000083E0 0240 FF80                  		andi.w	#$FF80,d0
000083E4 3238 F700                  		move.w	($FFFFF700).w,d1
000083E8 0441 0080                  		subi.w	#$80,d1
000083EC 0241 FF80                  		andi.w	#$FF80,d1
000083F0 9041                       		sub.w	d1,d0
000083F2 0C40 0280                  		cmpi.w	#$280,d0
000083F6 6200 0000                  		bhi.w	Obj17_DelAll
000083FA 4E75                       		rts	
000083FC                            ; ===========================================================================
000083FC                            
000083FC                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000083FC 7400                       		moveq	#0,d2
000083FE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008402 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008404 5502                       		subq.b	#2,d2
00008406 6500                       		bcs.s	Obj17_Delete
00008408                            
00008408                            Obj17_DelLoop:
00008408 7000                       		moveq	#0,d0
0000840A 101A                       		move.b	(a2)+,d0
0000840C ED48                       		lsl.w	#6,d0
0000840E 0680 00FF D000             		addi.l	#$FFD000,d0
00008414 2240                       		movea.l	d0,a1
00008416 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000841A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000841E                            
0000841E                            Obj17_Delete:				; XREF: Obj17_Index
0000841E 6100 0000                  		bsr.w	DeleteObject
00008422 4E75                       		rts	
00008424                            ; ===========================================================================
00008424                            
00008424                            Obj17_Display:				; XREF: Obj17_Index
00008424 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008428 6000 0000                  		bra.w	DisplaySprite
0000842C                            ; ===========================================================================
0000842C                            ; ---------------------------------------------------------------------------
0000842C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000842C                            ; ---------------------------------------------------------------------------
0000842C                            Map_obj17:
0000842C                            	include "_maps\obj17.asm"
0000842C                            ; ---------------------------------------------------------------------------
0000842C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000842C                            ; ---------------------------------------------------------------------------
0000842C 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008430 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008434 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008438 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000843C 01                         byte_7E08:	dc.b 1
0000843D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008442 01                         byte_7E0E:	dc.b 1
00008443 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008448 01                         byte_7E14:	dc.b 1
00008449 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000844E 01                         byte_7E1A:	dc.b 1
0000844F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008454 01                         byte_7E20:	dc.b 1
00008455 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000845A 01                         byte_7E26:	dc.b 1
0000845B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008460 01                         byte_7E2C:	dc.b 1
00008461 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008466                            		even
00008466                            		even
00008466                            
00008466                            ; ===========================================================================
00008466                            ; ---------------------------------------------------------------------------
00008466                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008466                            ; ---------------------------------------------------------------------------
00008466                            
00008466                            Obj18:					; XREF: Obj_Index
00008466 7000                       		moveq	#0,d0
00008468 1028 0024                  		move.b	$24(a0),d0
0000846C 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008470 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008474                            ; ===========================================================================
00008474 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008476 0000                       		dc.w Obj18_Solid-Obj18_Index
00008478 0000                       		dc.w Obj18_Action2-Obj18_Index
0000847A 0000                       		dc.w Obj18_Delete-Obj18_Index
0000847C 0000                       		dc.w Obj18_Action-Obj18_Index
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            Obj18_Main:				; XREF: Obj18_Index
0000847E 5428 0024                  		addq.b	#2,$24(a0)
00008482 317C 4000 0002             		move.w	#$4000,2(a0)
00008488 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008490 117C 0020 0019             		move.b	#$20,$19(a0)
00008496 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000849C 6600                       		bne.s	Obj18_NotSYZ
0000849E 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000084A6 117C 0020 0019             		move.b	#$20,$19(a0)
000084AC                            
000084AC                            Obj18_NotSYZ:
000084AC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000084B2 6600                       		bne.s	Obj18_NotSLZ
000084B4 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084BC 117C 0020 0019             		move.b	#$20,$19(a0)
000084C2 317C 4000 0002             		move.w	#$4000,2(a0)
000084C8 117C 0003 0028             		move.b	#3,$28(a0)
000084CE                            
000084CE                            Obj18_NotSLZ:
000084CE 117C 0004 0001             		move.b	#4,1(a0)
000084D4 117C 0004 0018             		move.b	#4,$18(a0)
000084DA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084E0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084E6 3168 0008 0032             		move.w	8(a0),$32(a0)
000084EC 317C 0080 0026             		move.w	#$80,$26(a0)
000084F2 7200                       		moveq	#0,d1
000084F4 1028 0028                  		move.b	$28(a0),d0
000084F8 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000084FC 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000084FE 5201                       		addq.b	#1,d1		; use frame #1
00008500 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008506                            
00008506                            Obj18_SetFrame:
00008506 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000850A                            
0000850A                            Obj18_Solid:				; XREF: Obj18_Index
0000850A 4A28 0038                  		tst.b	$38(a0)
0000850E 6700                       		beq.s	loc_7EE0
00008510 5928 0038                  		subq.b	#4,$38(a0)
00008514                            
00008514                            loc_7EE0:
00008514 7200                       		moveq	#0,d1
00008516 1228 0019                  		move.b	$19(a0),d1
0000851A 6100 F56C                  		bsr.w	PlatformObject
0000851E                            
0000851E                            Obj18_Action:				; XREF: Obj18_Index
0000851E 6100 0000                  		bsr.w	Obj18_Move
00008522 6100 0000                  		bsr.w	Obj18_Nudge
00008526 6100 0000                  		bsr.w	DisplaySprite
0000852A 6000 0000                  		bra.w	Obj18_ChkDel
0000852E                            ; ===========================================================================
0000852E                            
0000852E                            Obj18_Action2:				; XREF: Obj18_Index
0000852E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008534 6700                       		beq.s	loc_7F06
00008536 5828 0038                  		addq.b	#4,$38(a0)
0000853A                            
0000853A                            loc_7F06:
0000853A 7200                       		moveq	#0,d1
0000853C 1228 0019                  		move.b	$19(a0),d1
00008540 6100 F6BA                  		bsr.w	ExitPlatform
00008544 3F28 0008                  		move.w	8(a0),-(sp)
00008548 6100 0000                  		bsr.w	Obj18_Move
0000854C 6100 0000                  		bsr.w	Obj18_Nudge
00008550 341F                       		move.w	(sp)+,d2
00008552 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008556 6100 0000                  		bsr.w	DisplaySprite
0000855A 6000 0000                  		bra.w	Obj18_ChkDel
0000855E                            
0000855E 4E75                       		rts
00008560                            
00008560                            ; ---------------------------------------------------------------------------
00008560                            ; Subroutine to	move platform slightly when you	stand on it
00008560                            ; ---------------------------------------------------------------------------
00008560                            
00008560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008560                            
00008560                            
00008560                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008560 1028 0038                  		move.b	$38(a0),d0
00008564 6100 A786                  		bsr.w	CalcSine
00008568 323C 0400                  		move.w	#$400,d1
0000856C C1C1                       		muls.w	d1,d0
0000856E 4840                       		swap	d0
00008570 D068 002C                  		add.w	$2C(a0),d0
00008574 3140 000C                  		move.w	d0,$C(a0)
00008578 4E75                       		rts	
0000857A                            ; End of function Obj18_Nudge
0000857A                            
0000857A                            ; ---------------------------------------------------------------------------
0000857A                            ; Subroutine to	move platforms
0000857A                            ; ---------------------------------------------------------------------------
0000857A                            
0000857A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000857A                            
0000857A                            
0000857A                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000857A 7000                       		moveq	#0,d0
0000857C 1028 0028                  		move.b	$28(a0),d0
00008580 0240 000F                  		andi.w	#$F,d0
00008584 D040                       		add.w	d0,d0
00008586 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000858A 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000858E                            ; End of function Obj18_Move
0000858E                            
0000858E                            ; ===========================================================================
0000858E 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008592 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008596 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000859A 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000859E 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000085A2 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000085A6 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000085A8                            ; ===========================================================================
000085A8                            
000085A8                            Obj18_Type00:
000085A8 4E75                       		rts			; platform 00 doesn't move
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj18_Type05:
000085AA 3028 0032                  		move.w	$32(a0),d0
000085AE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085B2 4401                       		neg.b	d1		; reverse platform-motion
000085B4 0601 0040                  		addi.b	#$40,d1
000085B8 6000                       		bra.s	Obj18_01_Move
000085BA                            ; ===========================================================================
000085BA                            
000085BA                            Obj18_Type01:
000085BA 3028 0032                  		move.w	$32(a0),d0
000085BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085C2 0401 0040                  		subi.b	#$40,d1
000085C6                            
000085C6                            Obj18_01_Move:
000085C6 4881                       		ext.w	d1
000085C8 D041                       		add.w	d1,d0
000085CA 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085CE 6000 0000                  		bra.w	Obj18_ChgMotion
000085D2                            ; ===========================================================================
000085D2                            
000085D2                            Obj18_Type0C:
000085D2 3028 0034                  		move.w	$34(a0),d0
000085D6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085DA 4401                       		neg.b	d1		; reverse platform-motion
000085DC 0601 0030                  		addi.b	#$30,d1
000085E0 6000                       		bra.s	Obj18_02_Move
000085E2                            ; ===========================================================================
000085E2                            
000085E2                            Obj18_Type0B:
000085E2 3028 0034                  		move.w	$34(a0),d0
000085E6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085EA 0401 0030                  		subi.b	#$30,d1
000085EE 6000                       		bra.s	Obj18_02_Move
000085F0                            ; ===========================================================================
000085F0                            
000085F0                            Obj18_Type06:
000085F0 3028 0034                  		move.w	$34(a0),d0
000085F4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085F8 4401                       		neg.b	d1		; reverse platform-motion
000085FA 0601 0040                  		addi.b	#$40,d1
000085FE 6000                       		bra.s	Obj18_02_Move
00008600                            ; ===========================================================================
00008600                            
00008600                            Obj18_Type02:
00008600 3028 0034                  		move.w	$34(a0),d0
00008604 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008608 0401 0040                  		subi.b	#$40,d1
0000860C                            
0000860C                            Obj18_02_Move:
0000860C 4881                       		ext.w	d1
0000860E D041                       		add.w	d1,d0
00008610 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008614 6000 0000                  		bra.w	Obj18_ChgMotion
00008618                            ; ===========================================================================
00008618                            
00008618                            Obj18_Type03:
00008618 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000861C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000861E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008624 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008626 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000862C                            
0000862C                            Obj18_03_NoMove:
0000862C 4E75                       		rts	
0000862E                            ; ===========================================================================
0000862E                            
0000862E                            Obj18_03_Wait:
0000862E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008632 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008634 317C 0020 003A             		move.w	#32,$3A(a0)
0000863A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000863E 4E75                       		rts	
00008640                            ; ===========================================================================
00008640                            
00008640                            Obj18_Type04:
00008640 4A68 003A                  		tst.w	$3A(a0)
00008644 6700                       		beq.s	loc_8048
00008646 5368 003A                  		subq.w	#1,$3A(a0)
0000864A 6600                       		bne.s	loc_8048
0000864C 0828 0003 0022             		btst	#3,$22(a0)
00008652 6700                       		beq.s	loc_8042
00008654 08E9 0001 0022             		bset	#1,$22(a1)
0000865A 08A9 0003 0022             		bclr	#3,$22(a1)
00008660 137C 0002 0024             		move.b	#2,$24(a1)
00008666 08A8 0003 0022             		bclr	#3,$22(a0)
0000866C 4228 0025                  		clr.b	$25(a0)
00008670 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008676                            
00008676                            loc_8042:
00008676 117C 0008 0024             		move.b	#8,$24(a0)
0000867C                            
0000867C                            loc_8048:
0000867C 2628 002C                  		move.l	$2C(a0),d3
00008680 3028 0012                  		move.w	$12(a0),d0
00008684 48C0                       		ext.l	d0
00008686 E180                       		asl.l	#8,d0
00008688 D680                       		add.l	d0,d3
0000868A 2143 002C                  		move.l	d3,$2C(a0)
0000868E 0668 0038 0012             		addi.w	#$38,$12(a0)
00008694 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008698 0640 00E0                  		addi.w	#$E0,d0
0000869C B068 002C                  		cmp.w	$2C(a0),d0
000086A0 6400                       		bcc.s	locret_8074
000086A2 117C 0006 0024             		move.b	#6,$24(a0)
000086A8                            
000086A8                            locret_8074:
000086A8 4E75                       		rts	
000086AA                            ; ===========================================================================
000086AA                            
000086AA                            Obj18_Type07:
000086AA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000086AE 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000086B0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000086B4 7000                       		moveq	#0,d0
000086B6 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086BA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086BC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086C0 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086C2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086C8                            
000086C8                            Obj18_07_NoMove:
000086C8 4E75                       		rts	
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            Obj18_07_Wait:
000086CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086CE 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086D0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086D4 4E75                       		rts	
000086D6                            ; ===========================================================================
000086D6                            
000086D6                            Obj18_Type08:
000086D6 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000086DA 3028 0034                  		move.w	$34(a0),d0
000086DE 0440 0200                  		subi.w	#$200,d0
000086E2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086E6 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086E8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086EC                            
000086EC                            Obj18_08_NoStop:
000086EC 4E75                       		rts	
000086EE                            ; ===========================================================================
000086EE                            
000086EE                            Obj18_Type0A:
000086EE 3028 0034                  		move.w	$34(a0),d0
000086F2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086F6 0401 0040                  		subi.b	#$40,d1
000086FA 4881                       		ext.w	d1
000086FC E241                       		asr.w	#1,d1
000086FE D041                       		add.w	d1,d0
00008700 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008704                            
00008704                            Obj18_ChgMotion:
00008704 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000870A 4E75                       		rts	
0000870C                            ; ===========================================================================
0000870C                            
0000870C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000870C 3028 0032                  		move.w	$32(a0),d0
00008710 0240 FF80                  		andi.w	#$FF80,d0
00008714 3238 F700                  		move.w	($FFFFF700).w,d1
00008718 0441 0080                  		subi.w	#$80,d1
0000871C 0241 FF80                  		andi.w	#$FF80,d1
00008720 9041                       		sub.w	d1,d0
00008722 0C40 0280                  		cmpi.w	#$280,d0
00008726 6200                       		bhi.s	Obj18_Delete
00008728 4E75                       		rts	
0000872A                            ; ===========================================================================
0000872A                            
0000872A                            Obj18_Delete:				; XREF: Obj18_Index
0000872A 6000 0000                  		bra.w	DeleteObject
0000872E                            ; ===========================================================================
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - unused
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            Map_obj18x:
0000872E                            	include "_maps\obj18x.asm"
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - unused
0000872E                            ; ---------------------------------------------------------------------------
0000872E 0000                       		dc.w byte_80FE-Map_obj18x
00008730 0000                       		dc.w byte_8109-Map_obj18x
00008732 02                         byte_80FE:	dc.b 2
00008733 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008738 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000873D 0A                         byte_8109:	dc.b $A
0000873E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008743 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008748 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000874D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008752 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008757 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000875C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008761 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008766 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000876B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008770                            		even
00008770                            		even
00008770                            
00008770                            ; ---------------------------------------------------------------------------
00008770                            ; Sprite mappings - GHZ	platforms
00008770                            ; ---------------------------------------------------------------------------
00008770                            Map_obj18:
00008770                            	include "_maps\obj18ghz.asm"
00008770                            ; ---------------------------------------------------------------------------
00008770                            ; Sprite mappings - GHZ	platforms
00008770                            ; ---------------------------------------------------------------------------
00008770 0000                       		dc.w byte_8140-Map_obj18
00008772 0000                       		dc.w byte_8155-Map_obj18
00008774 04                         byte_8140:	dc.b 4
00008775 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000877A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000877F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008784 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008789 0A                         byte_8155:	dc.b $A
0000878A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000878F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008794 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008799 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000879E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087A3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000087A8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000087AD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000087B2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087B7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087BC                            		even
000087BC                            		even
000087BC                            
000087BC                            ; ---------------------------------------------------------------------------
000087BC                            ; Sprite mappings - SYZ	platforms
000087BC                            ; ---------------------------------------------------------------------------
000087BC                            Map_obj18a:
000087BC                            	include "_maps\obj18syz.asm"
000087BC                            ; ---------------------------------------------------------------------------
000087BC                            ; Sprite mappings - SYZ	platforms
000087BC                            ; ---------------------------------------------------------------------------
000087BC 0000                       		dc.w byte_818A-Map_obj18a
000087BE 03                         byte_818A:	dc.b 3
000087BF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087C4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087C9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087CE                            		even
000087CE                            		even
000087CE                            
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Sprite mappings - SLZ	platforms
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            Map_obj18b:
000087CE                            	include "_maps\obj18slz.asm"
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Sprite mappings - SLZ	platforms
000087CE                            ; ---------------------------------------------------------------------------
000087CE 0000                       		dc.w byte_819C-Map_obj18b
000087D0 02                         byte_819C:	dc.b 2
000087D1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087D6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087DC 00                         		even
000087DC 00                         		even
000087DC                            
000087DC                            ; ===========================================================================
000087DC                            ; ---------------------------------------------------------------------------
000087DC                            ; Object 19 - Pearto bombs
000087DC                            ; ---------------------------------------------------------------------------
000087DC                            Obj19:					; XREF: Obj_Index
000087DC 7000                       		moveq	#0,d0
000087DE 1028 0024                  		move.b	$24(a0),d0
000087E2 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087E6 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            
000087EA 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            
000087F0                            loc_7076:
000087F0 5428 0024                  		addq.b	#2,$24(a0)
000087F4 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000087FC 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008802 117C 0004 0001             		move.b	#4,1(a0)
00008808 117C 0003 0019             		move.b	#3,$19(a0)
0000880E 117C 0087 0020             		move.b	#$87,$20(a0)
00008814 117C 0008 0018             		move.b	#8,$18(a0)
0000881A 317C 0018 0030             		move.w	#$18,$30(a0)
00008820                            
00008820                            loc_70A6:
00008820 0828 0007 0022             		btst	#7,$22(a0)
00008826 6600                       		bne.s	loc_70C2
00008828 4A68 0030                  		tst.w	$30(a0)
0000882C 6600                       		bne.s	loc_70D2
0000882E 4EB9 0000 0000             		jsr	ObjHitFloor
00008834 4A41                       		tst.w	d1
00008836 6A00                       		bpl.s	loc_70D6
00008838 D368 000C                  		add.w	d1,$C(a0)
0000883C                            
0000883C                            loc_70C2:
0000883C 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008840 117C 0000 0024             		move.b	#0,$24(a0)
00008846                            ; ---------------------------------------------------------------------------
00008846                            
00008846                            loc_70D2:
00008846 5368 0030                  		subq.w	#1,$30(a0)
0000884A                            
0000884A                            loc_70D6:
0000884A 6100 0000                  		bsr.w	ObjectFall
0000884E 6100 0000                  		bsr.w	DisplaySprite
00008852 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008856 0640 00E0                  		addi.w	#$E0,d0
0000885A B068 000C                  		cmp.w	$C(a0),d0
0000885E 6500                       		bcs.s	loc_70EE
00008860 4E75                       		rts
00008862                            ; ---------------------------------------------------------------------------
00008862                            
00008862                            loc_70EE:
00008862 6100 0000                  		bsr.w	DeleteObject
00008866 4E75                       		rts
00008868                            		
00008868                            Map_obj19:
00008868                            	include "_maps\obj19.asm"
00008868                            Map_02b4:
00008868 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000886A 01                         Map_02b4_2: 	dc.b $1
0000886B F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008870                            	even
00008870                            	even
00008870                            ; ===========================================================================
00008870                            ; ---------------------------------------------------------------------------
00008870                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008870                            ; ---------------------------------------------------------------------------
00008870                            Map_obj48:
00008870                            	include "_maps\obj48.asm"
00008870                            ; ---------------------------------------------------------------------------
00008870                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008870                            ; ---------------------------------------------------------------------------
00008870 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008874 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008878 06                         byte_81B2:	dc.b 6
00008879 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000887E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008883 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008888 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000888D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008892 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008897 04                         byte_81D1:	dc.b 4
00008898 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000889D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000088A2 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000088A7 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000088AC 04                         byte_81E6:	dc.b 4
000088AD E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000088B2 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088B7 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088BC 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088C1 04                         byte_81FB:	dc.b 4
000088C2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088C7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088CC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088D1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088D6                            		even
000088D6                            		even
000088D6                            
000088D6                            ; ===========================================================================
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            ; Object 1A - GHZ collapsing ledge
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            
000088D6                            Obj1A:					; XREF: Obj_Index
000088D6 7000                       		moveq	#0,d0
000088D8 1028 0024                  		move.b	$24(a0),d0
000088DC 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088E0 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088E4                            ; ===========================================================================
000088E4 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088E8 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088EC 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088F0                            ; ===========================================================================
000088F0                            
000088F0                            Obj1A_Main:				; XREF: Obj1A_Index
000088F0 5428 0024                  		addq.b	#2,$24(a0)
000088F4 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000088FC 317C 4000 0002             		move.w	#$4000,2(a0)
00008902 0028 0004 0001             		ori.b	#4,1(a0)
00008908 117C 0004 0018             		move.b	#4,$18(a0)
0000890E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008914 117C 0064 0019             		move.b	#$64,$19(a0)
0000891A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008920 117C 0038 0016             		move.b	#$38,$16(a0)
00008926 08E8 0004 0001             		bset	#4,1(a0)
0000892C                            
0000892C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000892C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008930 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008932 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008936 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000893A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000893E                            
0000893E                            Obj1A_Slope:
0000893E 323C 0030                  		move.w	#$30,d1
00008942 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008948 6100 F212                  		bsr.w	SlopeObject
0000894C 6000 0000                  		bra.w	MarkObjGone
00008950                            ; ===========================================================================
00008950                            
00008950                            Obj1A_Touch:				; XREF: Obj1A_Index
00008950 4A28 0038                  		tst.b	$38(a0)
00008954 6700 0000                  		beq.w	loc_847A
00008958 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000895E 5328 0038                  		subq.b	#1,$38(a0)
00008962                            
00008962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008962                            
00008962                            
00008962                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008962 323C 0030                  		move.w	#$30,d1
00008966 6100 F294                  		bsr.w	ExitPlatform
0000896A 323C 0030                  		move.w	#$30,d1
0000896E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008974 3428 0008                  		move.w	8(a0),d2
00008978 6100 0000                  		bsr.w	SlopeObject2
0000897C 6000 0000                  		bra.w	MarkObjGone
00008980                            ; End of function Obj1A_WalkOff
00008980                            
00008980                            ; ===========================================================================
00008980                            
00008980                            Obj1A_Display:				; XREF: Obj1A_Index
00008980 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008984 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008986 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000898A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000898E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008992 6000 0000                  		bra.w	DisplaySprite
00008996                            ; ===========================================================================
00008996                            
00008996                            loc_82D0:				; XREF: Obj1A_Display
00008996 5328 0038                  		subq.b	#1,$38(a0)
0000899A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000899E 43F8 D000                  		lea	($FFFFD000).w,a1
000089A2 0829 0003 0022             		btst	#3,$22(a1)
000089A8 6700                       		beq.s	loc_82FC
000089AA 4A28 0038                  		tst.b	$38(a0)
000089AE 6600                       		bne.s	locret_8308
000089B0 08A9 0003 0022             		bclr	#3,$22(a1)
000089B6 08A9 0005 0022             		bclr	#5,$22(a1)
000089BC 137C 0001 001D             		move.b	#1,$1D(a1)
000089C2                            
000089C2                            loc_82FC:
000089C2 117C 0000 003A             		move.b	#0,$3A(a0)
000089C8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089CE                            
000089CE                            locret_8308:
000089CE 4E75                       		rts	
000089D0                            ; ===========================================================================
000089D0                            
000089D0                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089D0 6100 0000                  		bsr.w	ObjectFall
000089D4 6100 0000                  		bsr.w	DisplaySprite
000089D8 4A28 0001                  		tst.b	1(a0)
000089DC 6A00                       		bpl.s	Obj1A_Delete
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            
000089E0                            Obj1A_Delete:				; XREF: Obj1A_Index
000089E0 6100 0000                  		bsr.w	DeleteObject
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            Obj53:					; XREF: Obj_Index
000089E6 7000                       		moveq	#0,d0
000089E8 1028 0024                  		move.b	$24(a0),d0
000089EC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089F0 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089F4                            ; ===========================================================================
000089F4 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089F8 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000089FC 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A00                            ; ===========================================================================
00008A00                            
00008A00                            Obj53_Main:				; XREF: Obj53_Index
00008A00 5428 0024                  		addq.b	#2,$24(a0)
00008A04 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A0C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A12 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A18 6600                       		bne.s	Obj53_NotSLZ
00008A1A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A20 5428 001A                  		addq.b	#2,$1A(a0)
00008A24                            
00008A24                            Obj53_NotSLZ:
00008A24 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A2A 6600                       		bne.s	Obj53_NotSBZ
00008A2C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A32                            
00008A32                            Obj53_NotSBZ:
00008A32 0028 0004 0001             		ori.b	#4,1(a0)
00008A38 117C 0004 0018             		move.b	#4,$18(a0)
00008A3E 117C 0007 0038             		move.b	#7,$38(a0)
00008A44 117C 0044 0019             		move.b	#$44,$19(a0)
00008A4A                            
00008A4A                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A4A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A4E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A50 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A54 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A58 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A5C                            
00008A5C                            Obj53_Solid:
00008A5C 323C 0020                  		move.w	#$20,d1
00008A60 6100 F026                  		bsr.w	PlatformObject
00008A64 4A28 0028                  		tst.b	$28(a0)
00008A68 6A00                       		bpl.s	Obj53_MarkAsGone
00008A6A 0829 0003 0022             		btst	#3,$22(a1)
00008A70 6700                       		beq.s	Obj53_MarkAsGone
00008A72 08A8 0000 0001             		bclr	#0,1(a0)
00008A78 3029 0008                  		move.w	8(a1),d0
00008A7C 9068 0008                  		sub.w	8(a0),d0
00008A80 6400                       		bcc.s	Obj53_MarkAsGone
00008A82 08E8 0000 0001             		bset	#0,1(a0)
00008A88                            
00008A88                            Obj53_MarkAsGone:
00008A88 6000 0000                  		bra.w	MarkObjGone
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            Obj53_Touch:				; XREF: Obj53_Index
00008A8C 4A28 0038                  		tst.b	$38(a0)
00008A90 6700 0000                  		beq.w	loc_8458
00008A94 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A9A 5328 0038                  		subq.b	#1,$38(a0)
00008A9E                            
00008A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A9E                            
00008A9E                            
00008A9E                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A9E 323C 0020                  		move.w	#$20,d1
00008AA2 6100 F158                  		bsr.w	ExitPlatform
00008AA6 3428 0008                  		move.w	8(a0),d2
00008AAA 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008AAE 6000 0000                  		bra.w	MarkObjGone
00008AB2                            ; End of function Obj53_WalkOff
00008AB2                            
00008AB2                            ; ===========================================================================
00008AB2                            
00008AB2                            Obj53_Display:				; XREF: Obj53_Index
00008AB2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AB6 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008AB8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008ABC 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008AC0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AC4 6000 0000                  		bra.w	DisplaySprite
00008AC8                            ; ===========================================================================
00008AC8                            
00008AC8                            loc_8402:
00008AC8 5328 0038                  		subq.b	#1,$38(a0)
00008ACC 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008AD0 43F8 D000                  		lea	($FFFFD000).w,a1
00008AD4 0829 0003 0022             		btst	#3,$22(a1)
00008ADA 6700                       		beq.s	loc_842E
00008ADC 4A28 0038                  		tst.b	$38(a0)
00008AE0 6600                       		bne.s	locret_843A
00008AE2 08A9 0003 0022             		bclr	#3,$22(a1)
00008AE8 08A9 0005 0022             		bclr	#5,$22(a1)
00008AEE 137C 0001 001D             		move.b	#1,$1D(a1)
00008AF4                            
00008AF4                            loc_842E:
00008AF4 117C 0000 003A             		move.b	#0,$3A(a0)
00008AFA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B00                            
00008B00                            locret_843A:
00008B00 4E75                       		rts	
00008B02                            ; ===========================================================================
00008B02                            
00008B02                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B02 6100 0000                  		bsr.w	ObjectFall
00008B06 6100 0000                  		bsr.w	DisplaySprite
00008B0A 4A28 0001                  		tst.b	1(a0)
00008B0E 6A00                       		bpl.s	Obj53_Delete
00008B10 4E75                       		rts	
00008B12                            ; ===========================================================================
00008B12                            
00008B12                            Obj53_Delete:				; XREF: Obj53_Index
00008B12 6100 0000                  		bsr.w	DeleteObject
00008B16 4E75                       		rts	
00008B18                            ; ===========================================================================
00008B18                            
00008B18                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B18 117C 0000 003A             		move.b	#0,$3A(a0)
00008B1E                            
00008B1E                            loc_8458:				; XREF: Obj53_Touch
00008B1E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B24 0828 0000 0028             		btst	#0,$28(a0)
00008B2A 6700                       		beq.s	loc_846C
00008B2C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B32                            
00008B32                            loc_846C:
00008B32 7207                       		moveq	#7,d1
00008B34 5228 001A                  		addq.b	#1,$1A(a0)
00008B38 6000                       		bra.s	loc_8486
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B3A 117C 0000 003A             		move.b	#0,$3A(a0)
00008B40                            
00008B40                            loc_847A:				; XREF: Obj1A_Touch
00008B40 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B46 7218                       		moveq	#$18,d1
00008B48 5428 001A                  		addq.b	#2,$1A(a0)
00008B4C                            
00008B4C                            loc_8486:				; XREF: Obj53_Collapse
00008B4C 7000                       		moveq	#0,d0
00008B4E 1028 001A                  		move.b	$1A(a0),d0
00008B52 D040                       		add.w	d0,d0
00008B54 2668 0004                  		movea.l	4(a0),a3
00008B58 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B5C 524B                       		addq.w	#1,a3
00008B5E 08E8 0005 0001             		bset	#5,1(a0)
00008B64 1810                       		move.b	0(a0),d4
00008B66 1A28 0001                  		move.b	1(a0),d5
00008B6A 2248                       		movea.l	a0,a1
00008B6C 6000                       		bra.s	loc_84B2
00008B6E                            ; ===========================================================================
00008B6E                            
00008B6E                            loc_84AA:
00008B6E 6100 0000                  		bsr.w	SingleObjLoad
00008B72 6600                       		bne.s	loc_84F2
00008B74 5A4B                       		addq.w	#5,a3
00008B76                            
00008B76                            loc_84B2:
00008B76 137C 0006 0024             		move.b	#6,$24(a1)
00008B7C 1284                       		move.b	d4,0(a1)
00008B7E 234B 0004                  		move.l	a3,4(a1)
00008B82 1345 0001                  		move.b	d5,1(a1)
00008B86 3368 0008 0008             		move.w	8(a0),8(a1)
00008B8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B92 3368 0002 0002             		move.w	2(a0),2(a1)
00008B98 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B9E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008BA4 135C 0038                  		move.b	(a4)+,$38(a1)
00008BA8 B3C8                       		cmpa.l	a0,a1
00008BAA 6400                       		bcc.s	loc_84EE
00008BAC 6100 0000                  		bsr.w	DisplaySprite2
00008BB0                            
00008BB0                            loc_84EE:
00008BB0 51C9 FFBC                  		dbf	d1,loc_84AA
00008BB4                            
00008BB4                            loc_84F2:
00008BB4 6100 0000                  		bsr.w	DisplaySprite
00008BB8 303C 00B9                  		move.w	#$B9,d0
00008BBC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BC2                            ; ===========================================================================
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BD2 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BDC 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BE4 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BEC                            
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            
00008BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BEC                            
00008BEC                            
00008BEC                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BEC 43F8 D000                  		lea	($FFFFD000).w,a1
00008BF0 0829 0003 0022             		btst	#3,$22(a1)
00008BF6 6700                       		beq.s	locret_856E
00008BF8 3029 0008                  		move.w	8(a1),d0
00008BFC 9068 0008                  		sub.w	8(a0),d0
00008C00 D041                       		add.w	d1,d0
00008C02 E248                       		lsr.w	#1,d0
00008C04 0828 0000 0001             		btst	#0,1(a0)
00008C0A 6700                       		beq.s	loc_854E
00008C0C 4640                       		not.w	d0
00008C0E D041                       		add.w	d1,d0
00008C10                            
00008C10                            loc_854E:
00008C10 7200                       		moveq	#0,d1
00008C12 1232 0000                  		move.b	(a2,d0.w),d1
00008C16 3028 000C                  		move.w	$C(a0),d0
00008C1A 9041                       		sub.w	d1,d0
00008C1C 7200                       		moveq	#0,d1
00008C1E 1229 0016                  		move.b	$16(a1),d1
00008C22 9041                       		sub.w	d1,d0
00008C24 3340 000C                  		move.w	d0,$C(a1)
00008C28 9468 0008                  		sub.w	8(a0),d2
00008C2C 9569 0008                  		sub.w	d2,8(a1)
00008C30                            
00008C30                            locret_856E:
00008C30 4E75                       		rts	
00008C32                            ; End of function SlopeObject2
00008C32                            
00008C32                            ; ===========================================================================
00008C32                            ; ---------------------------------------------------------------------------
00008C32                            ; Collision data for GHZ collapsing ledge
00008C32                            ; ---------------------------------------------------------------------------
00008C32                            Obj1A_SlopeData:
00008C32                            		incbin	misc\ghzledge.bin
00008C62                            		even
00008C62                            
00008C62                            ; ---------------------------------------------------------------------------
00008C62                            ; Sprite mappings - GHZ	collapsing ledge
00008C62                            ; ---------------------------------------------------------------------------
00008C62                            Map_obj1A:
00008C62                            	include "_maps\obj1A.asm"
00008C62                            ; ---------------------------------------------------------------------------
00008C62                            ; Sprite mappings - GHZ	collapsing ledge
00008C62                            ; ---------------------------------------------------------------------------
00008C62 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C66 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C6A 10                         byte_85A8:	dc.b $10
00008C6B C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C70 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C75 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C7A E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C7F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C84 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C89 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C8E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C93 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C98 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C9D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CA2 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CA7 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CAC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CB1 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CB6 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CBB 10                         byte_85F9:	dc.b $10
00008CBC C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CC1 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CC6 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CCB E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CD0 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CD5 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CDA F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CDF F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CE4 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CE9 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CEE 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CF3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CF8 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CFD 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D02 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D07 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D0C 19                         byte_864A:	dc.b $19
00008D0D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D12 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D17 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D1C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D21 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D26 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D2B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D30 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D35 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D3A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D3F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D44 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D49 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D4E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D53 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D58 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D5D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D62 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D67 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D6C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D71 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D76 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D7B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D80 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D85 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D8A 19                         byte_86C8:	dc.b $19
00008D8B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D90 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D95 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D9A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D9F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DA4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DA9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DAE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DB3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DB8 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DBD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DC2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DC7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DCC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DD1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DD6 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DDB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DE0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DE5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DEA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DEF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DF4 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DF9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DFE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E03 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E08                            		even
00008E08                            		even
00008E08                            
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            Map_obj53:
00008E08                            	include "_maps\obj53.asm"
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E08                            ; ---------------------------------------------------------------------------
00008E08 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E0C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E10 04                         byte_874E:	dc.b 4
00008E11 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E16 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E1B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E20 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E25 08                         byte_8763:	dc.b 8
00008E26 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E2B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E30 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E35 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E3A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E3F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E44 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E49 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E4E 04                         byte_878C:	dc.b 4
00008E4F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E54 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E59 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E5E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E63 08                         byte_87A1:	dc.b 8
00008E64 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E69 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E6E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E73 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E78 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E7D 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E82 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E87 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E8C                            		even
00008E8C                            		even
00008E8C                            
00008E8C                            ; ===========================================================================
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            
00008E8C                            Obj1C:					; XREF: Obj_Index
00008E8C 7000                       		moveq	#0,d0
00008E8E 1028 0024                  		move.b	$24(a0),d0
00008E92 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E96 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E9A                            ; ===========================================================================
00008E9A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E9C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E9E                            ; ===========================================================================
00008E9E                            
00008E9E                            Obj1C_Main:				; XREF: Obj1C_Index
00008E9E 5428 0024                  		addq.b	#2,$24(a0)
00008EA2 7000                       		moveq	#0,d0
00008EA4 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008EA8 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008EAC 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008EB0 2159 0004                  		move.l	(a1)+,4(a0)
00008EB4 3159 0002                  		move.w	(a1)+,2(a0)
00008EB8 0028 0004 0001             		ori.b	#4,1(a0)
00008EBE 1159 001A                  		move.b	(a1)+,$1A(a0)
00008EC2 1159 0019                  		move.b	(a1)+,$19(a0)
00008EC6 1159 0018                  		move.b	(a1)+,$18(a0)
00008ECA 1159 0020                  		move.b	(a1)+,$20(a0)
00008ECE                            
00008ECE                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008ECE 3028 0008                  		move.w	8(a0),d0
00008ED2 0240 FF80                  		andi.w	#$FF80,d0
00008ED6 3238 F700                  		move.w	($FFFFF700).w,d1
00008EDA 0441 0080                  		subi.w	#$80,d1
00008EDE 0241 FF80                  		andi.w	#$FF80,d1
00008EE2 9041                       		sub.w	d1,d0
00008EE4 0C40 0280                  		cmpi.w	#$280,d0
00008EE8 6200 0000                  		bhi.w	DeleteObject
00008EEC 6000 0000                  		bra.w	DisplaySprite
00008EF0                            ; ===========================================================================
00008EF0                            ; ---------------------------------------------------------------------------
00008EF0                            ; Variables for	object $1C are stored in an array
00008EF0                            ; ---------------------------------------------------------------------------
00008EF0 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EF4 44D8                       		dc.w $44D8		; VRAM setting
00008EF6 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EFA 0000 0000                  		dc.l Map_obj1C
00008EFE 44D8                       		dc.w $44D8
00008F00 0008 0200                  		dc.b 0,	8, 2, 0
00008F04 0000 0000                  		dc.l Map_obj1C
00008F08 44D8                       		dc.w $44D8
00008F0A 0008 0200                  		dc.b 0,	8, 2, 0
00008F0E 0000 7F70                  		dc.l Map_obj11
00008F12 438E                       		dc.w $438E
00008F14 0110 0100                  		dc.b 1,	$10, 1,	0
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            ; Sprite mappings - SLZ	lava thrower
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            Map_obj1C:
00008F18                            	include "_maps\obj1C.asm"
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            ; Sprite mappings - SLZ	lava thrower
00008F18                            ; ---------------------------------------------------------------------------
00008F18 0000                       		dc.w byte_8858-Map_obj1C
00008F1A 01                         byte_8858:	dc.b 1
00008F1B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F20                            		even
00008F20                            		even
00008F20                            
00008F20                            ; ===========================================================================
00008F20                            ; ---------------------------------------------------------------------------
00008F20                            ; Object 1D - switch that activates when Sonic touches it
00008F20                            ; (this	is not used anywhere in	the game)
00008F20                            ; ---------------------------------------------------------------------------
00008F20                            
00008F20                            Obj1D:					; XREF: Obj_Index
00008F20 7000                       		moveq	#0,d0
00008F22 1028 0024                  		move.b	$24(a0),d0
00008F26 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F2A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F2E                            ; ===========================================================================
00008F2E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F30 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F32 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F34                            ; ===========================================================================
00008F34                            
00008F34                            Obj1D_Main:				; XREF: Obj1D_Index
00008F34 5428 0024                  		addq.b	#2,$24(a0)
00008F38 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F40 317C 4000 0002             		move.w	#$4000,2(a0)
00008F46 117C 0004 0001             		move.b	#4,1(a0)
00008F4C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F52 117C 0010 0019             		move.b	#$10,$19(a0)
00008F58 117C 0005 0018             		move.b	#5,$18(a0)
00008F5E                            
00008F5E                            Obj1D_Action:				; XREF: Obj1D_Index
00008F5E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F64 323C 0010                  		move.w	#$10,d1
00008F68 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F6C 6700                       		beq.s	Obj1D_ChkDel
00008F6E 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F72 7001                       		moveq	#1,d0
00008F74 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F78                            
00008F78                            Obj1D_ChkDel:
00008F78 6100 0000                  		bsr.w	DisplaySprite
00008F7C 3028 0008                  		move.w	8(a0),d0
00008F80 0240 FF80                  		andi.w	#$FF80,d0
00008F84 3238 F700                  		move.w	($FFFFF700).w,d1
00008F88 0441 0080                  		subi.w	#$80,d1
00008F8C 0241 FF80                  		andi.w	#$FF80,d1
00008F90 9041                       		sub.w	d1,d0
00008F92 0C40 0280                  		cmpi.w	#$280,d0
00008F96 6200 0000                  		bhi.w	Obj1D_Delete
00008F9A 4E75                       		rts	
00008F9C                            ; ===========================================================================
00008F9C                            
00008F9C                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F9C 6100 0000                  		bsr.w	DeleteObject
00008FA0 4E75                       		rts	
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            ; Subroutine to	check if Sonic touches the object
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            
00008FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA2                            
00008FA2                            
00008FA2                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008FA2 43F8 D000                  		lea	($FFFFD000).w,a1
00008FA6 3029 0008                  		move.w	8(a1),d0
00008FAA 9068 0008                  		sub.w	8(a0),d0
00008FAE D041                       		add.w	d1,d0
00008FB0 6B00                       		bmi.s	loc_8918
00008FB2 D241                       		add.w	d1,d1
00008FB4 B041                       		cmp.w	d1,d0
00008FB6 6400                       		bcc.s	loc_8918
00008FB8 3429 000C                  		move.w	$C(a1),d2
00008FBC 1229 0016                  		move.b	$16(a1),d1
00008FC0 4881                       		ext.w	d1
00008FC2 D242                       		add.w	d2,d1
00008FC4 3028 000C                  		move.w	$C(a0),d0
00008FC8 0440 0010                  		subi.w	#$10,d0
00008FCC 9041                       		sub.w	d1,d0
00008FCE 6200                       		bhi.s	loc_8918
00008FD0 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FD4 6500                       		bcs.s	loc_8918
00008FD6 70FF                       		moveq	#-1,d0
00008FD8 4E75                       		rts	
00008FDA                            ; ===========================================================================
00008FDA                            
00008FDA                            loc_8918:
00008FDA 7000                       		moveq	#0,d0
00008FDC 4E75                       		rts	
00008FDE                            ; End of function Obj1D_ChkTouch
00008FDE                            
00008FDE                            ; ===========================================================================
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE                            ; Sprite mappings - object 1D
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE                            Map_obj1D:
00008FDE                            	include "_maps\obj1D.asm"
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE                            ; Sprite mappings - object 1D
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE 0000                       		dc.w byte_891E-Map_obj1D
00008FE0 04                         byte_891E:	dc.b 4
00008FE1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FE6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FEB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FF0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FF6 00                         		even
00008FF6 00                         		even
00008FF6                            
00008FF6                            ; ===========================================================================
00008FF6                            ; ---------------------------------------------------------------------------
00008FF6                            ; Object 2A - doors (SBZ)
00008FF6                            ; ---------------------------------------------------------------------------
00008FF6                            
00008FF6                            Obj2A:					; XREF: Obj_Index
00008FF6 7000                       		moveq	#0,d0
00008FF8 1028 0024                  		move.b	$24(a0),d0
00008FFC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009000 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009004                            ; ===========================================================================
00009004 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009006 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009008                            ; ===========================================================================
00009008                            
00009008                            Obj2A_Main:				; XREF: Obj2A_Index
00009008 5428 0024                  		addq.b	#2,$24(a0)
0000900C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009014 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000901A 0028 0004 0001             		ori.b	#4,1(a0)
00009020 117C 0008 0019             		move.b	#8,$19(a0)
00009026 117C 0004 0018             		move.b	#4,$18(a0)
0000902C                            
0000902C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000902C 323C 0040                  		move.w	#$40,d1
00009030 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009034 3038 D008                  		move.w	($FFFFD008).w,d0
00009038 D041                       		add.w	d1,d0
0000903A B068 0008                  		cmp.w	8(a0),d0
0000903E 6500                       		bcs.s	Obj2A_Animate
00009040 9041                       		sub.w	d1,d0
00009042 9041                       		sub.w	d1,d0
00009044 B068 0008                  		cmp.w	8(a0),d0
00009048 6400                       		bcc.s	Obj2A_Animate
0000904A D041                       		add.w	d1,d0
0000904C B068 0008                  		cmp.w	8(a0),d0
00009050 6400                       		bcc.s	loc_899A
00009052 0828 0000 0022             		btst	#0,$22(a0)
00009058 6600                       		bne.s	Obj2A_Animate
0000905A 6000                       		bra.s	Obj2A_Open
0000905C                            ; ===========================================================================
0000905C                            
0000905C                            loc_899A:				; XREF: Obj2A_OpenShut
0000905C 0828 0000 0022             		btst	#0,$22(a0)
00009062 6700                       		beq.s	Obj2A_Animate
00009064                            
00009064                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009064 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000906A                            
0000906A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000906A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009070 6100 0000                  		bsr.w	AnimateSprite
00009074 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009078 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000907A 323C 0011                  		move.w	#$11,d1
0000907E 343C 0020                  		move.w	#$20,d2
00009082 3602                       		move.w	d2,d3
00009084 5243                       		addq.w	#1,d3
00009086 3828 0008                  		move.w	8(a0),d4
0000908A 6100 0000                  		bsr.w	SolidObject
0000908E                            
0000908E                            Obj2A_MarkAsUsed:
0000908E 6000 0000                  		bra.w	MarkObjGone
00009092                            ; ===========================================================================
00009092                            Ani_obj2A:
00009092                            	include "_anim\obj2A.asm"
00009092                            ; ---------------------------------------------------------------------------
00009092                            ; Animation script - doors (SBZ)
00009092                            ; ---------------------------------------------------------------------------
00009092 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009094 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009096 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000090A2 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000090AE                            		even
000090AE                            		even
000090AE                            
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            ; Sprite mappings - doors (SBZ)
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            Map_obj2A:
000090AE                            	include "_maps\obj2A.asm"
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            ; Sprite mappings - doors (SBZ)
000090AE                            ; ---------------------------------------------------------------------------
000090AE 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000090B2 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090B6 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090BA 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090BE 0000                       		dc.w byte_8A56-Map_obj2A
000090C0 02                         byte_89FE:	dc.b 2
000090C1 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090C6 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090CB 02                         byte_8A09:	dc.b 2
000090CC DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090D1 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090D6 02                         byte_8A14:	dc.b 2
000090D7 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090DC 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090E1 02                         byte_8A1F:	dc.b 2
000090E2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090E7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090EC 02                         byte_8A2A:	dc.b 2
000090ED D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090F2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090F7 02                         byte_8A35:	dc.b 2
000090F8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090FD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009102 02                         byte_8A40:	dc.b 2
00009103 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009108 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000910D 02                         byte_8A4B:	dc.b 2
0000910E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009113 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009118 02                         byte_8A56:	dc.b 2
00009119 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000911E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009124 00                         		even
00009124 00                         		even
00009124                            
00009124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009124                            
00009124                            
00009124                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009124 6100 0000                  		bsr.w	Obj44_SolidWall2
00009128 6700                       		beq.s	loc_8AA8
0000912A 6B00 0000                  		bmi.w	loc_8AC4
0000912E 4A40                       		tst.w	d0
00009130 6700 0000                  		beq.w	loc_8A92
00009134 6B00                       		bmi.s	loc_8A7C
00009136 4A69 0010                  		tst.w	$10(a1)
0000913A 6B00                       		bmi.s	loc_8A92
0000913C 6000                       		bra.s	loc_8A82
0000913E                            ; ===========================================================================
0000913E                            
0000913E                            loc_8A7C:
0000913E 4A69 0010                  		tst.w	$10(a1)
00009142 6A00                       		bpl.s	loc_8A92
00009144                            
00009144                            loc_8A82:
00009144 9169 0008                  		sub.w	d0,8(a1)
00009148 337C 0000 0014             		move.w	#0,$14(a1)
0000914E 337C 0000 0010             		move.w	#0,$10(a1)
00009154                            
00009154                            loc_8A92:
00009154 0829 0001 0022             		btst	#1,$22(a1)
0000915A 6600                       		bne.s	loc_8AB6
0000915C 08E9 0005 0022             		bset	#5,$22(a1)
00009162 08E8 0005 0022             		bset	#5,$22(a0)
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            loc_8AA8:
0000916A 0828 0005 0022             		btst	#5,$22(a0)
00009170 6700                       		beq.s	locret_8AC2
00009172 337C 0001 001C             		move.w	#1,$1C(a1)
00009178                            
00009178                            loc_8AB6:
00009178 08A8 0005 0022             		bclr	#5,$22(a0)
0000917E 08A9 0005 0022             		bclr	#5,$22(a1)
00009184                            
00009184                            locret_8AC2:
00009184 4E75                       		rts	
00009186                            ; ===========================================================================
00009186                            
00009186                            loc_8AC4:
00009186 4A69 0012                  		tst.w	$12(a1)
0000918A 6A00                       		bpl.s	locret_8AD8
0000918C 4A43                       		tst.w	d3
0000918E 6A00                       		bpl.s	locret_8AD8
00009190 9769 000C                  		sub.w	d3,$C(a1)
00009194 337C 0000 0012             		move.w	#0,$12(a1)
0000919A                            
0000919A                            locret_8AD8:
0000919A 4E75                       		rts	
0000919C                            ; End of function Obj44_SolidWall
0000919C                            
0000919C                            
0000919C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000919C                            
0000919C                            
0000919C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000919C 43F8 D000                  		lea	($FFFFD000).w,a1
000091A0 3029 0008                  		move.w	8(a1),d0
000091A4 9068 0008                  		sub.w	8(a0),d0
000091A8 D041                       		add.w	d1,d0
000091AA 6B00                       		bmi.s	loc_8B48
000091AC 3601                       		move.w	d1,d3
000091AE D643                       		add.w	d3,d3
000091B0 B043                       		cmp.w	d3,d0
000091B2 6200                       		bhi.s	loc_8B48
000091B4 1629 0016                  		move.b	$16(a1),d3
000091B8 4883                       		ext.w	d3
000091BA D443                       		add.w	d3,d2
000091BC 3629 000C                  		move.w	$C(a1),d3
000091C0 9668 000C                  		sub.w	$C(a0),d3
000091C4 D642                       		add.w	d2,d3
000091C6 6B00                       		bmi.s	loc_8B48
000091C8 3802                       		move.w	d2,d4
000091CA D844                       		add.w	d4,d4
000091CC B644                       		cmp.w	d4,d3
000091CE 6400                       		bcc.s	loc_8B48
000091D0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091D4 6B00                       		bmi.s	loc_8B48
000091D6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091DC 6400                       		bcc.s	loc_8B48
000091DE 4A78 FE08                  		tst.w	($FFFFFE08).w
000091E2 6600                       		bne.s	loc_8B48
000091E4 3A00                       		move.w	d0,d5
000091E6 B240                       		cmp.w	d0,d1
000091E8 6400                       		bcc.s	loc_8B30
000091EA D241                       		add.w	d1,d1
000091EC 9041                       		sub.w	d1,d0
000091EE 3A00                       		move.w	d0,d5
000091F0 4445                       		neg.w	d5
000091F2                            
000091F2                            loc_8B30:
000091F2 3203                       		move.w	d3,d1
000091F4 B443                       		cmp.w	d3,d2
000091F6 6400                       		bcc.s	loc_8B3C
000091F8 9644                       		sub.w	d4,d3
000091FA 3203                       		move.w	d3,d1
000091FC 4441                       		neg.w	d1
000091FE                            
000091FE                            loc_8B3C:
000091FE BA41                       		cmp.w	d1,d5
00009200 6200                       		bhi.s	loc_8B44
00009202 7801                       		moveq	#1,d4
00009204 4E75                       		rts	
00009206                            ; ===========================================================================
00009206                            
00009206                            loc_8B44:
00009206 78FF                       		moveq	#-1,d4
00009208 4E75                       		rts	
0000920A                            ; ===========================================================================
0000920A                            
0000920A                            loc_8B48:
0000920A 7800                       		moveq	#0,d4
0000920C 4E75                       		rts	
0000920E                            ; End of function Obj44_SolidWall2
0000920E                            
0000920E                            ; ===========================================================================
0000920E                            ; ---------------------------------------------------------------------------
0000920E                            ; Object 1E - Ball Hog enemy (SBZ)
0000920E                            ; ---------------------------------------------------------------------------
0000920E                            
0000920E                            Obj1E:					; XREF: Obj_Index
0000920E 7000                       		moveq	#0,d0
00009210 1028 0024                  		move.b	$24(a0),d0
00009214 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009218 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000921C                            ; ===========================================================================
0000921C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000921E 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009220                            ; ===========================================================================
00009220                            
00009220                            Obj1E_Main:				; XREF: Obj1E_Index
00009220 117C 0013 0016             		move.b	#$13,$16(a0)
00009226 117C 0008 0017             		move.b	#8,$17(a0)
0000922C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009234 317C 2302 0002             		move.w	#$2302,2(a0)
0000923A 117C 0004 0001             		move.b	#4,1(a0)
00009240 117C 0004 0018             		move.b	#4,$18(a0)
00009246 117C 0005 0020             		move.b	#5,$20(a0)
0000924C 117C 000C 0019             		move.b	#$C,$19(a0)
00009252 6100 0000                  		bsr.w	ObjectFall
00009256 4EB9 0000 0000             		jsr	ObjHitFloor
0000925C 4A41                       		tst.w	d1
0000925E 6A00                       		bpl.s	locret_8BAC
00009260 D368 000C                  		add.w	d1,$C(a0)
00009264 317C 0000 0012             		move.w	#0,$12(a0)
0000926A 5428 0024                  		addq.b	#2,$24(a0)
0000926E                            
0000926E                            locret_8BAC:
0000926E 4E75                       		rts	
00009270                            ; ===========================================================================
00009270                            
00009270                            Obj1E_Action:				; XREF: Obj1E_Index
00009270 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009276 6100 0000                  		bsr.w	AnimateSprite
0000927A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009280 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009282 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009286 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009288 6000                       		bra.s	Obj1E_MarkAsGone
0000928A                            ; ===========================================================================
0000928A                            
0000928A                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000928A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000928E                            
0000928E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000928E 6000 0000                  		bra.w	MarkObjGone
00009292                            ; ===========================================================================
00009292                            
00009292                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009292 117C 0001 0032             		move.b	#1,$32(a0)
00009298 6100 0000                  		bsr.w	SingleObjLoad
0000929C 6600                       		bne.s	loc_8C1A
0000929E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000092A2 3368 0008 0008             		move.w	8(a0),8(a1)
000092A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092AE 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000092B4 337C 0000 0012             		move.w	#0,$12(a1)
000092BA 70FC                       		moveq	#-4,d0
000092BC 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092C2 6700                       		beq.s	loc_8C0A	; if not, branch
000092C4 4440                       		neg.w	d0
000092C6 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092CA                            
000092CA                            loc_8C0A:
000092CA D169 0008                  		add.w	d0,8(a1)
000092CE 0669 000C 000C             		addi.w	#$C,$C(a1)
000092D4 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000092DA                            
000092DA                            loc_8C1A:
000092DA 60B2                       		bra.s	Obj1E_MarkAsGone
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            
000092DC                            Obj20:					; XREF: Obj_Index
000092DC 7000                       		moveq	#0,d0
000092DE 1028 0024                  		move.b	$24(a0),d0
000092E2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092E6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092EA                            ; ===========================================================================
000092EA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092EC 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092EE                            ; ===========================================================================
000092EE                            
000092EE                            Obj20_Main:				; XREF: Obj20_Index
000092EE 5428 0024                  		addq.b	#2,$24(a0)
000092F2 117C 0007 0016             		move.b	#7,$16(a0)
000092F8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009300 317C 2302 0002             		move.w	#$2302,2(a0)
00009306 117C 0004 0001             		move.b	#4,1(a0)
0000930C 117C 0003 0018             		move.b	#3,$18(a0)
00009312 117C 0087 0020             		move.b	#$87,$20(a0)
00009318 117C 0008 0019             		move.b	#8,$19(a0)
0000931E 7000                       		moveq	#0,d0
00009320 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009324 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009328 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000932C 117C 0004 001A             		move.b	#4,$1A(a0)
00009332                            
00009332                            Obj20_Bounce:				; XREF: Obj20_Index
00009332 4EB9 0000 0000             		jsr	ObjectFall
00009338 4A68 0012                  		tst.w	$12(a0)
0000933C 6B00                       		bmi.s	Obj20_ChkExplode
0000933E 4EB9 0000 0000             		jsr	ObjHitFloor
00009344 4A41                       		tst.w	d1
00009346 6A00                       		bpl.s	Obj20_ChkExplode
00009348 D368 000C                  		add.w	d1,$C(a0)
0000934C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009352 4A03                       		tst.b	d3
00009354 6700                       		beq.s	Obj20_ChkExplode
00009356 6B00                       		bmi.s	loc_8CA4
00009358 4A68 0010                  		tst.w	$10(a0)
0000935C 6A00                       		bpl.s	Obj20_ChkExplode
0000935E 4468 0010                  		neg.w	$10(a0)
00009362 6000                       		bra.s	Obj20_ChkExplode
00009364                            ; ===========================================================================
00009364                            
00009364                            loc_8CA4:				; XREF: Obj20_Bounce
00009364 4A68 0010                  		tst.w	$10(a0)
00009368 6B00                       		bmi.s	Obj20_ChkExplode
0000936A 4468 0010                  		neg.w	$10(a0)
0000936E                            
0000936E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000936E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009372 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009374 10BC 0024                  		move.b	#$24,0(a0)
00009378 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000937C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009382 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009386                            ; ===========================================================================
00009386                            
00009386                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009386 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000938A 6A00                       		bpl.s	Obj20_Display
0000938C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009392 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009398                            
00009398                            Obj20_Display:
00009398 6100 0000                  		bsr.w	DisplaySprite
0000939C 3038 F72E                  		move.w	($FFFFF72E).w,d0
000093A0 0640 00E0                  		addi.w	#$E0,d0
000093A4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000093A8 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000093AC 4E75                       		rts	
000093AE                            ; ===========================================================================
000093AE                            ; ---------------------------------------------------------------------------
000093AE                            ; Object 24 - explosion	from a destroyed monitor
000093AE                            ; ---------------------------------------------------------------------------
000093AE                            
000093AE                            Obj24:					; XREF: Obj_Index
000093AE 7000                       		moveq	#0,d0
000093B0 1028 0024                  		move.b	$24(a0),d0
000093B4 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093B8 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093BC                            ; ===========================================================================
000093BC 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093BE 0000                       		dc.w Obj24_Animate-Obj24_Index
000093C0                            ; ===========================================================================
000093C0                            
000093C0                            Obj24_Main:				; XREF: Obj24_Index
000093C0 5428 0024                  		addq.b	#2,$24(a0)
000093C4 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093CC 317C 041C 0002             		move.w	#$41C,2(a0)
000093D2 117C 0004 0001             		move.b	#4,1(a0)
000093D8 117C 0001 0018             		move.b	#1,$18(a0)
000093DE 117C 0000 0020             		move.b	#0,$20(a0)
000093E4 117C 000C 0019             		move.b	#$C,$19(a0)
000093EA 117C 0009 001E             		move.b	#9,$1E(a0)
000093F0 117C 0000 001A             		move.b	#0,$1A(a0)
000093F6 303C 00A5                  		move.w	#$A5,d0
000093FA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
00009400                            
00009400                            Obj24_Animate:				; XREF: Obj24_Index
00009400 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009404 6A00                       		bpl.s	Obj24_Display
00009406 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000940C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009410 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009416 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000941A                            
0000941A                            Obj24_Display:
0000941A 6000 0000                  		bra.w	DisplaySprite
0000941E                            ; ===========================================================================
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            ; Object 27 - explosion	from a destroyed enemy
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            
0000941E                            Obj27:					; XREF: Obj_Index
0000941E 7000                       		moveq	#0,d0
00009420 1028 0024                  		move.b	$24(a0),d0
00009424 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009428 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000942C                            ; ===========================================================================
0000942C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000942E 0000                       		dc.w Obj27_Main-Obj27_Index
00009430 0000                       		dc.w Obj27_Animate-Obj27_Index
00009432                            ; ===========================================================================
00009432                            
00009432                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009432 5428 0024                  		addq.b	#2,$24(a0)
00009436 6100 0000                  		bsr.w	SingleObjLoad
0000943A 6600                       		bne.s	Obj27_Main
0000943C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009440 3368 0008 0008             		move.w	8(a0),8(a1)
00009446 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000944C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009452                            
00009452                            Obj27_Main:				; XREF: Obj27_Index
00009452 5428 0024                  		addq.b	#2,$24(a0)
00009456 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000945E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009464 117C 0004 0001             		move.b	#4,1(a0)
0000946A 117C 0001 0018             		move.b	#1,$18(a0)
00009470 117C 0000 0020             		move.b	#0,$20(a0)
00009476 117C 000C 0019             		move.b	#$C,$19(a0)
0000947C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000947C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009482 117C 0000 001A             		move.b	#0,$1A(a0)
00009488 303C 00C1                  		move.w	#$C1,d0
0000948C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009492                            
00009492 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009498 1028 0028                  		move.b	$28(a0),d0
0000949C 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000094A2 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000094A8                            
000094A8                            Obj27_Animate:				; XREF: Obj27_Index
000094A8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094AC 6A00                       		bpl.s	Obj27_Display
000094AE                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094AE 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094B4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094B8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094BE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094C2                            
000094C2                            Obj27_Display:
000094C2 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094C8 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094CE 6000 0000                  		bra.w	DisplaySprite
000094D2                            ; ===========================================================================
000094D2                            ; ---------------------------------------------------------------------------
000094D2                            Obj27_ExplosionXYSpd:
000094D2                            		; dc.w	-$350, -$300	; Left
000094D2                            		; dc.w	-$200, -$450	; Near middle (left)
000094D2                            		; dc.w	0, -$500	; Middle
000094D2                            		; dc.w	$200, -$450	; Near middle (right)
000094D2                            		; dc.w	$350, -$300	; Right
000094D2                            
000094D2 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094D6 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000094DA 0000 FA00                  		dc.w	0, -$600	; Middle
000094DE 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094E2 0150 FC00                  		dc.w	$150, -$400	; Right
000094E6                            
000094E6 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009500                            ; ---------------------------------------------------------------------------
00009500                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009500                            ; ---------------------------------------------------------------------------
00009500                            
00009500                            Obj3F:					; XREF: Obj_Index
00009500 7000                       		moveq	#0,d0
00009502 1028 0024                  		move.b	$24(a0),d0
00009506 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000950A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000950E                            ; ===========================================================================
0000950E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009510 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009512                            ; ===========================================================================
00009512                            
00009512                            Obj3F_Main:				; XREF: Obj3F_Index
00009512 5428 0024                  		addq.b	#2,$24(a0)
00009516 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000951E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009524 117C 0004 0001             		move.b	#4,1(a0)
0000952A 117C 0001 0018             		move.b	#1,$18(a0)
00009530 117C 0000 0020             		move.b	#0,$20(a0)
00009536 117C 000C 0019             		move.b	#$C,$19(a0)
0000953C 117C 0007 001E             		move.b	#7,$1E(a0)
00009542 117C 0000 001A             		move.b	#0,$1A(a0)
00009548 303C 00C4                  		move.w	#$C4,d0
0000954C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009552                            ; ===========================================================================
00009552                            Ani_obj1E:
00009552                            	include "_anim\obj1E.asm"
00009552                            ; ---------------------------------------------------------------------------
00009552                            ; Animation script - doors (SBZ)
00009552                            ; ---------------------------------------------------------------------------
00009552 0000                       		dc.w byte_8E4A-Ani_obj1E
00009554 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000956C 00                         		even
0000956C 00                         		even
0000956C                            
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            Map_obj1E:
0000956C                            	include "_maps\obj1E.asm"
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000956C                            ; ---------------------------------------------------------------------------
0000956C 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009570 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009574 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009578 02                         byte_8E6E:	dc.b 2
00009579 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000957E FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009583 02                         byte_8E79:	dc.b 2
00009584 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009589 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000958E 02                         byte_8E84:	dc.b 2
0000958F F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009594 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009599 02                         byte_8E8F:	dc.b 2
0000959A E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000959F F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000095A4 01                         byte_8E9A:	dc.b 1
000095A5 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000095AA 01                         byte_8EA0:	dc.b 1
000095AB F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000095B0                            		even
000095B0                            		even
000095B0                            
000095B0                            ; ---------------------------------------------------------------------------
000095B0                            ; Sprite mappings - explosion
000095B0                            ; ---------------------------------------------------------------------------
000095B0                            Map_obj24:
000095B0                            	include "_maps\obj24.asm"
000095B0                            ; ---------------------------------------------------------------------------
000095B0                            ; Sprite mappings - explosion
000095B0                            ; ---------------------------------------------------------------------------
000095B0 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095B4 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095B8 01                         byte_8EAE:	dc.b 1
000095B9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095BE 01                         byte_8EB4:	dc.b 1
000095BF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095C4 01                         byte_8EBA:	dc.b 1
000095C5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095CA 01                         byte_8EC0:	dc.b 1
000095CB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000095D0                            		even
000095D0                            		even
000095D0                            
000095D0                            ; ---------------------------------------------------------------------------
000095D0                            ; Sprite mappings - explosion
000095D0                            ; ---------------------------------------------------------------------------
000095D0 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000095D4 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095D8 0000                       		dc.w byte_8EF7-Map_obj27
000095DA 01                         byte_8ED0:	dc.b 1
000095DB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095E0 01                         byte_8ED6:	dc.b 1
000095E1 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095E6 01                         byte_8EDC:	dc.b 1
000095E7 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095EC 04                         byte_8EE2:	dc.b 4
000095ED EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000095F2 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000095F7 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000095FC FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009601 04                         byte_8EF7:	dc.b 4
00009602 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009607 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000960C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009611 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009616                            		even
00009616                            ; ---------------------------------------------------------------------------
00009616                            ; Sprite mappings - explosion from when	a boss is destroyed
00009616                            ; ---------------------------------------------------------------------------
00009616 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009618 0000                       		dc.w byte_8F16-Map_obj3F
0000961A 0000                       		dc.w byte_8F1C-Map_obj3F
0000961C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000961E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009620 01                         byte_8F16:	dc.b 1
00009621 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009626 01                         byte_8F1C:	dc.b 1
00009627 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000962C                            		even
0000962C                            ; ===========================================================================
0000962C                            ; ---------------------------------------------------------------------------
0000962C                            ; Object 28 - animals
0000962C                            ; ---------------------------------------------------------------------------
0000962C                            
0000962C                            Obj28:					; XREF: Obj_Index
0000962C 7000                       		moveq	#0,d0
0000962E 1028 0024                  		move.b	$24(a0),d0
00009632 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009636 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000963A                            ; ===========================================================================
0000963A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000963E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009642 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009646 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000964A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000964E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009652 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009656 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000965A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000965E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009662 0000                       		dc.w loc_92D6-Obj28_Index
00009664                            
00009664 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009670                            
00009670 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009674 0000 0000                  		dc.l Map_obj28
00009678 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000967C 0000 0000                  		dc.l Map_obj28a		; mappings address
00009680 FE80 FD00                  		dc.w $FE80, $FD00
00009684 0000 0000                  		dc.l Map_obj28
00009688 FEC0 FE80                  		dc.w $FEC0, $FE80
0000968C 0000 0000                  		dc.l Map_obj28a
00009690 FE40 FD00                  		dc.w $FE40, $FD00
00009694 0000 0000                  		dc.l Map_obj28b
00009698 FD00 FC00                  		dc.w $FD00, $FC00
0000969C 0000 0000                  		dc.l Map_obj28a
000096A0 FD80 FC80                  		dc.w $FD80, $FC80
000096A4 0000 0000                  		dc.l Map_obj28b
000096A8                            
000096A8 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096B8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096C8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000096D4                            
000096D4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096E8 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000096FC 0000 0000                  		dc.l Map_obj28b
00009700                            
00009700 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009712 0565 05B3                  		dc.w $565, $5B3
00009716                            ; ===========================================================================
00009716                            
00009716                            Obj28_Ending:				; XREF: Obj28_Index
00009716 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000971A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000971E 7000                       		moveq	#0,d0
00009720 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009724 D040                       		add.w	d0,d0		; multiply d0 by 2
00009726 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000972A 0440 0014                  		subi.w	#$14,d0
0000972E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009734 D040                       		add.w	d0,d0
00009736 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000973C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009740 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009746 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000974C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009752 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009758 117C 000C 0016             		move.b	#$C,$16(a0)
0000975E 117C 0004 0001             		move.b	#4,1(a0)
00009764 08E8 0000 0001             		bset	#0,1(a0)
0000976A 117C 0006 0018             		move.b	#6,$18(a0)
00009770 117C 0008 0019             		move.b	#8,$19(a0)
00009776 117C 0007 001E             		move.b	#7,$1E(a0)
0000977C 6000 0000                  		bra.w	DisplaySprite
00009780                            ; ===========================================================================
00009780                            
00009780                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009780 5428 0024                  		addq.b	#2,$24(a0)
00009784 6100 9540                  		bsr.w	RandomNumber
00009788 0240 0001                  		andi.w	#1,d0
0000978C 7200                       		moveq	#0,d1
0000978E 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009792 D241                       		add.w	d1,d1
00009794 D240                       		add.w	d0,d1
00009796 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000979A 1031 1000                  		move.b	(a1,d1.w),d0
0000979E 1140 0030                  		move.b	d0,$30(a0)
000097A2 E748                       		lsl.w	#3,d0
000097A4 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097A8 D2C0                       		adda.w	d0,a1
000097AA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097AE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097B2 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097B6 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097BC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097C2 6700                       		beq.s	loc_90C0	; if yes, branch
000097C4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097CA                            
000097CA                            loc_90C0:
000097CA 117C 000C 0016             		move.b	#$C,$16(a0)
000097D0 117C 0004 0001             		move.b	#4,1(a0)
000097D6 08E8 0000 0001             		bset	#0,1(a0)
000097DC 117C 0006 0018             		move.b	#6,$18(a0)
000097E2 117C 0008 0019             		move.b	#8,$19(a0)
000097E8 117C 0007 001E             		move.b	#7,$1E(a0)
000097EE 117C 0002 001A             		move.b	#2,$1A(a0)
000097F4 317C FC00 0012             		move.w	#-$400,$12(a0)
000097FA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097FE 6600                       		bne.s	loc_911C
00009800 6100 0000                  		bsr.w	SingleObjLoad
00009804 6600                       		bne.s	Obj28_Display
00009806 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000980A 3368 0008 0008             		move.w	8(a0),8(a1)
00009810 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009816 3028 003E                  		move.w	$3E(a0),d0
0000981A E248                       		lsr.w	#1,d0
0000981C 1340 001A                  		move.b	d0,$1A(a1)
00009820                            
00009820                            Obj28_Display:
00009820 6000 0000                  		bra.w	DisplaySprite
00009824                            ; ===========================================================================
00009824                            
00009824                            loc_911C:
00009824 117C 0012 0024             		move.b	#$12,$24(a0)
0000982A 4268 0010                  		clr.w	$10(a0)
0000982E 6000 0000                  		bra.w	DisplaySprite
00009832                            ; ===========================================================================
00009832                            
00009832                            loc_912A:				; XREF: Obj28_Index
00009832 4A28 0001                  		tst.b	1(a0)
00009836 6A00 0000                  		bpl.w	DeleteObject
0000983A 6100 0000                  		bsr.w	ObjectFall
0000983E 4A68 0012                  		tst.w	$12(a0)
00009842 6B00                       		bmi.s	loc_9180
00009844 4EB9 0000 0000             		jsr	ObjHitFloor
0000984A 4A41                       		tst.w	d1
0000984C 6A00                       		bpl.s	loc_9180
0000984E D368 000C                  		add.w	d1,$C(a0)
00009852 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009858 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000985E 117C 0001 001A             		move.b	#1,$1A(a0)
00009864 1028 0030                  		move.b	$30(a0),d0
00009868 D000                       		add.b	d0,d0
0000986A 5800                       		addq.b	#4,d0
0000986C 1140 0024                  		move.b	d0,$24(a0)
00009870 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009874 6700                       		beq.s	loc_9180
00009876 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000987C 6700                       		beq.s	loc_9180
0000987E 4468 0010                  		neg.w	$10(a0)
00009882 0868 0000 0001             		bchg	#0,1(a0)
00009888                            
00009888                            loc_9180:
00009888 6000 0000                  		bra.w	DisplaySprite
0000988C                            ; ===========================================================================
0000988C                            
0000988C                            loc_9184:				; XREF: Obj28_Index
0000988C 6100 0000                  		bsr.w	ObjectFall
00009890 117C 0001 001A             		move.b	#1,$1A(a0)
00009896 4A68 0012                  		tst.w	$12(a0)
0000989A 6B00                       		bmi.s	loc_91AE
0000989C 117C 0000 001A             		move.b	#0,$1A(a0)
000098A2 4EB9 0000 0000             		jsr	ObjHitFloor
000098A8 4A41                       		tst.w	d1
000098AA 6A00                       		bpl.s	loc_91AE
000098AC D368 000C                  		add.w	d1,$C(a0)
000098B0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098B6                            
000098B6                            loc_91AE:
000098B6 4A28 0028                  		tst.b	$28(a0)
000098BA 6600                       		bne.s	loc_9224
000098BC 4A28 0001                  		tst.b	1(a0)
000098C0 6A00 0000                  		bpl.w	DeleteObject
000098C4 6000 0000                  		bra.w	DisplaySprite
000098C8                            ; ===========================================================================
000098C8                            
000098C8                            loc_91C0:				; XREF: Obj28_Index
000098C8 6100 0000                  		bsr.w	SpeedToPos
000098CC 0668 0018 0012             		addi.w	#$18,$12(a0)
000098D2 4A68 0012                  		tst.w	$12(a0)
000098D6 6B00                       		bmi.s	loc_91FC
000098D8 4EB9 0000 0000             		jsr	ObjHitFloor
000098DE 4A41                       		tst.w	d1
000098E0 6A00                       		bpl.s	loc_91FC
000098E2 D368 000C                  		add.w	d1,$C(a0)
000098E6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098EC 4A28 0028                  		tst.b	$28(a0)
000098F0 6700                       		beq.s	loc_91FC
000098F2 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000098F8 6700                       		beq.s	loc_91FC
000098FA 4468 0010                  		neg.w	$10(a0)
000098FE 0868 0000 0001             		bchg	#0,1(a0)
00009904                            
00009904                            loc_91FC:
00009904 5328 001E                  		subq.b	#1,$1E(a0)
00009908 6A00                       		bpl.s	loc_9212
0000990A 117C 0001 001E             		move.b	#1,$1E(a0)
00009910 5228 001A                  		addq.b	#1,$1A(a0)
00009914 0228 0001 001A             		andi.b	#1,$1A(a0)
0000991A                            
0000991A                            loc_9212:
0000991A 4A28 0028                  		tst.b	$28(a0)
0000991E 6600                       		bne.s	loc_9224
00009920 4A28 0001                  		tst.b	1(a0)
00009924 6A00 0000                  		bpl.w	DeleteObject
00009928 6000 0000                  		bra.w	DisplaySprite
0000992C                            ; ===========================================================================
0000992C                            
0000992C                            loc_9224:				; XREF: Obj28_Index
0000992C 3028 0008                  		move.w	8(a0),d0
00009930 9078 D008                  		sub.w	($FFFFD008).w,d0
00009934 6500                       		bcs.s	loc_923C
00009936 0440 0180                  		subi.w	#$180,d0
0000993A 6A00                       		bpl.s	loc_923C
0000993C 4A28 0001                  		tst.b	1(a0)
00009940 6A00 0000                  		bpl.w	DeleteObject
00009944                            
00009944                            loc_923C:
00009944 6000 0000                  		bra.w	DisplaySprite
00009948                            ; ===========================================================================
00009948                            
00009948                            loc_9240:				; XREF: Obj28_Index
00009948 4A28 0001                  		tst.b	1(a0)
0000994C 6A00 0000                  		bpl.w	DeleteObject
00009950 5368 0036                  		subq.w	#1,$36(a0)
00009954 6600 0000                  		bne.w	loc_925C
00009958 117C 0002 0024             		move.b	#2,$24(a0)
0000995E 117C 0003 0018             		move.b	#3,$18(a0)
00009964                            
00009964                            loc_925C:
00009964 6000 0000                  		bra.w	DisplaySprite
00009968                            ; ===========================================================================
00009968                            
00009968                            loc_9260:				; XREF: Obj28_Index
00009968 6100 0000                  		bsr.w	sub_9404
0000996C 6400                       		bcc.s	loc_927C
0000996E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009974 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000997A 117C 000E 0024             		move.b	#$E,$24(a0)
00009980 6000 FF46                  		bra.w	loc_91C0
00009984                            ; ===========================================================================
00009984                            
00009984                            loc_927C:
00009984 6000 FFA6                  		bra.w	loc_9224
00009988                            ; ===========================================================================
00009988                            
00009988                            loc_9280:				; XREF: Obj28_Index
00009988 6100 0000                  		bsr.w	sub_9404
0000998C 6A00                       		bpl.s	loc_92B6
0000998E 4268 0010                  		clr.w	$10(a0)
00009992 4268 0032                  		clr.w	$32(a0)
00009996 6100 0000                  		bsr.w	SpeedToPos
0000999A 0668 0018 0012             		addi.w	#$18,$12(a0)
000099A0 6100 0000                  		bsr.w	loc_93C4
000099A4 6100 0000                  		bsr.w	loc_93EC
000099A8 5328 001E                  		subq.b	#1,$1E(a0)
000099AC 6A00                       		bpl.s	loc_92B6
000099AE 117C 0001 001E             		move.b	#1,$1E(a0)
000099B4 5228 001A                  		addq.b	#1,$1A(a0)
000099B8 0228 0001 001A             		andi.b	#1,$1A(a0)
000099BE                            
000099BE                            loc_92B6:
000099BE 6000 FF6C                  		bra.w	loc_9224
000099C2                            ; ===========================================================================
000099C2                            
000099C2                            loc_92BA:				; XREF: Obj28_Index
000099C2 6100 0000                  		bsr.w	sub_9404
000099C6 6A00                       		bpl.s	loc_9310
000099C8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099CE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099D4 117C 0004 0024             		move.b	#4,$24(a0)
000099DA 6000 FEB0                  		bra.w	loc_9184
000099DE                            ; ===========================================================================
000099DE                            
000099DE                            loc_92D6:				; XREF: Obj28_Index
000099DE 6100 0000                  		bsr.w	ObjectFall
000099E2 117C 0001 001A             		move.b	#1,$1A(a0)
000099E8 4A68 0012                  		tst.w	$12(a0)
000099EC 6B00                       		bmi.s	loc_9310
000099EE 117C 0000 001A             		move.b	#0,$1A(a0)
000099F4 4EB9 0000 0000             		jsr	ObjHitFloor
000099FA 4A41                       		tst.w	d1
000099FC 6A00                       		bpl.s	loc_9310
000099FE 4628 0029                  		not.b	$29(a0)
00009A02 6600                       		bne.s	loc_9306
00009A04 4468 0010                  		neg.w	$10(a0)
00009A08 0868 0000 0001             		bchg	#0,1(a0)
00009A0E                            
00009A0E                            loc_9306:
00009A0E D368 000C                  		add.w	d1,$C(a0)
00009A12 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A18                            
00009A18                            loc_9310:
00009A18 6000 FF12                  		bra.w	loc_9224
00009A1C                            ; ===========================================================================
00009A1C                            
00009A1C                            loc_9314:				; XREF: Obj28_Index
00009A1C 6100 0000                  		bsr.w	sub_9404
00009A20 6A00                       		bpl.s	loc_932E
00009A22 4268 0010                  		clr.w	$10(a0)
00009A26 4268 0032                  		clr.w	$32(a0)
00009A2A 6100 0000                  		bsr.w	ObjectFall
00009A2E 6100 0000                  		bsr.w	loc_93C4
00009A32 6100 0000                  		bsr.w	loc_93EC
00009A36                            
00009A36                            loc_932E:
00009A36 6000 FEF4                  		bra.w	loc_9224
00009A3A                            ; ===========================================================================
00009A3A                            
00009A3A                            loc_9332:				; XREF: Obj28_Index
00009A3A 6100 0000                  		bsr.w	sub_9404
00009A3E 6A00                       		bpl.s	loc_936C
00009A40 6100 0000                  		bsr.w	ObjectFall
00009A44 117C 0001 001A             		move.b	#1,$1A(a0)
00009A4A 4A68 0012                  		tst.w	$12(a0)
00009A4E 6B00                       		bmi.s	loc_936C
00009A50 117C 0000 001A             		move.b	#0,$1A(a0)
00009A56 4EB9 0000 0000             		jsr	ObjHitFloor
00009A5C 4A41                       		tst.w	d1
00009A5E 6A00                       		bpl.s	loc_936C
00009A60 4468 0010                  		neg.w	$10(a0)
00009A64 0868 0000 0001             		bchg	#0,1(a0)
00009A6A D368 000C                  		add.w	d1,$C(a0)
00009A6E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A74                            
00009A74                            loc_936C:
00009A74 6000 FEB6                  		bra.w	loc_9224
00009A78                            ; ===========================================================================
00009A78                            
00009A78                            loc_9370:				; XREF: Obj28_Index
00009A78 6100 0000                  		bsr.w	sub_9404
00009A7C 6A00                       		bpl.s	loc_93C0
00009A7E 6100 0000                  		bsr.w	SpeedToPos
00009A82 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A88 4A68 0012                  		tst.w	$12(a0)
00009A8C 6B00                       		bmi.s	loc_93AA
00009A8E 4EB9 0000 0000             		jsr	ObjHitFloor
00009A94 4A41                       		tst.w	d1
00009A96 6A00                       		bpl.s	loc_93AA
00009A98 4628 0029                  		not.b	$29(a0)
00009A9C 6600                       		bne.s	loc_93A0
00009A9E 4468 0010                  		neg.w	$10(a0)
00009AA2 0868 0000 0001             		bchg	#0,1(a0)
00009AA8                            
00009AA8                            loc_93A0:
00009AA8 D368 000C                  		add.w	d1,$C(a0)
00009AAC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AB2                            
00009AB2                            loc_93AA:
00009AB2 5328 001E                  		subq.b	#1,$1E(a0)
00009AB6 6A00                       		bpl.s	loc_93C0
00009AB8 117C 0001 001E             		move.b	#1,$1E(a0)
00009ABE 5228 001A                  		addq.b	#1,$1A(a0)
00009AC2 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AC8                            
00009AC8                            loc_93C0:
00009AC8 6000 FE62                  		bra.w	loc_9224
00009ACC                            ; ===========================================================================
00009ACC                            
00009ACC                            loc_93C4:
00009ACC 117C 0001 001A             		move.b	#1,$1A(a0)
00009AD2 4A68 0012                  		tst.w	$12(a0)
00009AD6 6B00                       		bmi.s	locret_93EA
00009AD8 117C 0000 001A             		move.b	#0,$1A(a0)
00009ADE 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE4 4A41                       		tst.w	d1
00009AE6 6A00                       		bpl.s	locret_93EA
00009AE8 D368 000C                  		add.w	d1,$C(a0)
00009AEC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AF2                            
00009AF2                            locret_93EA:
00009AF2 4E75                       		rts	
00009AF4                            ; ===========================================================================
00009AF4                            
00009AF4                            loc_93EC:
00009AF4 08E8 0000 0001             		bset	#0,1(a0)
00009AFA 3028 0008                  		move.w	8(a0),d0
00009AFE 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B02 6400                       		bcc.s	locret_9402
00009B04 08A8 0000 0001             		bclr	#0,1(a0)
00009B0A                            
00009B0A                            locret_9402:
00009B0A 4E75                       		rts	
00009B0C                            
00009B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B0C                            
00009B0C                            
00009B0C                            sub_9404:
00009B0C 3038 D008                  		move.w	($FFFFD008).w,d0
00009B10 9068 0008                  		sub.w	8(a0),d0
00009B14 0440 00B8                  		subi.w	#$B8,d0
00009B18 4E75                       		rts	
00009B1A                            ; End of function sub_9404
00009B1A                            
00009B1A                            ; ===========================================================================
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            ; Object 29 - points that appear when you destroy something
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            
00009B1A                            Obj29:					; XREF: Obj_Index
00009B1A 7000                       		moveq	#0,d0
00009B1C 1028 0024                  		move.b	$24(a0),d0
00009B20 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B24 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B28 6000 0000                  		bra.w	DisplaySprite
00009B2C                            ; ===========================================================================
00009B2C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B2E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B30                            ; ===========================================================================
00009B30                            
00009B30                            Obj29_Main:				; XREF: Obj29_Index
00009B30 5428 0024                  		addq.b	#2,$24(a0)
00009B34 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B3C 317C 2797 0002             		move.w	#$2797,2(a0)
00009B42 117C 0004 0001             		move.b	#4,1(a0)
00009B48 117C 0001 0018             		move.b	#1,$18(a0)
00009B4E 117C 0008 0019             		move.b	#8,$19(a0)
00009B54 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B5A                            
00009B5A                            Obj29_Slower:				; XREF: Obj29_Index
00009B5A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B5E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B62 6100 0000                  		bsr.w	SpeedToPos
00009B66 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B6C 4E75                       		rts	
00009B6E                            ; ===========================================================================
00009B6E                            ; ---------------------------------------------------------------------------
00009B6E                            ; Sprite mappings - animals
00009B6E                            ; ---------------------------------------------------------------------------
00009B6E                            Map_obj28:
00009B6E                            	include "_maps\obj28.asm"
00009B6E                            ; ---------------------------------------------------------------------------
00009B6E                            ; Sprite mappings - animals
00009B6E                            ; ---------------------------------------------------------------------------
00009B6E 0000                       		dc.w byte_9472-Map_obj28
00009B70 0000                       		dc.w byte_9478-Map_obj28
00009B72 0000                       		dc.w byte_946C-Map_obj28
00009B74 01                         byte_946C:	dc.b 1
00009B75 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B7A 01                         byte_9472:	dc.b 1
00009B7B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B80 01                         byte_9478:	dc.b 1
00009B81 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B86                            		even
00009B86                            		even
00009B86                            
00009B86                            Map_obj28a:
00009B86                            	include "_maps\obj28a.asm"
00009B86                            ; ---------------------------------------------------------------------------
00009B86                            ; Sprite mappings - animals
00009B86                            ; ---------------------------------------------------------------------------
00009B86 0000                       		dc.w byte_948A-Map_obj28a
00009B88 0000                       		dc.w byte_9490-Map_obj28a
00009B8A 0000                       		dc.w byte_9484-Map_obj28a
00009B8C 01                         byte_9484:	dc.b 1
00009B8D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B92 01                         byte_948A:	dc.b 1
00009B93 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B98 01                         byte_9490:	dc.b 1
00009B99 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B9E                            		even
00009B9E                            		even
00009B9E                            
00009B9E                            Map_obj28b:
00009B9E                            	include "_maps\obj28b.asm"
00009B9E                            ; ---------------------------------------------------------------------------
00009B9E                            ; Sprite mappings - animals
00009B9E                            ; ---------------------------------------------------------------------------
00009B9E 0000                       		dc.w byte_94A2-Map_obj28b
00009BA0 0000                       		dc.w byte_94A8-Map_obj28b
00009BA2 0000                       		dc.w byte_949C-Map_obj28b
00009BA4 01                         byte_949C:	dc.b 1
00009BA5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BAA 01                         byte_94A2:	dc.b 1
00009BAB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BB0 01                         byte_94A8:	dc.b 1
00009BB1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BB6                            		even
00009BB6                            		even
00009BB6                            
00009BB6                            ; ---------------------------------------------------------------------------
00009BB6                            ; Sprite mappings - points that	appear when you	destroy	something
00009BB6                            ; ---------------------------------------------------------------------------
00009BB6                            Map_obj29:
00009BB6                            	include "_maps\obj29.asm"
00009BB6                            ; ---------------------------------------------------------------------------
00009BB6                            ; Sprite mappings - points that	appear when you	destroy	something
00009BB6                            ; ---------------------------------------------------------------------------
00009BB6 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BBA 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BBE 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BC2 0000                       		dc.w byte_94E5-Map_obj29
00009BC4 01                         byte_94BC:	dc.b 1
00009BC5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BCA 01                         byte_94C2:	dc.b 1
00009BCB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009BD0 01                         byte_94C8:	dc.b 1
00009BD1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BD6 01                         byte_94CE:	dc.b 1
00009BD7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BDC 01                         byte_94D4:	dc.b 1
00009BDD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BE2 02                         byte_94DA:	dc.b 2
00009BE3 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BE8 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009BED 02                         byte_94E5:	dc.b 2
00009BEE FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009BF3 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009BF8                            		even
00009BF8                            		even
00009BF8                            
00009BF8                            ; ===========================================================================
00009BF8                            ; ---------------------------------------------------------------------------
00009BF8                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009BF8                            ; ---------------------------------------------------------------------------
00009BF8                            
00009BF8                            Obj1F:					; XREF: Obj_Index
00009BF8 7000                       		moveq	#0,d0
00009BFA 1028 0024                  		move.b	$24(a0),d0
00009BFE 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C02 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C06                            ; ===========================================================================
00009C06 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C08 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C0A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C0C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C0E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C10                            ; ===========================================================================
00009C10                            
00009C10                            Obj1F_Main:				; XREF: Obj1F_Index
00009C10 117C 0010 0016             		move.b	#$10,$16(a0)
00009C16 117C 0008 0017             		move.b	#8,$17(a0)
00009C1C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C24 317C 0400 0002             		move.w	#$400,2(a0)
00009C2A 117C 0004 0001             		move.b	#4,1(a0)
00009C30 117C 0003 0018             		move.b	#3,$18(a0)
00009C36 117C 0006 0020             		move.b	#6,$20(a0)
00009C3C 117C 0015 0019             		move.b	#$15,$19(a0)
00009C42 6100 0000                  		bsr.w	ObjectFall
00009C46 4EB9 0000 0000             		jsr	ObjHitFloor
00009C4C 4A41                       		tst.w	d1
00009C4E 6A00                       		bpl.s	locret_955A
00009C50 D368 000C                  		add.w	d1,$C(a0)
00009C54 1143 0026                  		move.b	d3,$26(a0)
00009C58 317C 0000 0012             		move.w	#0,$12(a0)
00009C5E 5428 0024                  		addq.b	#2,$24(a0)
00009C62                            
00009C62                            locret_955A:
00009C62 4E75                       		rts	
00009C64                            ; ===========================================================================
00009C64                            
00009C64                            Obj1F_Action:				; XREF: Obj1F_Index
00009C64 7000                       		moveq	#0,d0
00009C66 1028 0025                  		move.b	$25(a0),d0
00009C6A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C6E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C72 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C78 6100 0000                  		bsr.w	AnimateSprite
00009C7C 6000 0000                  		bra.w	MarkObjGone
00009C80                            ; ===========================================================================
00009C80 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C82 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C84                            ; ===========================================================================
00009C84                            
00009C84                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C84 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C88 6A00                       		bpl.s	locret_95B6
00009C8A 4A28 0001                  		tst.b	1(a0)
00009C8E 6A00                       		bpl.s	Obj1F_Move
00009C90 0868 0001 0032             		bchg	#1,$32(a0)
00009C96 6600                       		bne.s	Obj1F_MakeFire
00009C98                            
00009C98                            Obj1F_Move:
00009C98 5428 0025                  		addq.b	#2,$25(a0)
00009C9C 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CA2 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CA8 6100 0000                  		bsr.w	Obj1F_SetAni
00009CAC 5600                       		addq.b	#3,d0
00009CAE 1140 001C                  		move.b	d0,$1C(a0)
00009CB2 0868 0000 0022             		bchg	#0,$22(a0)
00009CB8 6600                       		bne.s	locret_95B6
00009CBA 4468 0010                  		neg.w	$10(a0)		; change direction
00009CBE                            
00009CBE                            locret_95B6:
00009CBE 4E75                       		rts	
00009CC0                            ; ===========================================================================
00009CC0                            
00009CC0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CC0 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CC6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CCC 6100 0000                  		bsr.w	SingleObjLoad
00009CD0 6600                       		bne.s	Obj1F_MakeFire2
00009CD2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CD6 137C 0006 0024             		move.b	#6,$24(a1)
00009CDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009CE2 0469 0010 0008             		subi.w	#$10,8(a1)
00009CE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CEE 337C FF00 0010             		move.w	#-$100,$10(a1)
00009CF4                            
00009CF4                            Obj1F_MakeFire2:
00009CF4 6100 0000                  		bsr.w	SingleObjLoad
00009CF8 6600                       		bne.s	locret_9618
00009CFA 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009CFE 137C 0006 0024             		move.b	#6,$24(a1)
00009D04 3368 0008 0008             		move.w	8(a0),8(a1)
00009D0A 0669 0010 0008             		addi.w	#$10,8(a1)
00009D10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D16 337C 0100 0010             		move.w	#$100,$10(a1)
00009D1C                            
00009D1C                            locret_9618:
00009D1C 4E75                       		rts	
00009D1E                            ; ===========================================================================
00009D1E                            
00009D1E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D1E 5368 0030                  		subq.w	#1,$30(a0)
00009D22 6B00                       		bmi.s	loc_966E
00009D24 6100 0000                  		bsr.w	SpeedToPos
00009D28 0868 0000 0032             		bchg	#0,$32(a0)
00009D2E 6600                       		bne.s	loc_9654
00009D30 3628 0008                  		move.w	8(a0),d3
00009D34 0643 0010                  		addi.w	#$10,d3
00009D38 0828 0000 0022             		btst	#0,$22(a0)
00009D3E 6700                       		beq.s	loc_9640
00009D40 0443 0020                  		subi.w	#$20,d3
00009D44                            
00009D44                            loc_9640:
00009D44 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D4A 0C41 FFF8                  		cmpi.w	#-8,d1
00009D4E 6D00                       		blt.s	loc_966E
00009D50 0C41 000C                  		cmpi.w	#$C,d1
00009D54 6C00                       		bge.s	loc_966E
00009D56 4E75                       		rts	
00009D58                            ; ===========================================================================
00009D58                            
00009D58                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D58 4EB9 0000 0000             		jsr	ObjHitFloor
00009D5E D368 000C                  		add.w	d1,$C(a0)
00009D62 1143 0026                  		move.b	d3,$26(a0)
00009D66 6100 0000                  		bsr.w	Obj1F_SetAni
00009D6A 5600                       		addq.b	#3,d0
00009D6C 1140 001C                  		move.b	d0,$1C(a0)
00009D70 4E75                       		rts	
00009D72                            ; ===========================================================================
00009D72                            
00009D72                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D72 5528 0025                  		subq.b	#2,$25(a0)
00009D76 317C 003B 0030             		move.w	#59,$30(a0)
00009D7C 317C 0000 0010             		move.w	#0,$10(a0)
00009D82 6100 0000                  		bsr.w	Obj1F_SetAni
00009D86 1140 001C                  		move.b	d0,$1C(a0)
00009D8A 4E75                       		rts	
00009D8C                            ; ---------------------------------------------------------------------------
00009D8C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D8C                            ; ---------------------------------------------------------------------------
00009D8C                            
00009D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D8C                            
00009D8C                            
00009D8C                            Obj1F_SetAni:				; XREF: loc_966E
00009D8C 7000                       		moveq	#0,d0
00009D8E 1628 0026                  		move.b	$26(a0),d3
00009D92 6B00                       		bmi.s	loc_96A4
00009D94 0C03 0006                  		cmpi.b	#6,d3
00009D98 6500                       		bcs.s	locret_96A2
00009D9A 7001                       		moveq	#1,d0
00009D9C 0828 0000 0022             		btst	#0,$22(a0)
00009DA2 6600                       		bne.s	locret_96A2
00009DA4 7002                       		moveq	#2,d0
00009DA6                            
00009DA6                            locret_96A2:
00009DA6 4E75                       		rts	
00009DA8                            ; ===========================================================================
00009DA8                            
00009DA8                            loc_96A4:				; XREF: Obj1F_SetAni
00009DA8 0C03 00FA                  		cmpi.b	#-6,d3
00009DAC 6200                       		bhi.s	locret_96B6
00009DAE 7002                       		moveq	#2,d0
00009DB0 0828 0000 0022             		btst	#0,$22(a0)
00009DB6 6600                       		bne.s	locret_96B6
00009DB8 7001                       		moveq	#1,d0
00009DBA                            
00009DBA                            locret_96B6:
00009DBA 4E75                       		rts	
00009DBC                            ; End of function Obj1F_SetAni
00009DBC                            
00009DBC                            ; ===========================================================================
00009DBC                            
00009DBC                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DBC 6100 0000                  		bsr.w	DeleteObject
00009DC0 4E75                       		rts	
00009DC2                            ; ===========================================================================
00009DC2                            ; ---------------------------------------------------------------------------
00009DC2                            ; Sub-object - missile that the	Crabmeat throws
00009DC2                            ; ---------------------------------------------------------------------------
00009DC2                            
00009DC2                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DC2 5428 0024                  		addq.b	#2,$24(a0)
00009DC6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DCE 317C 0400 0002             		move.w	#$400,2(a0)
00009DD4 117C 0004 0001             		move.b	#4,1(a0)
00009DDA 117C 0003 0018             		move.b	#3,$18(a0)
00009DE0 117C 0087 0020             		move.b	#$87,$20(a0)
00009DE6 117C 0008 0019             		move.b	#8,$19(a0)
00009DEC 317C FC00 0012             		move.w	#-$400,$12(a0)
00009DF2 117C 0007 001C             		move.b	#7,$1C(a0)
00009DF8                            
00009DF8                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009DF8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009DFE 6100 0000                  		bsr.w	AnimateSprite
00009E02 6100 0000                  		bsr.w	ObjectFall
00009E06 6100 0000                  		bsr.w	DisplaySprite
00009E0A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E0E 0640 00E0                  		addi.w	#$E0,d0
00009E12 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E16 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E18 4E75                       		rts	
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Obj1F_Delete2:
00009E1A 6000 0000                  		bra.w	DeleteObject
00009E1E                            ; ===========================================================================
00009E1E                            Ani_obj1F:
00009E1E                            	include "_anim\obj1F.asm"
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            ; Animation script - Crabmeat enemy
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E24 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E2A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E2E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E32 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E36 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E3A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E40 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E46 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E4C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E50 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E54                            		even
00009E54                            		even
00009E54                            
00009E54                            ; ---------------------------------------------------------------------------
00009E54                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E54                            ; ---------------------------------------------------------------------------
00009E54                            Map_obj1F:
00009E54                            	include "_maps\obj1F.asm"
00009E54                            Map_1514:
00009E54 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E56 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E58 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E5A 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E5C 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E5E 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E60 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E62 03                         Map_1514_E: 	dc.b $3
00009E63 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E68 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E6D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E72 03                         Map_1514_1E: 	dc.b $3
00009E73 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E78 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E7D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E82 03                         Map_1514_2E: 	dc.b $3
00009E83 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E88 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E8D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E92 03                         Map_1514_3E: 	dc.b $3
00009E93 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E98 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E9D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EA2 03                         Map_1514_4E: 	dc.b $3
00009EA3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EA8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EAD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EB2 01                         Map_1514_5E: 	dc.b $1
00009EB3 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009EB8 01                         Map_1514_64: 	dc.b $1
00009EB9 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009EBE                            	even
00009EBE                            	even
00009EBE                            
00009EBE                            ; ===========================================================================
00009EBE                            ; ---------------------------------------------------------------------------
00009EBE                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009EBE                            ; ---------------------------------------------------------------------------
00009EBE                            
00009EBE                            Obj22:					; XREF: Obj_Index
00009EBE 7000                       		moveq	#0,d0
00009EC0 1028 0024                  		move.b	$24(a0),d0
00009EC4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009EC8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009ECC                            ; ===========================================================================
00009ECC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009ECE 0000                       		dc.w Obj22_Action-Obj22_Index
00009ED0 0000                       		dc.w Obj22_Delete-Obj22_Index
00009ED2                            ; ===========================================================================
00009ED2                            
00009ED2                            Obj22_Main:				; XREF: Obj22_Index
00009ED2 5428 0024                  		addq.b	#2,$24(a0)
00009ED6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EDE 317C 0444 0002             		move.w	#$444,2(a0)
00009EE4 117C 0004 0001             		move.b	#4,1(a0)
00009EEA 117C 0003 0018             		move.b	#3,$18(a0)
00009EF0 117C 0008 0020             		move.b	#8,$20(a0)
00009EF6 117C 0018 0019             		move.b	#$18,$19(a0)
00009EFC                            
00009EFC                            Obj22_Action:				; XREF: Obj22_Index
00009EFC 7000                       		moveq	#0,d0
00009EFE 1028 0025                  		move.b	$25(a0),d0
00009F02 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F06 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F0A 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F10 6100 0000                  		bsr.w	AnimateSprite
00009F14 6000 0000                  		bra.w	MarkObjGone
00009F18                            ; ===========================================================================
00009F18 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F1A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F1C                            ; ===========================================================================
00009F1C                            
00009F1C                            Obj22_Move:				; XREF: Obj22_Index2
00009F1C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F20 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F22 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F28 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F2A 5428 0025                  		addq.b	#2,$25(a0)
00009F2E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F34 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F3A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F40 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F46 6600                       		bne.s	locret_986C	; if not, branch
00009F48 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F4C                            
00009F4C                            locret_986C:
00009F4C 4E75                       		rts	
00009F4E                            ; ===========================================================================
00009F4E                            
00009F4E                            Obj22_Fire:				; XREF: Obj22_Move
00009F4E 6100 0000                  		bsr.w	SingleObjLoad
00009F52 6600                       		bne.s	locret_98D0
00009F54 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F58 3368 0008 0008             		move.w	8(a0),8(a1)
00009F5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F64 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F6A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F70 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F76 303C 0018                  		move.w	#$18,d0
00009F7A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F80 6600                       		bne.s	loc_98AA	; if not, branch
00009F82 4440                       		neg.w	d0
00009F84 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F88                            
00009F88                            loc_98AA:
00009F88 D169 0008                  		add.w	d0,8(a1)
00009F8C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F92 337C 000E 0032             		move.w	#$E,$32(a1)
00009F98 2348 003C                  		move.l	a0,$3C(a1)
00009F9C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009FA2 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FA8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FAE                            
00009FAE                            locret_98D0:
00009FAE 4E75                       		rts	
00009FB0                            ; ===========================================================================
00009FB0                            
00009FB0                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FB0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FB4 6B00                       		bmi.s	Obj22_ChgDir
00009FB6 6100 0000                  		bsr.w	SpeedToPos
00009FBA 4A28 0034                  		tst.b	$34(a0)
00009FBE 6600                       		bne.s	locret_992A
00009FC0 3038 D008                  		move.w	($FFFFD008).w,d0
00009FC4 9068 0008                  		sub.w	8(a0),d0
00009FC8 6A00                       		bpl.s	Obj22_SetNrSonic
00009FCA 4440                       		neg.w	d0
00009FCC                            
00009FCC                            Obj22_SetNrSonic:
00009FCC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009FD0 6400                       		bcc.s	locret_992A	; if not, branch
00009FD2 4A28 0001                  		tst.b	1(a0)
00009FD6 6A00                       		bpl.s	locret_992A
00009FD8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FDE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FE4 6000                       		bra.s	Obj22_Stop
00009FE6                            ; ===========================================================================
00009FE6                            
00009FE6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FE6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009FEC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009FF2 317C 003B 0032             		move.w	#59,$32(a0)
00009FF8                            
00009FF8                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009FF8 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009FFC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A002 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A008                            
0000A008                            locret_992A:
0000A008 4E75                       		rts	
0000A00A                            ; ===========================================================================
0000A00A                            
0000A00A                            Obj22_Delete:				; XREF: Obj22_Index
0000A00A 6100 0000                  		bsr.w	DeleteObject
0000A00E 4E75                       		rts	
0000A010                            ; ===========================================================================
0000A010                            ; ---------------------------------------------------------------------------
0000A010                            ; Object 23 - missile that Buzz	Bomber throws
0000A010                            ; ---------------------------------------------------------------------------
0000A010                            
0000A010                            Obj23:					; XREF: Obj_Index
0000A010 7000                       		moveq	#0,d0
0000A012 1028 0024                  		move.b	$24(a0),d0
0000A016 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A01A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A01E                            ; ===========================================================================
0000A01E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A020 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A022 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A024 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A026 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A028                            ; ===========================================================================
0000A028                            
0000A028                            Obj23_Main:				; XREF: Obj23_Index
0000A028 5368 0032                  		subq.w	#1,$32(a0)
0000A02C 6A00                       		bpl.s	Obj23_ChkCancel
0000A02E 5428 0024                  		addq.b	#2,$24(a0)
0000A032 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A03A 317C 2444 0002             		move.w	#$2444,2(a0)
0000A040 117C 0004 0001             		move.b	#4,1(a0)
0000A046 117C 0003 0018             		move.b	#3,$18(a0)
0000A04C 117C 0008 0019             		move.b	#8,$19(a0)
0000A052 0228 0003 0022             		andi.b	#3,$22(a0)
0000A058 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A05C 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A05E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A064 117C 0087 0020             		move.b	#$87,$20(a0)
0000A06A 117C 0001 001C             		move.b	#1,$1C(a0)
0000A070 6000                       		bra.s	Obj23_Animate2
0000A072                            ; ===========================================================================
0000A072                            
0000A072                            Obj23_Animate:				; XREF: Obj23_Index
0000A072 6100                       		bsr.s	Obj23_ChkCancel
0000A074 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A07A 6100 0000                  		bsr.w	AnimateSprite
0000A07E 6000 0000                  		bra.w	DisplaySprite
0000A082                            ; ---------------------------------------------------------------------------
0000A082                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A082                            ; destroyed, and if it has, then cancel	the missile
0000A082                            ; ---------------------------------------------------------------------------
0000A082                            
0000A082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A082                            
0000A082                            
0000A082                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A082 2268 003C                  		movea.l	$3C(a0),a1
0000A086 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A08A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A08C 4E75                       		rts	
0000A08E                            ; End of function Obj23_ChkCancel
0000A08E                            
0000A08E                            ; ===========================================================================
0000A08E                            
0000A08E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A08E 0828 0007 0022             		btst	#7,$22(a0)
0000A094 6600                       		bne.s	Obj23_Explode
0000A096 117C 0087 0020             		move.b	#$87,$20(a0)
0000A09C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0A2 6100 0000                  		bsr.w	SpeedToPos
0000A0A6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0AC 6100 0000                  		bsr.w	AnimateSprite
0000A0B0 6100 0000                  		bsr.w	DisplaySprite
0000A0B4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0B8 0640 00E0                  		addi.w	#$E0,d0
0000A0BC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0C0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0C2 4E75                       		rts	
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0C4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0C8 117C 0000 0024             		move.b	#0,$24(a0)
0000A0CE 6000 F2DE                  		bra.w	Obj24
0000A0D2                            ; ===========================================================================
0000A0D2                            
0000A0D2                            Obj23_Delete:				; XREF: Obj23_Index
0000A0D2 6100 0000                  		bsr.w	DeleteObject
0000A0D6 4E75                       		rts	
0000A0D8                            ; ===========================================================================
0000A0D8                            
0000A0D8                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0D8 4A28 0001                  		tst.b	1(a0)
0000A0DC 6AF4                       		bpl.s	Obj23_Delete
0000A0DE 6100 0000                  		bsr.w	SpeedToPos
0000A0E2                            
0000A0E2                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0E2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0E8 6100 0000                  		bsr.w	AnimateSprite
0000A0EC 6100 0000                  		bsr.w	DisplaySprite
0000A0F0 4E75                       		rts	
0000A0F2                            ; ===========================================================================
0000A0F2                            Ani_obj22:
0000A0F2                            	include "_anim\obj22.asm"
0000A0F2                            ; ---------------------------------------------------------------------------
0000A0F2                            ; Animation script - Buzz Bomber enemy
0000A0F2                            ; ---------------------------------------------------------------------------
0000A0F2 0000                       		dc.w byte_9A1E-Ani_obj22
0000A0F4 0000                       		dc.w byte_9A22-Ani_obj22
0000A0F6 0000                       		dc.w byte_9A26-Ani_obj22
0000A0F8 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A0FC 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A100 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A104                            		even
0000A104                            		even
0000A104                            
0000A104                            Ani_obj23:
0000A104                            	include "_anim\obj23.asm"
0000A104                            ; ---------------------------------------------------------------------------
0000A104                            ; Animation script - missile that Buzz Bomber throws
0000A104                            ; ---------------------------------------------------------------------------
0000A104 0000                       		dc.w byte_9A2E-Ani_obj23
0000A106 0000                       		dc.w byte_9A32-Ani_obj23
0000A108 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A10C 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A110                            		even
0000A110                            		even
0000A110                            
0000A110                            ; ---------------------------------------------------------------------------
0000A110                            ; Sprite mappings - Buzz Bomber	enemy
0000A110                            ; ---------------------------------------------------------------------------
0000A110                            Map_obj22:
0000A110                            	include "_maps\obj22.asm"
0000A110                            Map_e97a:
0000A110 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A112 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A114 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A116 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A118 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A11A 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A11C 06                         Map_e97a_C: 	dc.b $6
0000A11D F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A122 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A127 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A12C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A131 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A136 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A13B 06                         Map_e97a_2B: 	dc.b $6
0000A13C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A141 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A146 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A14B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A150 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A155 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A15A 07                         Map_e97a_4A: 	dc.b $7
0000A15B 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A160 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A165 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A16A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A16F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A174 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A179 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A17E 07                         Map_e97a_6E: 	dc.b $7
0000A17F 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A184 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A189 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A18E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A193 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A198 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A19D F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1A2 06                         Map_e97a_92: 	dc.b $6
0000A1A3 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1A8 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1AD 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1B2 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1B7 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1BC F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1C1 04                         Map_e97a_B1: 	dc.b $4
0000A1C2 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1C7 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1CC 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1D1 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1D6                            	even
0000A1D6                            	even
0000A1D6                            
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            Map_obj23:
0000A1D6                            	include "_maps\obj23.asm"
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1DA 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1DE 01                         byte_9B0E:	dc.b 1
0000A1DF F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1E4 01                         byte_9B14:	dc.b 1
0000A1E5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1EA 01                         byte_9B1A:	dc.b 1
0000A1EB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A1F0 01                         byte_9B20:	dc.b 1
0000A1F1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A1F6                            		even
0000A1F6                            		even
0000A1F6                            
0000A1F6                            ; ===========================================================================
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            ; Object 25 - rings
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            
0000A1F6                            Obj25:					; XREF: Obj_Index
0000A1F6 7000                       		moveq	#0,d0
0000A1F8 1028 0024                  		move.b	$24(a0),d0
0000A1FC 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A200 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A204                            ; ===========================================================================
0000A204 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A206 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A208 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A20A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A20C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A20E                            ; ---------------------------------------------------------------------------
0000A20E                            ; Distances between rings (format: horizontal, vertical)
0000A20E                            ; ---------------------------------------------------------------------------
0000A20E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A210 1800                       		dc.b $18, 0		; horizontal normal
0000A212 2000                       		dc.b $20, 0		; horizontal wide
0000A214 0010                       		dc.b 0,	$10		; vertical tight
0000A216 0018                       		dc.b 0,	$18		; vertical normal
0000A218 0020                       		dc.b 0,	$20		; vertical wide
0000A21A 1010                       		dc.b $10, $10		; diagonal
0000A21C 1818                       		dc.b $18, $18
0000A21E 2020                       		dc.b $20, $20
0000A220 F010                       		dc.b $F0, $10
0000A222 E818                       		dc.b $E8, $18
0000A224 E020                       		dc.b $E0, $20
0000A226 1008                       		dc.b $10, 8
0000A228 1810                       		dc.b $18, $10
0000A22A F008                       		dc.b $F0, 8
0000A22C E810                       		dc.b $E8, $10
0000A22E                            ; ===========================================================================
0000A22E                            
0000A22E                            Obj25_Main:				; XREF: Obj25_Index
0000A22E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A232 7000                       		moveq	#0,d0
0000A234 1028 0023                  		move.b	$23(a0),d0
0000A238 45F2 0002                  		lea	2(a2,d0.w),a2
0000A23C 1812                       		move.b	(a2),d4
0000A23E 1228 0028                  		move.b	$28(a0),d1
0000A242 1001                       		move.b	d1,d0
0000A244 0241 0007                  		andi.w	#7,d1
0000A248 0C41 0007                  		cmpi.w	#7,d1
0000A24C 6600                       		bne.s	loc_9B80
0000A24E 7206                       		moveq	#6,d1
0000A250                            
0000A250                            loc_9B80:
0000A250 4841                       		swap	d1
0000A252 323C 0000                  		move.w	#0,d1
0000A256 E808                       		lsr.b	#4,d0
0000A258 D040                       		add.w	d0,d0
0000A25A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A25E 4885                       		ext.w	d5
0000A260 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A264 4886                       		ext.w	d6
0000A266 2248                       		movea.l	a0,a1
0000A268 3428 0008                  		move.w	8(a0),d2
0000A26C 3628 000C                  		move.w	$C(a0),d3
0000A270 E20C                       		lsr.b	#1,d4
0000A272 6500                       		bcs.s	loc_9C02
0000A274 0892 0007                  		bclr	#7,(a2)
0000A278 6000                       		bra.s	loc_9BBA
0000A27A                            ; ===========================================================================
0000A27A                            
0000A27A                            Obj25_MakeRings:
0000A27A 4841                       		swap	d1
0000A27C E20C                       		lsr.b	#1,d4
0000A27E 6500                       		bcs.s	loc_9C02
0000A280 0892 0007                  		bclr	#7,(a2)
0000A284 6100 0000                  		bsr.w	SingleObjLoad
0000A288 6600                       		bne.s	loc_9C0E
0000A28A                            
0000A28A                            loc_9BBA:				; XREF: Obj25_Main
0000A28A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A28E 5429 0024                  		addq.b	#2,$24(a1)
0000A292 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A296 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A29C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A2A0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2A8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2AE 137C 0004 0001             		move.b	#4,1(a1)
0000A2B4 137C 0002 0018             		move.b	#2,$18(a1)
0000A2BA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2C0 137C 0008 0019             		move.b	#8,$19(a1)
0000A2C6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2CC 1341 0034                  		move.b	d1,$34(a1)
0000A2D0                            
0000A2D0                            loc_9C02:
0000A2D0 5241                       		addq.w	#1,d1
0000A2D2 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A2D4 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2D6 4841                       		swap	d1
0000A2D8 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2DC                            
0000A2DC                            loc_9C0E:
0000A2DC 0812 0000                  		btst	#0,(a2)
0000A2E0 6600 0000                  		bne.w	DeleteObject
0000A2E4                            
0000A2E4                            Obj25_Animate:				; XREF: Obj25_Index
0000A2E4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2EA 6100 0000                  		bsr.w	DisplaySprite
0000A2EE 3028 0032                  		move.w	$32(a0),d0
0000A2F2 0240 FF80                  		andi.w	#$FF80,d0
0000A2F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2FA 0441 0080                  		subi.w	#$80,d1
0000A2FE 0241 FF80                  		andi.w	#$FF80,d1
0000A302 9041                       		sub.w	d1,d0
0000A304 0C40 0280                  		cmpi.w	#$280,d0
0000A308 6200                       		bhi.s	Obj25_Delete
0000A30A 4E75                       		rts	
0000A30C                            ; ===========================================================================
0000A30C                            
0000A30C                            Obj25_Collect:				; XREF: Obj25_Index
0000A30C 5428 0024                  		addq.b	#2,$24(a0)
0000A310 117C 0000 0020             		move.b	#0,$20(a0)
0000A316 117C 0001 0018             		move.b	#1,$18(a0)
0000A31C 6100 0000                  		bsr.w	CollectRing
0000A320 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A324 7000                       		moveq	#0,d0
0000A326 1028 0023                  		move.b	$23(a0),d0
0000A32A 1228 0034                  		move.b	$34(a0),d1
0000A32E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A332                            
0000A332                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A332 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A338 6100 0000                  		bsr.w	AnimateSprite
0000A33C 6000 0000                  		bra.w	DisplaySprite
0000A340                            ; ===========================================================================
0000A340                            
0000A340                            Obj25_Delete:				; XREF: Obj25_Index
0000A340 6000 0000                  		bra.w	DeleteObject
0000A344                            
0000A344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A344                            
0000A344                            
0000A344                            CollectRing:				; XREF: Obj25_Collect
0000A344 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A348 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A34E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A352 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A358 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A35A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A360 6700                       		beq.s	loc_9CA4
0000A362 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A368 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A36A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A370 6600                       		bne.s	Obj25_PlaySnd
0000A372                            
0000A372                            loc_9CA4:
0000A372 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A376 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A37A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A37E                            
0000A37E                            Obj25_PlaySnd:
0000A37E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A384                            ; End of function CollectRing
0000A384                            
0000A384                            ; ===========================================================================
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            
0000A384                            Obj37:					; XREF: Obj_Index
0000A384 7000                       		moveq	#0,d0
0000A386 1028 0024                  		move.b	$24(a0),d0
0000A38A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A38E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A392                            ; ===========================================================================
0000A392 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A394 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A396 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A398 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A39A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A39C                            ; ===========================================================================
0000A39C                            
0000A39C                            Obj37_CountRings:			; XREF: Obj37_Index
0000A39C 2248                       		movea.l	a0,a1
0000A39E 7A00                       		moveq	#0,d5
0000A3A0 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A3A4 7020                       		moveq	#32,d0
0000A3A6 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3A8 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3AA 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3AC                            
0000A3AC                            loc_9CDE:
0000A3AC 5345                       		subq.w	#1,d5
0000A3AE 383C 0288                  		move.w	#$288,d4
0000A3B2 6000                       		bra.s	Obj37_MakeRings
0000A3B4                            ; ===========================================================================
0000A3B4                            
0000A3B4                            Obj37_Loop:
0000A3B4 6100 0000                  		bsr.w	SingleObjLoad
0000A3B8 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3BC                            
0000A3BC                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3BC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3C0 5429 0024                  		addq.b	#2,$24(a1)
0000A3C4 137C 0008 0016             		move.b	#8,$16(a1)
0000A3CA 137C 0008 0017             		move.b	#8,$17(a1)
0000A3D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3DC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3E4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3EA 137C 0004 0001             		move.b	#4,1(a1)
0000A3F0 137C 0003 0018             		move.b	#3,$18(a1)
0000A3F6 137C 0047 0020             		move.b	#$47,$20(a1)
0000A3FC 137C 0008 0019             		move.b	#8,$19(a1)
0000A402 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A408 4A44                       		tst.w	d4
0000A40A 6B00                       		bmi.s	loc_9D62
0000A40C 3004                       		move.w	d4,d0
0000A40E 6100 88DC                  		bsr.w	CalcSine
0000A412 3404                       		move.w	d4,d2
0000A414 E04A                       		lsr.w	#8,d2
0000A416 E560                       		asl.w	d2,d0
0000A418 E561                       		asl.w	d2,d1
0000A41A 3400                       		move.w	d0,d2
0000A41C 3601                       		move.w	d1,d3
0000A41E 0604 0010                  		addi.b	#$10,d4
0000A422 6400                       		bcc.s	loc_9D62
0000A424 0444 0080                  		subi.w	#$80,d4
0000A428 6400                       		bcc.s	loc_9D62
0000A42A 383C 0288                  		move.w	#$288,d4
0000A42E                            
0000A42E                            loc_9D62:
0000A42E 3342 0010                  		move.w	d2,$10(a1)
0000A432 3343 0012                  		move.w	d3,$12(a1)
0000A436 4442                       		neg.w	d2
0000A438 4444                       		neg.w	d4
0000A43A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A43E                            
0000A43E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A43E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A444 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A44A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A450 303C 00C6                  		move.w	#$C6,d0
0000A454 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A45A                            
0000A45A                            Obj37_Bounce:				; XREF: Obj37_Index
0000A45A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A460 6100 0000                  		bsr.w	SpeedToPos
0000A464 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A46A 6B00                       		bmi.s	Obj37_ChkDel
0000A46C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A470 D007                       		add.b	d7,d0
0000A472 0200 0003                  		andi.b	#3,d0
0000A476 6600                       		bne.s	Obj37_ChkDel
0000A478 4EB9 0000 0000             		jsr	ObjHitFloor
0000A47E 4A41                       		tst.w	d1
0000A480 6A00                       		bpl.s	Obj37_ChkDel
0000A482 D368 000C                  		add.w	d1,$C(a0)
0000A486 3028 0012                  		move.w	$12(a0),d0
0000A48A E440                       		asr.w	#2,d0
0000A48C 9168 0012                  		sub.w	d0,$12(a0)
0000A490 4468 0012                  		neg.w	$12(a0)
0000A494                            
0000A494                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A494 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A498 6700                       		beq.s	Obj37_Delete
0000A49A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A49E 0640 00E0                  		addi.w	#$E0,d0
0000A4A2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A4A6 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4A8 6000 0000                  		bra.w	DisplaySprite
0000A4AC                            ; ===========================================================================
0000A4AC                            
0000A4AC                            Obj37_Collect:				; XREF: Obj37_Index
0000A4AC 5428 0024                  		addq.b	#2,$24(a0)
0000A4B0 117C 0000 0020             		move.b	#0,$20(a0)
0000A4B6 117C 0001 0018             		move.b	#1,$18(a0)
0000A4BC 6100 FE86                  		bsr.w	CollectRing
0000A4C0                            
0000A4C0                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4C0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4C6 6100 0000                  		bsr.w	AnimateSprite
0000A4CA 6000 0000                  		bra.w	DisplaySprite
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            Obj37_Delete:				; XREF: Obj37_Index
0000A4CE 6000 0000                  		bra.w	DeleteObject
0000A4D2                            ; ===========================================================================
0000A4D2                            ; ---------------------------------------------------------------------------
0000A4D2                            ; Object 4B - giant ring for entry to special stage
0000A4D2                            ; ---------------------------------------------------------------------------
0000A4D2                            
0000A4D2                            Obj4B:					; XREF: Obj_Index
0000A4D2 7000                       		moveq	#0,d0
0000A4D4 1028 0024                  		move.b	$24(a0),d0
0000A4D8 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4DC 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4E0                            ; ===========================================================================
0000A4E0 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4E2 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4E4 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4E6 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4E8                            ; ===========================================================================
0000A4E8                            
0000A4E8                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4E8 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A4F0 317C 2400 0002             		move.w	#$2400,2(a0)
0000A4F6 0028 0004 0001             		ori.b	#4,1(a0)
0000A4FC 117C 0040 0019             		move.b	#$40,$19(a0)
0000A502 4A28 0001                  		tst.b	1(a0)
0000A506 6A00                       		bpl.s	Obj4B_Animate
0000A508 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A50E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A512 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A518 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A51A 4E75                       		rts	
0000A51C                            ; ===========================================================================
0000A51C                            
0000A51C                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A51C 5428 0024                  		addq.b	#2,$24(a0)
0000A520 117C 0002 0018             		move.b	#2,$18(a0)
0000A526 117C 0052 0020             		move.b	#$52,$20(a0)
0000A52C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A532                            
0000A532                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A532 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A538 3028 0008                  		move.w	8(a0),d0
0000A53C 0240 FF80                  		andi.w	#$FF80,d0
0000A540 3238 F700                  		move.w	($FFFFF700).w,d1
0000A544 0441 0080                  		subi.w	#$80,d1
0000A548 0241 FF80                  		andi.w	#$FF80,d1
0000A54C 9041                       		sub.w	d1,d0
0000A54E 0C40 0280                  		cmpi.w	#$280,d0
0000A552 6200 0000                  		bhi.w	DeleteObject
0000A556 6000 0000                  		bra.w	DisplaySprite
0000A55A                            ; ===========================================================================
0000A55A                            
0000A55A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A55A 5528 0024                  		subq.b	#2,$24(a0)
0000A55E 117C 0000 0020             		move.b	#0,$20(a0)
0000A564 6100 0000                  		bsr.w	SingleObjLoad
0000A568 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A56C 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A570 3368 0008 0008             		move.w	8(a0),8(a1)
0000A576 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A57C 2348 003C                  		move.l	a0,$3C(a1)
0000A580 3038 D008                  		move.w	($FFFFD008).w,d0
0000A584 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A588 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A58A 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A590                            
0000A590                            Obj4B_PlaySnd:
0000A590 303C 00C3                  		move.w	#$C3,d0
0000A594 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A59A 6096                       		bra.s	Obj4B_Animate
0000A59C                            ; ===========================================================================
0000A59C                            
0000A59C                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A59C 6000 0000                  		bra.w	DeleteObject
0000A5A0                            ; ===========================================================================
0000A5A0                            ; ---------------------------------------------------------------------------
0000A5A0                            ; Object 7C - flash effect when	you collect the	giant ring
0000A5A0                            ; ---------------------------------------------------------------------------
0000A5A0                            
0000A5A0                            Obj7C:					; XREF: Obj_Index
0000A5A0 7000                       		moveq	#0,d0
0000A5A2 1028 0024                  		move.b	$24(a0),d0
0000A5A6 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5AA 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5AE                            ; ===========================================================================
0000A5AE 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5B0 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5B2 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5B4                            ; ===========================================================================
0000A5B4                            
0000A5B4                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5B4 5428 0024                  		addq.b	#2,$24(a0)
0000A5B8 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5C0 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5C6 0028 0004 0001             		ori.b	#4,1(a0)
0000A5CC 117C 0000 0018             		move.b	#0,$18(a0)
0000A5D2 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5D8 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5DE                            
0000A5DE                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5DE 6100                       		bsr.s	Obj7C_Collect
0000A5E0 3028 0008                  		move.w	8(a0),d0
0000A5E4 0240 FF80                  		andi.w	#$FF80,d0
0000A5E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5EC 0441 0080                  		subi.w	#$80,d1
0000A5F0 0241 FF80                  		andi.w	#$FF80,d1
0000A5F4 9041                       		sub.w	d1,d0
0000A5F6 0C40 0280                  		cmpi.w	#$280,d0
0000A5FA 6200 0000                  		bhi.w	DeleteObject
0000A5FE 6000 0000                  		bra.w	DisplaySprite
0000A602                            
0000A602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A602                            
0000A602                            
0000A602                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A602 5328 001E                  		subq.b	#1,$1E(a0)
0000A606 6A00                       		bpl.s	locret_9F76
0000A608 117C 0001 001E             		move.b	#1,$1E(a0)
0000A60E 5228 001A                  		addq.b	#1,$1A(a0)
0000A612 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A618 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A61A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A620 6600                       		bne.s	locret_9F76	; if not, branch
0000A622 2268 003C                  		movea.l	$3C(a0),a1
0000A626 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A62C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A632 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A638 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A63C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A640                            
0000A640                            locret_9F76:
0000A640 4E75                       		rts	
0000A642                            ; ===========================================================================
0000A642                            
0000A642                            Obj7C_End:				; XREF: Obj7C_Collect
0000A642 5428 0024                  		addq.b	#2,$24(a0)
0000A646 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A64C 588F                       		addq.l	#4,sp
0000A64E 4E75                       		rts	
0000A650                            ; End of function Obj7C_Collect
0000A650                            
0000A650                            ; ===========================================================================
0000A650                            
0000A650                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A650 6000 0000                  		bra.w	DeleteObject
0000A654                            ; ===========================================================================
0000A654                            Ani_obj25:
0000A654                            	include "_anim\obj25.asm"
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            ; Animation script - ring
0000A654                            ; ---------------------------------------------------------------------------
0000A654 0000                       		dc.w byte_9F8C-Ani_obj25
0000A656 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A65C                            		even
0000A65C                            		even
0000A65C                            
0000A65C                            ; ---------------------------------------------------------------------------
0000A65C                            ; Sprite mappings - rings
0000A65C                            ; ---------------------------------------------------------------------------
0000A65C                            Map_obj25:
0000A65C                            	include "_maps\obj25.asm"
0000A65C                            ; ---------------------------------------------------------------------------
0000A65C                            ; Sprite mappings - rings
0000A65C                            ; ---------------------------------------------------------------------------
0000A65C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A660 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A664 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A668 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A66C 01                         byte_9FA2:	dc.b 1
0000A66D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A672 01                         byte_9FA8:	dc.b 1
0000A673 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A678 01                         byte_9FAE:	dc.b 1
0000A679 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A67E 01                         byte_9FB4:	dc.b 1
0000A67F F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A684 01                         byte_9FBA:	dc.b 1
0000A685 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A68A 01                         byte_9FC0:	dc.b 1
0000A68B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A690 01                         byte_9FC6:	dc.b 1
0000A691 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A696 01                         byte_9FCC:	dc.b 1
0000A697 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A69C                            		even
0000A69C                            		even
0000A69C                            
0000A69C                            ; ---------------------------------------------------------------------------
0000A69C                            ; Sprite mappings - giant ring
0000A69C                            ; ---------------------------------------------------------------------------
0000A69C                            Map_obj4B:
0000A69C                            	include "_maps\obj4B.asm"
0000A69C                            ; ---------------------------------------------------------------------------
0000A69C                            ; Sprite mappings - giant ring
0000A69C                            ; ---------------------------------------------------------------------------
0000A69C 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A6A0 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A6A4 0A                         byte_9FDA:	dc.b $A
0000A6A5 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6AA E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6AF E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6B4 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6B9 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6BE F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6C3 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6C8 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6CD 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A6D2 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6D7 08                         byte_A00D:	dc.b 8
0000A6D8 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6DD E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6E2 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6E7 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6EC F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6F1 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A6F6 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A6FB 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A700 04                         byte_A036:	dc.b 4
0000A701 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A706 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A70B 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A710 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A715 08                         byte_A04B:	dc.b 8
0000A716 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A71B E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A720 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A725 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A72A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A72F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A734 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A739 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A73E                            		even
0000A73E                            		even
0000A73E                            
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            Map_obj7C:
0000A73E                            	include "_maps\obj7C.asm"
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A742 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A746 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A74A 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A74E 02                         byte_A084:	dc.b 2
0000A74F E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A754 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A759 04                         byte_A08F:	dc.b 4
0000A75A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A75F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A764 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A769 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A76E 04                         byte_A0A4:	dc.b 4
0000A76F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A774 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A779 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A77E 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A783 04                         byte_A0B9:	dc.b 4
0000A784 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A789 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A78E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A793 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A798 04                         byte_A0CE:	dc.b 4
0000A799 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A79E E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A7A3 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7A8 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7AD 04                         byte_A0E3:	dc.b 4
0000A7AE E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7B3 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7B8 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7BD 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7C2 02                         byte_A0F8:	dc.b 2
0000A7C3 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7C8 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7CD 04                         byte_A103:	dc.b 4
0000A7CE E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A7D3 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7D8 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7DD 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7E2                            		even
0000A7E2                            		even
0000A7E2                            
0000A7E2                            ; ===========================================================================
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2                            ; Object 26 - monitors
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2                            
0000A7E2                            Obj26:					; XREF: Obj_Index
0000A7E2 7000                       		moveq	#0,d0
0000A7E4 1028 0024                  		move.b	$24(a0),d0
0000A7E8 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A7EC 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A7F0                            ; ===========================================================================
0000A7F0 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A7F2 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A7F4 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A7F6 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A7F8 0000                       		dc.w Obj26_Display-Obj26_Index
0000A7FA                            ; ===========================================================================
0000A7FA                            
0000A7FA                            Obj26_Main:				; XREF: Obj26_Index
0000A7FA 5428 0024                  		addq.b	#2,$24(a0)
0000A7FE 117C 000E 0016             		move.b	#$E,$16(a0)
0000A804 117C 000E 0017             		move.b	#$E,$17(a0)
0000A80A 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A812 317C 0680 0002             		move.w	#$680,2(a0)
0000A818 117C 0004 0001             		move.b	#4,1(a0)
0000A81E 117C 0003 0018             		move.b	#3,$18(a0)
0000A824 117C 000F 0019             		move.b	#$F,$19(a0)
0000A82A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A82E 7000                       		moveq	#0,d0
0000A830 1028 0023                  		move.b	$23(a0),d0
0000A834 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A83A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A840 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A842 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A848 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A84E 4E75                       		rts	
0000A850                            ; ===========================================================================
0000A850                            
0000A850                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A850 117C 0046 0020             		move.b	#$46,$20(a0)
0000A856 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A85C                            
0000A85C                            Obj26_Solid:				; XREF: Obj26_Index
0000A85C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A860 6700                       		beq.s	loc_A1EC	; if not, branch
0000A862 5500                       		subq.b	#2,d0
0000A864 6600                       		bne.s	Obj26_Fall
0000A866 7200                       		moveq	#0,d1
0000A868 1228 0019                  		move.b	$19(a0),d1
0000A86C 0641 000B                  		addi.w	#$B,d1
0000A870 6100 D38A                  		bsr.w	ExitPlatform
0000A874 0829 0003 0022             		btst	#3,$22(a1)
0000A87A 6600 0000                  		bne.w	loc_A1BC
0000A87E 4228 0025                  		clr.b	$25(a0)
0000A882 6000 0000                  		bra.w	Obj26_Animate
0000A886                            ; ===========================================================================
0000A886                            
0000A886                            loc_A1BC:				; XREF: Obj26_Solid
0000A886 363C 0010                  		move.w	#$10,d3
0000A88A 3428 0008                  		move.w	8(a0),d2
0000A88E 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000A892 6000 0000                  		bra.w	Obj26_Animate
0000A896                            ; ===========================================================================
0000A896                            
0000A896                            Obj26_Fall:				; XREF: Obj26_Solid
0000A896 6100 0000                  		bsr.w	ObjectFall
0000A89A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8A0 4A41                       		tst.w	d1
0000A8A2 6A00 0000                  		bpl.w	Obj26_Animate
0000A8A6 D368 000C                  		add.w	d1,$C(a0)
0000A8AA 4268 0012                  		clr.w	$12(a0)
0000A8AE 4228 0025                  		clr.b	$25(a0)
0000A8B2 6000 0000                  		bra.w	Obj26_Animate
0000A8B6                            ; ===========================================================================
0000A8B6                            
0000A8B6                            loc_A1EC:				; XREF: Obj26_Solid
0000A8B6 323C 001A                  		move.w	#$1A,d1
0000A8BA 343C 000F                  		move.w	#$F,d2
0000A8BE 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8C2 6700 0000                  		beq.w	loc_A25C
0000A8C6 4A69 0012                  		tst.w	$12(a1)
0000A8CA 6B00                       		bmi.s	loc_A20A
0000A8CC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A8D2 6700                       		beq.s	loc_A25C	; if yes, branch
0000A8D4                            
0000A8D4                            loc_A20A:
0000A8D4 4A41                       		tst.w	d1
0000A8D6 6A00                       		bpl.s	loc_A220
0000A8D8 9769 000C                  		sub.w	d3,$C(a1)
0000A8DC 6100 D20C                  		bsr.w	loc_74AE
0000A8E0 117C 0002 0025             		move.b	#2,$25(a0)
0000A8E6 6000 0000                  		bra.w	Obj26_Animate
0000A8EA                            ; ===========================================================================
0000A8EA                            
0000A8EA                            loc_A220:
0000A8EA 4A40                       		tst.w	d0
0000A8EC 6700 0000                  		beq.w	loc_A246
0000A8F0 6B00                       		bmi.s	loc_A230
0000A8F2 4A69 0010                  		tst.w	$10(a1)
0000A8F6 6B00                       		bmi.s	loc_A246
0000A8F8 6000                       		bra.s	loc_A236
0000A8FA                            ; ===========================================================================
0000A8FA                            
0000A8FA                            loc_A230:
0000A8FA 4A69 0010                  		tst.w	$10(a1)
0000A8FE 6A00                       		bpl.s	loc_A246
0000A900                            
0000A900                            loc_A236:
0000A900 9169 0008                  		sub.w	d0,8(a1)
0000A904 337C 0000 0014             		move.w	#0,$14(a1)
0000A90A 337C 0000 0010             		move.w	#0,$10(a1)
0000A910                            
0000A910                            loc_A246:
0000A910 0829 0001 0022             		btst	#1,$22(a1)
0000A916 6600                       		bne.s	loc_A26A
0000A918 08E9 0005 0022             		bset	#5,$22(a1)
0000A91E 08E8 0005 0022             		bset	#5,$22(a0)
0000A924 6000                       		bra.s	Obj26_Animate
0000A926                            ; ===========================================================================
0000A926                            
0000A926                            loc_A25C:
0000A926 0828 0005 0022             		btst	#5,$22(a0)
0000A92C 6700                       		beq.s	Obj26_Animate
0000A92E 337C 0001 001C             		move.w	#1,$1C(a1)
0000A934                            
0000A934                            loc_A26A:
0000A934 08A8 0005 0022             		bclr	#5,$22(a0)
0000A93A 08A9 0005 0022             		bclr	#5,$22(a1)
0000A940                            
0000A940                            Obj26_Animate:				; XREF: Obj26_Index
0000A940 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A946 6100 0000                  		bsr.w	AnimateSprite
0000A94A                            
0000A94A                            Obj26_Display:				; XREF: Obj26_Index
0000A94A 6100 0000                  		bsr.w	DisplaySprite
0000A94E 3028 0008                  		move.w	8(a0),d0
0000A952 0240 FF80                  		andi.w	#$FF80,d0
0000A956 3238 F700                  		move.w	($FFFFF700).w,d1
0000A95A 0441 0080                  		subi.w	#$80,d1
0000A95E 0241 FF80                  		andi.w	#$FF80,d1
0000A962 9041                       		sub.w	d1,d0
0000A964 0C40 0280                  		cmpi.w	#$280,d0
0000A968 6200 0000                  		bhi.w	DeleteObject
0000A96C 4E75                       		rts	
0000A96E                            ; ===========================================================================
0000A96E                            
0000A96E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A96E 5428 0024                  		addq.b	#2,$24(a0)
0000A972 117C 0000 0020             		move.b	#0,$20(a0)
0000A978 6100 0000                  		bsr.w	SingleObjLoad
0000A97C 6600                       		bne.s	Obj26_Explode
0000A97E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A982 3368 0008 0008             		move.w	8(a0),8(a1)
0000A988 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A98E 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A994 7400                       		moveq	#0,d2	; GMZ
0000A996 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A998                            
0000A998                            Obj26_Explode:
0000A998 6100 0000                  		bsr.w	SingleObjLoad
0000A99C 6600                       		bne.s	Obj26_SetBroken
0000A99E 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A9A2 5429 0024                  		addq.b	#2,$24(a1)
0000A9A6 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9B6                            
0000A9B6                            Obj26_NextExplosion:
0000A9B6 5802                       		addq.b	#4,d2
0000A9B8 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9BC                            
0000A9BC                            Obj26_SetBroken:
0000A9BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9C0 7000                       		moveq	#0,d0
0000A9C2 1028 0023                  		move.b	$23(a0),d0
0000A9C6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9CC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A9D2 6000 0000                  		bra.w	DisplaySprite
0000A9D6                            ; ===========================================================================
0000A9D6                            ; ---------------------------------------------------------------------------
0000A9D6                            ; Object 2E - contents of monitors
0000A9D6                            ; ---------------------------------------------------------------------------
0000A9D6                            
0000A9D6                            Obj2E:					; XREF: Obj_Index
0000A9D6 7000                       		moveq	#0,d0
0000A9D8 1028 0024                  		move.b	$24(a0),d0
0000A9DC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9E0 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9E4 6000 0000                  		bra.w	DisplaySprite
0000A9E8                            ; ===========================================================================
0000A9E8 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9EA 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A9EC 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            Obj2E_Main:				; XREF: Obj2E_Index
0000A9EE 5428 0024                  		addq.b	#2,$24(a0)
0000A9F2 317C 0680 0002             		move.w	#$680,2(a0)
0000A9F8 117C 0024 0001             		move.b	#$24,1(a0)
0000A9FE 117C 0003 0018             		move.b	#3,$18(a0)
0000AA04 117C 0008 0019             		move.b	#8,$19(a0)
0000AA0A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA10 7000                       		moveq	#0,d0
0000AA12 1028 001C                  		move.b	$1C(a0),d0
0000AA16 5400                       		addq.b	#2,d0
0000AA18 1140 001A                  		move.b	d0,$1A(a0)
0000AA1C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA22 D000                       		add.b	d0,d0
0000AA24 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA28 5249                       		addq.w	#1,a1
0000AA2A 2149 0004                  		move.l	a1,4(a0)
0000AA2E                            
0000AA2E                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA2E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA32 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA36 6100 0000                  		bsr.w	SpeedToPos
0000AA3A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA40 4E75                       		rts	
0000AA42                            ; ===========================================================================
0000AA42                            
0000AA42                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA42 5428 0024                  		addq.b	#2,$24(a0)
0000AA46 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA4C 1028 001C                  		move.b	$1C(a0),d0
0000AA50 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA54 6600                       		bne.s	Obj2E_ChkSonic
0000AA56 4E75                       		rts			; Eggman monitor does nothing
0000AA58                            ; ===========================================================================
0000AA58                            
0000AA58                            Obj2E_ChkSonic:
0000AA58 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA5C 6600                       		bne.s	Obj2E_ChkShoes
0000AA5E                            
0000AA5E                            ExtraLife:
0000AA5E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA62 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA66 303C 0088                  		move.w	#$88,d0
0000AA6A 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000AA70                            ; ===========================================================================
0000AA70                            
0000AA70                            Obj2E_ChkShoes:
0000AA70 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA74 6600                       		bne.s	Obj2E_ChkShield
0000AA76 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA7C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA82 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA88 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA8E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA94 303C 00E2                  		move.w	#$E2,d0
0000AA98 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AA9E                            ; ===========================================================================
0000AA9E                            
0000AA9E                            Obj2E_ChkShield:
0000AA9E 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AAA2 6600                       		bne.s	Obj2E_ChkInvinc
0000AAA4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AAAA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AAB0 303C 00AF                  		move.w	#$AF,d0
0000AAB4 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Obj2E_ChkInvinc:
0000AABA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AABE 6600                       		bne.s	Obj2E_ChkRings
0000AAC0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AAC6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AACC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AAD2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AAD8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AADE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AAE4 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAEA 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AAF0 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AAF6 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AAFC 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB00 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB02 303C 0087                  		move.w	#$87,d0
0000AB06 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AB0C                            ; ===========================================================================
0000AB0C                            
0000AB0C                            Obj2E_NoMusic:
0000AB0C 4E75                       		rts	
0000AB0E                            ; ===========================================================================
0000AB0E                            
0000AB0E                            Obj2E_ChkRings:
0000AB0E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB12 6600                       		bne.s	Obj2E_ChkS
0000AB14 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB1A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB20 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB26 6500                       		bcs.s	Obj2E_RingSound
0000AB28 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB2E 6700 FF2E                  		beq.w	ExtraLife
0000AB32 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB38 6500                       		bcs.s	Obj2E_RingSound
0000AB3A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB40 6700 FF1C                  		beq.w	ExtraLife
0000AB44                            
0000AB44                            Obj2E_RingSound:
0000AB44 303C 00B5                  		move.w	#$B5,d0
0000AB48 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AB4E                            ; ===========================================================================
0000AB4E                            
0000AB4E                            Obj2E_ChkS:
0000AB4E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB52 6600                       		bne.s	Obj2E_ChkEnd
0000AB54                            		; nop	
0000AB54 7201                       		moveq	#1,d1
0000AB56 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB5A                            
0000AB5A                            Obj2E_ChkEnd:
0000AB5A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB5C                            ; ===========================================================================
0000AB5C                            
0000AB5C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB5C 5368 001E                  		subq.w	#1,$1E(a0)
0000AB60 6B00 0000                  		bmi.w	DeleteObject
0000AB64 4E75                       		rts	
0000AB66                            ; ---------------------------------------------------------------------------
0000AB66                            ; Subroutine to	make the sides of a monitor solid
0000AB66                            ; ---------------------------------------------------------------------------
0000AB66                            
0000AB66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB66                            
0000AB66                            
0000AB66                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB66 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB6A 3029 0008                  		move.w	8(a1),d0
0000AB6E 9068 0008                  		sub.w	8(a0),d0
0000AB72 D041                       		add.w	d1,d0
0000AB74 6B00                       		bmi.s	loc_A4E6
0000AB76 3601                       		move.w	d1,d3
0000AB78 D643                       		add.w	d3,d3
0000AB7A B043                       		cmp.w	d3,d0
0000AB7C 6200                       		bhi.s	loc_A4E6
0000AB7E 1629 0016                  		move.b	$16(a1),d3
0000AB82 4883                       		ext.w	d3
0000AB84 D443                       		add.w	d3,d2
0000AB86 3629 000C                  		move.w	$C(a1),d3
0000AB8A 9668 000C                  		sub.w	$C(a0),d3
0000AB8E D642                       		add.w	d2,d3
0000AB90 6B00                       		bmi.s	loc_A4E6
0000AB92 D442                       		add.w	d2,d2
0000AB94 B642                       		cmp.w	d2,d3
0000AB96 6400                       		bcc.s	loc_A4E6
0000AB98 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB9C 6B00                       		bmi.s	loc_A4E6
0000AB9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ABA4 6400                       		bcc.s	loc_A4E6
0000ABA6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABAA 6600                       		bne.s	loc_A4E6
0000ABAC B240                       		cmp.w	d0,d1
0000ABAE 6400                       		bcc.s	loc_A4DC
0000ABB0 D241                       		add.w	d1,d1
0000ABB2 9041                       		sub.w	d1,d0
0000ABB4                            
0000ABB4                            loc_A4DC:
0000ABB4 0C43 0010                  		cmpi.w	#$10,d3
0000ABB8 6500                       		bcs.s	loc_A4EA
0000ABBA                            
0000ABBA                            loc_A4E2:
0000ABBA 7201                       		moveq	#1,d1
0000ABBC 4E75                       		rts	
0000ABBE                            ; ===========================================================================
0000ABBE                            
0000ABBE                            loc_A4E6:
0000ABBE 7200                       		moveq	#0,d1
0000ABC0 4E75                       		rts	
0000ABC2                            ; ===========================================================================
0000ABC2                            
0000ABC2                            loc_A4EA:
0000ABC2 7200                       		moveq	#0,d1
0000ABC4 1228 0019                  		move.b	$19(a0),d1
0000ABC8 5841                       		addq.w	#4,d1
0000ABCA 3401                       		move.w	d1,d2
0000ABCC D442                       		add.w	d2,d2
0000ABCE D269 0008                  		add.w	8(a1),d1
0000ABD2 9268 0008                  		sub.w	8(a0),d1
0000ABD6 6BE2                       		bmi.s	loc_A4E2
0000ABD8 B242                       		cmp.w	d2,d1
0000ABDA 64DE                       		bcc.s	loc_A4E2
0000ABDC 72FF                       		moveq	#-1,d1
0000ABDE 4E75                       		rts	
0000ABE0                            ; End of function Obj26_SolidSides
0000ABE0                            
0000ABE0                            ; ===========================================================================
0000ABE0                            Ani_obj26:
0000ABE0                            	include "_anim\obj26.asm"
0000ABE0                            ; ---------------------------------------------------------------------------
0000ABE0                            ; Animation script - monitors
0000ABE0                            ; ---------------------------------------------------------------------------
0000ABE0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABE6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ABEC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ABF2 0000                       		dc.w byte_A582-Ani_obj26
0000ABF4 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ABFA 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC06 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC12 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC1E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC2A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC36 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC42 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC4E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC5A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC62                            		even
0000AC62                            		even
0000AC62                            
0000AC62                            ; ---------------------------------------------------------------------------
0000AC62                            ; Sprite mappings - monitors
0000AC62                            ; ---------------------------------------------------------------------------
0000AC62                            Map_obj26:
0000AC62                            	include "_maps\obj26.asm"
0000AC62                            ; ================================================================================
0000AC62                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC62                            ; ================================================================================
0000AC62                            
0000AC62                            DATAY1U343IF3L:
0000AC62 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC66 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC6A 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC6E 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC72 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC76 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC7A 05                         DATAY1U343IF3L_0: dc.b $5
0000AC7B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC80 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC85 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC8A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC8F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC94 06                         DATAY1U343IF3L_1: dc.b $6
0000AC95 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AC9A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC9F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACA4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACA9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACAE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACB3 05                         DATAY1U343IF3L_2: dc.b $5
0000ACB4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACB9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACBE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACC3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACC8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACCD 05                         DATAY1U343IF3L_3: dc.b $5
0000ACCE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACD3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACD8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACDD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACE2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE7 06                         DATAY1U343IF3L_4: dc.b $6
0000ACE8 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ACED E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACF2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACF7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACFC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD01 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD06 06                         DATAY1U343IF3L_5: dc.b $6
0000AD07 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD0C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD11 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD16 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD1B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD20 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD25 06                         DATAY1U343IF3L_6: dc.b $6
0000AD26 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD2B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD30 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD35 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD3A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD3F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD44 06                         DATAY1U343IF3L_7: dc.b $6
0000AD45 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD4A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD4F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD54 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD59 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD5E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD63 06                         DATAY1U343IF3L_8: dc.b $6
0000AD64 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD69 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD6E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD73 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD78 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD7D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD82 06                         DATAY1U343IF3L_9: dc.b $6
0000AD83 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD88 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD8D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD92 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD97 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD9C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADA1 05                         DATAY1U343IF3L_A: dc.b $5
0000ADA2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADA7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADAC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADB1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADB6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADBB 01                         DATAY1U343IF3L_B: dc.b $1
0000ADBC FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADC2 00                         	even
0000ADC2 00                         	even
0000ADC2                            
0000ADC2                            ; ===========================================================================
0000ADC2                            ; ---------------------------------------------------------------------------
0000ADC2                            ; Object 0E - Sonic on the title screen
0000ADC2                            ; ---------------------------------------------------------------------------
0000ADC2                            
0000ADC2                            Obj0E:					; XREF: Obj_Index
0000ADC2 7000                       		moveq	#0,d0
0000ADC4 1028 0024                  		move.b	$24(a0),d0
0000ADC8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADCC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ADD0                            ; ===========================================================================
0000ADD0 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ADD2 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ADD4 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADD6 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADD8                            ; ===========================================================================
0000ADD8                            
0000ADD8                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADD8 5428 0024                  		addq.b	#2,$24(a0)
0000ADDC 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADE2 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADE8 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADF0 317C 2300 0002             		move.w	#$2300,2(a0)
0000ADF6 117C 0001 0018             		move.b	#1,$18(a0)
0000ADFC 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE02 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE08 6100 0000                  		bsr.w	AnimateSprite
0000AE0C                            
0000AE0C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE0C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE10 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE12 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE16 6000 0000                  		bra.w	DisplaySprite
0000AE1A                            ; ===========================================================================
0000AE1A                            
0000AE1A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE1A 4E75                       		rts	
0000AE1C                            ; ===========================================================================
0000AE1C                            
0000AE1C                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE1C 5168 000A                  		subq.w	#8,$A(a0)
0000AE20 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE26 6600                       		bne.s	Obj0E_Display
0000AE28 5428 0024                  		addq.b	#2,$24(a0)
0000AE2C                            
0000AE2C                            Obj0E_Display:
0000AE2C 6000 0000                  		bra.w	DisplaySprite
0000AE30                            ; ===========================================================================
0000AE30 4E75                       		rts	
0000AE32                            ; ===========================================================================
0000AE32                            
0000AE32                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE32 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE38 6100 0000                  		bsr.w	AnimateSprite
0000AE3C 6000 0000                  		bra.w	DisplaySprite
0000AE40                            ; ===========================================================================
0000AE40 4E75                       		rts	
0000AE42                            ; ===========================================================================
0000AE42                            ; ---------------------------------------------------------------------------
0000AE42                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE42                            ; ---------------------------------------------------------------------------
0000AE42                            
0000AE42                            Obj0F:					; XREF: Obj_Index
0000AE42 7000                       		moveq	#0,d0
0000AE44 1028 0024                  		move.b	$24(a0),d0
0000AE48 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE4C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE50 6000 0000                  		bra.w	DisplaySprite
0000AE54                            ; ===========================================================================
0000AE54 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE56 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE58 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE5A                            ; ===========================================================================
0000AE5A                            
0000AE5A                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE5A 5428 0024                  		addq.b	#2,$24(a0)
0000AE5E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE64 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE6A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE72 317C 0200 0002             		move.w	#$200,2(a0)
0000AE78 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE7E 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE80 5428 0024                  		addq.b	#2,$24(a0)
0000AE84 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE8A 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE8C 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE92 317C 0170 0008             		move.w	#$170,8(a0)
0000AE98 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE9E                            
0000AE9E                            locret_A6F8:				; XREF: Obj0F_Index
0000AE9E 4E75                       		rts	
0000AEA0                            ; ===========================================================================
0000AEA0                            
0000AEA0                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AEA0 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AEA6 6000 0000                  		bra.w	AnimateSprite
0000AEAA                            ; ===========================================================================
0000AEAA                            Ani_obj0E:
0000AEAA                            	include "_anim\obj0E.asm"
0000AEAA                            ; ---------------------------------------------------------------------------
0000AEAA                            ; Animation script - Sonic on the title screen
0000AEAA                            ; ---------------------------------------------------------------------------
0000AEAA 0000                       		dc.w byte_A706-Ani_obj0E
0000AEAC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AEB8                            		even
0000AEB8                            		even
0000AEB8                            
0000AEB8                            Ani_obj0F:
0000AEB8                            	include "_anim\obj0F.asm"
0000AEB8                            ; ---------------------------------------------------------------------------
0000AEB8                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AEB8                            ; ---------------------------------------------------------------------------
0000AEB8 0000                       		dc.w byte_A714-Ani_obj0F
0000AEBA 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AEBE                            		even
0000AEBE                            		even
0000AEBE                            
0000AEBE                            ; ---------------------------------------------------------------------------
0000AEBE                            ; Subroutine to	animate	a sprite using an animation script
0000AEBE                            ; ---------------------------------------------------------------------------
0000AEBE                            
0000AEBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEBE                            
0000AEBE                            
0000AEBE                            AnimateSprite:
0000AEBE 7000                       		moveq	#0,d0
0000AEC0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AEC4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AEC8 6700                       		beq.s	Anim_Run	; if not, branch
0000AECA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AECE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AED4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AEDA                            
0000AEDA                            Anim_Run:
0000AEDA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEDE 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEE0 D040                       		add.w	d0,d0
0000AEE2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEE6 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEEA 7200                       		moveq	#0,d1
0000AEEC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEF0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEF4 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AEF6                            
0000AEF6                            Anim_Next:
0000AEF6 1200                       		move.b	d0,d1
0000AEF8 0200 001F                  		andi.b	#$1F,d0
0000AEFC 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF00 1028 0022                  		move.b	$22(a0),d0
0000AF04 E719                       		rol.b	#3,d1
0000AF06 B101                       		eor.b	d0,d1
0000AF08 0201 0003                  		andi.b	#3,d1
0000AF0C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF12 8328 0001                  		or.b	d1,1(a0)
0000AF16 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF1A                            
0000AF1A                            Anim_Wait:
0000AF1A 4E75                       		rts	
0000AF1C                            ; ===========================================================================
0000AF1C                            
0000AF1C                            Anim_End_FF:
0000AF1C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF1E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF20 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF26 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF2A 60CA                       		bra.s	Anim_Next
0000AF2C                            ; ===========================================================================
0000AF2C                            
0000AF2C                            Anim_End_FE:
0000AF2C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF2E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF30 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF34 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF38 9200                       		sub.b	d0,d1
0000AF3A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF3E 60B6                       		bra.s	Anim_Next
0000AF40                            ; ===========================================================================
0000AF40                            
0000AF40                            Anim_End_FD:
0000AF40 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF42 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF44 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF4A                            
0000AF4A                            Anim_End_FC:
0000AF4A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF4C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF4E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF52                            
0000AF52                            Anim_End_FB:
0000AF52 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF54 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF56 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF5C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF60                            
0000AF60                            Anim_End_FA:
0000AF60 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF62 6600                       		bne.s	Anim_End	; if not, branch
0000AF64 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF68                            
0000AF68                            Anim_End:
0000AF68 4E75                       		rts	
0000AF6A                            ; End of function AnimateSprite
0000AF6A                            
0000AF6A                            ; ===========================================================================
0000AF6A                            ; ---------------------------------------------------------------------------
0000AF6A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF6A                            ; ---------------------------------------------------------------------------
0000AF6A                            Map_obj0F:
0000AF6A                            	include "_maps\obj0F.asm"
0000AF6A                            ; ---------------------------------------------------------------------------
0000AF6A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF6A                            ; ---------------------------------------------------------------------------
0000AF6A 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF6C 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF6E 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF70 0000                       		dc.w byte_A882-Map_obj0F
0000AF72 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF73 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF78 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF7D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF82 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF87 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF8C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF91 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF92 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF97 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF9C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFAB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFC9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFCE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFDD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFFB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B000 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B005 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B014 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B019 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B01E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B023 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B028 01                         byte_A882:	dc.b 1			; "TM"
0000B029 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B02E                            		even
0000B02E                            		even
0000B02E                            
0000B02E                            ; ---------------------------------------------------------------------------
0000B02E                            ; Sprite mappings - Sonic on the title screen
0000B02E                            ; ---------------------------------------------------------------------------
0000B02E                            Map_obj0E:
0000B02E                            	include "_maps\obj0E.asm"
0000B02E                            ; ================================================================================
0000B02E                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B02E                            ; ================================================================================
0000B02E                            
0000B02E                            DATAGKI0HYDQBXP:
0000B02E 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B032 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B036 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B03A 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B03E 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B03F 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B044 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B049 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B04E 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B053 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B058 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B05D 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B062 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B067 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B068 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B06D 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B072 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B077 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B07C 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B081 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B086 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B08B 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B090 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B095 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B09A 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B09F 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B0A0 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B0A5 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0AA F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0AF 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0B4 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0B9 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0BE 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0C3 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0C8 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0CD 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B0D2 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0D7 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0D8 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0DD F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0E2 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0E7 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B0EC 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B0F1 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B0F6 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B0FB 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B100 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B105 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B10A 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B10B F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B110 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B115 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B11A 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B11F 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B124 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B129 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B12E 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B133 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B138 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B13D 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B142 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B147 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B14C 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B151 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B156 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B15B 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B15C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B161 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B166 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B16B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B170 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B175 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B17A 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B17F EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B184 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B189 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B18E 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B193 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B194 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B199 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B19E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1A3 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1A8 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1AD 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1B2 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1B7 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1BC 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1C1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1C6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1CB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1D0 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B1D5 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1DA 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1DF 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1E0 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1E5 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1EA 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B1EF EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B1F4 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B1F9 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B1FE EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B203 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B208 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B20D EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B212 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B217 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B21C EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B221 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B226 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B22C 00                         	even
0000B22C 00                         	even
0000B22C                            
0000B22C                            ; ===========================================================================
0000B22C                            ; ---------------------------------------------------------------------------
0000B22C                            ; Object 2B - Chopper enemy (GHZ)
0000B22C                            ; ---------------------------------------------------------------------------
0000B22C                            
0000B22C                            Obj2B:					; XREF: Obj_Index
0000B22C 7000                       		moveq	#0,d0
0000B22E 1028 0024                  		move.b	$24(a0),d0
0000B232 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B236 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B23A 6000 0000                  		bra.w	MarkObjGone
0000B23E                            ; ===========================================================================
0000B23E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B240 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B242                            ; ===========================================================================
0000B242                            
0000B242                            Obj2B_Main:				; XREF: Obj2B_Index
0000B242 5428 0024                  		addq.b	#2,$24(a0)
0000B246 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B24E 317C 047B 0002             		move.w	#$47B,2(a0)
0000B254 117C 0004 0001             		move.b	#4,1(a0)
0000B25A 117C 0004 0018             		move.b	#4,$18(a0)
0000B260 117C 0009 0020             		move.b	#9,$20(a0)
0000B266 117C 0010 0019             		move.b	#$10,$19(a0)
0000B26C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B272 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B278                            
0000B278                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B278 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B27E 6100 FC3E                  		bsr.w	AnimateSprite
0000B282 6100 0000                  		bsr.w	SpeedToPos
0000B286 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B28C 3028 0030                  		move.w	$30(a0),d0
0000B290 B068 000C                  		cmp.w	$C(a0),d0
0000B294 6400                       		bcc.s	Obj2B_ChgAni
0000B296 3140 000C                  		move.w	d0,$C(a0)
0000B29A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2A0                            
0000B2A0                            Obj2B_ChgAni:
0000B2A0 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2A6 0440 00C0                  		subi.w	#$C0,d0
0000B2AA B068 000C                  		cmp.w	$C(a0),d0
0000B2AE 6400                       		bcc.s	locret_ABB6
0000B2B0 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2B6 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2BA 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2BC 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2C2                            
0000B2C2                            locret_ABB6:
0000B2C2 4E75                       		rts	
0000B2C4                            ; ===========================================================================
0000B2C4                            Ani_obj2B:
0000B2C4                            	include "_anim\obj2B.asm"
0000B2C4                            ; ---------------------------------------------------------------------------
0000B2C4                            ; Animation script - Chopper enemy
0000B2C4                            ; ---------------------------------------------------------------------------
0000B2C4 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2C6 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2C8 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2CA 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2CE 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B2D2 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2D6 00                         		even
0000B2D6 00                         		even
0000B2D6                            
0000B2D6                            ; ---------------------------------------------------------------------------
0000B2D6                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2D6                            ; ---------------------------------------------------------------------------
0000B2D6                            Map_obj2B:
0000B2D6                            	include "_maps\obj2B.asm"
0000B2D6                            Map_1ff1:
0000B2D6 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2D8 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2DA 02                         Map_1ff1_4: 	dc.b $2
0000B2DB E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2E0 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2E5 02                         Map_1ff1_F: 	dc.b $2
0000B2E6 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2EB 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2F0                            	even
0000B2F0                            	even
0000B2F0                            
0000B2F0                            ; ===========================================================================
0000B2F0                            ; ---------------------------------------------------------------------------
0000B2F0                            ; Object 2C - Jaws enemy (LZ)
0000B2F0                            ; ---------------------------------------------------------------------------
0000B2F0                            
0000B2F0                            Obj2C:					; XREF: Obj_Index
0000B2F0 7000                       		moveq	#0,d0
0000B2F2 1028 0024                  		move.b	$24(a0),d0
0000B2F6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B2FA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B2FE                            ; ===========================================================================
0000B2FE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B300 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B302                            ; ===========================================================================
0000B302                            
0000B302                            Obj2C_Main:				; XREF: Obj2C_Index
0000B302 5428 0024                  		addq.b	#2,$24(a0)
0000B306 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B30E 317C 2486 0002             		move.w	#$2486,2(a0)
0000B314 0028 0004 0001             		ori.b	#4,1(a0)
0000B31A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B320 117C 0004 0018             		move.b	#4,$18(a0)
0000B326 117C 0010 0019             		move.b	#$10,$19(a0)
0000B32C 7000                       		moveq	#0,d0
0000B32E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B332 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B334 5340                       		subq.w	#1,d0
0000B336 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B33A 3140 0032                  		move.w	d0,$32(a0)
0000B33E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B344 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B34A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B34C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B350                            
0000B350                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B350 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B354 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B356 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B35C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B360 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B366 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B36C                            
0000B36C                            Obj2C_Animate:
0000B36C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B372 6100 FB4A                  		bsr.w	AnimateSprite
0000B376 6100 0000                  		bsr.w	SpeedToPos
0000B37A 6000 0000                  		bra.w	MarkObjGone
0000B37E                            ; ===========================================================================
0000B37E                            Ani_obj2C:
0000B37E                            	include "_anim\obj2C.asm"
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Animation script - Jaws enemy
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B380 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B386                            		even
0000B386                            		even
0000B386                            
0000B386                            ; ---------------------------------------------------------------------------
0000B386                            ; Sprite mappings - Jaws enemy (LZ)
0000B386                            ; ---------------------------------------------------------------------------
0000B386                            Map_obj2C:
0000B386                            	include "_maps\obj2C.asm"
0000B386                            ; ---------------------------------------------------------------------------
0000B386                            ; Sprite mappings - Jaws enemy (LZ)
0000B386                            ; ---------------------------------------------------------------------------
0000B386 0000                       		dc.w byte_AC78-Map_obj2C
0000B388 0000                       		dc.w byte_AC83-Map_obj2C
0000B38A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B38C 0000                       		dc.w byte_AC99-Map_obj2C
0000B38E 02                         byte_AC78:	dc.b 2
0000B38F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B394 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B399 02                         byte_AC83:	dc.b 2
0000B39A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B39F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3A4 02                         byte_AC8E:	dc.b 2
0000B3A5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3AA F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3AF 02                         byte_AC99:	dc.b 2
0000B3B0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3B5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3BA                            		even
0000B3BA                            		even
0000B3BA                            
0000B3BA                            ; ===========================================================================
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            ; Object 2D - Burrobot enemy (LZ)
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            
0000B3BA                            Obj2D:					; XREF: Obj_Index
0000B3BA 7000                       		moveq	#0,d0
0000B3BC 1028 0024                  		move.b	$24(a0),d0
0000B3C0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3C4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3C8                            ; ===========================================================================
0000B3C8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3CA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3CC                            ; ===========================================================================
0000B3CC                            
0000B3CC                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3CC 5428 0024                  		addq.b	#2,$24(a0)
0000B3D0 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3D6 117C 0008 0017             		move.b	#8,$17(a0)
0000B3DC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3E4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3EA 0028 0004 0001             		ori.b	#4,1(a0)
0000B3F0 117C 0004 0018             		move.b	#4,$18(a0)
0000B3F6 117C 0005 0020             		move.b	#5,$20(a0)
0000B3FC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B402 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B406 117C 0002 001C             		move.b	#2,$1C(a0)
0000B40C                            
0000B40C                            Obj2D_Action:				; XREF: Obj2D_Index
0000B40C 7000                       		moveq	#0,d0
0000B40E 1028 0025                  		move.b	$25(a0),d0
0000B412 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B416 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B41A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B420 6100 FA9C                  		bsr.w	AnimateSprite
0000B424 6000 0000                  		bra.w	MarkObjGone
0000B428                            ; ===========================================================================
0000B428 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B42A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B42C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B42E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B430                            ; ===========================================================================
0000B430                            
0000B430                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B430 5368 0030                  		subq.w	#1,$30(a0)
0000B434 6A00                       		bpl.s	locret_AD42
0000B436 5428 0025                  		addq.b	#2,$25(a0)
0000B43A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B440 317C 0080 0010             		move.w	#$80,$10(a0)
0000B446 117C 0001 001C             		move.b	#1,$1C(a0)
0000B44C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B452 6700                       		beq.s	locret_AD42
0000B454 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B458                            
0000B458                            locret_AD42:
0000B458 4E75                       		rts	
0000B45A                            ; ===========================================================================
0000B45A                            
0000B45A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B45A 5368 0030                  		subq.w	#1,$30(a0)
0000B45E 6B00                       		bmi.s	loc_AD84
0000B460 6100 0000                  		bsr.w	SpeedToPos
0000B464 0868 0000 0032             		bchg	#0,$32(a0)
0000B46A 6600                       		bne.s	loc_AD78
0000B46C 3628 0008                  		move.w	8(a0),d3
0000B470 0643 000C                  		addi.w	#$C,d3
0000B474 0828 0000 0022             		btst	#0,$22(a0)
0000B47A 6600                       		bne.s	loc_AD6A
0000B47C 0443 0018                  		subi.w	#$18,d3
0000B480                            
0000B480                            loc_AD6A:
0000B480 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B486 0C41 000C                  		cmpi.w	#$C,d1
0000B48A 6C00                       		bge.s	loc_AD84
0000B48C 4E75                       		rts	
0000B48E                            ; ===========================================================================
0000B48E                            
0000B48E                            loc_AD78:				; XREF: Obj2D_Move
0000B48E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B494 D368 000C                  		add.w	d1,$C(a0)
0000B498 4E75                       		rts	
0000B49A                            ; ===========================================================================
0000B49A                            
0000B49A                            loc_AD84:				; XREF: Obj2D_Move
0000B49A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4A0 6700                       		beq.s	loc_ADA4
0000B4A2 5528 0025                  		subq.b	#2,$25(a0)
0000B4A6 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4AC 317C 0000 0010             		move.w	#0,$10(a0)
0000B4B2 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4B8 4E75                       		rts	
0000B4BA                            ; ===========================================================================
0000B4BA                            
0000B4BA                            loc_ADA4:
0000B4BA 5428 0025                  		addq.b	#2,$25(a0)
0000B4BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4C4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4CA 4E75                       		rts	
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4CC 6100 0000                  		bsr.w	SpeedToPos
0000B4D0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4D6 6B00                       		bmi.s	locret_ADF0
0000B4D8 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4DE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4E4 4A41                       		tst.w	d1
0000B4E6 6A00                       		bpl.s	locret_ADF0
0000B4E8 D368 000C                  		add.w	d1,$C(a0)
0000B4EC 317C 0000 0012             		move.w	#0,$12(a0)
0000B4F2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B4F8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B4FE 5528 0025                  		subq.b	#2,$25(a0)
0000B502 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B506                            
0000B506                            locret_ADF0:
0000B506 4E75                       		rts	
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B508 343C 0060                  		move.w	#$60,d2
0000B50C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B510 6400                       		bcc.s	locret_AE20
0000B512 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B516 9068 000C                  		sub.w	$C(a0),d0
0000B51A 6400                       		bcc.s	locret_AE20
0000B51C 0C40 FF80                  		cmpi.w	#-$80,d0
0000B520 6500                       		bcs.s	locret_AE20
0000B522 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B526 6600                       		bne.s	locret_AE20
0000B528 5528 0025                  		subq.b	#2,$25(a0)
0000B52C 3141 0010                  		move.w	d1,$10(a0)
0000B530 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B536                            
0000B536                            locret_AE20:
0000B536 4E75                       		rts	
0000B538                            
0000B538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B538                            
0000B538                            
0000B538                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B538 323C 0080                  		move.w	#$80,d1
0000B53C 08E8 0000 0022             		bset	#0,$22(a0)
0000B542 3038 D008                  		move.w	($FFFFD008).w,d0
0000B546 9068 0008                  		sub.w	8(a0),d0
0000B54A 6400                       		bcc.s	loc_AE40
0000B54C 4440                       		neg.w	d0
0000B54E 4441                       		neg.w	d1
0000B550 08A8 0000 0022             		bclr	#0,$22(a0)
0000B556                            
0000B556                            loc_AE40:
0000B556 B042                       		cmp.w	d2,d0
0000B558 4E75                       		rts	
0000B55A                            ; End of function Obj2D_ChkSonic2
0000B55A                            
0000B55A                            ; ===========================================================================
0000B55A                            Ani_obj2D:
0000B55A                            	include "_anim\obj2D.asm"
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            ; Animation script - Burrobot enemy but craig
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B55C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B55E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B560 0000                       		dc.w byte_AE58-Ani_obj2D
0000B562 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B565 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B569 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B577 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B57A                            		even
0000B57A                            		even
0000B57A                            
0000B57A                            ; ---------------------------------------------------------------------------
0000B57A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B57A                            ; ---------------------------------------------------------------------------
0000B57A                            Map_obj2D:
0000B57A                            	include "_maps\obj2D.asm"
0000B57A                            Map_e3a3:
0000B57A 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B57C 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B57E 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B580 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B582 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B584 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B586 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B588 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B58A 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B58C 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B58E 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B590 02                         Map_e3a3_16: 	dc.b $2
0000B591 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B596 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B59B 02                         Map_e3a3_21: 	dc.b $2
0000B59C EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B5A1 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B5A6 02                         Map_e3a3_2C: 	dc.b $2
0000B5A7 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5AC 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5B1 02                         Map_e3a3_37: 	dc.b $2
0000B5B2 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5B7 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5BC 02                         Map_e3a3_42: 	dc.b $2
0000B5BD EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5C2 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5C7 02                         Map_e3a3_4D: 	dc.b $2
0000B5C8 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5CD FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B5D2 02                         Map_e3a3_58: 	dc.b $2
0000B5D3 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5D8 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5DD 02                         Map_e3a3_63: 	dc.b $2
0000B5DE EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5E3 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5E8 02                         Map_e3a3_6E: 	dc.b $2
0000B5E9 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B5EE FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B5F3 02                         Map_e3a3_79: 	dc.b $2
0000B5F4 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B5F9 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B5FE 02                         Map_e3a3_84: 	dc.b $2
0000B5FF EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B604 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B60A 00                         	even
0000B60A 00                         	even
0000B60A                            
0000B60A                            ; ===========================================================================
0000B60A                            ; ---------------------------------------------------------------------------
0000B60A                            ; Object 2F - large moving platforms (MZ)
0000B60A                            ; ---------------------------------------------------------------------------
0000B60A                            
0000B60A                            Obj2F:					; XREF: Obj_Index
0000B60A 7000                       		moveq	#0,d0
0000B60C 1028 0024                  		move.b	$24(a0),d0
0000B610 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B614 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B618                            ; ===========================================================================
0000B618 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B61A 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B61C                            
0000B61C 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B61E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B620 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B622 0140                       		dc.b 1,	$40
0000B624 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B626 0220                       		dc.b 2,	$20
0000B628                            ; ===========================================================================
0000B628                            
0000B628                            Obj2F_Main:				; XREF: Obj2F_Index
0000B628 5428 0024                  		addq.b	#2,$24(a0)
0000B62C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B634 317C C000 0002             		move.w	#$C000,2(a0)
0000B63A 117C 0004 0001             		move.b	#4,1(a0)
0000B640 117C 0005 0018             		move.b	#5,$18(a0)
0000B646 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B64C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B652 7000                       		moveq	#0,d0
0000B654 1028 0028                  		move.b	$28(a0),d0
0000B658 E448                       		lsr.w	#2,d0
0000B65A 0240 001C                  		andi.w	#$1C,d0
0000B65E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B662 3019                       		move.w	(a1)+,d0
0000B664 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B668 214A 0030                  		move.l	a2,$30(a0)
0000B66C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B670 1151 0019                  		move.b	(a1),$19(a0)
0000B674 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B67A 117C 0040 0016             		move.b	#$40,$16(a0)
0000B680 08E8 0004 0001             		bset	#4,1(a0)
0000B686                            
0000B686                            Obj2F_Action:				; XREF: Obj2F_Index
0000B686 6100 0000                  		bsr.w	Obj2F_Types
0000B68A 4A28 0025                  		tst.b	$25(a0)
0000B68E 6700                       		beq.s	Obj2F_Solid
0000B690 7200                       		moveq	#0,d1
0000B692 1228 0019                  		move.b	$19(a0),d1
0000B696 0641 000B                  		addi.w	#$B,d1
0000B69A 6100 C560                  		bsr.w	ExitPlatform
0000B69E 0829 0003 0022             		btst	#3,$22(a1)
0000B6A4 6600 0000                  		bne.w	Obj2F_Slope
0000B6A8 4228 0025                  		clr.b	$25(a0)
0000B6AC 6000                       		bra.s	Obj2F_Display
0000B6AE                            ; ===========================================================================
0000B6AE                            
0000B6AE                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6AE 7200                       		moveq	#0,d1
0000B6B0 1228 0019                  		move.b	$19(a0),d1
0000B6B4 0641 000B                  		addi.w	#$B,d1
0000B6B8 2468 0030                  		movea.l	$30(a0),a2
0000B6BC 3428 0008                  		move.w	8(a0),d2
0000B6C0 6100 D52A                  		bsr.w	SlopeObject2
0000B6C4 6000                       		bra.s	Obj2F_Display
0000B6C6                            ; ===========================================================================
0000B6C6                            
0000B6C6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6C6 7200                       		moveq	#0,d1
0000B6C8 1228 0019                  		move.b	$19(a0),d1
0000B6CC 0641 000B                  		addi.w	#$B,d1
0000B6D0 343C 0020                  		move.w	#$20,d2
0000B6D4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6DA 6600                       		bne.s	loc_AF8E
0000B6DC 343C 0030                  		move.w	#$30,d2
0000B6E0                            
0000B6E0                            loc_AF8E:
0000B6E0 2468 0030                  		movea.l	$30(a0),a2
0000B6E4 6100 0000                  		bsr.w	SolidObject2F
0000B6E8                            
0000B6E8                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6E8 6100 0000                  		bsr.w	DisplaySprite
0000B6EC 6000 0000                  		bra.w	Obj2F_ChkDel
0000B6F0                            
0000B6F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6F0                            
0000B6F0                            
0000B6F0                            Obj2F_Types:				; XREF: Obj2F_Action
0000B6F0 7000                       		moveq	#0,d0
0000B6F2 1028 0028                  		move.b	$28(a0),d0
0000B6F6 0240 0007                  		andi.w	#7,d0
0000B6FA D040                       		add.w	d0,d0
0000B6FC 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B700 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B704                            ; End of function Obj2F_Types
0000B704                            
0000B704                            ; ===========================================================================
0000B704 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B706 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B708 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B70A 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B70C 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B70E 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B710                            ; ===========================================================================
0000B710                            
0000B710                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B710 4E75                       		rts			; type 00 platform doesn't move
0000B712                            ; ===========================================================================
0000B712                            
0000B712                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B712 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B716 323C 0020                  		move.w	#$20,d1
0000B71A 6000                       		bra.s	Obj2F_Move
0000B71C                            ; ===========================================================================
0000B71C                            
0000B71C                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B71C 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B720 323C 0030                  		move.w	#$30,d1
0000B724 6000                       		bra.s	Obj2F_Move
0000B726                            ; ===========================================================================
0000B726                            
0000B726                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B726 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B72A 323C 0040                  		move.w	#$40,d1
0000B72E 6000                       		bra.s	Obj2F_Move
0000B730                            ; ===========================================================================
0000B730                            
0000B730                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B730 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B734 323C 0060                  		move.w	#$60,d1
0000B738                            
0000B738                            Obj2F_Move:
0000B738 0828 0003 0028             		btst	#3,$28(a0)
0000B73E 6700                       		beq.s	loc_AFF2
0000B740 4440                       		neg.w	d0
0000B742 D041                       		add.w	d1,d0
0000B744                            
0000B744                            loc_AFF2:
0000B744 3228 002C                  		move.w	$2C(a0),d1
0000B748 9240                       		sub.w	d0,d1
0000B74A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B74E 4E75                       		rts	
0000B750                            ; ===========================================================================
0000B750                            
0000B750                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B750 1028 0034                  		move.b	$34(a0),d0
0000B754 4A28 0025                  		tst.b	$25(a0)
0000B758 6600                       		bne.s	loc_B010
0000B75A 5500                       		subq.b	#2,d0
0000B75C 6400                       		bcc.s	loc_B01C
0000B75E 7000                       		moveq	#0,d0
0000B760 6000                       		bra.s	loc_B01C
0000B762                            ; ===========================================================================
0000B762                            
0000B762                            loc_B010:
0000B762 5800                       		addq.b	#4,d0
0000B764 0C00 0040                  		cmpi.b	#$40,d0
0000B768 6500                       		bcs.s	loc_B01C
0000B76A 103C 0040                  		move.b	#$40,d0
0000B76E                            
0000B76E                            loc_B01C:
0000B76E 1140 0034                  		move.b	d0,$34(a0)
0000B772 4EB9 0000 2CEC             		jsr	(CalcSine).l
0000B778 E848                       		lsr.w	#4,d0
0000B77A 3200                       		move.w	d0,d1
0000B77C D068 002C                  		add.w	$2C(a0),d0
0000B780 3140 000C                  		move.w	d0,$C(a0)
0000B784 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B78A 6600                       		bne.s	loc_B07A
0000B78C 4A28 0035                  		tst.b	$35(a0)
0000B790 6600                       		bne.s	loc_B07A
0000B792 117C 0001 0035             		move.b	#1,$35(a0)
0000B798 6100 0000                  		bsr.w	SingleObjLoad2
0000B79C 6600                       		bne.s	loc_B07A
0000B79E 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7A8 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7AE 5069 002C                  		addq.w	#8,$2C(a1)
0000B7B2 5769 002C                  		subq.w	#3,$2C(a1)
0000B7B6 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7BC 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7C2 2348 0038                  		move.l	a0,$38(a1)
0000B7C6 2448                       		movea.l	a0,a2
0000B7C8 6100                       		bsr.s	sub_B09C
0000B7CA                            
0000B7CA                            loc_B07A:
0000B7CA 7400                       		moveq	#0,d2
0000B7CC 45E8 0036                  		lea	$36(a0),a2
0000B7D0 141A                       		move.b	(a2)+,d2
0000B7D2 5302                       		subq.b	#1,d2
0000B7D4 6500                       		bcs.s	locret_B09A
0000B7D6                            
0000B7D6                            loc_B086:
0000B7D6 7000                       		moveq	#0,d0
0000B7D8 101A                       		move.b	(a2)+,d0
0000B7DA ED48                       		lsl.w	#6,d0
0000B7DC 0640 D000                  		addi.w	#-$3000,d0
0000B7E0 3240                       		movea.w	d0,a1
0000B7E2 3341 003C                  		move.w	d1,$3C(a1)
0000B7E6 51CA FFEE                  		dbf	d2,loc_B086
0000B7EA                            
0000B7EA                            locret_B09A:
0000B7EA 4E75                       		rts	
0000B7EC                            
0000B7EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7EC                            
0000B7EC                            
0000B7EC                            sub_B09C:
0000B7EC 45EA 0036                  		lea	$36(a2),a2
0000B7F0 7000                       		moveq	#0,d0
0000B7F2 1012                       		move.b	(a2),d0
0000B7F4 5212                       		addq.b	#1,(a2)
0000B7F6 45F2 0001                  		lea	1(a2,d0.w),a2
0000B7FA 3009                       		move.w	a1,d0
0000B7FC 0440 D000                  		subi.w	#-$3000,d0
0000B800 EC48                       		lsr.w	#6,d0
0000B802 0240 007F                  		andi.w	#$7F,d0
0000B806 1480                       		move.b	d0,(a2)
0000B808 4E75                       		rts	
0000B80A                            ; End of function sub_B09C
0000B80A                            
0000B80A                            ; ===========================================================================
0000B80A                            
0000B80A                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B80A 4A28 0035                  		tst.b	$35(a0)
0000B80E 6700                       		beq.s	loc_B0C6
0000B810 4A28 0001                  		tst.b	1(a0)
0000B814 6A00                       		bpl.s	Obj2F_DelFlames
0000B816                            
0000B816                            loc_B0C6:
0000B816 3028 002A                  		move.w	$2A(a0),d0
0000B81A 0240 FF80                  		andi.w	#$FF80,d0
0000B81E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B822 0441 0080                  		subi.w	#$80,d1
0000B826 0241 FF80                  		andi.w	#$FF80,d1
0000B82A 9041                       		sub.w	d1,d0
0000B82C 0C40 0280                  		cmpi.w	#$280,d0
0000B830 6200 0000                  		bhi.w	DeleteObject
0000B834 4E75                       		rts	
0000B836                            ; ===========================================================================
0000B836                            
0000B836                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B836 7400                       		moveq	#0,d2
0000B838                            
0000B838                            loc_B0E8:
0000B838 45E8 0036                  		lea	$36(a0),a2
0000B83C 1412                       		move.b	(a2),d2
0000B83E 421A                       		clr.b	(a2)+
0000B840 5302                       		subq.b	#1,d2
0000B842 6500                       		bcs.s	locret_B116
0000B844                            
0000B844                            loc_B0F4:
0000B844 7000                       		moveq	#0,d0
0000B846 1012                       		move.b	(a2),d0
0000B848 421A                       		clr.b	(a2)+
0000B84A ED48                       		lsl.w	#6,d0
0000B84C 0640 D000                  		addi.w	#-$3000,d0
0000B850 3240                       		movea.w	d0,a1
0000B852 6100 0000                  		bsr.w	DeleteObject2
0000B856 51CA FFEC                  		dbf	d2,loc_B0F4
0000B85A 117C 0000 0035             		move.b	#0,$35(a0)
0000B860 117C 0000 0034             		move.b	#0,$34(a0)
0000B866                            
0000B866                            locret_B116:
0000B866 4E75                       		rts	
0000B868                            ; ===========================================================================
0000B868                            ; ---------------------------------------------------------------------------
0000B868                            ; Collision data for large moving platforms (MZ)
0000B868                            ; ---------------------------------------------------------------------------
0000B868                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8B4                            		even
0000B8B4                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8E0                            		even
0000B8E0                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B92C                            		even
0000B92C                            ; ===========================================================================
0000B92C                            ; ---------------------------------------------------------------------------
0000B92C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B92C                            ; (appears when	you walk on sinking platforms)
0000B92C                            ; ---------------------------------------------------------------------------
0000B92C                            
0000B92C                            Obj35:					; XREF: Obj_Index
0000B92C 7000                       		moveq	#0,d0
0000B92E 1028 0024                  		move.b	$24(a0),d0
0000B932 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B936 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B93A                            ; ===========================================================================
0000B93A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B93C 0000                       		dc.w loc_B238-Obj35_Index
0000B93E 0000                       		dc.w Obj35_Move-Obj35_Index
0000B940                            ; ===========================================================================
0000B940                            
0000B940                            Obj35_Main:				; XREF: Obj35_Index
0000B940 5428 0024                  		addq.b	#2,$24(a0)
0000B944 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B94C 317C 0345 0002             		move.w	#$345,2(a0)
0000B952 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B958 117C 0004 0001             		move.b	#4,1(a0)
0000B95E 117C 0001 0018             		move.b	#1,$18(a0)
0000B964 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B96A 117C 0008 0019             		move.b	#8,$19(a0)
0000B970 303C 00C8                  		move.w	#$C8,d0
0000B974 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B97A 4A28 0028                  		tst.b	$28(a0)
0000B97E 6700                       		beq.s	loc_B238
0000B980 5428 0024                  		addq.b	#2,$24(a0)
0000B984 6000 0000                  		bra.w	Obj35_Move
0000B988                            ; ===========================================================================
0000B988                            
0000B988                            loc_B238:				; XREF: Obj35_Index
0000B988 2268 0030                  		movea.l	$30(a0),a1
0000B98C 3228 0008                  		move.w	8(a0),d1
0000B990 9268 002A                  		sub.w	$2A(a0),d1
0000B994 0641 000C                  		addi.w	#$C,d1
0000B998 3001                       		move.w	d1,d0
0000B99A E248                       		lsr.w	#1,d0
0000B99C 1031 0000                  		move.b	(a1,d0.w),d0
0000B9A0 4440                       		neg.w	d0
0000B9A2 D068 002C                  		add.w	$2C(a0),d0
0000B9A6 3400                       		move.w	d0,d2
0000B9A8 D068 003C                  		add.w	$3C(a0),d0
0000B9AC 3140 000C                  		move.w	d0,$C(a0)
0000B9B0 0C41 0084                  		cmpi.w	#$84,d1
0000B9B4 6400                       		bcc.s	loc_B2B0
0000B9B6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9BE 0C41 0080                  		cmpi.w	#$80,d1
0000B9C2 6400                       		bcc.s	loc_B2B0
0000B9C4 2028 0008                  		move.l	8(a0),d0
0000B9C8 0680 0008 0000             		addi.l	#$80000,d0
0000B9CE 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9D4 6600                       		bne.s	loc_B2B0
0000B9D6 6100 0000                  		bsr.w	SingleObjLoad2
0000B9DA 6600                       		bne.s	loc_B2B0
0000B9DC 12BC 0035                  		move.b	#$35,0(a1)
0000B9E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9E6 3342 002C                  		move.w	d2,$2C(a1)
0000B9EA 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B9F0 137C 0001 0028             		move.b	#1,$28(a1)
0000B9F6 2468 0038                  		movea.l	$38(a0),a2
0000B9FA 6100 FDF0                  		bsr.w	sub_B09C
0000B9FE                            
0000B9FE                            loc_B2B0:
0000B9FE 6000                       		bra.s	Obj35_Animate
0000BA00                            ; ===========================================================================
0000BA00                            
0000BA00                            Obj35_Move:				; XREF: Obj35_Index
0000BA00 3028 002C                  		move.w	$2C(a0),d0
0000BA04 D068 003C                  		add.w	$3C(a0),d0
0000BA08 3140 000C                  		move.w	d0,$C(a0)
0000BA0C                            
0000BA0C                            Obj35_Animate:				; XREF: loc_B238
0000BA0C 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA12 6100 F4AA                  		bsr.w	AnimateSprite
0000BA16 6000 0000                  		bra.w	DisplaySprite
0000BA1A                            ; ===========================================================================
0000BA1A                            Ani_obj35:
0000BA1A                            	include "_anim\obj35.asm"
0000BA1A                            ; ---------------------------------------------------------------------------
0000BA1A                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA1A                            ; ---------------------------------------------------------------------------
0000BA1A 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA1C 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA22                            		even
0000BA22                            		even
0000BA22                            
0000BA22                            ; ---------------------------------------------------------------------------
0000BA22                            ; Sprite mappings - large moving platforms (MZ)
0000BA22                            ; ---------------------------------------------------------------------------
0000BA22                            Map_obj2F:
0000BA22                            	include "_maps\obj2F.asm"
0000BA22                            ; ---------------------------------------------------------------------------
0000BA22                            ; Sprite mappings - large moving platforms (MZ)
0000BA22                            ; ---------------------------------------------------------------------------
0000BA22 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA24 0000                       		dc.w byte_B31C-Map_obj2F
0000BA26 0000                       		dc.w byte_B34F-Map_obj2F
0000BA28 0D                         byte_B2DA:	dc.b $D
0000BA29 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA2E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA33 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA38 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA3D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA42 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA47 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA4C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA51 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA56 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA5B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA60 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA65 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA6A 0A                         byte_B31C:	dc.b $A
0000BA6B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA70 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA75 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA7A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA7F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA84 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA89 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA8E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA93 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BA98 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BA9D 06                         byte_B34F:	dc.b 6
0000BA9E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BAA3 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAA8 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BAAD D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BAB2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BAB7 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BABC                            		even
0000BABC                            		even
0000BABC                            
0000BABC                            ; ---------------------------------------------------------------------------
0000BABC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BABC                            ; ---------------------------------------------------------------------------
0000BABC                            Map_obj14:
0000BABC                            	include "_maps\obj14.asm"
0000BABC                            ; --------------------------------------------------------------------------------
0000BABC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BABC                            ; --------------------------------------------------------------------------------
0000BABC                            
0000BABC                            SME_C6wT7:	
0000BABC 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BAC0 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BAC4 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BAC8 01                         SME_C6wT7_C:	dc.b 1	
0000BAC9 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BACE 01                         SME_C6wT7_12:	dc.b 1	
0000BACF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAD4 02                         SME_C6wT7_18:	dc.b 2	
0000BAD5 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BADA E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BADF 01                         SME_C6wT7_23:	dc.b 1	
0000BAE0 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAE5 01                         SME_C6wT7_29:	dc.b 1	
0000BAE6 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAEB 01                         SME_C6wT7_2F:	dc.b 1	
0000BAEC F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BAF2 00                         		even
0000BAF2 00                         		even
0000BAF2                            
0000BAF2                            ; ===========================================================================
0000BAF2                            ; ---------------------------------------------------------------------------
0000BAF2                            ; Object 30 - large green glassy blocks	(MZ)
0000BAF2                            ; ---------------------------------------------------------------------------
0000BAF2                            
0000BAF2                            Obj30:					; XREF: Obj_Index
0000BAF2 7000                       		moveq	#0,d0
0000BAF4 1028 0024                  		move.b	$24(a0),d0
0000BAF8 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BAFC 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB00 3028 0008                  		move.w	8(a0),d0
0000BB04 0240 FF80                  		andi.w	#$FF80,d0
0000BB08 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB0C 0441 0080                  		subi.w	#$80,d1
0000BB10 0241 FF80                  		andi.w	#$FF80,d1
0000BB14 9041                       		sub.w	d1,d0
0000BB16 0C40 0280                  		cmpi.w	#$280,d0
0000BB1A 6200 0000                  		bhi.w	Obj30_Delete
0000BB1E 6000 0000                  		bra.w	DisplaySprite
0000BB22                            ; ===========================================================================
0000BB22                            
0000BB22                            Obj30_Delete:
0000BB22 6000 0000                  		bra.w	DeleteObject
0000BB26                            ; ===========================================================================
0000BB26 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB28 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB2A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB2C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB2E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB30                            
0000BB30 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB33 0400 01                    		dc.b 4,	0, 1
0000BB36 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB39 0800 01                    		dc.b 8,	0, 1
0000BB3C                            ; ===========================================================================
0000BB3C                            
0000BB3C                            Obj30_Main:				; XREF: Obj30_Index
0000BB3C 45F9 0000 BB30             		lea	(Obj30_Vars1).l,a2
0000BB42 7201                       		moveq	#1,d1
0000BB44 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB4A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB50 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB52 45F9 0000 BB36             		lea	(Obj30_Vars2).l,a2
0000BB58 7201                       		moveq	#1,d1
0000BB5A 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB60                            
0000BB60                            loc_B40C:
0000BB60 2248                       		movea.l	a0,a1
0000BB62 6000                       		bra.s	Obj30_Load	; load main object
0000BB64                            ; ===========================================================================
0000BB64                            
0000BB64                            Obj30_Loop:
0000BB64 6100 0000                  		bsr.w	SingleObjLoad2
0000BB68 6600                       		bne.s	loc_B480
0000BB6A                            
0000BB6A                            Obj30_Load:				; XREF: Obj30_Main
0000BB6A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB6E 12BC 0030                  		move.b	#$30,0(a1)
0000BB72 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB78 101A                       		move.b	(a2)+,d0
0000BB7A 4880                       		ext.w	d0
0000BB7C D068 000C                  		add.w	$C(a0),d0
0000BB80 3340 000C                  		move.w	d0,$C(a1)
0000BB84 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB8C 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB92 137C 0004 0001             		move.b	#4,1(a1)
0000BB98 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BB9E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBA4 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBAA 137C 0004 0018             		move.b	#4,$18(a1)
0000BBB0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBB4 2348 003C                  		move.l	a0,$3C(a1)
0000BBB8 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBBC                            
0000BBBC 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBC2 137C 0003 0018             		move.b	#3,$18(a1)
0000BBC8 5029 0028                  		addq.b	#8,$28(a1)
0000BBCC 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBD2                            
0000BBD2                            loc_B480:
0000BBD2 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBD8 08E8 0004 0001             		bset	#4,1(a0)
0000BBDE                            
0000BBDE                            Obj30_Block012:				; XREF: Obj30_Index
0000BBDE 6100 0000                  		bsr.w	Obj30_Types
0000BBE2 323C 002B                  		move.w	#$2B,d1
0000BBE6 343C 0048                  		move.w	#$48,d2
0000BBEA 363C 0049                  		move.w	#$49,d3
0000BBEE 3828 0008                  		move.w	8(a0),d4
0000BBF2 6000 0000                  		bra.w	SolidObject
0000BBF6                            ; ===========================================================================
0000BBF6                            
0000BBF6                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BBF6 2268 003C                  		movea.l	$3C(a0),a1
0000BBFA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC00 6000 0000                  		bra.w	Obj30_Types
0000BC04                            ; ===========================================================================
0000BC04                            
0000BC04                            Obj30_Block34:				; XREF: Obj30_Index
0000BC04 6100 0000                  		bsr.w	Obj30_Types
0000BC08 323C 002B                  		move.w	#$2B,d1
0000BC0C 343C 0038                  		move.w	#$38,d2
0000BC10 363C 0039                  		move.w	#$39,d3
0000BC14 3828 0008                  		move.w	8(a0),d4
0000BC18 6000 0000                  		bra.w	SolidObject
0000BC1C                            ; ===========================================================================
0000BC1C                            
0000BC1C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC1C 2268 003C                  		movea.l	$3C(a0),a1
0000BC20 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC26 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC2C 6000 0002                  		bra.w	*+4
0000BC30                            
0000BC30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC30                            
0000BC30                            
0000BC30                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC30 7000                       		moveq	#0,d0
0000BC32 1028 0028                  		move.b	$28(a0),d0
0000BC36 0240 0007                  		andi.w	#7,d0
0000BC3A D040                       		add.w	d0,d0
0000BC3C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC40 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC44                            ; End of function Obj30_Types
0000BC44                            
0000BC44                            ; ===========================================================================
0000BC44 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC46 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC48 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC4A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC4C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC4E                            ; ===========================================================================
0000BC4E                            
0000BC4E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC4E 4E75                       		rts	
0000BC50                            ; ===========================================================================
0000BC50                            
0000BC50                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC50 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC54 323C 0040                  		move.w	#$40,d1
0000BC58 6000                       		bra.s	loc_B514
0000BC5A                            ; ===========================================================================
0000BC5A                            
0000BC5A                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC5A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC5E 323C 0040                  		move.w	#$40,d1
0000BC62 4440                       		neg.w	d0
0000BC64 D041                       		add.w	d1,d0
0000BC66                            
0000BC66                            loc_B514:				; XREF: Obj30_Type01
0000BC66 0828 0003 0028             		btst	#3,$28(a0)
0000BC6C 6700                       		beq.s	loc_B526
0000BC6E 4440                       		neg.w	d0
0000BC70 D041                       		add.w	d1,d0
0000BC72 E208                       		lsr.b	#1,d0
0000BC74 0640 0020                  		addi.w	#$20,d0
0000BC78                            
0000BC78                            loc_B526:
0000BC78 6000 0000                  		bra.w	loc_B5EE
0000BC7C                            ; ===========================================================================
0000BC7C                            
0000BC7C                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC7C 0828 0003 0028             		btst	#3,$28(a0)
0000BC82 6700                       		beq.s	loc_B53E
0000BC84 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC88 0440 0010                  		subi.w	#$10,d0
0000BC8C 6000 0000                  		bra.w	loc_B5EE
0000BC90                            ; ===========================================================================
0000BC90                            
0000BC90                            loc_B53E:
0000BC90 0828 0003 0022             		btst	#3,$22(a0)
0000BC96 6600                       		bne.s	loc_B54E
0000BC98 08A8 0000 0034             		bclr	#0,$34(a0)
0000BC9E 6000                       		bra.s	loc_B582
0000BCA0                            ; ===========================================================================
0000BCA0                            
0000BCA0                            loc_B54E:
0000BCA0 4A28 0034                  		tst.b	$34(a0)
0000BCA4 6600                       		bne.s	loc_B582
0000BCA6 117C 0001 0034             		move.b	#1,$34(a0)
0000BCAC 08E8 0000 0035             		bset	#0,$35(a0)
0000BCB2 6700                       		beq.s	loc_B582
0000BCB4 08E8 0007 0034             		bset	#7,$34(a0)
0000BCBA 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCC0 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCC6 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCCC 6600                       		bne.s	loc_B582
0000BCCE 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCD4                            
0000BCD4                            loc_B582:
0000BCD4 4A28 0034                  		tst.b	$34(a0)
0000BCD8 6A00                       		bpl.s	loc_B5AA
0000BCDA 4A28 0038                  		tst.b	$38(a0)
0000BCDE 6700                       		beq.s	loc_B594
0000BCE0 5328 0038                  		subq.b	#1,$38(a0)
0000BCE4 6600                       		bne.s	loc_B5AA
0000BCE6                            
0000BCE6                            loc_B594:
0000BCE6 4A68 0032                  		tst.w	$32(a0)
0000BCEA 6700                       		beq.s	loc_B5A4
0000BCEC 5368 0032                  		subq.w	#1,$32(a0)
0000BCF0 5368 0036                  		subq.w	#1,$36(a0)
0000BCF4 6600                       		bne.s	loc_B5AA
0000BCF6                            
0000BCF6                            loc_B5A4:
0000BCF6 08A8 0007 0034             		bclr	#7,$34(a0)
0000BCFC                            
0000BCFC                            loc_B5AA:
0000BCFC 3028 0032                  		move.w	$32(a0),d0
0000BD00 6000                       		bra.s	loc_B5EE
0000BD02                            ; ===========================================================================
0000BD02                            
0000BD02                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD02 0828 0003 0028             		btst	#3,$28(a0)
0000BD08 6700                       		beq.s	Obj30_ChkSwitch
0000BD0A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD0E 0440 0010                  		subi.w	#$10,d0
0000BD12 6000                       		bra.s	loc_B5EE
0000BD14                            ; ===========================================================================
0000BD14                            
0000BD14                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD14 4A28 0034                  		tst.b	$34(a0)
0000BD18 6600                       		bne.s	loc_B5E0
0000BD1A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD1E 7000                       		moveq	#0,d0
0000BD20 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD24 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD26 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD2A 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD2C 117C 0001 0034             		move.b	#1,$34(a0)
0000BD32                            
0000BD32                            loc_B5E0:
0000BD32 4A68 0032                  		tst.w	$32(a0)
0000BD36 6700                       		beq.s	loc_B5EA
0000BD38 5568 0032                  		subq.w	#2,$32(a0)
0000BD3C                            
0000BD3C                            loc_B5EA:
0000BD3C 3028 0032                  		move.w	$32(a0),d0
0000BD40                            
0000BD40                            loc_B5EE:
0000BD40 3228 0030                  		move.w	$30(a0),d1
0000BD44 9240                       		sub.w	d0,d1
0000BD46 3141 000C                  		move.w	d1,$C(a0)
0000BD4A 4E75                       		rts	
0000BD4C                            ; ===========================================================================
0000BD4C                            ; ---------------------------------------------------------------------------
0000BD4C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD4C                            ; ---------------------------------------------------------------------------
0000BD4C                            Map_obj30:
0000BD4C                            	include "_maps\obj30.asm"
0000BD4C                            ; ---------------------------------------------------------------------------
0000BD4C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD4C                            ; ---------------------------------------------------------------------------
0000BD4C 0000                       		dc.w byte_B600-Map_obj30
0000BD4E 0000                       		dc.w byte_B63D-Map_obj30
0000BD50 0000                       		dc.w byte_B648-Map_obj30
0000BD52 0C                         byte_B600:	dc.b $C
0000BD53 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD58 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD5D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD62 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD67 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD6C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD71 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD76 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD7B 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD80 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD85 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD8A 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD8F 02                         byte_B63D:	dc.b 2
0000BD90 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD95 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BD9A 0A                         byte_B648:	dc.b $A
0000BD9B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDA0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDA5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDAA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDAF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDB4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDB9 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDBE 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDC3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDC8 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDCE 00                         		even
0000BDCE 00                         		even
0000BDCE                            
0000BDCE                            ; ===========================================================================
0000BDCE                            ; ---------------------------------------------------------------------------
0000BDCE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDCE                            ; ---------------------------------------------------------------------------
0000BDCE                            
0000BDCE                            Obj31:					; XREF: Obj_Index
0000BDCE 7000                       		moveq	#0,d0
0000BDD0 1028 0024                  		move.b	$24(a0),d0
0000BDD4 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDD8 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDDC                            ; ===========================================================================
0000BDDC 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDDE 0000                       		dc.w loc_B798-Obj31_Index
0000BDE0 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDE2 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDE4 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDE6                            
0000BDE6 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDE8 0100                       		dc.b 1,	0
0000BDEA                            
0000BDEA 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDED 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDF0 08CC 03                    		dc.b 8,	$CC, 3
0000BDF3 06F0 02                    		dc.b 6,	$F0, 2
0000BDF6                            
0000BDF6 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BDFA 5000 7800                  		dc.w $5000, $7800
0000BDFE 3800 5800                  		dc.w $3800, $5800
0000BE02 B800                       		dc.w $B800
0000BE04                            ; ===========================================================================
0000BE04                            
0000BE04                            Obj31_Main:				; XREF: Obj31_Index
0000BE04 7000                       		moveq	#0,d0
0000BE06 1028 0028                  		move.b	$28(a0),d0
0000BE0A 6A00                       		bpl.s	loc_B6CE
0000BE0C 0240 007F                  		andi.w	#$7F,d0
0000BE10 D040                       		add.w	d0,d0
0000BE12 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE16 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE1A 101A                       		move.b	(a2)+,d0
0000BE1C 1140 0028                  		move.b	d0,$28(a0)
0000BE20                            
0000BE20                            loc_B6CE:
0000BE20 0200 000F                  		andi.b	#$F,d0
0000BE24 D040                       		add.w	d0,d0
0000BE26 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE2A 4A40                       		tst.w	d0
0000BE2C 6600                       		bne.s	loc_B6E0
0000BE2E 3142 0032                  		move.w	d2,$32(a0)
0000BE32                            
0000BE32                            loc_B6E0:
0000BE32 45F9 0000 BDEA             		lea	(Obj31_Var).l,a2
0000BE38 2248                       		movea.l	a0,a1
0000BE3A 7203                       		moveq	#3,d1
0000BE3C 6000                       		bra.s	Obj31_MakeStomper
0000BE3E                            ; ===========================================================================
0000BE3E                            
0000BE3E                            Obj31_Loop:
0000BE3E 6100 0000                  		bsr.w	SingleObjLoad2
0000BE42 6600 0000                  		bne.w	Obj31_SetSize
0000BE46                            
0000BE46                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE46 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE4A 12BC 0031                  		move.b	#$31,0(a1)
0000BE4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE54 101A                       		move.b	(a2)+,d0
0000BE56 4880                       		ext.w	d0
0000BE58 D068 000C                  		add.w	$C(a0),d0
0000BE5C 3340 000C                  		move.w	d0,$C(a1)
0000BE60 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE68 337C 0300 0002             		move.w	#$300,2(a1)
0000BE6E 137C 0004 0001             		move.b	#4,1(a1)
0000BE74 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE7A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE80 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE86 3342 0034                  		move.w	d2,$34(a1)
0000BE8A 137C 0004 0018             		move.b	#4,$18(a1)
0000BE90 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE94 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BE9A 6600                       		bne.s	loc_B76A
0000BE9C 5341                       		subq.w	#1,d1
0000BE9E 1028 0028                  		move.b	$28(a0),d0
0000BEA2 0240 00F0                  		andi.w	#$F0,d0
0000BEA6 0C40 0020                  		cmpi.w	#$20,d0
0000BEAA 679A                       		beq.s	Obj31_MakeStomper
0000BEAC 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEB2 137C 0090 0020             		move.b	#$90,$20(a1)
0000BEB8 5241                       		addq.w	#1,d1
0000BEBA                            
0000BEBA                            loc_B76A:
0000BEBA 2348 003C                  		move.l	a0,$3C(a1)
0000BEBE 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BEC2                            
0000BEC2 137C 0003 0018             		move.b	#3,$18(a1)
0000BEC8                            
0000BEC8                            Obj31_SetSize:
0000BEC8 7000                       		moveq	#0,d0
0000BECA 1028 0028                  		move.b	$28(a0),d0
0000BECE E648                       		lsr.w	#3,d0
0000BED0 0200 000E                  		andi.b	#$E,d0
0000BED4 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BED8 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEDC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEE0 6000                       		bra.s	loc_B798
0000BEE2                            ; ===========================================================================
0000BEE2 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEE4 3009                       		dc.b $30, 9
0000BEE6 100A                       		dc.b $10, $A
0000BEE8                            ; ===========================================================================
0000BEE8                            
0000BEE8                            loc_B798:				; XREF: Obj31_Index
0000BEE8 6100 0000                  		bsr.w	Obj31_Types
0000BEEC 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEF2 7200                       		moveq	#0,d1
0000BEF4 1228 0019                  		move.b	$19(a0),d1
0000BEF8 0641 000B                  		addi.w	#$B,d1
0000BEFC 343C 000C                  		move.w	#$C,d2
0000BF00 363C 000D                  		move.w	#$D,d3
0000BF04 3828 0008                  		move.w	8(a0),d4
0000BF08 6100 0000                  		bsr.w	SolidObject
0000BF0C 0828 0003 0022             		btst	#3,$22(a0)
0000BF12 6700                       		beq.s	Obj31_Display
0000BF14 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF1A 6400                       		bcc.s	Obj31_Display
0000BF1C 2448                       		movea.l	a0,a2
0000BF1E 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF22 4EB9 0000 0000             		jsr	KillSonic
0000BF28 204A                       		movea.l	a2,a0
0000BF2A                            
0000BF2A                            Obj31_Display:
0000BF2A 6100 0000                  		bsr.w	DisplaySprite
0000BF2E 6000 0000                  		bra.w	Obj31_ChkDel
0000BF32                            ; ===========================================================================
0000BF32                            
0000BF32                            loc_B7E2:				; XREF: Obj31_Index
0000BF32 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF38 08E8 0004 0001             		bset	#4,1(a0)
0000BF3E 2268 003C                  		movea.l	$3C(a0),a1
0000BF42 1029 0032                  		move.b	$32(a1),d0
0000BF46 EA08                       		lsr.b	#5,d0
0000BF48 5600                       		addq.b	#3,d0
0000BF4A 1140 001A                  		move.b	d0,$1A(a0)
0000BF4E                            
0000BF4E                            loc_B7FE:				; XREF: Obj31_Index
0000BF4E 2268 003C                  		movea.l	$3C(a0),a1
0000BF52 7000                       		moveq	#0,d0
0000BF54 1029 0032                  		move.b	$32(a1),d0
0000BF58 D068 0030                  		add.w	$30(a0),d0
0000BF5C 3140 000C                  		move.w	d0,$C(a0)
0000BF60                            
0000BF60                            Obj31_Display2:				; XREF: Obj31_Index
0000BF60 6100 0000                  		bsr.w	DisplaySprite
0000BF64                            
0000BF64                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF64 3028 0008                  		move.w	8(a0),d0
0000BF68 0240 FF80                  		andi.w	#$FF80,d0
0000BF6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF70 0441 0080                  		subi.w	#$80,d1
0000BF74 0241 FF80                  		andi.w	#$FF80,d1
0000BF78 9041                       		sub.w	d1,d0
0000BF7A 0C40 0280                  		cmpi.w	#$280,d0
0000BF7E 6200 0000                  		bhi.w	DeleteObject
0000BF82 4E75                       		rts	
0000BF84                            ; ===========================================================================
0000BF84                            
0000BF84                            Obj31_Types:				; XREF: loc_B798
0000BF84 1028 0028                  		move.b	$28(a0),d0
0000BF88 0240 000F                  		andi.w	#$F,d0
0000BF8C D040                       		add.w	d0,d0
0000BF8E 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF92 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BF96                            ; ===========================================================================
0000BF96 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BF98 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF9A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF9C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF9E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFA2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA4                            ; ===========================================================================
0000BFA4                            
0000BFA4                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFA4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFA8 7000                       		moveq	#0,d0
0000BFAA 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFAE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFB2 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFB4 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFB8 6A00                       		bpl.s	loc_B872
0000BFBA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFC0 6700                       		beq.s	loc_B8A0
0000BFC2                            
0000BFC2                            loc_B872:
0000BFC2 4A68 0032                  		tst.w	$32(a0)
0000BFC6 6700                       		beq.s	loc_B8A0
0000BFC8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFCC 0200 000F                  		andi.b	#$F,d0
0000BFD0 6600                       		bne.s	loc_B892
0000BFD2 4A28 0001                  		tst.b	1(a0)
0000BFD6 6A00                       		bpl.s	loc_B892
0000BFD8 303C 00C7                  		move.w	#$C7,d0
0000BFDC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFE2                            
0000BFE2                            loc_B892:
0000BFE2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFE8 6400                       		bcc.s	Obj31_Restart
0000BFEA 317C 0000 0032             		move.w	#0,$32(a0)
0000BFF0                            
0000BFF0                            loc_B8A0:
0000BFF0 317C 0000 0012             		move.w	#0,$12(a0)
0000BFF6 6000                       		bra.s	Obj31_Restart
0000BFF8                            ; ===========================================================================
0000BFF8                            
0000BFF8                            loc_B8A8:				; XREF: Obj31_Type00
0000BFF8 3228 0034                  		move.w	$34(a0),d1
0000BFFC B268 0032                  		cmp.w	$32(a0),d1
0000C000 6700                       		beq.s	Obj31_Restart
0000C002 3028 0012                  		move.w	$12(a0),d0
0000C006 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C00C D168 0032                  		add.w	d0,$32(a0)
0000C010 B268 0032                  		cmp.w	$32(a0),d1
0000C014 6200                       		bhi.s	Obj31_Restart
0000C016 3141 0032                  		move.w	d1,$32(a0)
0000C01A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C020 4A28 0001                  		tst.b	1(a0)
0000C024 6A00                       		bpl.s	Obj31_Restart
0000C026 303C 00BD                  		move.w	#$BD,d0
0000C02A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C030                            
0000C030                            Obj31_Restart:
0000C030 7000                       		moveq	#0,d0
0000C032 1028 0032                  		move.b	$32(a0),d0
0000C036 D068 0030                  		add.w	$30(a0),d0
0000C03A 3140 000C                  		move.w	d0,$C(a0)
0000C03E 4E75                       		rts	
0000C040                            ; ===========================================================================
0000C040                            
0000C040                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C040 4A68 0036                  		tst.w	$36(a0)
0000C044 6700                       		beq.s	loc_B938
0000C046 4A68 0038                  		tst.w	$38(a0)
0000C04A 6700                       		beq.s	loc_B902
0000C04C 5368 0038                  		subq.w	#1,$38(a0)
0000C050 6000                       		bra.s	loc_B97C
0000C052                            ; ===========================================================================
0000C052                            
0000C052                            loc_B902:
0000C052 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C056 0200 000F                  		andi.b	#$F,d0
0000C05A 6600                       		bne.s	loc_B91C
0000C05C 4A28 0001                  		tst.b	1(a0)
0000C060 6A00                       		bpl.s	loc_B91C
0000C062 303C 00C7                  		move.w	#$C7,d0
0000C066 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C06C                            
0000C06C                            loc_B91C:
0000C06C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C072 6400                       		bcc.s	loc_B97C
0000C074 317C 0000 0032             		move.w	#0,$32(a0)
0000C07A 317C 0000 0012             		move.w	#0,$12(a0)
0000C080 317C 0000 0036             		move.w	#0,$36(a0)
0000C086 6000                       		bra.s	loc_B97C
0000C088                            ; ===========================================================================
0000C088                            
0000C088                            loc_B938:				; XREF: Obj31_Type01
0000C088 3228 0034                  		move.w	$34(a0),d1
0000C08C B268 0032                  		cmp.w	$32(a0),d1
0000C090 6700                       		beq.s	loc_B97C
0000C092 3028 0012                  		move.w	$12(a0),d0
0000C096 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C09C D168 0032                  		add.w	d0,$32(a0)
0000C0A0 B268 0032                  		cmp.w	$32(a0),d1
0000C0A4 6200                       		bhi.s	loc_B97C
0000C0A6 3141 0032                  		move.w	d1,$32(a0)
0000C0AA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0B0 317C 0001 0036             		move.w	#1,$36(a0)
0000C0B6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0BC 4A28 0001                  		tst.b	1(a0)
0000C0C0 6A00                       		bpl.s	loc_B97C
0000C0C2 303C 00BD                  		move.w	#$BD,d0
0000C0C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0CC                            
0000C0CC                            loc_B97C:
0000C0CC 6000 FF62                  		bra.w	Obj31_Restart
0000C0D0                            ; ===========================================================================
0000C0D0                            
0000C0D0                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0D4 9068 0008                  		sub.w	8(a0),d0
0000C0D8 6400                       		bcc.s	loc_B98C
0000C0DA 4440                       		neg.w	d0
0000C0DC                            
0000C0DC                            loc_B98C:
0000C0DC 0C40 0090                  		cmpi.w	#$90,d0
0000C0E0 6400                       		bcc.s	loc_B996
0000C0E2 5228 0028                  		addq.b	#1,$28(a0)
0000C0E6                            
0000C0E6                            loc_B996:
0000C0E6 6000 FF48                  		bra.w	Obj31_Restart
0000C0EA                            ; ===========================================================================
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            
0000C0EA                            Obj45:					; XREF: Obj_Index
0000C0EA 7000                       		moveq	#0,d0
0000C0EC 1028 0024                  		move.b	$24(a0),d0
0000C0F0 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C0F4 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C0F8                            ; ===========================================================================
0000C0F8 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C0FA 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C0FC 0000                       		dc.w loc_BA8E-Obj45_Index
0000C0FE 0000                       		dc.w Obj45_Display-Obj45_Index
0000C100 0000                       		dc.w loc_BA7A-Obj45_Index
0000C102                            
0000C102 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C105 04E4 01                    		dc.b	4, $E4,	  1
0000C108 0834 03                    		dc.b	8, $34,	  3
0000C10B 0628 02                    		dc.b	6, $28,	  2
0000C10E                            
0000C10E 3800                       word_B9BE:	dc.w $3800
0000C110 A000                       		dc.w -$6000
0000C112 5000                       		dc.w $5000
0000C114                            ; ===========================================================================
0000C114                            
0000C114                            Obj45_Main:				; XREF: Obj45_Index
0000C114 7000                       		moveq	#0,d0
0000C116 1028 0028                  		move.b	$28(a0),d0
0000C11A D040                       		add.w	d0,d0
0000C11C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C120 45F9 0000 C102             		lea	(Obj45_Var).l,a2
0000C126 2248                       		movea.l	a0,a1
0000C128 7203                       		moveq	#3,d1
0000C12A 6000                       		bra.s	Obj45_Load
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            Obj45_Loop:
0000C12C 6100 0000                  		bsr.w	SingleObjLoad2
0000C130 6600                       		bne.s	loc_BA52
0000C132                            
0000C132                            Obj45_Load:				; XREF: Obj45_Main
0000C132 135A 0024                  		move.b	(a2)+,$24(a1)
0000C136 12BC 0045                  		move.b	#$45,0(a1)
0000C13A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C140 101A                       		move.b	(a2)+,d0
0000C142 4880                       		ext.w	d0
0000C144 D068 0008                  		add.w	8(a0),d0
0000C148 3340 0008                  		move.w	d0,8(a1)
0000C14C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C154 337C 0300 0002             		move.w	#$300,2(a1)
0000C15A 137C 0004 0001             		move.b	#4,1(a1)
0000C160 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C166 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C16C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C172 137C 0020 0019             		move.b	#$20,$19(a1)
0000C178 3342 0034                  		move.w	d2,$34(a1)
0000C17C 137C 0004 0018             		move.b	#4,$18(a1)
0000C182 0C12 0001                  		cmpi.b	#1,(a2)
0000C186 6600                       		bne.s	loc_BA40
0000C188 137C 0091 0020             		move.b	#$91,$20(a1)
0000C18E                            
0000C18E                            loc_BA40:
0000C18E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C192 2348 003C                  		move.l	a0,$3C(a1)
0000C196 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C19A                            
0000C19A 137C 0003 0018             		move.b	#3,$18(a1)
0000C1A0                            
0000C1A0                            loc_BA52:
0000C1A0 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1A6                            
0000C1A6                            Obj45_Solid:				; XREF: Obj45_Index
0000C1A6 3F28 0008                  		move.w	8(a0),-(sp)
0000C1AA 6100 0000                  		bsr.w	Obj45_Move
0000C1AE 323C 0017                  		move.w	#$17,d1
0000C1B2 343C 0020                  		move.w	#$20,d2
0000C1B6 363C 0020                  		move.w	#$20,d3
0000C1BA 381F                       		move.w	(sp)+,d4
0000C1BC 6100 0000                  		bsr.w	SolidObject
0000C1C0 6100 0000                  		bsr.w	DisplaySprite
0000C1C4 6000 0000                  		bra.w	Obj45_ChkDel
0000C1C8                            ; ===========================================================================
0000C1C8                            
0000C1C8                            loc_BA7A:				; XREF: Obj45_Index
0000C1C8 2268 003C                  		movea.l	$3C(a0),a1
0000C1CC 1029 0032                  		move.b	$32(a1),d0
0000C1D0 0600 0010                  		addi.b	#$10,d0
0000C1D4 EA08                       		lsr.b	#5,d0
0000C1D6 5600                       		addq.b	#3,d0
0000C1D8 1140 001A                  		move.b	d0,$1A(a0)
0000C1DC                            
0000C1DC                            loc_BA8E:				; XREF: Obj45_Index
0000C1DC 2268 003C                  		movea.l	$3C(a0),a1
0000C1E0 7000                       		moveq	#0,d0
0000C1E2 1029 0032                  		move.b	$32(a1),d0
0000C1E6 4440                       		neg.w	d0
0000C1E8 D068 0030                  		add.w	$30(a0),d0
0000C1EC 3140 0008                  		move.w	d0,8(a0)
0000C1F0                            
0000C1F0                            Obj45_Display:				; XREF: Obj45_Index
0000C1F0 6100 0000                  		bsr.w	DisplaySprite
0000C1F4                            
0000C1F4                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C1F4 3028 003A                  		move.w	$3A(a0),d0
0000C1F8 0240 FF80                  		andi.w	#$FF80,d0
0000C1FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C200 0441 0080                  		subi.w	#$80,d1
0000C204 0241 FF80                  		andi.w	#$FF80,d1
0000C208 9041                       		sub.w	d1,d0
0000C20A 0C40 0280                  		cmpi.w	#$280,d0
0000C20E 6200 0000                  		bhi.w	DeleteObject
0000C212 4E75                       		rts	
0000C214                            
0000C214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C214                            
0000C214                            
0000C214                            Obj45_Move:				; XREF: Obj45_Solid
0000C214 7000                       		moveq	#0,d0
0000C216 1028 0028                  		move.b	$28(a0),d0
0000C21A D040                       		add.w	d0,d0
0000C21C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C220 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C224                            ; End of function Obj45_Move
0000C224                            
0000C224                            ; ===========================================================================
0000C224 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C226 0000                       		dc.w loc_BADA-off_BAD6
0000C228                            ; ===========================================================================
0000C228                            
0000C228                            loc_BADA:				; XREF: off_BAD6
0000C228 4A68 0036                  		tst.w	$36(a0)
0000C22C 6700                       		beq.s	loc_BB08
0000C22E 4A68 0038                  		tst.w	$38(a0)
0000C232 6700                       		beq.s	loc_BAEC
0000C234 5368 0038                  		subq.w	#1,$38(a0)
0000C238 6000                       		bra.s	loc_BB3C
0000C23A                            ; ===========================================================================
0000C23A                            
0000C23A                            loc_BAEC:
0000C23A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C240 6400                       		bcc.s	loc_BB3C
0000C242 317C 0000 0032             		move.w	#0,$32(a0)
0000C248 317C 0000 0010             		move.w	#0,$10(a0)
0000C24E 317C 0000 0036             		move.w	#0,$36(a0)
0000C254 6000                       		bra.s	loc_BB3C
0000C256                            ; ===========================================================================
0000C256                            
0000C256                            loc_BB08:				; XREF: loc_BADA
0000C256 3228 0034                  		move.w	$34(a0),d1
0000C25A B268 0032                  		cmp.w	$32(a0),d1
0000C25E 6700                       		beq.s	loc_BB3C
0000C260 3028 0010                  		move.w	$10(a0),d0
0000C264 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C26A D168 0032                  		add.w	d0,$32(a0)
0000C26E B268 0032                  		cmp.w	$32(a0),d1
0000C272 6200                       		bhi.s	loc_BB3C
0000C274 3141 0032                  		move.w	d1,$32(a0)
0000C278 317C 0000 0010             		move.w	#0,$10(a0)
0000C27E 317C 0001 0036             		move.w	#1,$36(a0)
0000C284 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C28A                            
0000C28A                            loc_BB3C:
0000C28A 7000                       		moveq	#0,d0
0000C28C 1028 0032                  		move.b	$32(a0),d0
0000C290 4440                       		neg.w	d0
0000C292 D068 0030                  		add.w	$30(a0),d0
0000C296 3140 0008                  		move.w	d0,8(a0)
0000C29A 4E75                       		rts	
0000C29C                            ; ===========================================================================
0000C29C                            ; ---------------------------------------------------------------------------
0000C29C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C29C                            ; ---------------------------------------------------------------------------
0000C29C                            Map_obj31:
0000C29C                            	include "_maps\obj31.asm"
0000C29C                            ; ---------------------------------------------------------------------------
0000C29C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C29C                            ; ---------------------------------------------------------------------------
0000C29C 0000                       		dc.w byte_BB64-Map_obj31
0000C29E 0000                       		dc.w byte_BB7E-Map_obj31
0000C2A0 0000                       		dc.w byte_BB98-Map_obj31
0000C2A2 0000                       		dc.w byte_BB9E-Map_obj31
0000C2A4 0000                       		dc.w byte_BBA9-Map_obj31
0000C2A6 0000                       		dc.w byte_BBBE-Map_obj31
0000C2A8 0000                       		dc.w byte_BBDD-Map_obj31
0000C2AA 0000                       		dc.w byte_BC06-Map_obj31
0000C2AC 0000                       		dc.w byte_BC06-Map_obj31
0000C2AE 0000                       		dc.w byte_BC39-Map_obj31
0000C2B0 0000                       		dc.w byte_BC53-Map_obj31
0000C2B2 05                         byte_BB64:	dc.b 5
0000C2B3 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2B8 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2BD EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2C2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2C7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2CC 05                         byte_BB7E:	dc.b 5
0000C2CD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2D2 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2D7 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2DC F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2E1 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2E6 01                         byte_BB98:	dc.b 1
0000C2E7 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C2EC 02                         byte_BB9E:	dc.b 2
0000C2ED 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2F2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2F7 04                         byte_BBA9:	dc.b 4
0000C2F8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2FD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C302 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C307 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C30C 06                         byte_BBBE:	dc.b 6
0000C30D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C312 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C317 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C31C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C321 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C326 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C32B 08                         byte_BBDD:	dc.b 8
0000C32C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C331 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C336 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C33B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C340 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C345 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C34A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C34F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C354 0A                         byte_BC06:	dc.b $A
0000C355 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C35A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C35F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C364 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C369 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C36E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C373 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C378 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C37D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C382 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C387 05                         byte_BC39:	dc.b 5
0000C388 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C38D F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C392 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C397 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C39C EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3A1 01                         byte_BC53:	dc.b 1
0000C3A2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3A8 00                         		even
0000C3A8 00                         		even
0000C3A8                            
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            Map_obj45:
0000C3A8                            	include "_maps\obj45.asm"
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8 0000                       		dc.w byte_BC6C-Map_obj45
0000C3AA 0000                       		dc.w byte_BC7C-Map_obj45
0000C3AC 0000                       		dc.w byte_BC8C-Map_obj45
0000C3AE 0000                       		dc.w byte_BC92-Map_obj45
0000C3B0 0000                       		dc.w byte_BC9D-Map_obj45
0000C3B2 0000                       		dc.w byte_BCB2-Map_obj45
0000C3B4 0000                       		dc.w byte_BCD1-Map_obj45
0000C3B6 0000                       		dc.w byte_BCFA-Map_obj45
0000C3B8 0000                       		dc.w byte_BCFA-Map_obj45
0000C3BA 03                         byte_BC6C:	dc.b 3
0000C3BB E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3C0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3C5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3CA 03                         byte_BC7C:	dc.b 3
0000C3CB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3D0 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3D5 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3DA 01                         byte_BC8C:	dc.b 1
0000C3DB F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3E0 02                         byte_BC92:	dc.b 2
0000C3E1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3E6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3EB 04                         byte_BC9D:	dc.b 4
0000C3EC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3F1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3F6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3FB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C400 06                         byte_BCB2:	dc.b 6
0000C401 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C406 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C40B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C410 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C415 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C41A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C41F 08                         byte_BCD1:	dc.b 8
0000C420 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C425 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C42A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C42F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C434 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C439 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C43E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C443 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C448 08                         byte_BCFA:	dc.b 8
0000C449 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C44E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C453 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C458 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C45D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C462 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C467 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C46C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C471 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C476 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C47C 00                         		even
0000C47C 00                         		even
0000C47C                            
0000C47C                            ; ===========================================================================
0000C47C                            ; ---------------------------------------------------------------------------
0000C47C                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C47C                            ; ---------------------------------------------------------------------------
0000C47C                            
0000C47C                            Obj32:					; XREF: Obj_Index
0000C47C 7000                       		moveq	#0,d0
0000C47E 1028 0024                  		move.b	$24(a0),d0
0000C482 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C486 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C48A                            ; ===========================================================================
0000C48A 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C48C 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C48E                            ; ===========================================================================
0000C48E                            
0000C48E                            Obj32_Main:				; XREF: Obj32_Index
0000C48E 5428 0024                  		addq.b	#2,$24(a0)
0000C492 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C49A 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4A0 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4A6 6700                       		beq.s	loc_BD60
0000C4A8 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4AE                            
0000C4AE                            loc_BD60:
0000C4AE 117C 0004 0001             		move.b	#4,1(a0)
0000C4B4 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4BA 117C 0004 0018             		move.b	#4,$18(a0)
0000C4C0 5668 000C                  		addq.w	#3,$C(a0)
0000C4C4                            
0000C4C4                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4C4 4A28 0001                  		tst.b	1(a0)
0000C4C8 6A00                       		bpl.s	Obj32_Display
0000C4CA 323C 001B                  		move.w	#$1B,d1
0000C4CE 343C 0005                  		move.w	#5,d2
0000C4D2 363C 0005                  		move.w	#5,d3
0000C4D6 3828 0008                  		move.w	8(a0),d4
0000C4DA 6100 0000                  		bsr.w	SolidObject
0000C4DE 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4E4 1028 0028                  		move.b	$28(a0),d0
0000C4E8 0240 000F                  		andi.w	#$F,d0
0000C4EC 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C4F0 47F3 0000                  		lea	(a3,d0.w),a3
0000C4F4 7600                       		moveq	#0,d3
0000C4F6 0828 0006 0028             		btst	#6,$28(a0)
0000C4FC 6700                       		beq.s	loc_BDB2
0000C4FE 7607                       		moveq	#7,d3
0000C500                            
0000C500                            loc_BDB2:
0000C500 4A28 0028                  		tst.b	$28(a0)
0000C504 6A00                       		bpl.s	loc_BDBE
0000C506 6100 0000                  		bsr.w	Obj32_MZBlock
0000C50A 6600                       		bne.s	loc_BDC8
0000C50C                            
0000C50C                            loc_BDBE:
0000C50C 4A28 0025                  		tst.b	$25(a0)
0000C510 6600                       		bne.s	loc_BDC8
0000C512 0793                       		bclr	d3,(a3)
0000C514 6000                       		bra.s	loc_BDDE
0000C516                            ; ===========================================================================
0000C516                            
0000C516                            loc_BDC8:
0000C516 4A13                       		tst.b	(a3)
0000C518 6600                       		bne.s	loc_BDD6
0000C51A 303C 00CD                  		move.w	#$CD,d0
0000C51E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C524                            
0000C524                            loc_BDD6:
0000C524 07D3                       		bset	d3,(a3)
0000C526 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C52C                            
0000C52C                            loc_BDDE:
0000C52C 0828 0005 0028             		btst	#5,$28(a0)
0000C532 6700                       		beq.s	Obj32_Display
0000C534 5328 001E                  		subq.b	#1,$1E(a0)
0000C538 6A00                       		bpl.s	Obj32_Display
0000C53A 117C 0007 001E             		move.b	#7,$1E(a0)
0000C540 0868 0001 001A             		bchg	#1,$1A(a0)
0000C546                            
0000C546                            Obj32_Display:
0000C546 6100 0000                  		bsr.w	DisplaySprite
0000C54A 3028 0008                  		move.w	8(a0),d0
0000C54E 0240 FF80                  		andi.w	#$FF80,d0
0000C552 3238 F700                  		move.w	($FFFFF700).w,d1
0000C556 0441 0080                  		subi.w	#$80,d1
0000C55A 0241 FF80                  		andi.w	#$FF80,d1
0000C55E 9041                       		sub.w	d1,d0
0000C560 0C40 0280                  		cmpi.w	#$280,d0
0000C564 6200 0000                  		bhi.w	Obj32_Delete
0000C568 4E75                       		rts	
0000C56A                            ; ===========================================================================
0000C56A                            
0000C56A                            Obj32_Delete:
0000C56A 6100 0000                  		bsr.w	DeleteObject
0000C56E 4E75                       		rts	
0000C570                            
0000C570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C570                            
0000C570                            
0000C570                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C570 3F03                       		move.w	d3,-(sp)
0000C572 3428 0008                  		move.w	8(a0),d2
0000C576 3628 000C                  		move.w	$C(a0),d3
0000C57A 0442 0010                  		subi.w	#$10,d2
0000C57E 5143                       		subq.w	#8,d3
0000C580 383C 0020                  		move.w	#$20,d4
0000C584 3A3C 0010                  		move.w	#$10,d5
0000C588 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C58C 3C3C 005F                  		move.w	#$5F,d6
0000C590                            
0000C590                            Obj32_MZLoop:
0000C590 4A29 0001                  		tst.b	1(a1)
0000C594 6A00                       		bpl.s	loc_BE4E
0000C596 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C59A 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C59C                            
0000C59C                            loc_BE4E:
0000C59C 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5A0 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5A4                            
0000C5A4 361F                       		move.w	(sp)+,d3
0000C5A6 7000                       		moveq	#0,d0
0000C5A8                            
0000C5A8                            locret_BE5A:
0000C5A8 4E75                       		rts	
0000C5AA                            ; ===========================================================================
0000C5AA 1010                       Obj32_MZData:	dc.b $10, $10
0000C5AC                            ; ===========================================================================
0000C5AC                            
0000C5AC                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5AC 7001                       		moveq	#1,d0
0000C5AE 0240 003F                  		andi.w	#$3F,d0
0000C5B2 D040                       		add.w	d0,d0
0000C5B4 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5B8 121A                       		move.b	(a2)+,d1
0000C5BA 4881                       		ext.w	d1
0000C5BC 3029 0008                  		move.w	8(a1),d0
0000C5C0 9041                       		sub.w	d1,d0
0000C5C2 9042                       		sub.w	d2,d0
0000C5C4 6400                       		bcc.s	loc_BE80
0000C5C6 D241                       		add.w	d1,d1
0000C5C8 D041                       		add.w	d1,d0
0000C5CA 6500                       		bcs.s	loc_BE84
0000C5CC 60CE                       		bra.s	loc_BE4E
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            loc_BE80:
0000C5CE B044                       		cmp.w	d4,d0
0000C5D0 62CA                       		bhi.s	loc_BE4E
0000C5D2                            
0000C5D2                            loc_BE84:
0000C5D2 121A                       		move.b	(a2)+,d1
0000C5D4 4881                       		ext.w	d1
0000C5D6 3029 000C                  		move.w	$C(a1),d0
0000C5DA 9041                       		sub.w	d1,d0
0000C5DC 9043                       		sub.w	d3,d0
0000C5DE 6400                       		bcc.s	loc_BE9A
0000C5E0 D241                       		add.w	d1,d1
0000C5E2 D041                       		add.w	d1,d0
0000C5E4 6500                       		bcs.s	loc_BE9E
0000C5E6 60B4                       		bra.s	loc_BE4E
0000C5E8                            ; ===========================================================================
0000C5E8                            
0000C5E8                            loc_BE9A:
0000C5E8 B045                       		cmp.w	d5,d0
0000C5EA 62B0                       		bhi.s	loc_BE4E
0000C5EC                            
0000C5EC                            loc_BE9E:
0000C5EC 361F                       		move.w	(sp)+,d3
0000C5EE 7001                       		moveq	#1,d0
0000C5F0 4E75                       		rts	
0000C5F2                            ; End of function Obj32_MZBlock
0000C5F2                            
0000C5F2                            ; ===========================================================================
0000C5F2                            ; ---------------------------------------------------------------------------
0000C5F2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5F2                            ; ---------------------------------------------------------------------------
0000C5F2                            Map_obj32:
0000C5F2                            	include "_maps\obj32.asm"
0000C5F2                            ; ---------------------------------------------------------------------------
0000C5F2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5F2                            ; ---------------------------------------------------------------------------
0000C5F2 0000                       		dc.w byte_BEAC-Map_obj32
0000C5F4 0000                       		dc.w byte_BEB7-Map_obj32
0000C5F6 0000                       		dc.w byte_BEC2-Map_obj32
0000C5F8 0000                       		dc.w byte_BEB7-Map_obj32
0000C5FA 02                         byte_BEAC:	dc.b 2
0000C5FB F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C600 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C605 02                         byte_BEB7:	dc.b 2
0000C606 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C60B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C610 02                         byte_BEC2:	dc.b 2
0000C611 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C616 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C61B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C620                            		even
0000C620                            		even
0000C620                            
0000C620                            ; ===========================================================================
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            ; Object 33 - pushable blocks (MZ, LZ)
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            
0000C620                            Obj33:					; XREF: Obj_Index
0000C620 7000                       		moveq	#0,d0
0000C622 1028 0024                  		move.b	$24(a0),d0
0000C626 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C62A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C62E                            ; ===========================================================================
0000C62E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C630 0000                       		dc.w loc_BF6E-Obj33_Index
0000C632 0000                       		dc.w loc_C02C-Obj33_Index
0000C634                            
0000C634 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C636 4001                       		dc.b $40, 1
0000C638                            ; ===========================================================================
0000C638                            
0000C638                            Obj33_Main:				; XREF: Obj33_Index
0000C638 5428 0024                  		addq.b	#2,$24(a0)
0000C63C 117C 000F 0016             		move.b	#$F,$16(a0)
0000C642 117C 000F 0017             		move.b	#$F,$17(a0)
0000C648 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C650 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C656 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C65C 6600                       		bne.s	loc_BF16
0000C65E 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C664                            
0000C664                            loc_BF16:
0000C664 117C 0004 0001             		move.b	#4,1(a0)
0000C66A 117C 0003 0018             		move.b	#3,$18(a0)
0000C670 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C676 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C67C 7000                       		moveq	#0,d0
0000C67E 1028 0028                  		move.b	$28(a0),d0
0000C682 D040                       		add.w	d0,d0
0000C684 0240 000E                  		andi.w	#$E,d0
0000C688 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C68C 115A 0019                  		move.b	(a2)+,$19(a0)
0000C690 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C694 4A28 0028                  		tst.b	$28(a0)
0000C698 6700                       		beq.s	Obj33_ChkGone
0000C69A 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6A0                            
0000C6A0                            Obj33_ChkGone:
0000C6A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6A4 7000                       		moveq	#0,d0
0000C6A6 1028 0023                  		move.b	$23(a0),d0
0000C6AA 6700                       		beq.s	loc_BF6E
0000C6AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6B2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6B8 6600 0000                  		bne.w	DeleteObject
0000C6BC                            
0000C6BC                            loc_BF6E:				; XREF: Obj33_Index
0000C6BC 4A28 0032                  		tst.b	$32(a0)
0000C6C0 6600 0000                  		bne.w	loc_C046
0000C6C4 7200                       		moveq	#0,d1
0000C6C6 1228 0019                  		move.b	$19(a0),d1
0000C6CA 0641 000B                  		addi.w	#$B,d1
0000C6CE 343C 0010                  		move.w	#$10,d2
0000C6D2 363C 0011                  		move.w	#$11,d3
0000C6D6 3828 0008                  		move.w	8(a0),d4
0000C6DA 6100 0000                  		bsr.w	loc_C186
0000C6DE 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6E4 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6E6 08A8 0007 0028             		bclr	#7,$28(a0)
0000C6EC 3028 0008                  		move.w	8(a0),d0
0000C6F0 0C40 0A20                  		cmpi.w	#$A20,d0
0000C6F4 6500                       		bcs.s	loc_BFC6
0000C6F6 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C6FA 6400                       		bcc.s	loc_BFC6
0000C6FC 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C700 0440 001C                  		subi.w	#$1C,d0
0000C704 3140 000C                  		move.w	d0,$C(a0)
0000C708 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C70E 08E8 0007 0028             		bset	#7,$28(a0)
0000C714                            
0000C714                            loc_BFC6:
0000C714 3028 0008                  		move.w	8(a0),d0
0000C718 0240 FF80                  		andi.w	#$FF80,d0
0000C71C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C720 0441 0080                  		subi.w	#$80,d1
0000C724 0241 FF80                  		andi.w	#$FF80,d1
0000C728 9041                       		sub.w	d1,d0
0000C72A 0C40 0280                  		cmpi.w	#$280,d0
0000C72E 6200                       		bhi.s	loc_BFE6
0000C730 6000 0000                  		bra.w	DisplaySprite
0000C734                            ; ===========================================================================
0000C734                            
0000C734                            loc_BFE6:
0000C734 3028 0034                  		move.w	$34(a0),d0
0000C738 0240 FF80                  		andi.w	#$FF80,d0
0000C73C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C740 0441 0080                  		subi.w	#$80,d1
0000C744 0241 FF80                  		andi.w	#$FF80,d1
0000C748 9041                       		sub.w	d1,d0
0000C74A 0C40 0280                  		cmpi.w	#$280,d0
0000C74E 6200                       		bhi.s	loc_C016
0000C750 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C756 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C75C 117C 0004 0024             		move.b	#4,$24(a0)
0000C762 6000                       		bra.s	loc_C02C
0000C764                            ; ===========================================================================
0000C764                            
0000C764                            loc_C016:
0000C764 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C768 7000                       		moveq	#0,d0
0000C76A 1028 0023                  		move.b	$23(a0),d0
0000C76E 6700                       		beq.s	loc_C028
0000C770 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C776                            
0000C776                            loc_C028:
0000C776 6000 0000                  		bra.w	DeleteObject
0000C77A                            ; ===========================================================================
0000C77A                            
0000C77A                            loc_C02C:				; XREF: Obj33_Index
0000C77A 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C77E 6700                       		beq.s	locret_C044
0000C780 117C 0002 0024             		move.b	#2,$24(a0)
0000C786 4228 0032                  		clr.b	$32(a0)
0000C78A 4268 0010                  		clr.w	$10(a0)
0000C78E 4268 0012                  		clr.w	$12(a0)
0000C792                            
0000C792                            locret_C044:
0000C792 4E75                       		rts	
0000C794                            ; ===========================================================================
0000C794                            
0000C794                            loc_C046:				; XREF: loc_BF6E
0000C794 3F28 0008                  		move.w	8(a0),-(sp)
0000C798 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C79E 6400                       		bcc.s	loc_C056
0000C7A0 6100 0000                  		bsr.w	SpeedToPos
0000C7A4                            
0000C7A4                            loc_C056:
0000C7A4 0828 0001 0022             		btst	#1,$22(a0)
0000C7AA 6700                       		beq.s	loc_C0A0
0000C7AC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7B2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7B8 4A41                       		tst.w	d1
0000C7BA 6A00 0000                  		bpl.w	loc_C09E
0000C7BE D368 000C                  		add.w	d1,$C(a0)
0000C7C2 4268 0012                  		clr.w	$12(a0)
0000C7C6 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7CC 3011                       		move.w	(a1),d0
0000C7CE 0240 03FF                  		andi.w	#$3FF,d0
0000C7D2 0C40 016A                  		cmpi.w	#$16A,d0
0000C7D6 6500                       		bcs.s	loc_C09E
0000C7D8 3028 0030                  		move.w	$30(a0),d0
0000C7DC E640                       		asr.w	#3,d0
0000C7DE 3140 0010                  		move.w	d0,$10(a0)
0000C7E2 117C 0001 0032             		move.b	#1,$32(a0)
0000C7E8 4268 000E                  		clr.w	$E(a0)
0000C7EC                            
0000C7EC                            loc_C09E:
0000C7EC 6000                       		bra.s	loc_C0E6
0000C7EE                            ; ===========================================================================
0000C7EE                            
0000C7EE                            loc_C0A0:
0000C7EE 4A68 0010                  		tst.w	$10(a0)
0000C7F2 6700 0000                  		beq.w	loc_C0D6
0000C7F6 6B00                       		bmi.s	loc_C0BC
0000C7F8 7600                       		moveq	#0,d3
0000C7FA 1628 0019                  		move.b	$19(a0),d3
0000C7FE 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C804 4A41                       		tst.w	d1		; has block touched a wall?
0000C806 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C808 6000                       		bra.s	loc_C0E6
0000C80A                            ; ===========================================================================
0000C80A                            
0000C80A                            loc_C0BC:
0000C80A 7600                       		moveq	#0,d3
0000C80C 1628 0019                  		move.b	$19(a0),d3
0000C810 4643                       		not.w	d3
0000C812 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C818 4A41                       		tst.w	d1		; has block touched a wall?
0000C81A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C81C 6000                       		bra.s	loc_C0E6
0000C81E                            ; ===========================================================================
0000C81E                            
0000C81E                            Obj33_StopPush:
0000C81E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C822 6000                       		bra.s	loc_C0E6
0000C824                            ; ===========================================================================
0000C824                            
0000C824                            loc_C0D6:
0000C824 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C82C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C832 6400                       		bcc.s	loc_C104
0000C834                            
0000C834                            loc_C0E6:
0000C834 7200                       		moveq	#0,d1
0000C836 1228 0019                  		move.b	$19(a0),d1
0000C83A 0641 000B                  		addi.w	#$B,d1
0000C83E 343C 0010                  		move.w	#$10,d2
0000C842 363C 0011                  		move.w	#$11,d3
0000C846 381F                       		move.w	(sp)+,d4
0000C848 6100 0000                  		bsr.w	loc_C186
0000C84C 6100                       		bsr.s	Obj33_ChkLava
0000C84E 6000 FEC4                  		bra.w	loc_BFC6
0000C852                            ; ===========================================================================
0000C852                            
0000C852                            loc_C104:
0000C852 381F                       		move.w	(sp)+,d4
0000C854 43F8 D000                  		lea	($FFFFD000).w,a1
0000C858 08A9 0003 0022             		bclr	#3,$22(a1)
0000C85E 08A8 0003 0022             		bclr	#3,$22(a0)
0000C864 6000 FECE                  		bra.w	loc_BFE6
0000C868                            ; ===========================================================================
0000C868                            
0000C868                            Obj33_ChkLava:
0000C868 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C86E 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C870 343C FFE0                  		move.w	#-$20,d2
0000C874 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C87A 6700                       		beq.s	Obj33_LoadLava
0000C87C 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C882 6700                       		beq.s	Obj33_LoadLava
0000C884 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C88A 6700                       		beq.s	Obj33_LoadLava
0000C88C 4E75                       		rts	
0000C88E                            ; ===========================================================================
0000C88E                            
0000C88E                            Obj33_ChkLava2:
0000C88E 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C894 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C896 343C 0020                  		move.w	#$20,d2
0000C89A 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8A0 6700                       		beq.s	Obj33_LoadLava
0000C8A2 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8A8 6700                       		beq.s	Obj33_LoadLava
0000C8AA                            
0000C8AA                            Obj33_NoLava:
0000C8AA 4E75                       		rts	
0000C8AC                            ; ===========================================================================
0000C8AC                            
0000C8AC                            Obj33_LoadLava:
0000C8AC 6100 0000                  		bsr.w	SingleObjLoad
0000C8B0 6600                       		bne.s	locret_C184
0000C8B2 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8BC D569 0008                  		add.w	d2,8(a1)
0000C8C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8C6 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8CC 2348 003C                  		move.l	a0,$3C(a1)
0000C8D0                            
0000C8D0                            locret_C184:
0000C8D0 4E75                       		rts	
0000C8D2                            ; ===========================================================================
0000C8D2                            
0000C8D2                            loc_C186:				; XREF: loc_BF6E
0000C8D2 1028 0025                  		move.b	$25(a0),d0
0000C8D6 6700 0000                  		beq.w	loc_C218
0000C8DA 5500                       		subq.b	#2,d0
0000C8DC 6600                       		bne.s	loc_C1AA
0000C8DE 6100 B31C                  		bsr.w	ExitPlatform
0000C8E2 0829 0003 0022             		btst	#3,$22(a1)
0000C8E8 6600                       		bne.s	loc_C1A4
0000C8EA 4228 0025                  		clr.b	$25(a0)
0000C8EE 4E75                       		rts	
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            loc_C1A4:
0000C8F0 3404                       		move.w	d4,d2
0000C8F2 6000 B866                  		bra.w	MvSonicOnPtfm
0000C8F6                            ; ===========================================================================
0000C8F6                            
0000C8F6                            loc_C1AA:
0000C8F6 5500                       		subq.b	#2,d0
0000C8F8 6600                       		bne.s	loc_C1F2
0000C8FA 6100 0000                  		bsr.w	SpeedToPos
0000C8FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C904 4EB9 0000 0000             		jsr	ObjHitFloor
0000C90A 4A41                       		tst.w	d1
0000C90C 6A00 0000                  		bpl.w	locret_C1F0
0000C910 D368 000C                  		add.w	d1,$C(a0)
0000C914 4268 0012                  		clr.w	$12(a0)
0000C918 4228 0025                  		clr.b	$25(a0)
0000C91C 3011                       		move.w	(a1),d0
0000C91E 0240 03FF                  		andi.w	#$3FF,d0
0000C922 0C40 016A                  		cmpi.w	#$16A,d0
0000C926 6500                       		bcs.s	locret_C1F0
0000C928 3028 0030                  		move.w	$30(a0),d0
0000C92C E640                       		asr.w	#3,d0
0000C92E 3140 0010                  		move.w	d0,$10(a0)
0000C932 117C 0001 0032             		move.b	#1,$32(a0)
0000C938 4268 000E                  		clr.w	$E(a0)
0000C93C                            
0000C93C                            locret_C1F0:
0000C93C 4E75                       		rts	
0000C93E                            ; ===========================================================================
0000C93E                            
0000C93E                            loc_C1F2:
0000C93E 6100 0000                  		bsr.w	SpeedToPos
0000C942 3028 0008                  		move.w	8(a0),d0
0000C946 0240 000C                  		andi.w	#$C,d0
0000C94A 6600 0000                  		bne.w	locret_C2E4
0000C94E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C954 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C95A 4268 0010                  		clr.w	$10(a0)
0000C95E 5528 0025                  		subq.b	#2,$25(a0)
0000C962 4E75                       		rts	
0000C964                            ; ===========================================================================
0000C964                            
0000C964                            loc_C218:
0000C964 6100 0000                  		bsr.w	loc_FAC8
0000C968 4A44                       		tst.w	d4
0000C96A 6700 0000                  		beq.w	locret_C2E4
0000C96E 6B00 0000                  		bmi.w	locret_C2E4
0000C972 4A28 0032                  		tst.b	$32(a0)
0000C976 6700                       		beq.s	loc_C230
0000C978 6000 0000                  		bra.w	locret_C2E4
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            loc_C230:
0000C97C 4A40                       		tst.w	d0
0000C97E 6700 0000                  		beq.w	locret_C2E4
0000C982 6B00                       		bmi.s	loc_C268
0000C984 0829 0000 0022             		btst	#0,$22(a1)
0000C98A 6600 0000                  		bne.w	locret_C2E4
0000C98E 3F00                       		move.w	d0,-(sp)
0000C990 7600                       		moveq	#0,d3
0000C992 1628 0019                  		move.b	$19(a0),d3
0000C996 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C99C 301F                       		move.w	(sp)+,d0
0000C99E 4A41                       		tst.w	d1
0000C9A0 6B00 0000                  		bmi.w	locret_C2E4
0000C9A4 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9AC 7001                       		moveq	#1,d0
0000C9AE 323C 0040                  		move.w	#$40,d1
0000C9B2 6000                       		bra.s	loc_C294
0000C9B4                            ; ===========================================================================
0000C9B4                            
0000C9B4                            loc_C268:
0000C9B4 0829 0000 0022             		btst	#0,$22(a1)
0000C9BA 6700                       		beq.s	locret_C2E4
0000C9BC 3F00                       		move.w	d0,-(sp)
0000C9BE 7600                       		moveq	#0,d3
0000C9C0 1628 0019                  		move.b	$19(a0),d3
0000C9C4 4643                       		not.w	d3
0000C9C6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9CC 301F                       		move.w	(sp)+,d0
0000C9CE 4A41                       		tst.w	d1
0000C9D0 6B00                       		bmi.s	locret_C2E4
0000C9D2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9DA 70FF                       		moveq	#-1,d0
0000C9DC 323C FFC0                  		move.w	#-$40,d1
0000C9E0                            
0000C9E0                            loc_C294:
0000C9E0 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9E4 D169 0008                  		add.w	d0,8(a1)
0000C9E8 3341 0014                  		move.w	d1,$14(a1)
0000C9EC 337C 0000 0010             		move.w	#0,$10(a1)
0000C9F2 3F00                       		move.w	d0,-(sp)
0000C9F4 303C 00A7                  		move.w	#$A7,d0
0000C9F8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C9FE 301F                       		move.w	(sp)+,d0
0000CA00 4A28 0028                  		tst.b	$28(a0)
0000CA04 6B00                       		bmi.s	locret_C2E4
0000CA06 3F00                       		move.w	d0,-(sp)
0000CA08 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA0E 301F                       		move.w	(sp)+,d0
0000CA10 0C41 0004                  		cmpi.w	#4,d1
0000CA14 6F00                       		ble.s	loc_C2E0
0000CA16 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA1C 4A40                       		tst.w	d0
0000CA1E 6A00                       		bpl.s	loc_C2D8
0000CA20 4468 0010                  		neg.w	$10(a0)
0000CA24                            
0000CA24                            loc_C2D8:
0000CA24 117C 0006 0025             		move.b	#6,$25(a0)
0000CA2A 6000                       		bra.s	locret_C2E4
0000CA2C                            ; ===========================================================================
0000CA2C                            
0000CA2C                            loc_C2E0:
0000CA2C D368 000C                  		add.w	d1,$C(a0)
0000CA30                            
0000CA30                            locret_C2E4:
0000CA30 4E75                       		rts	
0000CA32                            ; ===========================================================================
0000CA32                            ; ---------------------------------------------------------------------------
0000CA32                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA32                            ; ---------------------------------------------------------------------------
0000CA32                            Map_obj33:
0000CA32                            	include "_maps\obj33.asm"
0000CA32                            ; ---------------------------------------------------------------------------
0000CA32                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA32                            ; ---------------------------------------------------------------------------
0000CA32 0000                       		dc.w byte_C2EA-Map_obj33
0000CA34 0000                       		dc.w byte_C2F0-Map_obj33
0000CA36 01                         byte_C2EA:	dc.b 1
0000CA37 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA3C 04                         byte_C2F0:	dc.b 4
0000CA3D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA42 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA47 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA4C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA52 00                         		even
0000CA52 00                         		even
0000CA52                            
0000CA52                            ; ===========================================================================
0000CA52                            ; ---------------------------------------------------------------------------
0000CA52                            ; Object 34 - zone title cards
0000CA52                            ; ---------------------------------------------------------------------------
0000CA52                            
0000CA52                            Obj34:					; XREF: Obj_Index
0000CA52 7000                       		moveq	#0,d0
0000CA54 1028 0024                  		move.b	$24(a0),d0
0000CA58 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA5C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA60                            ; ===========================================================================
0000CA60 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA62 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA64 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA66 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA68                            ; ===========================================================================
0000CA68                            
0000CA68                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA68 2248                       		movea.l	a0,a1
0000CA6A 7000                       		moveq	#0,d0
0000CA6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA70 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA76 6600                       		bne.s	Obj34_CheckFZ
0000CA78 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA7A                            
0000CA7A                            Obj34_CheckFZ:
0000CA7A 3400                       		move.w	d0,d2
0000CA7C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA82 6600                       		bne.s	Obj34_LoadConfig
0000CA84 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA86 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA88                            
0000CA88                            Obj34_LoadConfig:
0000CA88 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA8E E948                       		lsl.w	#4,d0
0000CA90 D6C0                       		adda.w	d0,a3
0000CA92 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CA98 7203                       		moveq	#3,d1
0000CA9A                            
0000CA9A                            Obj34_Loop:
0000CA9A 12BC 0034                  		move.b	#$34,0(a1)
0000CA9E 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CAA2 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CAA6 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CAAA 335A 000A                  		move.w	(a2)+,$A(a1)
0000CAAE 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAB2 101A                       		move.b	(a2)+,d0
0000CAB4 6600                       		bne.s	Obj34_ActNumber
0000CAB6 1002                       		move.b	d2,d0
0000CAB8                            
0000CAB8                            Obj34_ActNumber:
0000CAB8 0C00 0007                  		cmpi.b	#7,d0
0000CABC 6600                       		bne.s	Obj34_MakeSprite
0000CABE D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CAC2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CAC8 6600                       		bne.s	Obj34_MakeSprite
0000CACA 5300                       		subq.b	#1,d0
0000CACC                            
0000CACC                            Obj34_MakeSprite:
0000CACC 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CAD0 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAD8 337C 8580 0002             		move.w	#$8580,2(a1)
0000CADE 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAE4 137C 0000 0001             		move.b	#0,1(a1)
0000CAEA 137C 0000 0018             		move.b	#0,$18(a1)
0000CAF0 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CAF6 43E9 0040                  		lea	$40(a1),a1	; next object
0000CAFA 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CAFE                            
0000CAFE                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CAFE 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB00 3028 0030                  		move.w	$30(a0),d0
0000CB04 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB08 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB0A 6C00                       		bge.s	Obj34_Move
0000CB0C 4441                       		neg.w	d1
0000CB0E                            
0000CB0E                            Obj34_Move:
0000CB0E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB12                            
0000CB12                            loc_C3C8:
0000CB12 3028 0008                  		move.w	8(a0),d0
0000CB16 6B00                       		bmi.s	locret_C3D8
0000CB18 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB1C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB1E 6000 0000                  		bra.w	DisplaySprite
0000CB22                            ; ===========================================================================
0000CB22                            
0000CB22                            locret_C3D8:
0000CB22 4E75                       		rts	
0000CB24                            ; ===========================================================================
0000CB24                            
0000CB24                            Obj34_Wait:				; XREF: Obj34_Index
0000CB24 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB28 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB2A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB2E 6000 0000                  		bra.w	DisplaySprite
0000CB32                            ; ===========================================================================
0000CB32                            
0000CB32                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB32 4A28 0001                  		tst.b	1(a0)
0000CB36 6A00                       		bpl.s	Obj34_ChangeArt
0000CB38 7220                       		moveq	#$20,d1
0000CB3A 3028 0032                  		move.w	$32(a0),d0
0000CB3E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB42 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB44 6C00                       		bge.s	Obj34_Move2
0000CB46 4441                       		neg.w	d1
0000CB48                            
0000CB48                            Obj34_Move2:
0000CB48 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB4C 3028 0008                  		move.w	8(a0),d0
0000CB50 6B00                       		bmi.s	locret_C412
0000CB52 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB56 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB58 6000 0000                  		bra.w	DisplaySprite
0000CB5C                            ; ===========================================================================
0000CB5C                            
0000CB5C                            locret_C412:
0000CB5C 4E75                       		rts	
0000CB5E                            ; ===========================================================================
0000CB5E                            
0000CB5E                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB5E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB64 6600                       		bne.s	Obj34_Delete
0000CB66 7002                       		moveq	#2,d0
0000CB68 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CB6E 7000                       		moveq	#0,d0
0000CB70 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB74 0640 0015                  		addi.w	#$15,d0
0000CB78 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CB7E                            
0000CB7E                            Obj34_Delete:
0000CB7E 6000 0000                  		bra.w	DeleteObject
0000CB82                            ; ===========================================================================
0000CB82 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB84 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB86 00E4                       		dc.w $E4
0000CB88 0206                       		dc.b 2,	6
0000CB8A 00EA                       		dc.w $EA
0000CB8C 0207                       		dc.b 2,	7
0000CB8E 00E0                       		dc.w $E0
0000CB90 020A                       		dc.b 2,	$A
0000CB92                            ; ---------------------------------------------------------------------------
0000CB92                            ; Title	card configuration data
0000CB92                            ; Format:
0000CB92                            ; 4 bytes per item (YYYY XXXX)
0000CB92                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB92                            ; ---------------------------------------------------------------------------
0000CB92 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBA2 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBB2 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBC2 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBD2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBE2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CBF2 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC02                            ; ===========================================================================
0000CC02                            ; ---------------------------------------------------------------------------
0000CC02                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC02                            ; ---------------------------------------------------------------------------
0000CC02                            
0000CC02                            Obj39:					; XREF: Obj_Index
0000CC02 7000                       		moveq	#0,d0
0000CC04 1028 0024                  		move.b	$24(a0),d0
0000CC08 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC0C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC10                            ; ===========================================================================
0000CC10 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC12 0000                       		dc.w loc_C50C-Obj39_Index
0000CC14 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC16                            ; ===========================================================================
0000CC16                            
0000CC16                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC16 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC1A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC1C 4E75                       		rts	
0000CC1E                            ; ===========================================================================
0000CC1E                            
0000CC1E                            Obj39_Main:
0000CC1E 5428 0024                  		addq.b	#2,$24(a0)
0000CC22 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC28 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC2E 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC30 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC36                            
0000CC36                            loc_C4EC:
0000CC36 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC3C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC44 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC4A 117C 0000 0001             		move.b	#0,1(a0)
0000CC50 117C 0000 0018             		move.b	#0,$18(a0)
0000CC56                            
0000CC56                            loc_C50C:				; XREF: Obj39_Index
0000CC56 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC58 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC5E 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC60 6500                       		bcs.s	Obj39_Move
0000CC62 4441                       		neg.w	d1
0000CC64                            
0000CC64                            Obj39_Move:
0000CC64 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC68 6000 0000                  		bra.w	DisplaySprite
0000CC6C                            ; ===========================================================================
0000CC6C                            
0000CC6C                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC6C 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC72 5428 0024                  		addq.b	#2,$24(a0)
0000CC76 4E75                       		rts	
0000CC78                            ; ===========================================================================
0000CC78                            
0000CC78                            Obj39_Wait:				; XREF: Obj39_Index
0000CC78 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC7C 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CC80 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CC82 0828 0000 001A             		btst	#0,$1A(a0)
0000CC88 6600                       		bne.s	Obj39_Display
0000CC8A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CC8E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CC90 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC94 6000 0000                  		bra.w	DisplaySprite
0000CC98                            ; ===========================================================================
0000CC98                            
0000CC98                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CC98 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CC9C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CC9E 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCA4 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCA8 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCAA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCB0 6000                       		bra.s	Obj39_Display
0000CCB2                            ; ===========================================================================
0000CCB2                            
0000CCB2                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCB2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCB8                            
0000CCB8                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCB8 6000 0000                  		bra.w	DisplaySprite
0000CCBC                            ; ===========================================================================
0000CCBC                            ; ---------------------------------------------------------------------------
0000CCBC                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCBC                            ; ---------------------------------------------------------------------------
0000CCBC                            
0000CCBC                            Obj3A:					; XREF: Obj_Index
0000CCBC 7000                       		moveq	#0,d0
0000CCBE 1028 0024                  		move.b	$24(a0),d0
0000CCC2 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCC6 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCCA                            ; ===========================================================================
0000CCCA 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCCC 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCCE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCD0 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CCD2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCD4 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCD6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCD8 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CCDA 0000                       		dc.w loc_C766-Obj3A_Index
0000CCDC                            ; ===========================================================================
0000CCDC                            
0000CCDC                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCDC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCE0 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CCE2 4E75                       		rts	
0000CCE4                            ; ===========================================================================
0000CCE4                            
0000CCE4                            Obj3A_Main:
0000CCE4 2248                       		movea.l	a0,a1
0000CCE6 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CCEC 7206                       		moveq	#6,d1
0000CCEE                            
0000CCEE                            Obj3A_Loop:
0000CCEE 12BC 003A                  		move.b	#$3A,0(a1)
0000CCF2 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CCF6 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CCFA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCFE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD02 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD06 101A                       		move.b	(a2)+,d0
0000CD08 0C00 0006                  		cmpi.b	#6,d0
0000CD0C 6600                       		bne.s	loc_C5CA
0000CD0E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD12                            
0000CD12                            loc_C5CA:
0000CD12 1340 001A                  		move.b	d0,$1A(a1)
0000CD16 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD1E 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD24 137C 0000 0001             		move.b	#0,1(a1)
0000CD2A 43E9 0040                  		lea	$40(a1),a1
0000CD2E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD32                            
0000CD32                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD32 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD34 3028 0030                  		move.w	$30(a0),d0
0000CD38 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD3C 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD3E 6C00                       		bge.s	Obj3A_Move
0000CD40 4441                       		neg.w	d1
0000CD42                            
0000CD42                            Obj3A_Move:
0000CD42 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD46                            
0000CD46                            loc_C5FE:				; XREF: loc_C61A
0000CD46 3028 0008                  		move.w	8(a0),d0
0000CD4A 6B00                       		bmi.s	locret_C60E
0000CD4C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD50 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD52 6000 0000                  		bra.w	DisplaySprite
0000CD56                            ; ===========================================================================
0000CD56                            
0000CD56                            locret_C60E:
0000CD56 4E75                       		rts	
0000CD58                            ; ===========================================================================
0000CD58                            
0000CD58                            loc_C610:				; XREF: loc_C61A
0000CD58 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD5E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD62                            ; ===========================================================================
0000CD62                            
0000CD62                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD62 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD68 67EE                       		beq.s	loc_C610
0000CD6A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD70 66D4                       		bne.s	loc_C5FE
0000CD72 5428 0024                  		addq.b	#2,$24(a0)
0000CD76 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD7C                            
0000CD7C                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD7C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD80 6600                       		bne.s	Obj3A_Display
0000CD82 5428 0024                  		addq.b	#2,$24(a0)
0000CD86                            
0000CD86                            Obj3A_Display:
0000CD86 6000 0000                  		bra.w	DisplaySprite
0000CD8A                            ; ===========================================================================
0000CD8A                            
0000CD8A                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CD8A 6100 0000                  		bsr.w	DisplaySprite
0000CD8E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CD94 7000                       		moveq	#0,d0
0000CD96 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CD9A 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CD9C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDA0 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDA6                            
0000CDA6                            Obj3A_RingBonus:
0000CDA6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDAA 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDAC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDB0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDB6                            
0000CDB6                            Obj3A_ChkBonus:
0000CDB6 4A40                       		tst.w	d0		; is there any bonus?
0000CDB8 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDBA 303C 00C5                  		move.w	#$C5,d0
0000CDBE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDC4 5428 0024                  		addq.b	#2,$24(a0)
0000CDC8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDCE 6600                       		bne.s	Obj3A_SetDelay
0000CDD0 5828 0024                  		addq.b	#4,$24(a0)
0000CDD4                            
0000CDD4                            Obj3A_SetDelay:
0000CDD4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDDA                            
0000CDDA                            locret_C692:
0000CDDA 4E75                       		rts	
0000CDDC                            ; ===========================================================================
0000CDDC                            
0000CDDC                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDDC 4EB9 0000 0000             		jsr	AddPoints
0000CDE2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDE6 0200 0003                  		andi.b	#3,d0
0000CDEA 66EE                       		bne.s	locret_C692
0000CDEC 303C 00CD                  		move.w	#$CD,d0
0000CDF0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDF6                            ; ===========================================================================
0000CDF6                            
0000CDF6                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CDF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDFA 0240 0007                  		andi.w	#7,d0
0000CDFE E748                       		lsl.w	#3,d0
0000CE00 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE04 0241 0003                  		andi.w	#3,d1
0000CE08 D241                       		add.w	d1,d1
0000CE0A D041                       		add.w	d1,d0
0000CE0C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE10 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE14 4A40                       		tst.w	d0
0000CE16 6600                       		bne.s	Obj3A_ChkSS
0000CE18 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE1E 6000                       		bra.s	Obj3A_Display2
0000CE20                            ; ===========================================================================
0000CE20                            
0000CE20                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE20 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE24 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE28 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE2A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE30 6000                       		bra.s	Obj3A_Display2
0000CE32                            ; ===========================================================================
0000CE32                            
0000CE32                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE32 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE38                            
0000CE38                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE38 6000 0000                  		bra.w	DisplaySprite
0000CE3C                            ; ===========================================================================
0000CE3C                            ; ---------------------------------------------------------------------------
0000CE3C                            ; Level	order array
0000CE3C                            ; ---------------------------------------------------------------------------
0000CE3C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE6C                            		even
0000CE6C                            ; ===========================================================================
0000CE6C                            
0000CE6C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE6C 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE6E 3028 0032                  		move.w	$32(a0),d0
0000CE72 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE76 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CE78 6C00                       		bge.s	Obj3A_Move2
0000CE7A 4441                       		neg.w	d1
0000CE7C                            
0000CE7C                            Obj3A_Move2:
0000CE7C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE80 3028 0008                  		move.w	8(a0),d0
0000CE84 6B00                       		bmi.s	locret_C748
0000CE86 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE8A 6400                       		bcc.s	locret_C748	; if yes, branch
0000CE8C 6000 0000                  		bra.w	DisplaySprite
0000CE90                            ; ===========================================================================
0000CE90                            
0000CE90                            locret_C748:
0000CE90 4E75                       		rts	
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CE92 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CE98 6600 0000                  		bne.w	DeleteObject
0000CE9C 5428 0024                  		addq.b	#2,$24(a0)
0000CEA0 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CEA4 303C 008D                  		move.w	#$8D,d0
0000CEA8 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CEAE                            ; ===========================================================================
0000CEAE                            
0000CEAE                            loc_C766:				; XREF: Obj3A_Index
0000CEAE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEB2 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CEB8 6700 0000                  		beq.w	DeleteObject
0000CEBC 4E75                       		rts	
0000CEBE                            ; ===========================================================================
0000CEBE 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CEC4 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CEC6 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CECC 0201                       		dc.b 2,	1
0000CECE 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CED4 0206                       		dc.b 2,	6
0000CED6 0520 0120 00EC             		dc.w $520, $120, $EC
0000CEDC 0202                       		dc.b 2,	2
0000CEDE 0540 0120 00FC             		dc.w $540, $120, $FC
0000CEE4 0203                       		dc.b 2,	3
0000CEE6 0560 0120 010C             		dc.w $560, $120, $10C
0000CEEC 0204                       		dc.b 2,	4
0000CEEE 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CEF4 0205                       		dc.b 2,	5
0000CEF6                            ; ===========================================================================
0000CEF6                            ; ---------------------------------------------------------------------------
0000CEF6                            ; Object 7E - special stage results screen
0000CEF6                            ; ---------------------------------------------------------------------------
0000CEF6                            
0000CEF6                            Obj7E:					; XREF: Obj_Index
0000CEF6 7000                       		moveq	#0,d0
0000CEF8 1028 0024                  		move.b	$24(a0),d0
0000CEFC 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF00 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF04                            ; ===========================================================================
0000CF04 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF06 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF08 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF0A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF0C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF0E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF10 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF12 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF14 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF16 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF18 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF1A                            ; ===========================================================================
0000CF1A                            
0000CF1A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF1A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF1E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF20 4E75                       		rts	
0000CF22                            ; ===========================================================================
0000CF22                            
0000CF22                            Obj7E_Main:
0000CF22 2248                       		movea.l	a0,a1
0000CF24 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF2A 7203                       		moveq	#3,d1
0000CF2C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF32 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF34 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF36                            
0000CF36                            Obj7E_Loop:
0000CF36 12BC 007E                  		move.b	#$7E,0(a1)
0000CF3A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF3E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF42 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF46 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF4A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF4E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF56 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF5C 137C 0000 0001             		move.b	#0,1(a1)
0000CF62 43E9 0040                  		lea	$40(a1),a1
0000CF66 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF6A                            
0000CF6A 7007                       		moveq	#7,d0
0000CF6C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF70 6700                       		beq.s	loc_C842
0000CF72 7000                       		moveq	#0,d0
0000CF74 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CF78 6600                       		bne.s	loc_C842	; if not, branch
0000CF7A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CF7C 317C 0018 0008             		move.w	#$18,8(a0)
0000CF82 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CF88                            
0000CF88                            loc_C842:
0000CF88 1140 001A                  		move.b	d0,$1A(a0)
0000CF8C                            
0000CF8C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CF8C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF8E 3028 0030                  		move.w	$30(a0),d0
0000CF92 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF96 6700                       		beq.s	loc_C86C	; if yes, branch
0000CF98 6C00                       		bge.s	Obj7E_Move
0000CF9A 4441                       		neg.w	d1
0000CF9C                            
0000CF9C                            Obj7E_Move:
0000CF9C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFA0                            
0000CFA0                            loc_C85A:				; XREF: loc_C86C
0000CFA0 3028 0008                  		move.w	8(a0),d0
0000CFA4 6B00                       		bmi.s	locret_C86A
0000CFA6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFAA 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFAC 6000 0000                  		bra.w	DisplaySprite
0000CFB0                            ; ===========================================================================
0000CFB0                            
0000CFB0                            locret_C86A:
0000CFB0 4E75                       		rts	
0000CFB2                            ; ===========================================================================
0000CFB2                            
0000CFB2                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFB2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFB8 66E6                       		bne.s	loc_C85A
0000CFBA 5428 0024                  		addq.b	#2,$24(a0)
0000CFBE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFC4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFCA                            
0000CFCA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFCA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFCE 6600                       		bne.s	Obj7E_Display
0000CFD0 5428 0024                  		addq.b	#2,$24(a0)
0000CFD4                            
0000CFD4                            Obj7E_Display:
0000CFD4 6000 0000                  		bra.w	DisplaySprite
0000CFD8                            ; ===========================================================================
0000CFD8                            
0000CFD8                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CFD8 6100 0000                  		bsr.w	DisplaySprite
0000CFDC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CFE2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFE6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CFE8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFEE 700A                       		moveq	#10,d0		; add 10 to score
0000CFF0 4EB9 0000 0000             		jsr	AddPoints
0000CFF6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFFA 0200 0003                  		andi.b	#3,d0
0000CFFE 6600                       		bne.s	locret_C8EA
0000D000 303C 00CD                  		move.w	#$CD,d0
0000D004 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D00A                            ; ===========================================================================
0000D00A                            
0000D00A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D00A 303C 00C5                  		move.w	#$C5,d0
0000D00E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D014 5428 0024                  		addq.b	#2,$24(a0)
0000D018 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D01E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D024 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D026 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D02C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D030                            
0000D030                            locret_C8EA:
0000D030 4E75                       		rts	
0000D032                            ; ===========================================================================
0000D032                            
0000D032                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D032 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D038 6000 0000                  		bra.w	DisplaySprite
0000D03C                            ; ===========================================================================
0000D03C                            
0000D03C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D03C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D042 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D048 303C 00BF                  		move.w	#$BF,d0
0000D04C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000D052 5428 0024                  		addq.b	#2,$24(a0)
0000D056 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D05C 6000 0000                  		bra.w	DisplaySprite
0000D060                            ; ===========================================================================
0000D060                            
0000D060                            loc_C91A:				; XREF: Obj7E_Index
0000D060 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D064 0200 000F                  		andi.b	#$F,d0
0000D068 6600                       		bne.s	Obj7E_Display2
0000D06A 0868 0000 001A             		bchg	#0,$1A(a0)
0000D070                            
0000D070                            Obj7E_Display2:
0000D070 6000 0000                  		bra.w	DisplaySprite
0000D074                            ; ===========================================================================
0000D074 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D07A 0200                       		dc.b 2,	0		; rountine number, frame number
0000D07C 0320 0120 0118             		dc.w $320, $120, $118
0000D082 0201                       		dc.b 2,	1
0000D084 0360 0120 0128             		dc.w $360, $120, $128
0000D08A 0202                       		dc.b 2,	2
0000D08C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D092 0203                       		dc.b 2,	3
0000D094 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D09A 0206                       		dc.b 2,	6
0000D09C                            ; ===========================================================================
0000D09C                            ; ---------------------------------------------------------------------------
0000D09C                            ; Object 7F - chaos emeralds from the special stage results screen
0000D09C                            ; ---------------------------------------------------------------------------
0000D09C                            
0000D09C                            Obj7F:					; XREF: Obj_Index
0000D09C 7000                       		moveq	#0,d0
0000D09E 1028 0024                  		move.b	$24(a0),d0
0000D0A2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0A6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0AA                            ; ===========================================================================
0000D0AA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0AC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0AE                            
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE                            ; X-axis positions for chaos emeralds
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0BA                            ; ===========================================================================
0000D0BA                            
0000D0BA                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0BA 2248                       		movea.l	a0,a1
0000D0BC 45F9 0000 D0AE             		lea	(Obj7F_PosData).l,a2
0000D0C2 7400                       		moveq	#0,d2
0000D0C4 7200                       		moveq	#0,d1
0000D0C6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0CA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0CC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D0D0                            
0000D0D0                            Obj7F_Loop:
0000D0D0 12BC 007F                  		move.b	#$7F,0(a1)
0000D0D4 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D0D8 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D0DE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D0E2 1633 2000                  		move.b	(a3,d2.w),d3
0000D0E6 1343 001A                  		move.b	d3,$1A(a1)
0000D0EA 1343 001C                  		move.b	d3,$1C(a1)
0000D0EE 5202                       		addq.b	#1,d2
0000D0F0 5429 0024                  		addq.b	#2,$24(a1)
0000D0F4 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D0FC 337C 8541 0002             		move.w	#$8541,2(a1)
0000D102 137C 0000 0001             		move.b	#0,1(a1)
0000D108 43E9 0040                  		lea	$40(a1),a1	; next object
0000D10C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D110                            
0000D110                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D110 1028 001A                  		move.b	$1A(a0),d0
0000D114 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D11A 0C00 0006                  		cmpi.b	#6,d0
0000D11E 6600                       		bne.s	Obj7F_Display
0000D120 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D126                            
0000D126                            Obj7F_Display:
0000D126 6000 0000                  		bra.w	DisplaySprite
0000D12A                            ; ===========================================================================
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            ; Sprite mappings - zone title cards
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D12C 0000                       		dc.w byte_CA2C-Map_obj34
0000D12E 0000                       		dc.w byte_CA5A-Map_obj34
0000D130 0000                       		dc.w byte_CA7A-Map_obj34
0000D132 0000                       		dc.w byte_CAA8-Map_obj34
0000D134 0000                       		dc.w byte_CADC-Map_obj34
0000D136 0000                       		dc.w byte_CB10-Map_obj34
0000D138 0000                       		dc.w byte_CB26-Map_obj34
0000D13A 0000                       		dc.w byte_CB31-Map_obj34
0000D13C 0000                       		dc.w byte_CB3C-Map_obj34
0000D13E 0000                       		dc.w byte_CB47-Map_obj34
0000D140 0000                       		dc.w byte_CB8A-Map_obj34
0000D142 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D143 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D148 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D14D F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D152 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D157 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D15C F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D161 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D166 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D16B F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D170 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D175 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D17A F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D17F 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D180 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D185 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D18A F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D18F F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D194 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D199 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D19E F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D1A3 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D1A8 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D1AD F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D1B2 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D1B7 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D1BC F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D1C1 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D1C6 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D1CB F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D1D0 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D1D5 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D1DA F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D1DF F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D1E4 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D1E9 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D1EE 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D1EF F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D1F4 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D1F9 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D1FE F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D203 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D208 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D209 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D20E F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D213 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D218 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D21D F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D222 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D227 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D22C F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D231 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D236 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D23B F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D240 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D245 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D24A F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D24F F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D254 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D259 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D25E 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D25F F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D264 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D269 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D26E F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D273 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D278 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D27D F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D282 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D287 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D28C F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D291 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D296 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D29B F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D2A0 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D2A5 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D2AA F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D2AF F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D2B4 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D2B9 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D2BE F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D2C3 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D2C8 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D2C9 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D2CE F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D2D3 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D2D8 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2DD F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D2E2 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D2E7 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D2EC 04                         byte_CB10:	dc.b 4			; ZONE
0000D2ED F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D2F2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D2F7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D2FC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D301 00                         		dc.b 0
0000D302 02                         byte_CB26:	dc.b 2			; ACT 1
0000D303 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D308 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D30D 02                         byte_CB31:	dc.b 2			; ACT 2
0000D30E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D313 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D318 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D319 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D31E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D323 0D                         byte_CB47:	dc.b $D			; Oval
0000D324 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D329 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D32E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D333 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D338 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D33D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D342 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D347 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D34C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D351 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D356 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D35B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D360 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D365 00                         		dc.b 0
0000D366 05                         byte_CB8A:	dc.b 5			; FINAL
0000D367 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D36C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D371 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D376 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D37B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D380                            		even
0000D380                            ; ---------------------------------------------------------------------------
0000D380                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D380                            ; ---------------------------------------------------------------------------
0000D380                            Map_obj39:
0000D380                            	include "_maps\obj39.asm"
0000D380                            ; ---------------------------------------------------------------------------
0000D380                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D380                            ; ---------------------------------------------------------------------------
0000D380 0000                       		dc.w byte_CBAC-Map_obj39
0000D382 0000                       		dc.w byte_CBB7-Map_obj39
0000D384 0000                       		dc.w byte_CBC2-Map_obj39
0000D386 0000                       		dc.w byte_CBCD-Map_obj39
0000D388 02                         byte_CBAC:	dc.b 2
0000D389 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D38E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D393 02                         byte_CBB7:	dc.b 2
0000D394 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D399 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D39E 02                         byte_CBC2:	dc.b 2
0000D39F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3A4 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3A9 02                         byte_CBCD:	dc.b 2
0000D3AA F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3AF F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3B4                            		even
0000D3B4                            		even
0000D3B4                            
0000D3B4                            ; ---------------------------------------------------------------------------
0000D3B4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3B4                            ; ---------------------------------------------------------------------------
0000D3B4 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D3B6 0000                       		dc.w byte_CC13-Map_obj3A
0000D3B8 0000                       		dc.w byte_CC32-Map_obj3A
0000D3BA 0000                       		dc.w byte_CC51-Map_obj3A
0000D3BC 0000                       		dc.w byte_CC75-Map_obj3A
0000D3BE FF6F                       		dc.w byte_CB47-Map_obj3A
0000D3C0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D3C2 FF59                       		dc.w byte_CB31-Map_obj3A
0000D3C4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D3C6 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D3C7 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D3CC F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D3D1 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3D6 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D3DB F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D3E0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D3E5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D3EA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D3EF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D3F4 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D3F9 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D3FE F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D403 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D408 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D40D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D412 06                         byte_CC13:	dc.b 6			; PASSED
0000D413 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D418 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D41D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D422 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D427 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D42C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D431 06                         byte_CC32:	dc.b 6			; SCORE
0000D432 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D437 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D43C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D441 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D446 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D44B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D450 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D451 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D456 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D45B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D460 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D465 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D46A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D46F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D474 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D475 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D47A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D47F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D484 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D489 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D48E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D493 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D498                            		even
0000D498                            ; ---------------------------------------------------------------------------
0000D498                            ; Sprite mappings - special stage results screen
0000D498                            ; ---------------------------------------------------------------------------
0000D498 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D49A 0000                       		dc.w byte_CCEE-Map_obj7E
0000D49C 0000                       		dc.w byte_CD0D-Map_obj7E
0000D49E FE8B                       		dc.w byte_CB47-Map_obj7E
0000D4A0 0000                       		dc.w byte_CD31-Map_obj7E
0000D4A2 0000                       		dc.w byte_CD46-Map_obj7E
0000D4A4 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4A6 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4A8 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4AA 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4AB F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4B0 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4B5 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4BA F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4BF F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D4C4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D4C9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D4CE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D4D3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4D8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D4DD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D4E2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D4E7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D4EC 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D4ED F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D4F2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D4F7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D4FC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D501 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D506 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D50B 07                         byte_CD0D:	dc.b 7
0000D50C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D511 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D516 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D51B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D520 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D525 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D52A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D52F 04                         byte_CD31:	dc.b 4
0000D530 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D535 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D53A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D53F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D544 04                         byte_CD46:	dc.b 4
0000D545 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D54A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D54F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D554 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D559 03                         byte_CD5B:	dc.b 3
0000D55A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D55F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D564 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D569 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D56A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D56F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D574 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D579 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D57E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D583 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D588 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D58D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D592 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D597 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D59C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5A1 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5A6 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5A7 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5AC F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5B1 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5B6 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5BB F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D5C0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D5C5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D5CA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D5CF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D5D4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5D9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D5DE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D5E3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D5E8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D5ED F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D5F2                            		even
0000D5F2                            ; ---------------------------------------------------------------------------
0000D5F2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5F2                            ; ---------------------------------------------------------------------------
0000D5F2                            Map_obj7F:
0000D5F2                            	include "_maps\obj7F.asm"
0000D5F2                            ; ---------------------------------------------------------------------------
0000D5F2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5F2                            ; ---------------------------------------------------------------------------
0000D5F2 0000                       		dc.w byte_CE02-Map_obj7F
0000D5F4 0000                       		dc.w byte_CE08-Map_obj7F
0000D5F6 0000                       		dc.w byte_CE0E-Map_obj7F
0000D5F8 0000                       		dc.w byte_CE14-Map_obj7F
0000D5FA 0000                       		dc.w byte_CE1A-Map_obj7F
0000D5FC 0000                       		dc.w byte_CE20-Map_obj7F
0000D5FE 0000                       		dc.w byte_CE26-Map_obj7F
0000D600 01                         byte_CE02:	dc.b 1
0000D601 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D606 01                         byte_CE08:	dc.b 1
0000D607 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D60C 01                         byte_CE0E:	dc.b 1
0000D60D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D612 01                         byte_CE14:	dc.b 1
0000D613 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D618 01                         byte_CE1A:	dc.b 1
0000D619 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D61E 01                         byte_CE20:	dc.b 1
0000D61F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D624 00                         byte_CE26:	dc.b 0			; Blank frame
0000D626 00                         		even
0000D626 00                         		even
0000D626                            
0000D626                            ; ===========================================================================
0000D626                            ; ---------------------------------------------------------------------------
0000D626                            ; Object 36 - spikes
0000D626                            ; ---------------------------------------------------------------------------
0000D626                            
0000D626                            Obj36:					; XREF: Obj_Index
0000D626 7000                       		moveq	#0,d0
0000D628 1028 0024                  		move.b	$24(a0),d0
0000D62C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D630 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D634                            ; ===========================================================================
0000D634 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D636 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D638                            
0000D638 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D63A 0110                       		dc.b 1,	$10
0000D63C 0204                       		dc.b 2,	4
0000D63E 031C                       		dc.b 3,	$1C
0000D640 0440                       		dc.b 4,	$40
0000D642 0510                       		dc.b 5,	$10
0000D644                            ; ===========================================================================
0000D644                            
0000D644                            Obj36_Main:				; XREF: Obj36_Index
0000D644 5428 0024                  		addq.b	#2,$24(a0)
0000D648 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D650 317C 051B 0002             		move.w	#$51B,2(a0)
0000D656 0028 0004 0001             		ori.b	#4,1(a0)
0000D65C 117C 0004 0018             		move.b	#4,$18(a0)
0000D662 1028 0028                  		move.b	$28(a0),d0
0000D666 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D66C 0240 00F0                  		andi.w	#$F0,d0
0000D670 43F9 0000 D638             		lea	(Obj36_Var).l,a1
0000D676 E648                       		lsr.w	#3,d0
0000D678 D2C0                       		adda.w	d0,a1
0000D67A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D67E 1159 0019                  		move.b	(a1)+,$19(a0)
0000D682 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D688 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D68E                            
0000D68E                            Obj36_Solid:				; XREF: Obj36_Index
0000D68E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D692 343C 0004                  		move.w	#4,d2
0000D696 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D69C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D69E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6A4 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6A6 343C 0014                  		move.w	#$14,d2
0000D6AA                            
0000D6AA                            ; Spikes types $1x and $5x face	sideways
0000D6AA                            
0000D6AA                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6AA 323C 001B                  		move.w	#$1B,d1
0000D6AE 3602                       		move.w	d2,d3
0000D6B0 5243                       		addq.w	#1,d3
0000D6B2 3828 0008                  		move.w	8(a0),d4
0000D6B6 6100 0000                  		bsr.w	SolidObject
0000D6BA 0828 0003 0022             		btst	#3,$22(a0)
0000D6C0 6600                       		bne.s	Obj36_Display
0000D6C2 0C44 0001                  		cmpi.w	#1,d4
0000D6C6 6700                       		beq.s	Obj36_Hurt
0000D6C8 6000                       		bra.s	Obj36_Display
0000D6CA                            ; ===========================================================================
0000D6CA                            
0000D6CA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D6CA                            
0000D6CA                            Obj36_Upright:				; XREF: Obj36_Solid
0000D6CA 7200                       		moveq	#0,d1
0000D6CC 1228 0019                  		move.b	$19(a0),d1
0000D6D0 0641 000B                  		addi.w	#$B,d1
0000D6D4 343C 0010                  		move.w	#$10,d2
0000D6D8 363C 0011                  		move.w	#$11,d3
0000D6DC 3828 0008                  		move.w	8(a0),d4
0000D6E0 6100 0000                  		bsr.w	SolidObject
0000D6E4 0828 0003 0022             		btst	#3,$22(a0)
0000D6EA 6600                       		bne.s	Obj36_Hurt
0000D6EC 4A44                       		tst.w	d4
0000D6EE 6A00                       		bpl.s	Obj36_Display
0000D6F0                            
0000D6F0                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D6F0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D6F4 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D6F6 2F08                       		move.l	a0,-(sp)
0000D6F8 2448                       		movea.l	a0,a2
0000D6FA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D6FE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D704 6400                       		bcc.s	loc_CF20
0000D706 2628 000C                  		move.l	$C(a0),d3
0000D70A 3028 0012                  		move.w	$12(a0),d0
0000D70E 48C0                       		ext.l	d0
0000D710 E180                       		asl.l	#8,d0
0000D712 9680                       		sub.l	d0,d3
0000D714 2143 000C                  		move.l	d3,$C(a0)
0000D718 4EB9 0000 0000             		jsr	HurtSonic
0000D71E                            
0000D71E                            loc_CF20:
0000D71E 205F                       		movea.l	(sp)+,a0
0000D720                            
0000D720                            Obj36_Display:
0000D720 6100 0000                  		bsr.w	DisplaySprite
0000D724 3028 0030                  		move.w	$30(a0),d0
0000D728 0240 FF80                  		andi.w	#$FF80,d0
0000D72C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D730 0441 0080                  		subi.w	#$80,d1
0000D734 0241 FF80                  		andi.w	#$FF80,d1
0000D738 9041                       		sub.w	d1,d0
0000D73A 0C40 0280                  		cmpi.w	#$280,d0
0000D73E 6200 0000                  		bhi.w	DeleteObject
0000D742 4E75                       		rts	
0000D744                            ; ===========================================================================
0000D744                            
0000D744                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D744 7000                       		moveq	#0,d0
0000D746 1028 0028                  		move.b	$28(a0),d0
0000D74A D040                       		add.w	d0,d0
0000D74C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D750 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D754                            ; ===========================================================================
0000D754 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D756 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D758 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D75A                            ; ===========================================================================
0000D75A                            
0000D75A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D75A 4E75                       		rts			; don't move the object
0000D75C                            ; ===========================================================================
0000D75C                            
0000D75C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D75C 6100 0000                  		bsr.w	Obj36_Wait
0000D760 7000                       		moveq	#0,d0
0000D762 1028 0034                  		move.b	$34(a0),d0
0000D766 D068 0032                  		add.w	$32(a0),d0
0000D76A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D76E 4E75                       		rts	
0000D770                            ; ===========================================================================
0000D770                            
0000D770                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D770 6100 0000                  		bsr.w	Obj36_Wait
0000D774 7000                       		moveq	#0,d0
0000D776 1028 0034                  		move.b	$34(a0),d0
0000D77A D068 0030                  		add.w	$30(a0),d0
0000D77E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D782 4E75                       		rts	
0000D784                            ; ===========================================================================
0000D784                            
0000D784                            Obj36_Wait:
0000D784 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D788 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D78A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D78E 6600                       		bne.s	locret_CFE6
0000D790 4A28 0001                  		tst.b	1(a0)
0000D794 6A00                       		bpl.s	locret_CFE6
0000D796 303C 00B6                  		move.w	#$B6,d0
0000D79A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7A0 6000                       		bra.s	locret_CFE6
0000D7A2                            ; ===========================================================================
0000D7A2                            
0000D7A2                            loc_CFA4:
0000D7A2 4A68 0036                  		tst.w	$36(a0)
0000D7A6 6700                       		beq.s	loc_CFC6
0000D7A8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7AE 6400                       		bcc.s	locret_CFE6
0000D7B0 317C 0000 0034             		move.w	#0,$34(a0)
0000D7B6 317C 0000 0036             		move.w	#0,$36(a0)
0000D7BC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7C2 6000                       		bra.s	locret_CFE6
0000D7C4                            ; ===========================================================================
0000D7C4                            
0000D7C4                            loc_CFC6:
0000D7C4 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D7CA 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D7D0 6500                       		bcs.s	locret_CFE6
0000D7D2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7D8 317C 0001 0036             		move.w	#1,$36(a0)
0000D7DE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7E4                            
0000D7E4                            locret_CFE6:
0000D7E4 4E75                       		rts	
0000D7E6                            ; ===========================================================================
0000D7E6                            ; ---------------------------------------------------------------------------
0000D7E6                            ; Sprite mappings - spikes
0000D7E6                            ; ---------------------------------------------------------------------------
0000D7E6                            Map_obj36:
0000D7E6                            	include "_maps\obj36.asm"
0000D7E6                            ; ---------------------------------------------------------------------------
0000D7E6                            ; Sprite mappings - spikes
0000D7E6                            ; ---------------------------------------------------------------------------
0000D7E6 0000                       		dc.w byte_CFF4-Map_obj36
0000D7E8 0000                       		dc.w byte_D004-Map_obj36
0000D7EA 0000                       		dc.w byte_D014-Map_obj36
0000D7EC 0000                       		dc.w byte_D01A-Map_obj36
0000D7EE 0000                       		dc.w byte_D02A-Map_obj36
0000D7F0 0000                       		dc.w byte_D049-Map_obj36
0000D7F2 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D7F3 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D7F8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D7FD F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D802 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D803 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D808 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D80D 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D812 01                         byte_D014:	dc.b 1			; 1 spike
0000D813 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D818 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D819 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D81E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D823 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D828 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D829 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D82E F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D833 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D838 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D83D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D842 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D847 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D848 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D84E 00                         		even
0000D84E 00                         		even
0000D84E                            
0000D84E                            ; ===========================================================================
0000D84E                            ; ---------------------------------------------------------------------------
0000D84E                            ; Object 3B - purple rock (GHZ)
0000D84E                            ; ---------------------------------------------------------------------------
0000D84E                            
0000D84E                            Obj3B:					; XREF: Obj_Index
0000D84E 7000                       		moveq	#0,d0
0000D850 1028 0024                  		move.b	$24(a0),d0
0000D854 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D858 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D85C                            ; ===========================================================================
0000D85C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D85E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D860                            ; ===========================================================================
0000D860                            
0000D860                            Obj3B_Main:				; XREF: Obj3B_Index
0000D860 5428 0024                  		addq.b	#2,$24(a0)
0000D864 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D86C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D872 117C 0004 0001             		move.b	#4,1(a0)
0000D878 117C 0013 0019             		move.b	#$13,$19(a0)
0000D87E 117C 0004 0018             		move.b	#4,$18(a0)
0000D884                            
0000D884                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D884 323C 001B                  		move.w	#$1B,d1
0000D888 343C 0010                  		move.w	#$10,d2
0000D88C 363C 0010                  		move.w	#$10,d3
0000D890 3828 0008                  		move.w	8(a0),d4
0000D894 6100 0000                  		bsr.w	SolidObject
0000D898 6100 0000                  		bsr.w	DisplaySprite
0000D89C 3028 0008                  		move.w	8(a0),d0
0000D8A0 0240 FF80                  		andi.w	#$FF80,d0
0000D8A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8A8 0441 0080                  		subi.w	#$80,d1
0000D8AC 0241 FF80                  		andi.w	#$FF80,d1
0000D8B0 9041                       		sub.w	d1,d0
0000D8B2 0C40 0280                  		cmpi.w	#$280,d0
0000D8B6 6200 0000                  		bhi.w	DeleteObject
0000D8BA 4E75                       		rts	
0000D8BC                            ; ===========================================================================
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8BC                            ; ---------------------------------------------------------------------------
0000D8BC                            
0000D8BC                            Obj49:					; XREF: Obj_Index
0000D8BC 7000                       		moveq	#0,d0
0000D8BE 1028 0024                  		move.b	$24(a0),d0
0000D8C2 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D8C6 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D8CA                            ; ===========================================================================
0000D8CA 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D8CC 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D8CE                            ; ===========================================================================
0000D8CE                            
0000D8CE                            Obj49_Main:				; XREF: Obj49_Index
0000D8CE 5428 0024                  		addq.b	#2,$24(a0)
0000D8D2 117C 0004 0001             		move.b	#4,1(a0)
0000D8D8                            
0000D8D8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8D8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D8DC 0200 003F                  		andi.b	#$3F,d0
0000D8E0 6600                       		bne.s	Obj49_ChkDel
0000D8E2 303C 00D0                  		move.w	#$D0,d0
0000D8E6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D8EC                            
0000D8EC                            Obj49_ChkDel:
0000D8EC 3028 0008                  		move.w	8(a0),d0
0000D8F0 0240 FF80                  		andi.w	#$FF80,d0
0000D8F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8F8 0441 0080                  		subi.w	#$80,d1
0000D8FC 0241 FF80                  		andi.w	#$FF80,d1
0000D900 9041                       		sub.w	d1,d0
0000D902 0C40 0280                  		cmpi.w	#$280,d0
0000D906 6200 0000                  		bhi.w	DeleteObject
0000D90A 4E75                       		rts	
0000D90C                            ; ===========================================================================
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            ; Sprite mappings - purple rock	(GHZ)
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            Map_obj3B:
0000D90C                            	include "_maps\obj3B.asm"
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            ; Sprite mappings - purple rock	(GHZ)
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C 0000                       		dc.w byte_D110-Map_obj3B
0000D90E 02                         byte_D110:	dc.b 2
0000D90F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D914 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D91A 00                         		even
0000D91A 00                         		even
0000D91A                            
0000D91A                            ; ===========================================================================
0000D91A                            ; ---------------------------------------------------------------------------
0000D91A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D91A                            ; ---------------------------------------------------------------------------
0000D91A                            
0000D91A                            Obj3C:					; XREF: Obj_Index
0000D91A 7000                       		moveq	#0,d0
0000D91C 1028 0024                  		move.b	$24(a0),d0
0000D920 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D924 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D928 6000 0000                  		bra.w	MarkObjGone
0000D92C                            ; ===========================================================================
0000D92C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D92E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D930 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D932                            ; ===========================================================================
0000D932                            
0000D932                            Obj3C_Main:				; XREF: Obj3C_Index
0000D932 5428 0024                  		addq.b	#2,$24(a0)
0000D936 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D93E 317C 450F 0002             		move.w	#$450F,2(a0)
0000D944 117C 0004 0001             		move.b	#4,1(a0)
0000D94A 117C 0010 0019             		move.b	#$10,$19(a0)
0000D950 117C 0004 0018             		move.b	#4,$18(a0)
0000D956 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D95C                            
0000D95C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D95C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D962 323C 001B                  		move.w	#$1B,d1
0000D966 343C 0020                  		move.w	#$20,d2
0000D96A 363C 0020                  		move.w	#$20,d3
0000D96E 3828 0008                  		move.w	8(a0),d4
0000D972 6100 0000                  		bsr.w	SolidObject
0000D976 0828 0005 0022             		btst	#5,$22(a0)
0000D97C 6600                       		bne.s	Obj3C_ChkRoll
0000D97E                            
0000D97E                            locret_D180:
0000D97E 4E75                       		rts	
0000D980                            ; ===========================================================================
0000D980                            
0000D980                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D980 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D986 66F6                       		bne.s	locret_D180	; if not, branch
0000D988 3028 0030                  		move.w	$30(a0),d0
0000D98C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D98E 4440                       		neg.w	d0
0000D990                            
0000D990                            Obj3C_ChkSpeed:
0000D990 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D994 65E8                       		bcs.s	locret_D180	; if not, branch
0000D996 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D99C 5869 0008                  		addq.w	#4,8(a1)
0000D9A0 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9A6 3028 0008                  		move.w	8(a0),d0
0000D9AA B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9AE 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9B0 5169 0008                  		subq.w	#8,8(a1)
0000D9B4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9BA                            
0000D9BA                            Obj3C_Smash:
0000D9BA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D9C0 08A8 0005 0022             		bclr	#5,$22(a0)
0000D9C6 08A9 0005 0022             		bclr	#5,$22(a1)
0000D9CC 7207                       		moveq	#7,d1		; load 8 fragments
0000D9CE 343C 0070                  		move.w	#$70,d2
0000D9D2 6100                       		bsr.s	SmashObject
0000D9D4                            
0000D9D4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D9D4 6100 0000                  		bsr.w	SpeedToPos
0000D9D8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D9DE 6100 0000                  		bsr.w	DisplaySprite
0000D9E2 4A28 0001                  		tst.b	1(a0)
0000D9E6 6A00 0000                  		bpl.w	DeleteObject
0000D9EA 4E75                       		rts	
0000D9EC                            
0000D9EC                            ; ---------------------------------------------------------------------------
0000D9EC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D9EC                            ; ---------------------------------------------------------------------------
0000D9EC                            
0000D9EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9EC                            
0000D9EC                            
0000D9EC                            SmashObject:				; XREF: Obj3C_Smash
0000D9EC 7000                       		moveq	#0,d0
0000D9EE 1028 001A                  		move.b	$1A(a0),d0
0000D9F2 D040                       		add.w	d0,d0
0000D9F4 2668 0004                  		movea.l	4(a0),a3
0000D9F8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D9FC 524B                       		addq.w	#1,a3
0000D9FE 08E8 0005 0001             		bset	#5,1(a0)
0000DA04 1810                       		move.b	0(a0),d4
0000DA06 1A28 0001                  		move.b	1(a0),d5
0000DA0A 2248                       		movea.l	a0,a1
0000DA0C 6000                       		bra.s	Smash_LoadFrag
0000DA0E                            ; ===========================================================================
0000DA0E                            
0000DA0E                            Smash_Loop:
0000DA0E 6100 0000                  		bsr.w	SingleObjLoad
0000DA12 6600                       		bne.s	Smash_PlaySnd
0000DA14 5A4B                       		addq.w	#5,a3
0000DA16                            
0000DA16                            Smash_LoadFrag:				; XREF: SmashObject
0000DA16 137C 0004 0024             		move.b	#4,$24(a1)
0000DA1C 1284                       		move.b	d4,0(a1)
0000DA1E 234B 0004                  		move.l	a3,4(a1)
0000DA22 1345 0001                  		move.b	d5,1(a1)
0000DA26 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA32 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA38 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA3E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA44 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA48 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA4C B3C8                       		cmpa.l	a0,a1
0000DA4E 6400                       		bcc.s	loc_D268
0000DA50 2F08                       		move.l	a0,-(sp)
0000DA52 2049                       		movea.l	a1,a0
0000DA54 6100 0000                  		bsr.w	SpeedToPos
0000DA58 D568 0012                  		add.w	d2,$12(a0)
0000DA5C 205F                       		movea.l	(sp)+,a0
0000DA5E 6100 0000                  		bsr.w	DisplaySprite2
0000DA62                            
0000DA62                            loc_D268:
0000DA62 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA66                            
0000DA66                            Smash_PlaySnd:
0000DA66 303C 00CB                  		move.w	#$CB,d0
0000DA6A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA70                            ; End of function SmashObject
0000DA70                            
0000DA70                            ; ===========================================================================
0000DA70                            ; Smashed block	fragment speeds
0000DA70                            ;
0000DA70 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA74 0600 FF00                  		dc.w $600, $FF00
0000DA78 0600 0100                  		dc.w $600, $100
0000DA7C 0400 0500                  		dc.w $400, $500
0000DA80 0600 FA00                  		dc.w $600, $FA00
0000DA84 0800 FE00                  		dc.w $800, $FE00
0000DA88 0800 0200                  		dc.w $800, $200
0000DA8C 0600 0600                  		dc.w $600, $600
0000DA90                            
0000DA90 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA94 F800 FE00                  		dc.w $F800, $FE00
0000DA98 F800 0200                  		dc.w $F800, $200
0000DA9C FA00 0600                  		dc.w $FA00, $600
0000DAA0 FC00 FB00                  		dc.w $FC00, $FB00
0000DAA4 FA00 FF00                  		dc.w $FA00, $FF00
0000DAA8 FA00 0100                  		dc.w $FA00, $100
0000DAAC FC00 0500                  		dc.w $FC00, $500
0000DAB0                            ; ---------------------------------------------------------------------------
0000DAB0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAB0                            ; ---------------------------------------------------------------------------
0000DAB0                            Map_obj3C:
0000DAB0                            	include "_maps\obj3C.asm"
0000DAB0                            ; ---------------------------------------------------------------------------
0000DAB0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAB0                            ; ---------------------------------------------------------------------------
0000DAB0 0000                       		dc.w byte_D2BC-Map_obj3C
0000DAB2 0000                       		dc.w byte_D2E5-Map_obj3C
0000DAB4 0000                       		dc.w byte_D30E-Map_obj3C
0000DAB6 08                         byte_D2BC:	dc.b 8
0000DAB7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DABC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DAC1 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DAC6 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DACB E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAD0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAD5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DADA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DADF 08                         byte_D2E5:	dc.b 8
0000DAE0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAE5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DAEA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DAEF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAF4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAF9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAFE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB03 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB08 08                         byte_D30E:	dc.b 8
0000DB09 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB0E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB13 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB18 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB1D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB22 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB27 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB2C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB32 00                         		even
0000DB32 00                         		even
0000DB32                            
0000DB32                            ; ---------------------------------------------------------------------------
0000DB32                            ; Object code loading subroutine
0000DB32                            ; ---------------------------------------------------------------------------
0000DB32                            
0000DB32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB32                            
0000DB32                            
0000DB32                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB32 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB36 7E7F                       		moveq	#$7F,d7
0000DB38 7000                       		moveq	#0,d0
0000DB3A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB40 6400                       		bcc.s	loc_D362
0000DB42                            
0000DB42                            loc_D348:
0000DB42 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB44 6700                       		beq.s	loc_D358
0000DB46 D040                       		add.w	d0,d0
0000DB48 D040                       		add.w	d0,d0
0000DB4A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB4E 4E91                       		jsr	(a1)		; run the object's code
0000DB50 7000                       		moveq	#0,d0
0000DB52                            
0000DB52                            loc_D358:
0000DB52 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB56 51CF FFEA                  		dbf	d7,loc_D348
0000DB5A 4E75                       		rts	
0000DB5C                            ; ===========================================================================
0000DB5C                            
0000DB5C                            loc_D362:
0000DB5C 7E1F                       		moveq	#$1F,d7
0000DB5E 61E2                       		bsr.s	loc_D348
0000DB60 7E5F                       		moveq	#$5F,d7
0000DB62                            
0000DB62                            loc_D368:
0000DB62 7000                       		moveq	#0,d0
0000DB64 1010                       		move.b	(a0),d0
0000DB66 6700                       		beq.s	loc_D378
0000DB68 4A28 0001                  		tst.b	1(a0)
0000DB6C 6A00                       		bpl.s	loc_D378
0000DB6E 6100 0000                  		bsr.w	DisplaySprite
0000DB72                            
0000DB72                            loc_D378:
0000DB72 41E8 0040                  		lea	$40(a0),a0
0000DB76                            
0000DB76                            loc_D37C:
0000DB76 51CF FFEA                  		dbf	d7,loc_D368
0000DB7A 4E75                       		rts	
0000DB7C                            ; End of function ObjectsLoad
0000DB7C                            
0000DB7C                            ; ===========================================================================
0000DB7C                            ; ---------------------------------------------------------------------------
0000DB7C                            ; Object pointers
0000DB7C                            ; ---------------------------------------------------------------------------
0000DB7C                            Obj_Index:
0000DB7C                            	include "_inc\Object pointers.asm"
0000DB7C                            ; ---------------------------------------------------------------------------
0000DB7C                            ; Object pointers
0000DB7C                            ; ---------------------------------------------------------------------------
0000DB7C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DB8C 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DB9C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBAC 0000 0000 0000 ADC2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBBC 0000 7968 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DBCC 0000 7F8E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DBDC 0000 87DC 0000 88D6 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DBEC 0000 8F20 0000 920E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DBFC 0000 0000 0000 9EBE 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC0C 0000 A1F6 0000 A7E2 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC1C 0000 9B1A 0000 8FF6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC2C 0000 B3BA 0000 A9D6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC3C 0000 BDCE 0000 C47C 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC4C 0000 B92C 0000 D626 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC5C 0000 CC02 0000 CCBC 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC6C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC7C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC8C 0000 C0EA 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DC9C 0000 D8BC 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCAC 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCBC 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DCCC 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DCDC 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DCEC 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DCFC 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD0C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD1C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD2C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD3C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD4C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD5C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD6C 0000 0000 0000 CEF6 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD7C 0000 5474 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD8C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DD9C 0000 5B2E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD9C 0000 5B2E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDAC                            
0000DDAC                            ; ---------------------------------------------------------------------------
0000DDAC                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDAC                            ; ---------------------------------------------------------------------------
0000DDAC                            
0000DDAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDAC                            
0000DDAC                            
0000DDAC                            ObjectFall:
0000DDAC 2428 0008                  		move.l	8(a0),d2
0000DDB0 2628 000C                  		move.l	$C(a0),d3
0000DDB4 3028 0010                  		move.w	$10(a0),d0
0000DDB8 48C0                       		ext.l	d0
0000DDBA E180                       		asl.l	#8,d0
0000DDBC D480                       		add.l	d0,d2
0000DDBE 3028 0012                  		move.w	$12(a0),d0
0000DDC2 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DDC8 48C0                       		ext.l	d0
0000DDCA E180                       		asl.l	#8,d0
0000DDCC D680                       		add.l	d0,d3
0000DDCE 2142 0008                  		move.l	d2,8(a0)
0000DDD2 2143 000C                  		move.l	d3,$C(a0)
0000DDD6 4E75                       		rts	
0000DDD8                            ; End of function ObjectFall
0000DDD8                            
0000DDD8                            ; ---------------------------------------------------------------------------
0000DDD8                            ; Subroutine translating object	speed to update	object position
0000DDD8                            ; ---------------------------------------------------------------------------
0000DDD8                            
0000DDD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDD8                            
0000DDD8                            
0000DDD8                            SpeedToPos:
0000DDD8 2428 0008                  		move.l	8(a0),d2
0000DDDC 2628 000C                  		move.l	$C(a0),d3
0000DDE0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DDE4 48C0                       		ext.l	d0
0000DDE6 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DDE8 D480                       		add.l	d0,d2		; add to x-axis	position
0000DDEA 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DDEE 48C0                       		ext.l	d0
0000DDF0 E180                       		asl.l	#8,d0		; multiply by $100
0000DDF2 D680                       		add.l	d0,d3		; add to y-axis	position
0000DDF4 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DDF8 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DDFC 4E75                       		rts	
0000DDFE                            ; End of function SpeedToPos
0000DDFE                            
0000DDFE                            ; ---------------------------------------------------------------------------
0000DDFE                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DDFE                            ; ---------------------------------------------------------------------------
0000DDFE                            
0000DDFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDFE                            
0000DDFE                            
0000DDFE                            DisplaySprite:
0000DDFE 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE02 3028 0018                  		move.w	$18(a0),d0
0000DE06 E248                       		lsr.w	#1,d0
0000DE08 0240 0380                  		andi.w	#$380,d0
0000DE0C D2C0                       		adda.w	d0,a1
0000DE0E 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE12 6400                       		bcc.s	locret_D620
0000DE14 5451                       		addq.w	#2,(a1)
0000DE16 D2D1                       		adda.w	(a1),a1
0000DE18 3288                       		move.w	a0,(a1)
0000DE1A                            
0000DE1A                            locret_D620:
0000DE1A 4E75                       		rts	
0000DE1C                            ; End of function DisplaySprite
0000DE1C                            
0000DE1C                            ; ---------------------------------------------------------------------------
0000DE1C                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DE1C                            ; ---------------------------------------------------------------------------
0000DE1C                            
0000DE1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE1C                            
0000DE1C                            
0000DE1C                            DisplaySprite2:
0000DE1C 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DE20 3029 0018                  		move.w	$18(a1),d0
0000DE24 E248                       		lsr.w	#1,d0
0000DE26 0240 0380                  		andi.w	#$380,d0
0000DE2A D4C0                       		adda.w	d0,a2
0000DE2C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DE30 6400                       		bcc.s	locret_D63E
0000DE32 5452                       		addq.w	#2,(a2)
0000DE34 D4D2                       		adda.w	(a2),a2
0000DE36 3489                       		move.w	a1,(a2)
0000DE38                            
0000DE38                            locret_D63E:
0000DE38 4E75                       		rts	
0000DE3A                            ; End of function DisplaySprite2
0000DE3A                            
0000DE3A                            ; ---------------------------------------------------------------------------
0000DE3A                            ; Subroutine to	delete an object
0000DE3A                            ; ---------------------------------------------------------------------------
0000DE3A                            
0000DE3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE3A                            
0000DE3A                            
0000DE3A                            DeleteObject:
0000DE3A 2248                       		movea.l	a0,a1
0000DE3C                            
0000DE3C                            DeleteObject2:
0000DE3C 7200                       		moveq	#0,d1
0000DE3E 700F                       		moveq	#$F,d0
0000DE40                            
0000DE40                            loc_D646:
0000DE40 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DE42 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DE46 4E75                       		rts	
0000DE48                            ; End of function DeleteObject
0000DE48                            
0000DE48                            ; ===========================================================================
0000DE48 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DE4C 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DE50 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DE54 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DE58                            ; ---------------------------------------------------------------------------
0000DE58                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DE58                            ; ---------------------------------------------------------------------------
0000DE58                            
0000DE58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE58                            
0000DE58                            
0000DE58                            BuildSprites:				; XREF: TitleScreen; et al
0000DE58 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DE5C 7A00                       		moveq	#0,d5
0000DE5E 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DE62 7E07                       		moveq	#7,d7
0000DE64                            
0000DE64                            loc_D66A:
0000DE64 4A54                       		tst.w	(a4)
0000DE66 6700 0000                  		beq.w	loc_D72E
0000DE6A 7C02                       		moveq	#2,d6
0000DE6C                            
0000DE6C                            loc_D672:
0000DE6C 3074 6000                  		movea.w	(a4,d6.w),a0
0000DE70 4A10                       		tst.b	(a0)
0000DE72 6700 0000                  		beq.w	loc_D726
0000DE76 08A8 0007 0001             		bclr	#7,1(a0)
0000DE7C 1028 0001                  		move.b	1(a0),d0
0000DE80 1800                       		move.b	d0,d4
0000DE82 0240 000C                  		andi.w	#$C,d0
0000DE86 6700                       		beq.s	loc_D6DE
0000DE88 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE8C 7000                       		moveq	#0,d0
0000DE8E 1028 0019                  		move.b	$19(a0),d0
0000DE92 3628 0008                  		move.w	8(a0),d3
0000DE96 9651                       		sub.w	(a1),d3
0000DE98 3203                       		move.w	d3,d1
0000DE9A D240                       		add.w	d0,d1
0000DE9C 6B00 0000                  		bmi.w	loc_D726
0000DEA0 3203                       		move.w	d3,d1
0000DEA2 9240                       		sub.w	d0,d1
0000DEA4 0C41 0140                  		cmpi.w	#$140,d1
0000DEA8 6C00                       		bge.s	loc_D726
0000DEAA 0643 0080                  		addi.w	#$80,d3
0000DEAE 0804 0004                  		btst	#4,d4
0000DEB2 6700                       		beq.s	loc_D6E8
0000DEB4 7000                       		moveq	#0,d0
0000DEB6 1028 0016                  		move.b	$16(a0),d0
0000DEBA 3428 000C                  		move.w	$C(a0),d2
0000DEBE 9469 0004                  		sub.w	4(a1),d2
0000DEC2 3202                       		move.w	d2,d1
0000DEC4 D240                       		add.w	d0,d1
0000DEC6 6B00                       		bmi.s	loc_D726
0000DEC8 3202                       		move.w	d2,d1
0000DECA 9240                       		sub.w	d0,d1
0000DECC 0C41 00E0                  		cmpi.w	#$E0,d1
0000DED0 6C00                       		bge.s	loc_D726
0000DED2 0642 0080                  		addi.w	#$80,d2
0000DED6 6000                       		bra.s	loc_D700
0000DED8                            ; ===========================================================================
0000DED8                            
0000DED8                            loc_D6DE:
0000DED8 3428 000A                  		move.w	$A(a0),d2
0000DEDC 3628 0008                  		move.w	8(a0),d3
0000DEE0 6000                       		bra.s	loc_D700
0000DEE2                            ; ===========================================================================
0000DEE2                            
0000DEE2                            loc_D6E8:
0000DEE2 3428 000C                  		move.w	$C(a0),d2
0000DEE6 9469 0004                  		sub.w	4(a1),d2
0000DEEA 0642 0080                  		addi.w	#$80,d2
0000DEEE 0C42 0060                  		cmpi.w	#$60,d2
0000DEF2 6500                       		bcs.s	loc_D726
0000DEF4 0C42 0180                  		cmpi.w	#$180,d2
0000DEF8 6400                       		bcc.s	loc_D726
0000DEFA                            
0000DEFA                            loc_D700:
0000DEFA 2268 0004                  		movea.l	4(a0),a1
0000DEFE 7200                       		moveq	#0,d1
0000DF00 0804 0005                  		btst	#5,d4
0000DF04 6600                       		bne.s	loc_D71C
0000DF06 1228 001A                  		move.b	$1A(a0),d1
0000DF0A D201                       		add.b	d1,d1
0000DF0C D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF10 1219                       		move.b	(a1)+,d1
0000DF12 5301                       		subq.b	#1,d1
0000DF14 6B00                       		bmi.s	loc_D720
0000DF16                            
0000DF16                            loc_D71C:
0000DF16 6100 0000                  		bsr.w	sub_D750
0000DF1A                            
0000DF1A                            loc_D720:
0000DF1A 08E8 0007 0001             		bset	#7,1(a0)
0000DF20                            
0000DF20                            loc_D726:
0000DF20 5446                       		addq.w	#2,d6
0000DF22 5554                       		subq.w	#2,(a4)
0000DF24 6600 FF46                  		bne.w	loc_D672
0000DF28                            
0000DF28                            loc_D72E:
0000DF28 49EC 0080                  		lea	$80(a4),a4
0000DF2C 51CF FF36                  		dbf	d7,loc_D66A
0000DF30 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DF34 0C05 0050                  		cmpi.b	#$50,d5
0000DF38 6700                       		beq.s	loc_D748
0000DF3A 24BC 0000 0000             		move.l	#0,(a2)
0000DF40 4E75                       		rts	
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            loc_D748:
0000DF42 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DF48 4E75                       		rts	
0000DF4A                            ; End of function BuildSprites
0000DF4A                            
0000DF4A                            
0000DF4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF4A                            
0000DF4A                            
0000DF4A                            sub_D750:				; XREF: BuildSprites
0000DF4A 3668 0002                  		movea.w	2(a0),a3
0000DF4E 0804 0000                  		btst	#0,d4
0000DF52 6600                       		bne.s	loc_D796
0000DF54 0804 0001                  		btst	#1,d4
0000DF58 6600 0000                  		bne.w	loc_D7E4
0000DF5C                            ; End of function sub_D750
0000DF5C                            
0000DF5C                            
0000DF5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF5C                            
0000DF5C                            
0000DF5C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DF5C 0C05 0050                  		cmpi.b	#$50,d5
0000DF60 6700                       		beq.s	locret_D794
0000DF62 1019                       		move.b	(a1)+,d0
0000DF64 4880                       		ext.w	d0
0000DF66 D042                       		add.w	d2,d0
0000DF68 34C0                       		move.w	d0,(a2)+
0000DF6A 14D9                       		move.b	(a1)+,(a2)+
0000DF6C 5205                       		addq.b	#1,d5
0000DF6E 14C5                       		move.b	d5,(a2)+
0000DF70 1019                       		move.b	(a1)+,d0
0000DF72 E148                       		lsl.w	#8,d0
0000DF74 1019                       		move.b	(a1)+,d0
0000DF76 D04B                       		add.w	a3,d0
0000DF78 34C0                       		move.w	d0,(a2)+
0000DF7A 1019                       		move.b	(a1)+,d0
0000DF7C 4880                       		ext.w	d0
0000DF7E D043                       		add.w	d3,d0
0000DF80 0240 01FF                  		andi.w	#$1FF,d0
0000DF84 6600                       		bne.s	loc_D78E
0000DF86 5240                       		addq.w	#1,d0
0000DF88                            
0000DF88                            loc_D78E:
0000DF88 34C0                       		move.w	d0,(a2)+
0000DF8A 51C9 FFD0                  		dbf	d1,sub_D762
0000DF8E                            
0000DF8E                            locret_D794:
0000DF8E 4E75                       		rts	
0000DF90                            ; End of function sub_D762
0000DF90                            
0000DF90                            ; ===========================================================================
0000DF90                            
0000DF90                            loc_D796:
0000DF90 0804 0001                  		btst	#1,d4
0000DF94 6600 0000                  		bne.w	loc_D82A
0000DF98                            
0000DF98                            loc_D79E:
0000DF98 0C05 0050                  		cmpi.b	#$50,d5
0000DF9C 6700                       		beq.s	locret_D7E2
0000DF9E 1019                       		move.b	(a1)+,d0
0000DFA0 4880                       		ext.w	d0
0000DFA2 D042                       		add.w	d2,d0
0000DFA4 34C0                       		move.w	d0,(a2)+
0000DFA6 1819                       		move.b	(a1)+,d4
0000DFA8 14C4                       		move.b	d4,(a2)+
0000DFAA 5205                       		addq.b	#1,d5
0000DFAC 14C5                       		move.b	d5,(a2)+
0000DFAE 1019                       		move.b	(a1)+,d0
0000DFB0 E148                       		lsl.w	#8,d0
0000DFB2 1019                       		move.b	(a1)+,d0
0000DFB4 D04B                       		add.w	a3,d0
0000DFB6 0A40 0800                  		eori.w	#$800,d0
0000DFBA 34C0                       		move.w	d0,(a2)+
0000DFBC 1019                       		move.b	(a1)+,d0
0000DFBE 4880                       		ext.w	d0
0000DFC0 4440                       		neg.w	d0
0000DFC2 D804                       		add.b	d4,d4
0000DFC4 0244 0018                  		andi.w	#$18,d4
0000DFC8 5044                       		addq.w	#8,d4
0000DFCA 9044                       		sub.w	d4,d0
0000DFCC D043                       		add.w	d3,d0
0000DFCE 0240 01FF                  		andi.w	#$1FF,d0
0000DFD2 6600                       		bne.s	loc_D7DC
0000DFD4 5240                       		addq.w	#1,d0
0000DFD6                            
0000DFD6                            loc_D7DC:
0000DFD6 34C0                       		move.w	d0,(a2)+
0000DFD8 51C9 FFBE                  		dbf	d1,loc_D79E
0000DFDC                            
0000DFDC                            locret_D7E2:
0000DFDC 4E75                       		rts	
0000DFDE                            ; ===========================================================================
0000DFDE                            
0000DFDE                            loc_D7E4:				; XREF: sub_D750
0000DFDE 0C05 0050                  		cmpi.b	#$50,d5
0000DFE2 6700                       		beq.s	locret_D828
0000DFE4 1019                       		move.b	(a1)+,d0
0000DFE6 1811                       		move.b	(a1),d4
0000DFE8 4880                       		ext.w	d0
0000DFEA 4440                       		neg.w	d0
0000DFEC E70C                       		lsl.b	#3,d4
0000DFEE 0244 0018                  		andi.w	#$18,d4
0000DFF2 5044                       		addq.w	#8,d4
0000DFF4 9044                       		sub.w	d4,d0
0000DFF6 D042                       		add.w	d2,d0
0000DFF8 34C0                       		move.w	d0,(a2)+
0000DFFA 14D9                       		move.b	(a1)+,(a2)+
0000DFFC 5205                       		addq.b	#1,d5
0000DFFE 14C5                       		move.b	d5,(a2)+
0000E000 1019                       		move.b	(a1)+,d0
0000E002 E148                       		lsl.w	#8,d0
0000E004 1019                       		move.b	(a1)+,d0
0000E006 D04B                       		add.w	a3,d0
0000E008 0A40 1000                  		eori.w	#$1000,d0
0000E00C 34C0                       		move.w	d0,(a2)+
0000E00E 1019                       		move.b	(a1)+,d0
0000E010 4880                       		ext.w	d0
0000E012 D043                       		add.w	d3,d0
0000E014 0240 01FF                  		andi.w	#$1FF,d0
0000E018 6600                       		bne.s	loc_D822
0000E01A 5240                       		addq.w	#1,d0
0000E01C                            
0000E01C                            loc_D822:
0000E01C 34C0                       		move.w	d0,(a2)+
0000E01E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E022                            
0000E022                            locret_D828:
0000E022 4E75                       		rts	
0000E024                            ; ===========================================================================
0000E024                            
0000E024                            loc_D82A:
0000E024 0C05 0050                  		cmpi.b	#$50,d5
0000E028 6700                       		beq.s	locret_D87C
0000E02A 1019                       		move.b	(a1)+,d0
0000E02C 1811                       		move.b	(a1),d4
0000E02E 4880                       		ext.w	d0
0000E030 4440                       		neg.w	d0
0000E032 E70C                       		lsl.b	#3,d4
0000E034 0244 0018                  		andi.w	#$18,d4
0000E038 5044                       		addq.w	#8,d4
0000E03A 9044                       		sub.w	d4,d0
0000E03C D042                       		add.w	d2,d0
0000E03E 34C0                       		move.w	d0,(a2)+
0000E040 1819                       		move.b	(a1)+,d4
0000E042 14C4                       		move.b	d4,(a2)+
0000E044 5205                       		addq.b	#1,d5
0000E046 14C5                       		move.b	d5,(a2)+
0000E048 1019                       		move.b	(a1)+,d0
0000E04A E148                       		lsl.w	#8,d0
0000E04C 1019                       		move.b	(a1)+,d0
0000E04E D04B                       		add.w	a3,d0
0000E050 0A40 1800                  		eori.w	#$1800,d0
0000E054 34C0                       		move.w	d0,(a2)+
0000E056 1019                       		move.b	(a1)+,d0
0000E058 4880                       		ext.w	d0
0000E05A 4440                       		neg.w	d0
0000E05C D804                       		add.b	d4,d4
0000E05E 0244 0018                  		andi.w	#$18,d4
0000E062 5044                       		addq.w	#8,d4
0000E064 9044                       		sub.w	d4,d0
0000E066 D043                       		add.w	d3,d0
0000E068 0240 01FF                  		andi.w	#$1FF,d0
0000E06C 6600                       		bne.s	loc_D876
0000E06E 5240                       		addq.w	#1,d0
0000E070                            
0000E070                            loc_D876:
0000E070 34C0                       		move.w	d0,(a2)+
0000E072 51C9 FFB0                  		dbf	d1,loc_D82A
0000E076                            
0000E076                            locret_D87C:
0000E076 4E75                       		rts	
0000E078                            ; ---------------------------------------------------------------------------
0000E078                            ; Subroutine to	check if an object is on the screen
0000E078                            ; ---------------------------------------------------------------------------
0000E078                            
0000E078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E078                            
0000E078                            
0000E078                            ChkObjOnScreen:
0000E078 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E07C 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E080 6B00                       		bmi.s	NotOnScreen
0000E082 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E086 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E088                            
0000E088 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E08C 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E090 6B00                       		bmi.s	NotOnScreen
0000E092 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E096 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E098                            
0000E098 7000                       		moveq	#0,d0		; set flag to 0
0000E09A 4E75                       		rts	
0000E09C                            ; ===========================================================================
0000E09C                            
0000E09C                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E09C 7001                       		moveq	#1,d0		; set flag to 1
0000E09E 4E75                       		rts	
0000E0A0                            ; End of function ChkObjOnScreen
0000E0A0                            
0000E0A0                            
0000E0A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0A0                            
0000E0A0                            
0000E0A0                            ChkObjOnScreen2:
0000E0A0 7200                       		moveq	#0,d1
0000E0A2 1228 0019                  		move.b	$19(a0),d1
0000E0A6 3028 0008                  		move.w	8(a0),d0
0000E0AA 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E0AE D041                       		add.w	d1,d0
0000E0B0 6B00                       		bmi.s	NotOnScreen2
0000E0B2 D241                       		add.w	d1,d1
0000E0B4 9041                       		sub.w	d1,d0
0000E0B6 0C40 0140                  		cmpi.w	#320,d0
0000E0BA 6C00                       		bge.s	NotOnScreen2
0000E0BC                            
0000E0BC 3228 000C                  		move.w	$C(a0),d1
0000E0C0 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E0C4 6B00                       		bmi.s	NotOnScreen2
0000E0C6 0C41 00E0                  		cmpi.w	#224,d1
0000E0CA 6C00                       		bge.s	NotOnScreen2
0000E0CC                            
0000E0CC 7000                       		moveq	#0,d0
0000E0CE 4E75                       		rts	
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E0D0 7001                       		moveq	#1,d0
0000E0D2 4E75                       		rts	
0000E0D4                            ; End of function ChkObjOnScreen2
0000E0D4                            
0000E0D4                            ; ---------------------------------------------------------------------------
0000E0D4                            ; Subroutine to	load a level's objects
0000E0D4                            ; ---------------------------------------------------------------------------
0000E0D4                            
0000E0D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0D4                            
0000E0D4                            
0000E0D4                            ObjPosLoad:				; XREF: Level; et al
0000E0D4 7000                       		moveq	#0,d0
0000E0D6 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E0DA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E0DE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E0E2                            ; End of function ObjPosLoad
0000E0E2                            
0000E0E2                            ; ===========================================================================
0000E0E2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E0E4 0000                       		dc.w OPL_Next-OPL_Index
0000E0E6                            ; ===========================================================================
0000E0E6                            
0000E0E6                            OPL_Main:				; XREF: OPL_Index
0000E0E6 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E0EA 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E0EE ED08                       		lsl.b	#6,d0
0000E0F0 E848                       		lsr.w	#4,d0
0000E0F2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E0F8 2248                       		movea.l	a0,a1
0000E0FA D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E0FE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E102 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E106 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E10A 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E10E 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E112 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E116 34FC 0101                  		move.w	#$101,(a2)+
0000E11A 303C 005E                  		move.w	#$5E,d0
0000E11E                            
0000E11E                            OPL_ClrList:
0000E11E 429A                       		clr.l	(a2)+
0000E120 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E124                            
0000E124 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E128 7400                       		moveq	#0,d2
0000E12A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E12E 0446 0080                  		subi.w	#$80,d6
0000E132 6400                       		bcc.s	loc_D93C
0000E134 7C00                       		moveq	#0,d6
0000E136                            
0000E136                            loc_D93C:
0000E136 0246 FF80                  		andi.w	#$FF80,d6
0000E13A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E13E                            
0000E13E                            loc_D944:
0000E13E BC50                       		cmp.w	(a0),d6
0000E140 6300                       		bls.s	loc_D956
0000E142 4A28 0004                  		tst.b	4(a0)
0000E146 6A00                       		bpl.s	loc_D952
0000E148 1412                       		move.b	(a2),d2
0000E14A 5212                       		addq.b	#1,(a2)
0000E14C                            
0000E14C                            loc_D952:
0000E14C 5C48                       		addq.w	#6,a0
0000E14E 60EE                       		bra.s	loc_D944
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            loc_D956:
0000E150 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E154 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E158 0446 0080                  		subi.w	#$80,d6
0000E15C 6500                       		bcs.s	loc_D976
0000E15E                            
0000E15E                            loc_D964:
0000E15E BC50                       		cmp.w	(a0),d6
0000E160 6300                       		bls.s	loc_D976
0000E162 4A28 0004                  		tst.b	4(a0)
0000E166 6A00                       		bpl.s	loc_D972
0000E168 522A 0001                  		addq.b	#1,1(a2)
0000E16C                            
0000E16C                            loc_D972:
0000E16C 5C48                       		addq.w	#6,a0
0000E16E 60EE                       		bra.s	loc_D964
0000E170                            ; ===========================================================================
0000E170                            
0000E170                            loc_D976:
0000E170 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E174 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E17A                            
0000E17A                            OPL_Next:				; XREF: OPL_Index
0000E17A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E17E 7400                       		moveq	#0,d2
0000E180 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E184 0246 FF80                  		andi.w	#$FF80,d6
0000E188 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E18C 6700 0000                  		beq.w	locret_DA3A
0000E190 6C00                       		bge.s	loc_D9F6
0000E192 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E196 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E19A 0446 0080                  		subi.w	#$80,d6
0000E19E 6500                       		bcs.s	loc_D9D2
0000E1A0                            
0000E1A0                            loc_D9A6:
0000E1A0 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1A4 6C00                       		bge.s	loc_D9D2
0000E1A6 5D48                       		subq.w	#6,a0
0000E1A8 4A28 0004                  		tst.b	4(a0)
0000E1AC 6A00                       		bpl.s	loc_D9BC
0000E1AE 532A 0001                  		subq.b	#1,1(a2)
0000E1B2 142A 0001                  		move.b	1(a2),d2
0000E1B6                            
0000E1B6                            loc_D9BC:
0000E1B6 6100 0000                  		bsr.w	loc_DA3C
0000E1BA 6600                       		bne.s	loc_D9C6
0000E1BC 5D48                       		subq.w	#6,a0
0000E1BE 60E0                       		bra.s	loc_D9A6
0000E1C0                            ; ===========================================================================
0000E1C0                            
0000E1C0                            loc_D9C6:
0000E1C0 4A28 0004                  		tst.b	4(a0)
0000E1C4 6A00                       		bpl.s	loc_D9D0
0000E1C6 522A 0001                  		addq.b	#1,1(a2)
0000E1CA                            
0000E1CA                            loc_D9D0:
0000E1CA 5C48                       		addq.w	#6,a0
0000E1CC                            
0000E1CC                            loc_D9D2:
0000E1CC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1D0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1D4 0646 0300                  		addi.w	#$300,d6
0000E1D8                            
0000E1D8                            loc_D9DE:
0000E1D8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1DC 6E00                       		bgt.s	loc_D9F0
0000E1DE 4A28 FFFE                  		tst.b	-2(a0)
0000E1E2 6A00                       		bpl.s	loc_D9EC
0000E1E4 5312                       		subq.b	#1,(a2)
0000E1E6                            
0000E1E6                            loc_D9EC:
0000E1E6 5D48                       		subq.w	#6,a0
0000E1E8 60EE                       		bra.s	loc_D9DE
0000E1EA                            ; ===========================================================================
0000E1EA                            
0000E1EA                            loc_D9F0:
0000E1EA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1EE 4E75                       		rts	
0000E1F0                            ; ===========================================================================
0000E1F0                            
0000E1F0                            loc_D9F6:
0000E1F0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1F4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1F8 0646 0280                  		addi.w	#$280,d6
0000E1FC                            
0000E1FC                            loc_DA02:
0000E1FC BC50                       		cmp.w	(a0),d6
0000E1FE 6300                       		bls.s	loc_DA16
0000E200 4A28 0004                  		tst.b	4(a0)
0000E204 6A00                       		bpl.s	loc_DA10
0000E206 1412                       		move.b	(a2),d2
0000E208 5212                       		addq.b	#1,(a2)
0000E20A                            
0000E20A                            loc_DA10:
0000E20A 6100 0000                  		bsr.w	loc_DA3C
0000E20E 67EC                       		beq.s	loc_DA02
0000E210                            
0000E210                            loc_DA16:
0000E210 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E214 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E218 0446 0300                  		subi.w	#$300,d6
0000E21C 6500                       		bcs.s	loc_DA36
0000E21E                            
0000E21E                            loc_DA24:
0000E21E BC50                       		cmp.w	(a0),d6
0000E220 6300                       		bls.s	loc_DA36
0000E222 4A28 0004                  		tst.b	4(a0)
0000E226 6A00                       		bpl.s	loc_DA32
0000E228 522A 0001                  		addq.b	#1,1(a2)
0000E22C                            
0000E22C                            loc_DA32:
0000E22C 5C48                       		addq.w	#6,a0
0000E22E 60EE                       		bra.s	loc_DA24
0000E230                            ; ===========================================================================
0000E230                            
0000E230                            loc_DA36:
0000E230 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E234                            
0000E234                            locret_DA3A:
0000E234 4E75                       		rts	
0000E236                            ; ===========================================================================
0000E236                            
0000E236                            loc_DA3C:
0000E236 4A28 0004                  		tst.b	4(a0)
0000E23A 6A00                       		bpl.s	OPL_MakeItem
0000E23C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E242 6700                       		beq.s	OPL_MakeItem
0000E244 5C48                       		addq.w	#6,a0
0000E246 7000                       		moveq	#0,d0
0000E248 4E75                       		rts	
0000E24A                            ; ===========================================================================
0000E24A                            
0000E24A                            OPL_MakeItem:
0000E24A 6100 0000                  		bsr.w	SingleObjLoad
0000E24E 6600                       		bne.s	locret_DA8A
0000E250 3358 0008                  		move.w	(a0)+,8(a1)
0000E254 3018                       		move.w	(a0)+,d0
0000E256 3200                       		move.w	d0,d1
0000E258 0240 0FFF                  		andi.w	#$FFF,d0
0000E25C 3340 000C                  		move.w	d0,$C(a1)
0000E260 E559                       		rol.w	#2,d1
0000E262 0201 0003                  		andi.b	#3,d1
0000E266 1341 0001                  		move.b	d1,1(a1)
0000E26A 1341 0022                  		move.b	d1,$22(a1)
0000E26E 1018                       		move.b	(a0)+,d0
0000E270 6A00                       		bpl.s	loc_DA80
0000E272 0200 007F                  		andi.b	#$7F,d0
0000E276 1342 0023                  		move.b	d2,$23(a1)
0000E27A                            
0000E27A                            loc_DA80:
0000E27A 1280                       		move.b	d0,0(a1)
0000E27C 1358 0028                  		move.b	(a0)+,$28(a1)
0000E280 7000                       		moveq	#0,d0
0000E282                            
0000E282                            locret_DA8A:
0000E282 4E75                       		rts	
0000E284                            ; ---------------------------------------------------------------------------
0000E284                            ; Single object	loading	subroutine
0000E284                            ; ---------------------------------------------------------------------------
0000E284                            
0000E284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E284                            
0000E284                            
0000E284                            SingleObjLoad:
0000E284 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E288 303C 005F                  		move.w	#$5F,d0
0000E28C                            
0000E28C                            loc_DA94:
0000E28C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E28E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E290 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E294 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E298                            
0000E298                            locret_DAA0:
0000E298 4E75                       		rts	
0000E29A                            ; End of function SingleObjLoad
0000E29A                            
0000E29A                            
0000E29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E29A                            
0000E29A                            
0000E29A                            SingleObjLoad2:
0000E29A 2248                       		movea.l	a0,a1
0000E29C 303C F000                  		move.w	#-$1000,d0
0000E2A0 9048                       		sub.w	a0,d0
0000E2A2 EC48                       		lsr.w	#6,d0
0000E2A4 5340                       		subq.w	#1,d0
0000E2A6 6500                       		bcs.s	locret_DABC
0000E2A8                            
0000E2A8                            loc_DAB0:
0000E2A8 4A11                       		tst.b	(a1)
0000E2AA 6700                       		beq.s	locret_DABC
0000E2AC 43E9 0040                  		lea	$40(a1),a1
0000E2B0 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E2B4                            
0000E2B4                            locret_DABC:
0000E2B4 4E75                       		rts	
0000E2B6                            ; End of function SingleObjLoad2
0000E2B6                            
0000E2B6                            ; ===========================================================================
0000E2B6                            ; ---------------------------------------------------------------------------
0000E2B6                            ; Object 41 - springs
0000E2B6                            ; ---------------------------------------------------------------------------
0000E2B6                            
0000E2B6                            Obj41:					; XREF: Obj_Index
0000E2B6 7000                       		moveq	#0,d0
0000E2B8 1028 0024                  		move.b	$24(a0),d0
0000E2BC 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E2C0 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E2C4 6100 FB38                  		bsr.w	DisplaySprite
0000E2C8 3028 0008                  		move.w	8(a0),d0
0000E2CC 0240 FF80                  		andi.w	#$FF80,d0
0000E2D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E2D4 0441 0080                  		subi.w	#$80,d1
0000E2D8 0241 FF80                  		andi.w	#$FF80,d1
0000E2DC 9041                       		sub.w	d1,d0
0000E2DE 0C40 0280                  		cmpi.w	#$280,d0
0000E2E2 6200 FB56                  		bhi.w	DeleteObject
0000E2E6 4E75                       		rts	
0000E2E8                            ; ===========================================================================
0000E2E8 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E2EA 0000                       		dc.w Obj41_Up-Obj41_Index
0000E2EC 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E2EE 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E2F0 0000                       		dc.w Obj41_LR-Obj41_Index
0000E2F2 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E2F4 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E2F6 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E2F8 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E2FA 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E2FC                            
0000E2FC F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E2FE F600                       		dc.w -$A00		; power	of yellow spring
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            Obj41_Main:				; XREF: Obj41_Index
0000E300 5428 0024                  		addq.b	#2,$24(a0)
0000E304 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E30C 317C 0523 0002             		move.w	#$523,2(a0)
0000E312 0028 0004 0001             		ori.b	#4,1(a0)
0000E318 117C 0010 0019             		move.b	#$10,$19(a0)
0000E31E 117C 0004 0018             		move.b	#4,$18(a0)
0000E324 1028 0028                  		move.b	$28(a0),d0
0000E328 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E32C 6700                       		beq.s	loc_DB54	; if not, branch
0000E32E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E334 117C 0001 001C             		move.b	#1,$1C(a0)
0000E33A 117C 0003 001A             		move.b	#3,$1A(a0)
0000E340 317C 0533 0002             		move.w	#$533,2(a0)
0000E346 117C 0008 0019             		move.b	#8,$19(a0)
0000E34C                            
0000E34C                            loc_DB54:
0000E34C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E350 6700                       		beq.s	loc_DB66	; if not, branch
0000E352 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E358 08E8 0001 0022             		bset	#1,$22(a0)
0000E35E                            
0000E35E                            loc_DB66:
0000E35E 0800 0001                  		btst	#1,d0
0000E362 6700                       		beq.s	loc_DB72
0000E364 08E8 0005 0002             		bset	#5,2(a0)
0000E36A                            
0000E36A                            loc_DB72:
0000E36A 0240 000F                  		andi.w	#$F,d0
0000E36E 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E374 4E75                       		rts	
0000E376                            ; ===========================================================================
0000E376                            
0000E376                            Obj41_Up:				; XREF: Obj41_Index
0000E376 323C 001B                  		move.w	#$1B,d1
0000E37A 343C 0008                  		move.w	#8,d2
0000E37E 363C 0010                  		move.w	#$10,d3
0000E382 3828 0008                  		move.w	8(a0),d4
0000E386 6100 0000                  		bsr.w	SolidObject
0000E38A 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E38E 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E390 4E75                       		rts	
0000E392                            ; ===========================================================================
0000E392                            
0000E392                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E392 5428 0024                  		addq.b	#2,$24(a0)
0000E396 5069 000C                  		addq.w	#8,$C(a1)
0000E39A 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E3A0 08E9 0001 0022             		bset	#1,$22(a1)
0000E3A6 08A9 0003 0022             		bclr	#3,$22(a1)
0000E3AC 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E3B2 137C 0002 0024             		move.b	#2,$24(a1)
0000E3B8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E3BE 4228 0025                  		clr.b	$25(a0)
0000E3C2 303C 00CC                  		move.w	#$CC,d0
0000E3C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3CC                            
0000E3CC                            Obj41_AniUp:				; XREF: Obj41_Index
0000E3CC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3D2 6000 CAEA                  		bra.w	AnimateSprite
0000E3D6                            ; ===========================================================================
0000E3D6                            
0000E3D6                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E3D6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E3DC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E3E0 4E75                       		rts	
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            Obj41_LR:				; XREF: Obj41_Index
0000E3E2 323C 0013                  		move.w	#$13,d1
0000E3E6 343C 000E                  		move.w	#$E,d2
0000E3EA 363C 000F                  		move.w	#$F,d3
0000E3EE 3828 0008                  		move.w	8(a0),d4
0000E3F2 6100 0000                  		bsr.w	SolidObject
0000E3F6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E3FC 6600                       		bne.s	loc_DC0C
0000E3FE 117C 0008 0024             		move.b	#8,$24(a0)
0000E404                            
0000E404                            loc_DC0C:
0000E404 0828 0005 0022             		btst	#5,$22(a0)
0000E40A 6600                       		bne.s	Obj41_BounceLR
0000E40C 4E75                       		rts	
0000E40E                            ; ===========================================================================
0000E40E                            
0000E40E                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E40E 5428 0024                  		addq.b	#2,$24(a0)
0000E412 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E418 5069 0008                  		addq.w	#8,8(a1)
0000E41C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E422 6600                       		bne.s	loc_DC36	; if yes, branch
0000E424 0469 0010 0008             		subi.w	#$10,8(a1)
0000E42A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E42E                            
0000E42E                            loc_DC36:
0000E42E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E434 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E43A 0869 0000 0022             		bchg	#0,$22(a1)
0000E440 0829 0002 0022             		btst	#2,$22(a1)
0000E446 6600                       		bne.s	loc_DC56
0000E448 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E44E                            
0000E44E                            loc_DC56:
0000E44E 08A8 0005 0022             		bclr	#5,$22(a0)
0000E454 08A9 0005 0022             		bclr	#5,$22(a1)
0000E45A 303C 00CC                  		move.w	#$CC,d0
0000E45E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E464                            
0000E464                            Obj41_AniLR:				; XREF: Obj41_Index
0000E464 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E46A 6000 CA52                  		bra.w	AnimateSprite
0000E46E                            ; ===========================================================================
0000E46E                            
0000E46E                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E46E 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E474 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E478 4E75                       		rts	
0000E47A                            ; ===========================================================================
0000E47A                            
0000E47A                            Obj41_Dwn:				; XREF: Obj41_Index
0000E47A 323C 001B                  		move.w	#$1B,d1
0000E47E 343C 0008                  		move.w	#8,d2
0000E482 363C 0010                  		move.w	#$10,d3
0000E486 3828 0008                  		move.w	8(a0),d4
0000E48A 6100 0000                  		bsr.w	SolidObject
0000E48E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E494 6600                       		bne.s	loc_DCA4
0000E496 117C 000E 0024             		move.b	#$E,$24(a0)
0000E49C                            
0000E49C                            loc_DCA4:
0000E49C 4A28 0025                  		tst.b	$25(a0)
0000E4A0 6600                       		bne.s	locret_DCAE
0000E4A2 4A44                       		tst.w	d4
0000E4A4 6B00                       		bmi.s	Obj41_BounceDwn
0000E4A6                            
0000E4A6                            locret_DCAE:
0000E4A6 4E75                       		rts	
0000E4A8                            ; ===========================================================================
0000E4A8                            
0000E4A8                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E4A8 5428 0024                  		addq.b	#2,$24(a0)
0000E4AC 5169 000C                  		subq.w	#8,$C(a1)
0000E4B0 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E4B6 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E4BA 08E9 0001 0022             		bset	#1,$22(a1)
0000E4C0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E4C6 137C 0002 0024             		move.b	#2,$24(a1)
0000E4CC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E4D2 4228 0025                  		clr.b	$25(a0)
0000E4D6 303C 00CC                  		move.w	#$CC,d0
0000E4DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4E0                            
0000E4E0                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E4E0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4E6 6000 C9D6                  		bra.w	AnimateSprite
0000E4EA                            ; ===========================================================================
0000E4EA                            
0000E4EA                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E4EA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E4F0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E4F4 4E75                       		rts	
0000E4F6                            ; ===========================================================================
0000E4F6                            Ani_obj41:
0000E4F6                            	include "_anim\obj41.asm"
0000E4F6                            ; ---------------------------------------------------------------------------
0000E4F6                            ; Animation script - springs
0000E4F6                            ; ---------------------------------------------------------------------------
0000E4F6 0000                       		dc.w byte_DD02-Ani_obj41
0000E4F8 0000                       		dc.w byte_DD0E-Ani_obj41
0000E4FA 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E506 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E512                            		even
0000E512                            		even
0000E512                            
0000E512                            ; ---------------------------------------------------------------------------
0000E512                            ; Sprite mappings - springs
0000E512                            ; ---------------------------------------------------------------------------
0000E512                            Map_obj41:
0000E512                            	include "_maps\obj41.asm"
0000E512                            ; ---------------------------------------------------------------------------
0000E512                            ; Sprite mappings - springs
0000E512                            ; ---------------------------------------------------------------------------
0000E512 0000                       		dc.w byte_DD26-Map_obj41
0000E514 0000                       		dc.w byte_DD31-Map_obj41
0000E516 0000                       		dc.w byte_DD37-Map_obj41
0000E518 0000                       		dc.w byte_DD47-Map_obj41
0000E51A 0000                       		dc.w byte_DD4D-Map_obj41
0000E51C 0000                       		dc.w byte_DD53-Map_obj41
0000E51E 02                         byte_DD26:	dc.b 2
0000E51F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E524 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E529 01                         byte_DD31:	dc.b 1
0000E52A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E52F 03                         byte_DD37:	dc.b 3
0000E530 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E535 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E53A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E53F 01                         byte_DD47:	dc.b 1
0000E540 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E545 01                         byte_DD4D:	dc.b 1
0000E546 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E54B 04                         byte_DD53:	dc.b 4
0000E54C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E551 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E556 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E55B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E560                            		even
0000E560                            		even
0000E560                            
0000E560                            ; ===========================================================================
0000E560                            ; ---------------------------------------------------------------------------
0000E560                            ; Object 42 - Newtron enemy (GHZ)
0000E560                            ; ---------------------------------------------------------------------------
0000E560                            
0000E560                            Obj42:					; XREF: Obj_Index
0000E560 7000                       		moveq	#0,d0
0000E562 1028 0024                  		move.b	$24(a0),d0
0000E566 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E56A 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E56E                            ; ===========================================================================
0000E56E 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E570 0000                       		dc.w Obj42_Action-Obj42_Index
0000E572 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E574                            ; ===========================================================================
0000E574                            
0000E574                            Obj42_Main:				; XREF: Obj42_Index
0000E574 5428 0024                  		addq.b	#2,$24(a0)
0000E578 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E580 317C 049B 0002             		move.w	#$49B,2(a0)
0000E586 117C 0004 0001             		move.b	#4,1(a0)
0000E58C 117C 0004 0018             		move.b	#4,$18(a0)
0000E592 117C 0014 0019             		move.b	#$14,$19(a0)
0000E598 117C 0010 0016             		move.b	#$10,$16(a0)
0000E59E 117C 0008 0017             		move.b	#8,$17(a0)
0000E5A4                            
0000E5A4                            Obj42_Action:				; XREF: Obj42_Index
0000E5A4 7000                       		moveq	#0,d0
0000E5A6 1028 0025                  		move.b	$25(a0),d0
0000E5AA 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E5AE 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E5B2 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E5B8 6100 C904                  		bsr.w	AnimateSprite
0000E5BC 6000 0000                  		bra.w	MarkObjGone
0000E5C0                            ; ===========================================================================
0000E5C0 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E5C2 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E5C4 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E5C6 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E5C8 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E5CA                            ; ===========================================================================
0000E5CA                            
0000E5CA                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E5CA 08E8 0000 0022             		bset	#0,$22(a0)
0000E5D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5D4 9068 0008                  		sub.w	8(a0),d0
0000E5D8 6400                       		bcc.s	loc_DDEA
0000E5DA 4440                       		neg.w	d0
0000E5DC 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5E2                            
0000E5E2                            loc_DDEA:
0000E5E2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E5E6 6400                       		bcc.s	locret_DE12	; if not, branch
0000E5E8 5428 0025                  		addq.b	#2,$25(a0)
0000E5EC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5F2 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E5F6 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E5F8 317C 249B 0002             		move.w	#$249B,2(a0)
0000E5FE 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E604 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E60A                            
0000E60A                            locret_DE12:
0000E60A 4E75                       		rts	
0000E60C                            ; ===========================================================================
0000E60C                            
0000E60C                            Obj42_Type00:				; XREF: Obj42_Index2
0000E60C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E612 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E614 08E8 0000 0022             		bset	#0,$22(a0)
0000E61A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E61E 9068 0008                  		sub.w	8(a0),d0
0000E622 6400                       		bcc.s	locret_DE32
0000E624 08A8 0000 0022             		bclr	#0,$22(a0)
0000E62A                            
0000E62A                            locret_DE32:
0000E62A 4E75                       		rts	
0000E62C                            ; ===========================================================================
0000E62C                            
0000E62C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E62C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E632 6600                       		bne.s	loc_DE42
0000E634 117C 000C 0020             		move.b	#$C,$20(a0)
0000E63A                            
0000E63A                            loc_DE42:
0000E63A 6100 F770                  		bsr.w	ObjectFall
0000E63E 6100 0000                  		bsr.w	ObjHitFloor
0000E642 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E644 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E646 D368 000C                  		add.w	d1,$C(a0)
0000E64A 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E650 5428 0025                  		addq.b	#2,$25(a0)
0000E654 117C 0002 001C             		move.b	#2,$1C(a0)
0000E65A 0828 0005 0002             		btst	#5,2(a0)
0000E660 6700                       		beq.s	Obj42_Move
0000E662 5228 001C                  		addq.b	#1,$1C(a0)
0000E666                            
0000E666                            Obj42_Move:
0000E666 117C 000D 0020             		move.b	#$D,$20(a0)
0000E66C 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E672 0828 0000 0022             		btst	#0,$22(a0)
0000E678 6600                       		bne.s	locret_DE86
0000E67A 4468 0010                  		neg.w	$10(a0)
0000E67E                            
0000E67E                            locret_DE86:
0000E67E 4E75                       		rts	
0000E680                            ; ===========================================================================
0000E680                            
0000E680                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E680 6100 F756                  		bsr.w	SpeedToPos
0000E684 6100 0000                  		bsr.w	ObjHitFloor
0000E688 0C41 FFF8                  		cmpi.w	#-8,d1
0000E68C 6D00                       		blt.s	loc_DEA2
0000E68E 0C41 000C                  		cmpi.w	#$C,d1
0000E692 6C00                       		bge.s	loc_DEA2
0000E694 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E698 4E75                       		rts	
0000E69A                            ; ===========================================================================
0000E69A                            
0000E69A                            loc_DEA2:
0000E69A 5428 0025                  		addq.b	#2,$25(a0)
0000E69E 4E75                       		rts	
0000E6A0                            ; ===========================================================================
0000E6A0                            
0000E6A0                            Obj42_Speed:				; XREF: Obj42_Index2
0000E6A0 6100 F736                  		bsr.w	SpeedToPos
0000E6A4 4E75                       		rts	
0000E6A6                            ; ===========================================================================
0000E6A6                            
0000E6A6                            Obj42_Type01:				; XREF: Obj42_Index2
0000E6A6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E6AC 6600                       		bne.s	Obj42_FireMissile
0000E6AE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6B4                            
0000E6B4                            Obj42_FireMissile:
0000E6B4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E6BA 6600                       		bne.s	locret_DF14
0000E6BC 4A28 0032                  		tst.b	$32(a0)
0000E6C0 6600                       		bne.s	locret_DF14
0000E6C2 117C 0001 0032             		move.b	#1,$32(a0)
0000E6C8 6100 FBBA                  		bsr.w	SingleObjLoad
0000E6CC 6600                       		bne.s	locret_DF14
0000E6CE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E6D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E6D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E6DE 5169 000C                  		subq.w	#8,$C(a1)
0000E6E2 337C 0200 0010             		move.w	#$200,$10(a1)
0000E6E8 303C 0014                  		move.w	#$14,d0
0000E6EC 0828 0000 0022             		btst	#0,$22(a0)
0000E6F2 6600                       		bne.s	loc_DF04
0000E6F4 4440                       		neg.w	d0
0000E6F6 4469 0010                  		neg.w	$10(a1)
0000E6FA                            
0000E6FA                            loc_DF04:
0000E6FA D169 0008                  		add.w	d0,8(a1)
0000E6FE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E704 137C 0001 0028             		move.b	#1,$28(a1)
0000E70A                            
0000E70A                            locret_DF14:
0000E70A 4E75                       		rts	
0000E70C                            ; ===========================================================================
0000E70C                            
0000E70C                            Obj42_Delete:				; XREF: Obj42_Index
0000E70C 6000 F72C                  		bra.w	DeleteObject
0000E710                            ; ===========================================================================
0000E710                            Ani_obj42:
0000E710                            	include "_anim\obj42.asm"
0000E710                            ; ---------------------------------------------------------------------------
0000E710                            ; Animation script - Newtron enemy
0000E710                            ; ---------------------------------------------------------------------------
0000E710 0000                       		dc.w byte_DF24-Ani_obj42
0000E712 0000                       		dc.w byte_DF28-Ani_obj42
0000E714 0000                       		dc.w byte_DF30-Ani_obj42
0000E716 0000                       		dc.w byte_DF34-Ani_obj42
0000E718 0000                       		dc.w byte_DF38-Ani_obj42
0000E71A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E71E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E726 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E72A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E72E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E738                            		even
0000E738                            		even
0000E738                            
0000E738                            ; ---------------------------------------------------------------------------
0000E738                            ; Sprite mappings - Newtron enemy (GHZ)
0000E738                            ; ---------------------------------------------------------------------------
0000E738                            Map_obj42:
0000E738                            	include "_maps\obj42.asm"
0000E738                            ; ---------------------------------------------------------------------------
0000E738                            ; Sprite mappings - Newtron enemy (GHZ)
0000E738                            ; ---------------------------------------------------------------------------
0000E738 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E73C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E740 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E744 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E748 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E74C 0000                       		dc.w byte_DFF8-Map_obj42
0000E74E 03                         byte_DF58:	dc.b 3
0000E74F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E754 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E759 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E75E 03                         byte_DF68:	dc.b 3
0000E75F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E764 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E769 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E76E 03                         byte_DF78:	dc.b 3
0000E76F EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E774 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E779 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E77E 04                         byte_DF88:	dc.b 4
0000E77F EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E784 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E789 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E78E 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E793 03                         byte_DF9D:	dc.b 3
0000E794 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E799 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E79E 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E7A3 02                         byte_DFAD:	dc.b 2
0000E7A4 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7A9 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7AE 03                         byte_DFB8:	dc.b 3
0000E7AF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7B4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7B9 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E7BE 03                         byte_DFC8:	dc.b 3
0000E7BF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7C4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7C9 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E7CE 03                         byte_DFD8:	dc.b 3
0000E7CF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7D4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7D9 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E7DE 03                         byte_DFE8:	dc.b 3
0000E7DF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7E4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7E9 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E7EE 00                         byte_DFF8:	dc.b 0
0000E7F0 00                         		even
0000E7F0 00                         		even
0000E7F0                            
0000E7F0                            ; ===========================================================================
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Object 43 - Roller enemy (SYZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            
0000E7F0                            Obj43:					; XREF: Obj_Index
0000E7F0 7000                       		moveq	#0,d0
0000E7F2 1028 0024                  		move.b	$24(a0),d0
0000E7F6 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E7FA 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E7FE                            ; ===========================================================================
0000E7FE 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E800 0000                       		dc.w Obj43_Action-Obj43_Index
0000E802                            ; ===========================================================================
0000E802                            
0000E802                            Obj43_Main:				; XREF: Obj43_Index
0000E802 117C 000E 0016             		move.b	#$E,$16(a0)
0000E808 117C 0008 0017             		move.b	#8,$17(a0)
0000E80E 6100 F59C                  		bsr.w	ObjectFall
0000E812 6100 0000                  		bsr.w	ObjHitFloor
0000E816 4A41                       		tst.w	d1
0000E818 6A00                       		bpl.s	locret_E052
0000E81A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E81E 317C 0000 0012             		move.w	#0,$12(a0)
0000E824 5428 0024                  		addq.b	#2,$24(a0)
0000E828 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E830 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E836 117C 0004 0001             		move.b	#4,1(a0)
0000E83C 117C 0004 0018             		move.b	#4,$18(a0)
0000E842 117C 0010 0019             		move.b	#$10,$19(a0)
0000E848                            
0000E848                            locret_E052:
0000E848 4E75                       		rts	
0000E84A                            ; ===========================================================================
0000E84A                            
0000E84A                            Obj43_Action:				; XREF: Obj43_Index
0000E84A 7000                       		moveq	#0,d0
0000E84C 1028 0025                  		move.b	$25(a0),d0
0000E850 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E854 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E858 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E85E 6100 C65E                  		bsr.w	AnimateSprite
0000E862 3028 0008                  		move.w	8(a0),d0
0000E866 0240 FF80                  		andi.w	#$FF80,d0
0000E86A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E86E 0441 0080                  		subi.w	#$80,d1
0000E872 0241 FF80                  		andi.w	#$FF80,d1
0000E876 9041                       		sub.w	d1,d0
0000E878 0C40 0280                  		cmpi.w	#$280,d0
0000E87C 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E880 6000 F57C                  		bra.w	DisplaySprite
0000E884                            ; ===========================================================================
0000E884                            
0000E884                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E884 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E888 7000                       		moveq	#0,d0
0000E88A 1028 0023                  		move.b	$23(a0),d0
0000E88E 6700                       		beq.s	Obj43_Delete
0000E890 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E896                            
0000E896                            Obj43_Delete:
0000E896 6000 F5A2                  		bra.w	DeleteObject
0000E89A                            ; ===========================================================================
0000E89A 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E89C 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E89E 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E8A0 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E8A2                            ; ===========================================================================
0000E8A2                            
0000E8A2                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E8A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8A6 0440 0100                  		subi.w	#$100,d0
0000E8AA 6500                       		bcs.s	loc_E0D2
0000E8AC 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E8B0 6500                       		bcs.s	loc_E0D2
0000E8B2 5828 0025                  		addq.b	#4,$25(a0)
0000E8B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8BC 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E8C2 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E8C8                            
0000E8C8                            loc_E0D2:
0000E8C8 588F                       		addq.l	#4,sp
0000E8CA 4E75                       		rts	
0000E8CC                            ; ===========================================================================
0000E8CC                            
0000E8CC                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E8CC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E8D2 6700                       		beq.s	loc_E0F8
0000E8D4 5368 0030                  		subq.w	#1,$30(a0)
0000E8D8 6A00                       		bpl.s	locret_E0F6
0000E8DA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8E0 317C 0700 0010             		move.w	#$700,$10(a0)
0000E8E6 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E8EC                            
0000E8EC                            locret_E0F6:
0000E8EC 4E75                       		rts	
0000E8EE                            ; ===========================================================================
0000E8EE                            
0000E8EE                            loc_E0F8:
0000E8EE 5428 0025                  		addq.b	#2,$25(a0)
0000E8F2 4E75                       		rts	
0000E8F4                            ; ===========================================================================
0000E8F4                            
0000E8F4                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E8F4 6100 0000                  		bsr.w	Obj43_Stop
0000E8F8 6100 F4DE                  		bsr.w	SpeedToPos
0000E8FC 6100 0000                  		bsr.w	ObjHitFloor
0000E900 0C41 FFF8                  		cmpi.w	#-8,d1
0000E904 6D00                       		blt.s	Obj43_Jump
0000E906 0C41 000C                  		cmpi.w	#$C,d1
0000E90A 6C00                       		bge.s	Obj43_Jump
0000E90C D368 000C                  		add.w	d1,$C(a0)
0000E910 4E75                       		rts	
0000E912                            ; ===========================================================================
0000E912                            
0000E912                            Obj43_Jump:
0000E912 5428 0025                  		addq.b	#2,$25(a0)
0000E916 08E8 0000 0032             		bset	#0,$32(a0)
0000E91C 6700                       		beq.s	locret_E12E
0000E91E 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E924                            
0000E924                            locret_E12E:
0000E924 4E75                       		rts	
0000E926                            ; ===========================================================================
0000E926                            
0000E926                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E926 6100 F484                  		bsr.w	ObjectFall
0000E92A 4A68 0012                  		tst.w	$12(a0)
0000E92E 6B00                       		bmi.s	locret_E150
0000E930 6100 0000                  		bsr.w	ObjHitFloor
0000E934 4A41                       		tst.w	d1
0000E936 6A00                       		bpl.s	locret_E150
0000E938 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E93C 5528 0025                  		subq.b	#2,$25(a0)
0000E940 317C 0000 0012             		move.w	#0,$12(a0)
0000E946                            
0000E946                            locret_E150:
0000E946 4E75                       		rts	
0000E948                            
0000E948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E948                            
0000E948                            
0000E948                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E948 4A28 0032                  		tst.b	$32(a0)
0000E94C 6B00                       		bmi.s	locret_E188
0000E94E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E952 0440 0030                  		subi.w	#$30,d0
0000E956 9068 0008                  		sub.w	8(a0),d0
0000E95A 6400                       		bcc.s	locret_E188
0000E95C 117C 0000 001C             		move.b	#0,$1C(a0)
0000E962 117C 000E 0020             		move.b	#$E,$20(a0)
0000E968 4268 0010                  		clr.w	$10(a0)
0000E96C 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E972 117C 0002 0025             		move.b	#2,$25(a0)
0000E978 08E8 0007 0032             		bset	#7,$32(a0)
0000E97E                            
0000E97E                            locret_E188:
0000E97E 4E75                       		rts	
0000E980                            ; End of function Obj43_Stop
0000E980                            
0000E980                            ; ===========================================================================
0000E980                            Ani_obj43:
0000E980                            	include "_anim\obj43.asm"
0000E980                            ; ---------------------------------------------------------------------------
0000E980                            ; Animation script - Roller enemy
0000E980                            ; ---------------------------------------------------------------------------
0000E980 0000                       		dc.w byte_E190-Ani_obj43
0000E982 0000                       		dc.w byte_E196-Ani_obj43
0000E984 0000                       		dc.w byte_E19C-Ani_obj43
0000E986 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E98C 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E992 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E998 00                         		even
0000E998 00                         		even
0000E998                            
0000E998                            ; ---------------------------------------------------------------------------
0000E998                            ; Sprite mappings - Roller enemy (SYZ)
0000E998                            ; ---------------------------------------------------------------------------
0000E998                            Map_obj43:
0000E998                            	include "_maps\obj43.asm"
0000E998                            Map_61da:
0000E998 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E99A 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E99C 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E99E 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E9A0 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E9A2 02                         Map_61da_A: 	dc.b $2
0000E9A3 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E9A8 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E9AD 02                         Map_61da_15: 	dc.b $2
0000E9AE E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E9B3 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E9B8 01                         Map_61da_20: 	dc.b $1
0000E9B9 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E9BE 01                         Map_61da_26: 	dc.b $1
0000E9BF F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E9C4 01                         Map_61da_2C: 	dc.b $1
0000E9C5 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E9CA                            	even
0000E9CA                            	even
0000E9CA                            
0000E9CA                            ; ===========================================================================
0000E9CA                            ; ---------------------------------------------------------------------------
0000E9CA                            ; Object 44 - walls (GHZ)
0000E9CA                            ; ---------------------------------------------------------------------------
0000E9CA                            
0000E9CA                            Obj44:					; XREF: Obj_Index
0000E9CA 7000                       		moveq	#0,d0
0000E9CC 1028 0024                  		move.b	$24(a0),d0
0000E9D0 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E9D4 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E9D8                            ; ===========================================================================
0000E9D8 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E9DA 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E9DC 0000                       		dc.w Obj44_Display-Obj44_Index
0000E9DE                            ; ===========================================================================
0000E9DE                            
0000E9DE                            Obj44_Main:				; XREF: Obj44_Index
0000E9DE 5428 0024                  		addq.b	#2,$24(a0)
0000E9E2 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E9EA 317C 434C 0002             		move.w	#$434C,2(a0)
0000E9F0 0028 0004 0001             		ori.b	#4,1(a0)
0000E9F6 117C 0008 0019             		move.b	#8,$19(a0)
0000E9FC 117C 0006 0018             		move.b	#6,$18(a0)
0000EA02 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA08 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA0E 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA10 5428 0024                  		addq.b	#2,$24(a0)
0000EA14 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA16                            ; ===========================================================================
0000EA16                            
0000EA16                            Obj44_Solid:				; XREF: Obj44_Index
0000EA16 323C 0013                  		move.w	#$13,d1
0000EA1A 343C 0028                  		move.w	#$28,d2
0000EA1E 6100 A704                  		bsr.w	Obj44_SolidWall
0000EA22                            
0000EA22                            Obj44_Display:				; XREF: Obj44_Index
0000EA22 6100 F3DA                  		bsr.w	DisplaySprite
0000EA26 3028 0008                  		move.w	8(a0),d0
0000EA2A 0240 FF80                  		andi.w	#$FF80,d0
0000EA2E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA32 0441 0080                  		subi.w	#$80,d1
0000EA36 0241 FF80                  		andi.w	#$FF80,d1
0000EA3A 9041                       		sub.w	d1,d0
0000EA3C 0C40 0280                  		cmpi.w	#$280,d0
0000EA40 6200 F3F8                  		bhi.w	DeleteObject
0000EA44 4E75                       		rts	
0000EA46                            ; ===========================================================================
0000EA46                            ; ---------------------------------------------------------------------------
0000EA46                            ; Sprite mappings - walls (GHZ)
0000EA46                            ; ---------------------------------------------------------------------------
0000EA46                            Map_obj44:
0000EA46                            	include "_maps\obj44.asm"
0000EA46                            ; ---------------------------------------------------------------------------
0000EA46                            ; Sprite mappings - walls (GHZ)
0000EA46                            ; ---------------------------------------------------------------------------
0000EA46 0000                       		dc.w byte_E256-Map_obj44
0000EA48 0000                       		dc.w byte_E26B-Map_obj44
0000EA4A 0000                       		dc.w byte_E280-Map_obj44
0000EA4C 04                         byte_E256:	dc.b 4
0000EA4D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EA52 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA57 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA5C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA61 04                         byte_E26B:	dc.b 4
0000EA62 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EA67 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA6C 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA71 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA76 04                         byte_E280:	dc.b 4
0000EA77 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EA7C F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EA81 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EA86 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA8C 00                         		even
0000EA8C 00                         		even
0000EA8C                            
0000EA8C                            ; ===========================================================================
0000EA8C                            ; ---------------------------------------------------------------------------
0000EA8C                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA8C                            ; ---------------------------------------------------------------------------
0000EA8C                            
0000EA8C                            Obj13:					; XREF: Obj_Index
0000EA8C 7000                       		moveq	#0,d0
0000EA8E 1028 0024                  		move.b	$24(a0),d0
0000EA92 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA96 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA9A 6000 0000                  		bra.w	Obj14_ChkDel
0000EA9E                            ; ===========================================================================
0000EA9E 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EAA0 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EAA2                            ; ---------------------------------------------------------------------------
0000EAA2                            ;
0000EAA2                            ; Lava ball production rates
0000EAA2                            ;
0000EAA2 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EAA8                            ; ===========================================================================
0000EAA8                            
0000EAA8                            Obj13_Main:				; XREF: Obj13_Index
0000EAA8 5428 0024                  		addq.b	#2,$24(a0)
0000EAAC 1028 0028                  		move.b	$28(a0),d0
0000EAB0 E848                       		lsr.w	#4,d0
0000EAB2 0240 000F                  		andi.w	#$F,d0
0000EAB6 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EABC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EAC2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EAC8                            
0000EAC8                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EAC8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EACC 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EACE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EAD4 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EAD8 6600                       		bne.s	locret_E302
0000EADA 6100 F7A8                  		bsr.w	SingleObjLoad
0000EADE 6600                       		bne.s	locret_E302
0000EAE0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EAE4 3368 0008 0008             		move.w	8(a0),8(a1)
0000EAEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EAF0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EAF6                            
0000EAF6                            locret_E302:
0000EAF6 4E75                       		rts	
0000EAF8                            ; ===========================================================================
0000EAF8                            ; ---------------------------------------------------------------------------
0000EAF8                            ; Object 14 - lava balls (MZ, SLZ)
0000EAF8                            ; ---------------------------------------------------------------------------
0000EAF8                            
0000EAF8                            Obj14:					; XREF: Obj_Index
0000EAF8 7000                       		moveq	#0,d0
0000EAFA 1028 0024                  		move.b	$24(a0),d0
0000EAFE 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB02 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB06 6000 F2F6                  		bra.w	DisplaySprite
0000EB0A                            ; ===========================================================================
0000EB0A 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB0C 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB0E 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB10                            
0000EB10 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EB1A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EB22                            ; ===========================================================================
0000EB22                            
0000EB22                            Obj14_Main:				; XREF: Obj14_Index
0000EB22 5428 0024                  		addq.b	#2,$24(a0)
0000EB26 117C 0008 0016             		move.b	#8,$16(a0)
0000EB2C 117C 0008 0017             		move.b	#8,$17(a0)
0000EB32 217C 0000 BABC 0004        		move.l	#Map_obj14,4(a0)
0000EB3A 317C 0345 0002             		move.w	#$345,2(a0)
0000EB40 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EB46 6600                       		bne.s	loc_E35A
0000EB48 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EB4E                            
0000EB4E                            loc_E35A:
0000EB4E 117C 0004 0001             		move.b	#4,1(a0)
0000EB54 117C 0003 0018             		move.b	#3,$18(a0)
0000EB5A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EB60 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB66 4A28 0029                  		tst.b	$29(a0)
0000EB6A 6700                       		beq.s	Obj14_SetSpeed
0000EB6C 5428 0018                  		addq.b	#2,$18(a0)
0000EB70                            
0000EB70                            Obj14_SetSpeed:
0000EB70 7000                       		moveq	#0,d0
0000EB72 1028 0028                  		move.b	$28(a0),d0
0000EB76 D040                       		add.w	d0,d0
0000EB78 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EB7E 117C 0008 0019             		move.b	#8,$19(a0)
0000EB84 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EB8A 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB8C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB92 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB98 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB9E 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EBA4                            
0000EBA4                            Obj14_PlaySnd:
0000EBA4 303C 00AE                  		move.w	#$AE,d0
0000EBA8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EBAE                            
0000EBAE                            Obj14_Action:				; XREF: Obj14_Index
0000EBAE 7000                       		moveq	#0,d0
0000EBB0 1028 0028                  		move.b	$28(a0),d0
0000EBB4 D040                       		add.w	d0,d0
0000EBB6 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EBBA 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EBBE 6100 F218                  		bsr.w	SpeedToPos
0000EBC2 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EBC8 6100 C2F4                  		bsr.w	AnimateSprite
0000EBCC                            
0000EBCC                            Obj14_ChkDel:				; XREF: Obj13
0000EBCC 3028 0008                  		move.w	8(a0),d0
0000EBD0 0240 FF80                  		andi.w	#$FF80,d0
0000EBD4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBD8 0441 0080                  		subi.w	#$80,d1
0000EBDC 0241 FF80                  		andi.w	#$FF80,d1
0000EBE0 9041                       		sub.w	d1,d0
0000EBE2 0C40 0280                  		cmpi.w	#$280,d0
0000EBE6 6200 F252                  		bhi.w	DeleteObject
0000EBEA 4E75                       		rts	
0000EBEC                            ; ===========================================================================
0000EBEC 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBF0 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBF4 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EBF8 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EBFC 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EBFE                            ; ===========================================================================
0000EBFE                            ; lavaball types 00-03 fly up and fall back down
0000EBFE                            
0000EBFE                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EBFE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC04 3028 0030                  		move.w	$30(a0),d0
0000EC08 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC0C 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC0E 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC12                            
0000EC12                            loc_E41E:
0000EC12 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC18 4A68 0012                  		tst.w	$12(a0)
0000EC1C 6A00                       		bpl.s	locret_E430
0000EC1E 08E8 0001 0022             		bset	#1,$22(a0)
0000EC24                            
0000EC24                            locret_E430:
0000EC24 4E75                       		rts	
0000EC26                            ; ===========================================================================
0000EC26                            ; lavaball type	04 flies up until it hits the ceiling
0000EC26                            
0000EC26                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EC26 08E8 0001 0022             		bset	#1,$22(a0)
0000EC2C 6100 0000                  		bsr.w	ObjHitCeiling
0000EC30 4A41                       		tst.w	d1
0000EC32 6A00                       		bpl.s	locret_E452
0000EC34 117C 0008 0028             		move.b	#8,$28(a0)
0000EC3A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC40 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EC46                            
0000EC46                            locret_E452:
0000EC46 4E75                       		rts	
0000EC48                            ; ===========================================================================
0000EC48                            ; lavaball type	05 falls down until it hits the	floor
0000EC48                            
0000EC48                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EC48 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC4E 6100 0000                  		bsr.w	ObjHitFloor
0000EC52 4A41                       		tst.w	d1
0000EC54 6A00                       		bpl.s	locret_E474
0000EC56 117C 0008 0028             		move.b	#8,$28(a0)
0000EC5C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC62 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EC68                            
0000EC68                            locret_E474:
0000EC68 4E75                       		rts	
0000EC6A                            ; ===========================================================================
0000EC6A                            ; lavaball types 06-07 move sideways
0000EC6A                            
0000EC6A                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EC6A 08E8 0000 0022             		bset	#0,$22(a0)
0000EC70 76F8                       		moveq	#-8,d3
0000EC72 6100 0000                  		bsr.w	ObjHitWallLeft
0000EC76 4A41                       		tst.w	d1
0000EC78 6A00                       		bpl.s	locret_E498
0000EC7A 117C 0008 0028             		move.b	#8,$28(a0)
0000EC80 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC86 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC8C                            
0000EC8C                            locret_E498:
0000EC8C 4E75                       		rts	
0000EC8E                            ; ===========================================================================
0000EC8E                            
0000EC8E                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC8E 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC94 7608                       		moveq	#8,d3
0000EC96 6100 0000                  		bsr.w	ObjHitWallRight
0000EC9A 4A41                       		tst.w	d1
0000EC9C 6A00                       		bpl.s	locret_E4BC
0000EC9E 117C 0008 0028             		move.b	#8,$28(a0)
0000ECA4 117C 0003 001C             		move.b	#3,$1C(a0)
0000ECAA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ECB0                            
0000ECB0                            locret_E4BC:
0000ECB0 4E75                       		rts	
0000ECB2                            ; ===========================================================================
0000ECB2                            
0000ECB2                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ECB2 4E75                       		rts	
0000ECB4                            ; ===========================================================================
0000ECB4                            
0000ECB4                            Obj14_Delete:				; XREF: Obj14_Index
0000ECB4 6000 F184                  		bra.w	DeleteObject
0000ECB8                            ; ===========================================================================
0000ECB8                            Ani_obj14:
0000ECB8                            	include "_anim\obj14.asm"
0000ECB8                            ; ---------------------------------------------------------------------------
0000ECB8                            ; Animation script - lava balls
0000ECB8                            ; ---------------------------------------------------------------------------
0000ECB8 0000                       		dc.w byte_E4CC-Ani_obj14
0000ECBA 0000                       		dc.w byte_E4D2-Ani_obj14
0000ECBC 0000                       		dc.w byte_E4D6-Ani_obj14
0000ECBE 0000                       		dc.w byte_E4DC-Ani_obj14
0000ECC0 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ECC6 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ECCA 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ECD0 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ECD4                            		even
0000ECD4                            		even
0000ECD4                            
0000ECD4                            ; ===========================================================================
0000ECD4                            ; ---------------------------------------------------------------------------
0000ECD4                            ; Object 6D - flame thrower (SBZ)
0000ECD4                            ; ---------------------------------------------------------------------------
0000ECD4                            
0000ECD4                            Obj6D:					; XREF: Obj_Index
0000ECD4 7000                       		moveq	#0,d0
0000ECD6 1028 0024                  		move.b	$24(a0),d0
0000ECDA 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ECDE 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ECE2                            ; ===========================================================================
0000ECE2 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ECE4 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ECE6                            ; ===========================================================================
0000ECE6                            
0000ECE6                            Obj6D_Main:				; XREF: Obj6D_Index
0000ECE6 5428 0024                  		addq.b	#2,$24(a0)
0000ECEA 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ECF2 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ECF8 0028 0004 0001             		ori.b	#4,1(a0)
0000ECFE 117C 0001 0018             		move.b	#1,$18(a0)
0000ED04 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED0A 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED10 1028 0028                  		move.b	$28(a0),d0
0000ED14 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED18 D040                       		add.w	d0,d0		; multiply by 2
0000ED1A 3140 0030                  		move.w	d0,$30(a0)
0000ED1E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ED22 1028 0028                  		move.b	$28(a0),d0
0000ED26 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ED2A EB48                       		lsl.w	#5,d0		; multiply by $20
0000ED2C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ED30 117C 000A 0036             		move.b	#$A,$36(a0)
0000ED36 0828 0001 0022             		btst	#1,$22(a0)
0000ED3C 6700                       		beq.s	Obj6D_Action
0000ED3E 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED44 117C 0015 0036             		move.b	#$15,$36(a0)
0000ED4A                            
0000ED4A                            Obj6D_Action:				; XREF: Obj6D_Index
0000ED4A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ED4E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ED50 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ED56 0868 0000 001C             		bchg	#0,$1C(a0)
0000ED5C 6700                       		beq.s	loc_E57A
0000ED5E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ED64 303C 00B3                  		move.w	#$B3,d0
0000ED68 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ED6E                            
0000ED6E                            loc_E57A:
0000ED6E 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ED74 6100 C148                  		bsr.w	AnimateSprite
0000ED78 117C 0000 0020             		move.b	#0,$20(a0)
0000ED7E 1028 0036                  		move.b	$36(a0),d0
0000ED82 B028 001A                  		cmp.b	$1A(a0),d0
0000ED86 6600                       		bne.s	Obj6D_ChkDel
0000ED88 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED8E                            
0000ED8E                            Obj6D_ChkDel:
0000ED8E 3028 0008                  		move.w	8(a0),d0
0000ED92 0240 FF80                  		andi.w	#$FF80,d0
0000ED96 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED9A 0441 0080                  		subi.w	#$80,d1
0000ED9E 0241 FF80                  		andi.w	#$FF80,d1
0000EDA2 9041                       		sub.w	d1,d0
0000EDA4 0C40 0280                  		cmpi.w	#$280,d0
0000EDA8 6200 F090                  		bhi.w	DeleteObject
0000EDAC 6000 F050                  		bra.w	DisplaySprite
0000EDB0                            ; ===========================================================================
0000EDB0                            Ani_obj6D:
0000EDB0                            	include "_anim\obj6D.asm"
0000EDB0                            ; ---------------------------------------------------------------------------
0000EDB0                            ; Animation script - flamethrower (SBZ)
0000EDB0                            ; ---------------------------------------------------------------------------
0000EDB0 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EDB2 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EDB4 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EDB6 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EDB8 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EDC6 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EDD0 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EDDE 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EDE8                            		even
0000EDE8                            		even
0000EDE8                            
0000EDE8                            ; ---------------------------------------------------------------------------
0000EDE8                            ; Sprite mappings - flame thrower (SBZ)
0000EDE8                            ; ---------------------------------------------------------------------------
0000EDE8                            Map_obj6D:
0000EDE8                            	include "_maps\obj6D.asm"
0000EDE8                            ; ---------------------------------------------------------------------------
0000EDE8                            ; Sprite mappings - flame thrower (SBZ)
0000EDE8                            ; ---------------------------------------------------------------------------
0000EDE8 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EDEC 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EDF0 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EDF4 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EDF8 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EDFC 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE00 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE04 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE08 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE0C 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE10 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE14 01                         byte_E620:	dc.b 1
0000EE15 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE1A 02                         byte_E626:	dc.b 2
0000EE1B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE20 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE25 02                         byte_E631:	dc.b 2
0000EE26 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE2B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE30 03                         byte_E63C:	dc.b 3
0000EE31 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE36 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE3B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE40 03                         byte_E64C:	dc.b 3
0000EE41 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE46 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE4B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE50 04                         byte_E65C:	dc.b 4
0000EE51 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE56 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE5B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE60 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE65 04                         byte_E671:	dc.b 4
0000EE66 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE6B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE70 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE75 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE7A 05                         byte_E686:	dc.b 5
0000EE7B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE80 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE85 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE8A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE8F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE94 05                         byte_E6A0:	dc.b 5
0000EE95 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE9A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE9F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEA4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEA9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEAE 06                         byte_E6BA:	dc.b 6
0000EEAF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EEB4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EEB9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEBE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EEC3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEC8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EECD 06                         byte_E6D9:	dc.b 6
0000EECE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EED3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EED8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EEDD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEE2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEE7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEEC 01                         byte_E6F8:	dc.b 1
0000EEED 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEF2 02                         byte_E6FE:	dc.b 2
0000EEF3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEF8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEFD 02                         byte_E709:	dc.b 2
0000EEFE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF03 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF08 03                         byte_E714:	dc.b 3
0000EF09 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF0E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF13 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF18 03                         byte_E724:	dc.b 3
0000EF19 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF1E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF23 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF28 04                         byte_E734:	dc.b 4
0000EF29 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF2E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF33 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF38 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF3D 04                         byte_E749:	dc.b 4
0000EF3E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF43 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF48 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF4D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF52 05                         byte_E75E:	dc.b 5
0000EF53 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF58 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF5D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF62 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF67 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF6C 05                         byte_E778:	dc.b 5
0000EF6D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF72 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF77 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF7C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF81 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF86 06                         byte_E792:	dc.b 6
0000EF87 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF8C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF91 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF96 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF9B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFA5 06                         byte_E7B1:	dc.b 6
0000EFA6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EFAB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFB0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EFB5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFBA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFBF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFC4                            		even
0000EFC4                            		even
0000EFC4                            
0000EFC4                            ; ===========================================================================
0000EFC4                            ; ---------------------------------------------------------------------------
0000EFC4                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EFC4                            ; ---------------------------------------------------------------------------
0000EFC4                            
0000EFC4                            Obj46:					; XREF: Obj_Index
0000EFC4 7000                       		moveq	#0,d0
0000EFC6 1028 0024                  		move.b	$24(a0),d0
0000EFCA 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EFCE 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EFD2                            ; ===========================================================================
0000EFD2 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EFD4 0000                       		dc.w Obj46_Action-Obj46_Index
0000EFD6                            ; ===========================================================================
0000EFD6                            
0000EFD6                            Obj46_Main:				; XREF: Obj46_Index
0000EFD6 5428 0024                  		addq.b	#2,$24(a0)
0000EFDA 117C 000F 0016             		move.b	#$F,$16(a0)
0000EFE0 117C 000F 0017             		move.b	#$F,$17(a0)
0000EFE6 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EFEE 317C 4000 0002             		move.w	#$4000,2(a0)
0000EFF4 117C 0004 0001             		move.b	#4,1(a0)
0000EFFA 117C 0003 0018             		move.b	#3,$18(a0)
0000F000 117C 0010 0019             		move.b	#$10,$19(a0)
0000F006 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F00C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F012                            
0000F012                            Obj46_Action:				; XREF: Obj46_Index
0000F012 4A28 0001                  		tst.b	1(a0)
0000F016 6A00                       		bpl.s	Obj46_ChkDel
0000F018 7000                       		moveq	#0,d0
0000F01A 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F01E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F022 D040                       		add.w	d0,d0
0000F024 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F028 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F02C 323C 001B                  		move.w	#$1B,d1
0000F030 343C 0010                  		move.w	#$10,d2
0000F034 363C 0011                  		move.w	#$11,d3
0000F038 3828 0008                  		move.w	8(a0),d4
0000F03C 6100 0000                  		bsr.w	SolidObject
0000F040                            
0000F040                            Obj46_ChkDel:
0000F040 6100 EDBC                  		bsr.w	DisplaySprite
0000F044 3028 0008                  		move.w	8(a0),d0
0000F048 0240 FF80                  		andi.w	#$FF80,d0
0000F04C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F050 0441 0080                  		subi.w	#$80,d1
0000F054 0241 FF80                  		andi.w	#$FF80,d1
0000F058 9041                       		sub.w	d1,d0
0000F05A 0C40 0280                  		cmpi.w	#$280,d0
0000F05E 6200 EDDA                  		bhi.w	DeleteObject
0000F062 4E75                       		rts	
0000F064                            ; ===========================================================================
0000F064 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F066 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F068 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F06A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F06C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F06E                            ; ===========================================================================
0000F06E                            
0000F06E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F06E 4E75                       		rts	
0000F070                            ; ===========================================================================
0000F070                            
0000F070                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F070 3038 D008                  		move.w	($FFFFD008).w,d0
0000F074 9068 0008                  		sub.w	8(a0),d0
0000F078 6400                       		bcc.s	loc_E888
0000F07A 4440                       		neg.w	d0
0000F07C                            
0000F07C                            loc_E888:
0000F07C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F080 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F082 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F088                            
0000F088                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F088 7000                       		moveq	#0,d0
0000F08A 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F08E 0828 0003 0028             		btst	#3,$28(a0)
0000F094 6700                       		beq.s	loc_E8A8
0000F096 4440                       		neg.w	d0
0000F098 0640 0010                  		addi.w	#$10,d0
0000F09C                            
0000F09C                            loc_E8A8:
0000F09C 3228 0030                  		move.w	$30(a0),d1
0000F0A0 9240                       		sub.w	d0,d1
0000F0A2 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F0A6 4E75                       		rts	
0000F0A8                            ; ===========================================================================
0000F0A8                            
0000F0A8                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F0A8 6100 ED2E                  		bsr.w	SpeedToPos
0000F0AC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F0B2 6100 0000                  		bsr.w	ObjHitFloor
0000F0B6 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F0B8 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F0BC D368 000C                  		add.w	d1,$C(a0)
0000F0C0 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F0C4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F0CA 117C 0004 0028             		move.b	#4,$28(a0)
0000F0D0 3011                       		move.w	(a1),d0
0000F0D2 0240 03FF                  		andi.w	#$3FF,d0
0000F0D6 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F0DA 6400                       		bcc.s	locret_E8EE
0000F0DC 117C 0000 0028             		move.b	#0,$28(a0)
0000F0E2                            
0000F0E2                            locret_E8EE:
0000F0E2 4E75                       		rts	
0000F0E4                            ; ===========================================================================
0000F0E4                            
0000F0E4                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F0E4 7000                       		moveq	#0,d0
0000F0E6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F0EA E648                       		lsr.w	#3,d0
0000F0EC 3228 0030                  		move.w	$30(a0),d1
0000F0F0 9240                       		sub.w	d0,d1
0000F0F2 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F0F6 4E75                       		rts	
0000F0F8                            ; ===========================================================================
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8                            Map_obj46:
0000F0F8                            	include "_maps\obj46.asm"
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8 0000                       		dc.w byte_E906-Map_obj46
0000F0FA 01                         byte_E906:	dc.b 1
0000F0FB F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F100                            		even
0000F100                            		even
0000F100                            
0000F100                            ; ===========================================================================
0000F100                            ; ---------------------------------------------------------------------------
0000F100                            ; Object 12 - lamp (SYZ)
0000F100                            ; ---------------------------------------------------------------------------
0000F100                            
0000F100                            Obj12:					; XREF: Obj_Index
0000F100 7000                       		moveq	#0,d0
0000F102 1028 0024                  		move.b	$24(a0),d0
0000F106 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F10A 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F10E                            ; ===========================================================================
0000F10E 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F110 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F112                            ; ===========================================================================
0000F112                            
0000F112                            Obj12_Main:				; XREF: Obj12_Index
0000F112 5428 0024                  		addq.b	#2,$24(a0)
0000F116 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F11E 317C 0000 0002             		move.w	#0,2(a0)
0000F124 117C 0004 0001             		move.b	#4,1(a0)
0000F12A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F130 117C 0006 0018             		move.b	#6,$18(a0)
0000F136                            
0000F136                            Obj12_Animate:				; XREF: Obj12_Index
0000F136 5328 001E                  		subq.b	#1,$1E(a0)
0000F13A 6A00                       		bpl.s	Obj12_ChkDel
0000F13C 117C 0007 001E             		move.b	#7,$1E(a0)
0000F142 5228 001A                  		addq.b	#1,$1A(a0)
0000F146 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F14C 6500                       		bcs.s	Obj12_ChkDel
0000F14E 117C 0000 001A             		move.b	#0,$1A(a0)
0000F154                            
0000F154                            Obj12_ChkDel:
0000F154 3028 0008                  		move.w	8(a0),d0
0000F158 0240 FF80                  		andi.w	#$FF80,d0
0000F15C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F160 0441 0080                  		subi.w	#$80,d1
0000F164 0241 FF80                  		andi.w	#$FF80,d1
0000F168 9041                       		sub.w	d1,d0
0000F16A 0C40 0280                  		cmpi.w	#$280,d0
0000F16E 6200 ECCA                  		bhi.w	DeleteObject
0000F172 6000 EC8A                  		bra.w	DisplaySprite
0000F176                            ; ===========================================================================
0000F176                            ; ---------------------------------------------------------------------------
0000F176                            ; Sprite mappings - lamp (SYZ)
0000F176                            ; ---------------------------------------------------------------------------
0000F176                            Map_obj12:
0000F176                            	include "_maps\obj12.asm"
0000F176                            ; ---------------------------------------------------------------------------
0000F176                            ; Sprite mappings - lamp (SYZ)
0000F176                            ; ---------------------------------------------------------------------------
0000F176 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F17A 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F17E 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F182 02                         byte_E98E:	dc.b 2
0000F183 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F188 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F18D 02                         byte_E999:	dc.b 2
0000F18E F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F193 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F198 02                         byte_E9A4:	dc.b 2
0000F199 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F19E 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F1A3 02                         byte_E9AF:	dc.b 2
0000F1A4 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F1A9 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F1AE 02                         byte_E9BA:	dc.b 2
0000F1AF F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F1B4 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F1B9 02                         byte_E9C5:	dc.b 2
0000F1BA F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F1BF 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F1C4                            		even
0000F1C4                            		even
0000F1C4                            
0000F1C4                            ; ===========================================================================
0000F1C4                            ; ---------------------------------------------------------------------------
0000F1C4                            ; Object 47 - pinball bumper (SYZ)
0000F1C4                            ; ---------------------------------------------------------------------------
0000F1C4                            
0000F1C4                            Obj47:					; XREF: Obj_Index
0000F1C4 7000                       		moveq	#0,d0
0000F1C6 1028 0024                  		move.b	$24(a0),d0
0000F1CA 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F1CE 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F1D2                            ; ===========================================================================
0000F1D2 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F1D4 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F1D6                            ; ===========================================================================
0000F1D6                            
0000F1D6                            Obj47_Main:				; XREF: Obj47_Index
0000F1D6 5428 0024                  		addq.b	#2,$24(a0)
0000F1DA 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F1E2 317C 0380 0002             		move.w	#$380,2(a0)
0000F1E8 117C 0004 0001             		move.b	#4,1(a0)
0000F1EE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1F4 117C 0001 0018             		move.b	#1,$18(a0)
0000F1FA 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F200                            
0000F200                            Obj47_Hit:				; XREF: Obj47_Index
0000F200 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F204 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F208 4228 0021                  		clr.b	$21(a0)
0000F20C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F210 3228 0008                  		move.w	8(a0),d1
0000F214 3428 000C                  		move.w	$C(a0),d2
0000F218 9269 0008                  		sub.w	8(a1),d1
0000F21C 9469 000C                  		sub.w	$C(a1),d2
0000F220 4EB9 0000 2FBA             		jsr	(CalcAngle).l
0000F226 4EB9 0000 2CEC             		jsr	(CalcSine).l
0000F22C C3FC F900                  		muls.w	#-$700,d1
0000F230 E081                       		asr.l	#8,d1
0000F232 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F236 C1FC F900                  		muls.w	#-$700,d0
0000F23A E080                       		asr.l	#8,d0
0000F23C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F240 08E9 0001 0022             		bset	#1,$22(a1)
0000F246 08A9 0004 0022             		bclr	#4,$22(a1)
0000F24C 08A9 0005 0022             		bclr	#5,$22(a1)
0000F252 4229 003C                  		clr.b	$3C(a1)
0000F256 117C 0001 001C             		move.b	#1,$1C(a0)
0000F25C 303C 00B4                  		move.w	#$B4,d0
0000F260 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F266 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F26A 7000                       		moveq	#0,d0
0000F26C 1028 0023                  		move.b	$23(a0),d0
0000F270 6700                       		beq.s	Obj47_Score
0000F272 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F278 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F27A 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F27E                            
0000F27E                            Obj47_Score:
0000F27E 7001                       		moveq	#1,d0
0000F280 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F286 6100 EFFC                  		bsr.w	SingleObjLoad
0000F28A 6600                       		bne.s	Obj47_Display
0000F28C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F290 3368 0008 0008             		move.w	8(a0),8(a1)
0000F296 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F29C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F2A2                            
0000F2A2                            Obj47_Display:
0000F2A2 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F2A8 6100 BC14                  		bsr.w	AnimateSprite
0000F2AC 3028 0008                  		move.w	8(a0),d0
0000F2B0 0240 FF80                  		andi.w	#$FF80,d0
0000F2B4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2B8 0441 0080                  		subi.w	#$80,d1
0000F2BC 0241 FF80                  		andi.w	#$FF80,d1
0000F2C0 9041                       		sub.w	d1,d0
0000F2C2 0C40 0280                  		cmpi.w	#$280,d0
0000F2C6 6200                       		bhi.s	Obj47_ChkHit
0000F2C8 6000 EB34                  		bra.w	DisplaySprite
0000F2CC                            ; ===========================================================================
0000F2CC                            
0000F2CC                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F2CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2D0 7000                       		moveq	#0,d0
0000F2D2 1028 0023                  		move.b	$23(a0),d0
0000F2D6 6700                       		beq.s	Obj47_Delete
0000F2D8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2DE                            
0000F2DE                            Obj47_Delete:
0000F2DE 6000 EB5A                  		bra.w	DeleteObject
0000F2E2                            ; ===========================================================================
0000F2E2                            Ani_obj47:
0000F2E2                            	include "_anim\obj47.asm"
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            ; Animation script - flamethrower (SBZ)
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2 0000                       		dc.w byte_EAF4-Ani_obj47
0000F2E4 0000                       		dc.w byte_EAF8-Ani_obj47
0000F2E6 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F2EA 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F2F2                            		even
0000F2F2                            		even
0000F2F2                            
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Sprite mappings - pinball bumper (SYZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            Map_obj47:
0000F2F2                            	include "_maps\obj47.asm"
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Sprite mappings - pinball bumper (SYZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2 0000                       		dc.w byte_EB06-Map_obj47
0000F2F4 0000                       		dc.w byte_EB11-Map_obj47
0000F2F6 0000                       		dc.w byte_EB1C-Map_obj47
0000F2F8 02                         byte_EB06:	dc.b 2
0000F2F9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F2FE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F303 02                         byte_EB11:	dc.b 2
0000F304 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F309 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F30E 02                         byte_EB1C:	dc.b 2
0000F30F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F314 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F31A 00                         		even
0000F31A 00                         		even
0000F31A                            
0000F31A                            ; ===========================================================================
0000F31A                            ; ---------------------------------------------------------------------------
0000F31A                            ; Object 0D - signpost at the end of a level
0000F31A                            ; ---------------------------------------------------------------------------
0000F31A                            
0000F31A                            Obj0D:					; XREF: Obj_Index
0000F31A 7000                       		moveq	#0,d0
0000F31C 1028 0024                  		move.b	$24(a0),d0
0000F320 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F324 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F328 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F32E 6100 BB8E                  		bsr.w	AnimateSprite
0000F332 6100 EACA                  		bsr.w	DisplaySprite
0000F336 3028 0008                  		move.w	8(a0),d0
0000F33A 0240 FF80                  		andi.w	#$FF80,d0
0000F33E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F342 0441 0080                  		subi.w	#$80,d1
0000F346 0241 FF80                  		andi.w	#$FF80,d1
0000F34A 9041                       		sub.w	d1,d0
0000F34C 0C40 0280                  		cmpi.w	#$280,d0
0000F350 6200 EAE8                  		bhi.w	DeleteObject
0000F354 4E75                       		rts	
0000F356                            ; ===========================================================================
0000F356 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F358 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F35A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F35C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F35E 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F360                            ; ===========================================================================
0000F360                            
0000F360                            Obj0D_Main:				; XREF: Obj0D_Index
0000F360 5428 0024                  		addq.b	#2,$24(a0)
0000F364 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F36C 317C 0680 0002             		move.w	#$680,2(a0)
0000F372 117C 0004 0001             		move.b	#4,1(a0)
0000F378 117C 0018 0019             		move.b	#$18,$19(a0)
0000F37E 117C 0004 0018             		move.b	#4,$18(a0)
0000F384                            
0000F384                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F384 3038 D008                  		move.w	($FFFFD008).w,d0
0000F388 9068 0008                  		sub.w	8(a0),d0
0000F38C 6500                       		bcs.s	locret_EBBA
0000F38E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F392 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F394 303C 00CF                  		move.w	#$CF,d0
0000F398 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F39E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F3A2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F3A8 5428 0024                  		addq.b	#2,$24(a0)
0000F3AC                            
0000F3AC                            locret_EBBA:
0000F3AC 4E75                       		rts	
0000F3AE                            ; ===========================================================================
0000F3AE                            
0000F3AE                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F3AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F3B2 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F3B4 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F3BA 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F3BE 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F3C4 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F3C6 5428 0024                  		addq.b	#2,$24(a0)
0000F3CA                            
0000F3CA                            Obj0D_Sparkle:
0000F3CA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F3CE 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F3D0 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F3D6 7000                       		moveq	#0,d0
0000F3D8 1028 0034                  		move.b	$34(a0),d0
0000F3DC 5428 0034                  		addq.b	#2,$34(a0)
0000F3E0 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F3E6 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F3EA 6100 EE98                  		bsr.w	SingleObjLoad
0000F3EE 6600                       		bne.s	locret_EC42
0000F3F0 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F3F4 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F3FA 101A                       		move.b	(a2)+,d0
0000F3FC 4880                       		ext.w	d0
0000F3FE D068 0008                  		add.w	8(a0),d0
0000F402 3340 0008                  		move.w	d0,8(a1)
0000F406 101A                       		move.b	(a2)+,d0
0000F408 4880                       		ext.w	d0
0000F40A D068 000C                  		add.w	$C(a0),d0
0000F40E 3340 000C                  		move.w	d0,$C(a1)
0000F412 237C 0000 A65C 0004        		move.l	#Map_obj25,4(a1)
0000F41A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F420 137C 0004 0001             		move.b	#4,1(a1)
0000F426 137C 0002 0018             		move.b	#2,$18(a1)
0000F42C 137C 0008 0019             		move.b	#8,$19(a1)
0000F432                            
0000F432                            locret_EC42:
0000F432 4E75                       		rts	
0000F434                            ; ===========================================================================
0000F434 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F436 0808                       		dc.b	8,   8
0000F438 F000                       		dc.b -$10,   0
0000F43A 18F8                       		dc.b  $18,  -8
0000F43C 00F8                       		dc.b	0,  -8
0000F43E 1000                       		dc.b  $10,   0
0000F440 E808                       		dc.b -$18,   8
0000F442 1810                       		dc.b  $18, $10
0000F444                            ; ===========================================================================
0000F444                            
0000F444                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F444 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F448 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F44C 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F452 6600                       		bne.s	loc_EC70
0000F454 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F45A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F460 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F462 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F468 6000                       		bra.s	loc_EC70
0000F46A                            
0000F46A                            Obj0D_MoveLeft:
0000F46A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F470                            
0000F470                            loc_EC70:
0000F470 4A38 D000                  		tst.b	($FFFFD000).w
0000F474 6700                       		beq.s	loc_EC86
0000F476 3038 D008                  		move.w	($FFFFD008).w,d0
0000F47A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F47E 0641 0128                  		addi.w	#$128,d1
0000F482 B041                       		cmp.w	d1,d0
0000F484 6500                       		bcs.s	locret_ECEE
0000F486                            
0000F486                            loc_EC86:
0000F486 5428 0024                  		addq.b	#2,$24(a0)
0000F48A                            
0000F48A                            ; ---------------------------------------------------------------------------
0000F48A                            ; Subroutine to	set up bonuses at the end of an	act
0000F48A                            ; ---------------------------------------------------------------------------
0000F48A                            
0000F48A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F48A                            
0000F48A                            
0000F48A                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F48A 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F48E 6600                       		bne.s	locret_ECEE
0000F490 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F496 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F49A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F49E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F4A4 7010                       		moveq	#$10,d0
0000F4A6 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F4AC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F4B2 7000                       		moveq	#0,d0
0000F4B4 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F4B8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F4BC 7200                       		moveq	#0,d1
0000F4BE 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F4C2 D041                       		add.w	d1,d0		; add up your time
0000F4C4 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F4C8 7214                       		moveq	#$14,d1
0000F4CA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F4CC 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F4CE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F4D0                            
0000F4D0                            loc_ECD0:
0000F4D0 D040                       		add.w	d0,d0
0000F4D2 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F4D8 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F4DC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F4E0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F4E4 303C 008E                  		move.w	#$8E,d0
0000F4E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F4EE                            
0000F4EE                            locret_ECEE:
0000F4EE 4E75                       		rts	
0000F4F0                            ; End of function GotThroughAct
0000F4F0                            
0000F4F0                            ; ===========================================================================
0000F4F0 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F504 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F51A                            ; ===========================================================================
0000F51A                            
0000F51A                            locret_ED1A:				; XREF: Obj0D_Index
0000F51A 4E75                       		rts	
0000F51C                            ; ===========================================================================
0000F51C                            Ani_obj0D:
0000F51C                            	include "_anim\obj0D.asm"
0000F51C                            ; ---------------------------------------------------------------------------
0000F51C                            ; Animation script - signpost
0000F51C                            ; ---------------------------------------------------------------------------
0000F51C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F51E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F520 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F522 0000                       		dc.w byte_ED34-Ani_obj0D
0000F524 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F528 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F52E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F534 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F538 00                         		even
0000F538 00                         		even
0000F538                            
0000F538                            ; ---------------------------------------------------------------------------
0000F538                            ; Sprite mappings - signpost
0000F538                            ; ---------------------------------------------------------------------------
0000F538                            Map_obj0D:
0000F538                            	include "_maps\obj0D.asm"
0000F538                            ; ---------------------------------------------------------------------------
0000F538                            ; Sprite mappings - signpost
0000F538                            ; ---------------------------------------------------------------------------
0000F538 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F53C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F540 0000                       		dc.w byte_ED73-Map_obj0D
0000F542 03                         byte_ED42:	dc.b 3
0000F543 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F548 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F54D 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F552 02                         byte_ED52:	dc.b 2
0000F553 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F558 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F55D 02                         byte_ED5D:	dc.b 2
0000F55E F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F563 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F568 02                         byte_ED68:	dc.b 2
0000F569 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F56E 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F573 03                         byte_ED73:	dc.b 3
0000F574 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F579 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F57E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F584 00                         		even
0000F584 00                         		even
0000F584                            
0000F584                            ; ===========================================================================
0000F584                            ; ---------------------------------------------------------------------------
0000F584                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F584                            ; ---------------------------------------------------------------------------
0000F584                            
0000F584                            Obj4C:					; XREF: Obj_Index
0000F584 7000                       		moveq	#0,d0
0000F586 1028 0024                  		move.b	$24(a0),d0
0000F58A 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F58E 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F592 6000 0000                  		bra.w	Obj4D_ChkDel
0000F596                            ; ===========================================================================
0000F596 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F598 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F59A 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F59C 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F59E 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F5A0 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F5A2                            ; ===========================================================================
0000F5A2                            
0000F5A2                            Obj4C_Main:				; XREF: Obj4C_Index
0000F5A2 5428 0024                  		addq.b	#2,$24(a0)
0000F5A6 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F5AE 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F5B4 117C 0004 0001             		move.b	#4,1(a0)
0000F5BA 117C 0001 0018             		move.b	#1,$18(a0)
0000F5C0 117C 0038 0019             		move.b	#$38,$19(a0)
0000F5C6 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F5CC                            
0000F5CC                            loc_EDCC:				; XREF: Obj4C_Index
0000F5CC 5368 0032                  		subq.w	#1,$32(a0)
0000F5D0 6A00                       		bpl.s	locret_EDF0
0000F5D2 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F5D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F5DC 3228 000C                  		move.w	$C(a0),d1
0000F5E0 B041                       		cmp.w	d1,d0
0000F5E2 6400                       		bcc.s	locret_EDF0
0000F5E4 0441 0170                  		subi.w	#$170,d1
0000F5E8 B041                       		cmp.w	d1,d0
0000F5EA 6500                       		bcs.s	locret_EDF0
0000F5EC 5428 0024                  		addq.b	#2,$24(a0)
0000F5F0                            
0000F5F0                            locret_EDF0:
0000F5F0 4E75                       		rts	
0000F5F2                            ; ===========================================================================
0000F5F2                            
0000F5F2                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F5F2 5428 0024                  		addq.b	#2,$24(a0)
0000F5F6 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F5FA 6600                       		bne.s	loc_EE18
0000F5FC 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F600 3368 0008 0008             		move.w	8(a0),8(a1)
0000F606 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F60C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F612 2348 003C                  		move.l	a0,$3C(a1)
0000F616                            
0000F616                            loc_EE18:
0000F616 117C 0001 001C             		move.b	#1,$1C(a0)
0000F61C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F620 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F622 117C 0004 001C             		move.b	#4,$1C(a0)
0000F628 6000                       		bra.s	Obj4C_Display
0000F62A                            ; ===========================================================================
0000F62A                            
0000F62A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F62A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F62E 08E9 0001 0022             		bset	#1,$22(a1)
0000F634 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F63A 6000                       		bra.s	Obj4C_Display
0000F63C                            ; ===========================================================================
0000F63C                            
0000F63C                            loc_EE3E:				; XREF: Obj4C_Index
0000F63C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F640 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F642 5428 0024                  		addq.b	#2,$24(a0)
0000F646 4E75                       		rts	
0000F648                            ; ===========================================================================
0000F648                            
0000F648                            Obj4C_Display:				; XREF: Obj4C_Index
0000F648 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F64E 6100 B86E                  		bsr.w	AnimateSprite
0000F652 6100 E7AA                  		bsr.w	DisplaySprite
0000F656 4E75                       		rts	
0000F658                            ; ===========================================================================
0000F658                            
0000F658                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F658 117C 0000 001C             		move.b	#0,$1C(a0)
0000F65E 117C 0002 0024             		move.b	#2,$24(a0)
0000F664 4A28 0028                  		tst.b	$28(a0)
0000F668 6700 E7D0                  		beq.w	DeleteObject
0000F66C 4E75                       		rts	
0000F66E                            ; ===========================================================================
0000F66E                            ; ---------------------------------------------------------------------------
0000F66E                            ; Object 4D - lava geyser / lavafall (MZ)
0000F66E                            ; ---------------------------------------------------------------------------
0000F66E                            
0000F66E                            Obj4D:					; XREF: Obj_Index
0000F66E 7000                       		moveq	#0,d0
0000F670 1028 0024                  		move.b	$24(a0),d0
0000F674 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F678 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F67C 6000 E780                  		bra.w	DisplaySprite
0000F680                            ; ===========================================================================
0000F680 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F682 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F684 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F686 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F688                            
0000F688 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F68C                            ; ===========================================================================
0000F68C                            
0000F68C                            Obj4D_Main:				; XREF: Obj4D_Index
0000F68C 5428 0024                  		addq.b	#2,$24(a0)
0000F690 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F696 4A28 0028                  		tst.b	$28(a0)
0000F69A 6700                       		beq.s	loc_EEA4
0000F69C 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F6A2                            
0000F6A2                            loc_EEA4:
0000F6A2 7000                       		moveq	#0,d0
0000F6A4 1028 0028                  		move.b	$28(a0),d0
0000F6A8 D040                       		add.w	d0,d0
0000F6AA 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F6B0 2248                       		movea.l	a0,a1
0000F6B2 7201                       		moveq	#1,d1
0000F6B4 6100                       		bsr.s	Obj4D_MakeLava
0000F6B6 6000                       		bra.s	loc_EF10
0000F6B8                            ; ===========================================================================
0000F6B8                            
0000F6B8                            Obj4D_Loop:
0000F6B8 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F6BC 6600                       		bne.s	loc_EF0A
0000F6BE                            
0000F6BE                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F6BE 12BC 004D                  		move.b	#$4D,0(a1)
0000F6C2 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F6CA 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F6D0 137C 0004 0001             		move.b	#4,1(a1)
0000F6D6 137C 0020 0019             		move.b	#$20,$19(a1)
0000F6DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6E8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F6EE 137C 0001 0018             		move.b	#1,$18(a1)
0000F6F4 137C 0005 001C             		move.b	#5,$1C(a1)
0000F6FA 4A28 0028                  		tst.b	$28(a0)
0000F6FE 6700                       		beq.s	loc_EF0A
0000F700 137C 0002 001C             		move.b	#2,$1C(a1)
0000F706                            
0000F706                            loc_EF0A:
0000F706 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F70A 4E75                       		rts	
0000F70C                            ; ===========================================================================
0000F70C                            
0000F70C                            loc_EF10:				; XREF: Obj4D_Main
0000F70C 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F712 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F718 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F71E 137C 0093 0020             		move.b	#$93,$20(a1)
0000F724 137C 0080 0016             		move.b	#$80,$16(a1)
0000F72A 08E9 0004 0001             		bset	#4,1(a1)
0000F730 5829 0024                  		addq.b	#4,$24(a1)
0000F734 2348 003C                  		move.l	a0,$3C(a1)
0000F738 4A28 0028                  		tst.b	$28(a0)
0000F73C 6700                       		beq.s	Obj4D_PlaySnd
0000F73E 7200                       		moveq	#0,d1
0000F740 6100 FF76                  		bsr.w	Obj4D_Loop
0000F744 5429 0024                  		addq.b	#2,$24(a1)
0000F748 08E9 0004 0002             		bset	#4,2(a1)
0000F74E 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F754 137C 0000 0018             		move.b	#0,$18(a1)
0000F75A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F760 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F766 117C 0000 0028             		move.b	#0,$28(a0)
0000F76C                            
0000F76C                            Obj4D_PlaySnd:
0000F76C 303C 00C8                  		move.w	#$C8,d0
0000F770 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F776                            
0000F776                            Obj4D_Action:				; XREF: Obj4D_Index
0000F776 7000                       		moveq	#0,d0
0000F778 1028 0028                  		move.b	$28(a0),d0
0000F77C D040                       		add.w	d0,d0
0000F77E 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F782 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F786 6100 E650                  		bsr.w	SpeedToPos
0000F78A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F790 6100 B72C                  		bsr.w	AnimateSprite
0000F794                            
0000F794                            Obj4D_ChkDel:				; XREF: Obj4C
0000F794 3028 0008                  		move.w	8(a0),d0
0000F798 0240 FF80                  		andi.w	#$FF80,d0
0000F79C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7A0 0441 0080                  		subi.w	#$80,d1
0000F7A4 0241 FF80                  		andi.w	#$FF80,d1
0000F7A8 9041                       		sub.w	d1,d0
0000F7AA 0C40 0280                  		cmpi.w	#$280,d0
0000F7AE 6200 E68A                  		bhi.w	DeleteObject
0000F7B2 4E75                       		rts	
0000F7B4                            ; ===========================================================================
0000F7B4 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F7B6 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F7B8                            ; ===========================================================================
0000F7B8                            
0000F7B8                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F7B8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7BE 3028 0030                  		move.w	$30(a0),d0
0000F7C2 B068 000C                  		cmp.w	$C(a0),d0
0000F7C6 6400                       		bcc.s	locret_EFDA
0000F7C8 5828 0024                  		addq.b	#4,$24(a0)
0000F7CC 2268 003C                  		movea.l	$3C(a0),a1
0000F7D0 137C 0003 001C             		move.b	#3,$1C(a1)
0000F7D6                            
0000F7D6                            locret_EFDA:
0000F7D6 4E75                       		rts	
0000F7D8                            ; ===========================================================================
0000F7D8                            
0000F7D8                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F7D8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7DE 3028 0030                  		move.w	$30(a0),d0
0000F7E2 B068 000C                  		cmp.w	$C(a0),d0
0000F7E6 6400                       		bcc.s	locret_EFFA
0000F7E8 5828 0024                  		addq.b	#4,$24(a0)
0000F7EC 2268 003C                  		movea.l	$3C(a0),a1
0000F7F0 137C 0001 001C             		move.b	#1,$1C(a1)
0000F7F6                            
0000F7F6                            locret_EFFA:
0000F7F6 4E75                       		rts	
0000F7F8                            ; ===========================================================================
0000F7F8                            
0000F7F8                            loc_EFFC:				; XREF: Obj4D_Index
0000F7F8 2268 003C                  		movea.l	$3C(a0),a1
0000F7FC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F802 6700 0000                  		beq.w	Obj4D_Delete
0000F806 3029 000C                  		move.w	$C(a1),d0
0000F80A 0640 0060                  		addi.w	#$60,d0
0000F80E 3140 000C                  		move.w	d0,$C(a0)
0000F812 9068 0030                  		sub.w	$30(a0),d0
0000F816 4440                       		neg.w	d0
0000F818 7208                       		moveq	#8,d1
0000F81A 0C40 0040                  		cmpi.w	#$40,d0
0000F81E 6C00                       		bge.s	loc_F026
0000F820 720B                       		moveq	#$B,d1
0000F822                            
0000F822                            loc_F026:
0000F822 0C40 0080                  		cmpi.w	#$80,d0
0000F826 6F00                       		ble.s	loc_F02E
0000F828 720E                       		moveq	#$E,d1
0000F82A                            
0000F82A                            loc_F02E:
0000F82A 5328 001E                  		subq.b	#1,$1E(a0)
0000F82E 6A00                       		bpl.s	loc_F04C
0000F830 117C 0007 001E             		move.b	#7,$1E(a0)
0000F836 5228 001B                  		addq.b	#1,$1B(a0)
0000F83A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F840 6500                       		bcs.s	loc_F04C
0000F842 117C 0000 001B             		move.b	#0,$1B(a0)
0000F848                            
0000F848                            loc_F04C:
0000F848 1028 001B                  		move.b	$1B(a0),d0
0000F84C D001                       		add.b	d1,d0
0000F84E 1140 001A                  		move.b	d0,$1A(a0)
0000F852 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F856                            ; ===========================================================================
0000F856                            
0000F856                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F856 6000 E5E2                  		bra.w	DeleteObject
0000F85A                            ; ===========================================================================
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            ; Object 4E - advancing	wall of	lava (MZ)
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            
0000F85A                            Obj4E:					; XREF: Obj_Index
0000F85A 7000                       		moveq	#0,d0
0000F85C 1028 0024                  		move.b	$24(a0),d0
0000F860 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F864 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F868                            ; ===========================================================================
0000F868 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F86A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F86C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F86E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F870 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F872                            ; ===========================================================================
0000F872                            
0000F872                            Obj4E_Main:				; XREF: Obj4E_Index
0000F872 5828 0024                  		addq.b	#4,$24(a0)
0000F876 2248                       		movea.l	a0,a1
0000F878 7201                       		moveq	#1,d1
0000F87A 6000                       		bra.s	Obj4E_Main2
0000F87C                            ; ===========================================================================
0000F87C                            
0000F87C                            Obj4E_Loop:
0000F87C 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F880 6600                       		bne.s	loc_F0C8
0000F882                            
0000F882                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F882 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F886 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F88E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F894 137C 0004 0001             		move.b	#4,1(a1)
0000F89A 137C 0050 0019             		move.b	#$50,$19(a1)
0000F8A0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8AC 137C 0001 0018             		move.b	#1,$18(a1)
0000F8B2 137C 0000 001C             		move.b	#0,$1C(a1)
0000F8B8 137C 0094 0020             		move.b	#$94,$20(a1)
0000F8BE 2348 003C                  		move.l	a0,$3C(a1)
0000F8C2                            
0000F8C2                            loc_F0C8:
0000F8C2 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F8C6                            
0000F8C6 5C29 0024                  		addq.b	#6,$24(a1)
0000F8CA 137C 0004 001A             		move.b	#4,$1A(a1)
0000F8D0                            
0000F8D0                            Obj4E_Action:				; XREF: Obj4E_Index
0000F8D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8D4 9068 0008                  		sub.w	8(a0),d0
0000F8D8 6400                       		bcc.s	Obj4E_ChkSonic
0000F8DA 4440                       		neg.w	d0
0000F8DC                            
0000F8DC                            Obj4E_ChkSonic:
0000F8DC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F8E0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8E6 9068 000C                  		sub.w	$C(a0),d0
0000F8EA 6400                       		bcc.s	loc_F0F4
0000F8EC 4440                       		neg.w	d0
0000F8EE                            
0000F8EE                            loc_F0F4:
0000F8EE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F8F2 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8F4 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F8FA 6000                       		bra.s	Obj4E_Solid
0000F8FC                            ; ===========================================================================
0000F8FC                            
0000F8FC                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F8FC 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F900 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F902 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F908 5528 0024                  		subq.b	#2,$24(a0)
0000F90C                            
0000F90C                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F90C 323C 002B                  		move.w	#$2B,d1
0000F910 343C 0018                  		move.w	#$18,d2
0000F914 3602                       		move.w	d2,d3
0000F916 5243                       		addq.w	#1,d3
0000F918 3828 0008                  		move.w	8(a0),d4
0000F91C 1028 0024                  		move.b	$24(a0),d0
0000F920 3F00                       		move.w	d0,-(sp)
0000F922 6100 0000                  		bsr.w	SolidObject
0000F926 301F                       		move.w	(sp)+,d0
0000F928 1140 0024                  		move.b	d0,$24(a0)
0000F92C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F932 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F934 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F938 4228 0036                  		clr.b	$36(a0)
0000F93C                            
0000F93C                            Obj4E_Animate:
0000F93C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F942 6100 B57A                  		bsr.w	AnimateSprite
0000F946 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F94C 6400                       		bcc.s	Obj4E_ChkDel
0000F94E 6100 E488                  		bsr.w	SpeedToPos
0000F952                            
0000F952                            Obj4E_ChkDel:
0000F952 6100 E4AA                  		bsr.w	DisplaySprite
0000F956 4A28 0036                  		tst.b	$36(a0)
0000F95A 6600                       		bne.s	locret_F17E
0000F95C 3028 0008                  		move.w	8(a0),d0
0000F960 0240 FF80                  		andi.w	#$FF80,d0
0000F964 3238 F700                  		move.w	($FFFFF700).w,d1
0000F968 0441 0080                  		subi.w	#$80,d1
0000F96C 0241 FF80                  		andi.w	#$FF80,d1
0000F970 9041                       		sub.w	d1,d0
0000F972 0C40 0280                  		cmpi.w	#$280,d0
0000F976 6200                       		bhi.s	Obj4E_ChkGone
0000F978                            
0000F978                            locret_F17E:
0000F978 4E75                       		rts	
0000F97A                            ; ===========================================================================
0000F97A                            
0000F97A                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F97A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F97E 7000                       		moveq	#0,d0
0000F980 1028 0023                  		move.b	$23(a0),d0
0000F984 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F98A 117C 0008 0024             		move.b	#8,$24(a0)
0000F990 4E75                       		rts	
0000F992                            ; ===========================================================================
0000F992                            
0000F992                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F992 2268 003C                  		movea.l	$3C(a0),a1
0000F996 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F99C 6700                       		beq.s	Obj4E_Delete
0000F99E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F9A4 0468 0080 0008             		subi.w	#$80,8(a0)
0000F9AA 6000 E452                  		bra.w	DisplaySprite
0000F9AE                            ; ===========================================================================
0000F9AE                            
0000F9AE                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F9AE 6000 E48A                  		bra.w	DeleteObject
0000F9B2                            ; ===========================================================================
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            ; Object 54 - invisible	lava tag (MZ)
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            
0000F9B2                            Obj54:					; XREF: Obj_Index
0000F9B2 7000                       		moveq	#0,d0
0000F9B4 1028 0024                  		move.b	$24(a0),d0
0000F9B8 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F9BC 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F9C0                            ; ===========================================================================
0000F9C0 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F9C2 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F9C4                            
0000F9C4 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F9C8                            ; ===========================================================================
0000F9C8                            
0000F9C8                            Obj54_Main:				; XREF: Obj54_Index
0000F9C8 5428 0024                  		addq.b	#2,$24(a0)
0000F9CC 7000                       		moveq	#0,d0
0000F9CE 1028 0028                  		move.b	$28(a0),d0
0000F9D2 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F9D8 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F9E0 117C 0084 0001             		move.b	#$84,1(a0)
0000F9E6                            
0000F9E6                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F9E6 3028 0008                  		move.w	8(a0),d0
0000F9EA 0240 FF80                  		andi.w	#$FF80,d0
0000F9EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9F2 0441 0080                  		subi.w	#$80,d1
0000F9F6 0241 FF80                  		andi.w	#$FF80,d1
0000F9FA 9041                       		sub.w	d1,d0
0000F9FC 6B00 E43C                  		bmi.w	DeleteObject
0000FA00 0C40 0280                  		cmpi.w	#$280,d0
0000FA04 6200 E434                  		bhi.w	DeleteObject
0000FA08 4E75                       		rts	
0000FA0A                            ; ===========================================================================
0000FA0A                            ; ---------------------------------------------------------------------------
0000FA0A                            ; Sprite mappings - invisible lava tag (MZ)
0000FA0A                            ; ---------------------------------------------------------------------------
0000FA0A                            Map_obj54:
0000FA0A                            	include "_maps\obj54.asm"
0000FA0A                            ; ---------------------------------------------------------------------------
0000FA0A                            ; Sprite mappings - invisible lava tag (MZ)
0000FA0A                            ; ---------------------------------------------------------------------------
0000FA0A 0000                       		dc.w byte_F212-Map_obj54
0000FA0C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA0E 00                         		even
0000FA0E 00                         		even
0000FA0E                            
0000FA0E                            Ani_obj4C:
0000FA0E                            	include "_anim\obj4C.asm"
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            ; Animation script - geyser of lava (MZ)
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E 0000                       		dc.w byte_F220-Ani_obj4C
0000FA10 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA12 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA14 0000                       		dc.w byte_F232-Ani_obj4C
0000FA16 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA18 0000                       		dc.w byte_F23E-Ani_obj4C
0000FA1A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FA24 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FA28 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FA2C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FA34 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FA38 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FA3C                            		even
0000FA3C                            		even
0000FA3C                            
0000FA3C                            Ani_obj4E:
0000FA3C                            	include "_anim\obj4E.asm"
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            ; Animation script - advancing wall of lava (MZ)
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C 0000                       		dc.w byte_F244-Ani_obj4E
0000FA3E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FA44                            		even
0000FA44                            		even
0000FA44                            
0000FA44                            ; ---------------------------------------------------------------------------
0000FA44                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA44                            ; ---------------------------------------------------------------------------
0000FA44                            Map_obj4C:
0000FA44                            	include "_maps\obj4C.asm"
0000FA44                            ; ---------------------------------------------------------------------------
0000FA44                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA44                            ; ---------------------------------------------------------------------------
0000FA44 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FA48 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FA4C 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FA50 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FA54 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FA58 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FA5C 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FA60 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FA64 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FA68 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FA6C 02                         byte_F272:	dc.b 2
0000FA6D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FA72 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FA77 02                         byte_F27D:	dc.b 2
0000FA78 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FA7D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FA82 04                         byte_F288:	dc.b 4
0000FA83 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA88 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA8D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA92 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA97 04                         byte_F29D:	dc.b 4
0000FA98 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA9D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FAA2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FAA7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAAC 06                         byte_F2B2:	dc.b 6
0000FAAD EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FAB2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FAB7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FABC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FAC1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FAC6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FACB 06                         byte_F2D1:	dc.b 6
0000FACC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FAD1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FAD6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FADB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAE0 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FAE5 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FAEA 02                         byte_F2F0:	dc.b 2
0000FAEB E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FAF0 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FAF5 02                         byte_F2FB:	dc.b 2
0000FAF6 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FAFB E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB00 0A                         byte_F306:	dc.b $A
0000FB01 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB06 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB0B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB10 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB15 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB1A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB1F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB24 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB29 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB2E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB33 0A                         byte_F339:	dc.b $A
0000FB34 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB39 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB3E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB43 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB48 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB4D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB52 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB57 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB5C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB61 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB66 0A                         byte_F36C:	dc.b $A
0000FB67 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB6C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB71 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB76 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB7B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB80 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB85 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB8A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB8F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB94 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB99 06                         byte_F39F:	dc.b 6
0000FB9A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB9F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FBA4 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FBA9 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FBAE D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBB3 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBB8 06                         byte_F3BE:	dc.b 6
0000FBB9 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBBE 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBC3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBC8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBCD D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBD2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBD7 06                         byte_F3DD:	dc.b 6
0000FBD8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBDD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBE2 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBE7 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBEC D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBF1 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBF6 10                         byte_F3FC:	dc.b $10
0000FBF7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FBFC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC01 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC06 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC0B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC10 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC15 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FC1A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FC1F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FC24 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FC29 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FC2E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FC33 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FC38 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FC3D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FC42 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FC47 10                         byte_F44D:	dc.b $10
0000FC48 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC4D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC52 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC57 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC5C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC61 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC66 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FC6B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FC70 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FC75 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC7A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FC7F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FC84 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FC89 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC8E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC93 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC98 10                         byte_F49E:	dc.b $10
0000FC99 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC9E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FCA3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FCA8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FCAD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FCB2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FCB7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FCBC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FCC1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FCC6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FCCB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FCD0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FCD5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FCDA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FCDF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FCE4 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FCE9 06                         byte_F4EF:	dc.b 6
0000FCEA E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FCEF E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FCF4 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FCF9 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FCFE D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD03 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD08 06                         byte_F50E:	dc.b 6
0000FD09 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD0E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD13 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD18 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FD1D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FD22 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FD27 00                         byte_F52D:	dc.b 0
0000FD28                            		even
0000FD28                            		even
0000FD28                            
0000FD28                            ; ---------------------------------------------------------------------------
0000FD28                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD28                            ; ---------------------------------------------------------------------------
0000FD28                            Map_obj4E:
0000FD28                            	include "_maps\obj4E.asm"
0000FD28                            ; ---------------------------------------------------------------------------
0000FD28                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD28                            ; ---------------------------------------------------------------------------
0000FD28 0000                       		dc.w byte_F538-Map_obj4E
0000FD2A 0000                       		dc.w byte_F566-Map_obj4E
0000FD2C 0000                       		dc.w byte_F594-Map_obj4E
0000FD2E 0000                       		dc.w byte_F5C2-Map_obj4E
0000FD30 0000                       		dc.w byte_F5F0-Map_obj4E
0000FD32 09                         byte_F538:	dc.b 9
0000FD33 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FD38 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD3D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD42 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD47 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD4C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD51 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD56 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD5B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD60 09                         byte_F566:	dc.b 9
0000FD61 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD66 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FD6B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD70 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD75 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD7A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD7F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD84 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD89 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD8E 09                         byte_F594:	dc.b 9
0000FD8F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD94 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD99 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD9E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDA3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDA8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDAD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDB2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDB7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDBC 09                         byte_F5C2:	dc.b 9
0000FDBD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDC2 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FDC7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDCC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDD1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDD6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDDB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDE0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDE5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDEA 08                         byte_F5F0:	dc.b 8
0000FDEB E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FDF0 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDF5 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDFA 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDFF E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE04 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE09 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE0E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE14 00                         		even
0000FE14 00                         		even
0000FE14                            
0000FE14                            ; ===========================================================================
0000FE14                            ; ---------------------------------------------------------------------------
0000FE14                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE14                            ; ---------------------------------------------------------------------------
0000FE14                            
0000FE14                            Obj40:					; XREF: Obj_Index
0000FE14 7000                       		moveq	#0,d0
0000FE16 1028 0024                  		move.b	$24(a0),d0
0000FE1A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FE1E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FE22                            ; ===========================================================================
0000FE22 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FE24 0000                       		dc.w Obj40_Action-Obj40_Index
0000FE26 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FE28 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FE2A                            ; ===========================================================================
0000FE2A                            
0000FE2A                            Obj40_Main:				; XREF: Obj40_Index
0000FE2A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FE32 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FE38 117C 0004 0001             		move.b	#4,1(a0)
0000FE3E 117C 0004 0018             		move.b	#4,$18(a0)
0000FE44 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE4A 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FE4E 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FE50 117C 000E 0016             		move.b	#$E,$16(a0)
0000FE56 117C 0008 0017             		move.b	#8,$17(a0)
0000FE5C 117C 000C 0020             		move.b	#$C,$20(a0)
0000FE62 6100 DF48                  		bsr.w	ObjectFall
0000FE66 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE6C 4A41                       		tst.w	d1
0000FE6E 6A00                       		bpl.s	locret_F68A
0000FE70 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE74 317C 0000 0012             		move.w	#0,$12(a0)
0000FE7A 5428 0024                  		addq.b	#2,$24(a0)
0000FE7E 0868 0000 0022             		bchg	#0,$22(a0)
0000FE84                            
0000FE84                            locret_F68A:
0000FE84 4E75                       		rts	
0000FE86                            ; ===========================================================================
0000FE86                            
0000FE86                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FE86 5828 0024                  		addq.b	#4,$24(a0)
0000FE8A 6000 0000                  		bra.w	Obj40_Animate
0000FE8E                            ; ===========================================================================
0000FE8E                            
0000FE8E                            Obj40_Action:				; XREF: Obj40_Index
0000FE8E 7000                       		moveq	#0,d0
0000FE90 1028 0025                  		move.b	$25(a0),d0
0000FE94 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE98 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE9C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FEA2 6100 B01A                  		bsr.w	AnimateSprite
0000FEA6                            
0000FEA6                            ; ---------------------------------------------------------------------------
0000FEA6                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FEA6                            ; ---------------------------------------------------------------------------
0000FEA6                            
0000FEA6                            MarkObjGone:
0000FEA6 3028 0008                  		move.w	8(a0),d0
0000FEAA 0240 FF80                  		andi.w	#$FF80,d0
0000FEAE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FEB2 0441 0080                  		subi.w	#$80,d1
0000FEB6 0241 FF80                  		andi.w	#$FF80,d1
0000FEBA 9041                       		sub.w	d1,d0
0000FEBC 0C40 0280                  		cmpi.w	#$280,d0
0000FEC0 6200 0000                  		bhi.w	Mark_ChkGone
0000FEC4 6000 DF38                  		bra.w	DisplaySprite
0000FEC8                            ; ===========================================================================
0000FEC8                            
0000FEC8                            Mark_ChkGone:
0000FEC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FECC 7000                       		moveq	#0,d0
0000FECE 1028 0023                  		move.b	$23(a0),d0
0000FED2 6700                       		beq.s	Mark_Delete
0000FED4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FEDA                            
0000FEDA                            Mark_Delete:
0000FEDA 6000 DF5E                  		bra.w	DeleteObject
0000FEDE                            
0000FEDE                            ; ===========================================================================
0000FEDE 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FEE0 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FEE2                            ; ===========================================================================
0000FEE2                            
0000FEE2                            Obj40_Move:				; XREF: Obj40_Index2
0000FEE2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEE6 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FEE8 5428 0025                  		addq.b	#2,$25(a0)
0000FEEC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FEF2 117C 0001 001C             		move.b	#1,$1C(a0)
0000FEF8 0868 0000 0022             		bchg	#0,$22(a0)
0000FEFE 6600                       		bne.s	locret_F70A
0000FF00 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF04                            
0000FF04                            locret_F70A:
0000FF04 4E75                       		rts	
0000FF06                            ; ===========================================================================
0000FF06                            
0000FF06                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF06 6100 DED0                  		bsr.w	SpeedToPos
0000FF0A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF10 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF14 6D00                       		blt.s	Obj40_Pause
0000FF16 0C41 000C                  		cmpi.w	#$C,d1
0000FF1A 6C00                       		bge.s	Obj40_Pause
0000FF1C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF20 5328 0033                  		subq.b	#1,$33(a0)
0000FF24 6A00                       		bpl.s	locret_F756
0000FF26 117C 000F 0033             		move.b	#$F,$33(a0)
0000FF2C 6100 E356                  		bsr.w	SingleObjLoad
0000FF30 6600                       		bne.s	locret_F756
0000FF32 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FF36 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF3C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF42 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FF48 137C 0002 001C             		move.b	#2,$1C(a1)
0000FF4E                            
0000FF4E                            locret_F756:
0000FF4E 4E75                       		rts	
0000FF50                            ; ===========================================================================
0000FF50                            
0000FF50                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FF50 5528 0025                  		subq.b	#2,$25(a0)
0000FF54 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF5A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FF60 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF66 4E75                       		rts	
0000FF68                            ; ===========================================================================
0000FF68                            
0000FF68                            Obj40_Animate:				; XREF: Obj40_Index
0000FF68 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF6E 6100 AF4E                  		bsr.w	AnimateSprite
0000FF72 6000 DE8A                  		bra.w	DisplaySprite
0000FF76                            ; ===========================================================================
0000FF76                            
0000FF76                            Obj40_Delete:				; XREF: Obj40_Index
0000FF76 6000 DEC2                  		bra.w	DeleteObject
0000FF7A                            ; ===========================================================================
0000FF7A                            Ani_obj40:
0000FF7A                            	include "_anim\obj40.asm"
0000FF7A                            ; ---------------------------------------------------------------------------
0000FF7A                            ; Animation script - Motobug enemy
0000FF7A                            ; ---------------------------------------------------------------------------
0000FF7A 0000                       		dc.w byte_F788-Ani_obj40
0000FF7C 0000                       		dc.w byte_F78C-Ani_obj40
0000FF7E 0000                       		dc.w byte_F792-Ani_obj40
0000FF80 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FF84 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FF8A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF98                            		even
0000FF98                            		even
0000FF98                            
0000FF98                            ; ---------------------------------------------------------------------------
0000FF98                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF98                            ; ---------------------------------------------------------------------------
0000FF98                            Map_obj40:
0000FF98                            	include "_maps\obj40.asm"
0000FF98                            Map_cedc:
0000FF98 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FF9A 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FF9C 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FF9E 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FFA0 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FFA2 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FFA4 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FFA6 04                         Map_cedc_E: 	dc.b $4
0000FFA7 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFAC 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FFB1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFB6 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FFBB 04                         Map_cedc_23: 	dc.b $4
0000FFBC F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FFC1 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FFC6 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FFCB 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FFD0 05                         Map_cedc_38: 	dc.b $5
0000FFD1 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFD6 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FFDB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFE0 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FFE5 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FFEA 01                         Map_cedc_52: 	dc.b $1
0000FFEB FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FFF0 01                         Map_cedc_58: 	dc.b $1
0000FFF1 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FFF6 01                         Map_cedc_5E: 	dc.b $1
0000FFF7 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FFFC 00                         Map_cedc_64: 	dc.b $0
0000FFFE 00                         	even
0000FFFE 00                         	even
0000FFFE                            
0000FFFE                            ; ===========================================================================
0000FFFE                            ; ---------------------------------------------------------------------------
0000FFFE                            ; Object 4F - blank
0000FFFE                            ; ---------------------------------------------------------------------------
0000FFFE                            
0000FFFE                            Obj4F:					; XREF: Obj_Index
0000FFFE 4E75                       		rts	
00010000                            
00010000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010000                            
00010000                            
00010000                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010000 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010004 D047                       		add.w	d7,d0
00010006 0240 0003                  		andi.w	#3,d0
0001000A 6600                       		bne.s	loc_F836
0001000C 7600                       		moveq	#0,d3
0001000E 1628 0019                  		move.b	$19(a0),d3
00010012 4A68 0010                  		tst.w	$10(a0)
00010016 6B00                       		bmi.s	loc_F82C
00010018 6100 0000                  		bsr.w	ObjHitWallRight
0001001C 4A41                       		tst.w	d1
0001001E 6A00                       		bpl.s	loc_F836
00010020                            
00010020                            loc_F828:
00010020 7001                       		moveq	#1,d0
00010022 4E75                       		rts	
00010024                            ; ===========================================================================
00010024                            
00010024                            loc_F82C:
00010024 4643                       		not.w	d3
00010026 6100 0000                  		bsr.w	ObjHitWallLeft
0001002A 4A41                       		tst.w	d1
0001002C 6BF2                       		bmi.s	loc_F828
0001002E                            
0001002E                            loc_F836:
0001002E 7000                       		moveq	#0,d0
00010030 4E75                       		rts	
00010032                            ; End of function Obj50_ChkWall
00010032                            
00010032                            ; ===========================================================================
00010032                            ; ---------------------------------------------------------------------------
00010032                            ; Object 50 - Yadrin enemy (SYZ)
00010032                            ; ---------------------------------------------------------------------------
00010032                            
00010032                            Obj50:					; XREF: Obj_Index
00010032 7000                       		moveq	#0,d0
00010034 1028 0024                  		move.b	$24(a0),d0
00010038 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001003C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010040                            ; ===========================================================================
00010040 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010042 0000                       		dc.w Obj50_Action-Obj50_Index
00010044                            ; ===========================================================================
00010044                            
00010044                            Obj50_Main:				; XREF: Obj50_Index
00010044 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001004C 317C 247B 0002             		move.w	#$247B,2(a0)
00010052 117C 0004 0001             		move.b	#4,1(a0)
00010058 117C 0004 0018             		move.b	#4,$18(a0)
0001005E 117C 0014 0019             		move.b	#$14,$19(a0)
00010064 117C 0011 0016             		move.b	#$11,$16(a0)
0001006A 117C 0008 0017             		move.b	#8,$17(a0)
00010070 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010076 6100 DD34                  		bsr.w	ObjectFall
0001007A 6100 0000                  		bsr.w	ObjHitFloor
0001007E 4A41                       		tst.w	d1
00010080 6A00                       		bpl.s	locret_F89E
00010082 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010086 317C 0000 0012             		move.w	#0,$12(a0)
0001008C 5428 0024                  		addq.b	#2,$24(a0)
00010090 0868 0000 0022             		bchg	#0,$22(a0)
00010096                            
00010096                            locret_F89E:
00010096 4E75                       		rts	
00010098                            ; ===========================================================================
00010098                            
00010098                            Obj50_Action:				; XREF: Obj50_Index
00010098 7000                       		moveq	#0,d0
0001009A 1028 0025                  		move.b	$25(a0),d0
0001009E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000100A2 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000100A6 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000100AC 6100 AE10                  		bsr.w	AnimateSprite
000100B0 6000 FDF4                  		bra.w	MarkObjGone
000100B4                            ; ===========================================================================
000100B4 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000100B6 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000100B8                            ; ===========================================================================
000100B8                            
000100B8                            Obj50_Move:				; XREF: Obj50_Index2
000100B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100BC 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000100BE 5428 0025                  		addq.b	#2,$25(a0)
000100C2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000100C8 117C 0001 001C             		move.b	#1,$1C(a0)
000100CE 0868 0000 0022             		bchg	#0,$22(a0)
000100D4 6600                       		bne.s	locret_F8E2
000100D6 4468 0010                  		neg.w	$10(a0)		; change direction
000100DA                            
000100DA                            locret_F8E2:
000100DA 4E75                       		rts	
000100DC                            ; ===========================================================================
000100DC                            
000100DC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000100DC 6100 DCFA                  		bsr.w	SpeedToPos
000100E0 6100 0000                  		bsr.w	ObjHitFloor
000100E4 0C41 FFF8                  		cmpi.w	#-8,d1
000100E8 6D00                       		blt.s	Obj50_Pause
000100EA 0C41 000C                  		cmpi.w	#$C,d1
000100EE 6C00                       		bge.s	Obj50_Pause
000100F0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000100F4 6100 FF0A                  		bsr.w	Obj50_ChkWall
000100F8 6600                       		bne.s	Obj50_Pause
000100FA 4E75                       		rts	
000100FC                            ; ===========================================================================
000100FC                            
000100FC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000100FC 5528 0025                  		subq.b	#2,$25(a0)
00010100 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010106 317C 0000 0010             		move.w	#0,$10(a0)
0001010C 117C 0000 001C             		move.b	#0,$1C(a0)
00010112 4E75                       		rts	
00010114                            ; ===========================================================================
00010114                            Ani_obj50:
00010114                            	include "_anim\obj50.asm"
00010114                            ; ---------------------------------------------------------------------------
00010114                            ; Animation script - Yadrin enemy
00010114                            ; ---------------------------------------------------------------------------
00010114 0000                       		dc.w byte_F920-Ani_obj50
00010116 0000                       		dc.w byte_F924-Ani_obj50
00010118 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001011C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010126                            		even
00010126                            		even
00010126                            
00010126                            ; ---------------------------------------------------------------------------
00010126                            ; Sprite mappings - Yadrin enemy (SYZ)
00010126                            ; ---------------------------------------------------------------------------
00010126                            Map_obj50:
00010126                            	include "_maps\obj50.asm"
00010126                            Map_ff24:
00010126 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010128 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001012A 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0001012C 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0001012E 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010130 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010132 05                         Map_ff24_C: 	dc.b $5
00010133 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010138 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001013D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010142 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010147 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001014C 05                         Map_ff24_26: 	dc.b $5
0001014D F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010152 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010157 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001015C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010161 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010166 05                         Map_ff24_40: 	dc.b $5
00010167 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001016C 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010171 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010176 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001017B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010180 05                         Map_ff24_5A: 	dc.b $5
00010181 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010186 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001018B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010190 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010195 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001019A 05                         Map_ff24_74: 	dc.b $5
0001019B F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101A0 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101A5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101AA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101AF 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101B4 05                         Map_ff24_8E: 	dc.b $5
000101B5 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101BA 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101BF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101C4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101C9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101CE                            	even
000101CE                            	even
000101CE                            
000101CE                            ; ---------------------------------------------------------------------------
000101CE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000101CE                            ;
000101CE                            ; variables:
000101CE                            ; d1 = width
000101CE                            ; d2 = height /	2 (when	jumping)
000101CE                            ; d3 = height /	2 (when	walking)
000101CE                            ; d4 = x-axis position
000101CE                            ; ---------------------------------------------------------------------------
000101CE                            
000101CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101CE                            
000101CE                            
000101CE                            SolidObject:
000101CE 4A28 0025                  		tst.b	$25(a0)
000101D2 6700 0000                  		beq.w	loc_FAC8
000101D6 3401                       		move.w	d1,d2
000101D8 D442                       		add.w	d2,d2
000101DA 43F8 D000                  		lea	($FFFFD000).w,a1
000101DE 0829 0001 0022             		btst	#1,$22(a1)
000101E4 6600                       		bne.s	loc_F9FE
000101E6 3029 0008                  		move.w	8(a1),d0
000101EA 9068 0008                  		sub.w	8(a0),d0
000101EE D041                       		add.w	d1,d0
000101F0 6B00                       		bmi.s	loc_F9FE
000101F2 B042                       		cmp.w	d2,d0
000101F4 6500                       		bcs.s	loc_FA12
000101F6                            
000101F6                            loc_F9FE:
000101F6 08A9 0003 0022             		bclr	#3,$22(a1)
000101FC 08A8 0003 0022             		bclr	#3,$22(a0)
00010202 4228 0025                  		clr.b	$25(a0)
00010206 7800                       		moveq	#0,d4
00010208 4E75                       		rts	
0001020A                            ; ===========================================================================
0001020A                            
0001020A                            loc_FA12:
0001020A 3404                       		move.w	d4,d2
0001020C                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0001020C 7800                       		moveq	#0,d4
0001020E 4E75                       		rts	
00010210                            ; ===========================================================================
00010210                            
00010210                            SolidObject71:				; XREF: Obj71_Solid
00010210 4A28 0025                  		tst.b	$25(a0)
00010214 6700 0000                  		beq.w	loc_FAD0
00010218 3401                       		move.w	d1,d2
0001021A D442                       		add.w	d2,d2
0001021C 43F8 D000                  		lea	($FFFFD000).w,a1
00010220 0829 0001 0022             		btst	#1,$22(a1)
00010226 6600                       		bne.s	loc_FA44
00010228 3029 0008                  		move.w	8(a1),d0
0001022C 9068 0008                  		sub.w	8(a0),d0
00010230 D041                       		add.w	d1,d0
00010232 6B00                       		bmi.s	loc_FA44
00010234 B042                       		cmp.w	d2,d0
00010236 6500                       		bcs.s	loc_FA58
00010238                            
00010238                            loc_FA44:
00010238 08A9 0003 0022             		bclr	#3,$22(a1)
0001023E 08A8 0003 0022             		bclr	#3,$22(a0)
00010244 4228 0025                  		clr.b	$25(a0)
00010248 7800                       		moveq	#0,d4
0001024A 4E75                       		rts	
0001024C                            ; ===========================================================================
0001024C                            
0001024C                            loc_FA58:
0001024C 3404                       		move.w	d4,d2
0001024E                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001024E 7800                       		moveq	#0,d4
00010250 4E75                       		rts	
00010252                            ; ===========================================================================
00010252                            
00010252                            SolidObject2F:				; XREF: Obj2F_Solid
00010252 43F8 D000                  		lea	($FFFFD000).w,a1
00010256 4A28 0001                  		tst.b	1(a0)
0001025A 6A00 0000                  		bpl.w	loc_FB92
0001025E 3029 0008                  		move.w	8(a1),d0
00010262 9068 0008                  		sub.w	8(a0),d0
00010266 D041                       		add.w	d1,d0
00010268 6B00 0000                  		bmi.w	loc_FB92
0001026C 3601                       		move.w	d1,d3
0001026E D643                       		add.w	d3,d3
00010270 B043                       		cmp.w	d3,d0
00010272 6200 0000                  		bhi.w	loc_FB92
00010276 3A00                       		move.w	d0,d5
00010278 0828 0000 0001             		btst	#0,1(a0)
0001027E 6700                       		beq.s	loc_FA94
00010280 4645                       		not.w	d5
00010282 DA43                       		add.w	d3,d5
00010284                            
00010284                            loc_FA94:
00010284 E24D                       		lsr.w	#1,d5
00010286 7600                       		moveq	#0,d3
00010288 1632 5000                  		move.b	(a2,d5.w),d3
0001028C 9612                       		sub.b	(a2),d3
0001028E 3A28 000C                  		move.w	$C(a0),d5
00010292 9A43                       		sub.w	d3,d5
00010294 1629 0016                  		move.b	$16(a1),d3
00010298 4883                       		ext.w	d3
0001029A D443                       		add.w	d3,d2
0001029C 3629 000C                  		move.w	$C(a1),d3
000102A0 9645                       		sub.w	d5,d3
000102A2 5843                       		addq.w	#4,d3
000102A4 D642                       		add.w	d2,d3
000102A6 6B00 0000                  		bmi.w	loc_FB92
000102AA 3802                       		move.w	d2,d4
000102AC D844                       		add.w	d4,d4
000102AE B644                       		cmp.w	d4,d3
000102B0 6400 0000                  		bcc.w	loc_FB92
000102B4 6000 0000                  		bra.w	loc_FB0E
000102B8                            ; ===========================================================================
000102B8                            
000102B8                            loc_FAC8:
000102B8 4A28 0001                  		tst.b	1(a0)
000102BC 6A00 0000                  		bpl.w	loc_FB92
000102C0                            
000102C0                            loc_FAD0:
000102C0 43F8 D000                  		lea	($FFFFD000).w,a1
000102C4 3029 0008                  		move.w	8(a1),d0
000102C8 9068 0008                  		sub.w	8(a0),d0
000102CC D041                       		add.w	d1,d0
000102CE 6B00 0000                  		bmi.w	loc_FB92
000102D2 3601                       		move.w	d1,d3
000102D4 D643                       		add.w	d3,d3
000102D6 B043                       		cmp.w	d3,d0
000102D8 6200 0000                  		bhi.w	loc_FB92
000102DC 1629 0016                  		move.b	$16(a1),d3
000102E0 4883                       		ext.w	d3
000102E2 D443                       		add.w	d3,d2
000102E4 3629 000C                  		move.w	$C(a1),d3
000102E8 9668 000C                  		sub.w	$C(a0),d3
000102EC 5843                       		addq.w	#4,d3
000102EE D642                       		add.w	d2,d3
000102F0 6B00 0000                  		bmi.w	loc_FB92
000102F4 3802                       		move.w	d2,d4
000102F6 D844                       		add.w	d4,d4
000102F8 B644                       		cmp.w	d4,d3
000102FA 6400 0000                  		bcc.w	loc_FB92
000102FE                            
000102FE                            loc_FB0E:
000102FE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010302 6B00 0000                  		bmi.w	loc_FB92
00010306 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001030C 6400 0000                  		bcc.w	loc_FB92
00010310 4A78 FE08                  		tst.w	($FFFFFE08).w
00010314 6600 0000                  		bne.w	loc_FBAC
00010318 3A00                       		move.w	d0,d5
0001031A B240                       		cmp.w	d0,d1
0001031C 6400                       		bcc.s	loc_FB36
0001031E D241                       		add.w	d1,d1
00010320 9041                       		sub.w	d1,d0
00010322 3A00                       		move.w	d0,d5
00010324 4445                       		neg.w	d5
00010326                            
00010326                            loc_FB36:
00010326 3203                       		move.w	d3,d1
00010328 B443                       		cmp.w	d3,d2
0001032A 6400                       		bcc.s	loc_FB44
0001032C 5943                       		subq.w	#4,d3
0001032E 9644                       		sub.w	d4,d3
00010330 3203                       		move.w	d3,d1
00010332 4441                       		neg.w	d1
00010334                            
00010334                            loc_FB44:
00010334 BA41                       		cmp.w	d1,d5
00010336 6200 0000                  		bhi.w	loc_FBB0
0001033A 0C41 0004                  		cmpi.w	#4,d1
0001033E 6300                       		bls.s	loc_FB8C
00010340 4A40                       		tst.w	d0
00010342 6700                       		beq.s	loc_FB70
00010344 6B00                       		bmi.s	loc_FB5E
00010346 4A69 0010                  		tst.w	$10(a1)
0001034A 6B00                       		bmi.s	loc_FB70
0001034C 6000                       		bra.s	loc_FB64
0001034E                            ; ===========================================================================
0001034E                            
0001034E                            loc_FB5E:
0001034E 4A69 0010                  		tst.w	$10(a1)
00010352 6A00                       		bpl.s	loc_FB70
00010354                            
00010354                            loc_FB64:
00010354 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001035A 337C 0000 0010             		move.w	#0,$10(a1)
00010360                            
00010360                            loc_FB70:
00010360 9169 0008                  		sub.w	d0,8(a1)
00010364 0829 0001 0022             		btst	#1,$22(a1)
0001036A 6600                       		bne.s	loc_FB8C
0001036C 08E9 0005 0022             		bset	#5,$22(a1)
00010372 08E8 0005 0022             		bset	#5,$22(a0)
00010378 7801                       		moveq	#1,d4
0001037A 4E75                       		rts	
0001037C                            ; ===========================================================================
0001037C                            
0001037C                            loc_FB8C:
0001037C 6100                       		bsr.s	loc_FBA0
0001037E 7801                       		moveq	#1,d4
00010380 4E75                       		rts	
00010382                            ; ===========================================================================
00010382                            
00010382                            loc_FB92:
00010382 0828 0005 0022             		btst	#5,$22(a0)
00010388 6700                       		beq.s	loc_FBAC
0001038A 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010390                            
00010390                            loc_FBA0:
00010390 08A8 0005 0022             		bclr	#5,$22(a0)
00010396 08A9 0005 0022             		bclr	#5,$22(a1)
0001039C                            
0001039C                            loc_FBAC:
0001039C 7800                       		moveq	#0,d4
0001039E 4E75                       		rts	
000103A0                            ; ===========================================================================
000103A0                            
000103A0                            loc_FBB0:
000103A0 4A43                       		tst.w	d3
000103A2 6B00                       		bmi.s	loc_FBBC
000103A4 0C43 0010                  		cmpi.w	#$10,d3
000103A8 6500                       		bcs.s	loc_FBEE
000103AA 60D6                       		bra.s	loc_FB92
000103AC                            ; ===========================================================================
000103AC                            
000103AC                            loc_FBBC:
000103AC 4A69 0012                  		tst.w	$12(a1)
000103B0 6700                       		beq.s	loc_FBD6
000103B2 6A00                       		bpl.s	loc_FBD2
000103B4 4A43                       		tst.w	d3
000103B6 6A00                       		bpl.s	loc_FBD2
000103B8 9769 000C                  		sub.w	d3,$C(a1)
000103BC 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000103C2                            
000103C2                            loc_FBD2:
000103C2 78FF                       		moveq	#-1,d4
000103C4 4E75                       		rts	
000103C6                            ; ===========================================================================
000103C6                            
000103C6                            loc_FBD6:
000103C6 0829 0001 0022             		btst	#1,$22(a1)
000103CC 66F4                       		bne.s	loc_FBD2
000103CE 2F08                       		move.l	a0,-(sp)
000103D0 2049                       		movea.l	a1,a0
000103D2 4EB9 0000 0000             		jsr	KillSonic
000103D8 205F                       		movea.l	(sp)+,a0
000103DA 78FF                       		moveq	#-1,d4
000103DC 4E75                       		rts	
000103DE                            ; ===========================================================================
000103DE                            
000103DE                            loc_FBEE:
000103DE 5943                       		subq.w	#4,d3
000103E0 7200                       		moveq	#0,d1
000103E2 1228 0019                  		move.b	$19(a0),d1
000103E6 3401                       		move.w	d1,d2
000103E8 D442                       		add.w	d2,d2
000103EA D269 0008                  		add.w	8(a1),d1
000103EE 9268 0008                  		sub.w	8(a0),d1
000103F2 6B00                       		bmi.s	loc_FC28
000103F4 B242                       		cmp.w	d2,d1
000103F6 6400                       		bcc.s	loc_FC28
000103F8 4A69 0012                  		tst.w	$12(a1)
000103FC 6B00                       		bmi.s	loc_FC28
000103FE 9769 000C                  		sub.w	d3,$C(a1)
00010402 5369 000C                  		subq.w	#1,$C(a1)
00010406 6100                       		bsr.s	sub_FC2C
00010408 117C 0002 0025             		move.b	#2,$25(a0)
0001040E 08E8 0003 0022             		bset	#3,$22(a0)
00010414 78FF                       		moveq	#-1,d4
00010416 4E75                       		rts	
00010418                            ; ===========================================================================
00010418                            
00010418                            loc_FC28:
00010418 7800                       		moveq	#0,d4
0001041A 4E75                       		rts	
0001041C                            ; End of function SolidObject
0001041C                            
0001041C                            
0001041C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001041C                            
0001041C                            
0001041C                            sub_FC2C:				; XREF: SolidObject
0001041C 0829 0003 0022             		btst	#3,$22(a1)
00010422 6700                       		beq.s	loc_FC4E
00010424 7000                       		moveq	#0,d0
00010426 1029 003D                  		move.b	$3D(a1),d0
0001042A ED48                       		lsl.w	#6,d0
0001042C 0680 00FF D000             		addi.l	#$FFD000,d0
00010432 2440                       		movea.l	d0,a2
00010434 08AA 0003 0022             		bclr	#3,$22(a2)
0001043A 422A 0025                  		clr.b	$25(a2)
0001043E                            
0001043E                            loc_FC4E:
0001043E 3008                       		move.w	a0,d0
00010440 0440 D000                  		subi.w	#-$3000,d0
00010444 EC48                       		lsr.w	#6,d0
00010446 0240 007F                  		andi.w	#$7F,d0
0001044A 1340 003D                  		move.b	d0,$3D(a1)
0001044E 137C 0000 0026             		move.b	#0,$26(a1)
00010454 337C 0000 0012             		move.w	#0,$12(a1)
0001045A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010460 0829 0001 0022             		btst	#1,$22(a1)
00010466 6700                       		beq.s	loc_FC84
00010468 2F08                       		move.l	a0,-(sp)
0001046A 2049                       		movea.l	a1,a0
0001046C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010472 205F                       		movea.l	(sp)+,a0
00010474                            
00010474                            loc_FC84:
00010474 08E9 0003 0022             		bset	#3,$22(a1)
0001047A 08E8 0003 0022             		bset	#3,$22(a0)
00010480 4E75                       		rts	
00010482                            ; End of function sub_FC2C
00010482                            
00010482                            ; ===========================================================================
00010482                            ; ---------------------------------------------------------------------------
00010482                            ; Object 51 - smashable	green block (MZ)
00010482                            ; ---------------------------------------------------------------------------
00010482                            
00010482                            Obj51:					; XREF: Obj_Index
00010482 7000                       		moveq	#0,d0
00010484 1028 0024                  		move.b	$24(a0),d0
00010488 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001048C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010490 6000 FA14                  		bra.w	MarkObjGone
00010494                            ; ===========================================================================
00010494 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010496 0000                       		dc.w Obj51_Solid-Obj51_Index
00010498 0000                       		dc.w Obj51_Display-Obj51_Index
0001049A                            ; ===========================================================================
0001049A                            
0001049A                            Obj51_Main:				; XREF: Obj51_Index
0001049A 5428 0024                  		addq.b	#2,$24(a0)
0001049E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000104A6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000104AC 117C 0004 0001             		move.b	#4,1(a0)
000104B2 117C 0010 0019             		move.b	#$10,$19(a0)
000104B8 117C 0004 0018             		move.b	#4,$18(a0)
000104BE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000104C4                            
000104C4                            Obj51_Solid:				; XREF: Obj51_Index
000104C4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000104CA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000104D0 323C 001B                  		move.w	#$1B,d1
000104D4 343C 0010                  		move.w	#$10,d2
000104D8 363C 0011                  		move.w	#$11,d3
000104DC 3828 0008                  		move.w	8(a0),d4
000104E0 6100 FCEC                  		bsr.w	SolidObject
000104E4 0828 0003 0022             		btst	#3,$22(a0)
000104EA 6600                       		bne.s	Obj51_Smash
000104EC                            
000104EC                            locret_FCFC:
000104EC 4E75                       		rts	
000104EE                            ; ===========================================================================
000104EE                            
000104EE                            Obj51_Smash:				; XREF: Obj51_Solid
000104EE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000104F4 66F6                       		bne.s	locret_FCFC	; if not, branch
000104F6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000104FC 08E9 0002 0022             		bset	#2,$22(a1)
00010502 137C 000E 0016             		move.b	#$E,$16(a1)
00010508 137C 0007 0017             		move.b	#7,$17(a1)
0001050E 137C 0002 001C             		move.b	#2,$1C(a1)
00010514 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001051A 08E9 0001 0022             		bset	#1,$22(a1)
00010520 08A9 0003 0022             		bclr	#3,$22(a1)
00010526 137C 0002 0024             		move.b	#2,$24(a1)
0001052C 08A8 0003 0022             		bclr	#3,$22(a0)
00010532 4228 0025                  		clr.b	$25(a0)
00010536 117C 0001 001A             		move.b	#1,$1A(a0)
0001053C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010542 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010544 343C 0038                  		move.w	#$38,d2
00010548 6100 D4A2                  		bsr.w	SmashObject
0001054C 6100 DD36                  		bsr.w	SingleObjLoad
00010550 6600                       		bne.s	Obj51_Display
00010552 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010556 3368 0008 0008             		move.w	8(a0),8(a1)
0001055C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010562 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010566 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001056A 0C42 0006                  		cmpi.w	#6,d2
0001056E 6500                       		bcs.s	Obj51_Bonus
00010570 7406                       		moveq	#6,d2
00010572                            
00010572                            Obj51_Bonus:
00010572 7000                       		moveq	#0,d0
00010574 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010578 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001057E 6500                       		bcs.s	loc_FD98	; if not, branch
00010580 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010584 740A                       		moveq	#10,d2
00010586                            
00010586                            loc_FD98:
00010586 4EB9 0000 0000             		jsr	AddPoints
0001058C E24A                       		lsr.w	#1,d2
0001058E 1342 001A                  		move.b	d2,$1A(a1)
00010592                            
00010592                            Obj51_Display:				; XREF: Obj51_Index
00010592 6100 D844                  		bsr.w	SpeedToPos
00010596 0668 0038 0012             		addi.w	#$38,$12(a0)
0001059C 6100 D860                  		bsr.w	DisplaySprite
000105A0 4A28 0001                  		tst.b	1(a0)
000105A4 6A00 D894                  		bpl.w	DeleteObject
000105A8 4E75                       		rts	
000105AA                            ; ===========================================================================
000105AA FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000105AE FF00 FF00                  		dc.w $FF00, $FF00
000105B2 0200 FE00                  		dc.w $200, $FE00
000105B6 0100 FF00                  		dc.w $100, $FF00
000105BA                            
000105BA 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000105C2                            ; ---------------------------------------------------------------------------
000105C2                            ; Sprite mappings - smashable green block (MZ)
000105C2                            ; ---------------------------------------------------------------------------
000105C2                            Map_obj51:
000105C2                            	include "_maps\obj51.asm"
000105C2                            ; ---------------------------------------------------------------------------
000105C2                            ; Sprite mappings - smashable green block (MZ)
000105C2                            ; ---------------------------------------------------------------------------
000105C2 0000                       		dc.w byte_FDD8-Map_obj51
000105C4 0000                       		dc.w byte_FDE3-Map_obj51
000105C6 02                         byte_FDD8:	dc.b 2
000105C7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000105CC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000105D1 04                         byte_FDE3:	dc.b 4
000105D2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000105D7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000105DC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000105E1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000105E6                            		even
000105E6                            		even
000105E6                            
000105E6                            ; ===========================================================================
000105E6                            ; ---------------------------------------------------------------------------
000105E6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000105E6                            ; ---------------------------------------------------------------------------
000105E6                            
000105E6                            Obj52:					; XREF: Obj_Index
000105E6 7000                       		moveq	#0,d0
000105E8 1028 0024                  		move.b	$24(a0),d0
000105EC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000105F0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000105F4                            ; ===========================================================================
000105F4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000105F6 0000                       		dc.w Obj52_Platform-Obj52_Index
000105F8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000105FA                            
000105FA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000105FC 2001                       		dc.b $20, 1
000105FE 2002                       		dc.b $20, 2
00010600 4003                       		dc.b $40, 3
00010602 3004                       		dc.b $30, 4
00010604                            ; ===========================================================================
00010604                            
00010604                            Obj52_Main:				; XREF: Obj52_Index
00010604 5428 0024                  		addq.b	#2,$24(a0)
00010608 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010610 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010616 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001061C 6600                       		bne.s	loc_FE44
0001061E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010626 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001062C 117C 0007 0016             		move.b	#7,$16(a0)
00010632                            
00010632                            loc_FE44:
00010632 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010638 6600                       		bne.s	loc_FE60
0001063A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010640 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010646 6700                       		beq.s	loc_FE60	; if yes, branch
00010648 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001064E                            
0001064E                            loc_FE60:
0001064E 117C 0004 0001             		move.b	#4,1(a0)
00010654 7000                       		moveq	#0,d0
00010656 1028 0028                  		move.b	$28(a0),d0
0001065A E648                       		lsr.w	#3,d0
0001065C 0240 001E                  		andi.w	#$1E,d0
00010660 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010664 115A 0019                  		move.b	(a2)+,$19(a0)
00010668 115A 001A                  		move.b	(a2)+,$1A(a0)
0001066C 117C 0004 0018             		move.b	#4,$18(a0)
00010672 3168 0008 0030             		move.w	8(a0),$30(a0)
00010678 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001067E 0228 000F 0028             		andi.b	#$F,$28(a0)
00010684                            
00010684                            Obj52_Platform:				; XREF: Obj52_Index
00010684 6100 0000                  		bsr.w	Obj52_Move
00010688 7200                       		moveq	#0,d1
0001068A 1228 0019                  		move.b	$19(a0),d1
0001068E 4EB9 0000 7A88             		jsr	(PlatformObject).l
00010694 6000                       		bra.s	Obj52_ChkDel
00010696                            ; ===========================================================================
00010696                            
00010696                            Obj52_StandOn:				; XREF: Obj52_Index
00010696 7200                       		moveq	#0,d1
00010698 1228 0019                  		move.b	$19(a0),d1
0001069C 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000106A2 3F28 0008                  		move.w	8(a0),-(sp)
000106A6 6100 0000                  		bsr.w	Obj52_Move
000106AA 341F                       		move.w	(sp)+,d2
000106AC 4EB9 0000 8166             		jsr	(MvSonicOnPtfm2).l
000106B2                            
000106B2                            Obj52_ChkDel:				; XREF: Obj52_Platform
000106B2 3028 0030                  		move.w	$30(a0),d0
000106B6 0240 FF80                  		andi.w	#$FF80,d0
000106BA 3238 F700                  		move.w	($FFFFF700).w,d1
000106BE 0441 0080                  		subi.w	#$80,d1
000106C2 0241 FF80                  		andi.w	#$FF80,d1
000106C6 9041                       		sub.w	d1,d0
000106C8 0C40 0280                  		cmpi.w	#$280,d0
000106CC 6200 D76C                  		bhi.w	DeleteObject
000106D0 6000 D72C                  		bra.w	DisplaySprite
000106D4                            ; ===========================================================================
000106D4                            
000106D4                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000106D4 7000                       		moveq	#0,d0
000106D6 1028 0028                  		move.b	$28(a0),d0
000106DA 0240 000F                  		andi.w	#$F,d0
000106DE D040                       		add.w	d0,d0
000106E0 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000106E4 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000106E8                            ; ===========================================================================
000106E8 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000106EC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000106F0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000106F4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000106F8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000106FC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000106FE                            ; ===========================================================================
000106FE                            
000106FE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000106FE 4E75                       		rts	
00010700                            ; ===========================================================================
00010700                            
00010700                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010700 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010704 323C 0060                  		move.w	#$60,d1
00010708 0828 0000 0022             		btst	#0,$22(a0)
0001070E 6700                       		beq.s	loc_FF26
00010710 4440                       		neg.w	d0
00010712 D041                       		add.w	d1,d0
00010714                            
00010714                            loc_FF26:
00010714 3228 0030                  		move.w	$30(a0),d1
00010718 9240                       		sub.w	d0,d1
0001071A 3141 0008                  		move.w	d1,8(a0)
0001071E 4E75                       		rts	
00010720                            ; ===========================================================================
00010720                            
00010720                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010720 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010726 6600                       		bne.s	Obj52_02_Wait
00010728 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001072C                            
0001072C                            Obj52_02_Wait:
0001072C 4E75                       		rts	
0001072E                            ; ===========================================================================
0001072E                            
0001072E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001072E 7600                       		moveq	#0,d3
00010730 1628 0019                  		move.b	$19(a0),d3
00010734 6100 0000                  		bsr.w	ObjHitWallRight
00010738 4A41                       		tst.w	d1		; has the platform hit a wall?
0001073A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001073C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010740 3168 0008 0030             		move.w	8(a0),$30(a0)
00010746 4E75                       		rts	
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj52_03_End:
00010748 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001074C 4E75                       		rts	
0001074E                            ; ===========================================================================
0001074E                            
0001074E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001074E 7600                       		moveq	#0,d3
00010750 1628 0019                  		move.b	$19(a0),d3
00010754 6100 0000                  		bsr.w	ObjHitWallRight
00010758 4A41                       		tst.w	d1		; has the platform hit a wall?
0001075A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001075C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010760 3168 0008 0030             		move.w	8(a0),$30(a0)
00010766 4E75                       		rts	
00010768                            ; ===========================================================================
00010768                            
00010768                            Obj52_05_End:
00010768 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001076C 4E75                       		rts	
0001076E                            ; ===========================================================================
0001076E                            
0001076E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001076E 6100 D668                  		bsr.w	SpeedToPos
00010772 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010778 6100 0000                  		bsr.w	ObjHitFloor
0001077C 4A41                       		tst.w	d1		; has platform hit the floor?
0001077E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010782 D368 000C                  		add.w	d1,$C(a0)
00010786 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001078A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001078E                            
0001078E                            locret_FFA0:
0001078E 4E75                       		rts	
00010790                            ; ===========================================================================
00010790                            
00010790                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010790 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010794 6700                       		beq.s	Obj52_07_ChkDel
00010796 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001079A                            
0001079A                            Obj52_07_ChkDel:
0001079A 588F                       		addq.l	#4,sp
0001079C 3028 0030                  		move.w	$30(a0),d0
000107A0 0240 FF80                  		andi.w	#$FF80,d0
000107A4 3238 F700                  		move.w	($FFFFF700).w,d1
000107A8 0441 0080                  		subi.w	#$80,d1
000107AC 0241 FF80                  		andi.w	#$FF80,d1
000107B0 9041                       		sub.w	d1,d0
000107B2 0C40 0280                  		cmpi.w	#$280,d0
000107B6 6200 D682                  		bhi.w	DeleteObject
000107BA 4E75                       		rts	
000107BC                            ; ===========================================================================
000107BC                            
000107BC                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000107BC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000107C0 323C 0080                  		move.w	#$80,d1
000107C4 0828 0000 0022             		btst	#0,$22(a0)
000107CA 6700                       		beq.s	loc_FFE2
000107CC 4440                       		neg.w	d0
000107CE D041                       		add.w	d1,d0
000107D0                            
000107D0                            loc_FFE2:
000107D0 3228 0032                  		move.w	$32(a0),d1
000107D4 9240                       		sub.w	d0,d1
000107D6 3141 000C                  		move.w	d1,$C(a0)
000107DA 4E75                       		rts	
000107DC                            ; ===========================================================================
000107DC                            
000107DC                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000107DC 7600                       		moveq	#0,d3
000107DE 1628 0019                  		move.b	$19(a0),d3
000107E2 D643                       		add.w	d3,d3
000107E4 7208                       		moveq	#8,d1
000107E6 0828 0000 0022             		btst	#0,$22(a0)
000107EC 6700                       		beq.s	loc_10004
000107EE 4441                       		neg.w	d1
000107F0 4443                       		neg.w	d3
000107F2                            
000107F2                            loc_10004:
000107F2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000107F6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000107F8 3028 0008                  		move.w	8(a0),d0
000107FC 9068 0030                  		sub.w	$30(a0),d0
00010800 B043                       		cmp.w	d3,d0
00010802 6700                       		beq.s	Obj52_0A_Wait
00010804 D368 0008                  		add.w	d1,8(a0)	; move platform
00010808 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001080E 4E75                       		rts	
00010810                            ; ===========================================================================
00010810                            
00010810                            Obj52_0A_Wait:
00010810 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010814 6600                       		bne.s	locret_1002E	; if time remains, branch
00010816 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001081C                            
0001081C                            locret_1002E:
0001081C 4E75                       		rts	
0001081E                            ; ===========================================================================
0001081E                            
0001081E                            Obj52_0A_Back:
0001081E 3028 0008                  		move.w	8(a0),d0
00010822 9068 0030                  		sub.w	$30(a0),d0
00010826 6700                       		beq.s	Obj52_0A_Reset
00010828 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001082C 4E75                       		rts	
0001082E                            ; ===========================================================================
0001082E                            
0001082E                            Obj52_0A_Reset:
0001082E 4268 0036                  		clr.w	$36(a0)
00010832 5328 0028                  		subq.b	#1,$28(a0)
00010836 4E75                       		rts	
00010838                            ; ===========================================================================
00010838                            ; ---------------------------------------------------------------------------
00010838                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010838                            ; ---------------------------------------------------------------------------
00010838                            Map_obj52:
00010838                            	include "_maps\obj52mz.asm"
00010838                            ; ---------------------------------------------------------------------------
00010838                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010838                            ; ---------------------------------------------------------------------------
00010838 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001083C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010840 0000                       		dc.w byte_1008F-Map_obj52
00010842 01                         byte_10054:	dc.b 1
00010843 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010848 02                         byte_1005A:	dc.b 2
00010849 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001084E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010853 04                         byte_10065:	dc.b 4
00010854 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010859 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001085E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010863 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010868 04                         byte_1007A:	dc.b 4
00010869 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001086E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010873 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010878 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001087D 03                         byte_1008F:	dc.b 3
0001087E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010883 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010888 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001088E 00                         		even
0001088E 00                         		even
0001088E                            
0001088E                            ; ---------------------------------------------------------------------------
0001088E                            ; Sprite mappings - moving block (LZ)
0001088E                            ; ---------------------------------------------------------------------------
0001088E                            Map_obj52a:
0001088E                            	include "_maps\obj52lz.asm"
0001088E                            ; ---------------------------------------------------------------------------
0001088E                            ; Sprite mappings - moving block (LZ)
0001088E                            ; ---------------------------------------------------------------------------
0001088E 0000                       		dc.w byte_100A2-Map_obj52a
00010890 01                         byte_100A2:	dc.b 1
00010891 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010896                            		even
00010896                            		even
00010896                            
00010896                            ; ===========================================================================
00010896                            ; ---------------------------------------------------------------------------
00010896                            ; Object 55 - Basaran enemy (MZ)
00010896                            ; ---------------------------------------------------------------------------
00010896                            
00010896                            Obj55:					; XREF: Obj_Index
00010896 7000                       		moveq	#0,d0
00010898 1028 0024                  		move.b	$24(a0),d0
0001089C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000108A0 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000108A4                            ; ===========================================================================
000108A4 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000108A6 0000                       		dc.w Obj55_Action-Obj55_Index
000108A8                            ; ===========================================================================
000108A8                            
000108A8                            Obj55_Main:				; XREF: Obj55_Index
000108A8 5428 0024                  		addq.b	#2,$24(a0)
000108AC 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000108B4 317C 84B8 0002             		move.w	#$84B8,2(a0)
000108BA 117C 0004 0001             		move.b	#4,1(a0)
000108C0 117C 000C 0016             		move.b	#$C,$16(a0)
000108C6 117C 0002 0018             		move.b	#2,$18(a0)
000108CC 117C 000B 0020             		move.b	#$B,$20(a0)
000108D2 117C 0010 0019             		move.b	#$10,$19(a0)
000108D8                            
000108D8                            Obj55_Action:				; XREF: Obj55_Index
000108D8 7000                       		moveq	#0,d0
000108DA 1028 0025                  		move.b	$25(a0),d0
000108DE 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000108E2 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000108E6 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000108EC 6100 A5D0                  		bsr.w	AnimateSprite
000108F0 6000 F5B4                  		bra.w	MarkObjGone
000108F4                            ; ===========================================================================
000108F4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000108F6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000108F8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000108FA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000108FC                            ; ===========================================================================
000108FC                            
000108FC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000108FC 343C 0080                  		move.w	#$80,d2
00010900 6100 0000                  		bsr.w	Obj55_ChkSonic
00010904 6400                       		bcc.s	Obj55_NoDrop
00010906 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001090A 3140 0036                  		move.w	d0,$36(a0)
0001090E 9068 000C                  		sub.w	$C(a0),d0
00010912 6500                       		bcs.s	Obj55_NoDrop
00010914 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010918 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001091A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001091E 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010920 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010924 D007                       		add.b	d7,d0
00010926 0200 0007                  		andi.b	#7,d0
0001092A 6600                       		bne.s	Obj55_NoDrop
0001092C 117C 0001 001C             		move.b	#1,$1C(a0)
00010932 5428 0025                  		addq.b	#2,$25(a0)
00010936                            
00010936                            Obj55_NoDrop:
00010936 4E75                       		rts	
00010938                            ; ===========================================================================
00010938                            
00010938                            Obj55_DropFly:				; XREF: Obj55_Index2
00010938 6100 D49E                  		bsr.w	SpeedToPos
0001093C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010942 343C 0080                  		move.w	#$80,d2
00010946 6100 0000                  		bsr.w	Obj55_ChkSonic
0001094A 3028 0036                  		move.w	$36(a0),d0
0001094E 9068 000C                  		sub.w	$C(a0),d0
00010952 6500                       		bcs.s	Obj55_ChkDel
00010954 0C40 0010                  		cmpi.w	#$10,d0
00010958 6400                       		bcc.s	locret_10180
0001095A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001095E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010964 117C 0002 001C             		move.b	#2,$1C(a0)
0001096A 5428 0025                  		addq.b	#2,$25(a0)
0001096E                            
0001096E                            locret_10180:
0001096E 4E75                       		rts	
00010970                            ; ===========================================================================
00010970                            
00010970                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010970 4A28 0001                  		tst.b	1(a0)
00010974 6A00 D4C4                  		bpl.w	DeleteObject
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001097A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001097E 0200 000F                  		andi.b	#$F,d0
00010982 6600                       		bne.s	loc_101A0
00010984 303C 00C0                  		move.w	#$C0,d0
00010988 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
0001098E                            
0001098E                            loc_101A0:
0001098E 6100 D448                  		bsr.w	SpeedToPos
00010992 3038 D008                  		move.w	($FFFFD008).w,d0
00010996 9068 0008                  		sub.w	8(a0),d0
0001099A 6400                       		bcc.s	loc_101B0
0001099C 4440                       		neg.w	d0
0001099E                            
0001099E                            loc_101B0:
0001099E 0C40 0080                  		cmpi.w	#$80,d0
000109A2 6500                       		bcs.s	locret_101C6
000109A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109A8 D007                       		add.b	d7,d0
000109AA 0200 0007                  		andi.b	#7,d0
000109AE 6600                       		bne.s	locret_101C6
000109B0 5428 0025                  		addq.b	#2,$25(a0)
000109B4                            
000109B4                            locret_101C6:
000109B4 4E75                       		rts	
000109B6                            ; ===========================================================================
000109B6                            
000109B6                            Obj55_FlyUp:				; XREF: Obj55_Index2
000109B6 6100 D420                  		bsr.w	SpeedToPos
000109BA 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000109C0 6100 0000                  		bsr.w	ObjHitCeiling
000109C4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000109C6 6A00                       		bpl.s	locret_101F4	; if not, branch
000109C8 9368 000C                  		sub.w	d1,$C(a0)
000109CC 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000109D2 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000109D6 4268 0012                  		clr.w	$12(a0)
000109DA 4228 001C                  		clr.b	$1C(a0)
000109DE 4228 0025                  		clr.b	$25(a0)
000109E2                            
000109E2                            locret_101F4:
000109E2 4E75                       		rts	
000109E4                            ; ===========================================================================
000109E4                            
000109E4                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000109E4 323C 0100                  		move.w	#$100,d1
000109E8 08E8 0000 0022             		bset	#0,$22(a0)
000109EE 3038 D008                  		move.w	($FFFFD008).w,d0
000109F2 9068 0008                  		sub.w	8(a0),d0
000109F6 6400                       		bcc.s	loc_10214
000109F8 4440                       		neg.w	d0
000109FA 4441                       		neg.w	d1
000109FC 08A8 0000 0022             		bclr	#0,$22(a0)
00010A02                            
00010A02                            loc_10214:
00010A02 B042                       		cmp.w	d2,d0
00010A04 4E75                       		rts	
00010A06                            ; ===========================================================================
00010A06 6100 D3D0                  		bsr.w	SpeedToPos
00010A0A 6100 D3F2                  		bsr.w	DisplaySprite
00010A0E 4A28 0001                  		tst.b	1(a0)
00010A12 6A00 D426                  		bpl.w	DeleteObject
00010A16 4E75                       		rts	
00010A18                            ; ===========================================================================
00010A18                            Ani_obj55:
00010A18                            	include "_anim\obj55.asm"
00010A18                            ; ---------------------------------------------------------------------------
00010A18                            ; Animation script - Basaran enemy
00010A18                            ; ---------------------------------------------------------------------------
00010A18 0000                       		dc.w byte_10230-Ani_obj55
00010A1A 0000                       		dc.w byte_10234-Ani_obj55
00010A1C 0000                       		dc.w byte_10238-Ani_obj55
00010A1E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010A22 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010A26 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010A2C                            		even
00010A2C                            		even
00010A2C                            
00010A2C                            ; ---------------------------------------------------------------------------
00010A2C                            ; Sprite mappings - Basaran enemy (MZ)
00010A2C                            ; ---------------------------------------------------------------------------
00010A2C                            Map_obj55:
00010A2C                            	include "_maps\obj55.asm"
00010A2C                            ; ---------------------------------------------------------------------------
00010A2C                            ; Sprite mappings - Basaran enemy (MZ)
00010A2C                            ; ---------------------------------------------------------------------------
00010A2C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010A30 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010A34 01                         byte_10246:	dc.b 1
00010A35 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010A3A 03                         byte_1024C:	dc.b 3
00010A3B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010A40 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010A45 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010A4A 04                         byte_1025C:	dc.b 4
00010A4B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010A50 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010A55 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010A5A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010A5F 04                         byte_10271:	dc.b 4
00010A60 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010A65 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010A6A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010A6F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010A74                            		even
00010A74                            		even
00010A74                            
00010A74                            ; ===========================================================================
00010A74                            ; ---------------------------------------------------------------------------
00010A74                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010A74                            ; ---------------------------------------------------------------------------
00010A74                            
00010A74                            Obj56:					; XREF: Obj_Index
00010A74 7000                       		moveq	#0,d0
00010A76 1028 0024                  		move.b	$24(a0),d0
00010A7A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010A7E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010A82                            ; ===========================================================================
00010A82 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010A84 0000                       		dc.w Obj56_Action-Obj56_Index
00010A86                            
00010A86 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010A88 2020                       		dc.b  $20, $20
00010A8A 1020                       		dc.b  $10, $20
00010A8C 201A                       		dc.b  $20, $1A
00010A8E 1027                       		dc.b  $10, $27
00010A90 1010                       		dc.b  $10, $10
00010A92 0820                       		dc.b	8, $20
00010A94 4010                       		dc.b  $40, $10
00010A96                            ; ===========================================================================
00010A96                            
00010A96                            Obj56_Main:				; XREF: Obj56_Index
00010A96 5428 0024                  		addq.b	#2,$24(a0)
00010A9A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010AA2 317C 4000 0002             		move.w	#$4000,2(a0)
00010AA8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AAE 6600                       		bne.s	loc_102C8
00010AB0 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010AB6                            
00010AB6                            loc_102C8:
00010AB6 117C 0004 0001             		move.b	#4,1(a0)
00010ABC 117C 0003 0018             		move.b	#3,$18(a0)
00010AC2 7000                       		moveq	#0,d0
00010AC4 1028 0028                  		move.b	$28(a0),d0
00010AC8 E648                       		lsr.w	#3,d0
00010ACA 0240 000E                  		andi.w	#$E,d0
00010ACE 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010AD2 115A 0019                  		move.b	(a2)+,$19(a0)
00010AD6 1152 0016                  		move.b	(a2),$16(a0)
00010ADA E248                       		lsr.w	#1,d0
00010ADC 1140 001A                  		move.b	d0,$1A(a0)
00010AE0 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AE6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010AEC 7000                       		moveq	#0,d0
00010AEE 1012                       		move.b	(a2),d0
00010AF0 D040                       		add.w	d0,d0
00010AF2 3140 003A                  		move.w	d0,$3A(a0)
00010AF6 7000                       		moveq	#0,d0
00010AF8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AFE 6700                       		beq.s	loc_10332
00010B00 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B04 0240 000F                  		andi.w	#$F,d0
00010B08 5140                       		subq.w	#8,d0
00010B0A 6500                       		bcs.s	loc_10332
00010B0C E548                       		lsl.w	#2,d0
00010B0E 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B12 45F2 0000                  		lea	(a2,d0.w),a2
00010B16 4A52                       		tst.w	(a2)
00010B18 6A00                       		bpl.s	loc_10332
00010B1A 0868 0000 0022             		bchg	#0,$22(a0)
00010B20                            
00010B20                            loc_10332:
00010B20 1028 0028                  		move.b	$28(a0),d0
00010B24 6A00                       		bpl.s	Obj56_Action
00010B26 0200 000F                  		andi.b	#$F,d0
00010B2A 1140 003C                  		move.b	d0,$3C(a0)
00010B2E 117C 0005 0028             		move.b	#5,$28(a0)
00010B34 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010B3A 6600                       		bne.s	Obj56_ChkGone
00010B3C 117C 000C 0028             		move.b	#$C,$28(a0)
00010B42 317C 0080 003A             		move.w	#$80,$3A(a0)
00010B48                            
00010B48                            Obj56_ChkGone:
00010B48 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B4C 7000                       		moveq	#0,d0
00010B4E 1028 0023                  		move.b	$23(a0),d0
00010B52 6700                       		beq.s	Obj56_Action
00010B54 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B5A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010B60 6700                       		beq.s	Obj56_Action
00010B62 5228 0028                  		addq.b	#1,$28(a0)
00010B66 4268 003A                  		clr.w	$3A(a0)
00010B6A                            
00010B6A                            Obj56_Action:				; XREF: Obj56_Index
00010B6A 3F28 0008                  		move.w	8(a0),-(sp)
00010B6E 7000                       		moveq	#0,d0
00010B70 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B74 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010B78 D040                       		add.w	d0,d0
00010B7A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010B7E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010B82 381F                       		move.w	(sp)+,d4
00010B84 4A28 0001                  		tst.b	1(a0)
00010B88 6A00                       		bpl.s	Obj56_ChkDel
00010B8A 7200                       		moveq	#0,d1
00010B8C 1228 0019                  		move.b	$19(a0),d1
00010B90 0641 000B                  		addi.w	#$B,d1
00010B94 7400                       		moveq	#0,d2
00010B96 1428 0016                  		move.b	$16(a0),d2
00010B9A 3602                       		move.w	d2,d3
00010B9C 5243                       		addq.w	#1,d3
00010B9E 6100 F62E                  		bsr.w	SolidObject
00010BA2                            
00010BA2                            Obj56_ChkDel:
00010BA2 3028 0034                  		move.w	$34(a0),d0
00010BA6 0240 FF80                  		andi.w	#$FF80,d0
00010BAA 3238 F700                  		move.w	($FFFFF700).w,d1
00010BAE 0441 0080                  		subi.w	#$80,d1
00010BB2 0241 FF80                  		andi.w	#$FF80,d1
00010BB6 9041                       		sub.w	d1,d0
00010BB8 0C40 0280                  		cmpi.w	#$280,d0
00010BBC 6200 D27C                  		bhi.w	DeleteObject
00010BC0 6000 D23C                  		bra.w	DisplaySprite
00010BC4                            ; ===========================================================================
00010BC4 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010BC8 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010BCC 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010BD0 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010BD4 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010BD8 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010BDC 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010BE0                            ; ===========================================================================
00010BE0                            
00010BE0                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010BE0 4E75                       		rts	
00010BE2                            ; ===========================================================================
00010BE2                            
00010BE2                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010BE2 323C 0040                  		move.w	#$40,d1
00010BE6 7000                       		moveq	#0,d0
00010BE8 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BEC 6000                       		bra.s	Obj56_Move_LR
00010BEE                            ; ===========================================================================
00010BEE                            
00010BEE                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010BEE 323C 0080                  		move.w	#$80,d1
00010BF2 7000                       		moveq	#0,d0
00010BF4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BF8                            
00010BF8                            Obj56_Move_LR:
00010BF8 0828 0000 0022             		btst	#0,$22(a0)
00010BFE 6700                       		beq.s	loc_10416
00010C00 4440                       		neg.w	d0
00010C02 D041                       		add.w	d1,d0
00010C04                            
00010C04                            loc_10416:
00010C04 3228 0034                  		move.w	$34(a0),d1
00010C08 9240                       		sub.w	d0,d1
00010C0A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C0E 4E75                       		rts	
00010C10                            ; ===========================================================================
00010C10                            
00010C10                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C10 323C 0040                  		move.w	#$40,d1
00010C14 7000                       		moveq	#0,d0
00010C16 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C1A 6000                       		bra.s	Obj56_Move_UD
00010C1C                            ; ===========================================================================
00010C1C                            
00010C1C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010C1C 323C 0080                  		move.w	#$80,d1
00010C20 7000                       		moveq	#0,d0
00010C22 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C26                            
00010C26                            Obj56_Move_UD:
00010C26 0828 0000 0022             		btst	#0,$22(a0)
00010C2C 6700                       		beq.s	loc_10444
00010C2E 4440                       		neg.w	d0
00010C30 D041                       		add.w	d1,d0
00010C32                            
00010C32                            loc_10444:
00010C32 3228 0030                  		move.w	$30(a0),d1
00010C36 9240                       		sub.w	d0,d1
00010C38 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010C3C 4E75                       		rts	
00010C3E                            ; ===========================================================================
00010C3E                            
00010C3E                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010C3E 4A28 0038                  		tst.b	$38(a0)
00010C42 6600                       		bne.s	loc_104A4
00010C44 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C4A 6600                       		bne.s	loc_1047A	; if not, branch
00010C4C 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010C52 6600                       		bne.s	loc_1047A
00010C54 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C58 3038 D008                  		move.w	($FFFFD008).w,d0
00010C5C B068 0008                  		cmp.w	8(a0),d0
00010C60 6400                       		bcc.s	loc_1047A
00010C62 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010C68                            
00010C68                            loc_1047A:
00010C68 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C6C 7000                       		moveq	#0,d0
00010C6E 1028 003C                  		move.b	$3C(a0),d0
00010C72 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C78 6700                       		beq.s	loc_104AE
00010C7A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C80 6600                       		bne.s	loc_1049E	; if not, branch
00010C82 0C00 0003                  		cmpi.b	#3,d0
00010C86 6600                       		bne.s	loc_1049E
00010C88 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C8C                            
00010C8C                            loc_1049E:
00010C8C 117C 0001 0038             		move.b	#1,$38(a0)
00010C92                            
00010C92                            loc_104A4:
00010C92 4A68 003A                  		tst.w	$3A(a0)
00010C96 6700                       		beq.s	loc_104C8
00010C98 5568 003A                  		subq.w	#2,$3A(a0)
00010C9C                            
00010C9C                            loc_104AE:
00010C9C 3028 003A                  		move.w	$3A(a0),d0
00010CA0 0828 0000 0022             		btst	#0,$22(a0)
00010CA6 6700                       		beq.s	loc_104BC
00010CA8 4440                       		neg.w	d0
00010CAA                            
00010CAA                            loc_104BC:
00010CAA 3228 0030                  		move.w	$30(a0),d1
00010CAE D240                       		add.w	d0,d1
00010CB0 3141 000C                  		move.w	d1,$C(a0)
00010CB4 4E75                       		rts	
00010CB6                            ; ===========================================================================
00010CB6                            
00010CB6                            loc_104C8:
00010CB6 5228 0028                  		addq.b	#1,$28(a0)
00010CBA 4228 0038                  		clr.b	$38(a0)
00010CBE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CC2 7000                       		moveq	#0,d0
00010CC4 1028 0023                  		move.b	$23(a0),d0
00010CC8 67D2                       		beq.s	loc_104AE
00010CCA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010CD0 60CA                       		bra.s	loc_104AE
00010CD2                            ; ===========================================================================
00010CD2                            
00010CD2                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010CD2 4A28 0038                  		tst.b	$38(a0)
00010CD6 6600                       		bne.s	loc_10500
00010CD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CDC 7000                       		moveq	#0,d0
00010CDE 1028 003C                  		move.b	$3C(a0),d0
00010CE2 4A32 0000                  		tst.b	(a2,d0.w)
00010CE6 6A00                       		bpl.s	loc_10512
00010CE8 117C 0001 0038             		move.b	#1,$38(a0)
00010CEE                            
00010CEE                            loc_10500:
00010CEE 7000                       		moveq	#0,d0
00010CF0 1028 0016                  		move.b	$16(a0),d0
00010CF4 D040                       		add.w	d0,d0
00010CF6 B068 003A                  		cmp.w	$3A(a0),d0
00010CFA 6700                       		beq.s	loc_1052C
00010CFC 5468 003A                  		addq.w	#2,$3A(a0)
00010D00                            
00010D00                            loc_10512:
00010D00 3028 003A                  		move.w	$3A(a0),d0
00010D04 0828 0000 0022             		btst	#0,$22(a0)
00010D0A 6700                       		beq.s	loc_10520
00010D0C 4440                       		neg.w	d0
00010D0E                            
00010D0E                            loc_10520:
00010D0E 3228 0030                  		move.w	$30(a0),d1
00010D12 D240                       		add.w	d0,d1
00010D14 3141 000C                  		move.w	d1,$C(a0)
00010D18 4E75                       		rts	
00010D1A                            ; ===========================================================================
00010D1A                            
00010D1A                            loc_1052C:
00010D1A 5328 0028                  		subq.b	#1,$28(a0)
00010D1E 4228 0038                  		clr.b	$38(a0)
00010D22 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D26 7000                       		moveq	#0,d0
00010D28 1028 0023                  		move.b	$23(a0),d0
00010D2C 67D2                       		beq.s	loc_10512
00010D2E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D34 60CA                       		bra.s	loc_10512
00010D36                            ; ===========================================================================
00010D36                            
00010D36                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010D36 4A28 0038                  		tst.b	$38(a0)
00010D3A 6600                       		bne.s	loc_1055E
00010D3C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010D40 6700                       		beq.s	locret_10578
00010D42 117C 0001 0038             		move.b	#1,$38(a0)
00010D48 4268 003A                  		clr.w	$3A(a0)
00010D4C                            
00010D4C                            loc_1055E:
00010D4C 5268 0008                  		addq.w	#1,8(a0)
00010D50 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D56 5268 003A                  		addq.w	#1,$3A(a0)
00010D5A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010D60 6600                       		bne.s	locret_10578
00010D62 4228 0028                  		clr.b	$28(a0)
00010D66                            
00010D66                            locret_10578:
00010D66 4E75                       		rts	
00010D68                            ; ===========================================================================
00010D68                            
00010D68                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010D68 4A28 0038                  		tst.b	$38(a0)
00010D6C 6600                       		bne.s	loc_10598
00010D6E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D72 7000                       		moveq	#0,d0
00010D74 1028 003C                  		move.b	$3C(a0),d0
00010D78 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D7E 6700                       		beq.s	loc_105A2
00010D80 117C 0001 0038             		move.b	#1,$38(a0)
00010D86                            
00010D86                            loc_10598:
00010D86 4A68 003A                  		tst.w	$3A(a0)
00010D8A 6700                       		beq.s	loc_105C0
00010D8C 5568 003A                  		subq.w	#2,$3A(a0)
00010D90                            
00010D90                            loc_105A2:
00010D90 3028 003A                  		move.w	$3A(a0),d0
00010D94 0828 0000 0022             		btst	#0,$22(a0)
00010D9A 6700                       		beq.s	loc_105B4
00010D9C 4440                       		neg.w	d0
00010D9E 0640 0080                  		addi.w	#$80,d0
00010DA2                            
00010DA2                            loc_105B4:
00010DA2 3228 0034                  		move.w	$34(a0),d1
00010DA6 D240                       		add.w	d0,d1
00010DA8 3141 0008                  		move.w	d1,8(a0)
00010DAC 4E75                       		rts	
00010DAE                            ; ===========================================================================
00010DAE                            
00010DAE                            loc_105C0:
00010DAE 5228 0028                  		addq.b	#1,$28(a0)
00010DB2 4228 0038                  		clr.b	$38(a0)
00010DB6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DBA 7000                       		moveq	#0,d0
00010DBC 1028 0023                  		move.b	$23(a0),d0
00010DC0 67CE                       		beq.s	loc_105A2
00010DC2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010DC8 60C6                       		bra.s	loc_105A2
00010DCA                            ; ===========================================================================
00010DCA                            
00010DCA                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010DCA 4A28 0038                  		tst.b	$38(a0)
00010DCE 6600                       		bne.s	loc_105F8
00010DD0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DD4 7000                       		moveq	#0,d0
00010DD6 1028 003C                  		move.b	$3C(a0),d0
00010DDA 4A32 0000                  		tst.b	(a2,d0.w)
00010DDE 6A00                       		bpl.s	loc_10606
00010DE0 117C 0001 0038             		move.b	#1,$38(a0)
00010DE6                            
00010DE6                            loc_105F8:
00010DE6 303C 0080                  		move.w	#$80,d0
00010DEA B068 003A                  		cmp.w	$3A(a0),d0
00010DEE 6700                       		beq.s	loc_10624
00010DF0 5468 003A                  		addq.w	#2,$3A(a0)
00010DF4                            
00010DF4                            loc_10606:
00010DF4 3028 003A                  		move.w	$3A(a0),d0
00010DF8 0828 0000 0022             		btst	#0,$22(a0)
00010DFE 6700                       		beq.s	loc_10618
00010E00 4440                       		neg.w	d0
00010E02 0640 0080                  		addi.w	#$80,d0
00010E06                            
00010E06                            loc_10618:
00010E06 3228 0034                  		move.w	$34(a0),d1
00010E0A D240                       		add.w	d0,d1
00010E0C 3141 0008                  		move.w	d1,8(a0)
00010E10 4E75                       		rts	
00010E12                            ; ===========================================================================
00010E12                            
00010E12                            loc_10624:
00010E12 5328 0028                  		subq.b	#1,$28(a0)
00010E16 4228 0038                  		clr.b	$38(a0)
00010E1A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E1E 7000                       		moveq	#0,d0
00010E20 1028 0023                  		move.b	$23(a0),d0
00010E24 67CE                       		beq.s	loc_10606
00010E26 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E2C 60C6                       		bra.s	loc_10606
00010E2E                            ; ===========================================================================
00010E2E                            
00010E2E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010E2E 323C 0010                  		move.w	#$10,d1
00010E32 7000                       		moveq	#0,d0
00010E34 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010E38 E248                       		lsr.w	#1,d0
00010E3A 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010E3E 6000                       		bra.s	Obj56_Move_Sqr
00010E40                            ; ===========================================================================
00010E40                            
00010E40                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010E40 323C 0030                  		move.w	#$30,d1
00010E44 7000                       		moveq	#0,d0
00010E46 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010E4A 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010E4E 6000                       		bra.s	Obj56_Move_Sqr
00010E50                            ; ===========================================================================
00010E50                            
00010E50                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010E50 323C 0050                  		move.w	#$50,d1
00010E54 7000                       		moveq	#0,d0
00010E56 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010E5A 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010E5E 6000                       		bra.s	Obj56_Move_Sqr
00010E60                            ; ===========================================================================
00010E60                            
00010E60                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010E60 323C 0070                  		move.w	#$70,d1
00010E64 7000                       		moveq	#0,d0
00010E66 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010E6A 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010E6E                            
00010E6E                            Obj56_Move_Sqr:
00010E6E 4A43                       		tst.w	d3
00010E70 6600                       		bne.s	loc_1068E
00010E72 5228 0022                  		addq.b	#1,$22(a0)
00010E76 0228 0003 0022             		andi.b	#3,$22(a0)
00010E7C                            
00010E7C                            loc_1068E:
00010E7C 1428 0022                  		move.b	$22(a0),d2
00010E80 0202 0003                  		andi.b	#3,d2
00010E84 6600                       		bne.s	loc_106AE
00010E86 9041                       		sub.w	d1,d0
00010E88 D068 0034                  		add.w	$34(a0),d0
00010E8C 3140 0008                  		move.w	d0,8(a0)
00010E90 4441                       		neg.w	d1
00010E92 D268 0030                  		add.w	$30(a0),d1
00010E96 3141 000C                  		move.w	d1,$C(a0)
00010E9A 4E75                       		rts	
00010E9C                            ; ===========================================================================
00010E9C                            
00010E9C                            loc_106AE:
00010E9C 5302                       		subq.b	#1,d2
00010E9E 6600                       		bne.s	loc_106CC
00010EA0 5341                       		subq.w	#1,d1
00010EA2 9041                       		sub.w	d1,d0
00010EA4 4440                       		neg.w	d0
00010EA6 D068 0030                  		add.w	$30(a0),d0
00010EAA 3140 000C                  		move.w	d0,$C(a0)
00010EAE 5241                       		addq.w	#1,d1
00010EB0 D268 0034                  		add.w	$34(a0),d1
00010EB4 3141 0008                  		move.w	d1,8(a0)
00010EB8 4E75                       		rts	
00010EBA                            ; ===========================================================================
00010EBA                            
00010EBA                            loc_106CC:
00010EBA 5302                       		subq.b	#1,d2
00010EBC 6600                       		bne.s	loc_106EA
00010EBE 5341                       		subq.w	#1,d1
00010EC0 9041                       		sub.w	d1,d0
00010EC2 4440                       		neg.w	d0
00010EC4 D068 0034                  		add.w	$34(a0),d0
00010EC8 3140 0008                  		move.w	d0,8(a0)
00010ECC 5241                       		addq.w	#1,d1
00010ECE D268 0030                  		add.w	$30(a0),d1
00010ED2 3141 000C                  		move.w	d1,$C(a0)
00010ED6 4E75                       		rts	
00010ED8                            ; ===========================================================================
00010ED8                            
00010ED8                            loc_106EA:
00010ED8 9041                       		sub.w	d1,d0
00010EDA D068 0030                  		add.w	$30(a0),d0
00010EDE 3140 000C                  		move.w	d0,$C(a0)
00010EE2 4441                       		neg.w	d1
00010EE4 D268 0034                  		add.w	$34(a0),d1
00010EE8 3141 0008                  		move.w	d1,8(a0)
00010EEC 4E75                       		rts	
00010EEE                            ; ===========================================================================
00010EEE                            ; ---------------------------------------------------------------------------
00010EEE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EEE                            ; ---------------------------------------------------------------------------
00010EEE                            Map_obj56:
00010EEE                            	include "_maps\obj56.asm"
00010EEE                            ; ---------------------------------------------------------------------------
00010EEE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EEE                            ; ---------------------------------------------------------------------------
00010EEE 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010EF2 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010EF6 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010EFA 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010EFE 01                         byte_10710:	dc.b 1
00010EFF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F04 04                         byte_10716:	dc.b 4
00010F05 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F0A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F0F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010F14 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010F19 02                         byte_1072B:	dc.b 2
00010F1A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010F1F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010F24 04                         byte_10736:	dc.b 4
00010F25 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010F2A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010F2F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010F34 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010F39 03                         byte_1074B:	dc.b 3
00010F3A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010F3F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010F44 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010F49 01                         byte_1075B:	dc.b 1
00010F4A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010F4F 02                         byte_10761:	dc.b 2
00010F50 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010F55 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010F5A 04                         byte_1076C:	dc.b 4
00010F5B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010F60 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010F65 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010F6A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010F70 00                         		even
00010F70 00                         		even
00010F70                            
00010F70                            ; ===========================================================================
00010F70                            ; ---------------------------------------------------------------------------
00010F70                            ; Object 57 - spiked balls (SYZ, LZ)
00010F70                            ; ---------------------------------------------------------------------------
00010F70                            
00010F70                            Obj57:					; XREF: Obj_Index
00010F70 7000                       		moveq	#0,d0
00010F72 1028 0024                  		move.b	$24(a0),d0
00010F76 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010F7A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010F7E                            ; ===========================================================================
00010F7E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010F80 0000                       		dc.w Obj57_Move-Obj57_Index
00010F82 0000                       		dc.w Obj57_Display-Obj57_Index
00010F84                            ; ===========================================================================
00010F84                            
00010F84                            Obj57_Main:				; XREF: Obj57_Index
00010F84 5428 0024                  		addq.b	#2,$24(a0)
00010F88 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F90 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010F96 117C 0004 0001             		move.b	#4,1(a0)
00010F9C 117C 0004 0018             		move.b	#4,$18(a0)
00010FA2 117C 0008 0019             		move.b	#8,$19(a0)
00010FA8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010FAE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010FB4 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010FBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010FC0 6600                       		bne.s	loc_107E8
00010FC2 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010FC8 317C 0310 0002             		move.w	#$310,2(a0)
00010FCE 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010FD6                            
00010FD6                            loc_107E8:
00010FD6 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FDA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FDE 4881                       		ext.w	d1
00010FE0 E741                       		asl.w	#3,d1		; multiply by 8
00010FE2 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010FE6 1028 0022                  		move.b	$22(a0),d0
00010FEA E418                       		ror.b	#2,d0
00010FEC 0200 00C0                  		andi.b	#-$40,d0
00010FF0 1140 0026                  		move.b	d0,$26(a0)
00010FF4 45E8 0029                  		lea	$29(a0),a2
00010FF8 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FFC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011000 14FC 0000                  		move.b	#0,(a2)+
00011004 3601                       		move.w	d1,d3
00011006 E94B                       		lsl.w	#4,d3
00011008 1143 003C                  		move.b	d3,$3C(a0)
0001100C 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001100E 6500                       		bcs.s	loc_10894
00011010 0828 0003 0028             		btst	#3,$28(a0)
00011016 6700                       		beq.s	Obj57_MakeChain
00011018 5341                       		subq.w	#1,d1
0001101A 6500                       		bcs.s	loc_10894
0001101C                            
0001101C                            Obj57_MakeChain:
0001101C 6100 D266                  		bsr.w	SingleObjLoad
00011020 6600                       		bne.s	loc_10894
00011022 5228 0029                  		addq.b	#1,$29(a0)
00011026 3A09                       		move.w	a1,d5
00011028 0445 D000                  		subi.w	#-$3000,d5
0001102C EC4D                       		lsr.w	#6,d5
0001102E 0245 007F                  		andi.w	#$7F,d5
00011032 14C5                       		move.b	d5,(a2)+
00011034 137C 0004 0024             		move.b	#4,$24(a1)
0001103A 1290                       		move.b	0(a0),0(a1)
0001103C 2368 0004 0004             		move.l	4(a0),4(a1)
00011042 3368 0002 0002             		move.w	2(a0),2(a1)
00011048 1368 0001 0001             		move.b	1(a0),1(a1)
0001104E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011054 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001105A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011060 0403 0010                  		subi.b	#$10,d3
00011064 1343 003C                  		move.b	d3,$3C(a1)
00011068 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001106E 6600                       		bne.s	loc_10890
00011070 4A03                       		tst.b	d3
00011072 6600                       		bne.s	loc_10890
00011074 137C 0002 001A             		move.b	#2,$1A(a1)
0001107A                            
0001107A                            loc_10890:
0001107A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001107E                            
0001107E                            loc_10894:
0001107E 3A08                       		move.w	a0,d5
00011080 0445 D000                  		subi.w	#-$3000,d5
00011084 EC4D                       		lsr.w	#6,d5
00011086 0245 007F                  		andi.w	#$7F,d5
0001108A 14C5                       		move.b	d5,(a2)+
0001108C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011092 6600                       		bne.s	Obj57_Move
00011094 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001109A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000110A0                            
000110A0                            Obj57_Move:				; XREF: Obj57_Index
000110A0 6100 0000                  		bsr.w	Obj57_MoveSub
000110A4 6000 0000                  		bra.w	Obj57_ChkDel
000110A8                            ; ===========================================================================
000110A8                            
000110A8                            Obj57_MoveSub:				; XREF: Obj57_Move
000110A8 3028 003E                  		move.w	$3E(a0),d0
000110AC D168 0026                  		add.w	d0,$26(a0)
000110B0 1028 0026                  		move.b	$26(a0),d0
000110B4 4EB9 0000 2CEC             		jsr	(CalcSine).l
000110BA 3428 0038                  		move.w	$38(a0),d2
000110BE 3628 003A                  		move.w	$3A(a0),d3
000110C2 45E8 0029                  		lea	$29(a0),a2
000110C6 7C00                       		moveq	#0,d6
000110C8 1C1A                       		move.b	(a2)+,d6
000110CA                            
000110CA                            Obj57_MoveLoop:
000110CA 7800                       		moveq	#0,d4
000110CC 181A                       		move.b	(a2)+,d4
000110CE ED4C                       		lsl.w	#6,d4
000110D0 0684 00FF D000             		addi.l	#$FFD000,d4
000110D6 2244                       		movea.l	d4,a1
000110D8 7800                       		moveq	#0,d4
000110DA 1829 003C                  		move.b	$3C(a1),d4
000110DE 2A04                       		move.l	d4,d5
000110E0 C9C0                       		muls.w	d0,d4
000110E2 E084                       		asr.l	#8,d4
000110E4 CBC1                       		muls.w	d1,d5
000110E6 E085                       		asr.l	#8,d5
000110E8 D842                       		add.w	d2,d4
000110EA DA43                       		add.w	d3,d5
000110EC 3344 000C                  		move.w	d4,$C(a1)
000110F0 3345 0008                  		move.w	d5,8(a1)
000110F4 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000110F8 4E75                       		rts	
000110FA                            ; ===========================================================================
000110FA                            
000110FA                            Obj57_ChkDel:				; XREF: Obj57_Move
000110FA 3028 003A                  		move.w	$3A(a0),d0
000110FE 0240 FF80                  		andi.w	#$FF80,d0
00011102 3238 F700                  		move.w	($FFFFF700).w,d1
00011106 0441 0080                  		subi.w	#$80,d1
0001110A 0241 FF80                  		andi.w	#$FF80,d1
0001110E 9041                       		sub.w	d1,d0
00011110 0C40 0280                  		cmpi.w	#$280,d0
00011114 6200 0000                  		bhi.w	Obj57_Delete
00011118 6000 CCE4                  		bra.w	DisplaySprite
0001111C                            ; ===========================================================================
0001111C                            
0001111C                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001111C 7400                       		moveq	#0,d2
0001111E 45E8 0029                  		lea	$29(a0),a2
00011122 141A                       		move.b	(a2)+,d2
00011124                            
00011124                            Obj57_DelLoop:
00011124 7000                       		moveq	#0,d0
00011126 101A                       		move.b	(a2)+,d0
00011128 ED48                       		lsl.w	#6,d0
0001112A 0680 00FF D000             		addi.l	#$FFD000,d0
00011130 2240                       		movea.l	d0,a1
00011132 6100 CD08                  		bsr.w	DeleteObject2
00011136 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001113A                            
0001113A 4E75                       		rts	
0001113C                            ; ===========================================================================
0001113C                            
0001113C                            Obj57_Display:				; XREF: Obj57_Index
0001113C 6000 CCC0                  		bra.w	DisplaySprite
00011140                            ; ===========================================================================
00011140                            ; ---------------------------------------------------------------------------
00011140                            ; Sprite mappings - chain of spiked balls (SYZ)
00011140                            ; ---------------------------------------------------------------------------
00011140                            Map_obj57:
00011140                            	include "_maps\obj57syz.asm"
00011140                            ; ---------------------------------------------------------------------------
00011140                            ; Sprite mappings - chain of spiked balls (SYZ)
00011140                            ; ---------------------------------------------------------------------------
00011140 0000                       		dc.w byte_10958-Map_obj57
00011142 01                         byte_10958:	dc.b 1
00011143 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011148                            		even
00011148                            		even
00011148                            
00011148                            ; ---------------------------------------------------------------------------
00011148                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011148                            ; ---------------------------------------------------------------------------
00011148                            Map_obj57a:
00011148                            	include "_maps\obj57lz.asm"
00011148                            ; ---------------------------------------------------------------------------
00011148                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011148                            ; ---------------------------------------------------------------------------
00011148 0000                       		dc.w byte_10964-Map_obj57a
0001114A 0000                       		dc.w byte_1096A-Map_obj57a
0001114C 0000                       		dc.w byte_10970-Map_obj57a
0001114E 01                         byte_10964:	dc.b 1
0001114F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011154 01                         byte_1096A:	dc.b 1
00011155 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001115A 01                         byte_10970:	dc.b 1
0001115B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011160                            		even
00011160                            		even
00011160                            
00011160                            ; ===========================================================================
00011160                            ; ---------------------------------------------------------------------------
00011160                            ; Object 58 - giant spiked balls (SYZ)
00011160                            ; ---------------------------------------------------------------------------
00011160                            
00011160                            Obj58:					; XREF: Obj_Index
00011160 7000                       		moveq	#0,d0
00011162 1028 0024                  		move.b	$24(a0),d0
00011166 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001116A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001116E                            ; ===========================================================================
0001116E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011170 0000                       		dc.w Obj58_Move-Obj58_Index
00011172                            ; ===========================================================================
00011172                            
00011172                            Obj58_Main:				; XREF: Obj58_Index
00011172 5428 0024                  		addq.b	#2,$24(a0)
00011176 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001117E 317C 0396 0002             		move.w	#$396,2(a0)
00011184 117C 0004 0001             		move.b	#4,1(a0)
0001118A 117C 0004 0018             		move.b	#4,$18(a0)
00011190 117C 0018 0019             		move.b	#$18,$19(a0)
00011196 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001119C 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111A2 117C 0086 0020             		move.b	#$86,$20(a0)
000111A8 1228 0028                  		move.b	$28(a0),d1	; get object type
000111AC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111B0 4881                       		ext.w	d1
000111B2 E741                       		asl.w	#3,d1		; multiply by 8
000111B4 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000111B8 1028 0022                  		move.b	$22(a0),d0
000111BC E418                       		ror.b	#2,d0
000111BE 0200 00C0                  		andi.b	#$C0,d0
000111C2 1140 0026                  		move.b	d0,$26(a0)
000111C6 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000111CC                            
000111CC                            Obj58_Move:				; XREF: Obj58_Index
000111CC 7000                       		moveq	#0,d0
000111CE 1028 0028                  		move.b	$28(a0),d0	; get object type
000111D2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000111D6 D040                       		add.w	d0,d0
000111D8 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000111DC 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000111E0 3028 003A                  		move.w	$3A(a0),d0
000111E4 0240 FF80                  		andi.w	#$FF80,d0
000111E8 3238 F700                  		move.w	($FFFFF700).w,d1
000111EC 0441 0080                  		subi.w	#$80,d1
000111F0 0241 FF80                  		andi.w	#$FF80,d1
000111F4 9041                       		sub.w	d1,d0
000111F6 0C40 0280                  		cmpi.w	#$280,d0
000111FA 6200 CC3E                  		bhi.w	DeleteObject
000111FE 6000 CBFE                  		bra.w	DisplaySprite
00011202                            ; ===========================================================================
00011202 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011204 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011206 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011208 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001120A 4E75                       		rts	
0001120C                            ; ===========================================================================
0001120C                            
0001120C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001120C 323C 0060                  		move.w	#$60,d1
00011210 7000                       		moveq	#0,d0
00011212 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011216 0828 0000 0022             		btst	#0,$22(a0)
0001121C 6700                       		beq.s	loc_10A38
0001121E 4440                       		neg.w	d0
00011220 D041                       		add.w	d1,d0
00011222                            
00011222                            loc_10A38:
00011222 3228 003A                  		move.w	$3A(a0),d1
00011226 9240                       		sub.w	d0,d1
00011228 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001122C 4E75                       		rts	
0001122E                            ; ===========================================================================
0001122E                            
0001122E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001122E 323C 0060                  		move.w	#$60,d1
00011232 7000                       		moveq	#0,d0
00011234 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011238 0828 0000 0022             		btst	#0,$22(a0)
0001123E 6700                       		beq.s	loc_10A5C
00011240 4440                       		neg.w	d0
00011242 0640 0080                  		addi.w	#$80,d0
00011246                            
00011246                            loc_10A5C:
00011246 3228 0038                  		move.w	$38(a0),d1
0001124A 9240                       		sub.w	d0,d1
0001124C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011250 4E75                       		rts	
00011252                            ; ===========================================================================
00011252                            
00011252                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011252 3028 003E                  		move.w	$3E(a0),d0
00011256 D168 0026                  		add.w	d0,$26(a0)
0001125A 1028 0026                  		move.b	$26(a0),d0
0001125E 4EB9 0000 2CEC             		jsr	(CalcSine).l
00011264 3428 0038                  		move.w	$38(a0),d2
00011268 3628 003A                  		move.w	$3A(a0),d3
0001126C 7800                       		moveq	#0,d4
0001126E 1828 003C                  		move.b	$3C(a0),d4
00011272 2A04                       		move.l	d4,d5
00011274 C9C0                       		muls.w	d0,d4
00011276 E084                       		asr.l	#8,d4
00011278 CBC1                       		muls.w	d1,d5
0001127A E085                       		asr.l	#8,d5
0001127C D842                       		add.w	d2,d4
0001127E DA43                       		add.w	d3,d5
00011280 3144 000C                  		move.w	d4,$C(a0)
00011284 3145 0008                  		move.w	d5,8(a0)
00011288 4E75                       		rts	
0001128A                            ; ===========================================================================
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            Map_obj15b:
0001128A                            	include "_maps\obj15sbz.asm"
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001128A                            ; ---------------------------------------------------------------------------
0001128A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001128E 0000                       		dc.w byte_10AC6-Map_obj15b
00011290 05                         byte_10AA6:	dc.b 5
00011291 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011296 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001129B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000112A0 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000112A5 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000112AA 01                         byte_10AC0:	dc.b 1
000112AB F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000112B0 02                         byte_10AC6:	dc.b 2
000112B1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000112B6 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000112BC 00                         		even
000112BC 00                         		even
000112BC                            
000112BC                            ; ===========================================================================
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            
000112BC                            Obj59:					; XREF: Obj_Index
000112BC 7000                       		moveq	#0,d0
000112BE 1028 0024                  		move.b	$24(a0),d0
000112C2 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000112C6 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000112CA 3028 0032                  		move.w	$32(a0),d0
000112CE 0240 FF80                  		andi.w	#$FF80,d0
000112D2 3238 F700                  		move.w	($FFFFF700).w,d1
000112D6 0441 0080                  		subi.w	#$80,d1
000112DA 0241 FF80                  		andi.w	#$FF80,d1
000112DE 9041                       		sub.w	d1,d0
000112E0 0C40 0280                  		cmpi.w	#$280,d0
000112E4 6200 CB54                  		bhi.w	DeleteObject
000112E8 6000 CB14                  		bra.w	DisplaySprite
000112EC                            ; ===========================================================================
000112EC 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000112EE 0000                       		dc.w Obj59_Platform-Obj59_Index
000112F0 0000                       		dc.w Obj59_Action-Obj59_Index
000112F2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000112F4                            
000112F4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000112F6                            
000112F6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000112F8 2001                       		dc.b $20, 1
000112FA 3401                       		dc.b $34, 1
000112FC 1003                       		dc.b $10, 3
000112FE 2003                       		dc.b $20, 3
00011300 3403                       		dc.b $34, 3
00011302 1401                       		dc.b $14, 1
00011304 2401                       		dc.b $24, 1
00011306 2C01                       		dc.b $2C, 1
00011308 1403                       		dc.b $14, 3
0001130A 2403                       		dc.b $24, 3
0001130C 2C03                       		dc.b $2C, 3
0001130E 2005                       		dc.b $20, 5
00011310 2007                       		dc.b $20, 7
00011312 3009                       		dc.b $30, 9
00011314                            ; ===========================================================================
00011314                            
00011314                            Obj59_Main:				; XREF: Obj59_Index
00011314 5428 0024                  		addq.b	#2,$24(a0)
00011318 7000                       		moveq	#0,d0
0001131A 1028 0028                  		move.b	$28(a0),d0
0001131E 6A00                       		bpl.s	Obj59_Main2
00011320 5828 0024                  		addq.b	#4,$24(a0)
00011324 0240 007F                  		andi.w	#$7F,d0
00011328 C0FC 0006                  		mulu.w	#6,d0
0001132C 3140 003C                  		move.w	d0,$3C(a0)
00011330 3140 003E                  		move.w	d0,$3E(a0)
00011334 588F                       		addq.l	#4,sp
00011336 4E75                       		rts	
00011338                            ; ===========================================================================
00011338                            
00011338                            Obj59_Main2:
00011338 E648                       		lsr.w	#3,d0
0001133A 0240 001E                  		andi.w	#$1E,d0
0001133E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011342 115A 0019                  		move.b	(a2)+,$19(a0)
00011346 115A 001A                  		move.b	(a2)+,$1A(a0)
0001134A 7000                       		moveq	#0,d0
0001134C 1028 0028                  		move.b	$28(a0),d0
00011350 D040                       		add.w	d0,d0
00011352 0240 001E                  		andi.w	#$1E,d0
00011356 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001135A 101A                       		move.b	(a2)+,d0
0001135C E548                       		lsl.w	#2,d0
0001135E 3140 003C                  		move.w	d0,$3C(a0)
00011362 115A 0028                  		move.b	(a2)+,$28(a0)
00011366 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001136E 317C 4000 0002             		move.w	#$4000,2(a0)
00011374 117C 0004 0001             		move.b	#4,1(a0)
0001137A 117C 0004 0018             		move.b	#4,$18(a0)
00011380 3168 0008 0032             		move.w	8(a0),$32(a0)
00011386 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001138C                            
0001138C                            Obj59_Platform:				; XREF: Obj59_Index
0001138C 7200                       		moveq	#0,d1
0001138E 1228 0019                  		move.b	$19(a0),d1
00011392 4EB9 0000 7A88             		jsr	(PlatformObject).l
00011398 6000 0000                  		bra.w	Obj59_Types
0001139C                            ; ===========================================================================
0001139C                            
0001139C                            Obj59_Action:				; XREF: Obj59_Index
0001139C 7200                       		moveq	#0,d1
0001139E 1228 0019                  		move.b	$19(a0),d1
000113A2 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000113A8 3F28 0008                  		move.w	8(a0),-(sp)
000113AC 6100 0000                  		bsr.w	Obj59_Types
000113B0 341F                       		move.w	(sp)+,d2
000113B2 4A10                       		tst.b	0(a0)
000113B4 6700                       		beq.s	locret_10BD4
000113B6 4EF9 0000 8166             		jmp	(MvSonicOnPtfm2).l
000113BC                            ; ===========================================================================
000113BC                            
000113BC                            locret_10BD4:
000113BC 4E75                       		rts	
000113BE                            ; ===========================================================================
000113BE                            
000113BE                            Obj59_Types:
000113BE 7000                       		moveq	#0,d0
000113C0 1028 0028                  		move.b	$28(a0),d0
000113C4 0240 000F                  		andi.w	#$F,d0
000113C8 D040                       		add.w	d0,d0
000113CA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000113CE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000113D2                            ; ===========================================================================
000113D2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113D6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113DA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113DE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113E2 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000113E6                            ; ===========================================================================
000113E6                            
000113E6                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000113E6 4E75                       		rts	
000113E8                            ; ===========================================================================
000113E8                            
000113E8                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000113E8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000113EE 6600                       		bne.s	locret_10C0C
000113F0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000113F4                            
000113F4                            locret_10C0C:
000113F4 4E75                       		rts	
000113F6                            ; ===========================================================================
000113F6                            
000113F6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000113F6 6100 0000                  		bsr.w	Obj59_Move
000113FA 3028 0034                  		move.w	$34(a0),d0
000113FE 4440                       		neg.w	d0
00011400 D068 0030                  		add.w	$30(a0),d0
00011404 3140 000C                  		move.w	d0,$C(a0)
00011408 4E75                       		rts	
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001140A 6100 0000                  		bsr.w	Obj59_Move
0001140E 3028 0034                  		move.w	$34(a0),d0
00011412 D068 0030                  		add.w	$30(a0),d0
00011416 3140 000C                  		move.w	d0,$C(a0)
0001141A 4E75                       		rts	
0001141C                            ; ===========================================================================
0001141C                            
0001141C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001141C 6100 0000                  		bsr.w	Obj59_Move
00011420 3028 0034                  		move.w	$34(a0),d0
00011424 E240                       		asr.w	#1,d0
00011426 4440                       		neg.w	d0
00011428 D068 0030                  		add.w	$30(a0),d0
0001142C 3140 000C                  		move.w	d0,$C(a0)
00011430 3028 0034                  		move.w	$34(a0),d0
00011434 D068 0032                  		add.w	$32(a0),d0
00011438 3140 0008                  		move.w	d0,8(a0)
0001143C 4E75                       		rts	
0001143E                            ; ===========================================================================
0001143E                            
0001143E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001143E 6100 0000                  		bsr.w	Obj59_Move
00011442 3028 0034                  		move.w	$34(a0),d0
00011446 E240                       		asr.w	#1,d0
00011448 D068 0030                  		add.w	$30(a0),d0
0001144C 3140 000C                  		move.w	d0,$C(a0)
00011450 3028 0034                  		move.w	$34(a0),d0
00011454 4440                       		neg.w	d0
00011456 D068 0032                  		add.w	$32(a0),d0
0001145A 3140 0008                  		move.w	d0,8(a0)
0001145E 4E75                       		rts	
00011460                            ; ===========================================================================
00011460                            
00011460                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011460 6100 0000                  		bsr.w	Obj59_Move
00011464 3028 0034                  		move.w	$34(a0),d0
00011468 4440                       		neg.w	d0
0001146A D068 0030                  		add.w	$30(a0),d0
0001146E 3140 000C                  		move.w	d0,$C(a0)
00011472 4A28 0028                  		tst.b	$28(a0)
00011476 6700 0000                  		beq.w	loc_10C94
0001147A 4E75                       		rts	
0001147C                            ; ===========================================================================
0001147C                            
0001147C                            loc_10C94:
0001147C 0828 0003 0022             		btst	#3,$22(a0)
00011482 6700                       		beq.s	Obj59_Delete
00011484 08E9 0001 0022             		bset	#1,$22(a1)
0001148A 08A9 0003 0022             		bclr	#3,$22(a1)
00011490 137C 0002 0024             		move.b	#2,$24(a1)
00011496                            
00011496                            Obj59_Delete:
00011496 6000 C9A2                  		bra.w	DeleteObject
0001149A                            
0001149A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001149A                            
0001149A                            
0001149A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001149A 3028 0038                  		move.w	$38(a0),d0
0001149E 4A28 003A                  		tst.b	$3A(a0)
000114A2 6600                       		bne.s	loc_10CC8
000114A4 0C40 0800                  		cmpi.w	#$800,d0
000114A8 6400                       		bcc.s	loc_10CD0
000114AA 0640 0010                  		addi.w	#$10,d0
000114AE 6000                       		bra.s	loc_10CD0
000114B0                            ; ===========================================================================
000114B0                            
000114B0                            loc_10CC8:
000114B0 4A40                       		tst.w	d0
000114B2 6700                       		beq.s	loc_10CD0
000114B4 0440 0010                  		subi.w	#$10,d0
000114B8                            
000114B8                            loc_10CD0:
000114B8 3140 0038                  		move.w	d0,$38(a0)
000114BC 48C0                       		ext.l	d0
000114BE E180                       		asl.l	#8,d0
000114C0 D0A8 0034                  		add.l	$34(a0),d0
000114C4 2140 0034                  		move.l	d0,$34(a0)
000114C8 4840                       		swap	d0
000114CA 3428 003C                  		move.w	$3C(a0),d2
000114CE B042                       		cmp.w	d2,d0
000114D0 6300                       		bls.s	loc_10CF0
000114D2 117C 0001 003A             		move.b	#1,$3A(a0)
000114D8                            
000114D8                            loc_10CF0:
000114D8 D442                       		add.w	d2,d2
000114DA B042                       		cmp.w	d2,d0
000114DC 6600                       		bne.s	locret_10CFA
000114DE 4228 0028                  		clr.b	$28(a0)
000114E2                            
000114E2                            locret_10CFA:
000114E2 4E75                       		rts	
000114E4                            ; End of function Obj59_Move
000114E4                            
000114E4                            ; ===========================================================================
000114E4                            
000114E4                            Obj59_MakeMulti:			; XREF: Obj59_Index
000114E4 5368 003C                  		subq.w	#1,$3C(a0)
000114E8 6600                       		bne.s	Obj59_ChkDel
000114EA 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000114F0 6100 CD92                  		bsr.w	SingleObjLoad
000114F4 6600                       		bne.s	Obj59_ChkDel
000114F6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000114FA 3368 0008 0008             		move.w	8(a0),8(a1)
00011500 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011506 137C 000E 0028             		move.b	#$E,$28(a1)
0001150C                            
0001150C                            Obj59_ChkDel:
0001150C 588F                       		addq.l	#4,sp
0001150E 3028 0008                  		move.w	8(a0),d0
00011512 0240 FF80                  		andi.w	#$FF80,d0
00011516 3238 F700                  		move.w	($FFFFF700).w,d1
0001151A 0441 0080                  		subi.w	#$80,d1
0001151E 0241 FF80                  		andi.w	#$FF80,d1
00011522 9041                       		sub.w	d1,d0
00011524 0C40 0280                  		cmpi.w	#$280,d0
00011528 6200 C910                  		bhi.w	DeleteObject
0001152C 4E75                       		rts	
0001152E                            ; ===========================================================================
0001152E                            ; ---------------------------------------------------------------------------
0001152E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001152E                            ; ---------------------------------------------------------------------------
0001152E                            Map_obj59:
0001152E                            	include "_maps\obj59.asm"
0001152E                            ; ---------------------------------------------------------------------------
0001152E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001152E                            ; ---------------------------------------------------------------------------
0001152E 0000                       		dc.w byte_10D4A-Map_obj59
00011530 03                         byte_10D4A:	dc.b 3
00011531 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011536 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001153B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011540                            		even
00011540                            		even
00011540                            
00011540                            ; ===========================================================================
00011540                            ; ---------------------------------------------------------------------------
00011540                            ; Object 5A - platforms	moving in circles (SLZ)
00011540                            ; ---------------------------------------------------------------------------
00011540                            
00011540                            Obj5A:					; XREF: Obj_Index
00011540 7000                       		moveq	#0,d0
00011542 1028 0024                  		move.b	$24(a0),d0
00011546 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001154A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001154E 3028 0032                  		move.w	$32(a0),d0
00011552 0240 FF80                  		andi.w	#$FF80,d0
00011556 3238 F700                  		move.w	($FFFFF700).w,d1
0001155A 0441 0080                  		subi.w	#$80,d1
0001155E 0241 FF80                  		andi.w	#$FF80,d1
00011562 9041                       		sub.w	d1,d0
00011564 0C40 0280                  		cmpi.w	#$280,d0
00011568 6200 C8D0                  		bhi.w	DeleteObject
0001156C 6000 C890                  		bra.w	DisplaySprite
00011570                            ; ===========================================================================
00011570 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011572 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011574 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011576                            ; ===========================================================================
00011576                            
00011576                            Obj5A_Main:				; XREF: Obj5A_Index
00011576 5428 0024                  		addq.b	#2,$24(a0)
0001157A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011582 317C 4000 0002             		move.w	#$4000,2(a0)
00011588 117C 0004 0001             		move.b	#4,1(a0)
0001158E 117C 0004 0018             		move.b	#4,$18(a0)
00011594 117C 0018 0019             		move.b	#$18,$19(a0)
0001159A 3168 0008 0032             		move.w	8(a0),$32(a0)
000115A0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115A6                            
000115A6                            Obj5A_Platform:				; XREF: Obj5A_Index
000115A6 7200                       		moveq	#0,d1
000115A8 1228 0019                  		move.b	$19(a0),d1
000115AC 4EB9 0000 7A88             		jsr	(PlatformObject).l
000115B2 6000 0000                  		bra.w	Obj5A_Types
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            Obj5A_Action:				; XREF: Obj5A_Index
000115B6 7200                       		moveq	#0,d1
000115B8 1228 0019                  		move.b	$19(a0),d1
000115BC 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000115C2 3F28 0008                  		move.w	8(a0),-(sp)
000115C6 6100 0000                  		bsr.w	Obj5A_Types
000115CA 341F                       		move.w	(sp)+,d2
000115CC 4EF9 0000 8166             		jmp	(MvSonicOnPtfm2).l
000115D2                            ; ===========================================================================
000115D2                            
000115D2                            Obj5A_Types:
000115D2 7000                       		moveq	#0,d0
000115D4 1028 0028                  		move.b	$28(a0),d0
000115D8 0240 000C                  		andi.w	#$C,d0
000115DC E248                       		lsr.w	#1,d0
000115DE 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000115E2 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000115E6                            ; ===========================================================================
000115E6 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000115E8 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000115EA                            ; ===========================================================================
000115EA                            
000115EA                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000115EA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115EE 0401 0050                  		subi.b	#$50,d1
000115F2 4881                       		ext.w	d1
000115F4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115F8 0402 0050                  		subi.b	#$50,d2
000115FC 4882                       		ext.w	d2
000115FE 0828 0000 0028             		btst	#0,$28(a0)
00011604 6700                       		beq.s	loc_10E24
00011606 4441                       		neg.w	d1
00011608 4442                       		neg.w	d2
0001160A                            
0001160A                            loc_10E24:
0001160A 0828 0001 0028             		btst	#1,$28(a0)
00011610 6700                       		beq.s	loc_10E30
00011612 4441                       		neg.w	d1
00011614 C342                       		exg	d1,d2
00011616                            
00011616                            loc_10E30:
00011616 D268 0032                  		add.w	$32(a0),d1
0001161A 3141 0008                  		move.w	d1,8(a0)
0001161E D468 0030                  		add.w	$30(a0),d2
00011622 3142 000C                  		move.w	d2,$C(a0)
00011626 4E75                       		rts	
00011628                            ; ===========================================================================
00011628                            
00011628                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011628 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001162C 0401 0050                  		subi.b	#$50,d1
00011630 4881                       		ext.w	d1
00011632 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011636 0402 0050                  		subi.b	#$50,d2
0001163A 4882                       		ext.w	d2
0001163C 0828 0000 0028             		btst	#0,$28(a0)
00011642 6700                       		beq.s	loc_10E62
00011644 4441                       		neg.w	d1
00011646 4442                       		neg.w	d2
00011648                            
00011648                            loc_10E62:
00011648 0828 0001 0028             		btst	#1,$28(a0)
0001164E 6700                       		beq.s	loc_10E6E
00011650 4441                       		neg.w	d1
00011652 C342                       		exg	d1,d2
00011654                            
00011654                            loc_10E6E:
00011654 4441                       		neg.w	d1
00011656 D268 0032                  		add.w	$32(a0),d1
0001165A 3141 0008                  		move.w	d1,8(a0)
0001165E D468 0030                  		add.w	$30(a0),d2
00011662 3142 000C                  		move.w	d2,$C(a0)
00011666 4E75                       		rts	
00011668                            ; ===========================================================================
00011668                            ; ---------------------------------------------------------------------------
00011668                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011668                            ; ---------------------------------------------------------------------------
00011668                            Map_obj5A:
00011668                            	include "_maps\obj5A.asm"
00011668                            ; ---------------------------------------------------------------------------
00011668                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011668                            ; ---------------------------------------------------------------------------
00011668 0000                       		dc.w byte_10E84-Map_obj5A
0001166A 02                         byte_10E84:	dc.b 2
0001166B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011670 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011676 00                         		even
00011676 00                         		even
00011676                            
00011676                            ; ===========================================================================
00011676                            ; ---------------------------------------------------------------------------
00011676                            ; Object 5B - blocks that form a staircase (SLZ)
00011676                            ; ---------------------------------------------------------------------------
00011676                            
00011676                            Obj5B:					; XREF: Obj_Index
00011676 7000                       		moveq	#0,d0
00011678 1028 0024                  		move.b	$24(a0),d0
0001167C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011680 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011684 3028 0030                  		move.w	$30(a0),d0
00011688 0240 FF80                  		andi.w	#$FF80,d0
0001168C 3238 F700                  		move.w	($FFFFF700).w,d1
00011690 0441 0080                  		subi.w	#$80,d1
00011694 0241 FF80                  		andi.w	#$FF80,d1
00011698 9041                       		sub.w	d1,d0
0001169A 0C40 0280                  		cmpi.w	#$280,d0
0001169E 6200 C79A                  		bhi.w	DeleteObject
000116A2 6000 C75A                  		bra.w	DisplaySprite
000116A6                            ; ===========================================================================
000116A6 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000116A8 0000                       		dc.w Obj5B_Move-Obj5B_Index
000116AA 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000116AC                            ; ===========================================================================
000116AC                            
000116AC                            Obj5B_Main:				; XREF: Obj5B_Index
000116AC 5428 0024                  		addq.b	#2,$24(a0)
000116B0 7638                       		moveq	#$38,d3
000116B2 7801                       		moveq	#1,d4
000116B4 0828 0000 0022             		btst	#0,$22(a0)
000116BA 6700                       		beq.s	loc_10EDA
000116BC 763B                       		moveq	#$3B,d3
000116BE 78FF                       		moveq	#-1,d4
000116C0                            
000116C0                            loc_10EDA:
000116C0 3428 0008                  		move.w	8(a0),d2
000116C4 2248                       		movea.l	a0,a1
000116C6 7203                       		moveq	#3,d1
000116C8 6000                       		bra.s	Obj5B_MakeBlocks
000116CA                            ; ===========================================================================
000116CA                            
000116CA                            Obj5B_Loop:
000116CA 6100 CBCE                  		bsr.w	SingleObjLoad2
000116CE 6600 0000                  		bne.w	Obj5B_Move
000116D2 137C 0004 0024             		move.b	#4,$24(a1)
000116D8                            
000116D8                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000116D8 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000116DC 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000116E4 337C 4000 0002             		move.w	#$4000,2(a1)
000116EA 137C 0004 0001             		move.b	#4,1(a1)
000116F0 137C 0003 0018             		move.b	#3,$18(a1)
000116F6 137C 0010 0019             		move.b	#$10,$19(a1)
000116FC 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011702 3342 0008                  		move.w	d2,8(a1)
00011706 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001170C 3368 0008 0030             		move.w	8(a0),$30(a1)
00011712 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011718 0642 0020                  		addi.w	#$20,d2
0001171C 1343 0037                  		move.b	d3,$37(a1)
00011720 2348 003C                  		move.l	a0,$3C(a1)
00011724 D604                       		add.b	d4,d3
00011726 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001172A                            
0001172A                            Obj5B_Move:				; XREF: Obj5B_Index
0001172A 7000                       		moveq	#0,d0
0001172C 1028 0028                  		move.b	$28(a0),d0
00011730 0240 0007                  		andi.w	#7,d0
00011734 D040                       		add.w	d0,d0
00011736 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001173A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001173E                            
0001173E                            Obj5B_Solid:				; XREF: Obj5B_Index
0001173E 2468 003C                  		movea.l	$3C(a0),a2
00011742 7000                       		moveq	#0,d0
00011744 1028 0037                  		move.b	$37(a0),d0
00011748 1032 0000                  		move.b	(a2,d0.w),d0
0001174C D068 0032                  		add.w	$32(a0),d0
00011750 3140 000C                  		move.w	d0,$C(a0)
00011754 7200                       		moveq	#0,d1
00011756 1228 0019                  		move.b	$19(a0),d1
0001175A 0641 000B                  		addi.w	#$B,d1
0001175E 343C 0010                  		move.w	#$10,d2
00011762 363C 0011                  		move.w	#$11,d3
00011766 3828 0008                  		move.w	8(a0),d4
0001176A 6100 EA62                  		bsr.w	SolidObject
0001176E 4A04                       		tst.b	d4
00011770 6A00                       		bpl.s	loc_10F92
00011772 1544 0036                  		move.b	d4,$36(a2)
00011776                            
00011776                            loc_10F92:
00011776 0828 0003 0022             		btst	#3,$22(a0)
0001177C 6700                       		beq.s	locret_10FA0
0001177E 157C 0001 0036             		move.b	#1,$36(a2)
00011784                            
00011784                            locret_10FA0:
00011784 4E75                       		rts	
00011786                            ; ===========================================================================
00011786 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011788 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001178A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001178C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001178E                            ; ===========================================================================
0001178E                            
0001178E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001178E 4A68 0034                  		tst.w	$34(a0)
00011792 6600                       		bne.s	loc_10FC0
00011794 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001179A 6600                       		bne.s	locret_10FBE
0001179C 317C 001E 0034             		move.w	#$1E,$34(a0)
000117A2                            
000117A2                            locret_10FBE:
000117A2 4E75                       		rts	
000117A4                            ; ===========================================================================
000117A4                            
000117A4                            loc_10FC0:
000117A4 5368 0034                  		subq.w	#1,$34(a0)
000117A8 66F8                       		bne.s	locret_10FBE
000117AA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000117AE 4E75                       		rts	
000117B0                            ; ===========================================================================
000117B0                            
000117B0                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000117B0 4A68 0034                  		tst.w	$34(a0)
000117B4 6600                       		bne.s	loc_10FE0
000117B6 4A28 0036                  		tst.b	$36(a0)
000117BA 6A00                       		bpl.s	locret_10FDE
000117BC 317C 003C 0034             		move.w	#$3C,$34(a0)
000117C2                            
000117C2                            locret_10FDE:
000117C2 4E75                       		rts	
000117C4                            ; ===========================================================================
000117C4                            
000117C4                            loc_10FE0:
000117C4 5368 0034                  		subq.w	#1,$34(a0)
000117C8 6600                       		bne.s	loc_10FEC
000117CA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000117CE 4E75                       		rts	
000117D0                            ; ===========================================================================
000117D0                            
000117D0                            loc_10FEC:
000117D0 43E8 0038                  		lea	$38(a0),a1
000117D4 3028 0034                  		move.w	$34(a0),d0
000117D8 E408                       		lsr.b	#2,d0
000117DA 0200 0001                  		andi.b	#1,d0
000117DE 12C0                       		move.b	d0,(a1)+
000117E0 0A00 0001                  		eori.b	#1,d0
000117E4 12C0                       		move.b	d0,(a1)+
000117E6 0A00 0001                  		eori.b	#1,d0
000117EA 12C0                       		move.b	d0,(a1)+
000117EC 0A00 0001                  		eori.b	#1,d0
000117F0 12C0                       		move.b	d0,(a1)+
000117F2 4E75                       		rts	
000117F4                            ; ===========================================================================
000117F4                            
000117F4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000117F4 43E8 0038                  		lea	$38(a0),a1
000117F8 0C11 0080                  		cmpi.b	#$80,(a1)
000117FC 6700                       		beq.s	locret_11038
000117FE 5211                       		addq.b	#1,(a1)
00011800 7200                       		moveq	#0,d1
00011802 1219                       		move.b	(a1)+,d1
00011804 4841                       		swap	d1
00011806 E289                       		lsr.l	#1,d1
00011808 2401                       		move.l	d1,d2
0001180A E289                       		lsr.l	#1,d1
0001180C 2601                       		move.l	d1,d3
0001180E D682                       		add.l	d2,d3
00011810 4841                       		swap	d1
00011812 4842                       		swap	d2
00011814 4843                       		swap	d3
00011816 12C3                       		move.b	d3,(a1)+
00011818 12C2                       		move.b	d2,(a1)+
0001181A 12C1                       		move.b	d1,(a1)+
0001181C                            
0001181C                            locret_11038:
0001181C 4E75                       		rts	
0001181E 4E75                       		rts	
00011820                            ; ===========================================================================
00011820                            ; ---------------------------------------------------------------------------
00011820                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011820                            ; ---------------------------------------------------------------------------
00011820                            Map_obj5B:
00011820                            	include "_maps\obj5B.asm"
00011820                            ; ---------------------------------------------------------------------------
00011820                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011820                            ; ---------------------------------------------------------------------------
00011820 0000                       		dc.w byte_1103E-Map_obj5B
00011822 01                         byte_1103E:	dc.b 1
00011823 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011828                            		even
00011828                            		even
00011828                            
00011828                            ; ===========================================================================
00011828                            ; ---------------------------------------------------------------------------
00011828                            ; Object 5C - metal girders in foreground (SLZ)
00011828                            ; ---------------------------------------------------------------------------
00011828                            
00011828                            Obj5C:					; XREF: Obj_Index
00011828 7000                       		moveq	#0,d0
0001182A 1028 0024                  		move.b	$24(a0),d0
0001182E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011832 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011836                            ; ===========================================================================
00011836 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011838 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001183A                            ; ===========================================================================
0001183A                            
0001183A                            Obj5C_Main:				; XREF: Obj5C_Index
0001183A 5428 0024                  		addq.b	#2,$24(a0)
0001183E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011846 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001184C 117C 0010 0019             		move.b	#$10,$19(a0)
00011852                            
00011852                            Obj5C_Display:				; XREF: Obj5C_Index
00011852 2238 F700                  		move.l	($FFFFF700).w,d1
00011856 D281                       		add.l	d1,d1
00011858 4841                       		swap	d1
0001185A 4441                       		neg.w	d1
0001185C 3141 0008                  		move.w	d1,8(a0)
00011860 2238 F704                  		move.l	($FFFFF704).w,d1
00011864 D281                       		add.l	d1,d1
00011866 4841                       		swap	d1
00011868 0241 003F                  		andi.w	#$3F,d1
0001186C 4441                       		neg.w	d1
0001186E 0641 0100                  		addi.w	#$100,d1
00011872 3141 000A                  		move.w	d1,$A(a0)
00011876 6000 C586                  		bra.w	DisplaySprite
0001187A                            ; ===========================================================================
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            Map_obj5C:
0001187A                            	include "_maps\obj5C.asm"
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A 0000                       		dc.w byte_11098-Map_obj5C
0001187C 09                         byte_11098:	dc.b 9
0001187D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011882 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011887 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001188C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011891 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011896 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001189B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000118A0 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000118A5 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000118AA                            		even
000118AA                            		even
000118AA                            
000118AA                            ; ===========================================================================
000118AA                            ; ---------------------------------------------------------------------------
000118AA                            ; Object 1B - water surface (LZ)
000118AA                            ; ---------------------------------------------------------------------------
000118AA                            
000118AA                            Obj1B:					; XREF: Obj_Index
000118AA 7000                       		moveq	#0,d0
000118AC 1028 0024                  		move.b	$24(a0),d0
000118B0 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000118B4 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000118B8                            ; ===========================================================================
000118B8 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000118BA 0000                       		dc.w Obj1B_Action-Obj1B_Index
000118BC                            ; ===========================================================================
000118BC                            
000118BC                            Obj1B_Main:				; XREF: Obj1B_Index
000118BC 5428 0024                  		addq.b	#2,$24(a0)
000118C0 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000118C8 317C C300 0002             		move.w	#$C300,2(a0)
000118CE 117C 0004 0001             		move.b	#4,1(a0)
000118D4 117C 0080 0019             		move.b	#$80,$19(a0)
000118DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000118E0                            
000118E0                            Obj1B_Action:				; XREF: Obj1B_Index
000118E0 3238 F700                  		move.w	($FFFFF700).w,d1
000118E4 0241 FFE0                  		andi.w	#$FFE0,d1
000118E8 D268 0030                  		add.w	$30(a0),d1
000118EC 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000118F2 6700                       		beq.s	loc_11114
000118F4 0641 0020                  		addi.w	#$20,d1
000118F8                            
000118F8                            loc_11114:
000118F8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000118FC 3238 F646                  		move.w	($FFFFF646).w,d1
00011900 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011904 4A28 0032                  		tst.b	$32(a0)
00011908 6600                       		bne.s	Obj1B_Animate
0001190A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011910 6700                       		beq.s	loc_1114A	; if not, branch
00011912 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011916 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001191C 6000                       		bra.s	Obj1B_Display
0001191E                            ; ===========================================================================
0001191E                            
0001191E                            Obj1B_Animate:				; XREF: loc_11114
0001191E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011922 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011924 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001192A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001192E                            
0001192E                            loc_1114A:				; XREF: loc_11114
0001192E 5328 001E                  		subq.b	#1,$1E(a0)
00011932 6A00                       		bpl.s	Obj1B_Display
00011934 117C 0007 001E             		move.b	#7,$1E(a0)
0001193A 5228 001A                  		addq.b	#1,$1A(a0)
0001193E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011944 6500                       		bcs.s	Obj1B_Display
00011946 117C 0000 001A             		move.b	#0,$1A(a0)
0001194C                            
0001194C                            Obj1B_Display:
0001194C 6000 C4B0                  		bra.w	DisplaySprite
00011950                            ; ===========================================================================
00011950                            ; ---------------------------------------------------------------------------
00011950                            ; Sprite mappings - water surface (LZ)
00011950                            ; ---------------------------------------------------------------------------
00011950                            Map_obj1B:
00011950                            	include "_maps\obj1B.asm"
00011950                            ; ---------------------------------------------------------------------------
00011950                            ; Sprite mappings - water surface (LZ)
00011950                            ; ---------------------------------------------------------------------------
00011950 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011954 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011958 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001195C 03                         byte_11178:	dc.b 3
0001195D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011962 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011967 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001196C 03                         byte_11188:	dc.b 3
0001196D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011972 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011977 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001197C 03                         byte_11198:	dc.b 3
0001197D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011982 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011987 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001198C 06                         byte_111A8:	dc.b 6
0001198D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011992 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011997 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001199C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000119A1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119A6 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000119AB 06                         byte_111C7:	dc.b 6
000119AC FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119B1 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000119B6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000119BB FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000119C0 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000119C5 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000119CA 06                         byte_111E6:	dc.b 6
000119CB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000119D0 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000119D5 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119DA FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000119DF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119E4 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000119EA 00                         		even
000119EA 00                         		even
000119EA                            
000119EA                            ; ===========================================================================
000119EA                            ; ---------------------------------------------------------------------------
000119EA                            ; Object 0B - pole that	breaks (LZ)
000119EA                            ; ---------------------------------------------------------------------------
000119EA                            
000119EA                            Obj0B:					; XREF: Obj_Index
000119EA 7000                       		moveq	#0,d0
000119EC 1028 0024                  		move.b	$24(a0),d0
000119F0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000119F4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000119F8                            ; ===========================================================================
000119F8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000119FA 0000                       		dc.w Obj0B_Action-Obj0B_Index
000119FC 0000                       		dc.w Obj0B_Display-Obj0B_Index
000119FE                            ; ===========================================================================
000119FE                            
000119FE                            Obj0B_Main:				; XREF: Obj0B_Index
000119FE 5428 0024                  		addq.b	#2,$24(a0)
00011A02 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A0A 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A10 117C 0004 0001             		move.b	#4,1(a0)
00011A16 117C 0008 0019             		move.b	#8,$19(a0)
00011A1C 117C 0004 0018             		move.b	#4,$18(a0)
00011A22 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011A28 7000                       		moveq	#0,d0
00011A2A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A2E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A32 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011A36                            
00011A36                            Obj0B_Action:				; XREF: Obj0B_Index
00011A36 4A28 0032                  		tst.b	$32(a0)
00011A3A 6700                       		beq.s	Obj0B_Grab
00011A3C 4A68 0030                  		tst.w	$30(a0)
00011A40 6700                       		beq.s	Obj0B_MoveUp
00011A42 5368 0030                  		subq.w	#1,$30(a0)
00011A46 6600                       		bne.s	Obj0B_MoveUp
00011A48 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011A4E 6000                       		bra.s	Obj0B_Release
00011A50                            ; ===========================================================================
00011A50                            
00011A50                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011A50 43F8 D000                  		lea	($FFFFD000).w,a1
00011A54 3028 000C                  		move.w	$C(a0),d0
00011A58 0440 0018                  		subi.w	#$18,d0
00011A5C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011A62 6700                       		beq.s	Obj0B_MoveDown
00011A64 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011A68 B069 000C                  		cmp.w	$C(a1),d0
00011A6C 6500                       		bcs.s	Obj0B_MoveDown
00011A6E 3340 000C                  		move.w	d0,$C(a1)
00011A72                            
00011A72                            Obj0B_MoveDown:
00011A72 0640 0024                  		addi.w	#$24,d0
00011A76 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011A7C 6700                       		beq.s	Obj0B_LetGo
00011A7E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011A82 B069 000C                  		cmp.w	$C(a1),d0
00011A86 6400                       		bcc.s	Obj0B_LetGo
00011A88 3340 000C                  		move.w	d0,$C(a1)
00011A8C                            
00011A8C                            Obj0B_LetGo:
00011A8C 1038 F603                  		move.b	($FFFFF603).w,d0
00011A90 0240 0070                  		andi.w	#$70,d0
00011A94 6700                       		beq.s	Obj0B_Display
00011A96                            
00011A96                            Obj0B_Release:				; XREF: Obj0B_Action
00011A96 4228 0020                  		clr.b	$20(a0)
00011A9A 5428 0024                  		addq.b	#2,$24(a0)
00011A9E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011AA2 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011AA6 4228 0032                  		clr.b	$32(a0)
00011AAA 6000                       		bra.s	Obj0B_Display
00011AAC                            ; ===========================================================================
00011AAC                            
00011AAC                            Obj0B_Grab:				; XREF: Obj0B_Action
00011AAC 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011AB0 6700                       		beq.s	Obj0B_Display	; if not, branch
00011AB2 43F8 D000                  		lea	($FFFFD000).w,a1
00011AB6 3028 0008                  		move.w	8(a0),d0
00011ABA 0640 0014                  		addi.w	#$14,d0
00011ABE B069 0008                  		cmp.w	8(a1),d0
00011AC2 6400                       		bcc.s	Obj0B_Display
00011AC4 4228 0021                  		clr.b	$21(a0)
00011AC8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011ACE 6400                       		bcc.s	Obj0B_Display
00011AD0 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011AD4 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011AD8 3028 0008                  		move.w	8(a0),d0
00011ADC 0640 0014                  		addi.w	#$14,d0
00011AE0 3340 0008                  		move.w	d0,8(a1)
00011AE4 08A9 0000 0022             		bclr	#0,$22(a1)
00011AEA 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011AF0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011AF6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011AFC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B02                            
00011B02                            Obj0B_Display:				; XREF: Obj0B_Index
00011B02 6000 E3A2                  		bra.w	MarkObjGone
00011B06                            ; ===========================================================================
00011B06                            ; ---------------------------------------------------------------------------
00011B06                            ; Sprite mappings - pole that breaks (LZ)
00011B06                            ; ---------------------------------------------------------------------------
00011B06                            Map_obj0B:
00011B06                            	include "_maps\obj0B.asm"
00011B06                            ; ---------------------------------------------------------------------------
00011B06                            ; Sprite mappings - pole that breaks (LZ)
00011B06                            ; ---------------------------------------------------------------------------
00011B06 0000                       		dc.w byte_11326-Map_obj0B
00011B08 0000                       		dc.w byte_11331-Map_obj0B
00011B0A 02                         byte_11326:	dc.b 2			; normal pole
00011B0B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B10 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011B15 04                         byte_11331:	dc.b 4			; broken pole
00011B16 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011B1B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011B20 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011B25 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011B2A                            		even
00011B2A                            		even
00011B2A                            
00011B2A                            ; ===========================================================================
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A                            ; Object 0C - flapping door (LZ)
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A                            
00011B2A                            Obj0C:					; XREF: Obj_Index
00011B2A 7000                       		moveq	#0,d0
00011B2C 1028 0024                  		move.b	$24(a0),d0
00011B30 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011B34 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011B38                            ; ===========================================================================
00011B38 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011B3A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011B3C                            ; ===========================================================================
00011B3C                            
00011B3C                            Obj0C_Main:				; XREF: Obj0C_Index
00011B3C 5428 0024                  		addq.b	#2,$24(a0)
00011B40 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011B48 317C 4328 0002             		move.w	#$4328,2(a0)
00011B4E 0028 0004 0001             		ori.b	#4,1(a0)
00011B54 117C 0028 0019             		move.b	#$28,$19(a0)
00011B5A 7000                       		moveq	#0,d0
00011B5C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B60 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011B64 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011B68                            
00011B68                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011B68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B6C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011B6E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011B74 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011B7A 4A28 0001                  		tst.b	1(a0)
00011B7E 6A00                       		bpl.s	Obj0C_Solid
00011B80 303C 00BB                  		move.w	#$BB,d0
00011B84 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011B8A                            
00011B8A                            Obj0C_Solid:
00011B8A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B90 6100 932C                  		bsr.w	AnimateSprite
00011B94 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011B98 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011B9C 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011B9E 3038 D008                  		move.w	($FFFFD008).w,d0
00011BA2 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011BA6 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011BA8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011BAE 323C 0013                  		move.w	#$13,d1
00011BB2 343C 0020                  		move.w	#$20,d2
00011BB6 3602                       		move.w	d2,d3
00011BB8 5243                       		addq.w	#1,d3
00011BBA 3828 0008                  		move.w	8(a0),d4
00011BBE 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011BC2                            
00011BC2                            Obj0C_Display:
00011BC2 6000 E2E2                  		bra.w	MarkObjGone
00011BC6                            ; ===========================================================================
00011BC6                            Ani_obj0C:
00011BC6                            	include "_anim\obj0C.asm"
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            ; Animation script - flapping door (LZ)
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6 0000                       		dc.w byte_113E6-Ani_obj0C
00011BC8 0000                       		dc.w byte_113EC-Ani_obj0C
00011BCA 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011BD0 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011BD6                            		even
00011BD6                            		even
00011BD6                            
00011BD6                            ; ---------------------------------------------------------------------------
00011BD6                            ; Sprite mappings - flapping door (LZ)
00011BD6                            ; ---------------------------------------------------------------------------
00011BD6                            Map_obj0C:
00011BD6                            	include "_maps\obj0C.asm"
00011BD6                            ; ---------------------------------------------------------------------------
00011BD6                            ; Sprite mappings - flapping door (LZ)
00011BD6                            ; ---------------------------------------------------------------------------
00011BD6 0000                       		dc.w byte_113F8-Map_obj0C
00011BD8 0000                       		dc.w byte_11403-Map_obj0C
00011BDA 0000                       		dc.w byte_1140E-Map_obj0C
00011BDC 02                         byte_113F8:	dc.b 2
00011BDD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011BE2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011BE7 02                         byte_11403:	dc.b 2
00011BE8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011BED 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011BF2 02                         byte_1140E:	dc.b 2
00011BF3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011BF8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011BFE 00                         		even
00011BFE 00                         		even
00011BFE                            
00011BFE                            ; ===========================================================================
00011BFE                            ; ---------------------------------------------------------------------------
00011BFE                            ; Object 71 - invisible	solid blocks
00011BFE                            ; ---------------------------------------------------------------------------
00011BFE                            
00011BFE                            Obj71:					; XREF: Obj_Index
00011BFE 7000                       		moveq	#0,d0
00011C00 1028 0024                  		move.b	$24(a0),d0
00011C04 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C08 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C0C                            ; ===========================================================================
00011C0C 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C0E 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C10                            ; ===========================================================================
00011C10                            
00011C10                            Obj71_Main:				; XREF: Obj71_Index
00011C10 5428 0024                  		addq.b	#2,$24(a0)
00011C14 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011C1C 317C 8680 0002             		move.w	#$8680,2(a0)
00011C22 0028 0004 0001             		ori.b	#4,1(a0)
00011C28 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C2C 1200                       		move.b	d0,d1
00011C2E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011C32 0640 0010                  		addi.w	#$10,d0
00011C36 E248                       		lsr.w	#1,d0
00011C38 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011C3C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011C40 5241                       		addq.w	#1,d1
00011C42 E749                       		lsl.w	#3,d1
00011C44 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011C48                            
00011C48                            Obj71_Solid:				; XREF: Obj71_Index
00011C48 6100 C42E                  		bsr.w	ChkObjOnScreen
00011C4C 6600                       		bne.s	Obj71_ChkDel
00011C4E 7200                       		moveq	#0,d1
00011C50 1228 0019                  		move.b	$19(a0),d1
00011C54 0641 000B                  		addi.w	#$B,d1
00011C58 7400                       		moveq	#0,d2
00011C5A 1428 0016                  		move.b	$16(a0),d2
00011C5E 3602                       		move.w	d2,d3
00011C60 5243                       		addq.w	#1,d3
00011C62 3828 0008                  		move.w	8(a0),d4
00011C66 6100 E5A8                  		bsr.w	SolidObject71
00011C6A                            
00011C6A                            Obj71_ChkDel:
00011C6A 3028 0008                  		move.w	8(a0),d0
00011C6E 0240 FF80                  		andi.w	#$FF80,d0
00011C72 3238 F700                  		move.w	($FFFFF700).w,d1
00011C76 0441 0080                  		subi.w	#$80,d1
00011C7A 0241 FF80                  		andi.w	#$FF80,d1
00011C7E 9041                       		sub.w	d1,d0
00011C80 0C40 0280                  		cmpi.w	#$280,d0
00011C84 6200                       		bhi.s	Obj71_Delete
00011C86 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011C8A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C8C 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011C90                            ; ===========================================================================
00011C90                            
00011C90                            Obj71_NoDisplay:
00011C90 4E75                       		rts	
00011C92                            ; ===========================================================================
00011C92                            
00011C92                            Obj71_Delete:
00011C92 4EFA C1A6                  		jmp	DeleteObject
00011C96                            ; ===========================================================================
00011C96                            ; ---------------------------------------------------------------------------
00011C96                            ; Sprite mappings - invisible solid blocks
00011C96                            ; ---------------------------------------------------------------------------
00011C96                            Map_obj71:
00011C96                            	include "_maps\obj71.asm"
00011C96                            ; ---------------------------------------------------------------------------
00011C96                            ; Sprite mappings - invisible solid blocks
00011C96                            ; ---------------------------------------------------------------------------
00011C96 0000                       		dc.w byte_114BC-Map_obj71
00011C98 0000                       		dc.w byte_114D1-Map_obj71
00011C9A 0000                       		dc.w byte_114E6-Map_obj71
00011C9C 04                         byte_114BC:	dc.b 4
00011C9D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011CA2 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011CA7 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011CAC 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011CB1 04                         byte_114D1:	dc.b 4
00011CB2 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011CB7 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011CBC 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011CC1 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011CC6 04                         byte_114E6:	dc.b 4
00011CC7 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011CCC E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011CD1 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011CD6 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011CDC 00                         		even
00011CDC 00                         		even
00011CDC                            
00011CDC                            ; ===========================================================================
00011CDC                            ; ---------------------------------------------------------------------------
00011CDC                            ; Object 5D - fans (SLZ)
00011CDC                            ; ---------------------------------------------------------------------------
00011CDC                            
00011CDC                            Obj5D:					; XREF: Obj_Index
00011CDC 7000                       		moveq	#0,d0
00011CDE 1028 0024                  		move.b	$24(a0),d0
00011CE2 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011CE6 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011CEA                            ; ===========================================================================
00011CEA 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011CEC 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011CEE                            ; ===========================================================================
00011CEE                            
00011CEE                            Obj5D_Main:				; XREF: Obj5D_Index
00011CEE 5428 0024                  		addq.b	#2,$24(a0)
00011CF2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011CFA 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D00 0028 0004 0001             		ori.b	#4,1(a0)
00011D06 117C 0010 0019             		move.b	#$10,$19(a0)
00011D0C 117C 0004 0018             		move.b	#4,$18(a0)
00011D12                            
00011D12                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D12 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011D18 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011D1A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D1E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011D20 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011D26 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011D2C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011D2E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011D34                            
00011D34                            Obj5D_Blow:
00011D34 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011D38 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011D3C 43F8 D000                  		lea	($FFFFD000).w,a1
00011D40 3029 0008                  		move.w	8(a1),d0
00011D44 9068 0008                  		sub.w	8(a0),d0
00011D48 0828 0000 0022             		btst	#0,$22(a0)
00011D4E 6600                       		bne.s	Obj5D_ChkSonic
00011D50 4440                       		neg.w	d0
00011D52                            
00011D52                            Obj5D_ChkSonic:
00011D52 0640 0050                  		addi.w	#$50,d0
00011D56 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011D5A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011D5C 3229 000C                  		move.w	$C(a1),d1
00011D60 0641 0060                  		addi.w	#$60,d1
00011D64 9268 000C                  		sub.w	$C(a0),d1
00011D68 6500                       		bcs.s	Obj5D_Animate
00011D6A 0C41 0070                  		cmpi.w	#$70,d1
00011D6E 6400                       		bcc.s	Obj5D_Animate
00011D70 0440 0050                  		subi.w	#$50,d0
00011D74 6400                       		bcc.s	loc_1159A
00011D76 4640                       		not.w	d0
00011D78 D040                       		add.w	d0,d0
00011D7A                            
00011D7A                            loc_1159A:
00011D7A 0640 0060                  		addi.w	#$60,d0
00011D7E 0828 0000 0022             		btst	#0,$22(a0)
00011D84 6600                       		bne.s	loc_115A8
00011D86 4440                       		neg.w	d0
00011D88                            
00011D88                            loc_115A8:
00011D88 4400                       		neg.b	d0
00011D8A E840                       		asr.w	#4,d0
00011D8C 0828 0000 0028             		btst	#0,$28(a0)
00011D92 6700                       		beq.s	Obj5D_MoveSonic
00011D94 4440                       		neg.w	d0
00011D96                            
00011D96                            Obj5D_MoveSonic:
00011D96 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011D9A                            
00011D9A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011D9A 5328 001E                  		subq.b	#1,$1E(a0)
00011D9E 6A00                       		bpl.s	Obj5D_ChkDel
00011DA0 117C 0000 001E             		move.b	#0,$1E(a0)
00011DA6 5228 001B                  		addq.b	#1,$1B(a0)
00011DAA 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011DB0 6500                       		bcs.s	loc_115D8
00011DB2 117C 0000 001B             		move.b	#0,$1B(a0)
00011DB8                            
00011DB8                            loc_115D8:
00011DB8 7000                       		moveq	#0,d0
00011DBA 0828 0000 0028             		btst	#0,$28(a0)
00011DC0 6700                       		beq.s	loc_115E4
00011DC2 7002                       		moveq	#2,d0
00011DC4                            
00011DC4                            loc_115E4:
00011DC4 D028 001B                  		add.b	$1B(a0),d0
00011DC8 1140 001A                  		move.b	d0,$1A(a0)
00011DCC                            
00011DCC                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011DCC 6100 C030                  		bsr.w	DisplaySprite
00011DD0 3028 0008                  		move.w	8(a0),d0
00011DD4 0240 FF80                  		andi.w	#$FF80,d0
00011DD8 3238 F700                  		move.w	($FFFFF700).w,d1
00011DDC 0441 0080                  		subi.w	#$80,d1
00011DE0 0241 FF80                  		andi.w	#$FF80,d1
00011DE4 9041                       		sub.w	d1,d0
00011DE6 0C40 0280                  		cmpi.w	#$280,d0
00011DEA 6200 C04E                  		bhi.w	DeleteObject
00011DEE 4E75                       		rts	
00011DF0                            ; ===========================================================================
00011DF0                            ; ---------------------------------------------------------------------------
00011DF0                            ; Sprite mappings - fans (SLZ)
00011DF0                            ; ---------------------------------------------------------------------------
00011DF0                            Map_obj5D:
00011DF0                            	include "_maps\obj5D.asm"
00011DF0                            ; ---------------------------------------------------------------------------
00011DF0                            ; Sprite mappings - fans (SLZ)
00011DF0                            ; ---------------------------------------------------------------------------
00011DF0 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011DF4 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011DF8 0000                       		dc.w byte_1161A-Map_obj5D
00011DFA 02                         byte_1161A:	dc.b 2
00011DFB F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E00 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E05 02                         byte_11625:	dc.b 2
00011E06 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E0B 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E10 02                         byte_11630:	dc.b 2
00011E11 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011E16 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011E1C 00                         		even
00011E1C 00                         		even
00011E1C                            
00011E1C                            ; ===========================================================================
00011E1C                            ; ---------------------------------------------------------------------------
00011E1C                            ; Object 5E - seesaws (SLZ)
00011E1C                            ; ---------------------------------------------------------------------------
00011E1C                            
00011E1C                            Obj5E:					; XREF: Obj_Index
00011E1C 7000                       		moveq	#0,d0
00011E1E 1028 0024                  		move.b	$24(a0),d0
00011E22 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011E26 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011E2A 3028 0030                  		move.w	$30(a0),d0
00011E2E 0240 FF80                  		andi.w	#$FF80,d0
00011E32 3238 F700                  		move.w	($FFFFF700).w,d1
00011E36 0441 0080                  		subi.w	#$80,d1
00011E3A 0241 FF80                  		andi.w	#$FF80,d1
00011E3E 9041                       		sub.w	d1,d0
00011E40 6B00 BFF8                  		bmi.w	DeleteObject
00011E44 0C40 0280                  		cmpi.w	#$280,d0
00011E48 6200 BFF0                  		bhi.w	DeleteObject
00011E4C 6000 BFB0                  		bra.w	DisplaySprite
00011E50                            ; ===========================================================================
00011E50 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011E52 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011E54 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011E56 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011E58 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011E5A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011E5C                            ; ===========================================================================
00011E5C                            
00011E5C                            Obj5E_Main:				; XREF: Obj5E_Index
00011E5C 5428 0024                  		addq.b	#2,$24(a0)
00011E60 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011E68 317C 0374 0002             		move.w	#$374,2(a0)
00011E6E 0028 0004 0001             		ori.b	#4,1(a0)
00011E74 117C 0004 0018             		move.b	#4,$18(a0)
00011E7A 117C 0030 0019             		move.b	#$30,$19(a0)
00011E80 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E86 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011E8A 6600                       		bne.s	loc_116D2	; if not, branch
00011E8C 6100 C40C                  		bsr.w	SingleObjLoad2
00011E90 6600                       		bne.s	loc_116D2
00011E92 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011E96 5C29 0024                  		addq.b	#6,$24(a1)
00011E9A 3368 0008 0008             		move.w	8(a0),8(a1)
00011EA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011EA6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011EAC 2348 003C                  		move.l	a0,$3C(a1)
00011EB0                            
00011EB0                            loc_116D2:
00011EB0 0828 0000 0022             		btst	#0,$22(a0)
00011EB6 6700                       		beq.s	loc_116E0
00011EB8 117C 0002 001A             		move.b	#2,$1A(a0)
00011EBE                            
00011EBE                            loc_116E0:
00011EBE 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011EC4                            
00011EC4                            Obj5E_Slope:				; XREF: Obj5E_Index
00011EC4 1228 003A                  		move.b	$3A(a0),d1
00011EC8 6100 0000                  		bsr.w	loc_11766
00011ECC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011ED2 0828 0000 001A             		btst	#0,$1A(a0)
00011ED8 6700                       		beq.s	loc_11702
00011EDA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011EE0                            
00011EE0                            loc_11702:
00011EE0 43F8 D000                  		lea	($FFFFD000).w,a1
00011EE4 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011EEA 323C 0030                  		move.w	#$30,d1
00011EEE 4EB9 0000 7B5C             		jsr	(SlopeObject).l
00011EF4 4E75                       		rts	
00011EF6                            ; ===========================================================================
00011EF6                            
00011EF6                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011EF6 6100 0000                  		bsr.w	loc_1174A
00011EFA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F00 0828 0000 001A             		btst	#0,$1A(a0)
00011F06 6700                       		beq.s	loc_11730
00011F08 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F0E                            
00011F0E                            loc_11730:
00011F0E 323C 0030                  		move.w	#$30,d1
00011F12 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
00011F18 323C 0030                  		move.w	#$30,d1
00011F1C 3428 0008                  		move.w	8(a0),d2
00011F20 4EB9 0000 8BEC             		jsr	SlopeObject2
00011F26 4E75                       		rts	
00011F28                            ; ===========================================================================
00011F28                            
00011F28                            loc_1174A:				; XREF: Obj5E_Slope2
00011F28 7202                       		moveq	#2,d1
00011F2A 43F8 D000                  		lea	($FFFFD000).w,a1
00011F2E 3028 0008                  		move.w	8(a0),d0
00011F32 9069 0008                  		sub.w	8(a1),d0
00011F36 6400                       		bcc.s	loc_1175E
00011F38 4440                       		neg.w	d0
00011F3A 7200                       		moveq	#0,d1
00011F3C                            
00011F3C                            loc_1175E:
00011F3C 0C40 0008                  		cmpi.w	#8,d0
00011F40 6400                       		bcc.s	loc_11766
00011F42 7201                       		moveq	#1,d1
00011F44                            
00011F44                            loc_11766:
00011F44 1028 001A                  		move.b	$1A(a0),d0
00011F48 B001                       		cmp.b	d1,d0
00011F4A 6700                       		beq.s	locret_11790
00011F4C 6400                       		bcc.s	loc_11772
00011F4E 5400                       		addq.b	#2,d0
00011F50                            
00011F50                            loc_11772:
00011F50 5300                       		subq.b	#1,d0
00011F52 1140 001A                  		move.b	d0,$1A(a0)
00011F56 1141 003A                  		move.b	d1,$3A(a0)
00011F5A 08A8 0000 0001             		bclr	#0,1(a0)
00011F60 0828 0001 001A             		btst	#1,$1A(a0)
00011F66 6700                       		beq.s	locret_11790
00011F68 08E8 0000 0001             		bset	#0,1(a0)
00011F6E                            
00011F6E                            locret_11790:
00011F6E 4E75                       		rts	
00011F70                            ; ===========================================================================
00011F70                            
00011F70                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011F70 5428 0024                  		addq.b	#2,$24(a0)
00011F74 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011F7C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011F82 0028 0004 0001             		ori.b	#4,1(a0)
00011F88 117C 0004 0018             		move.b	#4,$18(a0)
00011F8E 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F94 117C 000C 0019             		move.b	#$C,$19(a0)
00011F9A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011FA0 0668 0028 0008             		addi.w	#$28,8(a0)
00011FA6 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011FAC 117C 0001 001A             		move.b	#1,$1A(a0)
00011FB2 0828 0000 0022             		btst	#0,$22(a0)
00011FB8 6700                       		beq.s	Obj5E_MoveSpike
00011FBA 0468 0050 0008             		subi.w	#$50,8(a0)
00011FC0 117C 0002 003A             		move.b	#2,$3A(a0)
00011FC6                            
00011FC6                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011FC6 2268 003C                  		movea.l	$3C(a0),a1
00011FCA 7000                       		moveq	#0,d0
00011FCC 1028 003A                  		move.b	$3A(a0),d0
00011FD0 9029 003A                  		sub.b	$3A(a1),d0
00011FD4 6700                       		beq.s	loc_1183E
00011FD6 6400                       		bcc.s	loc_117FC
00011FD8 4400                       		neg.b	d0
00011FDA                            
00011FDA                            loc_117FC:
00011FDA 323C F7E8                  		move.w	#-$818,d1
00011FDE 343C FEEC                  		move.w	#-$114,d2
00011FE2 0C00 0001                  		cmpi.b	#1,d0
00011FE6 6700                       		beq.s	loc_11822
00011FE8 323C F510                  		move.w	#-$AF0,d1
00011FEC 343C FF34                  		move.w	#-$CC,d2
00011FF0 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011FF6 6D00                       		blt.s	loc_11822
00011FF8 323C F200                  		move.w	#-$E00,d1
00011FFC 343C FF60                  		move.w	#-$A0,d2
00012000                            
00012000                            loc_11822:
00012000 3141 0012                  		move.w	d1,$12(a0)
00012004 3142 0010                  		move.w	d2,$10(a0)
00012008 3028 0008                  		move.w	8(a0),d0
0001200C 9068 0030                  		sub.w	$30(a0),d0
00012010 6400                       		bcc.s	loc_11838
00012012 4468 0010                  		neg.w	$10(a0)
00012016                            
00012016                            loc_11838:
00012016 5428 0024                  		addq.b	#2,$24(a0)
0001201A 6000                       		bra.s	Obj5E_SpikeFall
0001201C                            ; ===========================================================================
0001201C                            
0001201C                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001201C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012022 7000                       		moveq	#0,d0
00012024 1029 001A                  		move.b	$1A(a1),d0
00012028 343C 0028                  		move.w	#$28,d2
0001202C 3228 0008                  		move.w	8(a0),d1
00012030 9268 0030                  		sub.w	$30(a0),d1
00012034 6400                       		bcc.s	loc_1185C
00012036 4442                       		neg.w	d2
00012038 5440                       		addq.w	#2,d0
0001203A                            
0001203A                            loc_1185C:
0001203A D040                       		add.w	d0,d0
0001203C 3228 0034                  		move.w	$34(a0),d1
00012040 D272 0000                  		add.w	(a2,d0.w),d1
00012044 3141 000C                  		move.w	d1,$C(a0)
00012048 D468 0030                  		add.w	$30(a0),d2
0001204C 3142 0008                  		move.w	d2,8(a0)
00012050 4268 000E                  		clr.w	$E(a0)
00012054 4268 000A                  		clr.w	$A(a0)
00012058 4E75                       		rts	
0001205A                            ; ===========================================================================
0001205A                            
0001205A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001205A 4A68 0012                  		tst.w	$12(a0)
0001205E 6A00                       		bpl.s	loc_1189A
00012060 6100 BD4A                  		bsr.w	ObjectFall
00012064 3028 0034                  		move.w	$34(a0),d0
00012068 0440 002F                  		subi.w	#$2F,d0
0001206C B068 000C                  		cmp.w	$C(a0),d0
00012070 6E00                       		bgt.s	locret_11898
00012072 6100 BD38                  		bsr.w	ObjectFall
00012076                            
00012076                            locret_11898:
00012076 4E75                       		rts	
00012078                            ; ===========================================================================
00012078                            
00012078                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012078 6100 BD32                  		bsr.w	ObjectFall
0001207C 2268 003C                  		movea.l	$3C(a0),a1
00012080 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012086 7000                       		moveq	#0,d0
00012088 1029 001A                  		move.b	$1A(a1),d0
0001208C 3228 0008                  		move.w	8(a0),d1
00012090 9268 0030                  		sub.w	$30(a0),d1
00012094 6400                       		bcc.s	loc_118BA
00012096 5440                       		addq.w	#2,d0
00012098                            
00012098                            loc_118BA:
00012098 D040                       		add.w	d0,d0
0001209A 3228 0034                  		move.w	$34(a0),d1
0001209E D272 0000                  		add.w	(a2,d0.w),d1
000120A2 B268 000C                  		cmp.w	$C(a0),d1
000120A6 6E00                       		bgt.s	locret_11938
000120A8 2268 003C                  		movea.l	$3C(a0),a1
000120AC 7202                       		moveq	#2,d1
000120AE 4A68 0010                  		tst.w	$10(a0)
000120B2 6B00                       		bmi.s	Obj5E_Spring
000120B4 7200                       		moveq	#0,d1
000120B6                            
000120B6                            Obj5E_Spring:
000120B6 1341 003A                  		move.b	d1,$3A(a1)
000120BA 1141 003A                  		move.b	d1,$3A(a0)
000120BE B229 001A                  		cmp.b	$1A(a1),d1
000120C2 6700                       		beq.s	loc_1192C
000120C4 08A9 0003 0022             		bclr	#3,$22(a1)
000120CA 6700                       		beq.s	loc_1192C
000120CC 4229 0025                  		clr.b	$25(a1)
000120D0 137C 0002 0024             		move.b	#2,$24(a1)
000120D6 45F8 D000                  		lea	($FFFFD000).w,a2
000120DA 3568 0012 0012             		move.w	$12(a0),$12(a2)
000120E0 446A 0012                  		neg.w	$12(a2)
000120E4 08EA 0001 0022             		bset	#1,$22(a2)
000120EA 08AA 0003 0022             		bclr	#3,$22(a2)
000120F0 422A 003C                  		clr.b	$3C(a2)
000120F4 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000120FA 157C 0002 0024             		move.b	#2,$24(a2)
00012100 303C 00CC                  		move.w	#$CC,d0
00012104 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0001210A                            
0001210A                            loc_1192C:
0001210A 4268 0010                  		clr.w	$10(a0)
0001210E 4268 0012                  		clr.w	$12(a0)
00012112 5528 0024                  		subq.b	#2,$24(a0)
00012116                            
00012116                            locret_11938:
00012116 4E75                       		rts	
00012118                            ; ===========================================================================
00012118 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012122                            
00012122                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012152                            		even
00012152                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012182                            		even
00012182                            ; ---------------------------------------------------------------------------
00012182                            ; Sprite mappings - seesaws (SLZ)
00012182                            ; ---------------------------------------------------------------------------
00012182                            Map_obj5E:
00012182                            	include "_maps\obj5E.asm"
00012182                            ; ---------------------------------------------------------------------------
00012182                            ; Sprite mappings - seesaws (SLZ)
00012182                            ; ---------------------------------------------------------------------------
00012182 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012186 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001218A 07                         byte_119AC:	dc.b 7
0001218B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012190 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012195 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001219A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001219F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000121A4 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000121A9 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000121AE 04                         byte_119D0:	dc.b 4
000121AF E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000121B4 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000121B9 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000121BE E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000121C4 00                         		even
000121C4 00                         		even
000121C4                            
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            Map_obj5Ea:
000121C4                            	include "_maps\obj5Eballs.asm"
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000121C4                            ; ---------------------------------------------------------------------------
000121C4 0000                       		dc.w byte_119EA-Map_obj5Ea
000121C6 0000                       		dc.w byte_119F0-Map_obj5Ea
000121C8 01                         byte_119EA:	dc.b 1
000121C9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000121CE 01                         byte_119F0:	dc.b 1
000121CF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000121D4                            		even
000121D4                            		even
000121D4                            
000121D4                            ; ===========================================================================
000121D4                            ; ---------------------------------------------------------------------------
000121D4                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000121D4                            ; ---------------------------------------------------------------------------
000121D4                            
000121D4                            Obj5F:					; XREF: Obj_Index
000121D4 7000                       		moveq	#0,d0
000121D6 1028 0024                  		move.b	$24(a0),d0
000121DA 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000121DE 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000121E2                            ; ===========================================================================
000121E2 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000121E4 0000                       		dc.w Obj5F_Action-Obj5F_Index
000121E6 0000                       		dc.w Obj5F_Display-Obj5F_Index
000121E8 0000                       		dc.w Obj5F_End-Obj5F_Index
000121EA                            ; ===========================================================================
000121EA                            
000121EA                            Obj5F_Main:				; XREF: Obj5F_Index
000121EA 5428 0024                  		addq.b	#2,$24(a0)
000121EE 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000121F6 317C 0400 0002             		move.w	#$400,2(a0)
000121FC 0028 0004 0001             		ori.b	#4,1(a0)
00012202 117C 0003 0018             		move.b	#3,$18(a0)
00012208 117C 000C 0019             		move.b	#$C,$19(a0)
0001220E 1028 0028                  		move.b	$28(a0),d0
00012212 6700                       		beq.s	loc_11A3C
00012214 1140 0024                  		move.b	d0,$24(a0)
00012218 4E75                       		rts	
0001221A                            ; ===========================================================================
0001221A                            
0001221A                            loc_11A3C:
0001221A 117C 009A 0020             		move.b	#$9A,$20(a0)
00012220 0868 0000 0022             		bchg	#0,$22(a0)
00012226                            
00012226                            Obj5F_Action:				; XREF: Obj5F_Index
00012226 7000                       		moveq	#0,d0
00012228 1028 0025                  		move.b	$25(a0),d0
0001222C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012230 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012234 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001223A 6100 8C82                  		bsr.w	AnimateSprite
0001223E 6000 DC66                  		bra.w	MarkObjGone
00012242                            ; ===========================================================================
00012242 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012244 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012246 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012248                            ; ===========================================================================
00012248                            
00012248                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012248 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001224C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012250 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012252 5428 0025                  		addq.b	#2,$25(a0)
00012256 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001225C 317C 0010 0010             		move.w	#$10,$10(a0)
00012262 117C 0001 001C             		move.b	#1,$1C(a0)
00012268 0868 0000 0022             		bchg	#0,$22(a0)
0001226E 6700                       		beq.s	locret_11A96
00012270 4468 0010                  		neg.w	$10(a0)		; change direction
00012274                            
00012274                            locret_11A96:
00012274 4E75                       		rts	
00012276                            ; ===========================================================================
00012276                            
00012276                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012276 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001227A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001227E 6B00                       		bmi.s	loc_11AA8
00012280 6100 BB56                  		bsr.w	SpeedToPos
00012284 4E75                       		rts	
00012286                            ; ===========================================================================
00012286                            
00012286                            loc_11AA8:
00012286 5528 0025                  		subq.b	#2,$25(a0)
0001228A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012290 4268 0010                  		clr.w	$10(a0)		; stop walking
00012294 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001229A 4E75                       		rts	
0001229C                            ; ===========================================================================
0001229C                            
0001229C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001229C 5368 0030                  		subq.w	#1,$30(a0)
000122A0 6A00                       		bpl.s	locret_11AD0
000122A2 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000122A6 117C 0000 0024             		move.b	#0,$24(a0)
000122AC                            
000122AC                            locret_11AD0:
000122AC 4E75                       		rts	
000122AE                            ; ===========================================================================
000122AE                            
000122AE                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000122AE 3038 D008                  		move.w	($FFFFD008).w,d0
000122B2 9068 0008                  		sub.w	8(a0),d0
000122B6 6400                       		bcc.s	loc_11ADE
000122B8 4440                       		neg.w	d0
000122BA                            
000122BA                            loc_11ADE:
000122BA 0C40 0060                  		cmpi.w	#$60,d0
000122BE 6400                       		bcc.s	locret_11B5E
000122C0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000122C4 9068 000C                  		sub.w	$C(a0),d0
000122C8 6400                       		bcc.s	Obj5F_MakeFuse
000122CA 4440                       		neg.w	d0
000122CC                            
000122CC                            Obj5F_MakeFuse:
000122CC 0C40 0060                  		cmpi.w	#$60,d0
000122D0 6400                       		bcc.s	locret_11B5E
000122D2 4A78 FE08                  		tst.w	($FFFFFE08).w
000122D6 6600                       		bne.s	locret_11B5E
000122D8 117C 0004 0025             		move.b	#4,$25(a0)
000122DE 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000122E4 4268 0010                  		clr.w	$10(a0)
000122E8 117C 0002 001C             		move.b	#2,$1C(a0)
000122EE 6100 BFAA                  		bsr.w	SingleObjLoad2
000122F2 6600                       		bne.s	locret_11B5E
000122F4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000122F8 3368 0008 0008             		move.w	8(a0),8(a1)
000122FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012304 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001230A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012310 137C 0004 0028             		move.b	#4,$28(a1)
00012316 137C 0003 001C             		move.b	#3,$1C(a1)
0001231C 337C 0010 0012             		move.w	#$10,$12(a1)
00012322 0828 0001 0022             		btst	#1,$22(a0)
00012328 6700                       		beq.s	loc_11B54
0001232A 4469 0012                  		neg.w	$12(a1)
0001232E                            
0001232E                            loc_11B54:
0001232E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012334 2348 003C                  		move.l	a0,$3C(a1)
00012338                            
00012338                            locret_11B5E:
00012338 4E75                       		rts	
0001233A                            ; ===========================================================================
0001233A                            
0001233A                            Obj5F_Display:				; XREF: Obj5F_Index
0001233A 6100                       		bsr.s	loc_11B70
0001233C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012342 6100 8B7A                  		bsr.w	AnimateSprite
00012346 6000 DB5E                  		bra.w	MarkObjGone
0001234A                            ; ===========================================================================
0001234A                            
0001234A                            loc_11B70:
0001234A 5368 0030                  		subq.w	#1,$30(a0)
0001234E 6B00                       		bmi.s	loc_11B7C
00012350 6100 BA86                  		bsr.w	SpeedToPos
00012354 4E75                       		rts	
00012356                            ; ===========================================================================
00012356                            
00012356                            loc_11B7C:
00012356 4268 0030                  		clr.w	$30(a0)
0001235A 4228 0024                  		clr.b	$24(a0)
0001235E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012364 7203                       		moveq	#3,d1
00012366 2248                       		movea.l	a0,a1
00012368 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001236E 6000                       		bra.s	Obj5F_MakeShrap
00012370                            ; ===========================================================================
00012370                            
00012370                            Obj5F_Loop:
00012370 6100 BF28                  		bsr.w	SingleObjLoad2
00012374 6600                       		bne.s	loc_11BCE
00012376                            
00012376                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012376 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001237A 3368 0008 0008             		move.w	8(a0),8(a1)
00012380 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012386 137C 0006 0028             		move.b	#6,$28(a1)
0001238C 137C 0004 001C             		move.b	#4,$1C(a1)
00012392 335A 0010                  		move.w	(a2)+,$10(a1)
00012396 335A 0012                  		move.w	(a2)+,$12(a1)
0001239A 137C 0098 0020             		move.b	#$98,$20(a1)
000123A0 08E9 0007 0001             		bset	#7,1(a1)
000123A6                            
000123A6                            loc_11BCE:
000123A6 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000123AA                            
000123AA 117C 0006 0024             		move.b	#6,$24(a0)
000123B0                            
000123B0                            Obj5F_End:				; XREF: Obj5F_Index
000123B0 6100 BA26                  		bsr.w	SpeedToPos
000123B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000123BA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123C0 6100 8AFC                  		bsr.w	AnimateSprite
000123C4 4A28 0001                  		tst.b	1(a0)
000123C8 6A00 BA70                  		bpl.w	DeleteObject
000123CC 6000 BA30                  		bra.w	DisplaySprite
000123D0                            ; ===========================================================================
000123D0 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000123E0                            
000123E0                            Ani_obj5F:
000123E0                            	include "_anim\obj5F.asm"
000123E0                            ; ---------------------------------------------------------------------------
000123E0                            ; Animation script - Bomb enemy
000123E0                            ; ---------------------------------------------------------------------------
000123E0 0000                       		dc.w byte_11C12-Ani_obj5F
000123E2 0000                       		dc.w byte_11C16-Ani_obj5F
000123E4 0000                       		dc.w byte_11C1C-Ani_obj5F
000123E6 0000                       		dc.w byte_11C20-Ani_obj5F
000123E8 0000                       		dc.w byte_11C24-Ani_obj5F
000123EA 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000123EE 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000123F4 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000123F8 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000123FC 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012400                            		even
00012400                            		even
00012400                            
00012400                            ; ---------------------------------------------------------------------------
00012400                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012400                            ; ---------------------------------------------------------------------------
00012400                            Map_obj5F:
00012400                            	include "_maps\obj5F.asm"
00012400                            ; ---------------------------------------------------------------------------
00012400                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012400                            ; ---------------------------------------------------------------------------
00012400 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012404 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012408 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001240C 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012410 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012414 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012418 03                         byte_11C40:	dc.b 3
00012419 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001241E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012423 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012428 03                         byte_11C50:	dc.b 3
00012429 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001242E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012433 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012438 03                         byte_11C60:	dc.b 3
00012439 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001243E 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012443 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012448 03                         byte_11C70:	dc.b 3
00012449 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001244E 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012453 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012458 03                         byte_11C80:	dc.b 3
00012459 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001245E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012463 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012468 03                         byte_11C90:	dc.b 3
00012469 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001246E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012473 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012478 02                         byte_11CA0:	dc.b 2
00012479 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001247E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012483 02                         byte_11CAB:	dc.b 2
00012484 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012489 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001248E 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001248F E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012494 01                         byte_11CBC:	dc.b 1			; fuse
00012495 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001249A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001249B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000124A0 01                         byte_11CC8:	dc.b 1			; fireball
000124A1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000124A6                            		even
000124A6                            		even
000124A6                            
000124A6                            ; ===========================================================================
000124A6                            ; ---------------------------------------------------------------------------
000124A6                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000124A6                            ; ---------------------------------------------------------------------------
000124A6                            
000124A6                            Obj60:					; XREF: Obj_Index
000124A6 7000                       		moveq	#0,d0
000124A8 1028 0024                  		move.b	$24(a0),d0
000124AC 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000124B0 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000124B4                            ; ===========================================================================
000124B4 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000124B6 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000124B8 0000                       		dc.w Obj60_Display-Obj60_Index
000124BA 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000124BC 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000124BE                            ; ===========================================================================
000124BE                            
000124BE                            Obj60_Main:				; XREF: Obj60_Index
000124BE 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000124C6 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000124CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000124D2 6700                       		beq.s	loc_11D02
000124D4 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000124DA                            
000124DA                            loc_11D02:
000124DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000124E0 6600                       		bne.s	loc_11D10
000124E2 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000124E8                            
000124E8                            loc_11D10:
000124E8 0028 0004 0001             		ori.b	#4,1(a0)
000124EE 117C 0004 0018             		move.b	#4,$18(a0)
000124F4 117C 000B 0020             		move.b	#$B,$20(a0)
000124FA 117C 000C 0019             		move.b	#$C,$19(a0)
00012500 7400                       		moveq	#0,d2
00012502 45E8 0037                  		lea	$37(a0),a2
00012506 264A                       		movea.l	a2,a3
00012508 524A                       		addq.w	#1,a2
0001250A 7203                       		moveq	#3,d1
0001250C                            
0001250C                            Obj60_MakeOrbs:
0001250C 6100 BD8C                  		bsr.w	SingleObjLoad2
00012510 6600                       		bne.s	loc_11D90
00012512 5213                       		addq.b	#1,(a3)
00012514 3A09                       		move.w	a1,d5
00012516 0445 D000                  		subi.w	#-$3000,d5
0001251A EC4D                       		lsr.w	#6,d5
0001251C 0245 007F                  		andi.w	#$7F,d5
00012520 14C5                       		move.b	d5,(a2)+
00012522 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012524 137C 0006 0024             		move.b	#6,$24(a1)
0001252A 2368 0004 0004             		move.l	4(a0),4(a1)
00012530 3368 0002 0002             		move.w	2(a0),2(a1)
00012536 0029 0004 0001             		ori.b	#4,1(a1)
0001253C 137C 0004 0018             		move.b	#4,$18(a1)
00012542 137C 0008 0019             		move.b	#8,$19(a1)
00012548 137C 0003 001A             		move.b	#3,$1A(a1)
0001254E 137C 0098 0020             		move.b	#$98,$20(a1)
00012554 1342 0026                  		move.b	d2,$26(a1)
00012558 0602 0040                  		addi.b	#$40,d2
0001255C 2348 003C                  		move.l	a0,$3C(a1)
00012560 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012564                            
00012564                            loc_11D90:
00012564 7001                       		moveq	#1,d0
00012566 0828 0000 0022             		btst	#0,$22(a0)
0001256C 6700                       		beq.s	Obj60_Move
0001256E 4440                       		neg.w	d0
00012570                            
00012570                            Obj60_Move:
00012570 1140 0036                  		move.b	d0,$36(a0)
00012574 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001257A 5428 0024                  		addq.b	#2,$24(a0)
0001257E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012584 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001258A 6700                       		beq.s	locret_11DBC	; if not, branch
0001258C 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012590                            
00012590                            locret_11DBC:
00012590 4E75                       		rts	
00012592                            ; ===========================================================================
00012592                            
00012592                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012592 3038 D008                  		move.w	($FFFFD008).w,d0
00012596 9068 0008                  		sub.w	8(a0),d0
0001259A 6400                       		bcc.s	loc_11DCA
0001259C 4440                       		neg.w	d0
0001259E                            
0001259E                            loc_11DCA:
0001259E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000125A2 6400                       		bcc.s	Obj60_Animate	; if not, branch
000125A4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000125A8 9068 000C                  		sub.w	$C(a0),d0
000125AC 6400                       		bcc.s	loc_11DDC
000125AE 4440                       		neg.w	d0
000125B0                            
000125B0                            loc_11DDC:
000125B0 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000125B4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000125B6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000125BA 6600                       		bne.s	Obj60_Animate	; if yes, branch
000125BC 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000125C2                            
000125C2                            Obj60_Animate:
000125C2 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000125C8 6100 88F4                  		bsr.w	AnimateSprite
000125CC 6000 0000                  		bra.w	Obj60_ChkDel
000125D0                            ; ===========================================================================
000125D0                            
000125D0                            Obj60_Display:				; XREF: Obj60_Index
000125D0 6100 B806                  		bsr.w	SpeedToPos
000125D4                            
000125D4                            Obj60_ChkDel:				; XREF: Obj60_Animate
000125D4 3028 0008                  		move.w	8(a0),d0
000125D8 0240 FF80                  		andi.w	#$FF80,d0
000125DC 3238 F700                  		move.w	($FFFFF700).w,d1
000125E0 0441 0080                  		subi.w	#$80,d1
000125E4 0241 FF80                  		andi.w	#$FF80,d1
000125E8 9041                       		sub.w	d1,d0
000125EA 0C40 0280                  		cmpi.w	#$280,d0
000125EE 6200 0000                  		bhi.w	Obj60_ChkGone
000125F2 6000 B80A                  		bra.w	DisplaySprite
000125F6                            ; ===========================================================================
000125F6                            
000125F6                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000125F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000125FA 7000                       		moveq	#0,d0
000125FC 1028 0023                  		move.b	$23(a0),d0
00012600 6700                       		beq.s	loc_11E34
00012602 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012608                            
00012608                            loc_11E34:
00012608 45E8 0037                  		lea	$37(a0),a2
0001260C 7400                       		moveq	#0,d2
0001260E 141A                       		move.b	(a2)+,d2
00012610 5342                       		subq.w	#1,d2
00012612 6500                       		bcs.s	Obj60_Delete
00012614                            
00012614                            loc_11E40:
00012614 7000                       		moveq	#0,d0
00012616 101A                       		move.b	(a2)+,d0
00012618 ED48                       		lsl.w	#6,d0
0001261A 0680 00FF D000             		addi.l	#$FFD000,d0
00012620 2240                       		movea.l	d0,a1
00012622 6100 B818                  		bsr.w	DeleteObject2
00012626 51CA FFEC                  		dbf	d2,loc_11E40
0001262A                            
0001262A                            Obj60_Delete:
0001262A 6000 B80E                  		bra.w	DeleteObject
0001262E                            ; ===========================================================================
0001262E                            
0001262E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001262E 2268 003C                  		movea.l	$3C(a0),a1
00012632 0C11 0060                  		cmpi.b	#$60,0(a1)
00012636 6600 B802                  		bne.w	DeleteObject
0001263A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012640 6600                       		bne.s	Obj60_Circle
00012642 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012648 6600                       		bne.s	Obj60_Circle
0001264A 5428 0024                  		addq.b	#2,$24(a0)
0001264E 5329 0037                  		subq.b	#1,$37(a1)
00012652 6600                       		bne.s	Obj60_FireOrb
00012654 5429 0024                  		addq.b	#2,$24(a1)
00012658                            
00012658                            Obj60_FireOrb:
00012658 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001265E 0829 0000 0022             		btst	#0,$22(a1)
00012664 6700                       		beq.s	Obj60_Display2
00012666 4468 0010                  		neg.w	$10(a0)
0001266A                            
0001266A                            Obj60_Display2:
0001266A 6000 B792                  		bra.w	DisplaySprite
0001266E                            ; ===========================================================================
0001266E                            
0001266E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001266E 1028 0026                  		move.b	$26(a0),d0
00012672 4EB9 0000 2CEC             		jsr	(CalcSine).l
00012678 E841                       		asr.w	#4,d1
0001267A D269 0008                  		add.w	8(a1),d1
0001267E 3141 0008                  		move.w	d1,8(a0)
00012682 E840                       		asr.w	#4,d0
00012684 D069 000C                  		add.w	$C(a1),d0
00012688 3140 000C                  		move.w	d0,$C(a0)
0001268C 1029 0036                  		move.b	$36(a1),d0
00012690 D128 0026                  		add.b	d0,$26(a0)
00012694 6000 B768                  		bra.w	DisplaySprite
00012698                            ; ===========================================================================
00012698                            
00012698                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012698 6100 B73E                  		bsr.w	SpeedToPos
0001269C 4A28 0001                  		tst.b	1(a0)
000126A0 6A00 B798                  		bpl.w	DeleteObject
000126A4 6000 B758                  		bra.w	DisplaySprite
000126A8                            ; ===========================================================================
000126A8                            Ani_obj60:
000126A8                            	include "_anim\obj60.asm"
000126A8                            ; ---------------------------------------------------------------------------
000126A8                            ; Animation script - Orbinaut enemy
000126A8                            ; ---------------------------------------------------------------------------
000126A8 0000                       		dc.w byte_11EDA-Ani_obj60
000126AA 0000                       		dc.w byte_11EDE-Ani_obj60
000126AC 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000126B0 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000126B6                            		even
000126B6                            		even
000126B6                            
000126B6                            ; ---------------------------------------------------------------------------
000126B6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000126B6                            ; ---------------------------------------------------------------------------
000126B6                            Map_obj60:
000126B6                            	include "_maps\obj60.asm"
000126B6                            ; ---------------------------------------------------------------------------
000126B6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000126B6                            ; ---------------------------------------------------------------------------
000126B6 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000126BA 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000126BE 01                         byte_11EEC:	dc.b 1
000126BF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000126C4 01                         byte_11EF2:	dc.b 1
000126C5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000126CA 01                         byte_11EF8:	dc.b 1
000126CB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000126D0 01                         byte_11EFE:	dc.b 1
000126D1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000126D6                            		even
000126D6                            		even
000126D6                            
000126D6                            ; ===========================================================================
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            ; Object 16 - harpoon (LZ)
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            
000126D6                            Obj16:					; XREF: Obj_Index
000126D6 7000                       		moveq	#0,d0
000126D8 1028 0024                  		move.b	$24(a0),d0
000126DC 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000126E0 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000126E4                            ; ===========================================================================
000126E4 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000126E6 0000                       		dc.w Obj16_Move-Obj16_Index
000126E8 0000                       		dc.w Obj16_Wait-Obj16_Index
000126EA                            ; ===========================================================================
000126EA                            
000126EA                            Obj16_Main:				; XREF: Obj16_Index
000126EA 5428 0024                  		addq.b	#2,$24(a0)
000126EE 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000126F6 317C 03CC 0002             		move.w	#$3CC,2(a0)
000126FC 0028 0004 0001             		ori.b	#4,1(a0)
00012702 117C 0004 0018             		move.b	#4,$18(a0)
00012708 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001270E 117C 0014 0019             		move.b	#$14,$19(a0)
00012714 317C 003C 0030             		move.w	#60,$30(a0)
0001271A                            
0001271A                            Obj16_Move:				; XREF: Obj16_Index
0001271A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012720 6100 879C                  		bsr.w	AnimateSprite
00012724 7000                       		moveq	#0,d0
00012726 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001272A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012730 6000 D774                  		bra.w	MarkObjGone
00012734                            ; ===========================================================================
00012734 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001273A                            ; ===========================================================================
0001273A                            
0001273A                            Obj16_Wait:				; XREF: Obj16_Index
0001273A 5368 0030                  		subq.w	#1,$30(a0)
0001273E 6A00                       		bpl.s	Obj16_ChkDel
00012740 317C 003C 0030             		move.w	#60,$30(a0)
00012746 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001274A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012750                            
00012750                            Obj16_ChkDel:
00012750 6000 D754                  		bra.w	MarkObjGone
00012754                            ; ===========================================================================
00012754                            Ani_obj16:
00012754                            	include "_anim\obj16.asm"
00012754                            ; ---------------------------------------------------------------------------
00012754                            ; Animation script - harpoon (LZ)
00012754                            ; ---------------------------------------------------------------------------
00012754 0000                       		dc.w byte_11F8A-Ani_obj16
00012756 0000                       		dc.w byte_11F8E-Ani_obj16
00012758 0000                       		dc.w byte_11F92-Ani_obj16
0001275A 0000                       		dc.w byte_11F96-Ani_obj16
0001275C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012760 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012764 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012768 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001276C                            		even
0001276C                            		even
0001276C                            
0001276C                            ; ---------------------------------------------------------------------------
0001276C                            ; Sprite mappings - harpoon (LZ)
0001276C                            ; ---------------------------------------------------------------------------
0001276C                            Map_obj16:
0001276C                            	include "_maps\obj16.asm"
0001276C                            ; ---------------------------------------------------------------------------
0001276C                            ; Sprite mappings - harpoon (LZ)
0001276C                            ; ---------------------------------------------------------------------------
0001276C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012770 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012774 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012778 01                         byte_11FA6:	dc.b 1
00012779 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001277E 01                         byte_11FAC:	dc.b 1
0001277F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012784 02                         byte_11FB2:	dc.b 2
00012785 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001278A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001278F 01                         byte_11FBD:	dc.b 1
00012790 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012795 01                         byte_11FC3:	dc.b 1
00012796 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001279B 02                         byte_11FC9:	dc.b 2
0001279C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000127A1 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000127A6                            		even
000127A6                            		even
000127A6                            
000127A6                            ; ===========================================================================
000127A6                            ; ---------------------------------------------------------------------------
000127A6                            ; Object 61 - blocks (LZ)
000127A6                            ; ---------------------------------------------------------------------------
000127A6                            
000127A6                            Obj61:					; XREF: Obj_Index
000127A6 7000                       		moveq	#0,d0
000127A8 1028 0024                  		move.b	$24(a0),d0
000127AC 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000127B0 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000127B4                            ; ===========================================================================
000127B4 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000127B6 0000                       		dc.w Obj61_Action-Obj61_Index
000127B8                            
000127B8 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000127BA 200C                       		dc.b $20, $C
000127BC 1010                       		dc.b $10, $10
000127BE 1010                       		dc.b $10, $10
000127C0                            ; ===========================================================================
000127C0                            
000127C0                            Obj61_Main:				; XREF: Obj61_Index
000127C0 5428 0024                  		addq.b	#2,$24(a0)
000127C4 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000127CC 317C 43E6 0002             		move.w	#$43E6,2(a0)
000127D2 117C 0004 0001             		move.b	#4,1(a0)
000127D8 117C 0003 0018             		move.b	#3,$18(a0)
000127DE 7000                       		moveq	#0,d0
000127E0 1028 0028                  		move.b	$28(a0),d0
000127E4 E648                       		lsr.w	#3,d0
000127E6 0240 000E                  		andi.w	#$E,d0
000127EA 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000127EE 115A 0019                  		move.b	(a2)+,$19(a0)
000127F2 1152 0016                  		move.b	(a2),$16(a0)
000127F6 E248                       		lsr.w	#1,d0
000127F8 1140 001A                  		move.b	d0,$1A(a0)
000127FC 3168 0008 0034             		move.w	8(a0),$34(a0)
00012802 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012808 1028 0028                  		move.b	$28(a0),d0
0001280C 0200 000F                  		andi.b	#$F,d0
00012810 6700                       		beq.s	Obj61_Action
00012812 0C00 0007                  		cmpi.b	#7,d0
00012816 6700                       		beq.s	Obj61_Action
00012818 117C 0001 0038             		move.b	#1,$38(a0)
0001281E                            
0001281E                            Obj61_Action:				; XREF: Obj61_Index
0001281E 3F28 0008                  		move.w	8(a0),-(sp)
00012822 7000                       		moveq	#0,d0
00012824 1028 0028                  		move.b	$28(a0),d0
00012828 0240 000F                  		andi.w	#$F,d0
0001282C D040                       		add.w	d0,d0
0001282E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012832 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012836 381F                       		move.w	(sp)+,d4
00012838 4A28 0001                  		tst.b	1(a0)
0001283C 6A00                       		bpl.s	Obj61_ChkDel
0001283E 7200                       		moveq	#0,d1
00012840 1228 0019                  		move.b	$19(a0),d1
00012844 0641 000B                  		addi.w	#$B,d1
00012848 7400                       		moveq	#0,d2
0001284A 1428 0016                  		move.b	$16(a0),d2
0001284E 3602                       		move.w	d2,d3
00012850 5243                       		addq.w	#1,d3
00012852 6100 D97A                  		bsr.w	SolidObject
00012856 1144 003F                  		move.b	d4,$3F(a0)
0001285A 6100 0000                  		bsr.w	loc_12180
0001285E                            
0001285E                            Obj61_ChkDel:
0001285E 3028 0034                  		move.w	$34(a0),d0
00012862 0240 FF80                  		andi.w	#$FF80,d0
00012866 3238 F700                  		move.w	($FFFFF700).w,d1
0001286A 0441 0080                  		subi.w	#$80,d1
0001286E 0241 FF80                  		andi.w	#$FF80,d1
00012872 9041                       		sub.w	d1,d0
00012874 0C40 0280                  		cmpi.w	#$280,d0
00012878 6200 B5C0                  		bhi.w	DeleteObject
0001287C 6000 B580                  		bra.w	DisplaySprite
00012880                            ; ===========================================================================
00012880 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012884 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012888 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001288C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012890                            ; ===========================================================================
00012890                            
00012890                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012890 4E75                       		rts	
00012892                            ; ===========================================================================
00012892                            
00012892                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012892 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012896 6600                       		bne.s	loc_120D6	; if yes, branch
00012898 0828 0003 0022             		btst	#3,$22(a0)
0001289E 6700                       		beq.s	locret_120D4
000128A0 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000128A6                            
000128A6                            locret_120D4:
000128A6 4E75                       		rts	
000128A8                            ; ===========================================================================
000128A8                            
000128A8                            loc_120D6:
000128A8 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000128AC 66F8                       		bne.s	locret_120D4	; if time remains, branch
000128AE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128B2 4228 0038                  		clr.b	$38(a0)
000128B6 4E75                       		rts	
000128B8                            ; ===========================================================================
000128B8                            
000128B8                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000128B8 6100 B51E                  		bsr.w	SpeedToPos
000128BC 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000128C0 6100 0000                  		bsr.w	ObjHitFloor
000128C4 4A41                       		tst.w	d1
000128C6 6A00 0000                  		bpl.w	locret_12106
000128CA 5241                       		addq.w	#1,d1
000128CC D368 000C                  		add.w	d1,$C(a0)
000128D0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000128D4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128D8                            
000128D8                            locret_12106:
000128D8 4E75                       		rts	
000128DA                            ; ===========================================================================
000128DA                            
000128DA                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000128DA 6100 B4FC                  		bsr.w	SpeedToPos
000128DE 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000128E2 6100 0000                  		bsr.w	ObjHitCeiling
000128E6 4A41                       		tst.w	d1
000128E8 6A00 0000                  		bpl.w	locret_12126
000128EC 9368 000C                  		sub.w	d1,$C(a0)
000128F0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000128F4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128F8                            
000128F8                            locret_12126:
000128F8 4E75                       		rts	
000128FA                            ; ===========================================================================
000128FA                            
000128FA                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000128FA 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012900 6600                       		bne.s	locret_12138	; if not, branch
00012902 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012906 4228 0038                  		clr.b	$38(a0)
0001290A                            
0001290A                            locret_12138:
0001290A 4E75                       		rts	
0001290C                            ; ===========================================================================
0001290C                            
0001290C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001290C 3038 F646                  		move.w	($FFFFF646).w,d0
00012910 9068 000C                  		sub.w	$C(a0),d0
00012914 6700                       		beq.s	locret_1217E
00012916 6400                       		bcc.s	loc_12162
00012918 0C40 FFFE                  		cmpi.w	#-2,d0
0001291C 6C00                       		bge.s	loc_1214E
0001291E 70FE                       		moveq	#-2,d0
00012920                            
00012920                            loc_1214E:
00012920 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012924 6100 0000                  		bsr.w	ObjHitCeiling
00012928 4A41                       		tst.w	d1
0001292A 6A00 0000                  		bpl.w	locret_12160
0001292E 9368 000C                  		sub.w	d1,$C(a0)
00012932                            
00012932                            locret_12160:
00012932 4E75                       		rts	
00012934                            ; ===========================================================================
00012934                            
00012934                            loc_12162:				; XREF: Obj61_Type07
00012934 0C40 0002                  		cmpi.w	#2,d0
00012938 6F00                       		ble.s	loc_1216A
0001293A 7002                       		moveq	#2,d0
0001293C                            
0001293C                            loc_1216A:
0001293C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012940 6100 0000                  		bsr.w	ObjHitFloor
00012944 4A41                       		tst.w	d1
00012946 6A00 0000                  		bpl.w	locret_1217E
0001294A 5241                       		addq.w	#1,d1
0001294C D368 000C                  		add.w	d1,$C(a0)
00012950                            
00012950                            locret_1217E:
00012950 4E75                       		rts	
00012952                            ; ===========================================================================
00012952                            
00012952                            loc_12180:				; XREF: Obj61_Action
00012952 4A28 0038                  		tst.b	$38(a0)
00012956 6700                       		beq.s	locret_121C0
00012958 0828 0003 0022             		btst	#3,$22(a0)
0001295E 6600                       		bne.s	loc_1219A
00012960 4A28 003E                  		tst.b	$3E(a0)
00012964 6700                       		beq.s	locret_121C0
00012966 5928 003E                  		subq.b	#4,$3E(a0)
0001296A 6000                       		bra.s	loc_121A6
0001296C                            ; ===========================================================================
0001296C                            
0001296C                            loc_1219A:
0001296C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012972 6700                       		beq.s	locret_121C0
00012974 5828 003E                  		addq.b	#4,$3E(a0)
00012978                            
00012978                            loc_121A6:
00012978 1028 003E                  		move.b	$3E(a0),d0
0001297C 4EB9 0000 2CEC             		jsr	(CalcSine).l
00012982 323C 0400                  		move.w	#$400,d1
00012986 C1C1                       		muls.w	d1,d0
00012988 4840                       		swap	d0
0001298A D068 0030                  		add.w	$30(a0),d0
0001298E 3140 000C                  		move.w	d0,$C(a0)
00012992                            
00012992                            locret_121C0:
00012992 4E75                       		rts	
00012994                            ; ===========================================================================
00012994                            ; ---------------------------------------------------------------------------
00012994                            ; Sprite mappings - blocks (LZ)
00012994                            ; ---------------------------------------------------------------------------
00012994                            Map_obj61:
00012994                            	include "_maps\obj61.asm"
00012994                            ; ---------------------------------------------------------------------------
00012994                            ; Sprite mappings - blocks (LZ)
00012994                            ; ---------------------------------------------------------------------------
00012994 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012998 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001299C 01                         byte_121CA:	dc.b 1
0001299D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000129A2 02                         byte_121D0:	dc.b 2
000129A3 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000129A8 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000129AD 01                         byte_121DB:	dc.b 1
000129AE F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000129B3 01                         byte_121E1:	dc.b 1
000129B4 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000129BA 00                         		even
000129BA 00                         		even
000129BA                            
000129BA                            ; ===========================================================================
000129BA                            ; ---------------------------------------------------------------------------
000129BA                            ; Object 62 - gargoyle head (LZ)
000129BA                            ; ---------------------------------------------------------------------------
000129BA                            
000129BA                            Obj62:					; XREF: Obj_Index
000129BA 7000                       		moveq	#0,d0
000129BC 1028 0024                  		move.b	$24(a0),d0
000129C0 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000129C4 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000129C8 6000 D4DC                  		bra.w	MarkObjGone
000129CC                            ; ===========================================================================
000129CC 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000129CE 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000129D0 0000                       		dc.w Obj62_FireBall-Obj62_Index
000129D2 0000                       		dc.w Obj62_AniFire-Obj62_Index
000129D4                            
000129D4 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000129DC                            ; ===========================================================================
000129DC                            
000129DC                            Obj62_Main:				; XREF: Obj62_Index
000129DC 5428 0024                  		addq.b	#2,$24(a0)
000129E0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129E8 317C 42E9 0002             		move.w	#$42E9,2(a0)
000129EE 0028 0004 0001             		ori.b	#4,1(a0)
000129F4 117C 0003 0018             		move.b	#3,$18(a0)
000129FA 117C 0010 0019             		move.b	#$10,$19(a0)
00012A00 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A04 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A08 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A0E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A14 0228 000F 0028             		andi.b	#$F,$28(a0)
00012A1A                            
00012A1A                            Obj62_MakeFire:				; XREF: Obj62_Index
00012A1A 5328 001E                  		subq.b	#1,$1E(a0)
00012A1E 6600                       		bne.s	Obj62_NoFire
00012A20 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A26 6100 B650                  		bsr.w	ChkObjOnScreen
00012A2A 6600                       		bne.s	Obj62_NoFire
00012A2C 6100 B856                  		bsr.w	SingleObjLoad
00012A30 6600                       		bne.s	Obj62_NoFire
00012A32 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012A36 5829 0024                  		addq.b	#4,$24(a1)
00012A3A 3368 0008 0008             		move.w	8(a0),8(a1)
00012A40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A46 1368 0001 0001             		move.b	1(a0),1(a1)
00012A4C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012A52                            
00012A52                            Obj62_NoFire:
00012A52 4E75                       		rts	
00012A54                            ; ===========================================================================
00012A54                            
00012A54                            Obj62_FireBall:				; XREF: Obj62_Index
00012A54 5428 0024                  		addq.b	#2,$24(a0)
00012A58 117C 0008 0016             		move.b	#8,$16(a0)
00012A5E 117C 0008 0017             		move.b	#8,$17(a0)
00012A64 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A6C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012A72 0028 0004 0001             		ori.b	#4,1(a0)
00012A78 117C 0004 0018             		move.b	#4,$18(a0)
00012A7E 117C 0098 0020             		move.b	#$98,$20(a0)
00012A84 117C 0008 0019             		move.b	#8,$19(a0)
00012A8A 117C 0002 001A             		move.b	#2,$1A(a0)
00012A90 5068 000C                  		addq.w	#8,$C(a0)
00012A94 317C 0200 0010             		move.w	#$200,$10(a0)
00012A9A 0828 0000 0022             		btst	#0,$22(a0)
00012AA0 6600                       		bne.s	Obj62_Sound
00012AA2 4468 0010                  		neg.w	$10(a0)
00012AA6                            
00012AA6                            Obj62_Sound:
00012AA6 303C 00AE                  		move.w	#$AE,d0
00012AAA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012AB0                            
00012AB0                            Obj62_AniFire:				; XREF: Obj62_Index
00012AB0 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012AB4 0200 0007                  		andi.b	#7,d0
00012AB8 6600                       		bne.s	Obj62_StopFire
00012ABA 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012AC0                            
00012AC0                            Obj62_StopFire:
00012AC0 6100 B316                  		bsr.w	SpeedToPos
00012AC4 0828 0000 0022             		btst	#0,$22(a0)
00012ACA 6600                       		bne.s	Obj62_StopFire2
00012ACC 76F8                       		moveq	#-8,d3
00012ACE 6100 0000                  		bsr.w	ObjHitWallLeft
00012AD2 4A41                       		tst.w	d1
00012AD4 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012AD8 4E75                       		rts	
00012ADA                            ; ===========================================================================
00012ADA                            
00012ADA                            Obj62_StopFire2:
00012ADA 7608                       		moveq	#8,d3
00012ADC 6100 0000                  		bsr.w	ObjHitWallRight
00012AE0 4A41                       		tst.w	d1
00012AE2 6B00 B356                  		bmi.w	DeleteObject
00012AE6 4E75                       		rts	
00012AE8                            ; ===========================================================================
00012AE8                            ; ---------------------------------------------------------------------------
00012AE8                            ; Sprite mappings - gargoyle head (LZ)
00012AE8                            ; ---------------------------------------------------------------------------
00012AE8                            Map_obj62:
00012AE8                            	include "_maps\obj62.asm"
00012AE8                            ; ---------------------------------------------------------------------------
00012AE8                            ; Sprite mappings - gargoyle head (LZ)
00012AE8                            ; ---------------------------------------------------------------------------
00012AE8 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012AEC 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012AF0 03                         byte_12320:	dc.b 3
00012AF1 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012AF6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012AFB 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B00 01                         byte_12330:	dc.b 1
00012B01 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B06 01                         byte_12336:	dc.b 1
00012B07 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B0C                            		even
00012B0C                            		even
00012B0C                            
00012B0C                            ; ===========================================================================
00012B0C                            ; ---------------------------------------------------------------------------
00012B0C                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B0C                            ; ---------------------------------------------------------------------------
00012B0C                            
00012B0C                            Obj63:					; XREF: Obj_Index
00012B0C 7000                       		moveq	#0,d0
00012B0E 1028 0024                  		move.b	$24(a0),d0
00012B12 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012B16 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012B1A 3028 0030                  		move.w	$30(a0),d0
00012B1E 0240 FF80                  		andi.w	#$FF80,d0
00012B22 3238 F700                  		move.w	($FFFFF700).w,d1
00012B26 0441 0080                  		subi.w	#$80,d1
00012B2A 0241 FF80                  		andi.w	#$FF80,d1
00012B2E 9041                       		sub.w	d1,d0
00012B30 0C40 0280                  		cmpi.w	#$280,d0
00012B34 6200                       		bhi.s	loc_1236A
00012B36                            
00012B36                            Obj63_Display:				; XREF: loc_1236A
00012B36 6000 B2C6                  		bra.w	DisplaySprite
00012B3A                            ; ===========================================================================
00012B3A                            
00012B3A                            loc_1236A:				; XREF: Obj63
00012B3A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012B40 6600                       		bne.s	loc_12378
00012B42 0C40 FF80                  		cmpi.w	#-$80,d0
00012B46 64EE                       		bcc.s	Obj63_Display
00012B48                            
00012B48                            loc_12378:
00012B48 1028 002F                  		move.b	$2F(a0),d0
00012B4C 6A00 B2EC                  		bpl.w	DeleteObject
00012B50 0240 007F                  		andi.w	#$7F,d0
00012B54 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B58 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012B5E 6000 B2DA                  		bra.w	DeleteObject
00012B62                            ; ===========================================================================
00012B62 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012B64 0000                       		dc.w loc_124B2-Obj63_Index
00012B66 0000                       		dc.w loc_124C2-Obj63_Index
00012B68 0000                       		dc.w loc_124DE-Obj63_Index
00012B6A                            ; ===========================================================================
00012B6A                            
00012B6A                            Obj63_Main:				; XREF: Obj63_Index
00012B6A 1028 0028                  		move.b	$28(a0),d0
00012B6E 6B00 0000                  		bmi.w	loc_12460
00012B72 5428 0024                  		addq.b	#2,$24(a0)
00012B76 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012B7E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012B84 0028 0004 0001             		ori.b	#4,1(a0)
00012B8A 117C 0010 0019             		move.b	#$10,$19(a0)
00012B90 117C 0004 0018             		move.b	#4,$18(a0)
00012B96 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012B9C 6600                       		bne.s	loc_123E2
00012B9E 5828 0024                  		addq.b	#4,$24(a0)
00012BA2 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012BA8 117C 0001 0018             		move.b	#1,$18(a0)
00012BAE 6000 0000                  		bra.w	loc_124DE
00012BB2                            ; ===========================================================================
00012BB2                            
00012BB2                            loc_123E2:
00012BB2 117C 0004 001A             		move.b	#4,$1A(a0)
00012BB8 7000                       		moveq	#0,d0
00012BBA 1028 0028                  		move.b	$28(a0),d0
00012BBE 3200                       		move.w	d0,d1
00012BC0 E648                       		lsr.w	#3,d0
00012BC2 0240 001E                  		andi.w	#$1E,d0
00012BC6 45FA 0000                  		lea	Obj63_Data(pc),a2
00012BCA D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BCE 315A 0038                  		move.w	(a2)+,$38(a0)
00012BD2 315A 0030                  		move.w	(a2)+,$30(a0)
00012BD6 214A 003C                  		move.l	a2,$3C(a0)
00012BDA 0241 000F                  		andi.w	#$F,d1
00012BDE E549                       		lsl.w	#2,d1
00012BE0 1141 0038                  		move.b	d1,$38(a0)
00012BE4 117C 0004 003A             		move.b	#4,$3A(a0)
00012BEA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012BEE 6700                       		beq.s	loc_1244C
00012BF0 117C 0001 003B             		move.b	#1,$3B(a0)
00012BF6 4428 003A                  		neg.b	$3A(a0)
00012BFA 7200                       		moveq	#0,d1
00012BFC 1228 0038                  		move.b	$38(a0),d1
00012C00 D228 003A                  		add.b	$3A(a0),d1
00012C04 B228 0039                  		cmp.b	$39(a0),d1
00012C08 6500                       		bcs.s	loc_12448
00012C0A 1001                       		move.b	d1,d0
00012C0C 7200                       		moveq	#0,d1
00012C0E 4A00                       		tst.b	d0
00012C10 6A00                       		bpl.s	loc_12448
00012C12 1228 0039                  		move.b	$39(a0),d1
00012C16 5901                       		subq.b	#4,d1
00012C18                            
00012C18                            loc_12448:
00012C18 1141 0038                  		move.b	d1,$38(a0)
00012C1C                            
00012C1C                            loc_1244C:
00012C1C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012C22 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012C28 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C2C 6000 0000                  		bra.w	loc_124B2
00012C30                            ; ===========================================================================
00012C30                            
00012C30                            loc_12460:				; XREF: Obj63_Main
00012C30 1140 002F                  		move.b	d0,$2F(a0)
00012C34 0240 007F                  		andi.w	#$7F,d0
00012C38 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C3C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012C42 6600 B1F6                  		bne.w	DeleteObject
00012C46 D040                       		add.w	d0,d0
00012C48 0240 001E                  		andi.w	#$1E,d0
00012C4C 0640 0070                  		addi.w	#$70,d0
00012C50 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012C56 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C5A 321A                       		move.w	(a2)+,d1
00012C5C 2248                       		movea.l	a0,a1
00012C5E 6000                       		bra.s	Obj63_MakePtfms
00012C60                            ; ===========================================================================
00012C60                            
00012C60                            Obj63_Loop:
00012C60 6100 B622                  		bsr.w	SingleObjLoad
00012C64 6600                       		bne.s	loc_124AA
00012C66                            
00012C66                            Obj63_MakePtfms:			; XREF: loc_12460
00012C66 12BC 0063                  		move.b	#$63,0(a1)
00012C6A 335A 0008                  		move.w	(a2)+,8(a1)
00012C6E 335A 000C                  		move.w	(a2)+,$C(a1)
00012C72 301A                       		move.w	(a2)+,d0
00012C74 1340 0028                  		move.b	d0,$28(a1)
00012C78                            
00012C78                            loc_124AA:
00012C78 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012C7C                            
00012C7C 588F                       		addq.l	#4,sp
00012C7E 4E75                       		rts	
00012C80                            ; ===========================================================================
00012C80                            
00012C80                            loc_124B2:				; XREF: Obj63_Index
00012C80 7200                       		moveq	#0,d1
00012C82 1228 0019                  		move.b	$19(a0),d1
00012C86 4EB9 0000 7A88             		jsr	(PlatformObject).l
00012C8C 6000 0000                  		bra.w	sub_12502
00012C90                            ; ===========================================================================
00012C90                            
00012C90                            loc_124C2:				; XREF: Obj63_Index
00012C90 7200                       		moveq	#0,d1
00012C92 1228 0019                  		move.b	$19(a0),d1
00012C96 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
00012C9C 3F28 0008                  		move.w	8(a0),-(sp)
00012CA0 6100 0000                  		bsr.w	sub_12502
00012CA4 341F                       		move.w	(sp)+,d2
00012CA6 4EF9 0000 8166             		jmp	(MvSonicOnPtfm2).l
00012CAC                            ; ===========================================================================
00012CAC                            
00012CAC                            loc_124DE:				; XREF: Obj63_Index
00012CAC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012CB0 0240 0003                  		andi.w	#3,d0
00012CB4 6600                       		bne.s	loc_124FC
00012CB6 7201                       		moveq	#1,d1
00012CB8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012CBC 6700                       		beq.s	loc_124F2
00012CBE 4401                       		neg.b	d1
00012CC0                            
00012CC0                            loc_124F2:
00012CC0 D328 001A                  		add.b	d1,$1A(a0)
00012CC4 0228 0003 001A             		andi.b	#3,$1A(a0)
00012CCA                            
00012CCA                            loc_124FC:
00012CCA 588F                       		addq.l	#4,sp
00012CCC 6000 D1D8                  		bra.w	MarkObjGone
00012CD0                            
00012CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CD0                            
00012CD0                            
00012CD0                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012CD0 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012CD4 6700                       		beq.s	loc_12520
00012CD6 4A28 003B                  		tst.b	$3B(a0)
00012CDA 6600                       		bne.s	loc_12520
00012CDC 117C 0001 003B             		move.b	#1,$3B(a0)
00012CE2 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012CE8 4428 003A                  		neg.b	$3A(a0)
00012CEC 6000                       		bra.s	loc_12534
00012CEE                            ; ===========================================================================
00012CEE                            
00012CEE                            loc_12520:
00012CEE 3028 0008                  		move.w	8(a0),d0
00012CF2 B068 0034                  		cmp.w	$34(a0),d0
00012CF6 6600                       		bne.s	loc_1256A
00012CF8 3028 000C                  		move.w	$C(a0),d0
00012CFC B068 0036                  		cmp.w	$36(a0),d0
00012D00 6600                       		bne.s	loc_1256A
00012D02                            
00012D02                            loc_12534:
00012D02 7200                       		moveq	#0,d1
00012D04 1228 0038                  		move.b	$38(a0),d1
00012D08 D228 003A                  		add.b	$3A(a0),d1
00012D0C B228 0039                  		cmp.b	$39(a0),d1
00012D10 6500                       		bcs.s	loc_12552
00012D12 1001                       		move.b	d1,d0
00012D14 7200                       		moveq	#0,d1
00012D16 4A00                       		tst.b	d0
00012D18 6A00                       		bpl.s	loc_12552
00012D1A 1228 0039                  		move.b	$39(a0),d1
00012D1E 5901                       		subq.b	#4,d1
00012D20                            
00012D20                            loc_12552:
00012D20 1141 0038                  		move.b	d1,$38(a0)
00012D24 2268 003C                  		movea.l	$3C(a0),a1
00012D28 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012D2E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012D34 6100 0000                  		bsr.w	Obj63_ChangeDir
00012D38                            
00012D38                            loc_1256A:
00012D38 6100 B09E                  		bsr.w	SpeedToPos
00012D3C 4E75                       		rts	
00012D3E                            ; End of function sub_12502
00012D3E                            
00012D3E                            
00012D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D3E                            
00012D3E                            
00012D3E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012D3E 7000                       		moveq	#0,d0
00012D40 343C FF00                  		move.w	#-$100,d2
00012D44 3028 0008                  		move.w	8(a0),d0
00012D48 9068 0034                  		sub.w	$34(a0),d0
00012D4C 6400                       		bcc.s	loc_12584
00012D4E 4440                       		neg.w	d0
00012D50 4442                       		neg.w	d2
00012D52                            
00012D52                            loc_12584:
00012D52 7200                       		moveq	#0,d1
00012D54 363C FF00                  		move.w	#-$100,d3
00012D58 3228 000C                  		move.w	$C(a0),d1
00012D5C 9268 0036                  		sub.w	$36(a0),d1
00012D60 6400                       		bcc.s	loc_12598
00012D62 4441                       		neg.w	d1
00012D64 4443                       		neg.w	d3
00012D66                            
00012D66                            loc_12598:
00012D66 B240                       		cmp.w	d0,d1
00012D68 6500                       		bcs.s	loc_125C2
00012D6A 3028 0008                  		move.w	8(a0),d0
00012D6E 9068 0034                  		sub.w	$34(a0),d0
00012D72 6700                       		beq.s	loc_125AE
00012D74 48C0                       		ext.l	d0
00012D76 E180                       		asl.l	#8,d0
00012D78 81C1                       		divs.w	d1,d0
00012D7A 4440                       		neg.w	d0
00012D7C                            
00012D7C                            loc_125AE:
00012D7C 3140 0010                  		move.w	d0,$10(a0)
00012D80 3143 0012                  		move.w	d3,$12(a0)
00012D84 4840                       		swap	d0
00012D86 3140 000A                  		move.w	d0,$A(a0)
00012D8A 4268 000E                  		clr.w	$E(a0)
00012D8E 4E75                       		rts	
00012D90                            ; ===========================================================================
00012D90                            
00012D90                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D90 3228 000C                  		move.w	$C(a0),d1
00012D94 9268 0036                  		sub.w	$36(a0),d1
00012D98 6700                       		beq.s	loc_125D4
00012D9A 48C1                       		ext.l	d1
00012D9C E181                       		asl.l	#8,d1
00012D9E 83C0                       		divs.w	d0,d1
00012DA0 4441                       		neg.w	d1
00012DA2                            
00012DA2                            loc_125D4:
00012DA2 3141 0012                  		move.w	d1,$12(a0)
00012DA6 3142 0010                  		move.w	d2,$10(a0)
00012DAA 4841                       		swap	d1
00012DAC 3141 000E                  		move.w	d1,$E(a0)
00012DB0 4268 000A                  		clr.w	$A(a0)
00012DB4 4E75                       		rts	
00012DB6                            ; End of function Obj63_ChangeDir
00012DB6                            
00012DB6                            ; ===========================================================================
00012DB6 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012DB8 0000                       		dc.w word_12610-Obj63_Data
00012DBA 0000                       		dc.w word_12628-Obj63_Data
00012DBC 0000                       		dc.w word_1263C-Obj63_Data
00012DBE 0000                       		dc.w word_12650-Obj63_Data
00012DC0 0000                       		dc.w word_12668-Obj63_Data
00012DC2 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012DD2 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012DDE 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012DEE 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012DF6 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E0A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012E1E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012E36 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012E4A                            
00012E4A                            ; ---------------------------------------------------------------------------
00012E4A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E4A                            ; ---------------------------------------------------------------------------
00012E4A                            Map_obj63:
00012E4A                            	include "_maps\obj63.asm"
00012E4A                            ; ---------------------------------------------------------------------------
00012E4A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E4A                            ; ---------------------------------------------------------------------------
00012E4A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012E4E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012E52 0000                       		dc.w byte_1269E-Map_obj63
00012E54 01                         byte_12686:	dc.b 1
00012E55 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E5A 01                         byte_1268C:	dc.b 1
00012E5B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012E60 01                         byte_12692:	dc.b 1
00012E61 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012E66 01                         byte_12698:	dc.b 1
00012E67 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012E6C 01                         byte_1269E:	dc.b 1
00012E6D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012E72                            		even
00012E72                            		even
00012E72                            
00012E72                            ; ===========================================================================
00012E72                            ; ---------------------------------------------------------------------------
00012E72                            ; Object 64 - bubbles (LZ)
00012E72                            ; ---------------------------------------------------------------------------
00012E72                            
00012E72                            Obj64:					; XREF: Obj_Index
00012E72 7000                       		moveq	#0,d0
00012E74 1028 0024                  		move.b	$24(a0),d0
00012E78 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012E7C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012E80                            ; ===========================================================================
00012E80 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012E82 0000                       		dc.w Obj64_Animate-Obj64_Index
00012E84 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012E86 0000                       		dc.w Obj64_Display2-Obj64_Index
00012E88 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012E8A 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E8C                            ; ===========================================================================
00012E8C                            
00012E8C                            Obj64_Main:				; XREF: Obj64_Index
00012E8C 5428 0024                  		addq.b	#2,$24(a0)
00012E90 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012E98 317C 8348 0002             		move.w	#$8348,2(a0)
00012E9E 117C 0084 0001             		move.b	#$84,1(a0)
00012EA4 117C 0010 0019             		move.b	#$10,$19(a0)
00012EAA 117C 0001 0018             		move.b	#1,$18(a0)
00012EB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00012EB4 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012EB6 5028 0024                  		addq.b	#8,$24(a0)
00012EBA 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012EBE 1140 0032                  		move.b	d0,$32(a0)
00012EC2 1140 0033                  		move.b	d0,$33(a0)
00012EC6 117C 0006 001C             		move.b	#6,$1C(a0)
00012ECC 6000 0000                  		bra.w	Obj64_BblMaker
00012ED0                            ; ===========================================================================
00012ED0                            
00012ED0                            Obj64_Bubble:				; XREF: Obj64_Main
00012ED0 1140 001C                  		move.b	d0,$1C(a0)
00012ED4 3168 0008 0030             		move.w	8(a0),$30(a0)
00012EDA 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012EE0 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00012EE6 1140 0026                  		move.b	d0,$26(a0)
00012EEA                            
00012EEA                            Obj64_Animate:				; XREF: Obj64_Index
00012EEA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EF0 4EB9 0000 AEBE             		jsr	AnimateSprite
00012EF6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012EFC 6600                       		bne.s	Obj64_ChkWater
00012EFE 117C 0001 002E             		move.b	#1,$2E(a0)
00012F04                            
00012F04                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F04 3038 F646                  		move.w	($FFFFF646).w,d0
00012F08 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F0C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F0E                            
00012F0E                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F0E 117C 0006 0024             		move.b	#6,$24(a0)
00012F14 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012F18 6000 0000                  		bra.w	Obj64_Display2
00012F1C                            ; ===========================================================================
00012F1C                            
00012F1C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012F1C 1028 0026                  		move.b	$26(a0),d0
00012F20 5228 0026                  		addq.b	#1,$26(a0)
00012F24 0240 007F                  		andi.w	#$7F,d0
00012F28 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012F2E 1031 0000                  		move.b	(a1,d0.w),d0
00012F32 4880                       		ext.w	d0
00012F34 D068 0030                  		add.w	$30(a0),d0
00012F38 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012F3C 4A28 002E                  		tst.b	$2E(a0)
00012F40 6700                       		beq.s	Obj64_Display
00012F42 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012F46 6700                       		beq.s	Obj64_Display	; if not, branch
00012F48                            
00012F48 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012F4C 303C 00AD                  		move.w	#$AD,d0
00012F50 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012F56 43F8 D000                  		lea	($FFFFD000).w,a1
00012F5A 4269 0010                  		clr.w	$10(a1)
00012F5E 4269 0012                  		clr.w	$12(a1)
00012F62 4269 0014                  		clr.w	$14(a1)
00012F66 137C 0015 001C             		move.b	#$15,$1C(a1)
00012F6C 337C 0023 003E             		move.w	#$23,$3E(a1)
00012F72 137C 0000 003C             		move.b	#0,$3C(a1)
00012F78 08A9 0005 0022             		bclr	#5,$22(a1)
00012F7E 08A9 0004 0022             		bclr	#4,$22(a1)
00012F84 0829 0002 0022             		btst	#2,$22(a1)
00012F8A 6700 FF82                  		beq.w	Obj64_Burst
00012F8E 08A9 0002 0022             		bclr	#2,$22(a1)
00012F94 137C 0013 0016             		move.b	#$13,$16(a1)
00012F9A 137C 0009 0017             		move.b	#9,$17(a1)
00012FA0 5B69 000C                  		subq.w	#5,$C(a1)
00012FA4 6000 FF68                  		bra.w	Obj64_Burst
00012FA8                            ; ===========================================================================
00012FA8                            
00012FA8                            Obj64_Display:				; XREF: Obj64_Wobble
00012FA8 6100 AE2E                  		bsr.w	SpeedToPos
00012FAC 4A28 0001                  		tst.b	1(a0)
00012FB0 6A00                       		bpl.s	Obj64_Delete
00012FB2 4EFA AE4A                  		jmp	DisplaySprite
00012FB6                            ; ===========================================================================
00012FB6                            
00012FB6                            Obj64_Delete:
00012FB6 4EFA AE82                  		jmp	DeleteObject
00012FBA                            ; ===========================================================================
00012FBA                            
00012FBA                            Obj64_Display2:				; XREF: Obj64_Index
00012FBA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012FC0 4EB9 0000 AEBE             		jsr	AnimateSprite
00012FC6 4A28 0001                  		tst.b	1(a0)
00012FCA 6A00                       		bpl.s	Obj64_Delete2
00012FCC 4EFA AE30                  		jmp	DisplaySprite
00012FD0                            ; ===========================================================================
00012FD0                            
00012FD0                            Obj64_Delete2:
00012FD0 4EFA AE68                  		jmp	DeleteObject
00012FD4                            ; ===========================================================================
00012FD4                            
00012FD4                            Obj64_Delete3:				; XREF: Obj64_Index
00012FD4 6000 AE64                  		bra.w	DeleteObject
00012FD8                            ; ===========================================================================
00012FD8                            
00012FD8                            Obj64_BblMaker:				; XREF: Obj64_Index
00012FD8 4A68 0036                  		tst.w	$36(a0)
00012FDC 6600                       		bne.s	loc_12874
00012FDE 3038 F646                  		move.w	($FFFFF646).w,d0
00012FE2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012FE6 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012FEA 4A28 0001                  		tst.b	1(a0)
00012FEE 6A00 0000                  		bpl.w	Obj64_ChkDel
00012FF2 5368 0038                  		subq.w	#1,$38(a0)
00012FF6 6A00 0000                  		bpl.w	loc_12914
00012FFA 317C 0001 0036             		move.w	#1,$36(a0)
00013000                            
00013000                            loc_1283A:
00013000 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013006 3200                       		move.w	d0,d1
00013008 0240 0007                  		andi.w	#7,d0
0001300C 0C40 0006                  		cmpi.w	#6,d0
00013010 64EE                       		bcc.s	loc_1283A
00013012                            
00013012 1140 0034                  		move.b	d0,$34(a0)
00013016 0241 000C                  		andi.w	#$C,d1
0001301A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013020 D2C1                       		adda.w	d1,a1
00013022 2149 003C                  		move.l	a1,$3C(a0)
00013026 5328 0032                  		subq.b	#1,$32(a0)
0001302A 6A00                       		bpl.s	loc_12872
0001302C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013032 08E8 0007 0036             		bset	#7,$36(a0)
00013038                            
00013038                            loc_12872:
00013038 6000                       		bra.s	loc_1287C
0001303A                            ; ===========================================================================
0001303A                            
0001303A                            loc_12874:				; XREF: Obj64_BblMaker
0001303A 5368 0038                  		subq.w	#1,$38(a0)
0001303E 6A00 0000                  		bpl.w	loc_12914
00013042                            
00013042                            loc_1287C:
00013042 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013048 0240 001F                  		andi.w	#$1F,d0
0001304C 3140 0038                  		move.w	d0,$38(a0)
00013050 6100 B232                  		bsr.w	SingleObjLoad
00013054 6600                       		bne.s	loc_128F8
00013056 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001305A 3368 0008 0008             		move.w	8(a0),8(a1)
00013060 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013066 0240 000F                  		andi.w	#$F,d0
0001306A 5140                       		subq.w	#8,d0
0001306C D169 0008                  		add.w	d0,8(a1)
00013070 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013076 7000                       		moveq	#0,d0
00013078 1028 0034                  		move.b	$34(a0),d0
0001307C 2468 003C                  		movea.l	$3C(a0),a2
00013080 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013086 0828 0007 0036             		btst	#7,$36(a0)
0001308C 6700                       		beq.s	loc_128F8
0001308E 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013094 0240 0003                  		andi.w	#3,d0
00013098 6600                       		bne.s	loc_128E4
0001309A 08E8 0006 0036             		bset	#6,$36(a0)
000130A0 6600                       		bne.s	loc_128F8
000130A2 137C 0002 0028             		move.b	#2,$28(a1)
000130A8                            
000130A8                            loc_128E4:
000130A8 4A28 0034                  		tst.b	$34(a0)
000130AC 6600                       		bne.s	loc_128F8
000130AE 08E8 0006 0036             		bset	#6,$36(a0)
000130B4 6600                       		bne.s	loc_128F8
000130B6 137C 0002 0028             		move.b	#2,$28(a1)
000130BC                            
000130BC                            loc_128F8:
000130BC 5328 0034                  		subq.b	#1,$34(a0)
000130C0 6A00                       		bpl.s	loc_12914
000130C2 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000130C8 0240 007F                  		andi.w	#$7F,d0
000130CC 0640 0080                  		addi.w	#$80,d0
000130D0 D168 0038                  		add.w	d0,$38(a0)
000130D4 4268 0036                  		clr.w	$36(a0)
000130D8                            
000130D8                            loc_12914:
000130D8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130DE 4EB9 0000 AEBE             		jsr	AnimateSprite
000130E4                            
000130E4                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000130E4 3028 0008                  		move.w	8(a0),d0
000130E8 0240 FF80                  		andi.w	#$FF80,d0
000130EC 3238 F700                  		move.w	($FFFFF700).w,d1
000130F0 0441 0080                  		subi.w	#$80,d1
000130F4 0241 FF80                  		andi.w	#$FF80,d1
000130F8 9041                       		sub.w	d1,d0
000130FA 0C40 0280                  		cmpi.w	#$280,d0
000130FE 6200 AD3A                  		bhi.w	DeleteObject
00013102 3038 F646                  		move.w	($FFFFF646).w,d0
00013106 B068 000C                  		cmp.w	$C(a0),d0
0001310A 6500 ACF2                  		bcs.w	DisplaySprite
0001310E 4E75                       		rts	
00013110                            ; ===========================================================================
00013110                            ; bubble production sequence
00013110                            
00013110                            ; 0 = small bubble, 1 =	large bubble
00013110                            
00013110 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013122                            
00013122                            ; ===========================================================================
00013122                            
00013122                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013122 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013126 6B00                       		bmi.s	loc_12998
00013128 43F8 D000                  		lea	($FFFFD000).w,a1
0001312C 3029 0008                  		move.w	8(a1),d0
00013130 3228 0008                  		move.w	8(a0),d1
00013134 0441 0010                  		subi.w	#$10,d1
00013138 B240                       		cmp.w	d0,d1
0001313A 6400                       		bcc.s	loc_12998
0001313C 0641 0020                  		addi.w	#$20,d1
00013140 B240                       		cmp.w	d0,d1
00013142 6500                       		bcs.s	loc_12998
00013144 3029 000C                  		move.w	$C(a1),d0
00013148 3228 000C                  		move.w	$C(a0),d1
0001314C B240                       		cmp.w	d0,d1
0001314E 6400                       		bcc.s	loc_12998
00013150 0641 0010                  		addi.w	#$10,d1
00013154 B240                       		cmp.w	d0,d1
00013156 6500                       		bcs.s	loc_12998
00013158 7001                       		moveq	#1,d0
0001315A 4E75                       		rts	
0001315C                            ; ===========================================================================
0001315C                            
0001315C                            loc_12998:
0001315C 7000                       		moveq	#0,d0
0001315E 4E75                       		rts	
00013160                            ; ===========================================================================
00013160                            Ani_obj64:
00013160                            	include "_anim\obj64.asm"
00013160                            ; ---------------------------------------------------------------------------
00013160                            ; Animation script - bubbles (LZ)
00013160                            ; ---------------------------------------------------------------------------
00013160 0000                       		dc.w byte_129AA-Ani_obj64
00013162 0000                       		dc.w byte_129B0-Ani_obj64
00013164 0000                       		dc.w byte_129B6-Ani_obj64
00013166 0000                       		dc.w byte_129BE-Ani_obj64
00013168 0000                       		dc.w byte_129BE-Ani_obj64
0001316A 0000                       		dc.w byte_129C0-Ani_obj64
0001316C 0000                       		dc.w byte_129C6-Ani_obj64
0001316E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013174 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001317A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013182 04FC                       byte_129BE:	dc.b 4,	$FC
00013184 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001318A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013190 00                         		even
00013190 00                         		even
00013190                            
00013190                            ; ---------------------------------------------------------------------------
00013190                            ; Sprite mappings - bubbles (LZ)
00013190                            ; ---------------------------------------------------------------------------
00013190                            Map_obj64:
00013190                            	include "_maps\obj64.asm"
00013190                            ; ---------------------------------------------------------------------------
00013190                            ; Sprite mappings - bubbles (LZ)
00013190                            ; ---------------------------------------------------------------------------
00013190 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013194 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013198 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001319C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000131A0 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000131A4 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000131A8 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000131AC 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000131B0 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000131B4 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000131B8 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000131BC 0000                       		dc.w byte_12A9C-Map_obj64
000131BE 01                         byte_129FA:	dc.b 1
000131BF FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000131C4 01                         byte_12A00:	dc.b 1
000131C5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000131CA 01                         byte_12A06:	dc.b 1
000131CB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000131D0 01                         byte_12A0C:	dc.b 1
000131D1 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000131D6 01                         byte_12A12:	dc.b 1
000131D7 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000131DC 01                         byte_12A18:	dc.b 1
000131DD F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000131E2 01                         byte_12A1E:	dc.b 1
000131E3 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000131E8 04                         byte_12A24:	dc.b 4
000131E9 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000131EE F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000131F3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000131F8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000131FD 04                         byte_12A39:	dc.b 4
000131FE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013203 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013208 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001320D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013212 01                         byte_12A4E:	dc.b 1
00013213 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013218 01                         byte_12A54:	dc.b 1
00013219 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001321E 01                         byte_12A5A:	dc.b 1
0001321F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013224 01                         byte_12A60:	dc.b 1
00013225 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001322A 01                         byte_12A66:	dc.b 1
0001322B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013230 01                         byte_12A6C:	dc.b 1
00013231 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013236 01                         byte_12A72:	dc.b 1
00013237 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001323C 01                         byte_12A78:	dc.b 1
0001323D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013242 01                         byte_12A7E:	dc.b 1
00013243 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013248 01                         byte_12A84:	dc.b 1
00013249 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001324E 01                         byte_12A8A:	dc.b 1
0001324F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013254 01                         byte_12A90:	dc.b 1
00013255 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001325A 01                         byte_12A96:	dc.b 1
0001325B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013260 00                         byte_12A9C:	dc.b 0
00013262 00                         		even
00013262 00                         		even
00013262                            
00013262                            ; ===========================================================================
00013262                            ; ---------------------------------------------------------------------------
00013262                            ; Object 65 - waterfalls (LZ)
00013262                            ; ---------------------------------------------------------------------------
00013262                            
00013262                            Obj65:					; XREF: Obj_Index
00013262 7000                       		moveq	#0,d0
00013264 1028 0024                  		move.b	$24(a0),d0
00013268 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001326C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013270                            ; ===========================================================================
00013270 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013272 0000                       		dc.w Obj65_Animate-Obj65_Index
00013274 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013276 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013278 0000                       		dc.w loc_12B36-Obj65_Index
0001327A                            ; ===========================================================================
0001327A                            
0001327A                            Obj65_Main:				; XREF: Obj65_Index
0001327A 5828 0024                  		addq.b	#4,$24(a0)
0001327E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013286 317C 4259 0002             		move.w	#$4259,2(a0)
0001328C 0028 0004 0001             		ori.b	#4,1(a0)
00013292 117C 0018 0019             		move.b	#$18,$19(a0)
00013298 117C 0001 0018             		move.b	#1,$18(a0)
0001329E 1028 0028                  		move.b	$28(a0),d0	; get object type
000132A2 6A00                       		bpl.s	loc_12AE6
000132A4 08E8 0007 0002             		bset	#7,2(a0)
000132AA                            
000132AA                            loc_12AE6:
000132AA 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000132AE 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000132B2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000132B6 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000132B8 4228 0018                  		clr.b	$18(a0)
000132BC 5528 0024                  		subq.b	#2,$24(a0)
000132C0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000132C6 6700                       		beq.s	loc_12B0A	; if not, branch
000132C8 117C 0006 0024             		move.b	#6,$24(a0)
000132CE                            
000132CE                            loc_12B0A:
000132CE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000132D4 6700                       		beq.s	Obj65_Animate	; if not, branch
000132D6 117C 0008 0024             		move.b	#8,$24(a0)
000132DC                            
000132DC                            Obj65_Animate:				; XREF: Obj65_Index
000132DC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000132E2 4EB9 0000 AEBE             		jsr	AnimateSprite
000132E8                            
000132E8                            Obj65_ChkDel:				; XREF: Obj65_Index
000132E8 6000 CBBC                  		bra.w	MarkObjGone
000132EC                            ; ===========================================================================
000132EC                            
000132EC                            Obj65_FixHeight:			; XREF: Obj65_Index
000132EC 3038 F646                  		move.w	($FFFFF646).w,d0
000132F0 0440 0010                  		subi.w	#$10,d0
000132F4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000132F8 60E2                       		bra.s	Obj65_Animate
000132FA                            ; ===========================================================================
000132FA                            
000132FA                            loc_12B36:				; XREF: Obj65_Index
000132FA 08A8 0007 0002             		bclr	#7,2(a0)
00013300 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013306 6600                       		bne.s	Obj65_Animate2
00013308 08E8 0007 0002             		bset	#7,2(a0)
0001330E                            
0001330E                            Obj65_Animate2:
0001330E 60CC                       		bra.s	Obj65_Animate
00013310                            ; ===========================================================================
00013310                            Ani_obj65:
00013310                            	include "_anim\obj65.asm"
00013310                            ; ---------------------------------------------------------------------------
00013310                            ; Animation script - waterfall (LZ)
00013310                            ; ---------------------------------------------------------------------------
00013310 0000                       		dc.w byte_12B4E-Ani_obj65
00013312 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013318 00                         		even
00013318 00                         		even
00013318                            
00013318                            ; ---------------------------------------------------------------------------
00013318                            ; Sprite mappings - waterfalls (LZ)
00013318                            ; ---------------------------------------------------------------------------
00013318                            Map_obj65:
00013318                            	include "_maps\obj65.asm"
00013318                            ; ---------------------------------------------------------------------------
00013318                            ; Sprite mappings - waterfalls (LZ)
00013318                            ; ---------------------------------------------------------------------------
00013318 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001331C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013320 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013324 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013328 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001332C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013330 01                         byte_12B6C:	dc.b 1
00013331 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013336 02                         byte_12B72:	dc.b 2
00013337 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001333C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013341 02                         byte_12B7D:	dc.b 2
00013342 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013347 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001334C 01                         byte_12B88:	dc.b 1
0001334D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013352 02                         byte_12B8E:	dc.b 2
00013353 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013358 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001335D 01                         byte_12B99:	dc.b 1
0001335E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013363 01                         byte_12B9F:	dc.b 1
00013364 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013369 01                         byte_12BA5:	dc.b 1
0001336A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001336F 02                         byte_12BAB:	dc.b 2
00013370 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013375 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001337A 02                         byte_12BB6:	dc.b 2
0001337B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013380 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013385 02                         byte_12BC1:	dc.b 2
00013386 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001338B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013390 02                         byte_12BCC:	dc.b 2
00013391 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013396 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001339C 00                         		even
0001339C 00                         		even
0001339C                            
0001339C                            ; ===========================================================================
0001339C                            ; ---------------------------------------------------------------------------
0001339C                            ; Object 01 - Sonic
0001339C                            ; ---------------------------------------------------------------------------
0001339C                            
0001339C                            Obj01:					; XREF: Obj_Index
0001339C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000133A0 6700                       		beq.s	Obj01_Normal	; if not, branch
000133A2 4EF9 0000 0000             		jmp	DebugMode
000133A8                            ; ===========================================================================
000133A8                            
000133A8                            Obj01_Normal:
000133A8 7000                       		moveq	#0,d0
000133AA 1028 0024                  		move.b	$24(a0),d0
000133AE 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000133B2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000133B6                            ; ===========================================================================
000133B6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000133B8 0000                       		dc.w Obj01_Control-Obj01_Index
000133BA 0000                       		dc.w Obj01_Hurt-Obj01_Index
000133BC 0000                       		dc.w Obj01_Death-Obj01_Index
000133BE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000133C0                            ; ===========================================================================
000133C0                            
000133C0                            Player_Maps:
000133C0 0000 0000                  	dc.l	Map_Sonic
000133C4 0000 0000                  	dc.l	Map_Sonic ; gronic
000133C8 0000 0000                  	dc.l	Map_Sonic ; anakama
000133CC                            	; insert player mapping here
000133CC                            	
000133CC                            Obj01_Main:				; XREF: Obj01_Index
000133CC 5428 0024                  		addq.b	#2,$24(a0)
000133D0 117C 0013 0016             		move.b	#$13,$16(a0)
000133D6 117C 0009 0017             		move.b	#9,$17(a0)
000133DC                            		
000133DC 7000                       		moveq	#0,d0
000133DE 1038 FFE8                  		move.b	(v_character),d0
000133E2 E548                       		lsl.w	#2,d0
000133E4 43FA FFDA                  		lea 	Player_Maps(pc),a1
000133E8 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000133EE                            		
000133EE 317C 0780 0002             		move.w	#$780,2(a0)
000133F4 117C 0002 0018             		move.b	#2,$18(a0)
000133FA 117C 0018 0019             		move.b	#$18,$19(a0)
00013400 117C 0004 0001             		move.b	#4,1(a0)
00013406 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001340C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013412 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013418                            
00013418                            Obj01_Control:				; XREF: Obj01_Index
00013418 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001341C 6700                       		beq.s	loc_12C58	; if not, branch
0001341E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013424 6700                       		beq.s	loc_12C58	; if not, branch
00013426 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001342C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013430 4E75                       		rts	
00013432                            ; ===========================================================================
00013432                            
00013432                            loc_12C58:
00013432 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013436 6600                       		bne.s	loc_12C64	; if yes, branch
00013438 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001343E                            
0001343E                            loc_12C64:
0001343E 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013444 6600                       		bne.s	loc_12C7E	; if yes, branch
00013446 7000                       		moveq	#0,d0
00013448 1028 0022                  		move.b	$22(a0),d0
0001344C 0240 0006                  		andi.w	#6,d0
00013450 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013454 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013458                            
00013458                            loc_12C7E:
00013458 6100                       		bsr.s	Sonic_Display
0001345A 6100 0000                  		bsr.w	Sonic_RecordPos
0001345E 6100 0000                  		bsr.w	Sonic_Water
00013462 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013468 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001346E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013472 6700                       		beq.s	loc_12CA6
00013474 4A28 001C                  		tst.b	$1C(a0)
00013478 6600                       		bne.s	loc_12CA6
0001347A 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013480                            
00013480                            loc_12CA6:
00013480 6100 0000                  		bsr.w	Sonic_Animate
00013484 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013488 6B00                       		bmi.s	loc_12CB6
0001348A 4EB9 0000 0000             		jsr	TouchResponse
00013490                            
00013490                            loc_12CB6:
00013490 6100 0000                  		bsr.w	Sonic_Loops
00013494 6100 0000                  		bsr.w	LoadSonicDynPLC
00013498 4E75                       		rts	
0001349A                            ; ===========================================================================
0001349A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001349C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001349E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000134A0 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Music	to play	after invincibility wears off
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; ===========================================================================
000134A2                            
000134A2                            Sonic_Display:				; XREF: loc_12C7E
000134A2 3028 0030                  		move.w	$30(a0),d0
000134A6 6700                       		beq.s	Obj01_Display
000134A8 5368 0030                  		subq.w	#1,$30(a0)
000134AC E648                       		lsr.w	#3,d0
000134AE 6400                       		bcc.s	Obj01_ChkInvin
000134B0                            
000134B0                            Obj01_Display:
000134B0 4EBA A94C                  		jsr	DisplaySprite
000134B4                            
000134B4                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000134B4                             
000134B4                            Obj01_ChkInvin:
000134B4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000134B8 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000134BC 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000134C0 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000134C4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000134C8 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000134CC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000134D0 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000134D4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000134DA 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000134DE 7000                       		moveq	#0,d0
000134E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000134E4                             
000134E4 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000134EA 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000134EC 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000134F2 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134F4                             
000134F4                            Obj01_GetBgm2:
000134F4 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000134FA 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000134FC 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013502 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013504                             
00013504                            Obj01_GetBgm3:
00013504 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001350A 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001350C 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013512 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013514                             
00013514                            Obj01_GetBgm4:
00013514 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001351A 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001351C 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013522                             
00013522                            Obj01_PlayMusic:
00013522 1031 0000                  		move.b	(a1,d0.w),d0
00013526 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
0001352C                             
0001352C                            ; NineKode ends here.
0001352C                            
0001352C                            Obj01_RmvInvin:
0001352C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013532                            
00013532                            Obj01_ChkShoes:
00013532 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013536 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013538 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001353C 6700                       		beq.s	Obj01_ExitChk
0001353E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013542 6600                       		bne.s	Obj01_ExitChk
00013544 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001354A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013550 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013556 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001355C 303C 00E3                  		move.w	#$E3,d0
00013560 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
00013566                            ; ===========================================================================
00013566                            
00013566                            Obj01_ExitChk:
00013566 4E75                       		rts	
00013568                            
00013568                            ; ---------------------------------------------------------------------------
00013568                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013568                            ; ---------------------------------------------------------------------------
00013568                            
00013568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013568                            
00013568                            
00013568                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013568 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001356C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013570 43F1 0000                  		lea	(a1,d0.w),a1
00013574 32E8 0008                  		move.w	8(a0),(a1)+
00013578 32E8 000C                  		move.w	$C(a0),(a1)+
0001357C 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013580 4E75                       		rts	
00013582                            ; End of function Sonic_RecordPos
00013582                            
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Subroutine for Sonic when he's underwater
00013582                            ; ---------------------------------------------------------------------------
00013582                            
00013582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013582                            
00013582                            
00013582                            Sonic_Water:				; XREF: loc_12C7E
00013582 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013588 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001358A                            
0001358A                            locret_12D80:
0001358A 4E75                       		rts	
0001358C                            ; ===========================================================================
0001358C                            
0001358C                            Obj01_InWater:
0001358C 3038 F646                  		move.w	($FFFFF646).w,d0
00013590 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013594 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013596 08E8 0006 0022             		bset	#6,$22(a0)
0001359C 66EC                       		bne.s	locret_12D80
0001359E 6100 0000                  		bsr.w	ResumeMusic
000135A2 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000135A8 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000135AE 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000135B4 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000135BA 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000135C0 E0E8 0010                  		asr	$10(a0)
000135C4 E0E8 0012                  		asr	$12(a0)
000135C8 E0E8 0012                  		asr	$12(a0)
000135CC 67BC                       		beq.s	locret_12D80
000135CE 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000135D4 303C 00AA                  		move.w	#$AA,d0
000135D8 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000135DE                            ; ===========================================================================
000135DE                            
000135DE                            Obj01_OutWater:
000135DE 08A8 0006 0022             		bclr	#6,$22(a0)
000135E4 67A4                       		beq.s	locret_12D80
000135E6 6100 0000                  		bsr.w	ResumeMusic
000135EA 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135F0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135F6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135FC E1E8 0012                  		asl	$12(a0)
00013600 6700 FF88                  		beq.w	locret_12D80
00013604 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001360A 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013610 6E00                       		bgt.s	loc_12E0E
00013612 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013618                            
00013618                            loc_12E0E:
00013618 303C 00AA                  		move.w	#$AA,d0
0001361C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
00013622                            ; End of function Sonic_Water
00013622                            
00013622                            ; ===========================================================================
00013622                            ; ---------------------------------------------------------------------------
00013622                            ; Modes	for controlling	Sonic
00013622                            ; ---------------------------------------------------------------------------
00013622                            
00013622                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013622 6100 0000                  		bsr.w	Sonic_Jump
00013626 6100 0000                  		bsr.w	Sonic_SlopeResist
0001362A 6100 0000                  		bsr.w	Sonic_Move
0001362E 6100 0000                  		bsr.w	Sonic_Roll
00013632 6100 0000                  		bsr.w	Sonic_LevelBound
00013636 4EBA A7A0                  		jsr	SpeedToPos
0001363A 6100 0000                  		bsr.w	Sonic_AnglePos
0001363E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013642 4E75                       		rts	
00013644                            ; ===========================================================================
00013644                            
00013644                            Obj01_MdJump:				; XREF: Obj01_Modes
00013644 6100 0000                  		bsr.w	Sonic_JumpHeight
00013648 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001364C 6100 0000                  		bsr.w	Sonic_LevelBound
00013650 4EBA A75A                  		jsr	ObjectFall
00013654 0828 0006 0022             		btst	#6,$22(a0)
0001365A 6700                       		beq.s	loc_12E5C
0001365C 0468 0028 0012             		subi.w	#$28,$12(a0)
00013662                            
00013662                            loc_12E5C:
00013662 6100 0000                  		bsr.w	Sonic_JumpAngle
00013666 6100 0000                  		bsr.w	Sonic_Floor
0001366A 4E75                       		rts	
0001366C                            ; ===========================================================================
0001366C                            
0001366C                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001366C 6100 0000                  		bsr.w	Sonic_Jump
00013670 6100 0000                  		bsr.w	Sonic_RollRepel
00013674 6100 0000                  		bsr.w	Sonic_RollSpeed
00013678 6100 0000                  		bsr.w	Sonic_LevelBound
0001367C 4EBA A75A                  		jsr	SpeedToPos
00013680 6100 0000                  		bsr.w	Sonic_AnglePos
00013684 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013688 4E75                       		rts	
0001368A                            ; ===========================================================================
0001368A                            
0001368A                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001368A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001368E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013692 6100 0000                  		bsr.w	Sonic_LevelBound
00013696 6100 0000                  		bsr.w	Sonic_AirUnroll
0001369A 4EBA A710                  		jsr	ObjectFall
0001369E 0828 0006 0022             		btst	#6,$22(a0)
000136A4 6700                       		beq.s	loc_12EA6
000136A6 0468 0028 0012             		subi.w	#$28,$12(a0)
000136AC                            
000136AC                            loc_12EA6:
000136AC 6100 0000                  		bsr.w	Sonic_JumpAngle
000136B0 6100 0000                  		bsr.w	Sonic_Floor
000136B4 4E75                       		rts	
000136B6                            ; ---------------------------------------------------------------------------
000136B6                            ; Subroutine to	make Sonic walk/run
000136B6                            ; ---------------------------------------------------------------------------
000136B6                            
000136B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136B6                            
000136B6                            
000136B6                            Sonic_Move:				; XREF: Obj01_MdNormal
000136B6 3C38 F760                  		move.w	($FFFFF760).w,d6
000136BA 3A38 F762                  		move.w	($FFFFF762).w,d5
000136BE 3838 F764                  		move.w	($FFFFF764).w,d4
000136C2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136C6 6600 0000                  		bne.w	loc_12FEE
000136CA 4A68 003E                  		tst.w	$3E(a0)
000136CE 6600 0000                  		bne.w	Obj01_ResetScr
000136D2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136D8 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000136DA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136E0 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000136E2 6100 0000                  		bsr.w	Sonic_MoveLeft
000136E6                            
000136E6                            Obj01_NotLeft:
000136E6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136EC 6700                       		beq.s	Obj01_NotRight	; if not, branch
000136EE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136F4 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000136F6 6100 0000                  		bsr.w	Sonic_MoveLeft
000136FA 6000                       		bra.s	Obj01_NotRight
000136FC                            
000136FC                            Obj01_MoveRight:
000136FC 6100 0000                  		bsr.w	Sonic_MoveRight
00013700                            
00013700                            Obj01_NotRight:
00013700 1028 0026                  		move.b	$26(a0),d0
00013704 0600 0020                  		addi.b	#$20,d0
00013708 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001370C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013710 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013714 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013718 08A8 0005 0022             		bclr	#5,$22(a0)
0001371E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013724 0828 0003 0022             		btst	#3,$22(a0)
0001372A 6700                       		beq.s	Sonic_Balance
0001372C 7000                       		moveq	#0,d0
0001372E 1028 003D                  		move.b	$3D(a0),d0
00013732 ED48                       		lsl.w	#6,d0
00013734 43F8 D000                  		lea	($FFFFD000).w,a1
00013738 43F1 0000                  		lea	(a1,d0.w),a1
0001373C 4A29 0022                  		tst.b	$22(a1)
00013740 6B00                       		bmi.s	Sonic_LookUp
00013742 7200                       		moveq	#0,d1
00013744 1229 0019                  		move.b	$19(a1),d1
00013748 3401                       		move.w	d1,d2
0001374A D442                       		add.w	d2,d2
0001374C 5942                       		subq.w	#4,d2
0001374E D268 0008                  		add.w	8(a0),d1
00013752 9269 0008                  		sub.w	8(a1),d1
00013756 0C41 0004                  		cmpi.w	#4,d1
0001375A 6D00                       		blt.s	loc_12F6A
0001375C B242                       		cmp.w	d2,d1
0001375E 6C00                       		bge.s	loc_12F5A
00013760 6000                       		bra.s	Sonic_LookUp
00013762                            ; ===========================================================================
00013762                            
00013762                            Sonic_Balance:
00013762 4EB9 0000 0000             		jsr	ObjHitFloor
00013768 0C41 000C                  		cmpi.w	#$C,d1
0001376C 6D00                       		blt.s	Sonic_LookUp
0001376E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013774 6600                       		bne.s	loc_12F62
00013776                            
00013776                            loc_12F5A:
00013776 08A8 0000 0022             		bclr	#0,$22(a0)
0001377C 6000                       		bra.s	loc_12F70
0001377E                            ; ===========================================================================
0001377E                            
0001377E                            loc_12F62:
0001377E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013784 6600                       		bne.s	Sonic_LookUp
00013786                            
00013786                            loc_12F6A:
00013786 08E8 0000 0022             		bset	#0,$22(a0)
0001378C                            
0001378C                            loc_12F70:
0001378C 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013792 6000                       		bra.s	Obj01_ResetScr
00013794                            ; ===========================================================================
00013794                            
00013794                            Sonic_LookUp:
00013794 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001379A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001379C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000137A2 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000137A8 6700                       		beq.s	loc_12FC2
000137AA 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000137AE 6000                       		bra.s	loc_12FC2
000137B0                            ; ===========================================================================
000137B0                            
000137B0                            Sonic_Duck:
000137B0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000137B6 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000137B8 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000137BE 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000137C4 6700                       		beq.s	loc_12FC2
000137C6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000137CA 6000                       		bra.s	loc_12FC2
000137CC                            ; ===========================================================================
000137CC                            
000137CC                            Obj01_ResetScr:
000137CC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000137D2 6700                       		beq.s	loc_12FC2	; if yes, branch
000137D4 6400                       		bcc.s	loc_12FBE
000137D6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000137DA                            
000137DA                            loc_12FBE:
000137DA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000137DE                            
000137DE                            loc_12FC2:
000137DE 1038 F602                  		move.b	($FFFFF602).w,d0
000137E2 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000137E6 6600                       		bne.s	loc_12FEE	; if yes, branch
000137E8 3028 0014                  		move.w	$14(a0),d0
000137EC 6700                       		beq.s	loc_12FEE
000137EE 6B00                       		bmi.s	loc_12FE2
000137F0 9045                       		sub.w	d5,d0
000137F2 6400                       		bcc.s	loc_12FDC
000137F4 303C 0000                  		move.w	#0,d0
000137F8                            
000137F8                            loc_12FDC:
000137F8 3140 0014                  		move.w	d0,$14(a0)
000137FC 6000                       		bra.s	loc_12FEE
000137FE                            ; ===========================================================================
000137FE                            
000137FE                            loc_12FE2:
000137FE D045                       		add.w	d5,d0
00013800 6400                       		bcc.s	loc_12FEA
00013802 303C 0000                  		move.w	#0,d0
00013806                            
00013806                            loc_12FEA:
00013806 3140 0014                  		move.w	d0,$14(a0)
0001380A                            
0001380A                            loc_12FEE:
0001380A 1028 0026                  		move.b	$26(a0),d0
0001380E 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013814 C3E8 0014                  		muls.w	$14(a0),d1
00013818 E081                       		asr.l	#8,d1
0001381A 3141 0010                  		move.w	d1,$10(a0)
0001381E C1E8 0014                  		muls.w	$14(a0),d0
00013822 E080                       		asr.l	#8,d0
00013824 3140 0012                  		move.w	d0,$12(a0)
00013828                            
00013828                            loc_1300C:
00013828 1028 0026                  		move.b	$26(a0),d0
0001382C 0600 0040                  		addi.b	#$40,d0
00013830 6B00                       		bmi.s	locret_1307C
00013832 123C 0040                  		move.b	#$40,d1
00013836 4A68 0014                  		tst.w	$14(a0)
0001383A 6700                       		beq.s	locret_1307C
0001383C 6B00                       		bmi.s	loc_13024
0001383E 4441                       		neg.w	d1
00013840                            
00013840                            loc_13024:
00013840 1028 0026                  		move.b	$26(a0),d0
00013844 D001                       		add.b	d1,d0
00013846 3F00                       		move.w	d0,-(sp)
00013848 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001384C 301F                       		move.w	(sp)+,d0
0001384E 4A41                       		tst.w	d1
00013850 6A00                       		bpl.s	locret_1307C
00013852 E141                       		asl.w	#8,d1
00013854 0600 0020                  		addi.b	#$20,d0
00013858 0200 00C0                  		andi.b	#$C0,d0
0001385C 6700                       		beq.s	loc_13078
0001385E 0C00 0040                  		cmpi.b	#$40,d0
00013862 6700                       		beq.s	loc_13066
00013864 0C00 0080                  		cmpi.b	#$80,d0
00013868 6700                       		beq.s	loc_13060
0001386A D368 0010                  		add.w	d1,$10(a0)
0001386E 08E8 0005 0022             		bset	#5,$22(a0)
00013874 317C 0000 0014             		move.w	#0,$14(a0)
0001387A 4E75                       		rts	
0001387C                            ; ===========================================================================
0001387C                            
0001387C                            loc_13060:
0001387C 9368 0012                  		sub.w	d1,$12(a0)
00013880 4E75                       		rts	
00013882                            ; ===========================================================================
00013882                            
00013882                            loc_13066:
00013882 9368 0010                  		sub.w	d1,$10(a0)
00013886 08E8 0005 0022             		bset	#5,$22(a0)
0001388C 317C 0000 0014             		move.w	#0,$14(a0)
00013892 4E75                       		rts	
00013894                            ; ===========================================================================
00013894                            
00013894                            loc_13078:
00013894 D368 0012                  		add.w	d1,$12(a0)
00013898                            
00013898                            locret_1307C:
00013898 4E75                       		rts	
0001389A                            ; End of function Sonic_Move
0001389A                            
0001389A                            
0001389A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001389A                            
0001389A                            
0001389A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001389A 3028 0014                  		move.w	$14(a0),d0
0001389E 6700                       		beq.s	loc_13086
000138A0 6A00                       		bpl.s	loc_130B2
000138A2                            
000138A2                            loc_13086:
000138A2 08E8 0000 0022             		bset	#0,$22(a0)
000138A8 6600                       		bne.s	loc_1309A
000138AA 08A8 0005 0022             		bclr	#5,$22(a0)
000138B0 117C 0001 001D             		move.b	#1,$1D(a0)
000138B6                            
000138B6                            loc_1309A:
000138B6 9045                       		sub.w	d5,d0
000138B8 3206                       		move.w	d6,d1
000138BA 4441                       		neg.w	d1
000138BC B041                       		cmp.w	d1,d0
000138BE 6E00                       		bgt.s	loc_130A6
000138C0 3001                       		move.w	d1,d0
000138C2                            
000138C2                            loc_130A6:
000138C2 3140 0014                  		move.w	d0,$14(a0)
000138C6 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138CC 4E75                       		rts	
000138CE                            ; ===========================================================================
000138CE                            
000138CE                            loc_130B2:				; XREF: Sonic_MoveLeft
000138CE 9044                       		sub.w	d4,d0
000138D0 6400                       		bcc.s	loc_130BA
000138D2 303C FF80                  		move.w	#-$80,d0
000138D6                            
000138D6                            loc_130BA:
000138D6 3140 0014                  		move.w	d0,$14(a0)
000138DA 1028 0026                  		move.b	$26(a0),d0
000138DE 0600 0020                  		addi.b	#$20,d0
000138E2 0200 00C0                  		andi.b	#$C0,d0
000138E6 6600                       		bne.s	locret_130E8
000138E8 0C40 0400                  		cmpi.w	#$400,d0
000138EC 6D00                       		blt.s	locret_130E8
000138EE 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138F4 08A8 0000 0022             		bclr	#0,$22(a0)
000138FA 303C 00A4                  		move.w	#$A4,d0
000138FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013904                            
00013904                            locret_130E8:
00013904 4E75                       		rts	
00013906                            ; End of function Sonic_MoveLeft
00013906                            
00013906                            
00013906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013906                            
00013906                            
00013906                            Sonic_MoveRight:			; XREF: Sonic_Move
00013906 3028 0014                  		move.w	$14(a0),d0
0001390A 6B00                       		bmi.s	loc_13118
0001390C 08A8 0000 0022             		bclr	#0,$22(a0)
00013912 6700                       		beq.s	loc_13104
00013914 08A8 0005 0022             		bclr	#5,$22(a0)
0001391A 117C 0001 001D             		move.b	#1,$1D(a0)
00013920                            
00013920                            loc_13104:
00013920 D045                       		add.w	d5,d0
00013922 B046                       		cmp.w	d6,d0
00013924 6D00                       		blt.s	loc_1310C
00013926 3006                       		move.w	d6,d0
00013928                            
00013928                            loc_1310C:
00013928 3140 0014                  		move.w	d0,$14(a0)
0001392C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013932 4E75                       		rts	
00013934                            ; ===========================================================================
00013934                            
00013934                            loc_13118:				; XREF: Sonic_MoveRight
00013934 D044                       		add.w	d4,d0
00013936 6400                       		bcc.s	loc_13120
00013938 303C 0080                  		move.w	#$80,d0
0001393C                            
0001393C                            loc_13120:
0001393C 3140 0014                  		move.w	d0,$14(a0)
00013940 1028 0026                  		move.b	$26(a0),d0
00013944 0600 0020                  		addi.b	#$20,d0
00013948 0200 00C0                  		andi.b	#$C0,d0
0001394C 6600                       		bne.s	locret_1314E
0001394E 0C40 FC00                  		cmpi.w	#-$400,d0
00013952 6E00                       		bgt.s	locret_1314E
00013954 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001395A 08E8 0000 0022             		bset	#0,$22(a0)
00013960 303C 00A4                  		move.w	#$A4,d0
00013964 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
0001396A                            
0001396A                            locret_1314E:
0001396A 4E75                       		rts	
0001396C                            ; End of function Sonic_MoveRight
0001396C                            
0001396C                            ; ---------------------------------------------------------------------------
0001396C                            ; Subroutine to	change Sonic's speed as he rolls
0001396C                            ; ---------------------------------------------------------------------------
0001396C                            
0001396C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001396C                            
0001396C                            
0001396C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001396C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013970 E346                       		asl.w	#1,d6
00013972 3A38 F762                  		move.w	($FFFFF762).w,d5
00013976 E245                       		asr.w	#1,d5
00013978 3838 F764                  		move.w	($FFFFF764).w,d4
0001397C E444                       		asr.w	#2,d4
0001397E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013982 6600 0000                  		bne.w	loc_131CC
00013986 4A68 003E                  		tst.w	$3E(a0)
0001398A 6600                       		bne.s	loc_13188
0001398C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013992 6700                       		beq.s	loc_1317C	; if not, branch
00013994 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001399A 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
0001399C 6100 0000                  		bsr.w	Sonic_RollLeft
000139A0                            
000139A0                            loc_1317C:
000139A0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000139A6 6700                       		beq.s	loc_13188	; if not, branch
000139A8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139AE 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000139B0 6100 0000                  		bsr.w	Sonic_RollLeft
000139B4 6000                       		bra.s	loc_13188
000139B6                            
000139B6                            SonicRS_RollRight:
000139B6 6100 0000                  		bsr.w	Sonic_RollRight
000139BA                            
000139BA                            loc_13188:
000139BA 3028 0014                  		move.w	$14(a0),d0
000139BE 6700                       		beq.s	loc_131AA
000139C0 6B00                       		bmi.s	loc_1319E
000139C2 9045                       		sub.w	d5,d0
000139C4 6400                       		bcc.s	loc_13198
000139C6 303C 0000                  		move.w	#0,d0
000139CA                            
000139CA                            loc_13198:
000139CA 3140 0014                  		move.w	d0,$14(a0)
000139CE 6000                       		bra.s	loc_131AA
000139D0                            ; ===========================================================================
000139D0                            
000139D0                            loc_1319E:				; XREF: Sonic_RollSpeed
000139D0 D045                       		add.w	d5,d0
000139D2 6400                       		bcc.s	loc_131A6
000139D4 303C 0000                  		move.w	#0,d0
000139D8                            
000139D8                            loc_131A6:
000139D8 3140 0014                  		move.w	d0,$14(a0)
000139DC                            
000139DC                            loc_131AA:
000139DC 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000139E0 6600                       		bne.s	loc_131CC	; if yes, branch
000139E2 08A8 0002 0022             		bclr	#2,$22(a0)
000139E8 117C 0013 0016             		move.b	#$13,$16(a0)
000139EE 117C 0009 0017             		move.b	#9,$17(a0)
000139F4 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000139FA 5B68 000C                  		subq.w	#5,$C(a0)
000139FE                            
000139FE                            loc_131CC:
000139FE 1028 0026                  		move.b	$26(a0),d0
00013A02 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013A08 C1E8 0014                  		muls.w	$14(a0),d0
00013A0C E080                       		asr.l	#8,d0
00013A0E 3140 0012                  		move.w	d0,$12(a0)
00013A12 C3E8 0014                  		muls.w	$14(a0),d1
00013A16 E081                       		asr.l	#8,d1
00013A18 0C41 1000                  		cmpi.w	#$1000,d1
00013A1C 6F00                       		ble.s	loc_131F0
00013A1E 323C 1000                  		move.w	#$1000,d1
00013A22                            
00013A22                            loc_131F0:
00013A22 0C41 F000                  		cmpi.w	#-$1000,d1
00013A26 6C00                       		bge.s	loc_131FA
00013A28 323C F000                  		move.w	#-$1000,d1
00013A2C                            
00013A2C                            loc_131FA:
00013A2C 3141 0010                  		move.w	d1,$10(a0)
00013A30 6000 FDF6                  		bra.w	loc_1300C
00013A34                            ; End of function Sonic_RollSpeed
00013A34                            
00013A34                            
00013A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A34                            
00013A34                            
00013A34                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013A34 3028 0014                  		move.w	$14(a0),d0
00013A38 6700                       		beq.s	loc_1320A
00013A3A 6A00                       		bpl.s	loc_13218
00013A3C                            
00013A3C                            loc_1320A:
00013A3C 08E8 0000 0022             		bset	#0,$22(a0)
00013A42 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A48 4E75                       		rts	
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            loc_13218:
00013A4A 9044                       		sub.w	d4,d0
00013A4C 6400                       		bcc.s	loc_13220
00013A4E 303C FF80                  		move.w	#-$80,d0
00013A52                            
00013A52                            loc_13220:
00013A52 3140 0014                  		move.w	d0,$14(a0)
00013A56 4E75                       		rts	
00013A58                            ; End of function Sonic_RollLeft
00013A58                            
00013A58                            
00013A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A58                            
00013A58                            
00013A58                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013A58 3028 0014                  		move.w	$14(a0),d0
00013A5C 6B00                       		bmi.s	loc_1323A
00013A5E 08A8 0000 0022             		bclr	#0,$22(a0)
00013A64 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A6A 4E75                       		rts	
00013A6C                            ; ===========================================================================
00013A6C                            
00013A6C                            loc_1323A:
00013A6C D044                       		add.w	d4,d0
00013A6E 6400                       		bcc.s	loc_13242
00013A70 303C 0080                  		move.w	#$80,d0
00013A74                            
00013A74                            loc_13242:
00013A74 3140 0014                  		move.w	d0,$14(a0)
00013A78 4E75                       		rts	
00013A7A                            ; End of function Sonic_RollRight
00013A7A                            
00013A7A                            Sonic_AirUnroll:
00013A7A                            		
00013A7A 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013A7E 6600                       		bne.s	@timer
00013A80 1038 F605                  		move.b	($FFFFF605).w,d0
00013A84 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013A88 6700                       		beq.s	@end	; if not, branch
00013A8A 08A8 0002 0022             		bclr	#2,$22(a0)
00013A90 117C 0013 0016             		move.b	#$13,$16(a0)
00013A96 117C 0009 0017             		move.b	#9,$17(a0)
00013A9C 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013AA2 303C 00A5                  		move.w	#$A5,d0
00013AA6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013AAC 2028 0010                  		move.l	$10(a0),d0
00013AB0 D080                       		add.l	d0,d0
00013AB2 2140 0010                  		move.l	d0,$10(a0)
00013AB6 5B68 000C                  		subq.w	#5,$C(a0)
00013ABA                            	@end:
00013ABA 4E75                       		rts
00013ABC                            	@timer:
00013ABC 5328 003A                  		subq.b	#1,$3A(a0)
00013AC0 4E75                       		rts
00013AC2                            
00013AC2                            ; ---------------------------------------------------------------------------
00013AC2                            ; Subroutine to	change Sonic's direction while jumping
00013AC2                            ; ---------------------------------------------------------------------------
00013AC2                            
00013AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC2                            
00013AC2                            
00013AC2                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013AC2 3C38 F760                  		move.w	($FFFFF760).w,d6
00013AC6 3A38 F762                  		move.w	($FFFFF762).w,d5
00013ACA E345                       		asl.w	#1,d5
00013ACC 0828 0004 0022             		btst	#4,$22(a0)
00013AD2 6600                       		bne.s	Obj01_ResetScr2
00013AD4 3028 0010                  		move.w	$10(a0),d0
00013AD8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013ADE 6700                       		beq.s	loc_13278	; if not, branch
00013AE0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AE6 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013AE8 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013AEC 6E00                       		bgt.s	loc_13278
00013AEE 3001                       		move.w	d1,d0
00013AF0                            
00013AF0                            loc_13278:
00013AF0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013AF6 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013AF8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AFE 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B00 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B04 6E00                       		bgt.s	Obj01_JumpMove
00013B06 3001                       		move.w	d1,d0
00013B08 6000                       		bra.s	Obj01_JumpMove
00013B0A                            
00013B0A                            SonicCJD_JumpLeft:
00013B0A 08E8 0000 0022             		bset	#0,$22(a0)
00013B10 9045                       		sub.w	d5,d0
00013B12 3206                       		move.w	d6,d1
00013B14 4441                       		neg.w	d1
00013B16 B041                       		cmp.w	d1,d0
00013B18                            		; bgt.s	loc_13278
00013B18                            		; move.w	d1,d0
00013B18 4E75                       		rts
00013B1A                            
00013B1A                            SonicCJD_JumpRight:
00013B1A 08A8 0000 0022             		bclr	#0,$22(a0)
00013B20 D045                       		add.w	d5,d0
00013B22 B046                       		cmp.w	d6,d0
00013B24 6D00                       		blt.s	Obj01_JumpMove
00013B26 3006                       		move.w	d6,d0
00013B28                            
00013B28                            Obj01_JumpMove:
00013B28 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013B2C                            
00013B2C                            Obj01_ResetScr2:
00013B2C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013B32 6700                       		beq.s	loc_132A4	; if yes, branch
00013B34 6400                       		bcc.s	loc_132A0
00013B36 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013B3A                            
00013B3A                            loc_132A0:
00013B3A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B3E                            
00013B3E                            loc_132A4:
00013B3E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013B44 6500                       		bcs.s	locret_132D2	; if yes, branch
00013B46 3028 0010                  		move.w	$10(a0),d0
00013B4A 3200                       		move.w	d0,d1
00013B4C EA41                       		asr.w	#5,d1
00013B4E 6700                       		beq.s	locret_132D2
00013B50 6B00                       		bmi.s	loc_132C6
00013B52 9041                       		sub.w	d1,d0
00013B54 6400                       		bcc.s	loc_132C0
00013B56 303C 0000                  		move.w	#0,d0
00013B5A                            
00013B5A                            loc_132C0:
00013B5A 3140 0010                  		move.w	d0,$10(a0)
00013B5E 4E75                       		rts	
00013B60                            ; ===========================================================================
00013B60                            
00013B60                            loc_132C6:
00013B60 9041                       		sub.w	d1,d0
00013B62 6500                       		bcs.s	loc_132CE
00013B64 303C 0000                  		move.w	#0,d0
00013B68                            
00013B68                            loc_132CE:
00013B68 3140 0010                  		move.w	d0,$10(a0)
00013B6C                            
00013B6C                            locret_132D2:
00013B6C 4E75                       		rts	
00013B6E                            ; End of function Sonic_ChgJumpDir
00013B6E                            
00013B6E                            ; ===========================================================================
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            ; Unused subroutine to squash Sonic
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E 1028 0026                  		move.b	$26(a0),d0
00013B72 0600 0020                  		addi.b	#$20,d0
00013B76 0200 00C0                  		andi.b	#$C0,d0
00013B7A 6600                       		bne.s	locret_13302
00013B7C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B80 4A41                       		tst.w	d1
00013B82 6A00                       		bpl.s	locret_13302
00013B84 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013B8A 317C 0000 0010             		move.w	#0,$10(a0)
00013B90 317C 0000 0012             		move.w	#0,$12(a0)
00013B96 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013B9C                            
00013B9C                            locret_13302:
00013B9C 4E75                       		rts	
00013B9E                            ; ---------------------------------------------------------------------------
00013B9E                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013B9E                            ; ---------------------------------------------------------------------------
00013B9E                            
00013B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B9E                            
00013B9E                            
00013B9E                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013B9E 2228 0008                  		move.l	8(a0),d1
00013BA2 3028 0010                  		move.w	$10(a0),d0
00013BA6 48C0                       		ext.l	d0
00013BA8 E180                       		asl.l	#8,d0
00013BAA D280                       		add.l	d0,d1
00013BAC 4841                       		swap	d1
00013BAE 3038 F728                  		move.w	($FFFFF728).w,d0
00013BB2 0640 0010                  		addi.w	#$10,d0
00013BB6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013BB8 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013BBA 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013BBE 0640 0128                  		addi.w	#$128,d0
00013BC2 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013BC6 6600                       		bne.s	loc_13332
00013BC8 0640 0040                  		addi.w	#$40,d0
00013BCC                            
00013BCC                            loc_13332:
00013BCC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013BCE 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013BD0                            
00013BD0                            loc_13336:
00013BD0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013BD4 0640 00E0                  		addi.w	#$E0,d0
00013BD8 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013BDC 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013BDE 4E75                       		rts	
00013BE0                            ; ===========================================================================
00013BE0                            
00013BE0                            Boundary_Bottom:
00013BE0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013BE6 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013BEA 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013BF0 6500 0000                  		bcs.w	KillSonic
00013BF4 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013BF8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013BFE 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C04 4E75                       		rts	
00013C06                            ; ===========================================================================
00013C06                            
00013C06                            Boundary_Sides:
00013C06 3140 0008                  		move.w	d0,8(a0)
00013C0A 317C 0000 000A             		move.w	#0,$A(a0)
00013C10 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013C16 317C 0000 0014             		move.w	#0,$14(a0)
00013C1C 60B2                       		bra.s	loc_13336
00013C1E                            ; End of function Sonic_LevelBound
00013C1E                            
00013C1E                            ; ---------------------------------------------------------------------------
00013C1E                            ; Subroutine allowing Sonic to roll when he's moving
00013C1E                            ; ---------------------------------------------------------------------------
00013C1E                            
00013C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C1E                            
00013C1E                            
00013C1E                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013C1E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013C22 6600                       		bne.s	Obj01_NoRoll
00013C24 3028 0014                  		move.w	$14(a0),d0
00013C28 6A00                       		bpl.s	loc_13392
00013C2A 4440                       		neg.w	d0
00013C2C                            
00013C2C                            loc_13392:
00013C2C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013C30 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013C32 1038 F602                  		move.b	($FFFFF602).w,d0
00013C36 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013C3A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013C3C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C42 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013C44                            
00013C44                            Obj01_NoRoll:
00013C44 4E75                       		rts	
00013C46                            ; ===========================================================================
00013C46                            
00013C46                            Obj01_ChkRoll:
00013C46 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013C4C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013C4E 4E75                       		rts	
00013C50                            ; ===========================================================================
00013C50                            
00013C50                            Obj01_DoRoll:
00013C50 08E8 0002 0022             		bset	#2,$22(a0)
00013C56 117C 000E 0016             		move.b	#$E,$16(a0)
00013C5C 117C 0007 0017             		move.b	#7,$17(a0)
00013C62 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C68 5A68 000C                  		addq.w	#5,$C(a0)
00013C6C 303C 00BE                  		move.w	#$BE,d0
00013C70 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013C76 4A68 0014                  		tst.w	$14(a0)
00013C7A 6600                       		bne.s	locret_133E8
00013C7C 317C 0200 0014             		move.w	#$200,$14(a0)
00013C82                            
00013C82                            locret_133E8:
00013C82 4E75                       		rts	
00013C84                            ; End of function Sonic_Roll
00013C84                            
00013C84                            ; ---------------------------------------------------------------------------
00013C84                            ; Subroutine allowing Sonic to jump
00013C84                            ; ---------------------------------------------------------------------------
00013C84                            
00013C84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C84                            
00013C84                            
00013C84                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013C84 1038 F603                  		move.b	($FFFFF603).w,d0
00013C88 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C8C 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013C90 7000                       		moveq	#0,d0
00013C92 1028 0026                  		move.b	$26(a0),d0
00013C96 0600 0080                  		addi.b	#$80,d0
00013C9A 6100 0000                  		bsr.w	sub_14D48
00013C9E 0C41 0006                  		cmpi.w	#6,d1
00013CA2 6D00 0000                  		blt.w	locret_1348E
00013CA6 343C 0680                  		move.w	#$680,d2
00013CAA 0828 0006 0022             		btst	#6,$22(a0)
00013CB0 6700                       		beq.s	loc_1341C
00013CB2 343C 0380                  		move.w	#$380,d2
00013CB6                            
00013CB6                            loc_1341C:
00013CB6 7000                       		moveq	#0,d0
00013CB8 1028 0026                  		move.b	$26(a0),d0
00013CBC 0400 0040                  		subi.b	#$40,d0
00013CC0 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013CC6 C3C2                       		muls.w	d2,d1
00013CC8 E081                       		asr.l	#8,d1
00013CCA D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013CCE C1C2                       		muls.w	d2,d0
00013CD0 E080                       		asr.l	#8,d0
00013CD2 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013CD6 08E8 0001 0022             		bset	#1,$22(a0)
00013CDC 08A8 0005 0022             		bclr	#5,$22(a0)
00013CE2 588F                       		addq.l	#4,sp
00013CE4 117C 0001 003C             		move.b	#1,$3C(a0)
00013CEA 4228 0038                  		clr.b	$38(a0)
00013CEE 303C 00A0                  		move.w	#$A0,d0
00013CF2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013CF8 117C 0013 0016             		move.b	#$13,$16(a0)
00013CFE 117C 0009 0017             		move.b	#9,$17(a0)
00013D04 0828 0002 0022             		btst	#2,$22(a0)
00013D0A 6600                       		bne.s	loc_13490
00013D0C 117C 000E 0016             		move.b	#$E,$16(a0)
00013D12 117C 0007 0017             		move.b	#7,$17(a0)
00013D18 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013D1E 08E8 0002 0022             		bset	#2,$22(a0)
00013D24 5A68 000C                  		addq.w	#5,$C(a0)
00013D28 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013D2E                            
00013D2E                            locret_1348E:
00013D2E 4E75                       		rts	
00013D30                            ; ===========================================================================
00013D30                            
00013D30                            loc_13490:
00013D30 08E8 0004 0022             		bset	#4,$22(a0)
00013D36 4E75                       		rts	
00013D38                            ; End of function Sonic_Jump
00013D38                            
00013D38                            
00013D38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D38                            
00013D38                            
00013D38                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D38 4A28 003C                  		tst.b	$3C(a0)
00013D3C 6700                       		beq.s	loc_134C4
00013D3E 323C FC00                  		move.w	#-$400,d1
00013D42 0828 0006 0022             		btst	#6,$22(a0)
00013D48 6700                       		beq.s	loc_134AE
00013D4A 323C FE00                  		move.w	#-$200,d1
00013D4E                            
00013D4E                            loc_134AE:
00013D4E B268 0012                  		cmp.w	$12(a0),d1
00013D52 6F00                       		ble.s	locret_134C2
00013D54 1038 F602                  		move.b	($FFFFF602).w,d0
00013D58 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D5C 6600                       		bne.s	locret_134C2	; if yes, branch
00013D5E 3141 0012                  		move.w	d1,$12(a0)
00013D62                            
00013D62                            locret_134C2:
00013D62 4E75                       		rts	
00013D64                            ; ===========================================================================
00013D64                            
00013D64                            loc_134C4:
00013D64 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013D6A 6C00                       		bge.s	locret_134D2
00013D6C 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013D72                            
00013D72                            locret_134D2:
00013D72 4E75                       		rts	
00013D74                            ; End of function Sonic_JumpHeight
00013D74                            
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            ; Subroutine to	slow Sonic walking up a	slope
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            
00013D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D74                            
00013D74                            
00013D74                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013D74 1028 0026                  		move.b	$26(a0),d0
00013D78 0600 0060                  		addi.b	#$60,d0
00013D7C 0C00 00C0                  		cmpi.b	#$C0,d0
00013D80 6400                       		bcc.s	locret_13508
00013D82 1028 0026                  		move.b	$26(a0),d0
00013D86 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013D8C C1FC 0020                  		muls.w	#$20,d0
00013D90 E080                       		asr.l	#8,d0
00013D92 4A68 0014                  		tst.w	$14(a0)
00013D96 6700                       		beq.s	locret_13508
00013D98 6B00                       		bmi.s	loc_13504
00013D9A 4A40                       		tst.w	d0
00013D9C 6700                       		beq.s	locret_13502
00013D9E D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013DA2                            
00013DA2                            locret_13502:
00013DA2 4E75                       		rts	
00013DA4                            ; ===========================================================================
00013DA4                            
00013DA4                            loc_13504:
00013DA4 D168 0014                  		add.w	d0,$14(a0)
00013DA8                            
00013DA8                            locret_13508:
00013DA8 4E75                       		rts	
00013DAA                            ; End of function Sonic_SlopeResist
00013DAA                            
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            
00013DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DAA                            
00013DAA                            
00013DAA                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013DAA 1028 0026                  		move.b	$26(a0),d0
00013DAE 0600 0060                  		addi.b	#$60,d0
00013DB2 0C00 00C0                  		cmpi.b	#-$40,d0
00013DB6 6400                       		bcc.s	locret_13544
00013DB8 1028 0026                  		move.b	$26(a0),d0
00013DBC 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013DC2 C1FC 0050                  		muls.w	#$50,d0
00013DC6 E080                       		asr.l	#8,d0
00013DC8 4A68 0014                  		tst.w	$14(a0)
00013DCC 6B00                       		bmi.s	loc_1353A
00013DCE 4A40                       		tst.w	d0
00013DD0 6A00                       		bpl.s	loc_13534
00013DD2 E480                       		asr.l	#2,d0
00013DD4                            
00013DD4                            loc_13534:
00013DD4 D168 0014                  		add.w	d0,$14(a0)
00013DD8 4E75                       		rts	
00013DDA                            ; ===========================================================================
00013DDA                            
00013DDA                            loc_1353A:
00013DDA 4A40                       		tst.w	d0
00013DDC 6B00                       		bmi.s	loc_13540
00013DDE E480                       		asr.l	#2,d0
00013DE0                            
00013DE0                            loc_13540:
00013DE0 D168 0014                  		add.w	d0,$14(a0)
00013DE4                            
00013DE4                            locret_13544:
00013DE4 4E75                       		rts	
00013DE6                            ; End of function Sonic_RollRepel
00013DE6                            
00013DE6                            ; ---------------------------------------------------------------------------
00013DE6                            ; Subroutine to	push Sonic down	a slope
00013DE6                            ; ---------------------------------------------------------------------------
00013DE6                            
00013DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE6                            
00013DE6                            
00013DE6                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013DE6 4E71                       		nop	
00013DE8 4A28 0038                  		tst.b	$38(a0)
00013DEC 6600                       		bne.s	locret_13580
00013DEE 4A68 003E                  		tst.w	$3E(a0)
00013DF2 6600                       		bne.s	loc_13582
00013DF4 1028 0026                  		move.b	$26(a0),d0
00013DF8 0600 0020                  		addi.b	#$20,d0
00013DFC 0200 00C0                  		andi.b	#$C0,d0
00013E00 6700                       		beq.s	locret_13580
00013E02 3028 0014                  		move.w	$14(a0),d0
00013E06 6A00                       		bpl.s	loc_1356A
00013E08 4440                       		neg.w	d0
00013E0A                            
00013E0A                            loc_1356A:
00013E0A 0C40 0280                  		cmpi.w	#$280,d0
00013E0E 6400                       		bcc.s	locret_13580
00013E10 4268 0014                  		clr.w	$14(a0)
00013E14 08E8 0001 0022             		bset	#1,$22(a0)
00013E1A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013E20                            
00013E20                            locret_13580:
00013E20 4E75                       		rts	
00013E22                            ; ===========================================================================
00013E22                            
00013E22                            loc_13582:
00013E22 5368 003E                  		subq.w	#1,$3E(a0)
00013E26 4E75                       		rts	
00013E28                            ; End of function Sonic_SlopeRepel
00013E28                            
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            
00013E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E28                            
00013E28                            
00013E28                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013E28 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013E2C 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013E2E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013E30                            
00013E30 5400                       		addq.b	#2,d0		; increase angle
00013E32 6400                       		bcc.s	loc_13596
00013E34 7000                       		moveq	#0,d0
00013E36                            
00013E36                            loc_13596:
00013E36 6000                       		bra.s	loc_1359E
00013E38                            ; ===========================================================================
00013E38                            
00013E38                            loc_13598:
00013E38 5500                       		subq.b	#2,d0		; decrease angle
00013E3A 6400                       		bcc.s	loc_1359E
00013E3C 7000                       		moveq	#0,d0
00013E3E                            
00013E3E                            loc_1359E:
00013E3E 1140 0026                  		move.b	d0,$26(a0)
00013E42                            
00013E42                            locret_135A2:
00013E42 4E75                       		rts	
00013E44                            ; End of function Sonic_JumpAngle
00013E44                            
00013E44                            ; ---------------------------------------------------------------------------
00013E44                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013E44                            ; ---------------------------------------------------------------------------
00013E44                            
00013E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E44                            
00013E44                            
00013E44                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013E44 3228 0010                  		move.w	$10(a0),d1
00013E48 3428 0012                  		move.w	$12(a0),d2
00013E4C 4EB9 0000 2FBA             		jsr	(CalcAngle).l
00013E52 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013E56 0400 0020                  		subi.b	#$20,d0
00013E5A 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013E5E 0200 00C0                  		andi.b	#$C0,d0
00013E62 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013E66 0C00 0040                  		cmpi.b	#$40,d0
00013E6A 6700 0000                  		beq.w	loc_13680
00013E6E 0C00 0080                  		cmpi.b	#$80,d0
00013E72 6700 0000                  		beq.w	loc_136E2
00013E76 0C00 00C0                  		cmpi.b	#-$40,d0
00013E7A 6700 0000                  		beq.w	loc_1373E
00013E7E 6100 0000                  		bsr.w	Sonic_HitWall
00013E82 4A41                       		tst.w	d1
00013E84 6A00                       		bpl.s	loc_135F0
00013E86 9368 0008                  		sub.w	d1,8(a0)
00013E8A 317C 0000 0010             		move.w	#0,$10(a0)
00013E90                            
00013E90                            loc_135F0:
00013E90 6100 0000                  		bsr.w	sub_14EB4
00013E94 4A41                       		tst.w	d1
00013E96 6A00                       		bpl.s	loc_13602
00013E98 D368 0008                  		add.w	d1,8(a0)
00013E9C 317C 0000 0010             		move.w	#0,$10(a0)
00013EA2                            
00013EA2                            loc_13602:
00013EA2 6100 0000                  		bsr.w	Sonic_HitFloor
00013EA6 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013EAA 4A41                       		tst.w	d1
00013EAC 6A00                       		bpl.s	locret_1367E
00013EAE 1428 0012                  		move.b	$12(a0),d2
00013EB2 5002                       		addq.b	#8,d2
00013EB4 4402                       		neg.b	d2
00013EB6 B202                       		cmp.b	d2,d1
00013EB8 6C00                       		bge.s	loc_1361E
00013EBA B002                       		cmp.b	d2,d0
00013EBC 6D00                       		blt.s	locret_1367E
00013EBE                            
00013EBE                            loc_1361E:
00013EBE D368 000C                  		add.w	d1,$C(a0)
00013EC2 1143 0026                  		move.b	d3,$26(a0)
00013EC6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013ECA 117C 0000 001C             		move.b	#0,$1C(a0)
00013ED0 1003                       		move.b	d3,d0
00013ED2 0600 0020                  		addi.b	#$20,d0
00013ED6 0200 0040                  		andi.b	#$40,d0
00013EDA 6600                       		bne.s	loc_1365C
00013EDC 1003                       		move.b	d3,d0
00013EDE 0600 0010                  		addi.b	#$10,d0
00013EE2 0200 0020                  		andi.b	#$20,d0
00013EE6 6700                       		beq.s	loc_1364E
00013EE8 E0E8 0012                  		asr	$12(a0)
00013EEC 6000                       		bra.s	loc_13670
00013EEE                            ; ===========================================================================
00013EEE                            
00013EEE                            loc_1364E:
00013EEE 317C 0000 0012             		move.w	#0,$12(a0)
00013EF4 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EFA 4E75                       		rts	
00013EFC                            ; ===========================================================================
00013EFC                            
00013EFC                            loc_1365C:
00013EFC 317C 0000 0010             		move.w	#0,$10(a0)
00013F02 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F08 6F00                       		ble.s	loc_13670
00013F0A 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013F10                            
00013F10                            loc_13670:
00013F10 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F16 4A03                       		tst.b	d3
00013F18 6A00                       		bpl.s	locret_1367E
00013F1A 4468 0014                  		neg.w	$14(a0)
00013F1E                            
00013F1E                            locret_1367E:
00013F1E 4E75                       		rts	
00013F20                            ; ===========================================================================
00013F20                            
00013F20                            loc_13680:
00013F20 6100 0000                  		bsr.w	Sonic_HitWall
00013F24 4A41                       		tst.w	d1
00013F26 6A00                       		bpl.s	loc_1369A
00013F28 9368 0008                  		sub.w	d1,8(a0)
00013F2C 317C 0000 0010             		move.w	#0,$10(a0)
00013F32 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F38 4E75                       		rts	
00013F3A                            ; ===========================================================================
00013F3A                            
00013F3A                            loc_1369A:
00013F3A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F3E 4A41                       		tst.w	d1
00013F40 6A00                       		bpl.s	loc_136B4
00013F42 9368 000C                  		sub.w	d1,$C(a0)
00013F46 4A68 0012                  		tst.w	$12(a0)
00013F4A 6A00                       		bpl.s	locret_136B2
00013F4C 317C 0000 0012             		move.w	#0,$12(a0)
00013F52                            
00013F52                            locret_136B2:
00013F52 4E75                       		rts	
00013F54                            ; ===========================================================================
00013F54                            
00013F54                            loc_136B4:
00013F54 4A68 0012                  		tst.w	$12(a0)
00013F58 6B00                       		bmi.s	locret_136E0
00013F5A 6100 0000                  		bsr.w	Sonic_HitFloor
00013F5E 4A41                       		tst.w	d1
00013F60 6A00                       		bpl.s	locret_136E0
00013F62 D368 000C                  		add.w	d1,$C(a0)
00013F66 1143 0026                  		move.b	d3,$26(a0)
00013F6A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F6E 117C 0000 001C             		move.b	#0,$1C(a0)
00013F74 317C 0000 0012             		move.w	#0,$12(a0)
00013F7A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F80                            
00013F80                            locret_136E0:
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            loc_136E2:
00013F82 6100 0000                  		bsr.w	Sonic_HitWall
00013F86 4A41                       		tst.w	d1
00013F88 6A00                       		bpl.s	loc_136F4
00013F8A 9368 0008                  		sub.w	d1,8(a0)
00013F8E 317C 0000 0010             		move.w	#0,$10(a0)
00013F94                            
00013F94                            loc_136F4:
00013F94 6100 0000                  		bsr.w	sub_14EB4
00013F98 4A41                       		tst.w	d1
00013F9A 6A00                       		bpl.s	loc_13706
00013F9C D368 0008                  		add.w	d1,8(a0)
00013FA0 317C 0000 0010             		move.w	#0,$10(a0)
00013FA6                            
00013FA6                            loc_13706:
00013FA6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FAA 4A41                       		tst.w	d1
00013FAC 6A00                       		bpl.s	locret_1373C
00013FAE 9368 000C                  		sub.w	d1,$C(a0)
00013FB2 1003                       		move.b	d3,d0
00013FB4 0600 0020                  		addi.b	#$20,d0
00013FB8 0200 0040                  		andi.b	#$40,d0
00013FBC 6600                       		bne.s	loc_13726
00013FBE 317C 0000 0012             		move.w	#0,$12(a0)
00013FC4 4E75                       		rts	
00013FC6                            ; ===========================================================================
00013FC6                            
00013FC6                            loc_13726:
00013FC6 1143 0026                  		move.b	d3,$26(a0)
00013FCA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FCE 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FD4 4A03                       		tst.b	d3
00013FD6 6A00                       		bpl.s	locret_1373C
00013FD8 4468 0014                  		neg.w	$14(a0)
00013FDC                            
00013FDC                            locret_1373C:
00013FDC 4E75                       		rts	
00013FDE                            ; ===========================================================================
00013FDE                            
00013FDE                            loc_1373E:
00013FDE 6100 0000                  		bsr.w	sub_14EB4
00013FE2 4A41                       		tst.w	d1
00013FE4 6A00                       		bpl.s	loc_13758
00013FE6 D368 0008                  		add.w	d1,8(a0)
00013FEA 317C 0000 0010             		move.w	#0,$10(a0)
00013FF0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FF6 4E75                       		rts	
00013FF8                            ; ===========================================================================
00013FF8                            
00013FF8                            loc_13758:
00013FF8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FFC 4A41                       		tst.w	d1
00013FFE 6A00                       		bpl.s	loc_13772
00014000 9368 000C                  		sub.w	d1,$C(a0)
00014004 4A68 0012                  		tst.w	$12(a0)
00014008 6A00                       		bpl.s	locret_13770
0001400A 317C 0000 0012             		move.w	#0,$12(a0)
00014010                            
00014010                            locret_13770:
00014010 4E75                       		rts	
00014012                            ; ===========================================================================
00014012                            
00014012                            loc_13772:
00014012 4A68 0012                  		tst.w	$12(a0)
00014016 6B00                       		bmi.s	locret_1379E
00014018 6100 0000                  		bsr.w	Sonic_HitFloor
0001401C 4A41                       		tst.w	d1
0001401E 6A00                       		bpl.s	locret_1379E
00014020 D368 000C                  		add.w	d1,$C(a0)
00014024 1143 0026                  		move.b	d3,$26(a0)
00014028 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001402C 117C 0000 001C             		move.b	#0,$1C(a0)
00014032 317C 0000 0012             		move.w	#0,$12(a0)
00014038 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001403E                            
0001403E                            locret_1379E:
0001403E 4E75                       		rts	
00014040                            ; End of function Sonic_Floor
00014040                            
00014040                            ; ---------------------------------------------------------------------------
00014040                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014040                            ; ---------------------------------------------------------------------------
00014040                            
00014040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014040                            
00014040                            
00014040                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014040 0828 0004 0022             		btst	#4,$22(a0)
00014046 6700                       		beq.s	loc_137AE
00014048 4E71                       		nop	
0001404A 4E71                       		nop	
0001404C 4E71                       		nop	
0001404E                            
0001404E                            loc_137AE:
0001404E 08A8 0005 0022             		bclr	#5,$22(a0)
00014054 08A8 0001 0022             		bclr	#1,$22(a0)
0001405A 08A8 0004 0022             		bclr	#4,$22(a0)
00014060 0828 0002 0022             		btst	#2,$22(a0)
00014066 6700                       		beq.s	loc_137E4
00014068 08A8 0002 0022             		bclr	#2,$22(a0)
0001406E 117C 0013 0016             		move.b	#$13,$16(a0)
00014074 117C 0009 0017             		move.b	#9,$17(a0)
0001407A 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014080 5B68 000C                  		subq.w	#5,$C(a0)
00014084                            
00014084                            loc_137E4:
00014084 117C 0000 003C             		move.b	#0,$3C(a0)
0001408A 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014090 4E75                       		rts	
00014092                            ; End of function Sonic_ResetOnFloor
00014092                            
00014092                            ; ===========================================================================
00014092                            ; ---------------------------------------------------------------------------
00014092                            ; Sonic	when he	gets hurt
00014092                            ; ---------------------------------------------------------------------------
00014092                            
00014092                            Obj01_Hurt:				; XREF: Obj01_Index
00014092 4EBA 9D44                  		jsr	SpeedToPos
00014096 0668 0030 0012             		addi.w	#$30,$12(a0)
0001409C 0828 0006 0022             		btst	#6,$22(a0)
000140A2 6700                       		beq.s	loc_1380C
000140A4 0468 0020 0012             		subi.w	#$20,$12(a0)
000140AA                            
000140AA                            loc_1380C:
000140AA 6100 0000                  		bsr.w	Sonic_HurtStop
000140AE 6100 FAEE                  		bsr.w	Sonic_LevelBound
000140B2 6100 F4B4                  		bsr.w	Sonic_RecordPos
000140B6 6100 0000                  		bsr.w	Sonic_Animate
000140BA 6100 0000                  		bsr.w	LoadSonicDynPLC
000140BE 4EFA 9D3E                  		jmp	DisplaySprite
000140C2                            
000140C2                            ; ---------------------------------------------------------------------------
000140C2                            ; Subroutine to	stop Sonic falling after he's been hurt
000140C2                            ; ---------------------------------------------------------------------------
000140C2                            
000140C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140C2                            
000140C2                            
000140C2                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000140C2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000140C6 0640 00E0                  		addi.w	#$E0,d0
000140CA B068 000C                  		cmp.w	$C(a0),d0
000140CE 6500 0000                  		bcs.w	KillSonic
000140D2 6100 FD70                  		bsr.w	Sonic_Floor
000140D6 0828 0001 0022             		btst	#1,$22(a0)
000140DC 6600                       		bne.s	locret_13860
000140DE 7000                       		moveq	#0,d0
000140E0 3140 0012                  		move.w	d0,$12(a0)
000140E4 3140 0010                  		move.w	d0,$10(a0)
000140E8 3140 0014                  		move.w	d0,$14(a0)
000140EC 117C 0000 001C             		move.b	#0,$1C(a0)
000140F2 5528 0024                  		subq.b	#2,$24(a0)
000140F6 317C 0078 0030             		move.w	#$78,$30(a0)
000140FC                            
000140FC                            locret_13860:
000140FC 4E75                       		rts	
000140FE                            ; End of function Sonic_HurtStop
000140FE                            
000140FE                            ; ===========================================================================
000140FE                            ; ---------------------------------------------------------------------------
000140FE                            ; Sonic	when he	dies
000140FE                            ; ---------------------------------------------------------------------------
000140FE                            
000140FE                            Obj01_Death:				; XREF: Obj01_Index
000140FE 6100 0000                  		bsr.w	GameOver
00014102 4EBA 9CA8                  		jsr	ObjectFall
00014106 6100 F460                  		bsr.w	Sonic_RecordPos
0001410A 6100 0000                  		bsr.w	Sonic_Animate
0001410E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014112 4EFA 9CEA                  		jmp	DisplaySprite
00014116                            
00014116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014116                            
00014116                            
00014116                            GameOver:				; XREF: Obj01_Death
00014116 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001411A 0640 0100                  		addi.w	#$100,d0
0001411E B068 000C                  		cmp.w	$C(a0),d0
00014122 6400 0000                  		bcc.w	locret_13900
00014126 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001412C 5428 0024                  		addq.b	#2,$24(a0)
00014130 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014134 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014138 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001413C 6600                       		bne.s	loc_138D4
0001413E 317C 0000 003A             		move.w	#0,$3A(a0)
00014144 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001414A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014150 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014156 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001415A                            
0001415A                            loc_138C2:
0001415A 303C 008F                  		move.w	#$8F,d0
0001415E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
00014164 7003                       		moveq	#3,d0
00014166 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
0001416C                            ; ===========================================================================
0001416C                            
0001416C                            loc_138D4:
0001416C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014172 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014176 6700                       		beq.s	locret_13900	; if not, branch
00014178 317C 0000 003A             		move.w	#0,$3A(a0)
0001417E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014184 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001418A 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014190 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014196 60C2                       		bra.s	loc_138C2
00014198                            ; ===========================================================================
00014198                            
00014198                            locret_13900:
00014198 4E75                       		rts	
0001419A                            ; End of function GameOver
0001419A                            
0001419A                            ; ===========================================================================
0001419A                            ; ---------------------------------------------------------------------------
0001419A                            ; Sonic	when the level is restarted
0001419A                            ; ---------------------------------------------------------------------------
0001419A                            
0001419A                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001419A 4A68 003A                  		tst.w	$3A(a0)
0001419E 6700                       		beq.s	locret_13914
000141A0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000141A4 6600                       		bne.s	locret_13914
000141A6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000141AC                            
000141AC                            locret_13914:
000141AC 4E75                       		rts	
000141AE                            
000141AE                            ; ---------------------------------------------------------------------------
000141AE                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000141AE                            ; ---------------------------------------------------------------------------
000141AE                            
000141AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141AE                            
000141AE                            
000141AE                            Sonic_Loops:				; XREF: Obj01_Control
000141AE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000141B4 6700                       		beq.s	loc_13926	; if yes, branch
000141B6 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
000141BA 6600 0000                  		bne.w	locret_139C2	; if not, branch
000141BE                            
000141BE                            loc_13926:
000141BE 3028 000C                  		move.w	$C(a0),d0
000141C2 E248                       		lsr.w	#1,d0
000141C4 0240 0380                  		andi.w	#$380,d0
000141C8 1228 0008                  		move.b	8(a0),d1
000141CC 0241 007F                  		andi.w	#$7F,d1
000141D0 D041                       		add.w	d1,d0
000141D2 43F8 A400                  		lea	($FFFFA400).w,a1
000141D6 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000141DA B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000141DE 6700 FA66                  		beq.w	Obj01_ChkRoll
000141E2 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000141E6 6700 FA5E                  		beq.w	Obj01_ChkRoll
000141EA B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000141EE 6700                       		beq.s	loc_13976
000141F0 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000141F4 6700                       		beq.s	loc_13966
000141F6 08A8 0006 0001             		bclr	#6,1(a0)
000141FC 4E75                       		rts	
000141FE                            ; ===========================================================================
000141FE                            
000141FE                            loc_13966:
000141FE 0828 0001 0022             		btst	#1,$22(a0)
00014204 6700                       		beq.s	loc_13976
00014206 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001420C 4E75                       		rts	
0001420E                            ; ===========================================================================
0001420E                            
0001420E                            loc_13976:
0001420E 3428 0008                  		move.w	8(a0),d2
00014212 0C02 002C                  		cmpi.b	#$2C,d2
00014216 6400                       		bcc.s	loc_13988
00014218 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001421E 4E75                       		rts	
00014220                            ; ===========================================================================
00014220                            
00014220                            loc_13988:
00014220 0C02 00E0                  		cmpi.b	#-$20,d2
00014224 6500                       		bcs.s	loc_13996
00014226 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001422C 4E75                       		rts	
0001422E                            ; ===========================================================================
0001422E                            
0001422E                            loc_13996:
0001422E 0828 0006 0001             		btst	#6,1(a0)
00014234 6600                       		bne.s	loc_139B2
00014236 1228 0026                  		move.b	$26(a0),d1
0001423A 6700                       		beq.s	locret_139C2
0001423C 0C01 0080                  		cmpi.b	#-$80,d1
00014240 6200                       		bhi.s	locret_139C2
00014242 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014248 4E75                       		rts	
0001424A                            ; ===========================================================================
0001424A                            
0001424A                            loc_139B2:
0001424A 1228 0026                  		move.b	$26(a0),d1
0001424E 0C01 0080                  		cmpi.b	#-$80,d1
00014252 6300                       		bls.s	locret_139C2
00014254 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001425A                            
0001425A                            locret_139C2:
0001425A 4E75                       		rts	
0001425C                            ; End of function Sonic_Loops
0001425C                            
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            ; Subroutine to	animate	Sonic's sprites
0001425C                            ; ---------------------------------------------------------------------------
0001425C                            
0001425C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001425C                            
0001425C                            Player_Anim:
0001425C 0000 0000                  	dc.l	SonicAniData
00014260 0000 0000                  	dc.l	SonicAniData ; gronic
00014264 0000 0000                  	dc.l	SonicAniData ; anakama
00014268                            	; Insert more animation data for other characters here
00014268                            	
00014268                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014268 7000                       			moveq	#0,d0
0001426A 1038 FFE8                  		move.b	(v_character),d0
0001426E E548                       		lsl.w	#2,d0
00014270 43FA FFEA                  		lea 	Player_Anim(pc),a1
00014274                            		
00014274 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014278                            	
00014278 7000                       		moveq	#0,d0
0001427A 1028 001C                  		move.b	$1C(a0),d0
0001427E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014282 6700                       		beq.s	SAnim_Do	; if not, branch
00014284 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014288 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001428E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014294                            
00014294                            SAnim_Do:
00014294 D040                       		add.w	d0,d0
00014296 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001429A 1011                       		move.b	(a1),d0
0001429C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001429E 1228 0022                  		move.b	$22(a0),d1
000142A2 0201 0001                  		andi.b	#1,d1
000142A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142AC 8328 0001                  		or.b	d1,1(a0)
000142B0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000142B4 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000142B6 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000142BA                            
000142BA                            SAnim_Do2:
000142BA 7200                       		moveq	#0,d1
000142BC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000142C0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000142C4 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000142C6                            
000142C6                            SAnim_Next:
000142C6 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000142CA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000142CE                            
000142CE                            SAnim_Delay:
000142CE 4E75                       		rts	
000142D0                            ; ===========================================================================
000142D0                            
000142D0                            SAnim_End_FF:
000142D0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000142D2 6600                       		bne.s	SAnim_End_FE	; if not, branch
000142D4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000142DA 1029 0001                  		move.b	1(a1),d0	; read sprite number
000142DE 60E6                       		bra.s	SAnim_Next
000142E0                            ; ===========================================================================
000142E0                            
000142E0                            SAnim_End_FE:
000142E0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000142E2 6600                       		bne.s	SAnim_End_FD	; if not, branch
000142E4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000142E8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000142EC 9200                       		sub.b	d0,d1
000142EE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000142F2 60D2                       		bra.s	SAnim_Next
000142F4                            ; ===========================================================================
000142F4                            
000142F4                            SAnim_End_FD:
000142F4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000142F6 6600                       		bne.s	SAnim_End	; if not, branch
000142F8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000142FE                            
000142FE                            SAnim_End:
000142FE 4E75                       		rts	
00014300                            ; ===========================================================================
00014300                            
00014300                            SAnim_WalkRun:				; XREF: SAnim_Do
00014300 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014304 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014306 5200                       		addq.b	#1,d0		; is animation walking/running?
00014308 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001430C 7200                       		moveq	#0,d1
0001430E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014312 1428 0022                  		move.b	$22(a0),d2
00014316 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001431A 6600                       		bne.s	loc_13A70	; if yes, branch
0001431C 4600                       		not.b	d0		; reverse angle
0001431E                            
0001431E                            loc_13A70:
0001431E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014322 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014324 7203                       		moveq	#3,d1
00014326                            
00014326                            loc_13A78:
00014326 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001432C B302                       		eor.b	d1,d2
0001432E 8528 0001                  		or.b	d2,1(a0)
00014332 0828 0005 0022             		btst	#5,$22(a0)
00014338 6600 0000                  		bne.w	SAnim_Push
0001433C E808                       		lsr.b	#4,d0		; divide angle by $10
0001433E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014342 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014346 6A00                       		bpl.s	loc_13A9C
00014348 4442                       		neg.w	d2
0001434A                            
0001434A                            loc_13A9C:
0001434A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014350 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014354 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014356 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001435C 1200                       		move.b	d0,d1
0001435E E209                       		lsr.b	#1,d1
00014360 D001                       		add.b	d1,d0
00014362                            
00014362                            loc_13AB4:
00014362 D000                       		add.b	d0,d0
00014364 1600                       		move.b	d0,d3
00014366 4442                       		neg.w	d2
00014368 0642 0800                  		addi.w	#$800,d2
0001436C 6A00                       		bpl.s	loc_13AC2
0001436E 7400                       		moveq	#0,d2
00014370                            
00014370                            loc_13AC2:
00014370 E04A                       		lsr.w	#8,d2
00014372 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014376 6100 FF42                  		bsr.w	SAnim_Do2
0001437A D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001437E 4E75                       		rts	
00014380                            ; ===========================================================================
00014380                            
00014380                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014380 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014382 6600                       		bne.s	SAnim_Push	; if not, branch
00014384 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014388 6A00                       		bpl.s	loc_13ADE
0001438A 4442                       		neg.w	d2
0001438C                            
0001438C                            loc_13ADE:
0001438C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014392 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014396 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014398 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001439E                            
0001439E                            loc_13AF0:
0001439E 4442                       		neg.w	d2
000143A0 0642 0400                  		addi.w	#$400,d2
000143A4 6A00                       		bpl.s	loc_13AFA
000143A6 7400                       		moveq	#0,d2
000143A8                            
000143A8                            loc_13AFA:
000143A8 E04A                       		lsr.w	#8,d2
000143AA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143AE 1228 0022                  		move.b	$22(a0),d1
000143B2 0201 0001                  		andi.b	#1,d1
000143B6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143BC 8328 0001                  		or.b	d1,1(a0)
000143C0 6000 FEF8                  		bra.w	SAnim_Do2
000143C4                            ; ===========================================================================
000143C4                            
000143C4                            SAnim_Push:				; XREF: SAnim_RollJump
000143C4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143C8 6B00                       		bmi.s	loc_13B1E
000143CA 4442                       		neg.w	d2
000143CC                            
000143CC                            loc_13B1E:
000143CC 0642 0800                  		addi.w	#$800,d2
000143D0 6A00                       		bpl.s	loc_13B26
000143D2 7400                       		moveq	#0,d2
000143D4                            
000143D4                            loc_13B26:
000143D4 EC4A                       		lsr.w	#6,d2
000143D6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143DA 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000143E0 1228 0022                  		move.b	$22(a0),d1
000143E4 0201 0001                  		andi.b	#1,d1
000143E8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143EE 8328 0001                  		or.b	d1,1(a0)
000143F2 6000 FEC6                  		bra.w	SAnim_Do2
000143F6                            ; End of function Sonic_Animate
000143F6                            
000143F6                            ; ===========================================================================
000143F6                            SonicAniData:
000143F6                            	include "_anim\Sonic.asm"
000143F6                            ; ---------------------------------------------------------------------------
000143F6                            ; Animation script - Sonic
000143F6                            ; ---------------------------------------------------------------------------
000143F6 0000                       		dc.w SonAni_Walk-SonicAniData
000143F8 0000                       		dc.w SonAni_Run-SonicAniData
000143FA 0000                       		dc.w SonAni_Roll-SonicAniData
000143FC 0000                       		dc.w SonAni_Roll2-SonicAniData
000143FE 0000                       		dc.w SonAni_Push-SonicAniData
00014400 0000                       		dc.w SonAni_Wait-SonicAniData
00014402 0000                       		dc.w SonAni_Balance-SonicAniData
00014404 0000                       		dc.w SonAni_LookUp-SonicAniData
00014406 0000                       		dc.w SonAni_Duck-SonicAniData
00014408 0000                       		dc.w SonAni_Warp1-SonicAniData
0001440A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001440C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001440E 0000                       		dc.w SonAni_Warp4-SonicAniData
00014410 0000                       		dc.w SonAni_Stop-SonicAniData
00014412 0000                       		dc.w SonAni_Float1-SonicAniData
00014414 0000                       		dc.w SonAni_Float2-SonicAniData
00014416 0000                       		dc.w SonAni_Spring-SonicAniData
00014418 0000                       		dc.w SonAni_LZHang-SonicAniData
0001441A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001441C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001441E 0000                       		dc.w SonAni_Surf-SonicAniData
00014420 0000                       		dc.w SonAni_Bubble-SonicAniData
00014422 0000                       		dc.w SonAni_Death1-SonicAniData
00014424 0000                       		dc.w SonAni_Drown-SonicAniData
00014426 0000                       		dc.w SonAni_Death2-SonicAniData
00014428 0000                       		dc.w SonAni_Shrink-SonicAniData
0001442A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001442C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001442E 0000                       		dc.w SonAni_Blank-SonicAniData
00014430 0000                       		dc.w SonAni_Float3-SonicAniData
00014432 0000                       		dc.w SonAni_Float4-SonicAniData
00014434 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001443E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014446 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001444E FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014456 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001445E 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014474 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014478 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001447C 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014480 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014484 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014488 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001448C 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014490 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014494 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014498 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000144A0 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000144A4 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000144A8 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000144AE 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000144B4 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000144B8 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000144C0 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000144C4 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000144C8 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000144CC 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000144D6 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000144DA 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000144DE 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000144E2 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000144EA 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000144EE                            		even
000144EE                            		even
000144EE                            
000144EE                            ; ---------------------------------------------------------------------------
000144EE                            ; Sonic	pattern	loading	subroutine
000144EE                            ; ---------------------------------------------------------------------------
000144EE                            
000144EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144EE                            Player_DPLC:
000144EE 0000 0000                  	dc.l	SonicDynPLC
000144F2 0000 0000                  	dc.l	SonicDynPLC ; gronic
000144F6 0000 0000                  	dc.l	SonicDynPLC ; anakama
000144FA                            	; add pointers for player dplc here
000144FA                            Player_Art:
000144FA 0000 0000                  	dc.l	Art_Sonic
000144FE 0000 0000                  	dc.l	Art_Sonic ; gronic
00014502 0000 0000                  	dc.l	Art_Sonic ; anakama
00014506                            	; add pointers for player art here
00014506                            
00014506                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014506 7000                       		moveq	#0,d0
00014508 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001450C B038 F766                  		cmp.b	($FFFFF766).w,d0
00014510 6700                       		beq.s	locret_13C96
00014512 11C0 F766                  		move.b	d0,($FFFFF766).w
00014516                            		
00014516 323C 0000                  		move.w	#0,d1
0001451A 1238 FFE8                  		move.b	(v_character),d1
0001451E E549                       		lsl.w	#2,d1
00014520 45FA FFCC                  		lea 	Player_DPLC(pc),a2
00014524                            
00014524 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014528                            		
00014528 D040                       		add.w	d0,d0
0001452A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001452E 7200                       		moveq	#0,d1
00014530 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014532 5301                       		subq.b	#1,d1
00014534 6B00                       		bmi.s	locret_13C96
00014536 47F8 C800                  		lea	($FFFFC800).w,a3
0001453A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014540                            
00014540                            SPLC_ReadEntry:
00014540 303C 0000                  		move.w	#0,d0
00014544 1038 FFE8                  		move.b	(v_character),d0
00014548 E548                       		lsl.w	#2,d0
0001454A 43FA FFAE                  		lea 	Player_Art(pc),a1
0001454E                            
0001454E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014552                            
00014552 7400                       		moveq	#0,d2
00014554 141A                       		move.b	(a2)+,d2
00014556 3002                       		move.w	d2,d0
00014558 E808                       		lsr.b	#4,d0
0001455A E14A                       		lsl.w	#8,d2
0001455C 141A                       		move.b	(a2)+,d2
0001455E EB4A                       		lsl.w	#5,d2
00014560 D3C2                       		adda.l	d2,a1
00014562                            
00014562                            SPLC_LoadTile:
00014562 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014566 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001456A 47EB 0020                  		lea	$20(a3),a3	; next tile
0001456E 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014572                            
00014572 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014576                            
00014576                            locret_13C96:
00014576 4E75                       		rts	
00014578                            ; End of function LoadSonicDynPLC
00014578                            
00014578                            ; ===========================================================================
00014578                            ; ---------------------------------------------------------------------------
00014578                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014578                            ; ---------------------------------------------------------------------------
00014578                            
00014578                            Obj0A:					; XREF: Obj_Index
00014578 7000                       		moveq	#0,d0
0001457A 1028 0024                  		move.b	$24(a0),d0
0001457E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014582 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014586                            ; ===========================================================================
00014586 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001458A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001458E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014592 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014596 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014598                            ; ===========================================================================
00014598                            
00014598                            Obj0A_Main:				; XREF: Obj0A_Index
00014598 5428 0024                  		addq.b	#2,$24(a0)
0001459C 217C 0001 3190 0004        		move.l	#Map_obj64,4(a0)
000145A4 317C 8348 0002             		move.w	#$8348,2(a0)
000145AA 117C 0084 0001             		move.b	#$84,1(a0)
000145B0 117C 0010 0019             		move.b	#$10,$19(a0)
000145B6 117C 0001 0018             		move.b	#1,$18(a0)
000145BC 1028 0028                  		move.b	$28(a0),d0
000145C0 6A00                       		bpl.s	loc_13D00
000145C2 5028 0024                  		addq.b	#8,$24(a0)
000145C6 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000145CE 317C 0440 0002             		move.w	#$440,2(a0)
000145D4 0240 007F                  		andi.w	#$7F,d0
000145D8 1140 0033                  		move.b	d0,$33(a0)
000145DC 6000 0000                  		bra.w	Obj0A_Countdown
000145E0                            ; ===========================================================================
000145E0                            
000145E0                            loc_13D00:
000145E0 1140 001C                  		move.b	d0,$1C(a0)
000145E4 3168 0008 0030             		move.w	8(a0),$30(a0)
000145EA 317C FF78 0012             		move.w	#-$88,$12(a0)
000145F0                            
000145F0                            Obj0A_Animate:				; XREF: Obj0A_Index
000145F0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145F6 4EB9 0000 AEBE             		jsr	AnimateSprite
000145FC                            
000145FC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000145FC 3038 F646                  		move.w	($FFFFF646).w,d0
00014600 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014604 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014606 117C 0006 0024             		move.b	#6,$24(a0)
0001460C 5E28 001C                  		addq.b	#7,$1C(a0)
00014610 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014616 6700                       		beq.s	Obj0A_Display
00014618 6000                       		bra.s	Obj0A_Display
0001461A                            ; ===========================================================================
0001461A                            
0001461A                            Obj0A_Wobble:
0001461A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001461E 6700                       		beq.s	loc_13D44
00014620 5868 0030                  		addq.w	#4,$30(a0)
00014624                            
00014624                            loc_13D44:
00014624 1028 0026                  		move.b	$26(a0),d0
00014628 5228 0026                  		addq.b	#1,$26(a0)
0001462C 0240 007F                  		andi.w	#$7F,d0
00014630 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014636 1031 0000                  		move.b	(a1,d0.w),d0
0001463A 4880                       		ext.w	d0
0001463C D068 0030                  		add.w	$30(a0),d0
00014640 3140 0008                  		move.w	d0,8(a0)
00014644 6100                       		bsr.s	Obj0A_ShowNumber
00014646 4EBA 9790                  		jsr	SpeedToPos
0001464A 4A28 0001                  		tst.b	1(a0)
0001464E 6A00                       		bpl.s	Obj0A_Delete
00014650 4EFA 97AC                  		jmp	DisplaySprite
00014654                            ; ===========================================================================
00014654                            
00014654                            Obj0A_Delete:
00014654 4EFA 97E4                  		jmp	DeleteObject
00014658                            ; ===========================================================================
00014658                            
00014658                            Obj0A_Display:				; XREF: Obj0A_Index
00014658 6100                       		bsr.s	Obj0A_ShowNumber
0001465A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014660 4EB9 0000 AEBE             		jsr	AnimateSprite
00014666 4EFA 9796                  		jmp	DisplaySprite
0001466A                            ; ===========================================================================
0001466A                            
0001466A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001466A 4EFA 97CE                  		jmp	DeleteObject
0001466E                            ; ===========================================================================
0001466E                            
0001466E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001466E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014674 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014676 5368 0038                  		subq.w	#1,$38(a0)
0001467A 6600                       		bne.s	Obj0A_Display2
0001467C 117C 000E 0024             		move.b	#$E,$24(a0)
00014682 5E28 001C                  		addq.b	#7,$1C(a0)
00014686 60D0                       		bra.s	Obj0A_Display
00014688                            ; ===========================================================================
00014688                            
00014688                            Obj0A_Display2:
00014688 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001468E 4EB9 0000 AEBE             		jsr	AnimateSprite
00014694 4A28 0001                  		tst.b	1(a0)
00014698 6A00                       		bpl.s	Obj0A_Delete3
0001469A 4EFA 9762                  		jmp	DisplaySprite
0001469E                            ; ===========================================================================
0001469E                            
0001469E                            Obj0A_Delete3:
0001469E 4EFA 979A                  		jmp	DeleteObject
000146A2                            ; ===========================================================================
000146A2                            
000146A2                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000146A2 4A68 0038                  		tst.w	$38(a0)
000146A6 6700                       		beq.s	locret_13E1A
000146A8 5368 0038                  		subq.w	#1,$38(a0)
000146AC 6600                       		bne.s	locret_13E1A
000146AE 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000146B4 6400                       		bcc.s	locret_13E1A
000146B6 317C 000F 0038             		move.w	#$F,$38(a0)
000146BC 4268 0012                  		clr.w	$12(a0)
000146C0 117C 0080 0001             		move.b	#$80,1(a0)
000146C6 3028 0008                  		move.w	8(a0),d0
000146CA 9078 F700                  		sub.w	($FFFFF700).w,d0
000146CE 0640 0080                  		addi.w	#$80,d0
000146D2 3140 0008                  		move.w	d0,8(a0)
000146D6 3028 000C                  		move.w	$C(a0),d0
000146DA 9078 F704                  		sub.w	($FFFFF704).w,d0
000146DE 0640 0080                  		addi.w	#$80,d0
000146E2 3140 000A                  		move.w	d0,$A(a0)
000146E6 117C 000C 0024             		move.b	#$C,$24(a0)
000146EC                            
000146EC                            locret_13E1A:
000146EC 4E75                       		rts	
000146EE                            ; ===========================================================================
000146EE                            Obj0A_WobbleData:
000146EE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000146FF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014710 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014721 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014731 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001473E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001474B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014758 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014765 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001476E                            ; ===========================================================================
0001476E                            
0001476E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001476E 4A68 002C                  		tst.w	$2C(a0)
00014772 6600 0000                  		bne.w	loc_13F86
00014776 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001477C 6400 0000                  		bcc.w	locret_1408C
00014780 0838 0006 D022             		btst	#6,($FFFFD022).w
00014786 6700 0000                  		beq.w	locret_1408C
0001478A 5368 0038                  		subq.w	#1,$38(a0)
0001478E 6A00 0000                  		bpl.w	loc_13FAC
00014792 317C 003B 0038             		move.w	#59,$38(a0)
00014798 317C 0001 0036             		move.w	#1,$36(a0)
0001479E 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000147A4 0240 0001                  		andi.w	#1,d0
000147A8 1140 0034                  		move.b	d0,$34(a0)
000147AC 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000147B0 0C40 0019                  		cmpi.w	#$19,d0
000147B4 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000147B6 0C40 0014                  		cmpi.w	#$14,d0
000147BA 6700                       		beq.s	Obj0A_WarnSound
000147BC 0C40 000F                  		cmpi.w	#$F,d0
000147C0 6700                       		beq.s	Obj0A_WarnSound
000147C2 0C40 000C                  		cmpi.w	#$C,d0
000147C6 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000147C8 6600                       		bne.s	loc_13F02
000147CA 303C 0092                  		move.w	#$92,d0
000147CE 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
000147D4                            
000147D4                            loc_13F02:
000147D4 5328 0032                  		subq.b	#1,$32(a0)
000147D8 6A00                       		bpl.s	Obj0A_ReduceAir
000147DA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000147E0 08E8 0007 0036             		bset	#7,$36(a0)
000147E6 6000                       		bra.s	Obj0A_ReduceAir
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000147E8 303C 00C2                  		move.w	#$C2,d0
000147EC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000147F2                            
000147F2                            Obj0A_ReduceAir:
000147F2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000147F6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000147FA 6100 0000                  		bsr.w	ResumeMusic
000147FE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014804 303C 00B2                  		move.w	#$B2,d0
00014808 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
0001480E 117C 000A 0034             		move.b	#$A,$34(a0)
00014814 317C 0001 0036             		move.w	#1,$36(a0)
0001481A 317C 0078 002C             		move.w	#$78,$2C(a0)
00014820 2F08                       		move.l	a0,-(sp)
00014822 41F8 D000                  		lea	($FFFFD000).w,a0
00014826 6100 F818                  		bsr.w	Sonic_ResetOnFloor
0001482A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014830 08E8 0001 0022             		bset	#1,$22(a0)
00014836 08E8 0007 0002             		bset	#7,2(a0)
0001483C 317C 0000 0012             		move.w	#0,$12(a0)
00014842 317C 0000 0010             		move.w	#0,$10(a0)
00014848 317C 0000 0014             		move.w	#0,$14(a0)
0001484E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014854 205F                       		movea.l	(sp)+,a0
00014856 4E75                       		rts	
00014858                            ; ===========================================================================
00014858                            
00014858                            loc_13F86:
00014858 5368 002C                  		subq.w	#1,$2C(a0)
0001485C 6600                       		bne.s	loc_13F94
0001485E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014864 4E75                       		rts	
00014866                            ; ===========================================================================
00014866                            
00014866                            loc_13F94:
00014866 2F08                       		move.l	a0,-(sp)
00014868 41F8 D000                  		lea	($FFFFD000).w,a0
0001486C 4EBA 956A                  		jsr	SpeedToPos
00014870 0668 0010 0012             		addi.w	#$10,$12(a0)
00014876 205F                       		movea.l	(sp)+,a0
00014878 6000                       		bra.s	loc_13FAC
0001487A                            ; ===========================================================================
0001487A                            
0001487A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001487A 6000                       		bra.s	Obj0A_MakeItem
0001487C                            ; ===========================================================================
0001487C                            
0001487C                            loc_13FAC:
0001487C 4A68 0036                  		tst.w	$36(a0)
00014880 6700 0000                  		beq.w	locret_1408C
00014884 5368 003A                  		subq.w	#1,$3A(a0)
00014888 6A00 0000                  		bpl.w	locret_1408C
0001488C                            
0001488C                            Obj0A_MakeItem:
0001488C 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00014892 0240 000F                  		andi.w	#$F,d0
00014896 3140 003A                  		move.w	d0,$3A(a0)
0001489A 4EBA 99E8                  		jsr	SingleObjLoad
0001489E 6600 0000                  		bne.w	locret_1408C
000148A2 12BC 000A                  		move.b	#$A,0(a1)	; load object
000148A6 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000148AC 7006                       		moveq	#6,d0
000148AE 0838 0000 D022             		btst	#0,($FFFFD022).w
000148B4 6700                       		beq.s	loc_13FF2
000148B6 4440                       		neg.w	d0
000148B8 137C 0040 0026             		move.b	#$40,$26(a1)
000148BE                            
000148BE                            loc_13FF2:
000148BE D169 0008                  		add.w	d0,8(a1)
000148C2 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000148C8 137C 0006 0028             		move.b	#6,$28(a1)
000148CE 4A68 002C                  		tst.w	$2C(a0)
000148D2 6700 0000                  		beq.w	loc_1403E
000148D6 0268 0007 003A             		andi.w	#7,$3A(a0)
000148DC 0668 0000 003A             		addi.w	#0,$3A(a0)
000148E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000148E6 0440 000C                  		subi.w	#$C,d0
000148EA 3340 000C                  		move.w	d0,$C(a1)
000148EE 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000148F4 1340 0026                  		move.b	d0,$26(a1)
000148F8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000148FC 0200 0003                  		andi.b	#3,d0
00014900 6600                       		bne.s	loc_14082
00014902 137C 000E 0028             		move.b	#$E,$28(a1)
00014908 6000                       		bra.s	loc_14082
0001490A                            ; ===========================================================================
0001490A                            
0001490A                            loc_1403E:
0001490A 0828 0007 0036             		btst	#7,$36(a0)
00014910 6700                       		beq.s	loc_14082
00014912 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014916 E24A                       		lsr.w	#1,d2
00014918 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001491E 0240 0003                  		andi.w	#3,d0
00014922 6600                       		bne.s	loc_1406A
00014924 08E8 0006 0036             		bset	#6,$36(a0)
0001492A 6600                       		bne.s	loc_14082
0001492C 1342 0028                  		move.b	d2,$28(a1)
00014930 337C 001C 0038             		move.w	#$1C,$38(a1)
00014936                            
00014936                            loc_1406A:
00014936 4A28 0034                  		tst.b	$34(a0)
0001493A 6600                       		bne.s	loc_14082
0001493C 08E8 0006 0036             		bset	#6,$36(a0)
00014942 6600                       		bne.s	loc_14082
00014944 1342 0028                  		move.b	d2,$28(a1)
00014948 337C 001C 0038             		move.w	#$1C,$38(a1)
0001494E                            
0001494E                            loc_14082:
0001494E 5328 0034                  		subq.b	#1,$34(a0)
00014952 6A00                       		bpl.s	locret_1408C
00014954 4268 0036                  		clr.w	$36(a0)
00014958                            
00014958                            locret_1408C:
00014958 4E75                       		rts	
0001495A                            
0001495A                            ; ---------------------------------------------------------------------------
0001495A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001495A                            ; ---------------------------------------------------------------------------
0001495A                            
0001495A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001495A                            
0001495A                            
0001495A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001495A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014960                             
00014960                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014960                             
00014960 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014964                             
00014964 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001496A 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001496C 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014972 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014974                             
00014974                            Air_GetBgm2:
00014974 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001497A 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001497C 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014982 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014984                             
00014984                            Air_GetBgm3:
00014984 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001498A 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001498C 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014992 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014994                             
00014994                            Air_GetBgm4:
00014994 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001499A 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001499C 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000149A2                             
000149A2                            Air_PlayMusic:
000149A2 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000149A6                             
000149A6                            loc_140A6:
000149A6 4EB9 0000 15BA             		jsr	(PlaySound).l
000149AC                             
000149AC                            ; NineKode ends here
000149AC                            
000149AC                            loc_140AC:
000149AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000149B2 4238 D372                  		clr.b	($FFFFD372).w
000149B6 4E75                       		rts	
000149B8                            ; End of function ResumeMusic
000149B8                            
000149B8                            ; ===========================================================================
000149B8                            Ani_obj0A:
000149B8                            	include "_anim\obj0A.asm"
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            ; Animation script - countdown numbers and bubbles (LZ)
000149B8                            ; ---------------------------------------------------------------------------
000149B8 0000                       		dc.w byte_140D6-Ani_obj0A
000149BA 0000                       		dc.w byte_140E0-Ani_obj0A
000149BC 0000                       		dc.w byte_140EA-Ani_obj0A
000149BE 0000                       		dc.w byte_140F4-Ani_obj0A
000149C0 0000                       		dc.w byte_140FE-Ani_obj0A
000149C2 0000                       		dc.w byte_14108-Ani_obj0A
000149C4 0000                       		dc.w byte_14112-Ani_obj0A
000149C6 0000                       		dc.w byte_14118-Ani_obj0A
000149C8 0000                       		dc.w byte_14120-Ani_obj0A
000149CA 0000                       		dc.w byte_14128-Ani_obj0A
000149CC 0000                       		dc.w byte_14130-Ani_obj0A
000149CE 0000                       		dc.w byte_14138-Ani_obj0A
000149D0 0000                       		dc.w byte_14140-Ani_obj0A
000149D2 0000                       		dc.w byte_14148-Ani_obj0A
000149D4 0000                       		dc.w byte_1414A-Ani_obj0A
000149D6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000149E0 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000149EA 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000149F4 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000149FE 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A08 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014A12 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014A18 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014A20 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014A28 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014A30 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014A38 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014A40 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014A48 0EFC                       byte_14148:	dc.b $E, $FC
00014A4A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014A50                            		even
00014A50                            		even
00014A50                            
00014A50                            ; ---------------------------------------------------------------------------
00014A50                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A50                            ; ---------------------------------------------------------------------------
00014A50                            Map_obj0A:
00014A50                            	include "_maps\obj0A.asm"
00014A50                            ; ---------------------------------------------------------------------------
00014A50                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A50                            ; ---------------------------------------------------------------------------
00014A50 0000                       		dc.w byte_14152-Map_obj0A
00014A52 01                         byte_14152:	dc.b 1
00014A53 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014A58                            		even
00014A58                            		even
00014A58                            
00014A58                            ; ===========================================================================
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            ; Object 38 - shield and invincibility stars
00014A58                            ; ---------------------------------------------------------------------------
00014A58                            
00014A58                            Obj38:					; XREF: Obj_Index
00014A58 7000                       		moveq	#0,d0
00014A5A 1028 0024                  		move.b	$24(a0),d0
00014A5E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014A62 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014A66                            ; ===========================================================================
00014A66 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014A68 0000                       		dc.w Obj38_Shield-Obj38_Index
00014A6A 0000                       		dc.w Obj38_Stars-Obj38_Index
00014A6C                            ; ===========================================================================
00014A6C                            
00014A6C                            Obj38_Main:				; XREF: Obj38_Index
00014A6C 5428 0024                  		addq.b	#2,$24(a0)
00014A70 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014A78 117C 0004 0001             		move.b	#4,1(a0)
00014A7E 117C 0001 0018             		move.b	#1,$18(a0)
00014A84 117C 0010 0019             		move.b	#$10,$19(a0)
00014A8A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014A8E 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014A90 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014A96 4E75                       		rts	
00014A98                            ; ===========================================================================
00014A98                            
00014A98                            Obj38_DoStars:
00014A98 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014A9C 317C 055C 0002             		move.w	#$55C,2(a0)
00014AA2 4E75                       		rts	
00014AA4                            ; ===========================================================================
00014AA4                            
00014AA4                            Obj38_Shield:				; XREF: Obj38_Index
00014AA4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AA8 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014AAA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014AAE 6700                       		beq.s	Obj38_Delete	; if not, branch
00014AB0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014AB6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014ABC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014AC2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014AC8 4EB9 0000 AEBE             		jsr	AnimateSprite
00014ACE 4EFA 932E                  		jmp	DisplaySprite
00014AD2                            ; ===========================================================================
00014AD2                            
00014AD2                            Obj38_RmvShield:
00014AD2 4E75                       		rts	
00014AD4                            ; ===========================================================================
00014AD4                            
00014AD4                            Obj38_Delete:
00014AD4 4EFA 9364                  		jmp	DeleteObject
00014AD8                            ; ===========================================================================
00014AD8                            
00014AD8                            Obj38_Stars:				; XREF: Obj38_Index
00014AD8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014ADC 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014ADE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014AE2 1228 001C                  		move.b	$1C(a0),d1
00014AE6 5301                       		subq.b	#1,d1
00014AE8 6000                       		bra.s	Obj38_StarTrail
00014AEA                            ; ===========================================================================
00014AEA E909                       		lsl.b	#4,d1
00014AEC 5801                       		addq.b	#4,d1
00014AEE 9001                       		sub.b	d1,d0
00014AF0 1228 0030                  		move.b	$30(a0),d1
00014AF4 9001                       		sub.b	d1,d0
00014AF6 5801                       		addq.b	#4,d1
00014AF8 0201 000F                  		andi.b	#$F,d1
00014AFC 1141 0030                  		move.b	d1,$30(a0)
00014B00 6000                       		bra.s	Obj38_StarTrail2a
00014B02                            ; ===========================================================================
00014B02                            
00014B02                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B02 E709                       		lsl.b	#3,d1
00014B04 1401                       		move.b	d1,d2
00014B06 D201                       		add.b	d1,d1
00014B08 D202                       		add.b	d2,d1
00014B0A 5801                       		addq.b	#4,d1
00014B0C 9001                       		sub.b	d1,d0
00014B0E 1228 0030                  		move.b	$30(a0),d1
00014B12 9001                       		sub.b	d1,d0
00014B14 5801                       		addq.b	#4,d1
00014B16 0C01 0018                  		cmpi.b	#$18,d1
00014B1A 6500                       		bcs.s	Obj38_StarTrail2
00014B1C 7200                       		moveq	#0,d1
00014B1E                            
00014B1E                            Obj38_StarTrail2:
00014B1E 1141 0030                  		move.b	d1,$30(a0)
00014B22                            
00014B22                            Obj38_StarTrail2a:
00014B22 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014B26 43F1 0000                  		lea	(a1,d0.w),a1
00014B2A 3159 0008                  		move.w	(a1)+,8(a0)
00014B2E 3159 000C                  		move.w	(a1)+,$C(a0)
00014B32 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B38 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B3E 4EB9 0000 AEBE             		jsr	AnimateSprite
00014B44 4EFA 92B8                  		jmp	DisplaySprite
00014B48                            ; ===========================================================================
00014B48                            
00014B48                            Obj38_Delete2:				; XREF: Obj38_Stars
00014B48 4EFA 92F0                  		jmp	DeleteObject
00014B4C                            ; ===========================================================================
00014B4C                            ; ---------------------------------------------------------------------------
00014B4C                            ; Object 4A - special stage entry from beta
00014B4C                            ; ---------------------------------------------------------------------------
00014B4C                            
00014B4C                            Obj4A:					; XREF: Obj_Index
00014B4C 7000                       		moveq	#0,d0
00014B4E 1028 0024                  		move.b	$24(a0),d0
00014B52 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014B56 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014B5A                            ; ===========================================================================
00014B5A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014B5C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014B5E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014B60                            ; ===========================================================================
00014B60                            
00014B60                            Obj4A_Main:				; XREF: Obj4A_Index
00014B60 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014B64 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014B66 4E75                       		rts	
00014B68                            ; ===========================================================================
00014B68                            
00014B68                            Obj4A_Main2:
00014B68 5428 0024                  		addq.b	#2,$24(a0)
00014B6C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014B74 117C 0004 0001             		move.b	#4,1(a0)
00014B7A 117C 0001 0018             		move.b	#1,$18(a0)
00014B80 117C 0038 0019             		move.b	#$38,$19(a0)
00014B86 317C 0541 0002             		move.w	#$541,2(a0)
00014B8C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014B92                            
00014B92                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014B92 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B98 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B9E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BA4 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014BAA 4EB9 0000 AEBE             		jsr	AnimateSprite
00014BB0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014BB6 6600                       		bne.s	Obj4A_Display
00014BB8 4A38 D000                  		tst.b	($FFFFD000).w
00014BBC 6700                       		beq.s	Obj4A_Display
00014BBE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014BC4 303C 00A8                  		move.w	#$A8,d0
00014BC8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014BCE                            
00014BCE                            Obj4A_Display:
00014BCE 4EFA 922E                  		jmp	DisplaySprite
00014BD2                            ; ===========================================================================
00014BD2                            
00014BD2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014BD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014BD6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014BD8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014BDE 4EFA 925A                  		jmp	DeleteObject
00014BE2                            ; ===========================================================================
00014BE2                            
00014BE2                            Obj4A_Wait:
00014BE2 4E75                       		rts	
00014BE4                            ; ===========================================================================
00014BE4                            ; ---------------------------------------------------------------------------
00014BE4                            ; Object 08 - water splash (LZ)
00014BE4                            ; ---------------------------------------------------------------------------
00014BE4                            
00014BE4                            Obj08:					; XREF: Obj_Index
00014BE4 7000                       		moveq	#0,d0
00014BE6 1028 0024                  		move.b	$24(a0),d0
00014BEA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014BEE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014BF2                            ; ===========================================================================
00014BF2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014BF4 0000                       		dc.w Obj08_Display-Obj08_Index
00014BF6 0000                       		dc.w Obj08_Delete-Obj08_Index
00014BF8                            ; ===========================================================================
00014BF8                            
00014BF8                            Obj08_Main:				; XREF: Obj08_Index
00014BF8 5428 0024                  		addq.b	#2,$24(a0)
00014BFC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C04 0028 0004 0001             		ori.b	#4,1(a0)
00014C0A 117C 0001 0018             		move.b	#1,$18(a0)
00014C10 117C 0010 0019             		move.b	#$10,$19(a0)
00014C16 317C 4259 0002             		move.w	#$4259,2(a0)
00014C1C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014C22                            
00014C22                            Obj08_Display:				; XREF: Obj08_Index
00014C22 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014C28 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014C2E 4EB9 0000 AEBE             		jsr	AnimateSprite
00014C34 4EFA 91C8                  		jmp	DisplaySprite
00014C38                            ; ===========================================================================
00014C38                            
00014C38                            Obj08_Delete:				; XREF: Obj08_Index
00014C38 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014C3C                            ; ===========================================================================
00014C3C                            Ani_obj38:
00014C3C                            	include "_anim\obj38.asm"
00014C3C                            ; ---------------------------------------------------------------------------
00014C3C                            ; Animation script - shield and invincibility stars
00014C3C                            ; ---------------------------------------------------------------------------
00014C3C 0000                       		dc.w byte_14356-Ani_obj38
00014C3E 0000                       		dc.w byte_1435E-Ani_obj38
00014C40 0000                       		dc.w byte_14364-Ani_obj38
00014C42 0000                       		dc.w byte_1437E-Ani_obj38
00014C44 0000                       		dc.w byte_14398-Ani_obj38
00014C46 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014C4E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014C54 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014C65 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014C6E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014C7F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014C88 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014C99 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014CA2                            		even
00014CA2                            		even
00014CA2                            
00014CA2                            ; ---------------------------------------------------------------------------
00014CA2                            ; Sprite mappings - shield and invincibility stars
00014CA2                            ; ---------------------------------------------------------------------------
00014CA2                            Map_obj38:
00014CA2                            	include "_maps\obj38.asm"
00014CA2                            ; ---------------------------------------------------------------------------
00014CA2                            ; Sprite mappings - shield and invincibility stars
00014CA2                            ; ---------------------------------------------------------------------------
00014CA2 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014CA6 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014CAA 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014CAE 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014CB2 04                         byte_143C2:	dc.b 4
00014CB3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CB8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014CBD 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014CC2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014CC7 04                         byte_143D7:	dc.b 4
00014CC8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014CCD E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014CD2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014CD7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014CDC 04                         byte_143EC:	dc.b 4
00014CDD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014CE2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014CE7 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CEC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CF1 04                         byte_14401:	dc.b 4
00014CF2 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CF7 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014CFC 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D01 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D06 04                         byte_14416:	dc.b 4
00014D07 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D0C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D11 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014D16 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D1B 04                         byte_1442B:	dc.b 4
00014D1C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014D21 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014D26 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014D2B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014D30 04                         byte_14440:	dc.b 4
00014D31 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014D36 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014D3B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014D40 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014D46 00                         		even
00014D46 00                         		even
00014D46                            
00014D46                            Ani_obj4A:
00014D46                            	include "_anim\obj4A.asm"
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            ; Animation script - special stage entry effect from beta
00014D46                            ; ---------------------------------------------------------------------------
00014D46 0000                       		dc.w byte_14458-Ani_obj4A
00014D48 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014D5C                            		even
00014D5C                            		even
00014D5C                            
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            ; Sprite mappings - special stage entry	from beta
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            Map_obj4A:
00014D5C                            	include "_maps\obj4A.asm"
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C                            ; Sprite mappings - special stage entry	from beta
00014D5C                            ; ---------------------------------------------------------------------------
00014D5C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014D60 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014D64 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014D68 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014D6C 03                         byte_1447C:	dc.b 3
00014D6D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014D72 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014D77 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014D7C 03                         byte_1448C:	dc.b 3
00014D7D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014D82 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014D87 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014D8C 05                         byte_1449C:	dc.b 5
00014D8D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014D92 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014D97 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014D9C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014DA1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014DA6 09                         byte_144B6:	dc.b 9
00014DA7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014DAC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014DB1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014DB6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014DBB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014DC0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014DC5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014DCA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014DCF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014DD4 12                         byte_144E4:	dc.b $12
00014DD5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014DDA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014DDF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014DE4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014DE9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014DEE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014DF3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014DF8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014DFD 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E02 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E07 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E0C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E11 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014E16 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014E1B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014E20 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014E25 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014E2A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014E2F 11                         byte_1453F:	dc.b $11
00014E30 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014E35 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014E3A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014E3F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014E44 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014E49 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E4E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014E53 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014E58 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014E5D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014E62 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014E67 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014E6C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014E71 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014E76 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014E7B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014E80 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014E85 09                         byte_14595:	dc.b 9
00014E86 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014E8B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014E90 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014E95 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014E9A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014E9F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014EA4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014EA9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014EAE 04                         		dc.b 4
00014EAF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014EB4                            		even
00014EB4                            		even
00014EB4                            
00014EB4                            Ani_obj08:
00014EB4                            	include "_anim\obj08.asm"
00014EB4                            ; ---------------------------------------------------------------------------
00014EB4                            ; Animation script - water splash (LZ)
00014EB4                            ; ---------------------------------------------------------------------------
00014EB4 0000                       		dc.w byte_145C6-Ani_obj08
00014EB6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014EBC                            		even
00014EBC                            		even
00014EBC                            
00014EBC                            ; ---------------------------------------------------------------------------
00014EBC                            ; Sprite mappings - water splash (LZ)
00014EBC                            ; ---------------------------------------------------------------------------
00014EBC                            Map_obj08:
00014EBC                            	include "_maps\obj08.asm"
00014EBC                            ; ---------------------------------------------------------------------------
00014EBC                            ; Sprite mappings - water splash (LZ)
00014EBC                            ; ---------------------------------------------------------------------------
00014EBC 0000                       		dc.w byte_145D2-Map_obj08
00014EBE 0000                       		dc.w byte_145DD-Map_obj08
00014EC0 0000                       		dc.w byte_145E8-Map_obj08
00014EC2 02                         byte_145D2:	dc.b 2
00014EC3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014EC8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014ECD 02                         byte_145DD:	dc.b 2
00014ECE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014ED3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014ED8 01                         byte_145E8:	dc.b 1
00014ED9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014EDE                            		even
00014EDE                            		even
00014EDE                            
00014EDE                            ; ---------------------------------------------------------------------------
00014EDE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014EDE                            ; ---------------------------------------------------------------------------
00014EDE                            
00014EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EDE                            
00014EDE                            
00014EDE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014EDE 0828 0003 0022             		btst	#3,$22(a0)
00014EE4 6700                       		beq.s	loc_14602
00014EE6 7000                       		moveq	#0,d0
00014EE8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EEC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EF0 4E75                       		rts	
00014EF2                            ; ===========================================================================
00014EF2                            
00014EF2                            loc_14602:
00014EF2 7003                       		moveq	#3,d0
00014EF4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EF8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EFC 1028 0026                  		move.b	$26(a0),d0
00014F00 0600 0020                  		addi.b	#$20,d0
00014F04 6A00                       		bpl.s	loc_14624
00014F06 1028 0026                  		move.b	$26(a0),d0
00014F0A 6A00                       		bpl.s	loc_1461E
00014F0C 5300                       		subq.b	#1,d0
00014F0E                            
00014F0E                            loc_1461E:
00014F0E 0600 0020                  		addi.b	#$20,d0
00014F12 6000                       		bra.s	loc_14630
00014F14                            ; ===========================================================================
00014F14                            
00014F14                            loc_14624:
00014F14 1028 0026                  		move.b	$26(a0),d0
00014F18 6A00                       		bpl.s	loc_1462C
00014F1A 5200                       		addq.b	#1,d0
00014F1C                            
00014F1C                            loc_1462C:
00014F1C 0600 001F                  		addi.b	#$1F,d0
00014F20                            
00014F20                            loc_14630:
00014F20 0200 00C0                  		andi.b	#$C0,d0
00014F24 0C00 0040                  		cmpi.b	#$40,d0
00014F28 6700 0000                  		beq.w	Sonic_WalkVertL
00014F2C 0C00 0080                  		cmpi.b	#$80,d0
00014F30 6700 0000                  		beq.w	Sonic_WalkCeiling
00014F34 0C00 00C0                  		cmpi.b	#$C0,d0
00014F38 6700 0000                  		beq.w	Sonic_WalkVertR
00014F3C 3428 000C                  		move.w	$C(a0),d2
00014F40 3628 0008                  		move.w	8(a0),d3
00014F44 7000                       		moveq	#0,d0
00014F46 1028 0016                  		move.b	$16(a0),d0
00014F4A 4880                       		ext.w	d0
00014F4C D440                       		add.w	d0,d2
00014F4E 1028 0017                  		move.b	$17(a0),d0
00014F52 4880                       		ext.w	d0
00014F54 D640                       		add.w	d0,d3
00014F56 49F8 F768                  		lea	($FFFFF768).w,a4
00014F5A 367C 0010                  		movea.w	#$10,a3
00014F5E 3C3C 0000                  		move.w	#0,d6
00014F62 7A0D                       		moveq	#$D,d5
00014F64 6100 0000                  		bsr.w	FindFloor
00014F68 3F01                       		move.w	d1,-(sp)
00014F6A 3428 000C                  		move.w	$C(a0),d2
00014F6E 3628 0008                  		move.w	8(a0),d3
00014F72 7000                       		moveq	#0,d0
00014F74 1028 0016                  		move.b	$16(a0),d0
00014F78 4880                       		ext.w	d0
00014F7A D440                       		add.w	d0,d2
00014F7C 1028 0017                  		move.b	$17(a0),d0
00014F80 4880                       		ext.w	d0
00014F82 4440                       		neg.w	d0
00014F84 D640                       		add.w	d0,d3
00014F86 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F8A 367C 0010                  		movea.w	#$10,a3
00014F8E 3C3C 0000                  		move.w	#0,d6
00014F92 7A0D                       		moveq	#$D,d5
00014F94 6100 0000                  		bsr.w	FindFloor
00014F98 301F                       		move.w	(sp)+,d0
00014F9A 6100 0000                  		bsr.w	Sonic_Angle
00014F9E 4A41                       		tst.w	d1
00014FA0 6700                       		beq.s	locret_146BE
00014FA2 6A00                       		bpl.s	loc_146C0
00014FA4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014FA8 6D00                       		blt.s	locret_146E6
00014FAA D368 000C                  		add.w	d1,$C(a0)
00014FAE                            
00014FAE                            locret_146BE:
00014FAE 4E75                       		rts	
00014FB0                            ; ===========================================================================
00014FB0                            
00014FB0                            loc_146C0:
00014FB0 0C41 000E                  		cmpi.w	#$E,d1
00014FB4 6E00                       		bgt.s	loc_146CC
00014FB6                            
00014FB6                            loc_146C6:
00014FB6 D368 000C                  		add.w	d1,$C(a0)
00014FBA 4E75                       		rts	
00014FBC                            ; ===========================================================================
00014FBC                            
00014FBC                            loc_146CC:
00014FBC 4A28 0038                  		tst.b	$38(a0)
00014FC0 66F4                       		bne.s	loc_146C6
00014FC2 08E8 0001 0022             		bset	#1,$22(a0)
00014FC8 08A8 0005 0022             		bclr	#5,$22(a0)
00014FCE 117C 0001 001D             		move.b	#1,$1D(a0)
00014FD4 4E75                       		rts	
00014FD6                            ; ===========================================================================
00014FD6                            
00014FD6                            locret_146E6:
00014FD6 4E75                       		rts	
00014FD8                            ; End of function Sonic_AnglePos
00014FD8                            
00014FD8                            ; ===========================================================================
00014FD8 2428 0008                  		move.l	8(a0),d2
00014FDC 3028 0010                  		move.w	$10(a0),d0
00014FE0 48C0                       		ext.l	d0
00014FE2 E180                       		asl.l	#8,d0
00014FE4 9480                       		sub.l	d0,d2
00014FE6 2142 0008                  		move.l	d2,8(a0)
00014FEA 303C 0038                  		move.w	#$38,d0
00014FEE 48C0                       		ext.l	d0
00014FF0 E180                       		asl.l	#8,d0
00014FF2 9680                       		sub.l	d0,d3
00014FF4 2143 000C                  		move.l	d3,$C(a0)
00014FF8 4E75                       		rts	
00014FFA                            ; ===========================================================================
00014FFA                            
00014FFA                            locret_1470A:
00014FFA 4E75                       		rts	
00014FFC                            ; ===========================================================================
00014FFC 2628 000C                  		move.l	$C(a0),d3
00015000 3028 0012                  		move.w	$12(a0),d0
00015004 0440 0038                  		subi.w	#$38,d0
00015008 3140 0012                  		move.w	d0,$12(a0)
0001500C 48C0                       		ext.l	d0
0001500E E180                       		asl.l	#8,d0
00015010 9680                       		sub.l	d0,d3
00015012 2143 000C                  		move.l	d3,$C(a0)
00015016 4E75                       		rts	
00015018 4E75                       		rts	
0001501A                            ; ===========================================================================
0001501A 2428 0008                  		move.l	8(a0),d2
0001501E 2628 000C                  		move.l	$C(a0),d3
00015022 3028 0010                  		move.w	$10(a0),d0
00015026 48C0                       		ext.l	d0
00015028 E180                       		asl.l	#8,d0
0001502A 9480                       		sub.l	d0,d2
0001502C 3028 0012                  		move.w	$12(a0),d0
00015030 48C0                       		ext.l	d0
00015032 E180                       		asl.l	#8,d0
00015034 9680                       		sub.l	d0,d3
00015036 2142 0008                  		move.l	d2,8(a0)
0001503A 2143 000C                  		move.l	d3,$C(a0)
0001503E 4E75                       		rts	
00015040                            
00015040                            ; ---------------------------------------------------------------------------
00015040                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015040                            ; ---------------------------------------------------------------------------
00015040                            
00015040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015040                            
00015040                            
00015040                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015040 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015044 B240                       		cmp.w	d0,d1
00015046 6F00                       		ble.s	loc_1475E
00015048 1438 F768                  		move.b	($FFFFF768).w,d2
0001504C 3200                       		move.w	d0,d1
0001504E                            
0001504E                            loc_1475E:
0001504E 0802 0000                  		btst	#0,d2
00015052 6600                       		bne.s	loc_1476A
00015054 1142 0026                  		move.b	d2,$26(a0)
00015058 4E75                       		rts	
0001505A                            ; ===========================================================================
0001505A                            
0001505A                            loc_1476A:
0001505A 1428 0026                  		move.b	$26(a0),d2
0001505E 0602 0020                  		addi.b	#$20,d2
00015062 0202 00C0                  		andi.b	#$C0,d2
00015066 1142 0026                  		move.b	d2,$26(a0)
0001506A 4E75                       		rts	
0001506C                            ; End of function Sonic_Angle
0001506C                            
0001506C                            ; ---------------------------------------------------------------------------
0001506C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001506C                            ; ---------------------------------------------------------------------------
0001506C                            
0001506C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001506C                            
0001506C                            
0001506C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001506C 3428 000C                  		move.w	$C(a0),d2
00015070 3628 0008                  		move.w	8(a0),d3
00015074 7000                       		moveq	#0,d0
00015076 1028 0017                  		move.b	$17(a0),d0
0001507A 4880                       		ext.w	d0
0001507C 4440                       		neg.w	d0
0001507E D440                       		add.w	d0,d2
00015080 1028 0016                  		move.b	$16(a0),d0
00015084 4880                       		ext.w	d0
00015086 D640                       		add.w	d0,d3
00015088 49F8 F768                  		lea	($FFFFF768).w,a4
0001508C 367C 0010                  		movea.w	#$10,a3
00015090 3C3C 0000                  		move.w	#0,d6
00015094 7A0D                       		moveq	#$D,d5
00015096 6100 0000                  		bsr.w	FindWall
0001509A 3F01                       		move.w	d1,-(sp)
0001509C 3428 000C                  		move.w	$C(a0),d2
000150A0 3628 0008                  		move.w	8(a0),d3
000150A4 7000                       		moveq	#0,d0
000150A6 1028 0017                  		move.b	$17(a0),d0
000150AA 4880                       		ext.w	d0
000150AC D440                       		add.w	d0,d2
000150AE 1028 0016                  		move.b	$16(a0),d0
000150B2 4880                       		ext.w	d0
000150B4 D640                       		add.w	d0,d3
000150B6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150BA 367C 0010                  		movea.w	#$10,a3
000150BE 3C3C 0000                  		move.w	#0,d6
000150C2 7A0D                       		moveq	#$D,d5
000150C4 6100 0000                  		bsr.w	FindWall
000150C8 301F                       		move.w	(sp)+,d0
000150CA 6100 FF74                  		bsr.w	Sonic_Angle
000150CE 4A41                       		tst.w	d1
000150D0 6700                       		beq.s	locret_147F0
000150D2 6A00                       		bpl.s	loc_147F2
000150D4 0C41 FFF2                  		cmpi.w	#-$E,d1
000150D8 6D00 FF20                  		blt.w	locret_1470A
000150DC D368 0008                  		add.w	d1,8(a0)
000150E0                            
000150E0                            locret_147F0:
000150E0 4E75                       		rts	
000150E2                            ; ===========================================================================
000150E2                            
000150E2                            loc_147F2:
000150E2 0C41 000E                  		cmpi.w	#$E,d1
000150E6 6E00                       		bgt.s	loc_147FE
000150E8                            
000150E8                            loc_147F8:
000150E8 D368 0008                  		add.w	d1,8(a0)
000150EC 4E75                       		rts	
000150EE                            ; ===========================================================================
000150EE                            
000150EE                            loc_147FE:
000150EE 4A28 0038                  		tst.b	$38(a0)
000150F2 66F4                       		bne.s	loc_147F8
000150F4 08E8 0001 0022             		bset	#1,$22(a0)
000150FA 08A8 0005 0022             		bclr	#5,$22(a0)
00015100 117C 0001 001D             		move.b	#1,$1D(a0)
00015106 4E75                       		rts	
00015108                            ; End of function Sonic_WalkVertR
00015108                            
00015108                            ; ---------------------------------------------------------------------------
00015108                            ; Subroutine allowing Sonic to walk upside-down
00015108                            ; ---------------------------------------------------------------------------
00015108                            
00015108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015108                            
00015108                            
00015108                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015108 3428 000C                  		move.w	$C(a0),d2
0001510C 3628 0008                  		move.w	8(a0),d3
00015110 7000                       		moveq	#0,d0
00015112 1028 0016                  		move.b	$16(a0),d0
00015116 4880                       		ext.w	d0
00015118 9440                       		sub.w	d0,d2
0001511A 0A42 000F                  		eori.w	#$F,d2
0001511E 1028 0017                  		move.b	$17(a0),d0
00015122 4880                       		ext.w	d0
00015124 D640                       		add.w	d0,d3
00015126 49F8 F768                  		lea	($FFFFF768).w,a4
0001512A 367C FFF0                  		movea.w	#-$10,a3
0001512E 3C3C 1000                  		move.w	#$1000,d6
00015132 7A0D                       		moveq	#$D,d5
00015134 6100 0000                  		bsr.w	FindFloor
00015138 3F01                       		move.w	d1,-(sp)
0001513A 3428 000C                  		move.w	$C(a0),d2
0001513E 3628 0008                  		move.w	8(a0),d3
00015142 7000                       		moveq	#0,d0
00015144 1028 0016                  		move.b	$16(a0),d0
00015148 4880                       		ext.w	d0
0001514A 9440                       		sub.w	d0,d2
0001514C 0A42 000F                  		eori.w	#$F,d2
00015150 1028 0017                  		move.b	$17(a0),d0
00015154 4880                       		ext.w	d0
00015156 9640                       		sub.w	d0,d3
00015158 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001515C 367C FFF0                  		movea.w	#-$10,a3
00015160 3C3C 1000                  		move.w	#$1000,d6
00015164 7A0D                       		moveq	#$D,d5
00015166 6100 0000                  		bsr.w	FindFloor
0001516A 301F                       		move.w	(sp)+,d0
0001516C 6100 FED2                  		bsr.w	Sonic_Angle
00015170 4A41                       		tst.w	d1
00015172 6700                       		beq.s	locret_14892
00015174 6A00                       		bpl.s	loc_14894
00015176 0C41 FFF2                  		cmpi.w	#-$E,d1
0001517A 6D00 FE5A                  		blt.w	locret_146E6
0001517E 9368 000C                  		sub.w	d1,$C(a0)
00015182                            
00015182                            locret_14892:
00015182 4E75                       		rts	
00015184                            ; ===========================================================================
00015184                            
00015184                            loc_14894:
00015184 0C41 000E                  		cmpi.w	#$E,d1
00015188 6E00                       		bgt.s	loc_148A0
0001518A                            
0001518A                            loc_1489A:
0001518A 9368 000C                  		sub.w	d1,$C(a0)
0001518E 4E75                       		rts	
00015190                            ; ===========================================================================
00015190                            
00015190                            loc_148A0:
00015190 4A28 0038                  		tst.b	$38(a0)
00015194 66F4                       		bne.s	loc_1489A
00015196 08E8 0001 0022             		bset	#1,$22(a0)
0001519C 08A8 0005 0022             		bclr	#5,$22(a0)
000151A2 117C 0001 001D             		move.b	#1,$1D(a0)
000151A8 4E75                       		rts	
000151AA                            ; End of function Sonic_WalkCeiling
000151AA                            
000151AA                            ; ---------------------------------------------------------------------------
000151AA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000151AA                            ; ---------------------------------------------------------------------------
000151AA                            
000151AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151AA                            
000151AA                            
000151AA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000151AA 3428 000C                  		move.w	$C(a0),d2
000151AE 3628 0008                  		move.w	8(a0),d3
000151B2 7000                       		moveq	#0,d0
000151B4 1028 0017                  		move.b	$17(a0),d0
000151B8 4880                       		ext.w	d0
000151BA 9440                       		sub.w	d0,d2
000151BC 1028 0016                  		move.b	$16(a0),d0
000151C0 4880                       		ext.w	d0
000151C2 9640                       		sub.w	d0,d3
000151C4 0A43 000F                  		eori.w	#$F,d3
000151C8 49F8 F768                  		lea	($FFFFF768).w,a4
000151CC 367C FFF0                  		movea.w	#-$10,a3
000151D0 3C3C 0800                  		move.w	#$800,d6
000151D4 7A0D                       		moveq	#$D,d5
000151D6 6100 0000                  		bsr.w	FindWall
000151DA 3F01                       		move.w	d1,-(sp)
000151DC 3428 000C                  		move.w	$C(a0),d2
000151E0 3628 0008                  		move.w	8(a0),d3
000151E4 7000                       		moveq	#0,d0
000151E6 1028 0017                  		move.b	$17(a0),d0
000151EA 4880                       		ext.w	d0
000151EC D440                       		add.w	d0,d2
000151EE 1028 0016                  		move.b	$16(a0),d0
000151F2 4880                       		ext.w	d0
000151F4 9640                       		sub.w	d0,d3
000151F6 0A43 000F                  		eori.w	#$F,d3
000151FA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151FE 367C FFF0                  		movea.w	#-$10,a3
00015202 3C3C 0800                  		move.w	#$800,d6
00015206 7A0D                       		moveq	#$D,d5
00015208 6100 0000                  		bsr.w	FindWall
0001520C 301F                       		move.w	(sp)+,d0
0001520E 6100 FE30                  		bsr.w	Sonic_Angle
00015212 4A41                       		tst.w	d1
00015214 6700                       		beq.s	locret_14934
00015216 6A00                       		bpl.s	loc_14936
00015218 0C41 FFF2                  		cmpi.w	#-$E,d1
0001521C 6D00 FDDC                  		blt.w	locret_1470A
00015220 9368 0008                  		sub.w	d1,8(a0)
00015224                            
00015224                            locret_14934:
00015224 4E75                       		rts	
00015226                            ; ===========================================================================
00015226                            
00015226                            loc_14936:
00015226 0C41 000E                  		cmpi.w	#$E,d1
0001522A 6E00                       		bgt.s	loc_14942
0001522C                            
0001522C                            loc_1493C:
0001522C 9368 0008                  		sub.w	d1,8(a0)
00015230 4E75                       		rts	
00015232                            ; ===========================================================================
00015232                            
00015232                            loc_14942:
00015232 4A28 0038                  		tst.b	$38(a0)
00015236 66F4                       		bne.s	loc_1493C
00015238 08E8 0001 0022             		bset	#1,$22(a0)
0001523E 08A8 0005 0022             		bclr	#5,$22(a0)
00015244 117C 0001 001D             		move.b	#1,$1D(a0)
0001524A 4E75                       		rts	
0001524C                            ; End of function Sonic_WalkVertL
0001524C                            
0001524C                            ; ---------------------------------------------------------------------------
0001524C                            ; Subroutine to	find which tile	the object is standing on
0001524C                            ; ---------------------------------------------------------------------------
0001524C                            
0001524C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001524C                            
0001524C                            
0001524C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001524C 3002                       		move.w	d2,d0
0001524E E248                       		lsr.w	#1,d0
00015250 0240 0380                  		andi.w	#$380,d0
00015254 3203                       		move.w	d3,d1
00015256 E049                       		lsr.w	#8,d1
00015258 0241 007F                  		andi.w	#$7F,d1
0001525C D041                       		add.w	d1,d0
0001525E 72FF                       		moveq	#-1,d1
00015260 43F8 A400                  		lea	($FFFFA400).w,a1
00015264 1231 0000                  		move.b	(a1,d0.w),d1
00015268 6700                       		beq.s	loc_14996
0001526A 6B00                       		bmi.s	loc_1499A
0001526C 5301                       		subq.b	#1,d1
0001526E 4881                       		ext.w	d1
00015270 EE59                       		ror.w	#7,d1
00015272 3002                       		move.w	d2,d0
00015274 D040                       		add.w	d0,d0
00015276 0240 01E0                  		andi.w	#$1E0,d0
0001527A D240                       		add.w	d0,d1
0001527C 3003                       		move.w	d3,d0
0001527E E648                       		lsr.w	#3,d0
00015280 0240 001E                  		andi.w	#$1E,d0
00015284 D240                       		add.w	d0,d1
00015286                            
00015286                            loc_14996:
00015286 2241                       		movea.l	d1,a1
00015288 4E75                       		rts	
0001528A                            ; ===========================================================================
0001528A                            
0001528A                            loc_1499A:
0001528A 0241 007F                  		andi.w	#$7F,d1
0001528E 0828 0006 0001             		btst	#6,1(a0)
00015294 6700                       		beq.s	loc_149B2
00015296 5241                       		addq.w	#1,d1
00015298 0C41 0029                  		cmpi.w	#$29,d1
0001529C 6600                       		bne.s	loc_149B2
0001529E 323C 0051                  		move.w	#$51,d1
000152A2                            
000152A2                            loc_149B2:
000152A2 5301                       		subq.b	#1,d1
000152A4 EE59                       		ror.w	#7,d1
000152A6 3002                       		move.w	d2,d0
000152A8 D040                       		add.w	d0,d0
000152AA 0240 01E0                  		andi.w	#$1E0,d0
000152AE D240                       		add.w	d0,d1
000152B0 3003                       		move.w	d3,d0
000152B2 E648                       		lsr.w	#3,d0
000152B4 0240 001E                  		andi.w	#$1E,d0
000152B8 D240                       		add.w	d0,d1
000152BA 2241                       		movea.l	d1,a1
000152BC 4E75                       		rts	
000152BE                            ; End of function Floor_ChkTile
000152BE                            
000152BE                            
000152BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152BE                            
000152BE                            
000152BE                            FindFloor:				; XREF: Sonic_AnglePos; et al
000152BE 618C                       		bsr.s	Floor_ChkTile
000152C0 3011                       		move.w	(a1),d0
000152C2 3800                       		move.w	d0,d4
000152C4 0240 07FF                  		andi.w	#$7FF,d0
000152C8 6700                       		beq.s	loc_149DE
000152CA 0B04                       		btst	d5,d4
000152CC 6600                       		bne.s	loc_149EC
000152CE                            
000152CE                            loc_149DE:
000152CE D44B                       		add.w	a3,d2
000152D0 6100 0000                  		bsr.w	FindFloor2
000152D4 944B                       		sub.w	a3,d2
000152D6 0641 0010                  		addi.w	#$10,d1
000152DA 4E75                       		rts	
000152DC                            ; ===========================================================================
000152DC                            
000152DC                            loc_149EC:
000152DC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000152E0 1032 0000                  		move.b	(a2,d0.w),d0
000152E4 0240 00FF                  		andi.w	#$FF,d0
000152E8 67E4                       		beq.s	loc_149DE
000152EA 45F9 0000 0000             		lea	(AngleMap).l,a2
000152F0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152F4 E948                       		lsl.w	#4,d0
000152F6 3203                       		move.w	d3,d1
000152F8 0804 000B                  		btst	#$B,d4
000152FC 6700                       		beq.s	loc_14A12
000152FE 4641                       		not.w	d1
00015300 4414                       		neg.b	(a4)
00015302                            
00015302                            loc_14A12:
00015302 0804 000C                  		btst	#$C,d4
00015306 6700                       		beq.s	loc_14A22
00015308 0614 0040                  		addi.b	#$40,(a4)
0001530C 4414                       		neg.b	(a4)
0001530E 0414 0040                  		subi.b	#$40,(a4)
00015312                            
00015312                            loc_14A22:
00015312 0241 000F                  		andi.w	#$F,d1
00015316 D240                       		add.w	d0,d1
00015318 45F9 0000 0000             		lea	(CollArray1).l,a2
0001531E 1032 1000                  		move.b	(a2,d1.w),d0
00015322 4880                       		ext.w	d0
00015324 BD44                       		eor.w	d6,d4
00015326 0804 000C                  		btst	#$C,d4
0001532A 6700                       		beq.s	loc_14A3E
0001532C 4440                       		neg.w	d0
0001532E                            
0001532E                            loc_14A3E:
0001532E 4A40                       		tst.w	d0
00015330 679C                       		beq.s	loc_149DE
00015332 6B00                       		bmi.s	loc_14A5A
00015334 0C00 0010                  		cmpi.b	#$10,d0
00015338 6700                       		beq.s	loc_14A66
0001533A 3202                       		move.w	d2,d1
0001533C 0241 000F                  		andi.w	#$F,d1
00015340 D041                       		add.w	d1,d0
00015342 323C 000F                  		move.w	#$F,d1
00015346 9240                       		sub.w	d0,d1
00015348 4E75                       		rts	
0001534A                            ; ===========================================================================
0001534A                            
0001534A                            loc_14A5A:
0001534A 3202                       		move.w	d2,d1
0001534C 0241 000F                  		andi.w	#$F,d1
00015350 D041                       		add.w	d1,d0
00015352 6A00 FF7A                  		bpl.w	loc_149DE
00015356                            
00015356                            loc_14A66:
00015356 944B                       		sub.w	a3,d2
00015358 6100 0000                  		bsr.w	FindFloor2
0001535C D44B                       		add.w	a3,d2
0001535E 0441 0010                  		subi.w	#$10,d1
00015362 4E75                       		rts	
00015364                            ; End of function FindFloor
00015364                            
00015364                            
00015364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015364                            
00015364                            
00015364                            FindFloor2:				; XREF: FindFloor
00015364 6100 FEE6                  		bsr.w	Floor_ChkTile
00015368 3011                       		move.w	(a1),d0
0001536A 3800                       		move.w	d0,d4
0001536C 0240 07FF                  		andi.w	#$7FF,d0
00015370 6700                       		beq.s	loc_14A86
00015372 0B04                       		btst	d5,d4
00015374 6600                       		bne.s	loc_14A94
00015376                            
00015376                            loc_14A86:
00015376 323C 000F                  		move.w	#$F,d1
0001537A 3002                       		move.w	d2,d0
0001537C 0240 000F                  		andi.w	#$F,d0
00015380 9240                       		sub.w	d0,d1
00015382 4E75                       		rts	
00015384                            ; ===========================================================================
00015384                            
00015384                            loc_14A94:
00015384 2478 F796                  		movea.l	($FFFFF796).w,a2
00015388 1032 0000                  		move.b	(a2,d0.w),d0
0001538C 0240 00FF                  		andi.w	#$FF,d0
00015390 67E4                       		beq.s	loc_14A86
00015392 45F9 0000 0000             		lea	(AngleMap).l,a2
00015398 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001539C E948                       		lsl.w	#4,d0
0001539E 3203                       		move.w	d3,d1
000153A0 0804 000B                  		btst	#$B,d4
000153A4 6700                       		beq.s	loc_14ABA
000153A6 4641                       		not.w	d1
000153A8 4414                       		neg.b	(a4)
000153AA                            
000153AA                            loc_14ABA:
000153AA 0804 000C                  		btst	#$C,d4
000153AE 6700                       		beq.s	loc_14ACA
000153B0 0614 0040                  		addi.b	#$40,(a4)
000153B4 4414                       		neg.b	(a4)
000153B6 0414 0040                  		subi.b	#$40,(a4)
000153BA                            
000153BA                            loc_14ACA:
000153BA 0241 000F                  		andi.w	#$F,d1
000153BE D240                       		add.w	d0,d1
000153C0 45F9 0000 0000             		lea	(CollArray1).l,a2
000153C6 1032 1000                  		move.b	(a2,d1.w),d0
000153CA 4880                       		ext.w	d0
000153CC BD44                       		eor.w	d6,d4
000153CE 0804 000C                  		btst	#$C,d4
000153D2 6700                       		beq.s	loc_14AE6
000153D4 4440                       		neg.w	d0
000153D6                            
000153D6                            loc_14AE6:
000153D6 4A40                       		tst.w	d0
000153D8 679C                       		beq.s	loc_14A86
000153DA 6B00                       		bmi.s	loc_14AFC
000153DC 3202                       		move.w	d2,d1
000153DE 0241 000F                  		andi.w	#$F,d1
000153E2 D041                       		add.w	d1,d0
000153E4 323C 000F                  		move.w	#$F,d1
000153E8 9240                       		sub.w	d0,d1
000153EA 4E75                       		rts	
000153EC                            ; ===========================================================================
000153EC                            
000153EC                            loc_14AFC:
000153EC 3202                       		move.w	d2,d1
000153EE 0241 000F                  		andi.w	#$F,d1
000153F2 D041                       		add.w	d1,d0
000153F4 6A00 FF80                  		bpl.w	loc_14A86
000153F8 4641                       		not.w	d1
000153FA 4E75                       		rts	
000153FC                            ; End of function FindFloor2
000153FC                            
000153FC                            
000153FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153FC                            
000153FC                            
000153FC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000153FC 6100 FE4E                  		bsr.w	Floor_ChkTile
00015400 3011                       		move.w	(a1),d0
00015402 3800                       		move.w	d0,d4
00015404 0240 07FF                  		andi.w	#$7FF,d0
00015408 6700                       		beq.s	loc_14B1E
0001540A 0B04                       		btst	d5,d4
0001540C 6600                       		bne.s	loc_14B2C
0001540E                            
0001540E                            loc_14B1E:
0001540E D64B                       		add.w	a3,d3
00015410 6100 0000                  		bsr.w	FindWall2
00015414 964B                       		sub.w	a3,d3
00015416 0641 0010                  		addi.w	#$10,d1
0001541A 4E75                       		rts	
0001541C                            ; ===========================================================================
0001541C                            
0001541C                            loc_14B2C:
0001541C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015420 1032 0000                  		move.b	(a2,d0.w),d0
00015424 0240 00FF                  		andi.w	#$FF,d0
00015428 67E4                       		beq.s	loc_14B1E
0001542A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015430 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015434 E948                       		lsl.w	#4,d0
00015436 3202                       		move.w	d2,d1
00015438 0804 000C                  		btst	#$C,d4
0001543C 6700                       		beq.s	loc_14B5A
0001543E 4641                       		not.w	d1
00015440 0614 0040                  		addi.b	#$40,(a4)
00015444 4414                       		neg.b	(a4)
00015446 0414 0040                  		subi.b	#$40,(a4)
0001544A                            
0001544A                            loc_14B5A:
0001544A 0804 000B                  		btst	#$B,d4
0001544E 6700                       		beq.s	loc_14B62
00015450 4414                       		neg.b	(a4)
00015452                            
00015452                            loc_14B62:
00015452 0241 000F                  		andi.w	#$F,d1
00015456 D240                       		add.w	d0,d1
00015458 45F9 0000 0000             		lea	(CollArray2).l,a2
0001545E 1032 1000                  		move.b	(a2,d1.w),d0
00015462 4880                       		ext.w	d0
00015464 BD44                       		eor.w	d6,d4
00015466 0804 000B                  		btst	#$B,d4
0001546A 6700                       		beq.s	loc_14B7E
0001546C 4440                       		neg.w	d0
0001546E                            
0001546E                            loc_14B7E:
0001546E 4A40                       		tst.w	d0
00015470 679C                       		beq.s	loc_14B1E
00015472 6B00                       		bmi.s	loc_14B9A
00015474 0C00 0010                  		cmpi.b	#$10,d0
00015478 6700                       		beq.s	loc_14BA6
0001547A 3203                       		move.w	d3,d1
0001547C 0241 000F                  		andi.w	#$F,d1
00015480 D041                       		add.w	d1,d0
00015482 323C 000F                  		move.w	#$F,d1
00015486 9240                       		sub.w	d0,d1
00015488 4E75                       		rts	
0001548A                            ; ===========================================================================
0001548A                            
0001548A                            loc_14B9A:
0001548A 3203                       		move.w	d3,d1
0001548C 0241 000F                  		andi.w	#$F,d1
00015490 D041                       		add.w	d1,d0
00015492 6A00 FF7A                  		bpl.w	loc_14B1E
00015496                            
00015496                            loc_14BA6:
00015496 964B                       		sub.w	a3,d3
00015498 6100 0000                  		bsr.w	FindWall2
0001549C D64B                       		add.w	a3,d3
0001549E 0441 0010                  		subi.w	#$10,d1
000154A2 4E75                       		rts	
000154A4                            ; End of function FindWall
000154A4                            
000154A4                            
000154A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A4                            
000154A4                            
000154A4                            FindWall2:				; XREF: FindWall
000154A4 6100 FDA6                  		bsr.w	Floor_ChkTile
000154A8 3011                       		move.w	(a1),d0
000154AA 3800                       		move.w	d0,d4
000154AC 0240 07FF                  		andi.w	#$7FF,d0
000154B0 6700                       		beq.s	loc_14BC6
000154B2 0B04                       		btst	d5,d4
000154B4 6600                       		bne.s	loc_14BD4
000154B6                            
000154B6                            loc_14BC6:
000154B6 323C 000F                  		move.w	#$F,d1
000154BA 3003                       		move.w	d3,d0
000154BC 0240 000F                  		andi.w	#$F,d0
000154C0 9240                       		sub.w	d0,d1
000154C2 4E75                       		rts	
000154C4                            ; ===========================================================================
000154C4                            
000154C4                            loc_14BD4:
000154C4 2478 F796                  		movea.l	($FFFFF796).w,a2
000154C8 1032 0000                  		move.b	(a2,d0.w),d0
000154CC 0240 00FF                  		andi.w	#$FF,d0
000154D0 67E4                       		beq.s	loc_14BC6
000154D2 45F9 0000 0000             		lea	(AngleMap).l,a2
000154D8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154DC E948                       		lsl.w	#4,d0
000154DE 3202                       		move.w	d2,d1
000154E0 0804 000C                  		btst	#$C,d4
000154E4 6700                       		beq.s	loc_14C02
000154E6 4641                       		not.w	d1
000154E8 0614 0040                  		addi.b	#$40,(a4)
000154EC 4414                       		neg.b	(a4)
000154EE 0414 0040                  		subi.b	#$40,(a4)
000154F2                            
000154F2                            loc_14C02:
000154F2 0804 000B                  		btst	#$B,d4
000154F6 6700                       		beq.s	loc_14C0A
000154F8 4414                       		neg.b	(a4)
000154FA                            
000154FA                            loc_14C0A:
000154FA 0241 000F                  		andi.w	#$F,d1
000154FE D240                       		add.w	d0,d1
00015500 45F9 0000 0000             		lea	(CollArray2).l,a2
00015506 1032 1000                  		move.b	(a2,d1.w),d0
0001550A 4880                       		ext.w	d0
0001550C BD44                       		eor.w	d6,d4
0001550E 0804 000B                  		btst	#$B,d4
00015512 6700                       		beq.s	loc_14C26
00015514 4440                       		neg.w	d0
00015516                            
00015516                            loc_14C26:
00015516 4A40                       		tst.w	d0
00015518 679C                       		beq.s	loc_14BC6
0001551A 6B00                       		bmi.s	loc_14C3C
0001551C 3203                       		move.w	d3,d1
0001551E 0241 000F                  		andi.w	#$F,d1
00015522 D041                       		add.w	d1,d0
00015524 323C 000F                  		move.w	#$F,d1
00015528 9240                       		sub.w	d0,d1
0001552A 4E75                       		rts	
0001552C                            ; ===========================================================================
0001552C                            
0001552C                            loc_14C3C:
0001552C 3203                       		move.w	d3,d1
0001552E 0241 000F                  		andi.w	#$F,d1
00015532 D041                       		add.w	d1,d0
00015534 6A00 FF80                  		bpl.w	loc_14BC6
00015538 4641                       		not.w	d1
0001553A 4E75                       		rts	
0001553C                            ; End of function FindWall2
0001553C                            
0001553C                            ; ---------------------------------------------------------------------------
0001553C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001553C                            ; ---------------------------------------------------------------------------
0001553C                            
0001553C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001553C                            
0001553C                            
0001553C                            FloorLog_Unk:				; XREF: Level
0001553C 4E75                       		rts	
0001553E                            
0001553E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015544 45F9 0000 0000             		lea	(CollArray1).l,a2
0001554A 363C 00FF                  		move.w	#$FF,d3
0001554E                            
0001554E                            loc_14C5E:
0001554E 7A10                       		moveq	#$10,d5
00015550 343C 000F                  		move.w	#$F,d2
00015554                            
00015554                            loc_14C64:
00015554 7800                       		moveq	#0,d4
00015556 323C 000F                  		move.w	#$F,d1
0001555A                            
0001555A                            loc_14C6A:
0001555A 3019                       		move.w	(a1)+,d0
0001555C EAA8                       		lsr.l	d5,d0
0001555E D944                       		addx.w	d4,d4
00015560 51C9 FFF8                  		dbf	d1,loc_14C6A
00015564                            
00015564 34C4                       		move.w	d4,(a2)+
00015566 92FC 0020                  		suba.w	#$20,a1
0001556A 5345                       		subq.w	#1,d5
0001556C 51CA FFE6                  		dbf	d2,loc_14C64
00015570                            
00015570 D2FC 0020                  		adda.w	#$20,a1
00015574 51CB FFD8                  		dbf	d3,loc_14C5E
00015578                            
00015578 43F9 0000 0000             		lea	(CollArray1).l,a1
0001557E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015584 6100                       		bsr.s	FloorLog_Unk2
00015586 43F9 0000 0000             		lea	(CollArray1).l,a1
0001558C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015592                            
00015592                            ; End of function FloorLog_Unk
00015592                            
00015592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015592                            
00015592                            
00015592                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015592 363C 0FFF                  		move.w	#$FFF,d3
00015596                            
00015596                            loc_14CA6:
00015596 7400                       		moveq	#0,d2
00015598 323C 000F                  		move.w	#$F,d1
0001559C 3019                       		move.w	(a1)+,d0
0001559E 6700                       		beq.s	loc_14CD4
000155A0 6B00                       		bmi.s	loc_14CBE
000155A2                            
000155A2                            loc_14CB2:
000155A2 E248                       		lsr.w	#1,d0
000155A4 6400                       		bcc.s	loc_14CB8
000155A6 5202                       		addq.b	#1,d2
000155A8                            
000155A8                            loc_14CB8:
000155A8 51C9 FFF8                  		dbf	d1,loc_14CB2
000155AC                            
000155AC 6000                       		bra.s	loc_14CD6
000155AE                            ; ===========================================================================
000155AE                            
000155AE                            loc_14CBE:
000155AE 0C40 FFFF                  		cmpi.w	#-1,d0
000155B2 6700                       		beq.s	loc_14CD0
000155B4                            
000155B4                            loc_14CC4:
000155B4 E348                       		lsl.w	#1,d0
000155B6 6400                       		bcc.s	loc_14CCA
000155B8 5302                       		subq.b	#1,d2
000155BA                            
000155BA                            loc_14CCA:
000155BA 51C9 FFF8                  		dbf	d1,loc_14CC4
000155BE                            
000155BE 6000                       		bra.s	loc_14CD6
000155C0                            ; ===========================================================================
000155C0                            
000155C0                            loc_14CD0:
000155C0 303C 0010                  		move.w	#$10,d0
000155C4                            
000155C4                            loc_14CD4:
000155C4 3400                       		move.w	d0,d2
000155C6                            
000155C6                            loc_14CD6:
000155C6 14C2                       		move.b	d2,(a2)+
000155C8 51CB FFCC                  		dbf	d3,loc_14CA6
000155CC                            
000155CC 4E75                       		rts	
000155CE                            
000155CE                            ; End of function FloorLog_Unk2
000155CE                            
000155CE                            
000155CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155CE                            
000155CE                            
000155CE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000155CE 2628 0008                  		move.l	8(a0),d3
000155D2 2428 000C                  		move.l	$C(a0),d2
000155D6 3228 0010                  		move.w	$10(a0),d1
000155DA 48C1                       		ext.l	d1
000155DC E181                       		asl.l	#8,d1
000155DE D681                       		add.l	d1,d3
000155E0 3228 0012                  		move.w	$12(a0),d1
000155E4 48C1                       		ext.l	d1
000155E6 E181                       		asl.l	#8,d1
000155E8 D481                       		add.l	d1,d2
000155EA 4842                       		swap	d2
000155EC 4843                       		swap	d3
000155EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000155F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000155F6 1200                       		move.b	d0,d1
000155F8 0600 0020                  		addi.b	#$20,d0
000155FC 6A00                       		bpl.s	loc_14D1A
000155FE 1001                       		move.b	d1,d0
00015600 6A00                       		bpl.s	loc_14D14
00015602 5300                       		subq.b	#1,d0
00015604                            
00015604                            loc_14D14:
00015604 0600 0020                  		addi.b	#$20,d0
00015608 6000                       		bra.s	loc_14D24
0001560A                            ; ===========================================================================
0001560A                            
0001560A                            loc_14D1A:
0001560A 1001                       		move.b	d1,d0
0001560C 6A00                       		bpl.s	loc_14D20
0001560E 5200                       		addq.b	#1,d0
00015610                            
00015610                            loc_14D20:
00015610 0600 001F                  		addi.b	#$1F,d0
00015614                            
00015614                            loc_14D24:
00015614 0200 00C0                  		andi.b	#$C0,d0
00015618 6700 0000                  		beq.w	loc_14DF0
0001561C 0C00 0080                  		cmpi.b	#$80,d0
00015620 6700 0000                  		beq.w	loc_14F7C
00015624 0201 0038                  		andi.b	#$38,d1
00015628 6600                       		bne.s	loc_14D3C
0001562A 5042                       		addq.w	#8,d2
0001562C                            
0001562C                            loc_14D3C:
0001562C 0C00 0040                  		cmpi.b	#$40,d0
00015630 6700 0000                  		beq.w	loc_1504A
00015634 6000 0000                  		bra.w	loc_14EBC
00015638                            
00015638                            ; End of function Sonic_WalkSpeed
00015638                            
00015638                            
00015638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015638                            
00015638                            
00015638                            sub_14D48:				; XREF: Sonic_Jump
00015638 11C0 F768                  		move.b	d0,($FFFFF768).w
0001563C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015640 0600 0020                  		addi.b	#$20,d0
00015644 0200 00C0                  		andi.b	#$C0,d0
00015648 0C00 0040                  		cmpi.b	#$40,d0
0001564C 6700 0000                  		beq.w	loc_14FD6
00015650 0C00 0080                  		cmpi.b	#$80,d0
00015654 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015658 0C00 00C0                  		cmpi.b	#$C0,d0
0001565C 6700 0000                  		beq.w	sub_14E50
00015660                            
00015660                            ; End of function sub_14D48
00015660                            
00015660                            ; ---------------------------------------------------------------------------
00015660                            ; Subroutine to	make Sonic land	on the floor after jumping
00015660                            ; ---------------------------------------------------------------------------
00015660                            
00015660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015660                            
00015660                            
00015660                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015660 3428 000C                  		move.w	$C(a0),d2
00015664 3628 0008                  		move.w	8(a0),d3
00015668 7000                       		moveq	#0,d0
0001566A 1028 0016                  		move.b	$16(a0),d0
0001566E 4880                       		ext.w	d0
00015670 D440                       		add.w	d0,d2
00015672 1028 0017                  		move.b	$17(a0),d0
00015676 4880                       		ext.w	d0
00015678 D640                       		add.w	d0,d3
0001567A 49F8 F768                  		lea	($FFFFF768).w,a4
0001567E 367C 0010                  		movea.w	#$10,a3
00015682 3C3C 0000                  		move.w	#0,d6
00015686 7A0D                       		moveq	#$D,d5
00015688 6100 FC34                  		bsr.w	FindFloor
0001568C 3F01                       		move.w	d1,-(sp)
0001568E 3428 000C                  		move.w	$C(a0),d2
00015692 3628 0008                  		move.w	8(a0),d3
00015696 7000                       		moveq	#0,d0
00015698 1028 0016                  		move.b	$16(a0),d0
0001569C 4880                       		ext.w	d0
0001569E D440                       		add.w	d0,d2
000156A0 1028 0017                  		move.b	$17(a0),d0
000156A4 4880                       		ext.w	d0
000156A6 9640                       		sub.w	d0,d3
000156A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156AC 367C 0010                  		movea.w	#$10,a3
000156B0 3C3C 0000                  		move.w	#0,d6
000156B4 7A0D                       		moveq	#$D,d5
000156B6 6100 FC06                  		bsr.w	FindFloor
000156BA 301F                       		move.w	(sp)+,d0
000156BC 143C 0000                  		move.b	#0,d2
000156C0                            
000156C0                            loc_14DD0:
000156C0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000156C4 B240                       		cmp.w	d0,d1
000156C6 6F00                       		ble.s	loc_14DDE
000156C8 1638 F768                  		move.b	($FFFFF768).w,d3
000156CC C141                       		exg	d0,d1
000156CE                            
000156CE                            loc_14DDE:
000156CE 0803 0000                  		btst	#0,d3
000156D2 6700                       		beq.s	locret_14DE6
000156D4 1602                       		move.b	d2,d3
000156D6                            
000156D6                            locret_14DE6:
000156D6 4E75                       		rts	
000156D8                            
000156D8                            ; End of function Sonic_HitFloor
000156D8                            
000156D8                            ; ===========================================================================
000156D8 3428 000C                  		move.w	$C(a0),d2
000156DC 3628 0008                  		move.w	8(a0),d3
000156E0                            
000156E0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000156E0 0642 000A                  		addi.w	#$A,d2
000156E4 49F8 F768                  		lea	($FFFFF768).w,a4
000156E8 367C 0010                  		movea.w	#$10,a3
000156EC 3C3C 0000                  		move.w	#0,d6
000156F0 7A0E                       		moveq	#$E,d5
000156F2 6100 FBCA                  		bsr.w	FindFloor
000156F6 143C 0000                  		move.b	#0,d2
000156FA                            
000156FA                            loc_14E0A:				; XREF: sub_14EB4
000156FA 1638 F768                  		move.b	($FFFFF768).w,d3
000156FE 0803 0000                  		btst	#0,d3
00015702 6700                       		beq.s	locret_14E16
00015704 1602                       		move.b	d2,d3
00015706                            
00015706                            locret_14E16:
00015706 4E75                       		rts	
00015708                            
00015708                            ; ---------------------------------------------------------------------------
00015708                            ; Subroutine allowing objects to interact with the floor
00015708                            ; ---------------------------------------------------------------------------
00015708                            
00015708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015708                            
00015708                            
00015708                            ObjHitFloor:
00015708 3628 0008                  		move.w	8(a0),d3
0001570C                            
0001570C                            ; End of function ObjHitFloor
0001570C                            
0001570C                            
0001570C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001570C                            
0001570C                            
0001570C                            ObjHitFloor2:
0001570C 3428 000C                  		move.w	$C(a0),d2
00015710 7000                       		moveq	#0,d0
00015712 1028 0016                  		move.b	$16(a0),d0
00015716 4880                       		ext.w	d0
00015718 D440                       		add.w	d0,d2
0001571A 49F8 F768                  		lea	($FFFFF768).w,a4
0001571E 18BC 0000                  		move.b	#0,(a4)
00015722 367C 0010                  		movea.w	#$10,a3
00015726 3C3C 0000                  		move.w	#0,d6
0001572A 7A0D                       		moveq	#$D,d5
0001572C 6100 FB90                  		bsr.w	FindFloor
00015730 1638 F768                  		move.b	($FFFFF768).w,d3
00015734 0803 0000                  		btst	#0,d3
00015738 6700                       		beq.s	locret_14E4E
0001573A 163C 0000                  		move.b	#0,d3
0001573E                            
0001573E                            locret_14E4E:
0001573E 4E75                       		rts	
00015740                            ; End of function ObjHitFloor2
00015740                            
00015740                            
00015740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015740                            
00015740                            
00015740                            sub_14E50:				; XREF: sub_14D48
00015740 3428 000C                  		move.w	$C(a0),d2
00015744 3628 0008                  		move.w	8(a0),d3
00015748 7000                       		moveq	#0,d0
0001574A 1028 0017                  		move.b	$17(a0),d0
0001574E 4880                       		ext.w	d0
00015750 9440                       		sub.w	d0,d2
00015752 1028 0016                  		move.b	$16(a0),d0
00015756 4880                       		ext.w	d0
00015758 D640                       		add.w	d0,d3
0001575A 49F8 F768                  		lea	($FFFFF768).w,a4
0001575E 367C 0010                  		movea.w	#$10,a3
00015762 3C3C 0000                  		move.w	#0,d6
00015766 7A0E                       		moveq	#$E,d5
00015768 6100 FC92                  		bsr.w	FindWall
0001576C 3F01                       		move.w	d1,-(sp)
0001576E 3428 000C                  		move.w	$C(a0),d2
00015772 3628 0008                  		move.w	8(a0),d3
00015776 7000                       		moveq	#0,d0
00015778 1028 0017                  		move.b	$17(a0),d0
0001577C 4880                       		ext.w	d0
0001577E D440                       		add.w	d0,d2
00015780 1028 0016                  		move.b	$16(a0),d0
00015784 4880                       		ext.w	d0
00015786 D640                       		add.w	d0,d3
00015788 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001578C 367C 0010                  		movea.w	#$10,a3
00015790 3C3C 0000                  		move.w	#0,d6
00015794 7A0E                       		moveq	#$E,d5
00015796 6100 FC64                  		bsr.w	FindWall
0001579A 301F                       		move.w	(sp)+,d0
0001579C 143C 00C0                  		move.b	#-$40,d2
000157A0 6000 FF1E                  		bra.w	loc_14DD0
000157A4                            
000157A4                            ; End of function sub_14E50
000157A4                            
000157A4                            
000157A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157A4                            
000157A4                            
000157A4                            sub_14EB4:				; XREF: Sonic_Floor
000157A4 3428 000C                  		move.w	$C(a0),d2
000157A8 3628 0008                  		move.w	8(a0),d3
000157AC                            
000157AC                            loc_14EBC:
000157AC 0643 000A                  		addi.w	#$A,d3
000157B0 49F8 F768                  		lea	($FFFFF768).w,a4
000157B4 367C 0010                  		movea.w	#$10,a3
000157B8 3C3C 0000                  		move.w	#0,d6
000157BC 7A0E                       		moveq	#$E,d5
000157BE 6100 FC3C                  		bsr.w	FindWall
000157C2 143C 00C0                  		move.b	#-$40,d2
000157C6 6000 FF32                  		bra.w	loc_14E0A
000157CA                            
000157CA                            ; End of function sub_14EB4
000157CA                            
000157CA                            ; ---------------------------------------------------------------------------
000157CA                            ; Subroutine to	detect when an object hits a wall to its right
000157CA                            ; ---------------------------------------------------------------------------
000157CA                            
000157CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CA                            
000157CA                            
000157CA                            ObjHitWallRight:
000157CA D668 0008                  		add.w	8(a0),d3
000157CE 3428 000C                  		move.w	$C(a0),d2
000157D2 49F8 F768                  		lea	($FFFFF768).w,a4
000157D6 18BC 0000                  		move.b	#0,(a4)
000157DA 367C 0010                  		movea.w	#$10,a3
000157DE 3C3C 0000                  		move.w	#0,d6
000157E2 7A0E                       		moveq	#$E,d5
000157E4 6100 FC16                  		bsr.w	FindWall
000157E8 1638 F768                  		move.b	($FFFFF768).w,d3
000157EC 0803 0000                  		btst	#0,d3
000157F0 6700                       		beq.s	locret_14F06
000157F2 163C 00C0                  		move.b	#-$40,d3
000157F6                            
000157F6                            locret_14F06:
000157F6 4E75                       		rts	
000157F8                            
000157F8                            ; End of function ObjHitWallRight
000157F8                            
000157F8                            ; ---------------------------------------------------------------------------
000157F8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000157F8                            ; touches them
000157F8                            ; ---------------------------------------------------------------------------
000157F8                            
000157F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157F8                            
000157F8                            
000157F8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000157F8 3428 000C                  		move.w	$C(a0),d2
000157FC 3628 0008                  		move.w	8(a0),d3
00015800 7000                       		moveq	#0,d0
00015802 1028 0016                  		move.b	$16(a0),d0
00015806 4880                       		ext.w	d0
00015808 9440                       		sub.w	d0,d2
0001580A 0A42 000F                  		eori.w	#$F,d2
0001580E 1028 0017                  		move.b	$17(a0),d0
00015812 4880                       		ext.w	d0
00015814 D640                       		add.w	d0,d3
00015816 49F8 F768                  		lea	($FFFFF768).w,a4
0001581A 367C FFF0                  		movea.w	#-$10,a3
0001581E 3C3C 1000                  		move.w	#$1000,d6
00015822 7A0E                       		moveq	#$E,d5
00015824 6100 FA98                  		bsr.w	FindFloor
00015828 3F01                       		move.w	d1,-(sp)
0001582A 3428 000C                  		move.w	$C(a0),d2
0001582E 3628 0008                  		move.w	8(a0),d3
00015832 7000                       		moveq	#0,d0
00015834 1028 0016                  		move.b	$16(a0),d0
00015838 4880                       		ext.w	d0
0001583A 9440                       		sub.w	d0,d2
0001583C 0A42 000F                  		eori.w	#$F,d2
00015840 1028 0017                  		move.b	$17(a0),d0
00015844 4880                       		ext.w	d0
00015846 9640                       		sub.w	d0,d3
00015848 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001584C 367C FFF0                  		movea.w	#-$10,a3
00015850 3C3C 1000                  		move.w	#$1000,d6
00015854 7A0E                       		moveq	#$E,d5
00015856 6100 FA66                  		bsr.w	FindFloor
0001585A 301F                       		move.w	(sp)+,d0
0001585C 143C 0080                  		move.b	#-$80,d2
00015860 6000 FE5E                  		bra.w	loc_14DD0
00015864                            ; End of function Sonic_DontRunOnWalls
00015864                            
00015864                            ; ===========================================================================
00015864 3428 000C                  		move.w	$C(a0),d2
00015868 3628 0008                  		move.w	8(a0),d3
0001586C                            
0001586C                            loc_14F7C:
0001586C 0442 000A                  		subi.w	#$A,d2
00015870 0A42 000F                  		eori.w	#$F,d2
00015874 49F8 F768                  		lea	($FFFFF768).w,a4
00015878 367C FFF0                  		movea.w	#-$10,a3
0001587C 3C3C 1000                  		move.w	#$1000,d6
00015880 7A0E                       		moveq	#$E,d5
00015882 6100 FA3A                  		bsr.w	FindFloor
00015886 143C 0080                  		move.b	#-$80,d2
0001588A 6000 FE6E                  		bra.w	loc_14E0A
0001588E                            
0001588E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001588E                            
0001588E                            
0001588E                            ObjHitCeiling:
0001588E 3428 000C                  		move.w	$C(a0),d2
00015892 3628 0008                  		move.w	8(a0),d3
00015896 7000                       		moveq	#0,d0
00015898 1028 0016                  		move.b	$16(a0),d0
0001589C 4880                       		ext.w	d0
0001589E 9440                       		sub.w	d0,d2
000158A0 0A42 000F                  		eori.w	#$F,d2
000158A4 49F8 F768                  		lea	($FFFFF768).w,a4
000158A8 367C FFF0                  		movea.w	#-$10,a3
000158AC 3C3C 1000                  		move.w	#$1000,d6
000158B0 7A0E                       		moveq	#$E,d5
000158B2 6100 FA0A                  		bsr.w	FindFloor
000158B6 1638 F768                  		move.b	($FFFFF768).w,d3
000158BA 0803 0000                  		btst	#0,d3
000158BE 6700                       		beq.s	locret_14FD4
000158C0 163C 0080                  		move.b	#-$80,d3
000158C4                            
000158C4                            locret_14FD4:
000158C4 4E75                       		rts	
000158C6                            ; End of function ObjHitCeiling
000158C6                            
000158C6                            ; ===========================================================================
000158C6                            
000158C6                            loc_14FD6:				; XREF: sub_14D48
000158C6 3428 000C                  		move.w	$C(a0),d2
000158CA 3628 0008                  		move.w	8(a0),d3
000158CE 7000                       		moveq	#0,d0
000158D0 1028 0017                  		move.b	$17(a0),d0
000158D4 4880                       		ext.w	d0
000158D6 9440                       		sub.w	d0,d2
000158D8 1028 0016                  		move.b	$16(a0),d0
000158DC 4880                       		ext.w	d0
000158DE 9640                       		sub.w	d0,d3
000158E0 0A43 000F                  		eori.w	#$F,d3
000158E4 49F8 F768                  		lea	($FFFFF768).w,a4
000158E8 367C FFF0                  		movea.w	#-$10,a3
000158EC 3C3C 0800                  		move.w	#$800,d6
000158F0 7A0E                       		moveq	#$E,d5
000158F2 6100 FB08                  		bsr.w	FindWall
000158F6 3F01                       		move.w	d1,-(sp)
000158F8 3428 000C                  		move.w	$C(a0),d2
000158FC 3628 0008                  		move.w	8(a0),d3
00015900 7000                       		moveq	#0,d0
00015902 1028 0017                  		move.b	$17(a0),d0
00015906 4880                       		ext.w	d0
00015908 D440                       		add.w	d0,d2
0001590A 1028 0016                  		move.b	$16(a0),d0
0001590E 4880                       		ext.w	d0
00015910 9640                       		sub.w	d0,d3
00015912 0A43 000F                  		eori.w	#$F,d3
00015916 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001591A 367C FFF0                  		movea.w	#-$10,a3
0001591E 3C3C 0800                  		move.w	#$800,d6
00015922 7A0E                       		moveq	#$E,d5
00015924 6100 FAD6                  		bsr.w	FindWall
00015928 301F                       		move.w	(sp)+,d0
0001592A 143C 0040                  		move.b	#$40,d2
0001592E 6000 FD90                  		bra.w	loc_14DD0
00015932                            
00015932                            ; ---------------------------------------------------------------------------
00015932                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015932                            ; ---------------------------------------------------------------------------
00015932                            
00015932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015932                            
00015932                            
00015932                            Sonic_HitWall:				; XREF: Sonic_Floor
00015932 3428 000C                  		move.w	$C(a0),d2
00015936 3628 0008                  		move.w	8(a0),d3
0001593A                            
0001593A                            loc_1504A:
0001593A 0443 000A                  		subi.w	#$A,d3
0001593E 0A43 000F                  		eori.w	#$F,d3
00015942 49F8 F768                  		lea	($FFFFF768).w,a4
00015946 367C FFF0                  		movea.w	#-$10,a3
0001594A 3C3C 0800                  		move.w	#$800,d6
0001594E 7A0E                       		moveq	#$E,d5
00015950 6100 FAAA                  		bsr.w	FindWall
00015954 143C 0040                  		move.b	#$40,d2
00015958 6000 FDA0                  		bra.w	loc_14E0A
0001595C                            ; End of function Sonic_HitWall
0001595C                            
0001595C                            ; ---------------------------------------------------------------------------
0001595C                            ; Subroutine to	detect when an object hits a wall to its left
0001595C                            ; ---------------------------------------------------------------------------
0001595C                            
0001595C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001595C                            
0001595C                            
0001595C                            ObjHitWallLeft:
0001595C D668 0008                  		add.w	8(a0),d3
00015960 3428 000C                  		move.w	$C(a0),d2
00015964 49F8 F768                  		lea	($FFFFF768).w,a4
00015968 18BC 0000                  		move.b	#0,(a4)
0001596C 367C FFF0                  		movea.w	#-$10,a3
00015970 3C3C 0800                  		move.w	#$800,d6
00015974 7A0E                       		moveq	#$E,d5
00015976 6100 FA84                  		bsr.w	FindWall
0001597A 1638 F768                  		move.b	($FFFFF768).w,d3
0001597E 0803 0000                  		btst	#0,d3
00015982 6700                       		beq.s	locret_15098
00015984 163C 0040                  		move.b	#$40,d3
00015988                            
00015988                            locret_15098:
00015988 4E75                       		rts	
0001598A                            ; End of function ObjHitWallLeft
0001598A                            
0001598A                            ; ===========================================================================
0001598A                            ; ---------------------------------------------------------------------------
0001598A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001598A                            ; ---------------------------------------------------------------------------
0001598A                            
0001598A                            Obj66:					; XREF: Obj_Index
0001598A 7000                       		moveq	#0,d0
0001598C 1028 0024                  		move.b	$24(a0),d0
00015990 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015994 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015998                            ; ===========================================================================
00015998 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001599A 0000                       		dc.w Obj66_Action-Obj66_Index
0001599C 0000                       		dc.w Obj66_Display-Obj66_Index
0001599E 0000                       		dc.w Obj66_Release-Obj66_Index
000159A0                            ; ===========================================================================
000159A0                            
000159A0                            Obj66_Main:				; XREF: Obj66_Index
000159A0 5428 0024                  		addq.b	#2,$24(a0)
000159A4 323C 0001                  		move.w	#1,d1
000159A8 2248                       		movea.l	a0,a1
000159AA 6000                       		bra.s	Obj66_MakeItem
000159AC                            ; ===========================================================================
000159AC                            
000159AC                            Obj66_Loop:
000159AC 6100 88D6                  		bsr.w	SingleObjLoad
000159B0 6600                       		bne.s	loc_150FE
000159B2 12BC 0066                  		move.b	#$66,0(a1)
000159B6 5829 0024                  		addq.b	#4,$24(a1)
000159BA 3368 0008 0008             		move.w	8(a0),8(a1)
000159C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000159C6 137C 0003 0018             		move.b	#3,$18(a1)
000159CC 137C 0010 001A             		move.b	#$10,$1A(a1)
000159D2                            
000159D2                            Obj66_MakeItem:				; XREF: Obj66_Main
000159D2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000159DA 337C 4348 0002             		move.w	#$4348,2(a1)
000159E0 0029 0004 0001             		ori.b	#4,1(a1)
000159E6 137C 0038 0019             		move.b	#$38,$19(a1)
000159EC                            
000159EC                            loc_150FE:
000159EC 51C9 FFBE                  		dbf	d1,Obj66_Loop
000159F0                            
000159F0 117C 0030 0019             		move.b	#$30,$19(a0)
000159F6 117C 0004 0018             		move.b	#4,$18(a0)
000159FC 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A02 117C 0001 0034             		move.b	#1,$34(a0)
00015A08 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A0E                            
00015A0E                            Obj66_Action:				; XREF: Obj66_Index
00015A0E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015A12 4A28 0001                  		tst.b	1(a0)
00015A16 6A00 0000                  		bpl.w	Obj66_Display
00015A1A 323C 0030                  		move.w	#$30,d1
00015A1E 3401                       		move.w	d1,d2
00015A20 3602                       		move.w	d2,d3
00015A22 5243                       		addq.w	#1,d3
00015A24 3828 0008                  		move.w	8(a0),d4
00015A28 6100 A7A4                  		bsr.w	SolidObject
00015A2C 0828 0005 0022             		btst	#5,$22(a0)
00015A32 6700 0000                  		beq.w	Obj66_Display
00015A36 43F8 D000                  		lea	($FFFFD000).w,a1
00015A3A 720E                       		moveq	#$E,d1
00015A3C 3029 0008                  		move.w	8(a1),d0
00015A40 B068 0008                  		cmp.w	8(a0),d0
00015A44 6500                       		bcs.s	Obj66_GrabSonic
00015A46 7207                       		moveq	#7,d1
00015A48                            
00015A48                            Obj66_GrabSonic:
00015A48 B228 001A                  		cmp.b	$1A(a0),d1
00015A4C 6600                       		bne.s	Obj66_Display
00015A4E 1141 0032                  		move.b	d1,$32(a0)
00015A52 5828 0024                  		addq.b	#4,$24(a0)
00015A56 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015A5C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015A62 337C 0800 0014             		move.w	#$800,$14(a1)
00015A68 337C 0000 0010             		move.w	#0,$10(a1)
00015A6E 337C 0000 0012             		move.w	#0,$12(a1)
00015A74 08A8 0005 0022             		bclr	#5,$22(a0)
00015A7A 08A9 0005 0022             		bclr	#5,$22(a1)
00015A80 08E9 0001 0022             		bset	#1,$22(a1)
00015A86 3429 0008                  		move.w	8(a1),d2
00015A8A 3629 000C                  		move.w	$C(a1),d3
00015A8E 6100 0000                  		bsr.w	Obj66_ChgPos
00015A92 D569 0008                  		add.w	d2,8(a1)
00015A96 D769 000C                  		add.w	d3,$C(a1)
00015A9A E0E9 0008                  		asr	8(a1)
00015A9E E0E9 000C                  		asr	$C(a1)
00015AA2                            
00015AA2                            Obj66_Display:				; XREF: Obj66_Index
00015AA2 6000 A402                  		bra.w	MarkObjGone
00015AA6                            ; ===========================================================================
00015AA6                            
00015AA6                            Obj66_Release:				; XREF: Obj66_Index
00015AA6 1028 001A                  		move.b	$1A(a0),d0
00015AAA 0C00 0004                  		cmpi.b	#4,d0
00015AAE 6700                       		beq.s	loc_151C8
00015AB0 0C00 0007                  		cmpi.b	#7,d0
00015AB4 6600                       		bne.s	loc_151F8
00015AB6                            
00015AB6                            loc_151C8:
00015AB6 B028 0032                  		cmp.b	$32(a0),d0
00015ABA 6700                       		beq.s	loc_151F8
00015ABC 43F8 D000                  		lea	($FFFFD000).w,a1
00015AC0 337C 0000 0010             		move.w	#0,$10(a1)
00015AC6 337C 0800 0012             		move.w	#$800,$12(a1)
00015ACC 0C00 0004                  		cmpi.b	#4,d0
00015AD0 6700                       		beq.s	loc_151F0
00015AD2 337C 0800 0010             		move.w	#$800,$10(a1)
00015AD8 337C 0800 0012             		move.w	#$800,$12(a1)
00015ADE                            
00015ADE                            loc_151F0:
00015ADE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015AE2 5928 0024                  		subq.b	#4,$24(a0)
00015AE6                            
00015AE6                            loc_151F8:
00015AE6 6100                       		bsr.s	Obj66_ChkSwitch
00015AE8 6100                       		bsr.s	Obj66_ChgPos
00015AEA 6000 A3BA                  		bra.w	MarkObjGone
00015AEE                            
00015AEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AEE                            
00015AEE                            
00015AEE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015AEE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015AF2 7000                       		moveq	#0,d0
00015AF4 1028 0038                  		move.b	$38(a0),d0
00015AF8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015AFE 6700                       		beq.s	loc_15224	; if not, branch
00015B00 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B04 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B06 4428 0034                  		neg.b	$34(a0)
00015B0A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B10 6000                       		bra.s	Obj66_Animate
00015B12                            ; ===========================================================================
00015B12                            
00015B12                            loc_15224:
00015B12 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015B16                            
00015B16                            Obj66_Animate:
00015B16 5328 001E                  		subq.b	#1,$1E(a0)
00015B1A 6A00                       		bpl.s	locret_15246
00015B1C 117C 0007 001E             		move.b	#7,$1E(a0)
00015B22 1228 0034                  		move.b	$34(a0),d1
00015B26 1028 001A                  		move.b	$1A(a0),d0
00015B2A D001                       		add.b	d1,d0
00015B2C 0200 000F                  		andi.b	#$F,d0
00015B30 1140 001A                  		move.b	d0,$1A(a0)
00015B34                            
00015B34                            locret_15246:
00015B34 4E75                       		rts	
00015B36                            ; End of function Obj66_ChkSwitch
00015B36                            
00015B36                            
00015B36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B36                            
00015B36                            
00015B36                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015B36 43F8 D000                  		lea	($FFFFD000).w,a1
00015B3A 7000                       		moveq	#0,d0
00015B3C 1028 001A                  		move.b	$1A(a0),d0
00015B40 D040                       		add.w	d0,d0
00015B42 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015B46 101A                       		move.b	(a2)+,d0
00015B48 4880                       		ext.w	d0
00015B4A D068 0008                  		add.w	8(a0),d0
00015B4E 3340 0008                  		move.w	d0,8(a1)
00015B52 101A                       		move.b	(a2)+,d0
00015B54 4880                       		ext.w	d0
00015B56 D068 000C                  		add.w	$C(a0),d0
00015B5A 3340 000C                  		move.w	d0,$C(a1)
00015B5E 4E75                       		rts	
00015B60                            ; End of function Obj66_ChgPos
00015B60                            
00015B60                            ; ===========================================================================
00015B60 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015B64 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015B68 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015B6C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015B70 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015B74 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015B78 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015B7C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015B80                            ; ---------------------------------------------------------------------------
00015B80                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B80                            ; ---------------------------------------------------------------------------
00015B80                            Map_obj66:
00015B80                            	include "_maps\obj66.asm"
00015B80                            ; ---------------------------------------------------------------------------
00015B80                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B80                            ; ---------------------------------------------------------------------------
00015B80 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015B84 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015B88 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015B8C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015B90 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015B94 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015B98 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015B9C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015BA0 0000                       		dc.w byte_154A4-Map_obj66
00015BA2 06                         byte_152B4:	dc.b 6
00015BA3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015BA8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015BAD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015BB2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015BB7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015BBC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015BC1 06                         byte_152D3:	dc.b 6
00015BC2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015BC7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015BCC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015BD1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015BD6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015BDB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015BE0 06                         byte_152F2:	dc.b 6
00015BE1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015BE6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015BEB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015BF0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015BF5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015BFA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015BFF 06                         byte_15311:	dc.b 6
00015C00 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C05 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C0A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C0F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015C14 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015C19 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015C1E 06                         byte_15330:	dc.b 6
00015C1F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015C24 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015C29 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015C2E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015C33 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015C38 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015C3D 06                         byte_1534F:	dc.b 6
00015C3E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015C43 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015C48 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015C4D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015C52 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015C57 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015C5C 06                         byte_1536E:	dc.b 6
00015C5D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015C62 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015C67 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015C6C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015C71 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015C76 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015C7B 06                         byte_1538D:	dc.b 6
00015C7C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015C81 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015C86 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015C8B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015C90 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015C95 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015C9A 06                         byte_153AC:	dc.b 6
00015C9B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015CA0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015CA5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015CAA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015CAF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015CB4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015CB9 06                         byte_153CB:	dc.b 6
00015CBA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015CBF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015CC4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015CC9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015CCE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015CD3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015CD8 06                         byte_153EA:	dc.b 6
00015CD9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015CDE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015CE3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015CE8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015CED E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015CF2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015CF7 06                         byte_15409:	dc.b 6
00015CF8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015CFD D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D02 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D07 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D0C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D11 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015D16 06                         byte_15428:	dc.b 6
00015D17 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015D1C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015D21 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015D26 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015D2B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015D30 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015D35 06                         byte_15447:	dc.b 6
00015D36 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015D3B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015D40 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015D45 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015D4A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015D4F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015D54 06                         byte_15466:	dc.b 6
00015D55 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015D5A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015D5F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015D64 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015D69 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015D6E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015D73 06                         byte_15485:	dc.b 6
00015D74 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015D79 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015D7E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015D83 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015D88 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015D8D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015D92 0C                         byte_154A4:	dc.b $C
00015D93 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015D98 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015D9D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015DA2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015DA7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015DAC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015DB1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015DB6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015DBB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015DC0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015DC5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015DCA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015DD0 00                         		even
00015DD0 00                         		even
00015DD0                            
00015DD0                            ; ===========================================================================
00015DD0                            ; ---------------------------------------------------------------------------
00015DD0                            ; Object 67 - disc that	you run	around (SBZ)
00015DD0                            ; ---------------------------------------------------------------------------
00015DD0                            
00015DD0                            Obj67:					; XREF: Obj_Index
00015DD0 7000                       		moveq	#0,d0
00015DD2 1028 0024                  		move.b	$24(a0),d0
00015DD6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015DDA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015DDE                            ; ===========================================================================
00015DDE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015DE0 0000                       		dc.w Obj67_Action-Obj67_Index
00015DE2                            ; ===========================================================================
00015DE2                            
00015DE2                            Obj67_Main:				; XREF: Obj67_Index
00015DE2 5428 0024                  		addq.b	#2,$24(a0)
00015DE6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015DEE 317C C344 0002             		move.w	#$C344,2(a0)
00015DF4 117C 0004 0001             		move.b	#4,1(a0)
00015DFA 117C 0004 0018             		move.b	#4,$18(a0)
00015E00 117C 0008 0019             		move.b	#8,$19(a0)
00015E06 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E12 117C 0018 0034             		move.b	#$18,$34(a0)
00015E18 117C 0048 0038             		move.b	#$48,$38(a0)
00015E1E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E22 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E26 6700                       		beq.s	loc_15546
00015E28 117C 0010 0034             		move.b	#$10,$34(a0)
00015E2E 117C 0038 0038             		move.b	#$38,$38(a0)
00015E34                            
00015E34                            loc_15546:
00015E34 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E38 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E3C 4881                       		ext.w	d1
00015E3E E741                       		asl.w	#3,d1
00015E40 3141 0036                  		move.w	d1,$36(a0)
00015E44 1028 0022                  		move.b	$22(a0),d0
00015E48 E418                       		ror.b	#2,d0
00015E4A 0200 00C0                  		andi.b	#-$40,d0
00015E4E 1140 0026                  		move.b	d0,$26(a0)
00015E52                            
00015E52                            Obj67_Action:				; XREF: Obj67_Index
00015E52 6100 0000                  		bsr.w	Obj67_MoveSonic
00015E56 6100 0000                  		bsr.w	Obj67_MoveSpot
00015E5A 6000 0000                  		bra.w	Obj67_ChkDel
00015E5E                            ; ===========================================================================
00015E5E                            
00015E5E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015E5E 7400                       		moveq	#0,d2
00015E60 1428 0038                  		move.b	$38(a0),d2
00015E64 3602                       		move.w	d2,d3
00015E66 D643                       		add.w	d3,d3
00015E68 43F8 D000                  		lea	($FFFFD000).w,a1
00015E6C 3029 0008                  		move.w	8(a1),d0
00015E70 9068 0032                  		sub.w	$32(a0),d0
00015E74 D042                       		add.w	d2,d0
00015E76 B043                       		cmp.w	d3,d0
00015E78 6400                       		bcc.s	loc_155A8
00015E7A 3229 000C                  		move.w	$C(a1),d1
00015E7E 9268 0030                  		sub.w	$30(a0),d1
00015E82 D242                       		add.w	d2,d1
00015E84 B243                       		cmp.w	d3,d1
00015E86 6400                       		bcc.s	loc_155A8
00015E88 0829 0001 0022             		btst	#1,$22(a1)
00015E8E 6700                       		beq.s	loc_155B8
00015E90 4228 003A                  		clr.b	$3A(a0)
00015E94 4E75                       		rts	
00015E96                            ; ===========================================================================
00015E96                            
00015E96                            loc_155A8:
00015E96 4A28 003A                  		tst.b	$3A(a0)
00015E9A 6700                       		beq.s	locret_155B6
00015E9C 4229 0038                  		clr.b	$38(a1)
00015EA0 4228 003A                  		clr.b	$3A(a0)
00015EA4                            
00015EA4                            locret_155B6:
00015EA4 4E75                       		rts	
00015EA6                            ; ===========================================================================
00015EA6                            
00015EA6                            loc_155B8:
00015EA6 4A28 003A                  		tst.b	$3A(a0)
00015EAA 6600                       		bne.s	loc_155E2
00015EAC 117C 0001 003A             		move.b	#1,$3A(a0)
00015EB2 0829 0002 0022             		btst	#2,$22(a1)
00015EB8 6600                       		bne.s	loc_155D0
00015EBA 4229 001C                  		clr.b	$1C(a1)
00015EBE                            
00015EBE                            loc_155D0:
00015EBE 08A9 0005 0022             		bclr	#5,$22(a1)
00015EC4 137C 0001 001D             		move.b	#1,$1D(a1)
00015ECA 137C 0001 0038             		move.b	#1,$38(a1)
00015ED0                            
00015ED0                            loc_155E2:
00015ED0 3029 0014                  		move.w	$14(a1),d0
00015ED4 4A68 0036                  		tst.w	$36(a0)
00015ED8 6A00                       		bpl.s	loc_15608
00015EDA 0C40 FC00                  		cmpi.w	#-$400,d0
00015EDE 6F00                       		ble.s	loc_155FA
00015EE0 337C FC00 0014             		move.w	#-$400,$14(a1)
00015EE6 4E75                       		rts	
00015EE8                            ; ===========================================================================
00015EE8                            
00015EE8                            loc_155FA:
00015EE8 0C40 F100                  		cmpi.w	#-$F00,d0
00015EEC 6C00                       		bge.s	locret_15606
00015EEE 337C F100 0014             		move.w	#-$F00,$14(a1)
00015EF4                            
00015EF4                            locret_15606:
00015EF4 4E75                       		rts	
00015EF6                            ; ===========================================================================
00015EF6                            
00015EF6                            loc_15608:
00015EF6 0C40 0400                  		cmpi.w	#$400,d0
00015EFA 6C00                       		bge.s	loc_15616
00015EFC 337C 0400 0014             		move.w	#$400,$14(a1)
00015F02 4E75                       		rts	
00015F04                            ; ===========================================================================
00015F04                            
00015F04                            loc_15616:
00015F04 0C40 0F00                  		cmpi.w	#$F00,d0
00015F08 6F00                       		ble.s	locret_15622
00015F0A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F10                            
00015F10                            locret_15622:
00015F10 4E75                       		rts	
00015F12                            ; ===========================================================================
00015F12                            
00015F12                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015F12 3028 0036                  		move.w	$36(a0),d0
00015F16 D168 0026                  		add.w	d0,$26(a0)
00015F1A 1028 0026                  		move.b	$26(a0),d0
00015F1E 4EB9 0000 2CEC             		jsr	(CalcSine).l
00015F24 3428 0030                  		move.w	$30(a0),d2
00015F28 3628 0032                  		move.w	$32(a0),d3
00015F2C 7800                       		moveq	#0,d4
00015F2E 1828 0034                  		move.b	$34(a0),d4
00015F32 E14C                       		lsl.w	#8,d4
00015F34 2A04                       		move.l	d4,d5
00015F36 C9C0                       		muls.w	d0,d4
00015F38 4844                       		swap	d4
00015F3A CBC1                       		muls.w	d1,d5
00015F3C 4845                       		swap	d5
00015F3E D842                       		add.w	d2,d4
00015F40 DA43                       		add.w	d3,d5
00015F42 3144 000C                  		move.w	d4,$C(a0)
00015F46 3145 0008                  		move.w	d5,8(a0)
00015F4A 4E75                       		rts	
00015F4C                            ; ===========================================================================
00015F4C                            
00015F4C                            Obj67_ChkDel:				; XREF: Obj67_Action
00015F4C 3028 0032                  		move.w	$32(a0),d0
00015F50 0240 FF80                  		andi.w	#-$80,d0
00015F54 3238 F700                  		move.w	($FFFFF700).w,d1
00015F58 0441 0080                  		subi.w	#$80,d1
00015F5C 0241 FF80                  		andi.w	#-$80,d1
00015F60 9041                       		sub.w	d1,d0
00015F62 0C40 0280                  		cmpi.w	#$280,d0
00015F66 6200                       		bhi.s	Obj67_Delete
00015F68 4EF9 0000 DDFE             		jmp	DisplaySprite
00015F6E                            ; ===========================================================================
00015F6E                            
00015F6E                            Obj67_Delete:
00015F6E 4EF9 0000 DE3A             		jmp	DeleteObject
00015F74                            ; ===========================================================================
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            ; Sprite mappings - disc that you run around (SBZ)
00015F74                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F74                            ; part of the level tiles.)
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            Map_obj67:
00015F74                            	include "_maps\obj67.asm"
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            ; Sprite mappings - disc that you run around (SBZ)
00015F74                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F74                            ; part of the level tiles.)
00015F74                            ; ---------------------------------------------------------------------------
00015F74 0000                       		dc.w byte_15688-Map_obj67
00015F76 01                         byte_15688:	dc.b 1
00015F77 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015F7C                            		even
00015F7C                            		even
00015F7C                            
00015F7C                            ; ===========================================================================
00015F7C                            ; ---------------------------------------------------------------------------
00015F7C                            ; Object 68 - conveyor belts (SBZ)
00015F7C                            ; ---------------------------------------------------------------------------
00015F7C                            
00015F7C                            Obj68:					; XREF: Obj_Index
00015F7C 7000                       		moveq	#0,d0
00015F7E 1028 0024                  		move.b	$24(a0),d0
00015F82 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015F86 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015F8A                            ; ===========================================================================
00015F8A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015F8C 0000                       		dc.w Obj68_Action-Obj68_Index
00015F8E                            ; ===========================================================================
00015F8E                            
00015F8E                            Obj68_Main:				; XREF: Obj68_Index
00015F8E 5428 0024                  		addq.b	#2,$24(a0)
00015F92 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015F98 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F9C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015FA0 6700                       		beq.s	loc_156BA	; if zero, branch
00015FA2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015FA8                            
00015FA8                            loc_156BA:
00015FA8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015FAC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015FB0 4881                       		ext.w	d1
00015FB2 E841                       		asr.w	#4,d1
00015FB4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015FB8                            
00015FB8                            Obj68_Action:				; XREF: Obj68_Index
00015FB8 6100                       		bsr.s	Obj68_MoveSonic
00015FBA 3028 0008                  		move.w	8(a0),d0
00015FBE 0240 FF80                  		andi.w	#$FF80,d0
00015FC2 3238 F700                  		move.w	($FFFFF700).w,d1
00015FC6 0441 0080                  		subi.w	#$80,d1
00015FCA 0241 FF80                  		andi.w	#$FF80,d1
00015FCE 9041                       		sub.w	d1,d0
00015FD0 0C40 0280                  		cmpi.w	#$280,d0
00015FD4 6200                       		bhi.s	Obj68_Delete
00015FD6 4E75                       		rts	
00015FD8                            ; ===========================================================================
00015FD8                            
00015FD8                            Obj68_Delete:
00015FD8 4EF9 0000 DE3A             		jmp	DeleteObject
00015FDE                            ; ===========================================================================
00015FDE                            
00015FDE                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015FDE 7400                       		moveq	#0,d2
00015FE0 1428 0038                  		move.b	$38(a0),d2
00015FE4 3602                       		move.w	d2,d3
00015FE6 D643                       		add.w	d3,d3
00015FE8 43F8 D000                  		lea	($FFFFD000).w,a1
00015FEC 3029 0008                  		move.w	8(a1),d0
00015FF0 9068 0008                  		sub.w	8(a0),d0
00015FF4 D042                       		add.w	d2,d0
00015FF6 B043                       		cmp.w	d3,d0
00015FF8 6400                       		bcc.s	locret_1572E
00015FFA 3229 000C                  		move.w	$C(a1),d1
00015FFE 9268 000C                  		sub.w	$C(a0),d1
00016002 0641 0030                  		addi.w	#$30,d1
00016006 0C41 0030                  		cmpi.w	#$30,d1
0001600A 6400                       		bcc.s	locret_1572E
0001600C 0829 0001 0022             		btst	#1,$22(a1)
00016012 6600                       		bne.s	locret_1572E
00016014 3028 0036                  		move.w	$36(a0),d0
00016018 D169 0008                  		add.w	d0,8(a1)
0001601C                            
0001601C                            locret_1572E:
0001601C 4E75                       		rts	
0001601E                            
0001601E                            ; ===========================================================================
0001601E                            ; ---------------------------------------------------------------------------
0001601E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001601E                            ; ---------------------------------------------------------------------------
0001601E                            
0001601E                            Obj69:					; XREF: Obj_Index
0001601E 7000                       		moveq	#0,d0
00016020 1028 0024                  		move.b	$24(a0),d0
00016024 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016028 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001602C                            ; ===========================================================================
0001602C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001602E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016030 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016032                            ; ===========================================================================
00016032                            
00016032                            Obj69_Main:				; XREF: Obj69_Index
00016032 5428 0024                  		addq.b	#2,$24(a0)
00016036 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001603E 317C 4492 0002             		move.w	#$4492,2(a0)
00016044 0028 0004 0001             		ori.b	#4,1(a0)
0001604A 117C 0080 0019             		move.b	#$80,$19(a0)
00016050 7000                       		moveq	#0,d0
00016052 1028 0028                  		move.b	$28(a0),d0
00016056 0240 000F                  		andi.w	#$F,d0
0001605A C0FC 003C                  		mulu.w	#$3C,d0
0001605E 3140 0032                  		move.w	d0,$32(a0)
00016062 4A28 0028                  		tst.b	$28(a0)
00016066 6A00                       		bpl.s	Obj69_Trapdoor
00016068 5428 0024                  		addq.b	#2,$24(a0)
0001606C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016074 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001607A 117C 0010 0019             		move.b	#$10,$19(a0)
00016080 117C 0002 001C             		move.b	#2,$1C(a0)
00016086 7000                       		moveq	#0,d0
00016088 1028 0028                  		move.b	$28(a0),d0	; get object type
0001608C 3200                       		move.w	d0,d1
0001608E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016092 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016096 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001609A 3140 0032                  		move.w	d0,$32(a0)
0001609E 0241 0070                  		andi.w	#$70,d1
000160A2 0641 0010                  		addi.w	#$10,d1
000160A6 E549                       		lsl.w	#2,d1
000160A8 5341                       		subq.w	#1,d1
000160AA 3141 0036                  		move.w	d1,$36(a0)
000160AE 6000                       		bra.s	Obj69_Spinner
000160B0                            ; ===========================================================================
000160B0                            
000160B0                            Obj69_Trapdoor:				; XREF: Obj69_Index
000160B0 5368 0030                  		subq.w	#1,$30(a0)
000160B4 6A00                       		bpl.s	Obj69_Animate
000160B6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000160BC 0868 0000 001C             		bchg	#0,$1C(a0)
000160C2 4A28 0001                  		tst.b	1(a0)
000160C6 6A00                       		bpl.s	Obj69_Animate
000160C8 303C 00BB                  		move.w	#$BB,d0
000160CC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
000160D2                            
000160D2                            Obj69_Animate:
000160D2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000160D8 4EB9 0000 AEBE             		jsr	AnimateSprite
000160DE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000160E2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000160E4 323C 004B                  		move.w	#$4B,d1
000160E8 343C 000C                  		move.w	#$C,d2
000160EC 3602                       		move.w	d2,d3
000160EE 5243                       		addq.w	#1,d3
000160F0 3828 0008                  		move.w	8(a0),d4
000160F4 6100 A0D8                  		bsr.w	SolidObject
000160F8 6000 9DAC                  		bra.w	MarkObjGone
000160FC                            ; ===========================================================================
000160FC                            
000160FC                            Obj69_NotSolid:
000160FC 0828 0003 0022             		btst	#3,$22(a0)
00016102 6700                       		beq.s	Obj69_Display
00016104 43F8 D000                  		lea	($FFFFD000).w,a1
00016108 08A9 0003 0022             		bclr	#3,$22(a1)
0001610E 08A8 0003 0022             		bclr	#3,$22(a0)
00016114 4228 0025                  		clr.b	$25(a0)
00016118                            
00016118                            Obj69_Display:
00016118 6000 9D8C                  		bra.w	MarkObjGone
0001611C                            ; ===========================================================================
0001611C                            
0001611C                            Obj69_Spinner:				; XREF: Obj69_Index
0001611C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016120 C068 0036                  		and.w	$36(a0),d0
00016124 6600                       		bne.s	Obj69_Delay
00016126 117C 0001 0034             		move.b	#1,$34(a0)
0001612C                            
0001612C                            Obj69_Delay:
0001612C 4A28 0034                  		tst.b	$34(a0)
00016130 6700                       		beq.s	Obj69_Animate2
00016132 5368 0030                  		subq.w	#1,$30(a0)
00016136 6A00                       		bpl.s	Obj69_Animate2
00016138 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001613E 4228 0034                  		clr.b	$34(a0)
00016142 0868 0000 001C             		bchg	#0,$1C(a0)
00016148                            
00016148                            Obj69_Animate2:
00016148 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001614E 4EB9 0000 AEBE             		jsr	AnimateSprite
00016154 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016158 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001615A 323C 001B                  		move.w	#$1B,d1
0001615E 343C 0007                  		move.w	#7,d2
00016162 3602                       		move.w	d2,d3
00016164 5243                       		addq.w	#1,d3
00016166 3828 0008                  		move.w	8(a0),d4
0001616A 6100 A062                  		bsr.w	SolidObject
0001616E 6000 9D36                  		bra.w	MarkObjGone
00016172                            ; ===========================================================================
00016172                            
00016172                            Obj69_NotSolid2:
00016172 0828 0003 0022             		btst	#3,$22(a0)
00016178 6700                       		beq.s	Obj69_Display2
0001617A 43F8 D000                  		lea	($FFFFD000).w,a1
0001617E 08A9 0003 0022             		bclr	#3,$22(a1)
00016184 08A8 0003 0022             		bclr	#3,$22(a0)
0001618A 4228 0025                  		clr.b	$25(a0)
0001618E                            
0001618E                            Obj69_Display2:
0001618E 6000 9D16                  		bra.w	MarkObjGone
00016192                            ; ===========================================================================
00016192                            Ani_obj69:
00016192                            	include "_anim\obj69.asm"
00016192                            ; ---------------------------------------------------------------------------
00016192                            ; Animation script - trapdoor (SBZ)
00016192                            ; ---------------------------------------------------------------------------
00016192 0000                       		dc.w byte_158AC-Ani_obj69
00016194 0000                       		dc.w byte_158B2-Ani_obj69
00016196 0000                       		dc.w byte_158B8-Ani_obj69
00016198 0000                       		dc.w byte_158CC-Ani_obj69
0001619A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000161A0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000161A6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000161B3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000161BA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000161C7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000161CE                            		even
000161CE                            		even
000161CE                            
000161CE                            ; ---------------------------------------------------------------------------
000161CE                            ; Sprite mappings - trapdoor (SBZ)
000161CE                            ; ---------------------------------------------------------------------------
000161CE                            Map_obj69:
000161CE                            	include "_maps\obj69.asm"
000161CE                            ; ---------------------------------------------------------------------------
000161CE                            ; Sprite mappings - trapdoor (SBZ)
000161CE                            ; ---------------------------------------------------------------------------
000161CE 0000                       		dc.w byte_158E6-Map_obj69
000161D0 0000                       		dc.w byte_158FB-Map_obj69
000161D2 0000                       		dc.w byte_15924-Map_obj69
000161D4 04                         byte_158E6:	dc.b 4
000161D5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000161DA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000161DF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000161E4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000161E9 08                         byte_158FB:	dc.b 8
000161EA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000161EF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000161F4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000161F9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000161FE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016203 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016208 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001620D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016212 04                         byte_15924:	dc.b 4
00016213 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016218 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001621D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016222 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016228 00                         		even
00016228 00                         		even
00016228                            
00016228                            ; ---------------------------------------------------------------------------
00016228                            ; Sprite mappings - spinning platforms (SBZ)
00016228                            ; ---------------------------------------------------------------------------
00016228                            Map_obj69a:
00016228                            	include "_maps\obj69a.asm"
00016228                            ; ---------------------------------------------------------------------------
00016228                            ; Sprite mappings - spinning platforms (SBZ)
00016228                            ; ---------------------------------------------------------------------------
00016228 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001622C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016230 0000                       		dc.w byte_15970-Map_obj69a
00016232 02                         byte_15944:	dc.b 2
00016233 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016238 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001623D 02                         byte_1594F:	dc.b 2
0001623E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016243 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016248 02                         byte_1595A:	dc.b 2
00016249 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001624E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016253 02                         byte_15965:	dc.b 2
00016254 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016259 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001625E 02                         byte_15970:	dc.b 2
0001625F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016264 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001626A 00                         		even
0001626A 00                         		even
0001626A                            
0001626A                            ; ===========================================================================
0001626A                            ; ---------------------------------------------------------------------------
0001626A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001626A                            ; ---------------------------------------------------------------------------
0001626A                            
0001626A                            Obj6A:					; XREF: Obj_Index
0001626A 7000                       		moveq	#0,d0
0001626C 1028 0024                  		move.b	$24(a0),d0
00016270 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016274 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016278                            ; ===========================================================================
00016278 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001627A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001627C                            ; ===========================================================================
0001627C                            
0001627C                            Obj6A_Main:				; XREF: Obj6A_Index
0001627C 5428 0024                  		addq.b	#2,$24(a0)
00016280 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016288 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001628E 117C 0004 0001             		move.b	#4,1(a0)
00016294 117C 0004 0018             		move.b	#4,$18(a0)
0001629A 117C 0020 0019             		move.b	#$20,$19(a0)
000162A0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000162A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000162AC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000162B2 6400                       		bcc.s	Obj6A_Action
000162B4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000162BA                            
000162BA                            Obj6A_Action:				; XREF: Obj6A_Index
000162BA 7000                       		moveq	#0,d0
000162BC 1028 0028                  		move.b	$28(a0),d0
000162C0 0240 0007                  		andi.w	#7,d0
000162C4 D040                       		add.w	d0,d0
000162C6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000162CA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000162CE 3028 003A                  		move.w	$3A(a0),d0
000162D2 0240 FF80                  		andi.w	#$FF80,d0
000162D6 3238 F700                  		move.w	($FFFFF700).w,d1
000162DA 0441 0080                  		subi.w	#$80,d1
000162DE 0241 FF80                  		andi.w	#$FF80,d1
000162E2 9041                       		sub.w	d1,d0
000162E4 0C40 0280                  		cmpi.w	#$280,d0
000162E8 6200                       		bhi.s	Obj6A_Delete
000162EA 4EF9 0000 DDFE             		jmp	DisplaySprite
000162F0                            ; ===========================================================================
000162F0                            
000162F0                            Obj6A_Delete:
000162F0 4EF9 0000 DE3A             		jmp	DeleteObject
000162F6                            ; ===========================================================================
000162F6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000162FA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000162FE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016300                            ; ===========================================================================
00016300                            
00016300                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016300 4E75                       		rts	
00016302                            ; ===========================================================================
00016302                            
00016302                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016302 323C 0060                  		move.w	#$60,d1
00016306 7000                       		moveq	#0,d0
00016308 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001630C 0828 0000 0022             		btst	#0,$22(a0)
00016312 6700                       		beq.s	Obj6A_Animate01
00016314 4440                       		neg.w	d0
00016316 D041                       		add.w	d1,d0
00016318                            
00016318                            Obj6A_Animate01:
00016318 3228 003A                  		move.w	$3A(a0),d1
0001631C 9240                       		sub.w	d0,d1
0001631E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016322 5328 001E                  		subq.b	#1,$1E(a0)
00016326 6A00                       		bpl.s	loc_15A46
00016328 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001632E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016334                            
00016334                            loc_15A46:
00016334 4A28 0001                  		tst.b	1(a0)
00016338 6A00                       		bpl.s	locret_15A60
0001633A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001633E 0240 000F                  		andi.w	#$F,d0
00016342 6600                       		bne.s	locret_15A60
00016344 303C 00B0                  		move.w	#$B0,d0
00016348 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001634E                            
0001634E                            locret_15A60:
0001634E 4E75                       		rts	
00016350                            ; ===========================================================================
00016350                            
00016350                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016350 323C 0030                  		move.w	#$30,d1
00016354 7000                       		moveq	#0,d0
00016356 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001635A 0828 0000 0022             		btst	#0,$22(a0)
00016360 6700                       		beq.s	Obj6A_Animate02
00016362 4440                       		neg.w	d0
00016364 0640 0080                  		addi.w	#$80,d0
00016368                            
00016368                            Obj6A_Animate02:
00016368 3228 0038                  		move.w	$38(a0),d1
0001636C 9240                       		sub.w	d0,d1
0001636E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016372 5328 001E                  		subq.b	#1,$1E(a0)
00016376 6A00                       		bpl.s	loc_15A96
00016378 117C 0002 001E             		move.b	#2,$1E(a0)
0001637E 0868 0000 001A             		bchg	#0,$1A(a0)
00016384                            
00016384                            loc_15A96:
00016384 4A28 0001                  		tst.b	1(a0)
00016388 6A00                       		bpl.s	locret_15AB0
0001638A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001638E 0C00 0018                  		cmpi.b	#$18,d0
00016392 6600                       		bne.s	locret_15AB0
00016394 303C 00B0                  		move.w	#$B0,d0
00016398 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001639E                            
0001639E                            locret_15AB0:
0001639E 4E75                       		rts	
000163A0                            ; ===========================================================================
000163A0                            
000163A0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000163A0 4A28 003D                  		tst.b	$3D(a0)
000163A4 6600                       		bne.s	Obj6A_Animate03
000163A6 3038 D008                  		move.w	($FFFFD008).w,d0
000163AA 0440 00C0                  		subi.w	#$C0,d0
000163AE 6500                       		bcs.s	loc_15B02
000163B0 9068 0008                  		sub.w	8(a0),d0
000163B4 6500                       		bcs.s	loc_15B02
000163B6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000163BA 0440 0080                  		subi.w	#$80,d0
000163BE B068 000C                  		cmp.w	$C(a0),d0
000163C2 6400                       		bcc.s	locret_15B04
000163C4 0640 0100                  		addi.w	#$100,d0
000163C8 B068 000C                  		cmp.w	$C(a0),d0
000163CC 6500                       		bcs.s	locret_15B04
000163CE 117C 0001 003D             		move.b	#1,$3D(a0)
000163D4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000163DA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163E0 117C 0002 001A             		move.b	#2,$1A(a0)
000163E6 303C 00B0                  		move.w	#$B0,d0
000163EA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163F0                            
000163F0                            loc_15B02:
000163F0 588F                       		addq.l	#4,sp
000163F2                            
000163F2                            locret_15B04:
000163F2 4E75                       		rts	
000163F4                            ; ===========================================================================
000163F4                            
000163F4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000163F4 4EB9 0000 DDD8             		jsr	SpeedToPos
000163FA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016400 5328 001E                  		subq.b	#1,$1E(a0)
00016404 6A00                       		bpl.s	locret_15B24
00016406 117C 0002 001E             		move.b	#2,$1E(a0)
0001640C 0868 0000 001A             		bchg	#0,$1A(a0)
00016412                            
00016412                            locret_15B24:
00016412 4E75                       		rts	
00016414                            ; ===========================================================================
00016414                            
00016414                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016414 4A28 003D                  		tst.b	$3D(a0)
00016418 6600                       		bne.s	Obj6A_Animate04
0001641A 3038 D008                  		move.w	($FFFFD008).w,d0
0001641E 0640 00E0                  		addi.w	#$E0,d0
00016422 9068 0008                  		sub.w	8(a0),d0
00016426 6400                       		bcc.s	loc_15B74
00016428 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001642C 0440 0080                  		subi.w	#$80,d0
00016430 B068 000C                  		cmp.w	$C(a0),d0
00016434 6400                       		bcc.s	locret_15B76
00016436 0640 0100                  		addi.w	#$100,d0
0001643A B068 000C                  		cmp.w	$C(a0),d0
0001643E 6500                       		bcs.s	locret_15B76
00016440 117C 0001 003D             		move.b	#1,$3D(a0)
00016446 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001644C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016452 117C 0002 001A             		move.b	#2,$1A(a0)
00016458 303C 00B0                  		move.w	#$B0,d0
0001645C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016462                            
00016462                            loc_15B74:
00016462 588F                       		addq.l	#4,sp
00016464                            
00016464                            locret_15B76:
00016464 4E75                       		rts	
00016466                            ; ===========================================================================
00016466                            
00016466                            Obj6A_Animate04:
00016466 4EB9 0000 DDD8             		jsr	SpeedToPos
0001646C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016472 5328 001E                  		subq.b	#1,$1E(a0)
00016476 6A00                       		bpl.s	locret_15B96
00016478 117C 0002 001E             		move.b	#2,$1E(a0)
0001647E 0868 0000 001A             		bchg	#0,$1A(a0)
00016484                            
00016484                            locret_15B96:
00016484 4E75                       		rts	
00016486                            ; ===========================================================================
00016486                            ; ---------------------------------------------------------------------------
00016486                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016486                            ; ---------------------------------------------------------------------------
00016486                            Map_obj6A:
00016486                            	include "_maps\obj6A.asm"
00016486                            ; ---------------------------------------------------------------------------
00016486                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016486                            ; ---------------------------------------------------------------------------
00016486 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001648A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001648E 07                         byte_15BA0:	dc.b 7
0001648F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016494 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016499 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001649E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164A3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164A8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164AD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164B2 07                         byte_15BC4:	dc.b 7
000164B3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000164B8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000164BD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000164C2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164C7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164CC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164D1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000164D6 04                         byte_15BE8:	dc.b 4
000164D7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164DC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164E1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164E6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164EB 04                         byte_15BFD:	dc.b 4
000164EC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164F1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164F6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164FB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016500                            		even
00016500                            		even
00016500                            
00016500                            ; ===========================================================================
00016500                            ; ---------------------------------------------------------------------------
00016500                            ; Object 6B - stomper (SBZ)
00016500                            ; ---------------------------------------------------------------------------
00016500                            
00016500                            Obj6B:					; XREF: Obj_Index
00016500 7000                       		moveq	#0,d0
00016502 1028 0024                  		move.b	$24(a0),d0
00016506 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001650A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001650E                            ; ===========================================================================
0001650E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016510 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016512                            
00016512 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016516 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001651A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001651E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016522 8040 0005                  		dc.b  $80, $40,	  0,   5
00016526                            ; ===========================================================================
00016526                            
00016526                            Obj6B_Main:				; XREF: Obj6B_Index
00016526 5428 0024                  		addq.b	#2,$24(a0)
0001652A 7000                       		moveq	#0,d0
0001652C 1028 0028                  		move.b	$28(a0),d0
00016530 E448                       		lsr.w	#2,d0
00016532 0240 001C                  		andi.w	#$1C,d0
00016536 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001653A 115B 0019                  		move.b	(a3)+,$19(a0)
0001653E 115B 0016                  		move.b	(a3)+,$16(a0)
00016542 E448                       		lsr.w	#2,d0
00016544 1140 001A                  		move.b	d0,$1A(a0)
00016548 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016550 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016556 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001655C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001655E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016564 6700                       		beq.s	Obj6B_SBZ3
00016566                            
00016566                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016566 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001656A 7000                       		moveq	#0,d0
0001656C 1028 0023                  		move.b	$23(a0),d0
00016570 6700                       		beq.s	Obj6B_Delete
00016572 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016578                            
00016578                            Obj6B_Delete:
00016578 4EF9 0000 DE3A             		jmp	DeleteObject
0001657E                            ; ===========================================================================
0001657E                            
0001657E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001657E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016584 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001658A 6600                       		bne.s	Obj6B_SBZ12
0001658C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016590 7000                       		moveq	#0,d0
00016592 1028 0023                  		move.b	$23(a0),d0
00016596 6700                       		beq.s	Obj6B_SBZ12
00016598 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001659E 6700                       		beq.s	Obj6B_SBZ12
000165A0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000165A4 60C0                       		bra.s	Obj6B_ChkGone
000165A6                            ; ===========================================================================
000165A6                            
000165A6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000165A6 0028 0004 0001             		ori.b	#4,1(a0)
000165AC 117C 0004 0018             		move.b	#4,$18(a0)
000165B2 3168 0008 0034             		move.w	8(a0),$34(a0)
000165B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000165BE 7000                       		moveq	#0,d0
000165C0 101B                       		move.b	(a3)+,d0
000165C2 3140 003C                  		move.w	d0,$3C(a0)
000165C6 7000                       		moveq	#0,d0
000165C8 1028 0028                  		move.b	$28(a0),d0
000165CC 6A00                       		bpl.s	Obj6B_Action
000165CE 0200 000F                  		andi.b	#$F,d0
000165D2 1140 003E                  		move.b	d0,$3E(a0)
000165D6 1153 0028                  		move.b	(a3),$28(a0)
000165DA 0C13 0005                  		cmpi.b	#5,(a3)
000165DE 6600                       		bne.s	Obj6B_ChkGone2
000165E0 08E8 0004 0001             		bset	#4,1(a0)
000165E6                            
000165E6                            Obj6B_ChkGone2:
000165E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165EA 7000                       		moveq	#0,d0
000165EC 1028 0023                  		move.b	$23(a0),d0
000165F0 6700                       		beq.s	Obj6B_Action
000165F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165F8                            
000165F8                            Obj6B_Action:				; XREF: Obj6B_Index
000165F8 3F28 0008                  		move.w	8(a0),-(sp)
000165FC 7000                       		moveq	#0,d0
000165FE 1028 0028                  		move.b	$28(a0),d0
00016602 0240 000F                  		andi.w	#$F,d0
00016606 D040                       		add.w	d0,d0
00016608 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001660C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016610 381F                       		move.w	(sp)+,d4
00016612 4A28 0001                  		tst.b	1(a0)
00016616 6A00                       		bpl.s	Obj6B_ChkDel
00016618 7200                       		moveq	#0,d1
0001661A 1228 0019                  		move.b	$19(a0),d1
0001661E 0641 000B                  		addi.w	#$B,d1
00016622 7400                       		moveq	#0,d2
00016624 1428 0016                  		move.b	$16(a0),d2
00016628 3602                       		move.w	d2,d3
0001662A 5243                       		addq.w	#1,d3
0001662C 6100 9BA0                  		bsr.w	SolidObject
00016630                            
00016630                            Obj6B_ChkDel:
00016630 3028 0034                  		move.w	$34(a0),d0
00016634 0240 FF80                  		andi.w	#$FF80,d0
00016638 3238 F700                  		move.w	($FFFFF700).w,d1
0001663C 0441 0080                  		subi.w	#$80,d1
00016640 0241 FF80                  		andi.w	#$FF80,d1
00016644 9041                       		sub.w	d1,d0
00016646 0C40 0280                  		cmpi.w	#$280,d0
0001664A 6200                       		bhi.s	loc_15D64
0001664C 4EF9 0000 DDFE             		jmp	DisplaySprite
00016652                            ; ===========================================================================
00016652                            
00016652                            loc_15D64:
00016652 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016658 6600                       		bne.s	Obj6B_Delete2
0001665A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001665E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016662 7000                       		moveq	#0,d0
00016664 1028 0023                  		move.b	$23(a0),d0
00016668 6700                       		beq.s	Obj6B_Delete2
0001666A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016670                            
00016670                            Obj6B_Delete2:
00016670 4EF9 0000 DE3A             		jmp	DeleteObject
00016676                            ; ===========================================================================
00016676 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001667A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001667E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016682                            ; ===========================================================================
00016682                            
00016682                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016682 4E75                       		rts	
00016684                            ; ===========================================================================
00016684                            
00016684                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016684 4A28 0038                  		tst.b	$38(a0)
00016688 6600                       		bne.s	loc_15DB4
0001668A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001668E 7000                       		moveq	#0,d0
00016690 1028 003E                  		move.b	$3E(a0),d0
00016694 0832 0000 0000             		btst	#0,(a2,d0.w)
0001669A 6700                       		beq.s	loc_15DC2
0001669C 117C 0001 0038             		move.b	#1,$38(a0)
000166A2                            
000166A2                            loc_15DB4:
000166A2 3028 003C                  		move.w	$3C(a0),d0
000166A6 B068 003A                  		cmp.w	$3A(a0),d0
000166AA 6700                       		beq.s	loc_15DE0
000166AC 5468 003A                  		addq.w	#2,$3A(a0)
000166B0                            
000166B0                            loc_15DC2:
000166B0 3028 003A                  		move.w	$3A(a0),d0
000166B4 0828 0000 0022             		btst	#0,$22(a0)
000166BA 6700                       		beq.s	loc_15DD4
000166BC 4440                       		neg.w	d0
000166BE 0640 0080                  		addi.w	#$80,d0
000166C2                            
000166C2                            loc_15DD4:
000166C2 3228 0034                  		move.w	$34(a0),d1
000166C6 9240                       		sub.w	d0,d1
000166C8 3141 0008                  		move.w	d1,8(a0)
000166CC 4E75                       		rts	
000166CE                            ; ===========================================================================
000166CE                            
000166CE                            loc_15DE0:
000166CE 5228 0028                  		addq.b	#1,$28(a0)
000166D2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000166D8 4228 0038                  		clr.b	$38(a0)
000166DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166E0 7000                       		moveq	#0,d0
000166E2 1028 0023                  		move.b	$23(a0),d0
000166E6 67C8                       		beq.s	loc_15DC2
000166E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166EE 60C0                       		bra.s	loc_15DC2
000166F0                            ; ===========================================================================
000166F0                            
000166F0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000166F0 4A28 0038                  		tst.b	$38(a0)
000166F4 6600                       		bne.s	loc_15E14
000166F6 5368 0036                  		subq.w	#1,$36(a0)
000166FA 6600                       		bne.s	loc_15E1E
000166FC 117C 0001 0038             		move.b	#1,$38(a0)
00016702                            
00016702                            loc_15E14:
00016702 4A68 003A                  		tst.w	$3A(a0)
00016706 6700                       		beq.s	loc_15E3C
00016708 5568 003A                  		subq.w	#2,$3A(a0)
0001670C                            
0001670C                            loc_15E1E:
0001670C 3028 003A                  		move.w	$3A(a0),d0
00016710 0828 0000 0022             		btst	#0,$22(a0)
00016716 6700                       		beq.s	loc_15E30
00016718 4440                       		neg.w	d0
0001671A 0640 0080                  		addi.w	#$80,d0
0001671E                            
0001671E                            loc_15E30:
0001671E 3228 0034                  		move.w	$34(a0),d1
00016722 9240                       		sub.w	d0,d1
00016724 3141 0008                  		move.w	d1,8(a0)
00016728 4E75                       		rts	
0001672A                            ; ===========================================================================
0001672A                            
0001672A                            loc_15E3C:
0001672A 5328 0028                  		subq.b	#1,$28(a0)
0001672E 4228 0038                  		clr.b	$38(a0)
00016732 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016736 7000                       		moveq	#0,d0
00016738 1028 0023                  		move.b	$23(a0),d0
0001673C 67CE                       		beq.s	loc_15E1E
0001673E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016744 60C6                       		bra.s	loc_15E1E
00016746                            ; ===========================================================================
00016746                            
00016746                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016746 4A28 0038                  		tst.b	$38(a0)
0001674A 6600                       		bne.s	loc_15E7C
0001674C 4A68 003A                  		tst.w	$3A(a0)
00016750 6700                       		beq.s	loc_15E6A
00016752 5368 003A                  		subq.w	#1,$3A(a0)
00016756 6000                       		bra.s	loc_15E8E
00016758                            ; ===========================================================================
00016758                            
00016758                            loc_15E6A:
00016758 5368 0036                  		subq.w	#1,$36(a0)
0001675C 6A00                       		bpl.s	loc_15E8E
0001675E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016764 117C 0001 0038             		move.b	#1,$38(a0)
0001676A                            
0001676A                            loc_15E7C:
0001676A 5068 003A                  		addq.w	#8,$3A(a0)
0001676E 3028 003A                  		move.w	$3A(a0),d0
00016772 B068 003C                  		cmp.w	$3C(a0),d0
00016776 6600                       		bne.s	loc_15E8E
00016778 4228 0038                  		clr.b	$38(a0)
0001677C                            
0001677C                            loc_15E8E:
0001677C 3028 003A                  		move.w	$3A(a0),d0
00016780 0828 0000 0022             		btst	#0,$22(a0)
00016786 6700                       		beq.s	loc_15EA0
00016788 4440                       		neg.w	d0
0001678A 0640 0038                  		addi.w	#$38,d0
0001678E                            
0001678E                            loc_15EA0:
0001678E 3228 0030                  		move.w	$30(a0),d1
00016792 D240                       		add.w	d0,d1
00016794 3141 000C                  		move.w	d1,$C(a0)
00016798 4E75                       		rts	
0001679A                            ; ===========================================================================
0001679A                            
0001679A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001679A 4A28 0038                  		tst.b	$38(a0)
0001679E 6600                       		bne.s	loc_15ED0
000167A0 4A68 003A                  		tst.w	$3A(a0)
000167A4 6700                       		beq.s	loc_15EBE
000167A6 5168 003A                  		subq.w	#8,$3A(a0)
000167AA 6000                       		bra.s	loc_15EF0
000167AC                            ; ===========================================================================
000167AC                            
000167AC                            loc_15EBE:
000167AC 5368 0036                  		subq.w	#1,$36(a0)
000167B0 6A00                       		bpl.s	loc_15EF0
000167B2 317C 003C 0036             		move.w	#$3C,$36(a0)
000167B8 117C 0001 0038             		move.b	#1,$38(a0)
000167BE                            
000167BE                            loc_15ED0:
000167BE 3028 003A                  		move.w	$3A(a0),d0
000167C2 B068 003C                  		cmp.w	$3C(a0),d0
000167C6 6700                       		beq.s	loc_15EE0
000167C8 5068 003A                  		addq.w	#8,$3A(a0)
000167CC 6000                       		bra.s	loc_15EF0
000167CE                            ; ===========================================================================
000167CE                            
000167CE                            loc_15EE0:
000167CE 5368 0036                  		subq.w	#1,$36(a0)
000167D2 6A00                       		bpl.s	loc_15EF0
000167D4 317C 003C 0036             		move.w	#$3C,$36(a0)
000167DA 4228 0038                  		clr.b	$38(a0)
000167DE                            
000167DE                            loc_15EF0:
000167DE 3028 003A                  		move.w	$3A(a0),d0
000167E2 0828 0000 0022             		btst	#0,$22(a0)
000167E8 6700                       		beq.s	loc_15F02
000167EA 4440                       		neg.w	d0
000167EC 0640 0038                  		addi.w	#$38,d0
000167F0                            
000167F0                            loc_15F02:
000167F0 3228 0030                  		move.w	$30(a0),d1
000167F4 D240                       		add.w	d0,d1
000167F6 3141 000C                  		move.w	d1,$C(a0)
000167FA 4E75                       		rts	
000167FC                            ; ===========================================================================
000167FC                            
000167FC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000167FC 4A28 0038                  		tst.b	$38(a0)
00016800 6600                       		bne.s	loc_15F3E
00016802 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016806 7000                       		moveq	#0,d0
00016808 1028 003E                  		move.b	$3E(a0),d0
0001680C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016812 6700                       		beq.s	locret_15F5C
00016814 117C 0001 0038             		move.b	#1,$38(a0)
0001681A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001681E 7000                       		moveq	#0,d0
00016820 1028 0023                  		move.b	$23(a0),d0
00016824 6700                       		beq.s	loc_15F3E
00016826 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001682C                            
0001682C                            loc_15F3E:
0001682C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016834 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001683C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016842 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016848 6700                       		beq.s	loc_15F5E
0001684A                            
0001684A                            locret_15F5C:
0001684A 4E75                       		rts	
0001684C                            ; ===========================================================================
0001684C                            
0001684C                            loc_15F5E:
0001684C 4228 0028                  		clr.b	$28(a0)
00016850 4228 0038                  		clr.b	$38(a0)
00016854 4E75                       		rts	
00016856                            ; ===========================================================================
00016856                            ; ---------------------------------------------------------------------------
00016856                            ; Sprite mappings - stomper and	platforms (SBZ)
00016856                            ; ---------------------------------------------------------------------------
00016856                            Map_obj6B:
00016856                            	include "_maps\obj6B.asm"
00016856                            ; ---------------------------------------------------------------------------
00016856                            ; Sprite mappings - stomper and	platforms (SBZ)
00016856                            ; ---------------------------------------------------------------------------
00016856 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001685A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001685E 0000                       		dc.w byte_15FB0-Map_obj6B
00016860 04                         byte_15F72:	dc.b 4
00016861 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016866 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001686B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016870 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016875 08                         byte_15F87:	dc.b 8
00016876 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001687B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016880 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016885 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001688A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001688F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016894 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016899 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001689E 0E                         byte_15FB0:	dc.b $E
0001689F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000168A4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000168A9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000168AE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000168B3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000168B8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000168BD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000168C2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000168C7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000168CC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000168D1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000168D6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000168DB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000168E0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000168E6 00                         		even
000168E6 00                         		even
000168E6                            
000168E6                            ; ===========================================================================
000168E6                            ; ---------------------------------------------------------------------------
000168E6                            ; Object 6C - vanishing	platforms (SBZ)
000168E6                            ; ---------------------------------------------------------------------------
000168E6                            
000168E6                            Obj6C:					; XREF: Obj_Index
000168E6 7000                       		moveq	#0,d0
000168E8 1028 0024                  		move.b	$24(a0),d0
000168EC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000168F0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000168F4                            ; ===========================================================================
000168F4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000168F6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168F8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168FA 0000                       		dc.w loc_16068-Obj6C_Index
000168FC                            ; ===========================================================================
000168FC                            
000168FC                            Obj6C_Main:				; XREF: Obj6C_Index
000168FC 5C28 0024                  		addq.b	#6,$24(a0)
00016900 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016908 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001690E 0028 0004 0001             		ori.b	#4,1(a0)
00016914 117C 0010 0019             		move.b	#$10,$19(a0)
0001691A 117C 0004 0018             		move.b	#4,$18(a0)
00016920 7000                       		moveq	#0,d0
00016922 1028 0028                  		move.b	$28(a0),d0	; get object type
00016926 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001692A 5240                       		addq.w	#1,d0		; add 1
0001692C EF48                       		lsl.w	#7,d0		; multiply by $80
0001692E 3200                       		move.w	d0,d1
00016930 5340                       		subq.w	#1,d0
00016932 3140 0030                  		move.w	d0,$30(a0)
00016936 3140 0032                  		move.w	d0,$32(a0)
0001693A 7000                       		moveq	#0,d0
0001693C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016940 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016944 0641 0080                  		addi.w	#$80,d1
00016948 C0C1                       		mulu.w	d1,d0
0001694A E088                       		lsr.l	#8,d0
0001694C 3140 0036                  		move.w	d0,$36(a0)
00016950 5341                       		subq.w	#1,d1
00016952 3141 0038                  		move.w	d1,$38(a0)
00016956                            
00016956                            loc_16068:				; XREF: Obj6C_Index
00016956 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001695A 9068 0036                  		sub.w	$36(a0),d0
0001695E C068 0038                  		and.w	$38(a0),d0
00016962 6600                       		bne.s	Obj6C_Animate
00016964 5928 0024                  		subq.b	#4,$24(a0)
00016968 6000                       		bra.s	Obj6C_Vanish
0001696A                            ; ===========================================================================
0001696A                            
0001696A                            Obj6C_Animate:
0001696A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016970 4EB9 0000 AEBE             		jsr	AnimateSprite
00016976 6000 952E                  		bra.w	MarkObjGone
0001697A                            ; ===========================================================================
0001697A                            
0001697A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001697A 5368 0030                  		subq.w	#1,$30(a0)
0001697E 6A00                       		bpl.s	loc_160AA
00016980 317C 007F 0030             		move.w	#127,$30(a0)
00016986 4A28 001C                  		tst.b	$1C(a0)
0001698A 6700                       		beq.s	loc_160A4
0001698C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016992                            
00016992                            loc_160A4:
00016992 0868 0000 001C             		bchg	#0,$1C(a0)
00016998                            
00016998                            loc_160AA:
00016998 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001699E 4EB9 0000 AEBE             		jsr	AnimateSprite
000169A4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000169AA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000169AC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000169B2 6600                       		bne.s	loc_160D6
000169B4 7200                       		moveq	#0,d1
000169B6 1228 0019                  		move.b	$19(a0),d1
000169BA 4EB9 0000 7A88             		jsr	(PlatformObject).l
000169C0 6000 94E4                  		bra.w	MarkObjGone
000169C4                            ; ===========================================================================
000169C4                            
000169C4                            loc_160D6:
000169C4 7200                       		moveq	#0,d1
000169C6 1228 0019                  		move.b	$19(a0),d1
000169CA 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000169D0 3428 0008                  		move.w	8(a0),d2
000169D4 4EB9 0000 8166             		jsr	(MvSonicOnPtfm2).l
000169DA 6000 94CA                  		bra.w	MarkObjGone
000169DE                            ; ===========================================================================
000169DE                            
000169DE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000169DE 0828 0003 0022             		btst	#3,$22(a0)
000169E4 6700                       		beq.s	Obj6C_Display
000169E6 43F8 D000                  		lea	($FFFFD000).w,a1
000169EA 08A9 0003 0022             		bclr	#3,$22(a1)
000169F0 08A8 0003 0022             		bclr	#3,$22(a0)
000169F6 117C 0002 0024             		move.b	#2,$24(a0)
000169FC 4228 0025                  		clr.b	$25(a0)
00016A00                            
00016A00                            Obj6C_Display:
00016A00 6000 94A4                  		bra.w	MarkObjGone
00016A04                            ; ===========================================================================
00016A04                            Ani_obj6C:
00016A04                            	include "_anim\obj6C.asm"
00016A04                            ; ---------------------------------------------------------------------------
00016A04                            ; Animation script - vanishing platforms (SBZ)
00016A04                            ; ---------------------------------------------------------------------------
00016A04 0000                       		dc.w byte_1611A-Ani_obj6C
00016A06 0000                       		dc.w byte_16122-Ani_obj6C
00016A08 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A10 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016A18                            		even
00016A18                            		even
00016A18                            
00016A18                            ; ---------------------------------------------------------------------------
00016A18                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A18                            ; ---------------------------------------------------------------------------
00016A18                            Map_obj6C:
00016A18                            	include "_maps\obj6C.asm"
00016A18                            ; ---------------------------------------------------------------------------
00016A18                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A18                            ; ---------------------------------------------------------------------------
00016A18 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016A1C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016A20 01                         byte_16132:	dc.b 1
00016A21 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016A26 01                         byte_16138:	dc.b 1
00016A27 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016A2C 01                         byte_1613E:	dc.b 1
00016A2D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016A32 00                         byte_16144:	dc.b 0
00016A34 00                         		even
00016A34 00                         		even
00016A34                            
00016A34                            ; ===========================================================================
00016A34                            ; ---------------------------------------------------------------------------
00016A34                            ; Object 6E - electrocution orbs (SBZ)
00016A34                            ; ---------------------------------------------------------------------------
00016A34                            
00016A34                            Obj6E:					; XREF: Obj_Index
00016A34 7000                       		moveq	#0,d0
00016A36 1028 0024                  		move.b	$24(a0),d0
00016A3A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016A3E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016A42                            ; ===========================================================================
00016A42 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016A44 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016A46                            ; ===========================================================================
00016A46                            
00016A46                            Obj6E_Main:				; XREF: Obj6E_Index
00016A46 5428 0024                  		addq.b	#2,$24(a0)
00016A4A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016A52 317C 047E 0002             		move.w	#$47E,2(a0)
00016A58 0028 0004 0001             		ori.b	#4,1(a0)
00016A5E 117C 0028 0019             		move.b	#$28,$19(a0)
00016A64 7000                       		moveq	#0,d0
00016A66 1028 0028                  		move.b	$28(a0),d0	; read object type
00016A6A E948                       		lsl.w	#4,d0		; multiply by $10
00016A6C 5340                       		subq.w	#1,d0
00016A6E 3140 0034                  		move.w	d0,$34(a0)
00016A72                            
00016A72                            Obj6E_Shock:				; XREF: Obj6E_Index
00016A72 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A76 C068 0034                  		and.w	$34(a0),d0
00016A7A 6600                       		bne.s	Obj6E_Animate
00016A7C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016A82 4A28 0001                  		tst.b	1(a0)
00016A86 6A00                       		bpl.s	Obj6E_Animate
00016A88 303C 00B1                  		move.w	#$B1,d0
00016A8C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016A92                            
00016A92                            Obj6E_Animate:
00016A92 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016A98 4EB9 0000 AEBE             		jsr	AnimateSprite
00016A9E 117C 0000 0020             		move.b	#0,$20(a0)
00016AA4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016AAA 6600                       		bne.s	Obj6E_Display	; if not, branch
00016AAC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016AB2                            
00016AB2                            Obj6E_Display:
00016AB2 6000 93F2                  		bra.w	MarkObjGone
00016AB6                            ; ===========================================================================
00016AB6                            Ani_obj6E:
00016AB6                            	include "_anim\obj6E.asm"
00016AB6                            ; ---------------------------------------------------------------------------
00016AB6                            ; Animation script - electrocution orbs (SBZ)
00016AB6                            ; ---------------------------------------------------------------------------
00016AB6 0000                       		dc.w byte_161CC-Ani_obj6E
00016AB8 0000                       		dc.w byte_161D0-Ani_obj6E
00016ABA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016ABE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016ACE                            		even
00016ACE                            		even
00016ACE                            
00016ACE                            ; ---------------------------------------------------------------------------
00016ACE                            ; Sprite mappings - electrocution orbs (SBZ)
00016ACE                            ; ---------------------------------------------------------------------------
00016ACE                            Map_obj6E:
00016ACE                            	include "_maps\obj6E.asm"
00016ACE                            Map_26ed:
00016ACE 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016AD0 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016AD2 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016AD4 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016AD6 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016AD8 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016ADA 01                         Map_26ed_C: 	dc.b $1
00016ADB 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016AE0 02                         Map_26ed_12: 	dc.b $2
00016AE1 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AE6 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AEB 06                         Map_26ed_1D: 	dc.b $6
00016AEC F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AF1 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AF6 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016AFB F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B00 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B05 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B0A 08                         Map_26ed_3C: 	dc.b $8
00016B0B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B10 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B15 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B1A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B1F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B24 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B29 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B2E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B33 06                         Map_26ed_65: 	dc.b $6
00016B34 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B39 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B3E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B43 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B48 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B4D F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B52 04                         Map_26ed_84: 	dc.b $4
00016B53 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B58 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B5D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B62 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B68 00                         	even
00016B68 00                         	even
00016B68                            
00016B68                            ; ===========================================================================
00016B68                            ; ---------------------------------------------------------------------------
00016B68                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016B68                            ; ---------------------------------------------------------------------------
00016B68                            
00016B68                            Obj6F:					; XREF: Obj_Index
00016B68 7000                       		moveq	#0,d0
00016B6A 1028 0024                  		move.b	$24(a0),d0
00016B6E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016B72 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016B76 3028 0030                  		move.w	$30(a0),d0
00016B7A 0240 FF80                  		andi.w	#$FF80,d0
00016B7E 3238 F700                  		move.w	($FFFFF700).w,d1
00016B82 0441 0080                  		subi.w	#$80,d1
00016B86 0241 FF80                  		andi.w	#$FF80,d1
00016B8A 9041                       		sub.w	d1,d0
00016B8C 0C40 0280                  		cmpi.w	#$280,d0
00016B90 6200                       		bhi.s	loc_1629A
00016B92                            
00016B92                            Obj6F_Display:
00016B92 4EF9 0000 DDFE             		jmp	DisplaySprite
00016B98                            ; ===========================================================================
00016B98                            
00016B98                            loc_1629A:
00016B98 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016B9E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016BA0 0C40 FF80                  		cmpi.w	#-$80,d0
00016BA4 64EC                       		bcc.s	Obj6F_Display
00016BA6                            
00016BA6                            Obj6F_Act1or2:
00016BA6 1028 002F                  		move.b	$2F(a0),d0
00016BAA 6A00                       		bpl.s	Obj6F_Delete
00016BAC 0240 007F                  		andi.w	#$7F,d0
00016BB0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016BB4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016BBA                            
00016BBA                            Obj6F_Delete:
00016BBA 4EF9 0000 DE3A             		jmp	DeleteObject
00016BC0                            ; ===========================================================================
00016BC0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016BC2 0000                       		dc.w loc_163D8-Obj6F_Index
00016BC4                            ; ===========================================================================
00016BC4                            
00016BC4                            Obj6F_Main:				; XREF: Obj6F_Index
00016BC4 1028 0028                  		move.b	$28(a0),d0
00016BC8 6B00 0000                  		bmi.w	loc_16380
00016BCC 5428 0024                  		addq.b	#2,$24(a0)
00016BD0 217C 0001 6228 0004        		move.l	#Map_obj69a,4(a0)
00016BD8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016BDE 117C 0010 0019             		move.b	#$10,$19(a0)
00016BE4 0028 0004 0001             		ori.b	#4,1(a0)
00016BEA 117C 0004 0018             		move.b	#4,$18(a0)
00016BF0 7000                       		moveq	#0,d0
00016BF2 1028 0028                  		move.b	$28(a0),d0
00016BF6 3200                       		move.w	d0,d1
00016BF8 E648                       		lsr.w	#3,d0
00016BFA 0240 001E                  		andi.w	#$1E,d0
00016BFE 45FA 0000                  		lea	off_164A6(pc),a2
00016C02 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C06 315A 0038                  		move.w	(a2)+,$38(a0)
00016C0A 315A 0030                  		move.w	(a2)+,$30(a0)
00016C0E 214A 003C                  		move.l	a2,$3C(a0)
00016C12 0241 000F                  		andi.w	#$F,d1
00016C16 E549                       		lsl.w	#2,d1
00016C18 1141 0038                  		move.b	d1,$38(a0)
00016C1C 117C 0004 003A             		move.b	#4,$3A(a0)
00016C22 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016C26 6700                       		beq.s	loc_16356
00016C28 117C 0001 003B             		move.b	#1,$3B(a0)
00016C2E 4428 003A                  		neg.b	$3A(a0)
00016C32 7200                       		moveq	#0,d1
00016C34 1228 0038                  		move.b	$38(a0),d1
00016C38 D228 003A                  		add.b	$3A(a0),d1
00016C3C B228 0039                  		cmp.b	$39(a0),d1
00016C40 6500                       		bcs.s	loc_16352
00016C42 1001                       		move.b	d1,d0
00016C44 7200                       		moveq	#0,d1
00016C46 4A00                       		tst.b	d0
00016C48 6A00                       		bpl.s	loc_16352
00016C4A 1228 0039                  		move.b	$39(a0),d1
00016C4E 5901                       		subq.b	#4,d1
00016C50                            
00016C50                            loc_16352:
00016C50 1141 0038                  		move.b	d1,$38(a0)
00016C54                            
00016C54                            loc_16356:
00016C54 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016C5A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016C60 4A41                       		tst.w	d1
00016C62 6600                       		bne.s	loc_1636C
00016C64 117C 0001 001C             		move.b	#1,$1C(a0)
00016C6A                            
00016C6A                            loc_1636C:
00016C6A 0C41 0008                  		cmpi.w	#8,d1
00016C6E 6600                       		bne.s	loc_16378
00016C70 117C 0000 001C             		move.b	#0,$1C(a0)
00016C76                            
00016C76                            loc_16378:
00016C76 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016C7A 6000 0000                  		bra.w	loc_163D8
00016C7E                            ; ===========================================================================
00016C7E                            
00016C7E                            loc_16380:				; XREF: Obj6F_Main
00016C7E 1140 002F                  		move.b	d0,$2F(a0)
00016C82 0240 007F                  		andi.w	#$7F,d0
00016C86 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C8A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016C90 6700                       		beq.s	loc_1639A
00016C92 4EF9 0000 DE3A             		jmp	DeleteObject
00016C98                            ; ===========================================================================
00016C98                            
00016C98                            loc_1639A:
00016C98 D040                       		add.w	d0,d0
00016C9A 0240 001E                  		andi.w	#$1E,d0
00016C9E 0640 0080                  		addi.w	#$80,d0
00016CA2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016CA8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CAC 321A                       		move.w	(a2)+,d1
00016CAE 2248                       		movea.l	a0,a1
00016CB0 6000                       		bra.s	Obj6F_LoadPform
00016CB2                            ; ===========================================================================
00016CB2                            
00016CB2                            Obj6F_Loop:
00016CB2 4EB9 0000 E284             		jsr	SingleObjLoad
00016CB8 6600                       		bne.s	loc_163D0
00016CBA                            
00016CBA                            Obj6F_LoadPform:			; XREF: loc_1639A
00016CBA 12BC 006F                  		move.b	#$6F,0(a1)
00016CBE 335A 0008                  		move.w	(a2)+,8(a1)
00016CC2 335A 000C                  		move.w	(a2)+,$C(a1)
00016CC6 301A                       		move.w	(a2)+,d0
00016CC8 1340 0028                  		move.b	d0,$28(a1)
00016CCC                            
00016CCC                            loc_163D0:
00016CCC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016CD0                            
00016CD0 588F                       		addq.l	#4,sp
00016CD2 4E75                       		rts	
00016CD4                            ; ===========================================================================
00016CD4                            
00016CD4                            loc_163D8:				; XREF: Obj6F_Index
00016CD4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016CDA 4EB9 0000 AEBE             		jsr	AnimateSprite
00016CE0 4A28 001A                  		tst.b	$1A(a0)
00016CE4 6600                       		bne.s	loc_16404
00016CE6 3F28 0008                  		move.w	8(a0),-(sp)
00016CEA 6100 0000                  		bsr.w	loc_16424
00016CEE 323C 001B                  		move.w	#$1B,d1
00016CF2 343C 0007                  		move.w	#7,d2
00016CF6 3602                       		move.w	d2,d3
00016CF8 5243                       		addq.w	#1,d3
00016CFA 381F                       		move.w	(sp)+,d4
00016CFC 6000 94D0                  		bra.w	SolidObject
00016D00                            ; ===========================================================================
00016D00                            
00016D00                            loc_16404:
00016D00 0828 0003 0022             		btst	#3,$22(a0)
00016D06 6700                       		beq.s	loc_16420
00016D08 43F8 D000                  		lea	($FFFFD000).w,a1
00016D0C 08A9 0003 0022             		bclr	#3,$22(a1)
00016D12 08A8 0003 0022             		bclr	#3,$22(a0)
00016D18 4228 0025                  		clr.b	$25(a0)
00016D1C                            
00016D1C                            loc_16420:
00016D1C 6000 0002                  		bra.w	*+4
00016D20                            
00016D20                            loc_16424:
00016D20 3028 0008                  		move.w	8(a0),d0
00016D24 B068 0034                  		cmp.w	$34(a0),d0
00016D28 6600                       		bne.s	loc_16484
00016D2A 3028 000C                  		move.w	$C(a0),d0
00016D2E B068 0036                  		cmp.w	$36(a0),d0
00016D32 6600                       		bne.s	loc_16484
00016D34 7200                       		moveq	#0,d1
00016D36 1228 0038                  		move.b	$38(a0),d1
00016D3A D228 003A                  		add.b	$3A(a0),d1
00016D3E B228 0039                  		cmp.b	$39(a0),d1
00016D42 6500                       		bcs.s	loc_16456
00016D44 1001                       		move.b	d1,d0
00016D46 7200                       		moveq	#0,d1
00016D48 4A00                       		tst.b	d0
00016D4A 6A00                       		bpl.s	loc_16456
00016D4C 1228 0039                  		move.b	$39(a0),d1
00016D50 5901                       		subq.b	#4,d1
00016D52                            
00016D52                            loc_16456:
00016D52 1141 0038                  		move.b	d1,$38(a0)
00016D56 2268 003C                  		movea.l	$3C(a0),a1
00016D5A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016D60 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016D66 4A41                       		tst.w	d1
00016D68 6600                       		bne.s	loc_16474
00016D6A 117C 0001 001C             		move.b	#1,$1C(a0)
00016D70                            
00016D70                            loc_16474:
00016D70 0C41 0008                  		cmpi.w	#8,d1
00016D74 6600                       		bne.s	loc_16480
00016D76 117C 0000 001C             		move.b	#0,$1C(a0)
00016D7C                            
00016D7C                            loc_16480:
00016D7C 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016D80                            
00016D80                            loc_16484:
00016D80 4EF9 0000 DDD8             		jmp	SpeedToPos
00016D86                            ; ===========================================================================
00016D86                            Ani_obj6F:
00016D86                            	include "_anim\obj6F.asm"
00016D86                            ; ---------------------------------------------------------------------------
00016D86                            ; Animation script - platform on conveyor belt (SBZ)
00016D86                            ; ---------------------------------------------------------------------------
00016D86 0000                       		dc.w byte_1648E-Ani_obj6F
00016D88 0000                       		dc.w byte_164A2-Ani_obj6F
00016D8A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016D97 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016D9E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016DA2 00                         		even
00016DA2 00                         		even
00016DA2                            
00016DA2 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016DA8 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016DAE 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016DC2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016DD6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016DEA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016DFE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E12 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016E26                            ; ===========================================================================
00016E26                            ; ---------------------------------------------------------------------------
00016E26                            ; Object 70 - large girder block (SBZ)
00016E26                            ; ---------------------------------------------------------------------------
00016E26                            
00016E26                            Obj70:					; XREF: Obj_Index
00016E26 7000                       		moveq	#0,d0
00016E28 1028 0024                  		move.b	$24(a0),d0
00016E2C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016E30 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016E34                            ; ===========================================================================
00016E34 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016E36 0000                       		dc.w Obj70_Action-Obj70_Index
00016E38                            ; ===========================================================================
00016E38                            
00016E38                            Obj70_Main:				; XREF: Obj70_Index
00016E38 5428 0024                  		addq.b	#2,$24(a0)
00016E3C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016E44 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016E4A 0028 0004 0001             		ori.b	#4,1(a0)
00016E50 117C 0004 0018             		move.b	#4,$18(a0)
00016E56 117C 0060 0019             		move.b	#$60,$19(a0)
00016E5C 117C 0018 0016             		move.b	#$18,$16(a0)
00016E62 3168 0008 0032             		move.w	8(a0),$32(a0)
00016E68 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016E6E 6100 0000                  		bsr.w	Obj70_Move2
00016E72                            
00016E72                            Obj70_Action:				; XREF: Obj70_Index
00016E72 3F28 0008                  		move.w	8(a0),-(sp)
00016E76 4A68 003A                  		tst.w	$3A(a0)
00016E7A 6700                       		beq.s	Obj70_Move
00016E7C 5368 003A                  		subq.w	#1,$3A(a0)
00016E80 6600                       		bne.s	Obj70_Solid
00016E82                            
00016E82                            Obj70_Move:
00016E82 4EB9 0000 DDD8             		jsr	SpeedToPos
00016E88 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016E8C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016E8E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016E92                            
00016E92                            Obj70_Solid:
00016E92 381F                       		move.w	(sp)+,d4
00016E94 4A28 0001                  		tst.b	1(a0)
00016E98 6A00                       		bpl.s	Obj70_ChkDel
00016E9A 7200                       		moveq	#0,d1
00016E9C 1228 0019                  		move.b	$19(a0),d1
00016EA0 0641 000B                  		addi.w	#$B,d1
00016EA4 7400                       		moveq	#0,d2
00016EA6 1428 0016                  		move.b	$16(a0),d2
00016EAA 3602                       		move.w	d2,d3
00016EAC 5243                       		addq.w	#1,d3
00016EAE 6100 931E                  		bsr.w	SolidObject
00016EB2                            
00016EB2                            Obj70_ChkDel:
00016EB2 3028 0032                  		move.w	$32(a0),d0
00016EB6 0240 FF80                  		andi.w	#$FF80,d0
00016EBA 3238 F700                  		move.w	($FFFFF700).w,d1
00016EBE 0441 0080                  		subi.w	#$80,d1
00016EC2 0241 FF80                  		andi.w	#$FF80,d1
00016EC6 9041                       		sub.w	d1,d0
00016EC8 0C40 0280                  		cmpi.w	#$280,d0
00016ECC 6200                       		bhi.s	Obj70_Delete
00016ECE 4EF9 0000 DDFE             		jmp	DisplaySprite
00016ED4                            ; ===========================================================================
00016ED4                            
00016ED4                            Obj70_Delete:
00016ED4 4EF9 0000 DE3A             		jmp	DeleteObject
00016EDA                            ; ===========================================================================
00016EDA                            
00016EDA                            Obj70_Move2:				; XREF: Obj70_Main
00016EDA 1028 0038                  		move.b	$38(a0),d0
00016EDE 0240 0018                  		andi.w	#$18,d0
00016EE2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016EE8 43F1 0000                  		lea	(a1,d0.w),a1
00016EEC 3159 0010                  		move.w	(a1)+,$10(a0)
00016EF0 3159 0012                  		move.w	(a1)+,$12(a0)
00016EF4 3159 0034                  		move.w	(a1)+,$34(a0)
00016EF8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016EFC 317C 0007 003A             		move.w	#7,$3A(a0)
00016F02 4E75                       		rts	
00016F04                            ; ===========================================================================
00016F04 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F0C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F14 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016F1C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016F24                            ; ---------------------------------------------------------------------------
00016F24                            ; Sprite mappings - large girder block (SBZ)
00016F24                            ; ---------------------------------------------------------------------------
00016F24                            Map_obj70:
00016F24                            	include "_maps\obj70.asm"
00016F24                            ; ---------------------------------------------------------------------------
00016F24                            ; Sprite mappings - large girder block (SBZ)
00016F24                            ; ---------------------------------------------------------------------------
00016F24 0000                       		dc.w byte_1662A-Map_obj70
00016F26 0C                         byte_1662A:	dc.b $C
00016F27 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016F2C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016F31 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016F36 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016F3B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016F40 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016F45 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016F4A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016F4F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016F54 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016F59 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016F5E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016F64 00                         		even
00016F64 00                         		even
00016F64                            
00016F64                            ; ===========================================================================
00016F64                            ; ---------------------------------------------------------------------------
00016F64                            ; Object 72 - teleporter (SBZ)
00016F64                            ; ---------------------------------------------------------------------------
00016F64                            
00016F64                            Obj72:					; XREF: Obj_Index
00016F64 7000                       		moveq	#0,d0
00016F66 1028 0024                  		move.b	$24(a0),d0
00016F6A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016F6E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016F72 3028 0008                  		move.w	8(a0),d0
00016F76 0240 FF80                  		andi.w	#$FF80,d0
00016F7A 3238 F700                  		move.w	($FFFFF700).w,d1
00016F7E 0441 0080                  		subi.w	#$80,d1
00016F82 0241 FF80                  		andi.w	#$FF80,d1
00016F86 9041                       		sub.w	d1,d0
00016F88 0C40 0280                  		cmpi.w	#$280,d0
00016F8C 6200                       		bhi.s	Obj72_Delete
00016F8E 4E75                       		rts	
00016F90                            ; ===========================================================================
00016F90                            
00016F90                            Obj72_Delete:
00016F90 4EF9 0000 DE3A             		jmp	DeleteObject
00016F96                            ; ===========================================================================
00016F96 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016F98 0000                       		dc.w loc_166C8-Obj72_Index
00016F9A 0000                       		dc.w loc_1675E-Obj72_Index
00016F9C 0000                       		dc.w loc_16798-Obj72_Index
00016F9E                            ; ===========================================================================
00016F9E                            
00016F9E                            Obj72_Main:				; XREF: Obj72_Index
00016F9E 5428 0024                  		addq.b	#2,$24(a0)
00016FA2 1028 0028                  		move.b	$28(a0),d0
00016FA6 D040                       		add.w	d0,d0
00016FA8 0240 001E                  		andi.w	#$1E,d0
00016FAC 45FA 0000                  		lea	Obj72_Data(pc),a2
00016FB0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016FB4 315A 003A                  		move.w	(a2)+,$3A(a0)
00016FB8 214A 003C                  		move.l	a2,$3C(a0)
00016FBC 315A 0036                  		move.w	(a2)+,$36(a0)
00016FC0 315A 0038                  		move.w	(a2)+,$38(a0)
00016FC4                            
00016FC4                            loc_166C8:				; XREF: Obj72_Index
00016FC4 43F8 D000                  		lea	($FFFFD000).w,a1
00016FC8 3029 0008                  		move.w	8(a1),d0
00016FCC 9068 0008                  		sub.w	8(a0),d0
00016FD0 0828 0000 0022             		btst	#0,$22(a0)
00016FD6 6700                       		beq.s	loc_166E0
00016FD8 0640 000F                  		addi.w	#$F,d0
00016FDC                            
00016FDC                            loc_166E0:
00016FDC 0C40 0010                  		cmpi.w	#$10,d0
00016FE0 6400                       		bcc.s	locret_1675C
00016FE2 3229 000C                  		move.w	$C(a1),d1
00016FE6 9268 000C                  		sub.w	$C(a0),d1
00016FEA 0641 0020                  		addi.w	#$20,d1
00016FEE 0C41 0040                  		cmpi.w	#$40,d1
00016FF2 6400                       		bcc.s	locret_1675C
00016FF4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016FF8 6600                       		bne.s	locret_1675C
00016FFA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017000 6600                       		bne.s	loc_1670E
00017002 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017008 6500                       		bcs.s	locret_1675C
0001700A                            
0001700A                            loc_1670E:
0001700A 5428 0024                  		addq.b	#2,$24(a0)
0001700E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017014 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001701A 337C 0800 0014             		move.w	#$800,$14(a1)
00017020 337C 0000 0010             		move.w	#0,$10(a1)
00017026 337C 0000 0012             		move.w	#0,$12(a1)
0001702C 08A8 0005 0022             		bclr	#5,$22(a0)
00017032 08A9 0005 0022             		bclr	#5,$22(a1)
00017038 08E9 0001 0022             		bset	#1,$22(a1)
0001703E 3368 0008 0008             		move.w	8(a0),8(a1)
00017044 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001704A 4228 0032                  		clr.b	$32(a0)
0001704E 303C 00BE                  		move.w	#$BE,d0
00017052 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017058                            
00017058                            locret_1675C:
00017058 4E75                       		rts	
0001705A                            ; ===========================================================================
0001705A                            
0001705A                            loc_1675E:				; XREF: Obj72_Index
0001705A 43F8 D000                  		lea	($FFFFD000).w,a1
0001705E 1028 0032                  		move.b	$32(a0),d0
00017062 5428 0032                  		addq.b	#2,$32(a0)
00017066 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001706C EA40                       		asr.w	#5,d0
0001706E 3428 000C                  		move.w	$C(a0),d2
00017072 9440                       		sub.w	d0,d2
00017074 3342 000C                  		move.w	d2,$C(a1)
00017078 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001707E 6600                       		bne.s	locret_16796
00017080 6100 0000                  		bsr.w	sub_1681C
00017084 5428 0024                  		addq.b	#2,$24(a0)
00017088 303C 00BC                  		move.w	#$BC,d0
0001708C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00017092                            
00017092                            locret_16796:
00017092 4E75                       		rts	
00017094                            ; ===========================================================================
00017094                            
00017094                            loc_16798:				; XREF: Obj72_Index
00017094 588F                       		addq.l	#4,sp
00017096 43F8 D000                  		lea	($FFFFD000).w,a1
0001709A 5328 002E                  		subq.b	#1,$2E(a0)
0001709E 6A00                       		bpl.s	loc_167DA
000170A0 3368 0036 0008             		move.w	$36(a0),8(a1)
000170A6 3368 0038 000C             		move.w	$38(a0),$C(a1)
000170AC 7200                       		moveq	#0,d1
000170AE 1228 003A                  		move.b	$3A(a0),d1
000170B2 5801                       		addq.b	#4,d1
000170B4 B228 003B                  		cmp.b	$3B(a0),d1
000170B8 6500                       		bcs.s	loc_167C2
000170BA 7200                       		moveq	#0,d1
000170BC 6000                       		bra.s	loc_16800
000170BE                            ; ===========================================================================
000170BE                            
000170BE                            loc_167C2:
000170BE 1141 003A                  		move.b	d1,$3A(a0)
000170C2 2468 003C                  		movea.l	$3C(a0),a2
000170C6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000170CC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000170D2 6000 0000                  		bra.w	sub_1681C
000170D6                            ; ===========================================================================
000170D6                            
000170D6                            loc_167DA:
000170D6 2429 0008                  		move.l	8(a1),d2
000170DA 2629 000C                  		move.l	$C(a1),d3
000170DE 3029 0010                  		move.w	$10(a1),d0
000170E2 48C0                       		ext.l	d0
000170E4 E180                       		asl.l	#8,d0
000170E6 D480                       		add.l	d0,d2
000170E8 3029 0012                  		move.w	$12(a1),d0
000170EC 48C0                       		ext.l	d0
000170EE E180                       		asl.l	#8,d0
000170F0 D680                       		add.l	d0,d3
000170F2 2342 0008                  		move.l	d2,8(a1)
000170F6 2343 000C                  		move.l	d3,$C(a1)
000170FA 4E75                       		rts	
000170FC                            ; ===========================================================================
000170FC                            
000170FC                            loc_16800:
000170FC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017102 4228 0024                  		clr.b	$24(a0)
00017106 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001710A 337C 0000 0010             		move.w	#0,$10(a1)
00017110 337C 0200 0012             		move.w	#$200,$12(a1)
00017116 4E75                       		rts	
00017118                            
00017118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017118                            
00017118                            
00017118                            sub_1681C:
00017118 7000                       		moveq	#0,d0
0001711A 343C 1000                  		move.w	#$1000,d2
0001711E 3028 0036                  		move.w	$36(a0),d0
00017122 9069 0008                  		sub.w	8(a1),d0
00017126 6C00                       		bge.s	loc_16830
00017128 4440                       		neg.w	d0
0001712A 4442                       		neg.w	d2
0001712C                            
0001712C                            loc_16830:
0001712C 7200                       		moveq	#0,d1
0001712E 363C 1000                  		move.w	#$1000,d3
00017132 3228 0038                  		move.w	$38(a0),d1
00017136 9269 000C                  		sub.w	$C(a1),d1
0001713A 6C00                       		bge.s	loc_16844
0001713C 4441                       		neg.w	d1
0001713E 4443                       		neg.w	d3
00017140                            
00017140                            loc_16844:
00017140 B240                       		cmp.w	d0,d1
00017142 6500                       		bcs.s	loc_1687A
00017144 7200                       		moveq	#0,d1
00017146 3228 0038                  		move.w	$38(a0),d1
0001714A 9269 000C                  		sub.w	$C(a1),d1
0001714E 4841                       		swap	d1
00017150 83C3                       		divs.w	d3,d1
00017152 7000                       		moveq	#0,d0
00017154 3028 0036                  		move.w	$36(a0),d0
00017158 9069 0008                  		sub.w	8(a1),d0
0001715C 6700                       		beq.s	loc_16866
0001715E 4840                       		swap	d0
00017160 81C1                       		divs.w	d1,d0
00017162                            
00017162                            loc_16866:
00017162 3340 0010                  		move.w	d0,$10(a1)
00017166 3343 0012                  		move.w	d3,$12(a1)
0001716A 4A41                       		tst.w	d1
0001716C 6A00                       		bpl.s	loc_16874
0001716E 4441                       		neg.w	d1
00017170                            
00017170                            loc_16874:
00017170 3141 002E                  		move.w	d1,$2E(a0)
00017174 4E75                       		rts	
00017176                            ; ===========================================================================
00017176                            
00017176                            loc_1687A:
00017176 7000                       		moveq	#0,d0
00017178 3028 0036                  		move.w	$36(a0),d0
0001717C 9069 0008                  		sub.w	8(a1),d0
00017180 4840                       		swap	d0
00017182 81C2                       		divs.w	d2,d0
00017184 7200                       		moveq	#0,d1
00017186 3228 0038                  		move.w	$38(a0),d1
0001718A 9269 000C                  		sub.w	$C(a1),d1
0001718E 6700                       		beq.s	loc_16898
00017190 4841                       		swap	d1
00017192 83C0                       		divs.w	d0,d1
00017194                            
00017194                            loc_16898:
00017194 3341 0012                  		move.w	d1,$12(a1)
00017198 3342 0010                  		move.w	d2,$10(a1)
0001719C 4A40                       		tst.w	d0
0001719E 6A00                       		bpl.s	loc_168A6
000171A0 4440                       		neg.w	d0
000171A2                            
000171A2                            loc_168A6:
000171A2 3140 002E                  		move.w	d0,$2E(a0)
000171A6 4E75                       		rts	
000171A8                            ; End of function sub_1681C
000171A8                            
000171A8                            ; ===========================================================================
000171A8 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000171AE 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000171B4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000171B8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000171BE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000171C4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000171CA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000171D0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000171D6 0884 0298 0894             		dc.w $884, $298, $894
000171DC 0270 0894 0190             		dc.w $270, $894, $190
000171E2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000171E8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000171EE 1184 0498 1158             		dc.w $1184, $498, $1158
000171F4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000171FA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017200 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017206 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001720C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017212 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017218 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001721E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017224 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001722A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017230                            ; ===========================================================================
00017230                            ; ---------------------------------------------------------------------------
00017230                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017230                            ; ---------------------------------------------------------------------------
00017230                            
00017230                            Obj78:					; XREF: Obj_Index
00017230 7000                       		moveq	#0,d0
00017232 1028 0024                  		move.b	$24(a0),d0
00017236 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001723A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001723E                            ; ===========================================================================
0001723E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017240 0000                       		dc.w Obj78_Action-Obj78_Index
00017242 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017244 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017246 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017248 0000                       		dc.w Obj78_Delete-Obj78_Index
0001724A 0000                       		dc.w loc_16CC0-Obj78_Index
0001724C                            ; ===========================================================================
0001724C                            
0001724C                            locret_16950:
0001724C 4E75                       		rts	
0001724E                            ; ===========================================================================
0001724E                            
0001724E                            Obj78_Main:				; XREF: Obj78_Index
0001724E 117C 0007 0016             		move.b	#7,$16(a0)
00017254 117C 0008 0017             		move.b	#8,$17(a0)
0001725A 4EB9 0000 DDAC             		jsr	ObjectFall
00017260 4EBA E4A6                  		jsr	ObjHitFloor
00017264 4A41                       		tst.w	d1
00017266 6AE4                       		bpl.s	locret_16950
00017268 D368 000C                  		add.w	d1,$C(a0)
0001726C 4268 0012                  		clr.w	$12(a0)
00017270 5428 0024                  		addq.b	#2,$24(a0)
00017274 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001727C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017282 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017288 6700                       		beq.s	loc_16996
0001728A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017290                            
00017290                            loc_16996:
00017290 0228 0003 0001             		andi.b	#3,1(a0)
00017296 0028 0004 0001             		ori.b	#4,1(a0)
0001729C 1168 0001 0022             		move.b	1(a0),$22(a0)
000172A2 117C 0004 0018             		move.b	#4,$18(a0)
000172A8 117C 0008 0019             		move.b	#8,$19(a0)
000172AE 117C 000B 0020             		move.b	#$B,$20(a0)
000172B4 3428 0008                  		move.w	8(a0),d2
000172B8 7A0C                       		moveq	#$C,d5
000172BA 0828 0000 0022             		btst	#0,$22(a0)
000172C0 6700                       		beq.s	loc_169CA
000172C2 4445                       		neg.w	d5
000172C4                            
000172C4                            loc_169CA:
000172C4 1C3C 0004                  		move.b	#4,d6
000172C8 7600                       		moveq	#0,d3
000172CA 7804                       		moveq	#4,d4
000172CC 2448                       		movea.l	a0,a2
000172CE 7202                       		moveq	#2,d1
000172D0                            
000172D0                            Obj78_LoadBody:
000172D0 4EB9 0000 E29A             		jsr	SingleObjLoad2
000172D6 6600                       		bne.s	Obj78_QuitLoad
000172D8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000172DC 1346 0024                  		move.b	d6,$24(a1)
000172E0 5406                       		addq.b	#2,d6
000172E2 2368 0004 0004             		move.l	4(a0),4(a1)
000172E8 3368 0002 0002             		move.w	2(a0),2(a1)
000172EE 137C 0005 0018             		move.b	#5,$18(a1)
000172F4 137C 0008 0019             		move.b	#8,$19(a1)
000172FA 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017300 D445                       		add.w	d5,d2
00017302 3342 0008                  		move.w	d2,8(a1)
00017306 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001730C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017312 1368 0022 0001             		move.b	$22(a0),1(a1)
00017318 137C 0008 001A             		move.b	#8,$1A(a1)
0001731E 234A 003C                  		move.l	a2,$3C(a1)
00017322 1344 003C                  		move.b	d4,$3C(a1)
00017326 5804                       		addq.b	#4,d4
00017328 2449                       		movea.l	a1,a2
0001732A                            
0001732A                            Obj78_QuitLoad:
0001732A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001732E                            
0001732E 117C 0007 002A             		move.b	#7,$2A(a0)
00017334 4228 003C                  		clr.b	$3C(a0)
00017338                            
00017338                            Obj78_Action:				; XREF: Obj78_Index
00017338 4A28 0022                  		tst.b	$22(a0)
0001733C 6B00 0000                  		bmi.w	loc_16C96
00017340 7000                       		moveq	#0,d0
00017342 1028 0025                  		move.b	$25(a0),d0
00017346 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001734A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001734E 1228 002B                  		move.b	$2B(a0),d1
00017352 6A00                       		bpl.s	Obj78_Display
00017354 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001735A 1028 0026                  		move.b	$26(a0),d0
0001735E 0240 007F                  		andi.w	#$7F,d0
00017362 5828 0026                  		addq.b	#4,$26(a0)
00017366 1031 0000                  		move.b	(a1,d0.w),d0
0001736A 6A00                       		bpl.s	Obj78_AniHead
0001736C 08A8 0007 002B             		bclr	#7,$2B(a0)
00017372 6000                       		bra.s	Obj78_Display
00017374                            ; ===========================================================================
00017374                            
00017374                            Obj78_AniHead:
00017374 0201 0010                  		andi.b	#$10,d1
00017378 D001                       		add.b	d1,d0
0001737A 1140 001A                  		move.b	d0,$1A(a0)
0001737E                            
0001737E                            Obj78_Display:
0001737E 3028 0008                  		move.w	8(a0),d0
00017382 0240 FF80                  		andi.w	#$FF80,d0
00017386 3238 F700                  		move.w	($FFFFF700).w,d1
0001738A 0441 0080                  		subi.w	#$80,d1
0001738E 0241 FF80                  		andi.w	#$FF80,d1
00017392 9041                       		sub.w	d1,d0
00017394 0C40 0280                  		cmpi.w	#$280,d0
00017398 6200 0000                  		bhi.w	Obj78_ChkGone
0001739C 4EF9 0000 DDFE             		jmp	DisplaySprite
000173A2                            ; ===========================================================================
000173A2                            
000173A2                            Obj78_ChkGone:
000173A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000173A6 7000                       		moveq	#0,d0
000173A8 1028 0023                  		move.b	$23(a0),d0
000173AC 6700                       		beq.s	loc_16ABC
000173AE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000173B4                            
000173B4                            loc_16ABC:
000173B4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000173BA 4E75                       		rts	
000173BC                            ; ===========================================================================
000173BC                            
000173BC                            Obj78_Delete:				; XREF: Obj78_Index
000173BC 4EF9 0000 DE3A             		jmp	DeleteObject
000173C2                            ; ===========================================================================
000173C2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000173C4 0000                       		dc.w loc_16B02-Obj78_Index2
000173C6                            ; ===========================================================================
000173C6                            
000173C6                            Obj78_Move:				; XREF: Obj78_Index2
000173C6 5328 002A                  		subq.b	#1,$2A(a0)
000173CA 6B00                       		bmi.s	Obj78_Move2
000173CC 4E75                       		rts	
000173CE                            ; ===========================================================================
000173CE                            
000173CE                            Obj78_Move2:
000173CE 5428 0025                  		addq.b	#2,$25(a0)
000173D2 117C 0010 002A             		move.b	#$10,$2A(a0)
000173D8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000173DE 317C 0040 0014             		move.w	#$40,$14(a0)
000173E4 0868 0004 002B             		bchg	#4,$2B(a0)
000173EA 6600                       		bne.s	loc_16AFC
000173EC 4268 0010                  		clr.w	$10(a0)
000173F0 4468 0014                  		neg.w	$14(a0)
000173F4                            
000173F4                            loc_16AFC:
000173F4 08E8 0007 002B             		bset	#7,$2B(a0)
000173FA                            
000173FA                            loc_16B02:				; XREF: Obj78_Index2
000173FA 5328 002A                  		subq.b	#1,$2A(a0)
000173FE 6B00                       		bmi.s	loc_16B5E
00017400 2F28 0008                  		move.l	8(a0),-(sp)
00017404 2428 0008                  		move.l	8(a0),d2
00017408 3028 0010                  		move.w	$10(a0),d0
0001740C 0828 0000 0022             		btst	#0,$22(a0)
00017412 6700                       		beq.s	loc_16B1E
00017414 4440                       		neg.w	d0
00017416                            
00017416                            loc_16B1E:
00017416 48C0                       		ext.l	d0
00017418 E180                       		asl.l	#8,d0
0001741A D480                       		add.l	d0,d2
0001741C 2142 0008                  		move.l	d2,8(a0)
00017420 4EBA E2E6                  		jsr	ObjHitFloor
00017424 241F                       		move.l	(sp)+,d2
00017426 0C41 FFF8                  		cmpi.w	#-8,d1
0001742A 6D00                       		blt.s	loc_16B70
0001742C 0C41 000C                  		cmpi.w	#$C,d1
00017430 6C00                       		bge.s	loc_16B70
00017432 D368 000C                  		add.w	d1,$C(a0)
00017436 4842                       		swap	d2
00017438 B468 0008                  		cmp.w	8(a0),d2
0001743C 6700                       		beq.s	locret_16B5C
0001743E 7000                       		moveq	#0,d0
00017440 1028 003C                  		move.b	$3C(a0),d0
00017444 5228 003C                  		addq.b	#1,$3C(a0)
00017448 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001744E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017452                            
00017452                            locret_16B5C:
00017452 4E75                       		rts	
00017454                            ; ===========================================================================
00017454                            
00017454                            loc_16B5E:
00017454 5528 0025                  		subq.b	#2,$25(a0)
00017458 117C 0007 002A             		move.b	#7,$2A(a0)
0001745E 317C 0000 0010             		move.w	#0,$10(a0)
00017464 4E75                       		rts	
00017466                            ; ===========================================================================
00017466                            
00017466                            loc_16B70:
00017466 2142 0008                  		move.l	d2,8(a0)
0001746A 0868 0000 0022             		bchg	#0,$22(a0)
00017470 1168 0022 0001             		move.b	$22(a0),1(a0)
00017476 7000                       		moveq	#0,d0
00017478 1028 003C                  		move.b	$3C(a0),d0
0001747C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017482 5228 003C                  		addq.b	#1,$3C(a0)
00017486 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001748C 4E75                       		rts	
0001748E                            ; ===========================================================================
0001748E                            
0001748E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001748E 2268 003C                  		movea.l	$3C(a0),a1
00017492 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017498 6A00                       		bpl.s	Obj78_BodySeg1
0001749A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000174A0 1028 0026                  		move.b	$26(a0),d0
000174A4 0240 007F                  		andi.w	#$7F,d0
000174A8 5828 0026                  		addq.b	#4,$26(a0)
000174AC 4A31 0004                  		tst.b	4(a1,d0.w)
000174B0 6A00                       		bpl.s	Obj78_AniBody
000174B2 5828 0026                  		addq.b	#4,$26(a0)
000174B6                            
000174B6                            Obj78_AniBody:
000174B6 1031 0000                  		move.b	(a1,d0.w),d0
000174BA 5000                       		addq.b	#8,d0
000174BC 1140 001A                  		move.b	d0,$1A(a0)
000174C0                            
000174C0                            Obj78_BodySeg1:				; XREF: Obj78_Index
000174C0 2268 003C                  		movea.l	$3C(a0),a1
000174C4 4A28 0022                  		tst.b	$22(a0)
000174C8 6B00 0000                  		bmi.w	loc_16C90
000174CC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000174D2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000174D8 6700 0000                  		beq.w	loc_16C64
000174DC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000174E2 3029 0010                  		move.w	$10(a1),d0
000174E6 D069 0014                  		add.w	$14(a1),d0
000174EA 3140 0010                  		move.w	d0,$10(a0)
000174EE 2428 0008                  		move.l	8(a0),d2
000174F2 2602                       		move.l	d2,d3
000174F4 3028 0010                  		move.w	$10(a0),d0
000174F8 0828 0000 0022             		btst	#0,$22(a0)
000174FE 6700                       		beq.s	loc_16C0C
00017500 4440                       		neg.w	d0
00017502                            
00017502                            loc_16C0C:
00017502 48C0                       		ext.l	d0
00017504 E180                       		asl.l	#8,d0
00017506 D480                       		add.l	d0,d2
00017508 2142 0008                  		move.l	d2,8(a0)
0001750C 4843                       		swap	d3
0001750E B668 0008                  		cmp.w	8(a0),d3
00017512 6700                       		beq.s	loc_16C64
00017514 7000                       		moveq	#0,d0
00017516 1028 003C                  		move.b	$3C(a0),d0
0001751A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001751E 0C01 0080                  		cmpi.b	#-$80,d1
00017522 6600                       		bne.s	loc_16C50
00017524 4843                       		swap	d3
00017526 2143 0008                  		move.l	d3,8(a0)
0001752A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001752E 0868 0000 0022             		bchg	#0,$22(a0)
00017534 1168 0022 0001             		move.b	$22(a0),1(a0)
0001753A 5228 003C                  		addq.b	#1,$3C(a0)
0001753E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017544 6000                       		bra.s	loc_16C64
00017546                            ; ===========================================================================
00017546                            
00017546                            loc_16C50:
00017546 4881                       		ext.w	d1
00017548 D368 000C                  		add.w	d1,$C(a0)
0001754C 5228 003C                  		addq.b	#1,$3C(a0)
00017550 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017556 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001755A                            
0001755A                            loc_16C64:
0001755A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017560 6700                       		beq.s	loc_16C90
00017562 0C11 0027                  		cmpi.b	#$27,0(a1)
00017566 6700                       		beq.s	loc_16C7C
00017568 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001756E 6600                       		bne.s	loc_16C82
00017570                            
00017570                            loc_16C7C:
00017570 117C 000A 0024             		move.b	#$A,$24(a0)
00017576                            
00017576                            loc_16C82:
00017576 4EF9 0000 DDFE             		jmp	DisplaySprite
0001757C                            
0001757C                            ; ===========================================================================
0001757C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017584                            ; ===========================================================================
00017584                            
00017584                            loc_16C90:
00017584 08E9 0007 0022             		bset	#7,$22(a1)
0001758A                            
0001758A                            loc_16C96:
0001758A 7000                       		moveq	#0,d0
0001758C 1028 0024                  		move.b	$24(a0),d0
00017590 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017594 0828 0000 0022             		btst	#0,$22(a0)
0001759A 6700                       		beq.s	loc_16CAA
0001759C 4440                       		neg.w	d0
0001759E                            
0001759E                            loc_16CAA:
0001759E 3140 0010                  		move.w	d0,$10(a0)
000175A2 317C FC00 0012             		move.w	#-$400,$12(a0)
000175A8 117C 000C 0024             		move.b	#$C,$24(a0)
000175AE 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000175B4                            
000175B4                            loc_16CC0:				; XREF: Obj78_Index
000175B4 4EB9 0000 DDAC             		jsr	ObjectFall
000175BA 4A68 0012                  		tst.w	$12(a0)
000175BE 6B00                       		bmi.s	loc_16CE0
000175C0 4EBA E146                  		jsr	ObjHitFloor
000175C4 4A41                       		tst.w	d1
000175C6 6A00                       		bpl.s	loc_16CE0
000175C8 D368 000C                  		add.w	d1,$C(a0)
000175CC 317C FC00 0012             		move.w	#-$400,$12(a0)
000175D2                            
000175D2                            loc_16CE0:
000175D2 4A28 0001                  		tst.b	1(a0)
000175D6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000175DA 4EF9 0000 DDFE             		jmp	DisplaySprite
000175E0                            ; ===========================================================================
000175E0                            Ani_obj78:
000175E0                            	include "_anim\obj78.asm"
000175E0                            ; ---------------------------------------------------------------------------
000175E0                            ; Animation script - Caterkiller enemy (uses non-standard format)
000175E0                            ; ---------------------------------------------------------------------------
000175E0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000175F0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017600 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017610 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017620 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017630 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017640 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017650 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017660                            	even
00017660                            	even
00017660                            
00017660                            ; ---------------------------------------------------------------------------
00017660                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017660                            ; ---------------------------------------------------------------------------
00017660                            Map_obj78:
00017660                            	include "_maps\obj78.asm"
00017660                            ; ---------------------------------------------------------------------------
00017660                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017660                            ; ---------------------------------------------------------------------------
00017660 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017664 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017668 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001766C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017670 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017674 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017678 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001767C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017680 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017684 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017688 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001768C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017690 01                         byte_16D9E:	dc.b 1
00017691 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017696 01                         byte_16DA4:	dc.b 1
00017697 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001769C 01                         byte_16DAA:	dc.b 1
0001769D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000176A2 01                         byte_16DB0:	dc.b 1
000176A3 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000176A8 01                         byte_16DB6:	dc.b 1
000176A9 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000176AE 01                         byte_16DBC:	dc.b 1
000176AF ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000176B4 01                         byte_16DC2:	dc.b 1
000176B5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000176BA 01                         byte_16DC8:	dc.b 1
000176BB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000176C0 01                         byte_16DCE:	dc.b 1
000176C1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000176C6 01                         byte_16DD4:	dc.b 1
000176C7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000176CC 01                         byte_16DDA:	dc.b 1
000176CD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000176D2 01                         byte_16DE0:	dc.b 1
000176D3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000176D8 01                         byte_16DE6:	dc.b 1
000176D9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000176DE 01                         byte_16DEC:	dc.b 1
000176DF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000176E4 01                         byte_16DF2:	dc.b 1
000176E5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000176EA 01                         byte_16DF8:	dc.b 1
000176EB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000176F0 01                         byte_16DFE:	dc.b 1
000176F1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000176F6 01                         byte_16E04:	dc.b 1
000176F7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000176FC 01                         byte_16E0A:	dc.b 1
000176FD F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017702 01                         byte_16E10:	dc.b 1
00017703 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017708 01                         byte_16E16:	dc.b 1
00017709 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001770E 01                         byte_16E1C:	dc.b 1
0001770F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017714 01                         byte_16E22:	dc.b 1
00017715 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001771A 01                         byte_16E28:	dc.b 1
0001771B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017720                            		even
00017720                            		even
00017720                            
00017720                            ; ===========================================================================
00017720                            ; ---------------------------------------------------------------------------
00017720                            ; Object 79 - lamppost
00017720                            ; ---------------------------------------------------------------------------
00017720                            
00017720                            Obj79:					; XREF: Obj_Index
00017720 7000                       		moveq	#0,d0
00017722 1028 0024                  		move.b	$24(a0),d0
00017726 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001772A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001772E 4EFA 8776                  		jmp	MarkObjGone
00017732                            ; ===========================================================================
00017732 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017734 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017736 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017738 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001773A                            ; ===========================================================================
0001773A                            
0001773A                            Obj79_Main:				; XREF: Obj79_Index
0001773A 5428 0024                  		addq.b	#2,$24(a0)
0001773E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017746 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001774C 117C 0004 0001             		move.b	#4,1(a0)
00017752 117C 0008 0019             		move.b	#8,$19(a0)
00017758 117C 0005 0018             		move.b	#5,$18(a0)
0001775E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017762 7000                       		moveq	#0,d0
00017764 1028 0023                  		move.b	$23(a0),d0
00017768 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001776E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017774 6600                       		bne.s	Obj79_RedLamp
00017776 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001777A 0201 007F                  		andi.b	#$7F,d1
0001777E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017782 0202 007F                  		andi.b	#$7F,d2
00017786 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017788 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001778A                            
0001778A                            Obj79_RedLamp:
0001778A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017790 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017796 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001779C 4E75                       		rts	
0001779E                            ; ===========================================================================
0001779E                            
0001779E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001779E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000177A2 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000177A6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000177AA 6B00 0000                  		bmi.w	locret_16F90
000177AE 1238 FE30                  		move.b	($FFFFFE30).w,d1
000177B2 0201 007F                  		andi.b	#$7F,d1
000177B6 1428 0028                  		move.b	$28(a0),d2
000177BA 0202 007F                  		andi.b	#$7F,d2
000177BE B202                       		cmp.b	d2,d1
000177C0 6500                       		bcs.s	Obj79_HitLamp
000177C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177C6 7000                       		moveq	#0,d0
000177C8 1028 0023                  		move.b	$23(a0),d0
000177CC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177D2 117C 0004 0024             		move.b	#4,$24(a0)
000177D8 117C 0003 001A             		move.b	#3,$1A(a0)
000177DE 6000 0000                  		bra.w	locret_16F90
000177E2                            ; ===========================================================================
000177E2                            
000177E2                            Obj79_HitLamp:
000177E2 3038 D008                  		move.w	($FFFFD008).w,d0
000177E6 9068 0008                  		sub.w	8(a0),d0
000177EA 5040                       		addq.w	#8,d0
000177EC 0C40 0010                  		cmpi.w	#$10,d0
000177F0 6400 0000                  		bcc.w	locret_16F90
000177F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000177F8 9068 000C                  		sub.w	$C(a0),d0
000177FC 0640 0040                  		addi.w	#$40,d0
00017800 0C40 0068                  		cmpi.w	#$68,d0
00017804 6400                       		bcc.s	locret_16F90
00017806 303C 00A1                  		move.w	#$A1,d0
0001780A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017810 5428 0024                  		addq.b	#2,$24(a0)
00017814 4EB9 0000 E284             		jsr	SingleObjLoad
0001781A 6600                       		bne.s	loc_16F76
0001781C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017820 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017826 3368 0008 0030             		move.w	8(a0),$30(a1)
0001782C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017832 0469 0018 0032             		subi.w	#$18,$32(a1)
00017838 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017840 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017846 137C 0004 0001             		move.b	#4,1(a1)
0001784C 137C 0008 0019             		move.b	#8,$19(a1)
00017852 137C 0004 0018             		move.b	#4,$18(a1)
00017858 137C 0002 001A             		move.b	#2,$1A(a1)
0001785E 337C 0020 0036             		move.w	#$20,$36(a1)
00017864                            
00017864                            loc_16F76:
00017864 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001786A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001786E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017872 7000                       		moveq	#0,d0
00017874 1028 0023                  		move.b	$23(a0),d0
00017878 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001787E                            
0001787E                            locret_16F90:
0001787E 4E75                       		rts	
00017880                            ; ===========================================================================
00017880                            
00017880                            Obj79_AfterHit:				; XREF: Obj79_Index
00017880 4E75                       		rts	
00017882                            ; ===========================================================================
00017882                            
00017882                            Obj79_Twirl:				; XREF: Obj79_Index
00017882 5368 0036                  		subq.w	#1,$36(a0)
00017886 6A00                       		bpl.s	loc_16FA0
00017888 117C 0004 0024             		move.b	#4,$24(a0)
0001788E                            
0001788E                            loc_16FA0:
0001788E 1028 0026                  		move.b	$26(a0),d0
00017892 0428 0010 0026             		subi.b	#$10,$26(a0)
00017898 0400 0040                  		subi.b	#$40,d0
0001789C 4EB9 0000 2CEC             		jsr	(CalcSine).l
000178A2 C3FC 0C00                  		muls.w	#$C00,d1
000178A6 4841                       		swap	d1
000178A8 D268 0030                  		add.w	$30(a0),d1
000178AC 3141 0008                  		move.w	d1,8(a0)
000178B0 C1FC 0C00                  		muls.w	#$C00,d0
000178B4 4840                       		swap	d0
000178B6 D068 0032                  		add.w	$32(a0),d0
000178BA 3140 000C                  		move.w	d0,$C(a0)
000178BE 4E75                       		rts	
000178C0                            ; ===========================================================================
000178C0                            ; ---------------------------------------------------------------------------
000178C0                            ; Subroutine to	store information when you hit a lamppost
000178C0                            ; ---------------------------------------------------------------------------
000178C0                            
000178C0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000178C0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000178C6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000178CC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000178D2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000178D8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000178DE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000178E4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000178EA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000178F0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000178F6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000178FC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017902 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017908 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001790E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017914 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001791A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017920 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017926 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001792C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017932 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017938 4E75                       		rts	
0001793A                            
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            
0001793A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001793A                            
0001793A                            
0001793A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001793A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017940 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017946 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001794C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017952 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017958 4278 FE20                  		clr.w	($FFFFFE20).w
0001795C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017960 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017966 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001796C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017970 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017976 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001797C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017982 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017988 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001798E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017994 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001799A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000179A0 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000179A6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000179AC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000179B2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000179B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000179BE 6600                       		bne.s	loc_170E4
000179C0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000179C6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000179CC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000179D2                            
000179D2                            loc_170E4:
000179D2 4A38 FE30                  		tst.b	($FFFFFE30).w
000179D6 6A00                       		bpl.s	locret_170F6
000179D8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000179DC 0440 00A0                  		subi.w	#$A0,d0
000179E0 31C0 F728                  		move.w	d0,($FFFFF728).w
000179E4                            
000179E4                            locret_170F6:
000179E4 4E75                       		rts	
000179E6                            ; End of function Obj79_LoadInfo
000179E6                            
000179E6                            ; ===========================================================================
000179E6                            ; ---------------------------------------------------------------------------
000179E6                            ; Sprite mappings - lamppost
000179E6                            ; ---------------------------------------------------------------------------
000179E6                            Map_obj79:
000179E6                            	include "_maps\obj79.asm"
000179E6                            ; ---------------------------------------------------------------------------
000179E6                            ; Sprite mappings - lamppost
000179E6                            ; ---------------------------------------------------------------------------
000179E6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000179EA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000179EE 06                         byte_17100:	dc.b 6
000179EF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179F4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179F9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179FE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A03 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A08 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A0D 04                         byte_1711F:	dc.b 4
00017A0E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A13 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A18 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A1D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A22 02                         byte_17134:	dc.b 2
00017A23 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017A28 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017A2D 06                         byte_1713F:	dc.b 6
00017A2E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A33 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A38 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A3D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A42 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017A47 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017A4C                            		even
00017A4C                            		even
00017A4C                            
00017A4C                            ; ===========================================================================
00017A4C                            ; ---------------------------------------------------------------------------
00017A4C                            ; Object 7D - hidden points at the end of a level
00017A4C                            ; ---------------------------------------------------------------------------
00017A4C                            
00017A4C                            Obj7D:					; XREF: Obj_Index
00017A4C 7000                       		moveq	#0,d0
00017A4E 1028 0024                  		move.b	$24(a0),d0
00017A52 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017A56 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017A5A                            ; ===========================================================================
00017A5A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017A5C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017A5E                            ; ===========================================================================
00017A5E                            
00017A5E                            Obj7D_Main:				; XREF: Obj7D_Index
00017A5E 7410                       		moveq	#$10,d2
00017A60 3602                       		move.w	d2,d3
00017A62 D643                       		add.w	d3,d3
00017A64 43F8 D000                  		lea	($FFFFD000).w,a1
00017A68 3029 0008                  		move.w	8(a1),d0
00017A6C 9068 0008                  		sub.w	8(a0),d0
00017A70 D042                       		add.w	d2,d0
00017A72 B043                       		cmp.w	d3,d0
00017A74 6400                       		bcc.s	Obj7D_ChkDel
00017A76 3229 000C                  		move.w	$C(a1),d1
00017A7A 9268 000C                  		sub.w	$C(a0),d1
00017A7E D242                       		add.w	d2,d1
00017A80 B243                       		cmp.w	d3,d1
00017A82 6400                       		bcc.s	Obj7D_ChkDel
00017A84 4A78 FE08                  		tst.w	($FFFFFE08).w
00017A88 6600                       		bne.s	Obj7D_ChkDel
00017A8A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017A8E 6600                       		bne.s	Obj7D_ChkDel
00017A90 5428 0024                  		addq.b	#2,$24(a0)
00017A94 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017A9C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017AA2 0028 0004 0001             		ori.b	#4,1(a0)
00017AA8 117C 0000 0018             		move.b	#0,$18(a0)
00017AAE 117C 0010 0019             		move.b	#$10,$19(a0)
00017AB4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017ABA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017AC0 303C 00C9                  		move.w	#$C9,d0
00017AC4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017ACA 7000                       		moveq	#0,d0
00017ACC 1028 0028                  		move.b	$28(a0),d0
00017AD0 D040                       		add.w	d0,d0
00017AD2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017AD6 4EB9 0000 0000             		jsr	AddPoints
00017ADC                            
00017ADC                            Obj7D_ChkDel:
00017ADC 3028 0008                  		move.w	8(a0),d0
00017AE0 0240 FF80                  		andi.w	#$FF80,d0
00017AE4 3238 F700                  		move.w	($FFFFF700).w,d1
00017AE8 0441 0080                  		subi.w	#$80,d1
00017AEC 0241 FF80                  		andi.w	#$FF80,d1
00017AF0 9041                       		sub.w	d1,d0
00017AF2 0C40 0280                  		cmpi.w	#$280,d0
00017AF6 6200                       		bhi.s	Obj7D_Delete
00017AF8 4E75                       		rts	
00017AFA                            ; ===========================================================================
00017AFA                            
00017AFA                            Obj7D_Delete:
00017AFA 4EF9 0000 DE3A             		jmp	DeleteObject
00017B00                            ; ===========================================================================
00017B00 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B02 03E8                       		dc.w 1000
00017B04 0064                       		dc.w 100
00017B06 0001                       		dc.w 1
00017B08                            ; ===========================================================================
00017B08                            
00017B08                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B0C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B0E 3028 0008                  		move.w	8(a0),d0
00017B12 0240 FF80                  		andi.w	#-$80,d0
00017B16 3238 F700                  		move.w	($FFFFF700).w,d1
00017B1A 0441 0080                  		subi.w	#$80,d1
00017B1E 0241 FF80                  		andi.w	#-$80,d1
00017B22 9041                       		sub.w	d1,d0
00017B24 0C40 0280                  		cmpi.w	#$280,d0
00017B28 6200                       		bhi.s	Obj7D_Delete2
00017B2A 4EF9 0000 DDFE             		jmp	DisplaySprite
00017B30                            ; ===========================================================================
00017B30                            
00017B30                            Obj7D_Delete2:
00017B30 4EF9 0000 DE3A             		jmp	DeleteObject
00017B36                            ; ===========================================================================
00017B36                            ; ---------------------------------------------------------------------------
00017B36                            ; Sprite mappings - hidden points at the end of	a level
00017B36                            ; ---------------------------------------------------------------------------
00017B36                            Map_obj7D:
00017B36                            	include "_maps\obj7D.asm"
00017B36                            ; ---------------------------------------------------------------------------
00017B36                            ; Sprite mappings - hidden points at the end of	a level
00017B36                            ; ---------------------------------------------------------------------------
00017B36 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017B3A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017B3E 00                         byte_17250:	dc.b 0
00017B3F 01                         byte_17251:	dc.b 1
00017B40 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017B45 01                         byte_17257:	dc.b 1
00017B46 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017B4B 01                         byte_1725D:	dc.b 1
00017B4C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017B52 00                         		even
00017B52 00                         		even
00017B52                            
00017B52                            ; ===========================================================================
00017B52                            ; ---------------------------------------------------------------------------
00017B52                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017B52                            ; ---------------------------------------------------------------------------
00017B52                            
00017B52                            Obj8A:					; XREF: Obj_Index
00017B52 7000                       		moveq	#0,d0
00017B54 1028 0024                  		move.b	$24(a0),d0
00017B58 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017B5C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017B60                            ; ===========================================================================
00017B60 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017B62 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017B64                            ; ===========================================================================
00017B64                            
00017B64                            Obj8A_Main:				; XREF: Obj8A_Index
00017B64 5428 0024                  		addq.b	#2,$24(a0)
00017B68 317C 0120 0008             		move.w	#$120,8(a0)
00017B6E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017B74 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017B7C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017B82 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017B86 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017B8A 117C 0000 0001             		move.b	#0,1(a0)
00017B90 117C 0000 0018             		move.b	#0,$18(a0)
00017B96 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017B9C 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B9E 317C 00A6 0002             		move.w	#$A6,2(a0)
00017BA4 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017BAA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017BAE 6700                       		beq.s	Obj8A_Display	; if not, branch
00017BB0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017BB6 6600                       		bne.s	Obj8A_Display	; if not, branch
00017BB8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017BBE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017BC4 4EF9 0000 DE3A             		jmp	DeleteObject
00017BCA                            ; ===========================================================================
00017BCA                            
00017BCA                            Obj8A_Display:				; XREF: Obj8A_Index
00017BCA 4EF9 0000 DDFE             		jmp	DisplaySprite
00017BD0                            ; ===========================================================================
00017BD0                            ; ---------------------------------------------------------------------------
00017BD0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017BD0                            ; ---------------------------------------------------------------------------
00017BD0                            Map_obj8A:
00017BD0                            	include "_maps\obj8A.asm"
00017BD0                            ; ================================================================================
00017BD0                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017BD0                            ; ================================================================================
00017BD0                            
00017BD0                            DATAV02AM357W0A:
00017BD0 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017BD4 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017BD8 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017BDC 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017BE0 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017BE4 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017BE6 0E                         DATAV02AM357W0A_0: dc.b $E
00017BE7 F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017BEC F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017BF1 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017BF6 F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017BFB F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017C00 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017C05 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017C0A F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017C0F F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017C14 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017C19 F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017C1E F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017C23 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017C28 F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017C2D 10                         DATAV02AM357W0A_1: dc.b $10
00017C2E D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017C33 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C38 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C3D D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C42 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017C47 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C4C D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017C51 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017C56 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017C5B 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017C60 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017C65 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017C6A 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017C6F 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017C74 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017C79 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017C7E 0A                         DATAV02AM357W0A_2: dc.b $A
00017C7F D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017C84 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017C89 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017C8E D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017C93 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017C98 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017C9D D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017CA2 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017CA7 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017CAC 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017CB1 18                         DATAV02AM357W0A_3: dc.b $18
00017CB2 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017CB7 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017CBC D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017CC1 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017CC6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017CCB D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017CD0 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017CD5 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017CDA D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017CDF D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017CE4 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017CE9 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017CEE D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017CF3 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017CF8 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017CFD 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017D02 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017D07 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017D0C 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017D11 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017D16 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D1B 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D20 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D25 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D2A 14                         DATAV02AM357W0A_4: dc.b $14
00017D2B D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D30 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017D35 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D3A D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D3F D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017D44 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017D49 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017D4E 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017D53 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017D58 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017D5D 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017D62 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017D67 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017D6C 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017D71 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017D76 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017D7B 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017D80 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017D85 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017D8A 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017D8F 1A                         DATAV02AM357W0A_5: dc.b $1A
00017D90 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017D95 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017D9A D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017D9F D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017DA4 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017DA9 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017DAE D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017DB3 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017DB8 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017DBD D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017DC2 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017DC7 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017DCC 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017DD1 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017DD6 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017DDB 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017DE0 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017DE5 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017DEA 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017DEF 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017DF4 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017DF9 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017DFE 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017E03 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017E08 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017E0D 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017E12 17                         DATAV02AM357W0A_6: dc.b $17
00017E13 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017E18 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E1D D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E22 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E27 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E2C D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E31 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E36 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E3B D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E40 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017E45 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017E4A D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017E4F 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E54 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E59 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017E5E 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017E63 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017E68 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017E6D 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017E72 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017E77 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017E7C 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017E81 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017E86 1F                         DATAV02AM357W0A_7: dc.b $1F
00017E87 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017E8C D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017E91 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017E96 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017E9B D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017EA0 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EA5 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017EAA D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017EAF D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017EB4 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017EB9 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017EBE D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017EC3 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017EC8 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017ECD 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017ED2 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017ED7 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EDC 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017EE1 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017EE6 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017EEB 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017EF0 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017EF5 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017EFA 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017EFF 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017F04 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017F09 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017F0E 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017F13 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017F18 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F1D 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F22 0F                         DATAV02AM357W0A_8: dc.b $F
00017F23 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F28 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F2D F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017F32 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F37 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F3C F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F41 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017F46 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017F4B F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017F50 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017F55 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017F5A F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017F5F F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017F64 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017F69 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017F6E 08                         DATAV02AM357W0A_9: dc.b $8
00017F6F 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017F74 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017F79 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017F7E 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017F83 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017F88 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017F8D 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017F92 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017F97 20                         DATAV02AM357W0A_A: dc.b $20
00017F98 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017F9D ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017FA2 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017FA7 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017FAC ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017FB1 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017FB6 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017FBB FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017FC0 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017FC5 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017FCA FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017FCF FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017FD4 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017FD9 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017FDE 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017FE3 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017FE8 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017FED 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017FF2 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017FF7 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017FFC 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018001 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018006 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
0001800B 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018010 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018015 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
0001801A 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001801F 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018024 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018029 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001802E 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018033 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018038                            	even
00018038                            	even
00018038                            
00018038                            ; ===========================================================================
00018038                            ; ---------------------------------------------------------------------------
00018038                            ; Object 3D - matthew boss - modified by GK89
00018038                            ; ---------------------------------------------------------------------------
00018038                            
00018038                            Obj3D:					; XREF: Obj_Index
00018038 7000                       		moveq	#0,d0
0001803A 1028 0024                  		move.b	$24(a0),d0
0001803E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018042 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018046                            ; ===========================================================================
00018046 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018048 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001804A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001804C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001804E                            
0001804E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018050 0401                       		dc.b 4,	1
00018052 0607                       		dc.b 6,	7
00018054                            ; ===========================================================================
00018054                            
00018054                            Obj3D_Main:				; XREF: Obj3D_Index
00018054 45F9 0001 804E             		lea	(Obj3D_ObjData).l,a2
0001805A 2248                       		movea.l	a0,a1
0001805C 7202                       		moveq	#2,d1
0001805E 6000                       		bra.s	Obj3D_LoadBoss
00018060                            ; ===========================================================================
00018060                            
00018060                            Obj3D_Loop:
00018060 4EB9 0000 E29A             		jsr	SingleObjLoad2
00018066 6600                       		bne.s	loc_17772
00018068                            
00018068                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018068 135A 0024                  		move.b	(a2)+,$24(a1)
0001806C 12BC 003D                  		move.b	#$3D,0(a1)
00018070 3368 0008 0008             		move.w	8(a0),8(a1)
00018076 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001807C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018084 337C 0400 0002             		move.w	#$400,2(a1)
0001808A 137C 0004 0001             		move.b	#4,1(a1)
00018090 137C 0020 0019             		move.b	#$20,$19(a1)
00018096 137C 0003 0018             		move.b	#3,$18(a1)
0001809C 135A 001C                  		move.b	(a2)+,$1C(a1)
000180A0 2348 0034                  		move.l	a0,$34(a1)
000180A4 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000180A8                            
000180A8                            loc_17772:
000180A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000180AE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000180B4 117C 000F 0020             		move.b	#$F,$20(a0)
000180BA 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000180C0                            
000180C0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000180C0 7000                       		moveq	#0,d0
000180C2 1028 0025                  		move.b	$25(a0),d0
000180C6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000180CA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000180CE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180D4 4EB9 0000 AEBE             		jsr	AnimateSprite
000180DA 1028 0022                  		move.b	$22(a0),d0
000180DE 0200 0003                  		andi.b	#3,d0
000180E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180E8 8128 0001                  		or.b	d0,1(a0)
000180EC 4EF9 0000 DDFE             		jmp	DisplaySprite
000180F2                            ; ===========================================================================
000180F2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000180F4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000180F6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000180F8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000180FA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000180FC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000180FE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018100                            ; ===========================================================================
00018100                            
00018100                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018100 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018106 6100 0000                  		bsr.w	BossMove
0001810A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018110 6600                       		bne.s	loc_177E6
00018112 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018118 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001811C                            
0001811C                            loc_177E6:
0001811C 1028 003F                  		move.b	$3F(a0),d0
00018120 4EB9 0000 2CEC             		jsr	(CalcSine).l
00018126 EC40                       		asr.w	#6,d0
00018128 D068 0038                  		add.w	$38(a0),d0
0001812C 3140 000C                  		move.w	d0,$C(a0)
00018130 3168 0030 0008             		move.w	$30(a0),8(a0)
00018136 5428 003F                  		addq.b	#2,$3F(a0)
0001813A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018140 6400                       		bcc.s	locret_1784A
00018142 4A28 0022                  		tst.b	$22(a0)
00018146 6B00                       		bmi.s	loc_1784C
00018148 4A28 0020                  		tst.b	$20(a0)
0001814C 6600                       		bne.s	locret_1784A
0001814E 4A28 003E                  		tst.b	$3E(a0)
00018152 6600                       		bne.s	Obj3D_ShipFlash
00018154 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001815A 303C 00AC                  		move.w	#$AC,d0
0001815E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018164                            
00018164                            Obj3D_ShipFlash:
00018164 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018168 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001816A 4A51                       		tst.w	(a1)
0001816C 6600                       		bne.s	loc_1783C
0001816E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018172                            
00018172                            loc_1783C:
00018172 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018174 5328 003E                  		subq.b	#1,$3E(a0)
00018178 6600                       		bne.s	locret_1784A
0001817A 117C 000F 0020             		move.b	#$F,$20(a0)
00018180                            
00018180                            locret_1784A:
00018180 4E75                       		rts	
00018182                            ; ===========================================================================
00018182                            
00018182                            loc_1784C:				; XREF: loc_177E6
00018182 7064                       		moveq	#100,d0
00018184 6100 0000                  		bsr.w	AddPoints
00018188 117C 0008 0025             		move.b	#8,$25(a0)
0001818E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018194 4E75                       		rts	
00018196                            
00018196                            ; ---------------------------------------------------------------------------
00018196                            ; Defeated boss	subroutine
00018196                            ; ---------------------------------------------------------------------------
00018196                            
00018196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018196                            
00018196                            
00018196                            BossDefeated:
00018196 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001819A 0200 0007                  		andi.b	#7,d0
0001819E 6600                       		bne.s	locret_178A2
000181A0 4EB9 0000 E284             		jsr	SingleObjLoad
000181A6 6600                       		bne.s	locret_178A2
000181A8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000181AC 3368 0008 0008             		move.w	8(a0),8(a1)
000181B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000181B8 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000181BE 3200                       		move.w	d0,d1
000181C0 7200                       		moveq	#0,d1
000181C2 1200                       		move.b	d0,d1
000181C4 E409                       		lsr.b	#2,d1
000181C6 0441 0020                  		subi.w	#$20,d1
000181CA D369 0008                  		add.w	d1,8(a1)
000181CE E048                       		lsr.w	#8,d0
000181D0 E608                       		lsr.b	#3,d0
000181D2 D169 000C                  		add.w	d0,$C(a1)
000181D6                            
000181D6                            locret_178A2:
000181D6 4E75                       		rts	
000181D8                            ; End of function BossDefeated
000181D8                            
000181D8                            ; ---------------------------------------------------------------------------
000181D8                            ; Subroutine to	move a boss
000181D8                            ; ---------------------------------------------------------------------------
000181D8                            
000181D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181D8                            
000181D8                            
000181D8                            BossMove:
000181D8 2428 0030                  		move.l	$30(a0),d2
000181DC 2628 0038                  		move.l	$38(a0),d3
000181E0 3028 0010                  		move.w	$10(a0),d0
000181E4 48C0                       		ext.l	d0
000181E6 E180                       		asl.l	#8,d0
000181E8 D480                       		add.l	d0,d2
000181EA 3028 0012                  		move.w	$12(a0),d0
000181EE 48C0                       		ext.l	d0
000181F0 E180                       		asl.l	#8,d0
000181F2 D680                       		add.l	d0,d3
000181F4 2142 0030                  		move.l	d2,$30(a0)
000181F8 2143 0038                  		move.l	d3,$38(a0)
000181FC 4E75                       		rts	
000181FE                            ; End of function BossMove
000181FE                            
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000181FE 6100 FFD8                  		bsr.w	BossMove
00018202 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018208 6600                       		bne.s	loc_17916
0001820A 317C 0000 0010             		move.w	#0,$10(a0)
00018210 317C 0000 0012             		move.w	#0,$12(a0)
00018216 5428 0025                  		addq.b	#2,$25(a0)
0001821A 4EB9 0000 E29A             		jsr	SingleObjLoad2
00018220 6600                       		bne.s	loc_17910
00018222 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018226 3368 0030 0008             		move.w	$30(a0),8(a1)
0001822C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018232 2348 0034                  		move.l	a0,$34(a1)
00018236                            
00018236                            loc_17910:
00018236 317C 0077 003C             		move.w	#$77,$3C(a0)
0001823C                            
0001823C                            loc_17916:
0001823C 6000 FEDE                  		bra.w	loc_177E6
00018240                            ; ===========================================================================
00018240                            
00018240                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018240 5368 003C                  		subq.w	#1,$3C(a0)
00018244 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001824A 5428 0025                  		addq.b	#2,$25(a0)
0001824E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018254 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018258 9068 0008                  		sub.w	8(a0),d0		 
0001825C 6A00                       		bpl.s	Obj3D_left			 
0001825E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018264 6000                       		bra.s	Obj3D_right		 
00018266 08A8 0005 0022             		bclr	#5,$22(a0)
0001826C 4EB9 0000 0000              		jsr     loc_17950
00018272 4E75                       		rts
00018274                            ; ===========================================================================
00018274                            
00018274                            Obj3D_right:
00018274 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001827A 4E75                       		Rts
0001827C                            
0001827C                            Obj3D_left:
0001827C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018282 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018288 6600                       		bne.s	RTSboss  	; if not, branch
0001828A 0868 0000 0022              		bchg	#0,$22(a0)
00018290                            
00018290                            RTSboss:	    
00018290 4E75                       		rts
00018292                             ; ===========================================================================
00018292                            
00018292                            Obj3D_UpStuff:
00018292 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018296 9068 000C                  		sub.w	$C(a0),d0		 
0001829A 6A00                       		bpl.s	Obj3D_down			 
0001829C 6000                        		bra.s	Obj3D_up		 
0001829E 08A8 0005 0022             		bclr	#5,$22(a0)
000182A4                             
000182A4                            Obj3D_up:		
000182A4 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000182AA 4E75                        	    rts
000182AC                            
000182AC                            Obj3D_down:
000182AC 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000182B2                            
000182B2                            loc_17950:
000182B2 6000 FE68                  		bra.w	loc_177E6
000182B6                            ; ===========================================================================
000182B6                            
000182B6                            loc_17954:				; XREF: Obj3D_ShipIndex
000182B6 5368 003C                  		subq.w	#1,$3C(a0)
000182BA 6B00                       		bmi.s	loc_17960
000182BC 6100 FF1A                  		bsr.w	BossMove
000182C0 6000                       		bra.s	loc_17976
000182C2                            ; ===========================================================================
000182C2                            
000182C2                            loc_17960:
000182C2 0868 0000 0022             		bchg	#0,$22(a0)
000182C8 317C 003F 003C             		move.w	#$3F,$3C(a0)
000182CE 5528 0025                  		subq.b	#2,$25(a0)
000182D2 317C 0000 0010             		move.w	#0,$10(a0)
000182D8                            
000182D8                            loc_17976:
000182D8 6000 FE42                  		bra.w	loc_177E6
000182DC                            ; ===========================================================================
000182DC                            
000182DC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000182DC 5368 003C                  		subq.w	#1,$3C(a0)
000182E0 6B00                       		bmi.s	loc_17984
000182E2 6000 FEB2                  		bra.w	BossDefeated
000182E6                            ; ===========================================================================
000182E6                            
000182E6                            loc_17984:
000182E6 08E8 0000 0022             		bset	#0,$22(a0)
000182EC 08A8 0007 0022             		bclr	#7,$22(a0)
000182F2 4268 0010                  		clr.w	$10(a0)
000182F6 5428 0025                  		addq.b	#2,$25(a0)
000182FA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018300 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018304 6600                       		bne.s	locret_179AA
00018306 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001830C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018312 6000 FE82                  		bra.w	BossDefeated
00018316                            
00018316                            locret_179AA:
00018316 4E75                       		rts	
00018318                            ; ===========================================================================
00018318                            
00018318                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018318 4EB9 0000 DDAC             		jsr ObjectFall		
0001831E 5268 003C                  		addq.w	#1,$3C(a0)
00018322 6700                       		beq.s	loc_179BC
00018324 6A00                       		bpl.s	loc_179C2
00018326 6000                       		bra.s	loc_179EE
00018328                            ; ===========================================================================
00018328                            
00018328                            loc_179BC:
00018328 4268 0012                  		clr.w	$12(a0)
0001832C 6000                       		bra.s	loc_179EE
0001832E                            ; ===========================================================================
0001832E                            
0001832E                            loc_179C2:
0001832E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018334 6500                       		bcs.s	loc_179DA
00018336 6700                       		beq.s	loc_179E0
00018338 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001833E 6500                       		bcs.s	loc_179EE
00018340 5428 0025                  		addq.b	#2,$25(a0)
00018344 6000                       		bra.s	loc_179EE
00018346                            ; ===========================================================================
00018346                            
00018346                            loc_179DA:
00018346 5168 0012                  		subq.w	#8,$12(a0)
0001834A 6000                       		bra.s	loc_179EE
0001834C 6000 FE48                  		bra.w	BossDefeated
00018350                            ; ===========================================================================
00018350                            
00018350                            loc_179E0:
00018350 4268 0012                  		clr.w	$12(a0)
00018354 303C 0081                  		move.w	#$81,d0
00018358 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
0001835E                            
0001835E                            loc_179EE:
0001835E 6100 FE78                  		bsr.w	BossMove
00018362 6000 FDB8                  		bra.w	loc_177E6
00018366                            ; ===========================================================================
00018366                            
00018366                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018366 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001836C 6700                       		beq.s	loc_17A10
0001836E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018372 6000                       		bra.s	loc_17A16
00018374                            ; ===========================================================================
00018374                            
00018374                            loc_17A10:
00018374 4A28 0001                  		tst.b	1(a0)
00018378 6A00                       		bpl.s	Obj3D_ShipDel
0001837A                            
0001837A                            loc_17A16:
0001837A 6100 FE5C                  		bsr.w	BossMove
0001837E 6000 FD9C                  		bra.w	loc_177E6
00018382                            ; ===========================================================================
00018382                            
00018382                            Obj3D_ShipDel:
00018382 4EF9 0000 DE3A             		jmp	DeleteObject
00018388                            ; ===========================================================================
00018388                            
00018388                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018388 7000                       		moveq	#0,d0
0001838A 7201                       		moveq	#1,d1
0001838C 2268 0034                  		movea.l	$34(a0),a1
00018390 1029 0025                  		move.b	$25(a1),d0
00018394 5900                       		subq.b	#4,d0
00018396 6600                       		bne.s	loc_17A3E
00018398 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001839E 6600                       		bne.s	loc_17A46
000183A0 7204                       		moveq	#4,d1
000183A2                            
000183A2                            loc_17A3E:
000183A2 5D00                       		subq.b	#6,d0
000183A4 6B00                       		bmi.s	loc_17A46
000183A6 720A                       		moveq	#$A,d1
000183A8 6000                       		bra.s	loc_17A5A
000183AA                            ; ===========================================================================
000183AA                            
000183AA                            loc_17A46:
000183AA 4A29 0020                  		tst.b	$20(a1)
000183AE 6600                       		bne.s	loc_17A50
000183B0 7205                       		moveq	#5,d1
000183B2 6000                       		bra.s	loc_17A5A
000183B4                            ; ===========================================================================
000183B4                            
000183B4                            loc_17A50:
000183B4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000183BA 6500                       		bcs.s	loc_17A5A
000183BC 7204                       		moveq	#4,d1
000183BE                            
000183BE                            loc_17A5A:
000183BE 1141 001C                  		move.b	d1,$1C(a0)
000183C2 5500                       		subq.b	#2,d0
000183C4 6600                       		bne.s	Obj3D_FaceDisp
000183C6 117C 0006 001C             		move.b	#6,$1C(a0)
000183CC 4A28 0001                  		tst.b	1(a0)
000183D0 6A00                       		bpl.s	Obj3D_FaceDel
000183D2                            
000183D2                            Obj3D_FaceDisp:
000183D2 6000                       		bra.s	Obj3D_Display
000183D4                            ; ===========================================================================
000183D4                            
000183D4                            Obj3D_FaceDel:
000183D4 4EF9 0000 DE3A             		jmp	DeleteObject
000183DA                            ; ===========================================================================
000183DA                            
000183DA                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000183DA 117C 0007 001C             		move.b	#7,$1C(a0)
000183E0 2268 0034                  		movea.l	$34(a0),a1
000183E4 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000183EA 6600                       		bne.s	loc_17A96
000183EC 117C 000B 001C             		move.b	#$B,$1C(a0)
000183F2 4A28 0001                  		tst.b	1(a0)
000183F6 6A00                       		bpl.s	Obj3D_FlameDel
000183F8 6000                       		bra.s	Obj3D_FlameDisp
000183FA                            ; ===========================================================================
000183FA                            
000183FA                            loc_17A96:
000183FA 3029 0010                  		move.w	$10(a1),d0
000183FE 6700                       		beq.s	Obj3D_FlameDisp
00018400 117C 0008 001C             		move.b	#8,$1C(a0)
00018406                            
00018406                            Obj3D_FlameDisp:
00018406 6000                       		bra.s	Obj3D_Display
00018408                            ; ===========================================================================
00018408                            
00018408                            Obj3D_FlameDel:
00018408 4EF9 0000 DE3A             		jmp	DeleteObject
0001840E                            ; ===========================================================================
0001840E                            
0001840E                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001840E 2268 0034                  		movea.l	$34(a0),a1
00018412 3169 0008 0008             		move.w	8(a1),8(a0)
00018418 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001841E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018424 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001842A 4EB9 0000 AEBE             		jsr	AnimateSprite
00018430 1028 0022                  		move.b	$22(a0),d0
00018434 0200 0003                  		andi.b	#3,d0
00018438 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001843E 8128 0001                  		or.b	d0,1(a0)
00018442 4EF9 0000 DDFE             		jmp	DisplaySprite
00018448                            ; ===========================================================================
00018448                            ; ---------------------------------------------------------------------------
00018448                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018448                            ; ---------------------------------------------------------------------------
00018448                            
00018448                            Obj48:					; XREF: Obj_Index
00018448 7000                       		moveq	#0,d0
0001844A 1028 0024                  		move.b	$24(a0),d0
0001844E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018452 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018456                            ; ===========================================================================
00018456 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018458 0000                       		dc.w Obj48_Base-Obj48_Index
0001845A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001845C 0000                       		dc.w loc_17C68-Obj48_Index
0001845E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018460                            ; ===========================================================================
00018460                            
00018460                            Obj48_Main:				; XREF: Obj48_Index
00018460 5428 0024                  		addq.b	#2,$24(a0)
00018464 317C 4080 0026             		move.w	#$4080,$26(a0)
0001846A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018470 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018478 317C 046C 0002             		move.w	#$46C,2(a0)
0001847E 45E8 0028                  		lea	$28(a0),a2
00018482 14FC 0000                  		move.b	#0,(a2)+
00018486 7205                       		moveq	#5,d1
00018488 2248                       		movea.l	a0,a1
0001848A 6000                       		bra.s	loc_17B60
0001848C                            ; ===========================================================================
0001848C                            
0001848C                            Obj48_MakeLinks:
0001848C 4EB9 0000 E29A             		jsr	SingleObjLoad2
00018492 6600                       		bne.s	Obj48_MakeBall
00018494 3368 0008 0008             		move.w	8(a0),8(a1)
0001849A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184A0 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000184A4 137C 0006 0024             		move.b	#6,$24(a1)
000184AA 237C 0000 8280 0004        		move.l	#Map_obj15,4(a1)
000184B2 337C 0380 0002             		move.w	#$380,2(a1)
000184B8 137C 0001 001A             		move.b	#1,$1A(a1)
000184BE 5228 0028                  		addq.b	#1,$28(a0)
000184C2                            
000184C2                            loc_17B60:				; XREF: Obj48_Main
000184C2 3A09                       		move.w	a1,d5
000184C4 0445 D000                  		subi.w	#$D000,d5
000184C8 EC4D                       		lsr.w	#6,d5
000184CA 0245 007F                  		andi.w	#$7F,d5
000184CE 14C5                       		move.b	d5,(a2)+
000184D0 137C 0004 0001             		move.b	#4,1(a1)
000184D6 137C 0008 0019             		move.b	#8,$19(a1)
000184DC 137C 0006 0018             		move.b	#6,$18(a1)
000184E2 2368 0034 0034             		move.l	$34(a0),$34(a1)
000184E8 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000184EC                            
000184EC                            Obj48_MakeBall:
000184EC 137C 0008 0024             		move.b	#8,$24(a1)
000184F2 237C 0000 8870 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000184FA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018500 137C 0001 001A             		move.b	#1,$1A(a1)
00018506 137C 0005 0018             		move.b	#5,$18(a1)
0001850C 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018512 4E75                       		rts	
00018514                            ; ===========================================================================
00018514                            
00018514 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001851A                            
0001851A                            ; ===========================================================================
0001851A                            
0001851A                            Obj48_Base:				; XREF: Obj48_Index
0001851A 47F9 0001 8514             		lea	(Obj48_PosData).l,a3
00018520 45E8 0028                  		lea	$28(a0),a2
00018524 7C00                       		moveq	#0,d6
00018526 1C1A                       		move.b	(a2)+,d6
00018528                            
00018528                            loc_17BC6:
00018528 7800                       		moveq	#0,d4
0001852A 181A                       		move.b	(a2)+,d4
0001852C ED4C                       		lsl.w	#6,d4
0001852E 0684 00FF D000             		addi.l	#$FFD000,d4
00018534 2244                       		movea.l	d4,a1
00018536 101B                       		move.b	(a3)+,d0
00018538 B029 003C                  		cmp.b	$3C(a1),d0
0001853C 6700                       		beq.s	loc_17BE0
0001853E 5229 003C                  		addq.b	#1,$3C(a1)
00018542                            
00018542                            loc_17BE0:
00018542 51CE FFE4                  		dbf	d6,loc_17BC6
00018546                            
00018546 B029 003C                  		cmp.b	$3C(a1),d0
0001854A 6600                       		bne.s	loc_17BFA
0001854C 2268 0034                  		movea.l	$34(a0),a1
00018550 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018556 6600                       		bne.s	loc_17BFA
00018558 5428 0024                  		addq.b	#2,$24(a0)
0001855C                            
0001855C                            loc_17BFA:
0001855C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018562 6700                       		beq.s	Obj48_Display
00018564 5268 0032                  		addq.w	#1,$32(a0)
00018568                            
00018568                            Obj48_Display:
00018568 6100 0000                  		bsr.w	sub_17C2A
0001856C 1028 0026                  		move.b	$26(a0),d0
00018570 4EB9 0000 81F2             		jsr	(Obj15_Move2).l
00018576 4EF9 0000 DDFE             		jmp	DisplaySprite
0001857C                            ; ===========================================================================
0001857C                            
0001857C                            Obj48_Display2:				; XREF: Obj48_Index
0001857C 6100 0000                  		bsr.w	sub_17C2A
00018580 4EB9 0000 81B2             		jsr	(Obj48_Move).l
00018586 4EF9 0000 DDFE             		jmp	DisplaySprite
0001858C                            
0001858C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001858C                            
0001858C                            
0001858C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001858C 2268 0034                  		movea.l	$34(a0),a1
00018590 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018596 6400                       		bcc.s	loc_17C3C
00018598 0868 0000 001A             		bchg	#0,$1A(a0)
0001859E                            
0001859E                            loc_17C3C:
0001859E 3169 0008 003A             		move.w	8(a1),$3A(a0)
000185A4 3029 000C                  		move.w	$C(a1),d0
000185A8 D068 0032                  		add.w	$32(a0),d0
000185AC 3140 0038                  		move.w	d0,$38(a0)
000185B0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185B6 4A29 0022                  		tst.b	$22(a1)
000185BA 6A00                       		bpl.s	locret_17C66
000185BC 10BC 003F                  		move.b	#$3F,0(a0)
000185C0 117C 0000 0024             		move.b	#0,$24(a0)
000185C6                            
000185C6                            locret_17C66:
000185C6 4E75                       		rts	
000185C8                            ; End of function sub_17C2A
000185C8                            
000185C8                            ; ===========================================================================
000185C8                            
000185C8                            loc_17C68:				; XREF: Obj48_Index
000185C8 2268 0034                  		movea.l	$34(a0),a1
000185CC 4A29 0022                  		tst.b	$22(a1)
000185D0 6A00                       		bpl.s	Obj48_Display3
000185D2 10BC 003F                  		move.b	#$3F,0(a0)
000185D6 117C 0000 0024             		move.b	#0,$24(a0)
000185DC                            
000185DC                            Obj48_Display3:
000185DC 4EF9 0000 DDFE             		jmp	DisplaySprite
000185E2                            ; ===========================================================================
000185E2                            
000185E2                            Obj48_ChkVanish:			; XREF: Obj48_Index
000185E2 7000                       		moveq	#0,d0
000185E4 4A28 001A                  		tst.b	$1A(a0)
000185E8 6600                       		bne.s	Obj48_Vanish
000185EA 5200                       		addq.b	#1,d0
000185EC                            
000185EC                            Obj48_Vanish:
000185EC 1140 001A                  		move.b	d0,$1A(a0)
000185F0 2268 0034                  		movea.l	$34(a0),a1
000185F4 4A29 0022                  		tst.b	$22(a1)
000185F8 6A00                       		bpl.s	Obj48_Display4
000185FA 117C 0000 0020             		move.b	#0,$20(a0)
00018600 6100 FB94                  		bsr.w	BossDefeated
00018604 5328 003C                  		subq.b	#1,$3C(a0)
00018608 6A00                       		bpl.s	Obj48_Display4
0001860A 10BC 003F                  		move.b	#$3F,(a0)
0001860E 117C 0000 0024             		move.b	#0,$24(a0)
00018614                            
00018614                            Obj48_Display4:
00018614 4EF9 0000 DDFE             		jmp	DisplaySprite
0001861A                            ; ===========================================================================
0001861A                            Ani_Eggman:
0001861A                            	include "_anim\Eggman.asm"
0001861A                            ; ---------------------------------------------------------------------------
0001861A                            ; Animation script - Eggman (bosses)
0001861A                            ; ---------------------------------------------------------------------------
0001861A 0000                       		dc.w byte_17CD4-Ani_Eggman
0001861C 0000                       		dc.w byte_17CD8-Ani_Eggman
0001861E 0000                       		dc.w byte_17CDC-Ani_Eggman
00018620 0000                       		dc.w byte_17CE0-Ani_Eggman
00018622 0000                       		dc.w byte_17CE4-Ani_Eggman
00018624 0000                       		dc.w byte_17CE8-Ani_Eggman
00018626 0000                       		dc.w byte_17CEC-Ani_Eggman
00018628 0000                       		dc.w byte_17CF0-Ani_Eggman
0001862A 0000                       		dc.w byte_17CF4-Ani_Eggman
0001862C 0000                       		dc.w byte_17CF8-Ani_Eggman
0001862E 0000                       		dc.w byte_17CFC-Ani_Eggman
00018630 0000                       		dc.w byte_17D00-Ani_Eggman
00018632 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018636 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001863A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001863E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018642 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018646 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001864A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001864E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018652 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018656 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001865A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001865E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001866A                            		even
0001866A                            		even
0001866A                            Ani_TetoB:
0001866A                            	include "_anim\TetoB.asm"
0001866A                            ; ---------------------------------------------------------------------------
0001866A                            ; Animation script - Eggman (bosses)
0001866A                            ; ---------------------------------------------------------------------------
0001866A 0000                       		dc.w spin-Ani_TetoB
0001866C 0000                       		dc.w static-Ani_TetoB
0001866E 0000                       		dc.w static2-Ani_TetoB
00018670 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018677 0500 FF                    static:	dc.b 5,	0, $FF
0001867A 0501 FF                    static2:	dc.b 5,	1, $FF
0001867E 00                         		even
0001867E 00                         		even
0001867E                            ; ---------------------------------------------------------------------------
0001867E                            ; Sprite mappings - Eggman (boss levels)
0001867E                            ; ---------------------------------------------------------------------------
0001867E                            Map_Eggman:
0001867E                            	include "_maps\Eggman.asm"
0001867E                            Map_dc7e:
0001867E 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018680 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018682 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018684 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018686 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018688 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001868A 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001868C 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001868E 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018690 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018692 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018694 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018696 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018698 06                         Map_dc7e_1A: 	dc.b $6
00018699 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001869E EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000186A3 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000186A8 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000186AD 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000186B2 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000186B7 02                         Map_dc7e_39: 	dc.b $2
000186B8 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186BD EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000186C2 02                         Map_dc7e_44: 	dc.b $2
000186C3 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186C8 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186CD 03                         Map_dc7e_4F: 	dc.b $3
000186CE E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000186D3 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000186D8 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000186DD 03                         Map_dc7e_5F: 	dc.b $3
000186DE E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000186E3 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000186E8 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000186ED 03                         Map_dc7e_6F: 	dc.b $3
000186EE E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186F3 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186F8 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186FD 03                         Map_dc7e_7F: 	dc.b $3
000186FE E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018703 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018708 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001870D 04                         Map_dc7e_8F: 	dc.b $4
0001870E E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018713 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018718 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001871D EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018722 01                         Map_dc7e_A4: 	dc.b $1
00018723 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018728 01                         Map_dc7e_AA: 	dc.b $1
00018729 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001872E 00                         Map_dc7e_B0: 	dc.b $0
0001872F 02                         Map_dc7e_B1: 	dc.b $2
00018730 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018735 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001873A 02                         Map_dc7e_BC: 	dc.b $2
0001873B F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018740 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018746 00                         	even
00018746 00                         	even
00018746                            
00018746                            ; ---------------------------------------------------------------------------
00018746                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018746                            ; ---------------------------------------------------------------------------
00018746                            Map_BossItems:
00018746                            	include "_maps\Boss items.asm"
00018746                            ; ---------------------------------------------------------------------------
00018746                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018746                            ; ---------------------------------------------------------------------------
00018746 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001874A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001874E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018752 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018756 01                         byte_17DE4:	dc.b 1
00018757 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001875C 02                         byte_17DEA:	dc.b 2
0001875D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018762 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018767 00                         		dc.b 0
00018768 01                         byte_17DF6:	dc.b 1
00018769 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001876E 01                         byte_17DFC:	dc.b 1
0001876F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018774 01                         byte_17E02:	dc.b 1
00018775 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001877A 04                         byte_17E08:	dc.b 4
0001877B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018780 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018785 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001878A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001878F 00                         		dc.b 0
00018790 02                         byte_17E1E:	dc.b 2
00018791 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018796 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001879B 00                         		dc.b 0
0001879C 02                         byte_17E2A:	dc.b 2
0001879D 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000187A2 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000187A8 00                         		even
000187A8 00                         		even
000187A8                            
000187A8                            ; ===========================================================================
000187A8                            ; ---------------------------------------------------------------------------
000187A8                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000187A8                            ; ---------------------------------------------------------------------------
000187A8                            
000187A8                            
000187A8                            obj77:					; XREF: Obj_Index
000187A8 7000                       		moveq	#0,d0
000187AA 1028 0024                  		move.b	$24(a0),d0
000187AE 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
000187B2 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000187B6                            ; ===========================================================================
000187B6 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000187B8 0000                       		dc.w obj77_ShipMain-obj77_Index
000187BA 0000                       		dc.w obj77_FaceMain-obj77_Index
000187BC 0000                       		dc.w obj77_FlameMain-obj77_Index
000187BE                            
000187BE 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000187C0 0401                       		dc.b 4,	1
000187C2 0607                       		dc.b 6,	7
000187C4                            ; ===========================================================================
000187C4                            
000187C4                            obj77_Main:				; XREF: obj77_Index
000187C4 45F9 0001 87BE             		lea	(obj77_ObjData).l,a2
000187CA 2248                       		movea.l	a0,a1
000187CC 7202                       		moveq	#2,d1
000187CE 6000                       		bra.s	obj77_LoadBoss
000187D0                            ; ===========================================================================
000187D0                            
000187D0                            obj77_Loop:
000187D0 4EB9 0000 E29A             		jsr	SingleObjLoad2
000187D6 6600                       		bne.s	loc2_17772
000187D8                            
000187D8                            obj77_LoadBoss:				; XREF: obj77_Main
000187D8 135A 0024                  		move.b	(a2)+,$24(a1)
000187DC 12BC 0077                  		move.b	#$77,0(a1)
000187E0 3368 0008 0008             		move.w	8(a0),8(a1)
000187E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187EC 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000187F4 337C 0400 0002             		move.w	#$400,2(a1)
000187FA 137C 0004 0001             		move.b	#4,1(a1)
00018800 137C 0020 0019             		move.b	#$20,$19(a1)
00018806 137C 0003 0018             		move.b	#3,$18(a1)
0001880C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018810 2348 0034                  		move.l	a0,$34(a1)
00018814 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018818                            
00018818                            loc2_17772:
00018818 3168 0008 0030             		move.w	8(a0),$30(a0)
0001881E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018824 117C 000F 0020             		move.b	#$F,$20(a0)
0001882A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018830                            
00018830                            obj77_ShipMain:				; XREF: obj77_Index
00018830 7000                       		moveq	#0,d0
00018832 1028 0025                  		move.b	$25(a0),d0
00018836 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
0001883A 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001883E 43F9 0001 866A             		lea	(Ani_TetoB).l,a1
00018844 4EB9 0000 AEBE             		jsr	AnimateSprite
0001884A 1028 0022                  		move.b	$22(a0),d0
0001884E 0200 0003                  		andi.b	#3,d0
00018852 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018858 8128 0001                  		or.b	d0,1(a0)
0001885C 4EF9 0000 DDFE             		jmp	DisplaySprite
00018862                            ; ===========================================================================
00018862 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018864 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018866 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018868 0000                       		dc.w loc2_17954-obj77_ShipIndex
0001886A 0000                       		dc.w fatassruns-obj77_ShipIndex		
0001886C 0000                       		dc.w loc2_1797A-obj77_ShipIndex
0001886E 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018870 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018872                            ; ===========================================================================
00018872                            
00018872                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018872                            	;	move.w	#$100,$12(a0)	; move ship down
00018872 6100 F964                  		bsr.w	BossMove
00018876 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
0001887C 6600                       		bne.s	loc2_177E6
0001887E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018884 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018888                            
00018888                            loc2_177E6:
00018888                            ;		move.b	$3F(a0),d0
00018888                            ;		jsr	(CalcSine).l
00018888 EC40                       		asr.w	#6,d0
0001888A D068 0038                  		add.w	$38(a0),d0
0001888E 3140 000C                  		move.w	d0,$C(a0)
00018892 3168 0030 0008             		move.w	$30(a0),8(a0)
00018898 5428 003F                  		addq.b	#2,$3F(a0)
0001889C 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000188A2 6400                       		bcc.s	locret_1784A2
000188A4 4A28 0022                  		tst.b	$22(a0)
000188A8 6B00                       		bmi.s	loc2_1784C
000188AA 4A28 0020                  		tst.b	$20(a0)
000188AE 6600                       		bne.s	locret_1784A2
000188B0 4A28 003E                  		tst.b	$3E(a0)
000188B4 6600                       		bne.s	obj77_ShipFlash
000188B6 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
000188BC 303C 00AC                  		move.w	#$AC,d0
000188C0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000188C6                            
000188C6                            obj77_ShipFlash:
000188C6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000188CA 7000                       		moveq	#0,d0		; move 0 (black) to d0
000188CC 4A51                       		tst.w	(a1)
000188CE 6600                       		bne.s	loc2_1783C
000188D0 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000188D4                            
000188D4                            loc2_1783C:
000188D4 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000188D6 5328 003E                  		subq.b	#1,$3E(a0)
000188DA 6600                       		bne.s	locret_1784A2
000188DC 117C 000F 0020             		move.b	#$F,$20(a0)
000188E2                            
000188E2                            locret_1784A2:
000188E2 4E75                       		rts	
000188E4                            ; ===========================================================================
000188E4                            
000188E4                            loc2_1784C:				; XREF: loc2_177E6
000188E4 7064                       		moveq	#100,d0
000188E6 6100 0000                  		bsr.w	AddPoints
000188EA 117C 000A 0025             		move.b	#$A,$25(a0)
000188F0 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000188F6 4E75                       		rts	
000188F8                            ; ===========================================================================
000188F8                            
000188F8                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000188F8 317C FF00 0010             		move.w	#-$100,$10(a0)
000188FE 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018904 6100 F8D2                  		bsr.w	BossMove
00018908 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
0001890E 6600                       		bne.s	loc2_17916
00018910 317C 0000 0010             		move.w	#0,$10(a0)
00018916 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
0001891C 317C 0000 0012             		move.w	#0,$12(a0)
00018922 5428 0025                  		addq.b	#2,$25(a0)
00018926                            
00018926                            loc2_17910:
00018926 317C 0077 003C             		move.w	#$77,$3C(a0)
0001892C                            
0001892C                            loc2_17916:
0001892C 6000 FF5A                  		bra.w	loc2_177E6
00018930                            ; ===========================================================================
00018930                            
00018930                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018930 6100 F8A6                  		bsr.w	BossMove
00018934 5368 003C                  		subq.w	#1,$3C(a0)
00018938 6A00                       		bpl.s	loc2_17950 ; if time remains go here
0001893A 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018940 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018946 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
0001894C 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018952 6600                       		bne.s	loc2_17950 ; if not branch
00018954                            
00018954                            fatass_attack:
00018954 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
0001895A 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018960 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018966 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018968 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
0001896C 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018972                            
00018972                            loc2_17950:
00018972 6000 FF14                  		bra.w	loc2_177E6
00018976                            ; ===========================================================================
00018976                            
00018976                            loc2_17954:				; XREF: obj77_ShipIndex
00018976 6100 F860                  		bsr.w	BossMove
0001897A 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018980                            		; i suck at programming
00018980 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018986 6600                       		bne.s	loc2_17976    ; if not blah blah
00018988 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
0001898E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018992 303C 00B9                  		move.w	#$B9,d0
00018996 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
0001899C                            
0001899C                            Peartobombs:	
0001899C 4EB9 0000 E29A                		jsr	SingleObjLoad2
000189A2 6600                       		bne.s	secondone
000189A4 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
000189A8 337C 1D70 0008             		move.w	#$1D70,8(a1)
000189AE 337C 0670 000C             		move.w	#$670,$C(a1)
000189B4                            secondone:		
000189B4 4EB9 0000 E29A                		jsr	SingleObjLoad2
000189BA 6600                       		bne.s	loc2_17976		
000189BC 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
000189C0 337C 1D20 0008             		move.w	#$1D20,8(a1)
000189C6 337C 0670 000C             		move.w	#$670,$C(a1)
000189CC                            lastone:
000189CC 4EB9 0000 E29A                		jsr	SingleObjLoad2
000189D2 6600                       		bne.s	loc2_17976		
000189D4 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
000189D8 337C 1E00 0008             		move.w	#$1E00,8(a1)
000189DE 337C 0670 000C             		move.w	#$670,$C(a1)
000189E4                            		
000189E4                            loc2_17976:
000189E4 6000 FEA2                  		bra.w	loc2_177E6
000189E8                            		
000189E8                            ; ===========================================================================
000189E8                            Fatassruns:
000189E8 6100 F7EE                   		bsr.w	BossMove
000189EC 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000189F2 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000189F8 6600                       		bne.s	processstuff ; is not go here
000189FA 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018A00 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018A06 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018A0A 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018A10 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018A16                            		
00018A16                            		
00018A16                            processstuff:
00018A16 6000 FE70                  		bra.w	loc2_177E6
00018A1A                            ; ===========================================================================
00018A1A                            
00018A1A                            loc2_1797A:				; XREF: obj77_ShipIndex
00018A1A 5368 003C                  		subq.w	#1,$3C(a0)
00018A1E 6B00                       		bmi.s	loc2_17984
00018A20 6000 F774                  		bra.w	BossDefeated
00018A24                            ; ===========================================================================
00018A24                            
00018A24                            loc2_17984:
00018A24 08E8 0000 0022             		bset	#0,$22(a0)
00018A2A 08A8 0007 0022             		bclr	#7,$22(a0)
00018A30 4268 0010                  		clr.w	$10(a0)
00018A34 5428 0025                  		addq.b	#2,$25(a0)
00018A38 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018A3E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A42 6600                       		bne.s	locret_179AA2
00018A44 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A4A                            
00018A4A                            locret_179AA2:
00018A4A 4E75                       		rts	
00018A4C                            ; ===========================================================================
00018A4C                            
00018A4C                            loc2_179AC:				; XREF: obj77_ShipIndex
00018A4C 5268 003C                  		addq.w	#1,$3C(a0)
00018A50 6700                       		beq.s	loc2_179BC
00018A52 6A00                       		bpl.s	loc2_179C2
00018A54 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A5A 6000                       		bra.s	loc2_179EE
00018A5C                            ; ===========================================================================
00018A5C                            
00018A5C                            loc2_179BC:
00018A5C 4268 0012                  		clr.w	$12(a0)
00018A60 6000                       		bra.s	loc2_179EE
00018A62                            ; ===========================================================================
00018A62                            
00018A62                            loc2_179C2:
00018A62 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018A68 6500                       		bcs.s	loc2_179DA
00018A6A 6700                       		beq.s	loc2_179E0
00018A6C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018A72 6500                       		bcs.s	loc2_179EE
00018A74 5428 0025                  		addq.b	#2,$25(a0)
00018A78 6000                       		bra.s	loc2_179EE
00018A7A                            ; ===========================================================================
00018A7A                            
00018A7A                            loc2_179DA:
00018A7A 5168 0012                  		subq.w	#8,$12(a0)
00018A7E 6000                       		bra.s	loc2_179EE
00018A80                            ; ===========================================================================
00018A80                            
00018A80                            loc2_179E0:
00018A80 4268 0012                  		clr.w	$12(a0)
00018A84 303C 0097                  		move.w	#$97,d0
00018A88 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
00018A8E                            
00018A8E                            loc2_179EE:
00018A8E 6100 F748                  		bsr.w	BossMove
00018A92 6000 FDF4                  		bra.w	loc2_177E6
00018A96                            ; ===========================================================================
00018A96                            
00018A96                            loc2_179F6:				; XREF: obj77_ShipIndex
00018A96 317C 0400 0010             		move.w	#$400,$10(a0)
00018A9C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018AA2 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018AA8 6700                       		beq.s	loc2_17A10
00018AAA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018AAE 6000                       		bra.s	loc2_17A16
00018AB0                            ; ===========================================================================
00018AB0                            
00018AB0                            loc2_17A10:
00018AB0 4A28 0001                  		tst.b	1(a0)
00018AB4 6A00                       		bpl.s	obj77_ShipDel
00018AB6                            
00018AB6                            loc2_17A16:
00018AB6 6100 F720                  		bsr.w	BossMove
00018ABA 6000 FDCC                  		bra.w	loc2_177E6
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            obj77_ShipDel:
00018ABE 4EF9 0000 DE3A             		jmp	DeleteObject
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            obj77_FaceMain:				; XREF: obj77_Index
00018AC4 4E75                       		rts
00018AC6                            ; ===========================================================================
00018AC6                            
00018AC6                            obj77_FlameMain:			; XREF: obj77_Index
00018AC6 4E75                       		rts
00018AC8                            ; ===========================================================================
00018AC8                            
00018AC8                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018AC8 43F9 0001 866A             		lea	(Ani_TetoB).l,a1
00018ACE 4EB9 0000 AEBE             		jsr	AnimateSprite
00018AD4 4EF9 0000 DDFE             		jmp	DisplaySprite
00018ADA                            ; ---------------------------------------------------------------------------
00018ADA                            ; Sprite mappings - Fatass teto boss
00018ADA                            ; ---------------------------------------------------------------------------
00018ADA                            Map_TetoBoss:
00018ADA                            	include "_maps\tetoboss.asm"
00018ADA                            Map_f09a:
00018ADA 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018ADC 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018ADE 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018AE0 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018AE2 03                         Map_f09a_8: 	dc.b $3
00018AE3 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018AE8 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018AED DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018AF2 06                         Map_f09a_18: 	dc.b $6
00018AF3 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018AF8 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018AFD E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018B02 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018B07 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018B0C 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018B11 03                         Map_f09a_37: 	dc.b $3
00018B12 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018B17 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018B1C DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018B21 06                         Map_f09a_47: 	dc.b $6
00018B22 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018B27 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018B2C E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018B31 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018B36 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018B3B 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018B40                            	even
00018B40                            	even
00018B40                            ; ===========================================================================
00018B40                            ; ---------------------------------------------------------------------------
00018B40                            ; Object 73 - Eggman (MZ)
00018B40                            ; ---------------------------------------------------------------------------
00018B40                            
00018B40                            Obj73:					; XREF: Obj_Index
00018B40 7000                       		moveq	#0,d0
00018B42 1028 0024                  		move.b	$24(a0),d0
00018B46 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018B4A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018B4E                            ; ===========================================================================
00018B4E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018B50 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018B52 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018B54 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018B56 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018B58                            
00018B58 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018B5B 0401 04                    		dc.b 4,	1, 4
00018B5E 0607 04                    		dc.b 6,	7, 4
00018B61 0800 03                    		dc.b 8,	0, 3
00018B64                            ; ===========================================================================
00018B64                            
00018B64                            Obj73_Main:				; XREF: Obj73_Index
00018B64 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B6A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B70 117C 000F 0020             		move.b	#$F,$20(a0)
00018B76 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018B7C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018B80 2248                       		movea.l	a0,a1
00018B82 7203                       		moveq	#3,d1
00018B84 6000                       		bra.s	Obj73_LoadBoss
00018B86                            ; ===========================================================================
00018B86                            
00018B86                            Obj73_Loop:
00018B86 4EB9 0000 E29A             		jsr	SingleObjLoad2
00018B8C 6600                       		bne.s	Obj73_ShipMain
00018B8E 12BC 0073                  		move.b	#$73,0(a1)
00018B92 3368 0008 0008             		move.w	8(a0),8(a1)
00018B98 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B9E                            
00018B9E                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018B9E 08A8 0000 0022             		bclr	#0,$22(a0)
00018BA4 4229 0025                  		clr.b	$25(a1)
00018BA8 135A 0024                  		move.b	(a2)+,$24(a1)
00018BAC 135A 001C                  		move.b	(a2)+,$1C(a1)
00018BB0 135A 0018                  		move.b	(a2)+,$18(a1)
00018BB4 237C 0001 867E 0004        		move.l	#Map_Eggman,4(a1)
00018BBC 337C 0400 0002             		move.w	#$400,2(a1)
00018BC2 137C 0004 0001             		move.b	#4,1(a1)
00018BC8 137C 0020 0019             		move.b	#$20,$19(a1)
00018BCE 2348 0034                  		move.l	a0,$34(a1)
00018BD2 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018BD6                            
00018BD6                            Obj73_ShipMain:
00018BD6 7000                       		moveq	#0,d0
00018BD8 1028 0025                  		move.b	$25(a0),d0
00018BDC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018BE0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018BE4 43F9 0001 861A             		lea	(Ani_Eggman).l,a1
00018BEA 4EB9 0000 AEBE             		jsr	AnimateSprite
00018BF0 7003                       		moveq	#3,d0
00018BF2 C028 0022                  		and.b	$22(a0),d0
00018BF6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018BFC 8128 0001                  		or.b	d0,1(a0)
00018C00 4EF9 0000 DDFE             		jmp	DisplaySprite
00018C06                            ; ===========================================================================
00018C06 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018C08 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018C0A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018C0C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018C0E 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018C10                            ; ===========================================================================
00018C10                            
00018C10                            loc_18302:				; XREF: Obj73_ShipIndex
00018C10 1028 003F                  		move.b	$3F(a0),d0
00018C14 5428 003F                  		addq.b	#2,$3F(a0)
00018C18 4EB9 0000 2CEC             		jsr	(CalcSine).l
00018C1E E440                       		asr.w	#2,d0
00018C20 3140 0012                  		move.w	d0,$12(a0)
00018C24 317C FF00 0010             		move.w	#-$100,$10(a0)
00018C2A 6100 F5AC                  		bsr.w	BossMove
00018C2E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C34 6600                       		bne.s	loc_18334
00018C36 5428 0025                  		addq.b	#2,$25(a0)
00018C3A 4228 0028                  		clr.b	$28(a0)
00018C3E 42A8 0010                  		clr.l	$10(a0)
00018C42                            
00018C42                            loc_18334:
00018C42 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018C48 1140 0034                  		move.b	d0,$34(a0)
00018C4C                            
00018C4C                            loc_1833E:
00018C4C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C52 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C58 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018C5E 6400                       		bcc.s	locret_18390
00018C60 4A28 0022                  		tst.b	$22(a0)
00018C64 6B00                       		bmi.s	loc_18392
00018C66 4A28 0020                  		tst.b	$20(a0)
00018C6A 6600                       		bne.s	locret_18390
00018C6C 4A28 003E                  		tst.b	$3E(a0)
00018C70 6600                       		bne.s	loc_18374
00018C72 117C 0028 003E             		move.b	#$28,$3E(a0)
00018C78 303C 00AC                  		move.w	#$AC,d0
00018C7C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018C82                            
00018C82                            loc_18374:
00018C82 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018C86 7000                       		moveq	#0,d0
00018C88 4A51                       		tst.w	(a1)
00018C8A 6600                       		bne.s	loc_18382
00018C8C 303C 0EEE                  		move.w	#$EEE,d0
00018C90                            
00018C90                            loc_18382:
00018C90 3280                       		move.w	d0,(a1)
00018C92 5328 003E                  		subq.b	#1,$3E(a0)
00018C96 6600                       		bne.s	locret_18390
00018C98 117C 000F 0020             		move.b	#$F,$20(a0)
00018C9E                            
00018C9E                            locret_18390:
00018C9E 4E75                       		rts	
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            loc_18392:				; XREF: loc_1833E
00018CA0 7064                       		moveq	#100,d0
00018CA2 6100 0000                  		bsr.w	AddPoints
00018CA6 117C 0004 0025             		move.b	#4,$25(a0)
00018CAC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018CB2 4268 0010                  		clr.w	$10(a0)
00018CB6 4E75                       		rts	
00018CB8                            ; ===========================================================================
00018CB8                            
00018CB8                            loc_183AA:				; XREF: Obj73_ShipIndex
00018CB8 7000                       		moveq	#0,d0
00018CBA 1028 0028                  		move.b	$28(a0),d0
00018CBE 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018CC2 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018CC6 0228 0006 0028             		andi.b	#6,$28(a0)
00018CCC 6000 FF7E                  		bra.w	loc_1833E
00018CD0                            ; ===========================================================================
00018CD0 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018CD2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CD4 0000                       		dc.w loc_183CA-off_183C2
00018CD6 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CD8                            ; ===========================================================================
00018CD8                            
00018CD8                            loc_183CA:				; XREF: off_183C2
00018CD8 4A68 0010                  		tst.w	$10(a0)
00018CDC 6600                       		bne.s	loc_183FE
00018CDE 7040                       		moveq	#$40,d0
00018CE0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CE6 6700                       		beq.s	loc_183E6
00018CE8 6500                       		bcs.s	loc_183DE
00018CEA 4440                       		neg.w	d0
00018CEC                            
00018CEC                            loc_183DE:
00018CEC 3140 0012                  		move.w	d0,$12(a0)
00018CF0 6000 F4E6                  		bra.w	BossMove
00018CF4                            ; ===========================================================================
00018CF4                            
00018CF4                            loc_183E6:
00018CF4 317C 0200 0010             		move.w	#$200,$10(a0)
00018CFA 317C 0100 0012             		move.w	#$100,$12(a0)
00018D00 0828 0000 0022             		btst	#0,$22(a0)
00018D06 6600                       		bne.s	loc_183FE
00018D08 4468 0010                  		neg.w	$10(a0)
00018D0C                            
00018D0C                            loc_183FE:
00018D0C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018D12 6400                       		bcc.s	Obj73_MakeLava
00018D14 6100 F4C2                  		bsr.w	BossMove
00018D18 5968 0012                  		subq.w	#4,$12(a0)
00018D1C                            
00018D1C                            Obj73_MakeLava:
00018D1C 5328 0034                  		subq.b	#1,$34(a0)
00018D20 6400                       		bcc.s	loc_1845C
00018D22 4EB9 0000 E284             		jsr	SingleObjLoad
00018D28 6600                       		bne.s	loc_1844A
00018D2A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018D2E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018D34 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018D3A 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018D40 80FC 0050                  		divu.w	#$50,d0
00018D44 4840                       		swap	d0
00018D46 0640 1878                  		addi.w	#$1878,d0
00018D4A 3340 0008                  		move.w	d0,8(a1)
00018D4E EE09                       		lsr.b	#7,d1
00018D50 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018D56                            
00018D56                            loc_1844A:
00018D56 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018D5C 0200 001F                  		andi.b	#$1F,d0
00018D60 0600 0040                  		addi.b	#$40,d0
00018D64 1140 0034                  		move.b	d0,$34(a0)
00018D68                            
00018D68                            loc_1845C:
00018D68 0828 0000 0022             		btst	#0,$22(a0)
00018D6E 6700                       		beq.s	loc_18474
00018D70 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D76 6D00                       		blt.s	locret_1849C
00018D78 317C 1910 0030             		move.w	#$1910,$30(a0)
00018D7E 6000                       		bra.s	loc_18482
00018D80                            ; ===========================================================================
00018D80                            
00018D80                            loc_18474:
00018D80 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018D86 6E00                       		bgt.s	locret_1849C
00018D88 317C 1830 0030             		move.w	#$1830,$30(a0)
00018D8E                            
00018D8E                            loc_18482:
00018D8E 4268 0010                  		clr.w	$10(a0)
00018D92 317C FE80 0012             		move.w	#-$180,$12(a0)
00018D98 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D9E 6400                       		bcc.s	loc_18498
00018DA0 4468 0012                  		neg.w	$12(a0)
00018DA4                            
00018DA4                            loc_18498:
00018DA4 5428 0028                  		addq.b	#2,$28(a0)
00018DA8                            
00018DA8                            locret_1849C:
00018DA8 4E75                       		rts	
00018DAA                            ; ===========================================================================
00018DAA                            
00018DAA                            Obj73_MakeLava2:			; XREF: off_183C2
00018DAA 6100 F42C                  		bsr.w	BossMove
00018DAE 3028 0038                  		move.w	$38(a0),d0
00018DB2 0440 022C                  		subi.w	#$22C,d0
00018DB6 6E00                       		bgt.s	locret_184F4
00018DB8 303C 022C                  		move.w	#$22C,d0
00018DBC 4A68 0012                  		tst.w	$12(a0)
00018DC0 6700                       		beq.s	loc_184EA
00018DC2 4268 0012                  		clr.w	$12(a0)
00018DC6 317C 0050 003C             		move.w	#$50,$3C(a0)
00018DCC 0868 0000 0022             		bchg	#0,$22(a0)
00018DD2 4EB9 0000 E284             		jsr	SingleObjLoad
00018DD8 6600                       		bne.s	loc_184EA
00018DDA 3368 0030 0008             		move.w	$30(a0),8(a1)
00018DE0 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018DE6 0669 0018 000C             		addi.w	#$18,$C(a1)
00018DEC 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018DF0 137C 0001 0028             		move.b	#1,$28(a1)
00018DF6                            
00018DF6                            loc_184EA:
00018DF6 5368 003C                  		subq.w	#1,$3C(a0)
00018DFA 6600                       		bne.s	locret_184F4
00018DFC 5428 0028                  		addq.b	#2,$28(a0)
00018E00                            
00018E00                            locret_184F4:
00018E00 4E75                       		rts	
00018E02                            ; ===========================================================================
00018E02                            
00018E02                            loc_184F6:				; XREF: Obj73_ShipIndex
00018E02 5368 003C                  		subq.w	#1,$3C(a0)
00018E06 6B00                       		bmi.s	loc_18500
00018E08 6000 F38C                  		bra.w	BossDefeated
00018E0C                            ; ===========================================================================
00018E0C                            
00018E0C                            loc_18500:
00018E0C 08E8 0000 0022             		bset	#0,$22(a0)
00018E12 08A8 0007 0022             		bclr	#7,$22(a0)
00018E18 4268 0010                  		clr.w	$10(a0)
00018E1C 5428 0025                  		addq.b	#2,$25(a0)
00018E20 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018E26 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018E2A 6600                       		bne.s	locret_1852A
00018E2C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018E32 4268 0012                  		clr.w	$12(a0)
00018E36                            
00018E36                            locret_1852A:
00018E36 4E75                       		rts	
00018E38                            ; ===========================================================================
00018E38                            
00018E38                            loc_1852C:				; XREF: Obj73_ShipIndex
00018E38 5268 003C                  		addq.w	#1,$3C(a0)
00018E3C 6700                       		beq.s	loc_18544
00018E3E 6A00                       		bpl.s	loc_1854E
00018E40 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018E46 6400                       		bcc.s	loc_18544
00018E48 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E4E 6000                       		bra.s	loc_1857A
00018E50                            ; ===========================================================================
00018E50                            
00018E50                            loc_18544:
00018E50 4268 0012                  		clr.w	$12(a0)
00018E54 4268 003C                  		clr.w	$3C(a0)
00018E58 6000                       		bra.s	loc_1857A
00018E5A                            ; ===========================================================================
00018E5A                            
00018E5A                            loc_1854E:
00018E5A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018E60 6500                       		bcs.s	loc_18566
00018E62 6700                       		beq.s	loc_1856C
00018E64 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018E6A 6500                       		bcs.s	loc_1857A
00018E6C 5428 0025                  		addq.b	#2,$25(a0)
00018E70 6000                       		bra.s	loc_1857A
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            loc_18566:
00018E72 5168 0012                  		subq.w	#8,$12(a0)
00018E76 6000                       		bra.s	loc_1857A
00018E78                            ; ===========================================================================
00018E78                            
00018E78                            loc_1856C:
00018E78 4268 0012                  		clr.w	$12(a0)
00018E7C 303C 0083                  		move.w	#$83,d0
00018E80 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018E86                            
00018E86                            loc_1857A:
00018E86 6100 F350                  		bsr.w	BossMove
00018E8A 6000 FDC0                  		bra.w	loc_1833E
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            loc_18582:				; XREF: Obj73_ShipIndex
00018E8E 317C 0500 0010             		move.w	#$500,$10(a0)
00018E94 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018E9A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018EA0 6400                       		bcc.s	loc_1859C
00018EA2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018EA6 6000                       		bra.s	loc_185A2
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            loc_1859C:
00018EA8 4A28 0001                  		tst.b	1(a0)
00018EAC 6A00                       		bpl.s	Obj73_ShipDel
00018EAE                            
00018EAE                            loc_185A2:
00018EAE 6100 F328                  		bsr.w	BossMove
00018EB2 6000 FD98                  		bra.w	loc_1833E
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            Obj73_ShipDel:
00018EB6 4EF9 0000 DE3A             		jmp	DeleteObject
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            Obj73_FaceMain:				; XREF: Obj73_Index
00018EBC 7000                       		moveq	#0,d0
00018EBE 7201                       		moveq	#1,d1
00018EC0 2268 0034                  		movea.l	$34(a0),a1
00018EC4 1029 0025                  		move.b	$25(a1),d0
00018EC8 5540                       		subq.w	#2,d0
00018ECA 6600                       		bne.s	loc_185D2
00018ECC 0829 0001 0028             		btst	#1,$28(a1)
00018ED2 6700                       		beq.s	loc_185DA
00018ED4 4A69 0012                  		tst.w	$12(a1)
00018ED8 6600                       		bne.s	loc_185DA
00018EDA 7204                       		moveq	#4,d1
00018EDC 6000                       		bra.s	loc_185EE
00018EDE                            ; ===========================================================================
00018EDE                            
00018EDE                            loc_185D2:
00018EDE 5500                       		subq.b	#2,d0
00018EE0 6B00                       		bmi.s	loc_185DA
00018EE2 720A                       		moveq	#$A,d1
00018EE4 6000                       		bra.s	loc_185EE
00018EE6                            ; ===========================================================================
00018EE6                            
00018EE6                            loc_185DA:
00018EE6 4A29 0020                  		tst.b	$20(a1)
00018EEA 6600                       		bne.s	loc_185E4
00018EEC 7205                       		moveq	#5,d1
00018EEE 6000                       		bra.s	loc_185EE
00018EF0                            ; ===========================================================================
00018EF0                            
00018EF0                            loc_185E4:
00018EF0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018EF6 6500                       		bcs.s	loc_185EE
00018EF8 7204                       		moveq	#4,d1
00018EFA                            
00018EFA                            loc_185EE:
00018EFA 1141 001C                  		move.b	d1,$1C(a0)
00018EFE 5900                       		subq.b	#4,d0
00018F00 6600                       		bne.s	loc_18602
00018F02 117C 0006 001C             		move.b	#6,$1C(a0)
00018F08 4A28 0001                  		tst.b	1(a0)
00018F0C 6A00                       		bpl.s	Obj73_FaceDel
00018F0E                            
00018F0E                            loc_18602:
00018F0E 6000                       		bra.s	Obj73_Display
00018F10                            ; ===========================================================================
00018F10                            
00018F10                            Obj73_FaceDel:
00018F10 4EF9 0000 DE3A             		jmp	DeleteObject
00018F16                            ; ===========================================================================
00018F16                            
00018F16                            Obj73_FlameMain:			; XREF: Obj73_Index
00018F16 117C 0007 001C             		move.b	#7,$1C(a0)
00018F1C 2268 0034                  		movea.l	$34(a0),a1
00018F20 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F26 6D00                       		blt.s	loc_1862A
00018F28 117C 000B 001C             		move.b	#$B,$1C(a0)
00018F2E 4A28 0001                  		tst.b	1(a0)
00018F32 6A00                       		bpl.s	Obj73_FlameDel
00018F34 6000                       		bra.s	loc_18636
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            loc_1862A:
00018F36 4A69 0010                  		tst.w	$10(a1)
00018F3A 6700                       		beq.s	loc_18636
00018F3C 117C 0008 001C             		move.b	#8,$1C(a0)
00018F42                            
00018F42                            loc_18636:
00018F42 6000                       		bra.s	Obj73_Display
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018F44 4EF9 0000 DE3A             		jmp	DeleteObject
00018F4A                            ; ===========================================================================
00018F4A                            
00018F4A                            Obj73_Display:
00018F4A 43F9 0001 861A             		lea	(Ani_Eggman).l,a1
00018F50 4EB9 0000 AEBE             		jsr	AnimateSprite
00018F56                            
00018F56                            loc_1864A:
00018F56 2268 0034                  		movea.l	$34(a0),a1
00018F5A 3169 0008 0008             		move.w	8(a1),8(a0)
00018F60 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018F66 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F6C 7003                       		moveq	#3,d0
00018F6E C028 0022                  		and.b	$22(a0),d0
00018F72 0228 00FC 0001             		andi.b	#-4,1(a0)
00018F78 8128 0001                  		or.b	d0,1(a0)
00018F7C 4EF9 0000 DDFE             		jmp	DisplaySprite
00018F82                            ; ===========================================================================
00018F82                            
00018F82                            Obj73_TubeMain:				; XREF: Obj73_Index
00018F82 2268 0034                  		movea.l	$34(a0),a1
00018F86 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F8C 6600                       		bne.s	loc_18688
00018F8E 4A28 0001                  		tst.b	1(a0)
00018F92 6A00                       		bpl.s	Obj73_TubeDel
00018F94                            
00018F94                            loc_18688:
00018F94 217C 0001 8746 0004        		move.l	#Map_BossItems,4(a0)
00018F9C 317C 246C 0002             		move.w	#$246C,2(a0)
00018FA2 117C 0004 001A             		move.b	#4,$1A(a0)
00018FA8 60AC                       		bra.s	loc_1864A
00018FAA                            ; ===========================================================================
00018FAA                            
00018FAA                            Obj73_TubeDel:
00018FAA 4EF9 0000 DE3A             		jmp	DeleteObject
00018FB0                            ; ===========================================================================
00018FB0                            ; ---------------------------------------------------------------------------
00018FB0                            ; Object 74 - lava that	Eggman drops (MZ)
00018FB0                            ; ---------------------------------------------------------------------------
00018FB0                            
00018FB0                            Obj74:					; XREF: Obj_Index
00018FB0 7000                       		moveq	#0,d0
00018FB2 1028 0024                  		move.b	$24(a0),d0
00018FB6 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018FBA 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018FBE 4EF9 0000 DDFE             		jmp	DisplaySprite
00018FC4                            ; ===========================================================================
00018FC4 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018FC6 0000                       		dc.w Obj74_Action-Obj74_Index
00018FC8 0000                       		dc.w loc_18886-Obj74_Index
00018FCA 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018FCC                            ; ===========================================================================
00018FCC                            
00018FCC                            Obj74_Main:				; XREF: Obj74_Index
00018FCC 117C 0008 0016             		move.b	#8,$16(a0)
00018FD2 117C 0008 0017             		move.b	#8,$17(a0)
00018FD8 217C 0000 BABC 0004        		move.l	#Map_obj14,4(a0)
00018FE0 317C 0345 0002             		move.w	#$345,2(a0)
00018FE6 117C 0004 0001             		move.b	#4,1(a0)
00018FEC 117C 0005 0018             		move.b	#5,$18(a0)
00018FF2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FF8 117C 0008 0019             		move.b	#8,$19(a0)
00018FFE 5428 0024                  		addq.b	#2,$24(a0)
00019002 4A28 0028                  		tst.b	$28(a0)
00019006 6600                       		bne.s	loc_1870A
00019008 117C 008B 0020             		move.b	#$8B,$20(a0)
0001900E 5428 0024                  		addq.b	#2,$24(a0)
00019012 6000 0000                  		bra.w	loc_18886
00019016                            ; ===========================================================================
00019016                            
00019016                            loc_1870A:
00019016 117C 001E 0029             		move.b	#$1E,$29(a0)
0001901C 303C 00AE                  		move.w	#$AE,d0
00019020 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00019026                            
00019026                            Obj74_Action:				; XREF: Obj74_Index
00019026 7000                       		moveq	#0,d0
00019028 1028 0025                  		move.b	$25(a0),d0
0001902C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019030 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019034 4EB9 0000 DDD8             		jsr	SpeedToPos
0001903A 43F9 0000 ECB8             		lea	(Ani_obj14).l,a1
00019040 4EB9 0000 AEBE             		jsr	AnimateSprite
00019046 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001904C 6200                       		bhi.s	Obj74_Delete
0001904E 4E75                       		rts	
00019050                            ; ===========================================================================
00019050                            
00019050                            Obj74_Delete:
00019050 4EF9 0000 DE3A             		jmp	DeleteObject
00019056                            ; ===========================================================================
00019056 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019058 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001905A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001905C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001905E                            ; ===========================================================================
0001905E                            
0001905E                            Obj74_Drop:				; XREF: Obj74_Index2
0001905E 08E8 0001 0022             		bset	#1,$22(a0)
00019064 5328 0029                  		subq.b	#1,$29(a0)
00019068 6A00                       		bpl.s	locret_18780
0001906A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019070 4228 0028                  		clr.b	$28(a0)
00019074 0668 0018 0012             		addi.w	#$18,$12(a0)
0001907A 08A8 0001 0022             		bclr	#1,$22(a0)
00019080 6100 C686                  		bsr.w	ObjHitFloor
00019084 4A41                       		tst.w	d1
00019086 6A00                       		bpl.s	locret_18780
00019088 5428 0025                  		addq.b	#2,$25(a0)
0001908C                            
0001908C                            locret_18780:
0001908C 4E75                       		rts	
0001908E                            ; ===========================================================================
0001908E                            
0001908E                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001908E 5568 000C                  		subq.w	#2,$C(a0)
00019092 08E8 0007 0002             		bset	#7,2(a0)
00019098 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001909E 4268 0012                  		clr.w	$12(a0)
000190A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000190A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000190AE 117C 0003 0029             		move.b	#3,$29(a0)
000190B4 4EB9 0000 E29A             		jsr	SingleObjLoad2
000190BA 6600                       		bne.s	loc_187CA
000190BC 47D1                       		lea	(a1),a3
000190BE 45D0                       		lea	(a0),a2
000190C0 7003                       		moveq	#3,d0
000190C2                            
000190C2                            Obj74_Loop:
000190C2 26DA                       		move.l	(a2)+,(a3)+
000190C4 26DA                       		move.l	(a2)+,(a3)+
000190C6 26DA                       		move.l	(a2)+,(a3)+
000190C8 26DA                       		move.l	(a2)+,(a3)+
000190CA 51C8 FFF6                  		dbf	d0,Obj74_Loop
000190CE                            
000190CE 4469 0010                  		neg.w	$10(a1)
000190D2 5429 0025                  		addq.b	#2,$25(a1)
000190D6                            
000190D6                            loc_187CA:
000190D6 5428 0025                  		addq.b	#2,$25(a0)
000190DA 4E75                       		rts	
000190DC                            
000190DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000190DC                            
000190DC                            
000190DC                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000190DC 4EB9 0000 E29A             		jsr	SingleObjLoad2
000190E2 6600                       		bne.s	locret_187EE
000190E4 3368 0008 0008             		move.w	8(a0),8(a1)
000190EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190F0 12BC 0074                  		move.b	#$74,(a1)
000190F4 337C 0067 0028             		move.w	#$67,$28(a1)
000190FA                            
000190FA                            locret_187EE:
000190FA 4E75                       		rts	
000190FC                            ; End of function Obj74_Duplicate2
000190FC                            
000190FC                            ; ===========================================================================
000190FC                            
000190FC                            Obj74_Duplicate:			; XREF: Obj74_Index2
000190FC 6100 C60A                  		bsr.w	ObjHitFloor
00019100 4A41                       		tst.w	d1
00019102 6A00                       		bpl.s	loc_18826
00019104 3028 0008                  		move.w	8(a0),d0
00019108 0C40 1940                  		cmpi.w	#$1940,d0
0001910C 6E00                       		bgt.s	loc_1882C
0001910E 3228 0030                  		move.w	$30(a0),d1
00019112 B240                       		cmp.w	d0,d1
00019114 6700                       		beq.s	loc_1881E
00019116 0240 0010                  		andi.w	#$10,d0
0001911A 0241 0010                  		andi.w	#$10,d1
0001911E B240                       		cmp.w	d0,d1
00019120 6700                       		beq.s	loc_1881E
00019122 61B8                       		bsr.s	Obj74_Duplicate2
00019124 3168 0008 0032             		move.w	8(a0),$32(a0)
0001912A                            
0001912A                            loc_1881E:
0001912A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019130 4E75                       		rts	
00019132                            ; ===========================================================================
00019132                            
00019132                            loc_18826:
00019132 5428 0025                  		addq.b	#2,$25(a0)
00019136 4E75                       		rts	
00019138                            ; ===========================================================================
00019138                            
00019138                            loc_1882C:
00019138 5428 0024                  		addq.b	#2,$24(a0)
0001913C 4E75                       		rts	
0001913E                            ; ===========================================================================
0001913E                            
0001913E                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001913E 08A8 0001 0022             		bclr	#1,$22(a0)
00019144 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001914A 3028 0008                  		move.w	8(a0),d0
0001914E 9068 0032                  		sub.w	$32(a0),d0
00019152 6A00                       		bpl.s	loc_1884A
00019154 4440                       		neg.w	d0
00019156                            
00019156                            loc_1884A:
00019156 0C40 0012                  		cmpi.w	#$12,d0
0001915A 6600                       		bne.s	loc_18856
0001915C 08A8 0007 0002             		bclr	#7,2(a0)
00019162                            
00019162                            loc_18856:
00019162 6100 C5A4                  		bsr.w	ObjHitFloor
00019166 4A41                       		tst.w	d1
00019168 6A00                       		bpl.s	locret_1887E
0001916A 5328 0029                  		subq.b	#1,$29(a0)
0001916E 6700                       		beq.s	Obj74_Delete2
00019170 4268 0012                  		clr.w	$12(a0)
00019174 3168 0032 0008             		move.w	$32(a0),8(a0)
0001917A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019180 08E8 0007 0002             		bset	#7,2(a0)
00019186 5528 0025                  		subq.b	#2,$25(a0)
0001918A                            
0001918A                            locret_1887E:
0001918A 4E75                       		rts	
0001918C                            ; ===========================================================================
0001918C                            
0001918C                            Obj74_Delete2:
0001918C 4EF9 0000 DE3A             		jmp	DeleteObject
00019192                            ; ===========================================================================
00019192                            
00019192                            loc_18886:				; XREF: Obj74_Index
00019192 08E8 0007 0002             		bset	#7,2(a0)
00019198 5328 0029                  		subq.b	#1,$29(a0)
0001919C 6600                       		bne.s	Obj74_Animate
0001919E 117C 0001 001C             		move.b	#1,$1C(a0)
000191A4 5968 000C                  		subq.w	#4,$C(a0)
000191A8 4228 0020                  		clr.b	$20(a0)
000191AC                            
000191AC                            Obj74_Animate:
000191AC 43F9 0000 ECB8             		lea	(Ani_obj14).l,a1
000191B2 4EF9 0000 AEBE             		jmp	AnimateSprite
000191B8                            ; ===========================================================================
000191B8                            
000191B8                            Obj74_Delete3:				; XREF: Obj74_Index
000191B8 4EF9 0000 DE3A             		jmp	DeleteObject
000191BE                            ; ===========================================================================
000191BE                            
000191BE                            Obj7A_Delete:
000191BE 4EF9 0000 DE3A             		jmp	DeleteObject
000191C4                            ; ===========================================================================
000191C4                            ; ---------------------------------------------------------------------------
000191C4                            ; Object 7A - Eggman (SLZ)
000191C4                            ; ---------------------------------------------------------------------------
000191C4                            
000191C4                            Obj7A:					; XREF: Obj_Index
000191C4 7000                       		moveq	#0,d0
000191C6 1028 0024                  		move.b	$24(a0),d0
000191CA 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000191CE 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000191D2                            ; ===========================================================================
000191D2 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000191D4 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000191D6 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000191D8 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000191DA 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000191DC                            
000191DC 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000191DF 0401 04                    		dc.b 4,	1, 4
000191E2 0607 04                    		dc.b 6,	7, 4
000191E5 0800 03                    		dc.b 8,	0, 3
000191E8                            ; ===========================================================================
000191E8                            
000191E8                            Obj7A_Main:				; XREF: Obj7A_Index
000191E8 317C 2188 0008             		move.w	#$2188,8(a0)
000191EE 317C 0228 000C             		move.w	#$228,$C(a0)
000191F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000191FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019200 117C 000F 0020             		move.b	#$F,$20(a0)
00019206 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001920C 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019210 2248                       		movea.l	a0,a1
00019212 7203                       		moveq	#3,d1
00019214 6000                       		bra.s	Obj7A_LoadBoss
00019216                            ; ===========================================================================
00019216                            
00019216                            Obj7A_Loop:
00019216 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001921C 6600                       		bne.s	loc_1895C
0001921E 12BC 007A                  		move.b	#$7A,0(a1)
00019222 3368 0008 0008             		move.w	8(a0),8(a1)
00019228 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001922E                            
0001922E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001922E 08A8 0000 0022             		bclr	#0,$22(a0)
00019234 4229 0025                  		clr.b	$25(a1)
00019238 135A 0024                  		move.b	(a2)+,$24(a1)
0001923C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019240 135A 0018                  		move.b	(a2)+,$18(a1)
00019244 237C 0001 867E 0004        		move.l	#Map_Eggman,4(a1)
0001924C 337C 0400 0002             		move.w	#$400,2(a1)
00019252 137C 0004 0001             		move.b	#4,1(a1)
00019258 137C 0020 0019             		move.b	#$20,$19(a1)
0001925E 2348 0034                  		move.l	a0,$34(a1)
00019262 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019266                            
00019266                            loc_1895C:
00019266 43F8 D040                  		lea	($FFFFD040).w,a1
0001926A 45E8 002A                  		lea	$2A(a0),a2
0001926E 705E                       		moveq	#$5E,d0
00019270 723E                       		moveq	#$3E,d1
00019272                            
00019272                            loc_18968:
00019272 B011                       		cmp.b	(a1),d0
00019274 6600                       		bne.s	loc_18974
00019276 4A29 0028                  		tst.b	$28(a1)
0001927A 6700                       		beq.s	loc_18974
0001927C 34C9                       		move.w	a1,(a2)+
0001927E                            
0001927E                            loc_18974:
0001927E D2FC 0040                  		adda.w	#$40,a1
00019282 51C9 FFEE                  		dbf	d1,loc_18968
00019286                            
00019286                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019286 7000                       		moveq	#0,d0
00019288 1028 0025                  		move.b	$25(a0),d0
0001928C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019290 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019294 43F9 0001 861A             		lea	(Ani_Eggman).l,a1
0001929A 4EB9 0000 AEBE             		jsr	AnimateSprite
000192A0 7003                       		moveq	#3,d0
000192A2 C028 0022                  		and.b	$22(a0),d0
000192A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000192AC 8128 0001                  		or.b	d0,1(a0)
000192B0 4EF9 0000 DDFE             		jmp	DisplaySprite
000192B6                            ; ===========================================================================
000192B6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000192B8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000192BA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000192BC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000192BE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000192C0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000192C2                            ; ===========================================================================
000192C2                            
000192C2                            loc_189B8:				; XREF: Obj7A_ShipIndex
000192C2 317C FF00 0010             		move.w	#-$100,$10(a0)
000192C8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000192CE 6400                       		bcc.s	loc_189CA
000192D0 5428 0025                  		addq.b	#2,$25(a0)
000192D4                            
000192D4                            loc_189CA:
000192D4 6100 EF02                  		bsr.w	BossMove
000192D8 1028 003F                  		move.b	$3F(a0),d0
000192DC 5428 003F                  		addq.b	#2,$3F(a0)
000192E0 4EB9 0000 2CEC             		jsr	(CalcSine).l
000192E6 EC40                       		asr.w	#6,d0
000192E8 D068 0038                  		add.w	$38(a0),d0
000192EC 3140 000C                  		move.w	d0,$C(a0)
000192F0 3168 0030 0008             		move.w	$30(a0),8(a0)
000192F6 6000                       		bra.s	loc_189FE
000192F8                            ; ===========================================================================
000192F8                            
000192F8                            loc_189EE:
000192F8 6100 EEDE                  		bsr.w	BossMove
000192FC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019302 3168 0030 0008             		move.w	$30(a0),8(a0)
00019308                            
00019308                            loc_189FE:
00019308 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001930E 6400                       		bcc.s	locret_18A44
00019310 4A28 0022                  		tst.b	$22(a0)
00019314 6B00                       		bmi.s	loc_18A46
00019316 4A28 0020                  		tst.b	$20(a0)
0001931A 6600                       		bne.s	locret_18A44
0001931C 4A28 003E                  		tst.b	$3E(a0)
00019320 6600                       		bne.s	loc_18A28
00019322 117C 0020 003E             		move.b	#$20,$3E(a0)
00019328 303C 00AC                  		move.w	#$AC,d0
0001932C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019332                            
00019332                            loc_18A28:
00019332 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019336 7000                       		moveq	#0,d0
00019338 4A51                       		tst.w	(a1)
0001933A 6600                       		bne.s	loc_18A36
0001933C 303C 0EEE                  		move.w	#$EEE,d0
00019340                            
00019340                            loc_18A36:
00019340 3280                       		move.w	d0,(a1)
00019342 5328 003E                  		subq.b	#1,$3E(a0)
00019346 6600                       		bne.s	locret_18A44
00019348 117C 000F 0020             		move.b	#$F,$20(a0)
0001934E                            
0001934E                            locret_18A44:
0001934E 4E75                       		rts	
00019350                            ; ===========================================================================
00019350                            
00019350                            loc_18A46:
00019350 7064                       		moveq	#100,d0
00019352 6100 0000                  		bsr.w	AddPoints
00019356 117C 0006 0025             		move.b	#6,$25(a0)
0001935C 117C 0078 003C             		move.b	#$78,$3C(a0)
00019362 4268 0010                  		clr.w	$10(a0)
00019366 4E75                       		rts	
00019368                            ; ===========================================================================
00019368                            
00019368                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019368 3028 0030                  		move.w	$30(a0),d0
0001936C 317C 0200 0010             		move.w	#$200,$10(a0)
00019372 0828 0000 0022             		btst	#0,$22(a0)
00019378 6600                       		bne.s	loc_18A7C
0001937A 4468 0010                  		neg.w	$10(a0)
0001937E 0C40 2008                  		cmpi.w	#$2008,d0
00019382 6E00                       		bgt.s	loc_18A88
00019384 6000                       		bra.s	loc_18A82
00019386                            ; ===========================================================================
00019386                            
00019386                            loc_18A7C:
00019386 0C40 2138                  		cmpi.w	#$2138,d0
0001938A 6D00                       		blt.s	loc_18A88
0001938C                            
0001938C                            loc_18A82:
0001938C 0868 0000 0022             		bchg	#0,$22(a0)
00019392                            
00019392                            loc_18A88:
00019392 3028 0008                  		move.w	8(a0),d0
00019396 72FF                       		moveq	#-1,d1
00019398 7402                       		moveq	#2,d2
0001939A 45E8 002A                  		lea	$2A(a0),a2
0001939E 7828                       		moveq	#$28,d4
000193A0 4A68 0010                  		tst.w	$10(a0)
000193A4 6A00                       		bpl.s	loc_18A9E
000193A6 4444                       		neg.w	d4
000193A8                            
000193A8                            loc_18A9E:
000193A8 321A                       		move.w	(a2)+,d1
000193AA 2641                       		movea.l	d1,a3
000193AC 082B 0003 0022             		btst	#3,$22(a3)
000193B2 6600                       		bne.s	loc_18AB4
000193B4 362B 0008                  		move.w	8(a3),d3
000193B8 D644                       		add.w	d4,d3
000193BA 9640                       		sub.w	d0,d3
000193BC 6700                       		beq.s	loc_18AC0
000193BE                            
000193BE                            loc_18AB4:
000193BE 51CA FFE8                  		dbf	d2,loc_18A9E
000193C2                            
000193C2 1142 0028                  		move.b	d2,$28(a0)
000193C6 6000 FF0C                  		bra.w	loc_189CA
000193CA                            ; ===========================================================================
000193CA                            
000193CA                            loc_18AC0:
000193CA 1142 0028                  		move.b	d2,$28(a0)
000193CE 5428 0025                  		addq.b	#2,$25(a0)
000193D2 117C 0028 003C             		move.b	#$28,$3C(a0)
000193D8 6000 FEFA                  		bra.w	loc_189CA
000193DC                            ; ===========================================================================
000193DC                            
000193DC                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000193DC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000193E2 6600                       		bne.s	loc_18B36
000193E4 70FF                       		moveq	#-1,d0
000193E6 1028 0028                  		move.b	$28(a0),d0
000193EA 4880                       		ext.w	d0
000193EC 6B00                       		bmi.s	loc_18B40
000193EE 5540                       		subq.w	#2,d0
000193F0 4440                       		neg.w	d0
000193F2 D040                       		add.w	d0,d0
000193F4 43E8 002A                  		lea	$2A(a0),a1
000193F8 3031 0000                  		move.w	(a1,d0.w),d0
000193FC 2440                       		movea.l	d0,a2
000193FE 43F8 D040                  		lea	($FFFFD040).w,a1
00019402 723E                       		moveq	#$3E,d1
00019404                            
00019404                            loc_18AFA:
00019404 B0A9 003C                  		cmp.l	$3C(a1),d0
00019408 6700                       		beq.s	loc_18B40
0001940A D2FC 0040                  		adda.w	#$40,a1
0001940E 51C9 FFF4                  		dbf	d1,loc_18AFA
00019412                            
00019412 2F08                       		move.l	a0,-(sp)
00019414 41D2                       		lea	(a2),a0
00019416 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001941C 205F                       		movea.l	(sp)+,a0
0001941E 6600                       		bne.s	loc_18B40
00019420 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019424 3368 0008 0008             		move.w	8(a0),8(a1)
0001942A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019430 0669 0020 000C             		addi.w	#$20,$C(a1)
00019436 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001943C 234A 003C                  		move.l	a2,$3C(a1)
00019440                            
00019440                            loc_18B36:
00019440 5328 003C                  		subq.b	#1,$3C(a0)
00019444 6700                       		beq.s	loc_18B40
00019446 6000 FEC0                  		bra.w	loc_189FE
0001944A                            ; ===========================================================================
0001944A                            
0001944A                            loc_18B40:
0001944A 5528 0025                  		subq.b	#2,$25(a0)
0001944E 6000 FE84                  		bra.w	loc_189CA
00019452                            ; ===========================================================================
00019452                            
00019452                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019452 5328 003C                  		subq.b	#1,$3C(a0)
00019456 6B00                       		bmi.s	loc_18B52
00019458 6000 ED3C                  		bra.w	BossDefeated
0001945C                            ; ===========================================================================
0001945C                            
0001945C                            loc_18B52:
0001945C 5428 0025                  		addq.b	#2,$25(a0)
00019460 4268 0012                  		clr.w	$12(a0)
00019464 08E8 0000 0022             		bset	#0,$22(a0)
0001946A 08A8 0007 0022             		bclr	#7,$22(a0)
00019470 4268 0010                  		clr.w	$10(a0)
00019474 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001947A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001947E 6600                       		bne.s	loc_18B7C
00019480 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019486                            
00019486                            loc_18B7C:
00019486 6000 FE80                  		bra.w	loc_189FE
0001948A                            ; ===========================================================================
0001948A                            
0001948A                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001948A 5228 003C                  		addq.b	#1,$3C(a0)
0001948E 6700                       		beq.s	loc_18B90
00019490 6A00                       		bpl.s	loc_18B96
00019492 0668 0018 0012             		addi.w	#$18,$12(a0)
00019498 6000                       		bra.s	loc_18BC2
0001949A                            ; ===========================================================================
0001949A                            
0001949A                            loc_18B90:
0001949A 4268 0012                  		clr.w	$12(a0)
0001949E 6000                       		bra.s	loc_18BC2
000194A0                            ; ===========================================================================
000194A0                            
000194A0                            loc_18B96:
000194A0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000194A6 6500                       		bcs.s	loc_18BAE
000194A8 6700                       		beq.s	loc_18BB4
000194AA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000194B0 6500                       		bcs.s	loc_18BC2
000194B2 5428 0025                  		addq.b	#2,$25(a0)
000194B6 6000                       		bra.s	loc_18BC2
000194B8                            ; ===========================================================================
000194B8                            
000194B8                            loc_18BAE:
000194B8 5168 0012                  		subq.w	#8,$12(a0)
000194BC 6000                       		bra.s	loc_18BC2
000194BE                            ; ===========================================================================
000194BE                            
000194BE                            loc_18BB4:
000194BE 4268 0012                  		clr.w	$12(a0)
000194C2 303C 0084                  		move.w	#$84,d0
000194C6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
000194CC                            
000194CC                            loc_18BC2:
000194CC 6000 FE2A                  		bra.w	loc_189EE
000194D0                            ; ===========================================================================
000194D0                            
000194D0                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000194D0 317C 0400 0010             		move.w	#$400,$10(a0)
000194D6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000194DC 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000194E2 6400                       		bcc.s	loc_18BE0
000194E4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000194E8 6000                       		bra.s	loc_18BE8
000194EA                            ; ===========================================================================
000194EA                            
000194EA                            loc_18BE0:
000194EA 4A28 0001                  		tst.b	1(a0)
000194EE 6A00 FCCE                  		bpl.w	Obj7A_Delete
000194F2                            
000194F2                            loc_18BE8:
000194F2 6100 ECE4                  		bsr.w	BossMove
000194F6 6000 FDDC                  		bra.w	loc_189CA
000194FA                            ; ===========================================================================
000194FA                            
000194FA                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000194FA 7000                       		moveq	#0,d0
000194FC 7201                       		moveq	#1,d1
000194FE 2268 0034                  		movea.l	$34(a0),a1
00019502 1029 0025                  		move.b	$25(a1),d0
00019506 0C00 0006                  		cmpi.b	#6,d0
0001950A 6B00                       		bmi.s	loc_18C06
0001950C 720A                       		moveq	#$A,d1
0001950E 6000                       		bra.s	loc_18C1A
00019510                            ; ===========================================================================
00019510                            
00019510                            loc_18C06:
00019510 4A29 0020                  		tst.b	$20(a1)
00019514 6600                       		bne.s	loc_18C10
00019516 7205                       		moveq	#5,d1
00019518 6000                       		bra.s	loc_18C1A
0001951A                            ; ===========================================================================
0001951A                            
0001951A                            loc_18C10:
0001951A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019520 6500                       		bcs.s	loc_18C1A
00019522 7204                       		moveq	#4,d1
00019524                            
00019524                            loc_18C1A:
00019524 1141 001C                  		move.b	d1,$1C(a0)
00019528 0C00 000A                  		cmpi.b	#$A,d0
0001952C 6600                       		bne.s	loc_18C32
0001952E 117C 0006 001C             		move.b	#6,$1C(a0)
00019534 4A28 0001                  		tst.b	1(a0)
00019538 6A00 FC84                  		bpl.w	Obj7A_Delete
0001953C                            
0001953C                            loc_18C32:
0001953C 6000                       		bra.s	loc_18C6C
0001953E                            ; ===========================================================================
0001953E                            
0001953E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001953E 117C 0008 001C             		move.b	#8,$1C(a0)
00019544 2268 0034                  		movea.l	$34(a0),a1
00019548 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001954E 6600                       		bne.s	loc_18C56
00019550 4A28 0001                  		tst.b	1(a0)
00019554 6A00 FC68                  		bpl.w	Obj7A_Delete
00019558 117C 000B 001C             		move.b	#$B,$1C(a0)
0001955E 6000                       		bra.s	loc_18C6C
00019560                            ; ===========================================================================
00019560                            
00019560                            loc_18C56:
00019560 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019566 6E00                       		bgt.s	loc_18C6C
00019568 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001956E 6D00                       		blt.s	loc_18C6C
00019570 117C 0007 001C             		move.b	#7,$1C(a0)
00019576                            
00019576                            loc_18C6C:
00019576 43F9 0001 861A             		lea	(Ani_Eggman).l,a1
0001957C 4EB9 0000 AEBE             		jsr	AnimateSprite
00019582                            
00019582                            loc_18C78:
00019582 2268 0034                  		movea.l	$34(a0),a1
00019586 3169 0008 0008             		move.w	8(a1),8(a0)
0001958C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019592 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019598 7003                       		moveq	#3,d0
0001959A C028 0022                  		and.b	$22(a0),d0
0001959E 0228 00FC 0001             		andi.b	#-4,1(a0)
000195A4 8128 0001                  		or.b	d0,1(a0)
000195A8 4EF9 0000 DDFE             		jmp	DisplaySprite
000195AE                            ; ===========================================================================
000195AE                            
000195AE                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000195AE 2268 0034                  		movea.l	$34(a0),a1
000195B2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000195B8 6600                       		bne.s	loc_18CB8
000195BA 4A28 0001                  		tst.b	1(a0)
000195BE 6A00 FBFE                  		bpl.w	Obj7A_Delete
000195C2                            
000195C2                            loc_18CB8:
000195C2 217C 0001 8746 0004        		move.l	#Map_BossItems,4(a0)
000195CA 317C 246C 0002             		move.w	#$246C,2(a0)
000195D0 117C 0003 001A             		move.b	#3,$1A(a0)
000195D6 60AA                       		bra.s	loc_18C78
000195D8                            ; ===========================================================================
000195D8                            ; ---------------------------------------------------------------------------
000195D8                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000195D8                            ; ---------------------------------------------------------------------------
000195D8                            
000195D8                            Obj7B:					; XREF: Obj_Index
000195D8 7000                       		moveq	#0,d0
000195DA 1028 0024                  		move.b	$24(a0),d0
000195DE 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000195E2 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000195E6 3028 0030                  		move.w	$30(a0),d0
000195EA 0240 FF80                  		andi.w	#$FF80,d0
000195EE 3238 F700                  		move.w	($FFFFF700).w,d1
000195F2 0441 0080                  		subi.w	#$80,d1
000195F6 0241 FF80                  		andi.w	#$FF80,d1
000195FA 9041                       		sub.w	d1,d0
000195FC 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019600 0C40 0280                  		cmpi.w	#$280,d0
00019604 6200 FBB8                  		bhi.w	Obj7A_Delete
00019608 4EF9 0000 DDFE             		jmp	DisplaySprite
0001960E                            ; ===========================================================================
0001960E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019610 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019612 0000                       		dc.w loc_18DC6-Obj7B_Index
00019614 0000                       		dc.w loc_18EAA-Obj7B_Index
00019616 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019618 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001961A                            ; ===========================================================================
0001961A                            
0001961A                            Obj7B_Main:				; XREF: Obj7B_Index
0001961A 217C 0001 21C4 0004        		move.l	#Map_obj5Ea,4(a0)
00019622 317C 0518 0002             		move.w	#$518,2(a0)
00019628 117C 0001 001A             		move.b	#1,$1A(a0)
0001962E 0028 0004 0001             		ori.b	#4,1(a0)
00019634 117C 0004 0018             		move.b	#4,$18(a0)
0001963A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019640 117C 000C 0019             		move.b	#$C,$19(a0)
00019646 2268 003C                  		movea.l	$3C(a0),a1
0001964A 3169 0008 0030             		move.w	8(a1),$30(a0)
00019650 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019656 08E8 0000 0022             		bset	#0,$22(a0)
0001965C 3028 0008                  		move.w	8(a0),d0
00019660 B069 0008                  		cmp.w	8(a1),d0
00019664 6E00                       		bgt.s	loc_18D68
00019666 08A8 0000 0022             		bclr	#0,$22(a0)
0001966C 117C 0002 003A             		move.b	#2,$3A(a0)
00019672                            
00019672                            loc_18D68:
00019672 5428 0024                  		addq.b	#2,$24(a0)
00019676                            
00019676                            Obj7B_Fall:				; XREF: Obj7B_Index
00019676 4EB9 0000 DDAC             		jsr	ObjectFall
0001967C 2268 003C                  		movea.l	$3C(a0),a1
00019680 45F9 0000 0000             		lea	(word_19018).l,a2
00019686 7000                       		moveq	#0,d0
00019688 1029 001A                  		move.b	$1A(a1),d0
0001968C 3228 0008                  		move.w	8(a0),d1
00019690 9268 0030                  		sub.w	$30(a0),d1
00019694 6400                       		bcc.s	loc_18D8E
00019696 5440                       		addq.w	#2,d0
00019698                            
00019698                            loc_18D8E:
00019698 D040                       		add.w	d0,d0
0001969A 3228 0034                  		move.w	$34(a0),d1
0001969E D272 0000                  		add.w	(a2,d0.w),d1
000196A2 B268 000C                  		cmp.w	$C(a0),d1
000196A6 6E00                       		bgt.s	locret_18DC4
000196A8 2268 003C                  		movea.l	$3C(a0),a1
000196AC 7202                       		moveq	#2,d1
000196AE 0828 0000 0022             		btst	#0,$22(a0)
000196B4 6700                       		beq.s	loc_18DAE
000196B6 7200                       		moveq	#0,d1
000196B8                            
000196B8                            loc_18DAE:
000196B8 317C 00F0 0028             		move.w	#$F0,$28(a0)
000196BE 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000196C4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000196CA 6000 0000                  		bra.w	loc_18FA2
000196CE                            ; ===========================================================================
000196CE                            
000196CE                            locret_18DC4:
000196CE 4E75                       		rts	
000196D0                            ; ===========================================================================
000196D0                            
000196D0                            loc_18DC6:				; XREF: Obj7B_Index
000196D0 2268 003C                  		movea.l	$3C(a0),a1
000196D4 7000                       		moveq	#0,d0
000196D6 1028 003A                  		move.b	$3A(a0),d0
000196DA 9029 003A                  		sub.b	$3A(a1),d0
000196DE 6700                       		beq.s	loc_18E2A
000196E0 6400                       		bcc.s	loc_18DDA
000196E2 4400                       		neg.b	d0
000196E4                            
000196E4                            loc_18DDA:
000196E4 323C F7E8                  		move.w	#-$818,d1
000196E8 343C FEEC                  		move.w	#-$114,d2
000196EC 0C00 0001                  		cmpi.b	#1,d0
000196F0 6700                       		beq.s	loc_18E00
000196F2 323C F6A0                  		move.w	#-$960,d1
000196F6 343C FF0C                  		move.w	#-$F4,d2
000196FA 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019700 6D00                       		blt.s	loc_18E00
00019702 323C F5E0                  		move.w	#-$A20,d1
00019706 343C FF80                  		move.w	#-$80,d2
0001970A                            
0001970A                            loc_18E00:
0001970A 3141 0012                  		move.w	d1,$12(a0)
0001970E 3142 0010                  		move.w	d2,$10(a0)
00019712 3028 0008                  		move.w	8(a0),d0
00019716 9068 0030                  		sub.w	$30(a0),d0
0001971A 6400                       		bcc.s	loc_18E16
0001971C 4468 0010                  		neg.w	$10(a0)
00019720                            
00019720                            loc_18E16:
00019720 117C 0001 001A             		move.b	#1,$1A(a0)
00019726 317C 0020 0028             		move.w	#$20,$28(a0)
0001972C 5428 0024                  		addq.b	#2,$24(a0)
00019730 6000 0000                  		bra.w	loc_18EAA
00019734                            ; ===========================================================================
00019734                            
00019734                            loc_18E2A:				; XREF: loc_18DC6
00019734 45F9 0000 0000             		lea	(word_19018).l,a2
0001973A 7000                       		moveq	#0,d0
0001973C 1029 001A                  		move.b	$1A(a1),d0
00019740 343C 0028                  		move.w	#$28,d2
00019744 3228 0008                  		move.w	8(a0),d1
00019748 9268 0030                  		sub.w	$30(a0),d1
0001974C 6400                       		bcc.s	loc_18E48
0001974E 4442                       		neg.w	d2
00019750 5440                       		addq.w	#2,d0
00019752                            
00019752                            loc_18E48:
00019752 D040                       		add.w	d0,d0
00019754 3228 0034                  		move.w	$34(a0),d1
00019758 D272 0000                  		add.w	(a2,d0.w),d1
0001975C 3141 000C                  		move.w	d1,$C(a0)
00019760 D468 0030                  		add.w	$30(a0),d2
00019764 3142 0008                  		move.w	d2,8(a0)
00019768 4268 000E                  		clr.w	$E(a0)
0001976C 4268 000A                  		clr.w	$A(a0)
00019770 5368 0028                  		subq.w	#1,$28(a0)
00019774 6600                       		bne.s	loc_18E7A
00019776 317C 0020 0028             		move.w	#$20,$28(a0)
0001977C 117C 0008 0024             		move.b	#8,$24(a0)
00019782 4E75                       		rts	
00019784                            ; ===========================================================================
00019784                            
00019784                            loc_18E7A:
00019784 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001978A 6600                       		bne.s	loc_18E88
0001978C 117C 0005 001F             		move.b	#5,$1F(a0)
00019792                            
00019792                            loc_18E88:
00019792 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019798 6600                       		bne.s	loc_18E96
0001979A 117C 0002 001F             		move.b	#2,$1F(a0)
000197A0                            
000197A0                            loc_18E96:
000197A0 5328 001E                  		subq.b	#1,$1E(a0)
000197A4 6E00                       		bgt.s	locret_18EA8
000197A6 0868 0000 001A             		bchg	#0,$1A(a0)
000197AC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000197B2                            
000197B2                            locret_18EA8:
000197B2 4E75                       		rts	
000197B4                            ; ===========================================================================
000197B4                            
000197B4                            loc_18EAA:				; XREF: Obj7B_Index
000197B4 43F8 D040                  		lea	($FFFFD040).w,a1
000197B8 707A                       		moveq	#$7A,d0
000197BA 7240                       		moveq	#$40,d1
000197BC 743E                       		moveq	#$3E,d2
000197BE                            
000197BE                            loc_18EB4:
000197BE B011                       		cmp.b	(a1),d0
000197C0 6700                       		beq.s	loc_18EC0
000197C2 D2C1                       		adda.w	d1,a1
000197C4 51CA FFF8                  		dbf	d2,loc_18EB4
000197C8                            
000197C8 6000                       		bra.s	loc_18F38
000197CA                            ; ===========================================================================
000197CA                            
000197CA                            loc_18EC0:
000197CA 3029 0008                  		move.w	8(a1),d0
000197CE 3229 000C                  		move.w	$C(a1),d1
000197D2 3428 0008                  		move.w	8(a0),d2
000197D6 3628 000C                  		move.w	$C(a0),d3
000197DA 45FA 0000                  		lea	byte_19022(pc),a2
000197DE 47FA 0000                  		lea	byte_19026(pc),a3
000197E2 181A                       		move.b	(a2)+,d4
000197E4 4884                       		ext.w	d4
000197E6 D044                       		add.w	d4,d0
000197E8 181B                       		move.b	(a3)+,d4
000197EA 4884                       		ext.w	d4
000197EC D444                       		add.w	d4,d2
000197EE B440                       		cmp.w	d0,d2
000197F0 6500                       		bcs.s	loc_18F38
000197F2 181A                       		move.b	(a2)+,d4
000197F4 4884                       		ext.w	d4
000197F6 D044                       		add.w	d4,d0
000197F8 181B                       		move.b	(a3)+,d4
000197FA 4884                       		ext.w	d4
000197FC D444                       		add.w	d4,d2
000197FE B042                       		cmp.w	d2,d0
00019800 6500                       		bcs.s	loc_18F38
00019802 181A                       		move.b	(a2)+,d4
00019804 4884                       		ext.w	d4
00019806 D244                       		add.w	d4,d1
00019808 181B                       		move.b	(a3)+,d4
0001980A 4884                       		ext.w	d4
0001980C D644                       		add.w	d4,d3
0001980E B641                       		cmp.w	d1,d3
00019810 6500                       		bcs.s	loc_18F38
00019812 181A                       		move.b	(a2)+,d4
00019814 4884                       		ext.w	d4
00019816 D244                       		add.w	d4,d1
00019818 181B                       		move.b	(a3)+,d4
0001981A 4884                       		ext.w	d4
0001981C D644                       		add.w	d4,d3
0001981E B243                       		cmp.w	d3,d1
00019820 6500                       		bcs.s	loc_18F38
00019822 5428 0024                  		addq.b	#2,$24(a0)
00019826 4268 0028                  		clr.w	$28(a0)
0001982A 4229 0020                  		clr.b	$20(a1)
0001982E 5329 0021                  		subq.b	#1,$21(a1)
00019832 6600                       		bne.s	loc_18F38
00019834 08E9 0007 0022             		bset	#7,$22(a1)
0001983A 4268 0010                  		clr.w	$10(a0)
0001983E 4268 0012                  		clr.w	$12(a0)
00019842                            
00019842                            loc_18F38:
00019842 4A68 0012                  		tst.w	$12(a0)
00019846 6A00                       		bpl.s	loc_18F5C
00019848 4EB9 0000 DDAC             		jsr	ObjectFall
0001984E 3028 0034                  		move.w	$34(a0),d0
00019852 0440 002F                  		subi.w	#$2F,d0
00019856 B068 000C                  		cmp.w	$C(a0),d0
0001985A 6E00                       		bgt.s	loc_18F58
0001985C 4EB9 0000 DDAC             		jsr	ObjectFall
00019862                            
00019862                            loc_18F58:
00019862 6000 FF20                  		bra.w	loc_18E7A
00019866                            ; ===========================================================================
00019866                            
00019866                            loc_18F5C:
00019866 4EB9 0000 DDAC             		jsr	ObjectFall
0001986C 2268 003C                  		movea.l	$3C(a0),a1
00019870 45F9 0000 0000             		lea	(word_19018).l,a2
00019876 7000                       		moveq	#0,d0
00019878 1029 001A                  		move.b	$1A(a1),d0
0001987C 3228 0008                  		move.w	8(a0),d1
00019880 9268 0030                  		sub.w	$30(a0),d1
00019884 6400                       		bcc.s	loc_18F7E
00019886 5440                       		addq.w	#2,d0
00019888                            
00019888                            loc_18F7E:
00019888 D040                       		add.w	d0,d0
0001988A 3228 0034                  		move.w	$34(a0),d1
0001988E D272 0000                  		add.w	(a2,d0.w),d1
00019892 B268 000C                  		cmp.w	$C(a0),d1
00019896 6ECA                       		bgt.s	loc_18F58
00019898 2268 003C                  		movea.l	$3C(a0),a1
0001989C 7202                       		moveq	#2,d1
0001989E 4A68 0010                  		tst.w	$10(a0)
000198A2 6B00                       		bmi.s	loc_18F9C
000198A4 7200                       		moveq	#0,d1
000198A6                            
000198A6                            loc_18F9C:
000198A6 317C 0000 0028             		move.w	#0,$28(a0)
000198AC                            
000198AC                            loc_18FA2:
000198AC 1341 003A                  		move.b	d1,$3A(a1)
000198B0 1141 003A                  		move.b	d1,$3A(a0)
000198B4 B229 001A                  		cmp.b	$1A(a1),d1
000198B8 6700                       		beq.s	loc_19008
000198BA 08A9 0003 0022             		bclr	#3,$22(a1)
000198C0 6700                       		beq.s	loc_19008
000198C2 4229 0025                  		clr.b	$25(a1)
000198C6 137C 0002 0024             		move.b	#2,$24(a1)
000198CC 45F8 D000                  		lea	($FFFFD000).w,a2
000198D0 3568 0012 0012             		move.w	$12(a0),$12(a2)
000198D6 446A 0012                  		neg.w	$12(a2)
000198DA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000198E0 6600                       		bne.s	loc_18FDC
000198E2 E0EA 0012                  		asr	$12(a2)
000198E6                            
000198E6                            loc_18FDC:
000198E6 08EA 0001 0022             		bset	#1,$22(a2)
000198EC 08AA 0003 0022             		bclr	#3,$22(a2)
000198F2 422A 003C                  		clr.b	$3C(a2)
000198F6 2F08                       		move.l	a0,-(sp)
000198F8 41D2                       		lea	(a2),a0
000198FA 4EBA A34A                  		jsr	Obj01_ChkRoll
000198FE 205F                       		movea.l	(sp)+,a0
00019900 157C 0002 0024             		move.b	#2,$24(a2)
00019906 303C 00CC                  		move.w	#$CC,d0
0001990A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019910                            
00019910                            loc_19008:
00019910 4268 0010                  		clr.w	$10(a0)
00019914 4268 0012                  		clr.w	$12(a0)
00019918 5428 0024                  		addq.b	#2,$24(a0)
0001991C 6000 FE66                  		bra.w	loc_18E7A
00019920                            ; ===========================================================================
00019920 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001992A                            		even
0001992A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001992E                            		even
0001992E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019932                            		even
00019932                            ; ===========================================================================
00019932                            
00019932                            Obj7B_Explode:				; XREF: Obj7B_Index
00019932 10BC 003F                  		move.b	#$3F,(a0)
00019936 4228 0024                  		clr.b	$24(a0)
0001993A 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019940 6700                       		beq.s	Obj7B_MakeFrag
00019942 4E75                       		rts	
00019944                            ; ===========================================================================
00019944                            
00019944                            Obj7B_MakeFrag:
00019944 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001994A 7203                       		moveq	#3,d1
0001994C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019950                            
00019950                            Obj7B_Loop:
00019950 4EB9 0000 E284             		jsr	SingleObjLoad
00019956 6600                       		bne.s	loc_1909A
00019958 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001995C 137C 000A 0024             		move.b	#$A,$24(a1)
00019962 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001996A 137C 0003 0018             		move.b	#3,$18(a1)
00019970 337C 0518 0002             		move.w	#$518,2(a1)
00019976 3368 0008 0008             		move.w	8(a0),8(a1)
0001997C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019982 335A 0010                  		move.w	(a2)+,$10(a1)
00019986 335A 0012                  		move.w	(a2)+,$12(a1)
0001998A 137C 0098 0020             		move.b	#$98,$20(a1)
00019990 0029 0004 0001             		ori.b	#4,1(a1)
00019996 08E9 0007 0001             		bset	#7,1(a1)
0001999C 137C 000C 0019             		move.b	#$C,$19(a1)
000199A2                            
000199A2                            loc_1909A:
000199A2 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000199A6                            
000199A6 4E75                       		rts	
000199A8                            ; ===========================================================================
000199A8 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000199AC FF60 FDC0                  		dc.w $FF60, $FDC0
000199B0 0100 FCC0                  		dc.w $100, $FCC0
000199B4 00A0 FDC0                  		dc.w $A0, $FDC0
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000199B8 4EB9 0000 DDD8             		jsr	SpeedToPos
000199BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000199C4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000199CA 0668 0018 0012             		addi.w	#$18,$12(a0)
000199D0 7004                       		moveq	#4,d0
000199D2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000199D6 E448                       		lsr.w	#2,d0
000199D8 1140 001A                  		move.b	d0,$1A(a0)
000199DC 4A28 0001                  		tst.b	1(a0)
000199E0 6A00 F7DC                  		bpl.w	Obj7A_Delete
000199E4 4E75                       		rts	
000199E6                            ; ===========================================================================
000199E6                            ; ---------------------------------------------------------------------------
000199E6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199E6                            ; ---------------------------------------------------------------------------
000199E6                            Map_obj7B:
000199E6                            	include "_maps\obj7B.asm"
000199E6                            ; ---------------------------------------------------------------------------
000199E6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199E6                            ; ---------------------------------------------------------------------------
000199E6 0000                       		dc.w byte_190E2-Map_obj7B
000199E8 0000                       		dc.w byte_190E8-Map_obj7B
000199EA 01                         byte_190E2:	dc.b 1
000199EB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000199F0 01                         byte_190E8:	dc.b 1
000199F1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000199F6                            		even
000199F6                            		even
000199F6                            
000199F6                            ; ===========================================================================
000199F6                            ; ---------------------------------------------------------------------------
000199F6                            ; Object 75 - Eggman (SYZ)
000199F6                            ; ---------------------------------------------------------------------------
000199F6                            
000199F6                            Obj75:					; XREF: Obj_Index
000199F6 7000                       		moveq	#0,d0
000199F8 1028 0024                  		move.b	$24(a0),d0
000199FC 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019A00 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019A04                            ; ===========================================================================
00019A04 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019A06 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019A08 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019A0A 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019A0C 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019A0E                            
00019A0E 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019A11 0401 05                    		dc.b 4,	1, 5
00019A14 0607 05                    		dc.b 6,	7, 5
00019A17 0800 05                    		dc.b 8,	0, 5
00019A1A                            ; ===========================================================================
00019A1A                            
00019A1A                            Obj75_Main:				; XREF: Obj75_Index
00019A1A 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019A20 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019A26 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A2C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A32 117C 000F 0020             		move.b	#$F,$20(a0)
00019A38 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019A3E 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019A42 2248                       		movea.l	a0,a1
00019A44 7203                       		moveq	#3,d1
00019A46 6000                       		bra.s	Obj75_LoadBoss
00019A48                            ; ===========================================================================
00019A48                            
00019A48                            Obj75_Loop:
00019A48 4EB9 0000 E29A             		jsr	SingleObjLoad2
00019A4E 6600                       		bne.s	Obj75_ShipMain
00019A50 12BC 0075                  		move.b	#$75,(a1)
00019A54 3368 0008 0008             		move.w	8(a0),8(a1)
00019A5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A60                            
00019A60                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019A60 08A8 0000 0022             		bclr	#0,$22(a0)
00019A66 4229 0025                  		clr.b	$25(a1)
00019A6A 135A 0024                  		move.b	(a2)+,$24(a1)
00019A6E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A72 135A 0018                  		move.b	(a2)+,$18(a1)
00019A76 237C 0001 867E 0004        		move.l	#Map_Eggman,4(a1)
00019A7E 337C 0400 0002             		move.w	#$400,2(a1)
00019A84 137C 0004 0001             		move.b	#4,1(a1)
00019A8A 137C 0020 0019             		move.b	#$20,$19(a1)
00019A90 2348 0034                  		move.l	a0,$34(a1)
00019A94 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019A98                            
00019A98                            Obj75_ShipMain:				; XREF: Obj75_Index
00019A98 7000                       		moveq	#0,d0
00019A9A 1028 0025                  		move.b	$25(a0),d0
00019A9E 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019AA2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019AA6 43F9 0001 861A             		lea	(Ani_Eggman).l,a1
00019AAC 4EB9 0000 AEBE             		jsr	AnimateSprite
00019AB2 7003                       		moveq	#3,d0
00019AB4 C028 0022                  		and.b	$22(a0),d0
00019AB8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019ABE 8128 0001                  		or.b	d0,1(a0)
00019AC2 4EF9 0000 DDFE             		jmp	DisplaySprite
00019AC8                            ; ===========================================================================
00019AC8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019ACC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019AD0 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019AD4                            ; ===========================================================================
00019AD4                            
00019AD4                            loc_191CC:				; XREF: Obj75_ShipIndex
00019AD4 317C FF00 0010             		move.w	#-$100,$10(a0)
00019ADA 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019AE0 6400                       		bcc.s	loc_191DE
00019AE2 5428 0025                  		addq.b	#2,$25(a0)
00019AE6                            
00019AE6                            loc_191DE:
00019AE6 1028 003F                  		move.b	$3F(a0),d0
00019AEA 5428 003F                  		addq.b	#2,$3F(a0)
00019AEE 4EB9 0000 2CEC             		jsr	(CalcSine).l
00019AF4 E440                       		asr.w	#2,d0
00019AF6 3140 0012                  		move.w	d0,$12(a0)
00019AFA                            
00019AFA                            loc_191F2:
00019AFA 6100 E6DC                  		bsr.w	BossMove
00019AFE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019B04 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B0A                            
00019B0A                            loc_19202:
00019B0A 3028 0008                  		move.w	8(a0),d0
00019B0E 0440 2C00                  		subi.w	#$2C00,d0
00019B12 EA48                       		lsr.w	#5,d0
00019B14 1140 0034                  		move.b	d0,$34(a0)
00019B18 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019B1E 6400                       		bcc.s	locret_19256
00019B20 4A28 0022                  		tst.b	$22(a0)
00019B24 6B00                       		bmi.s	loc_19258
00019B26 4A28 0020                  		tst.b	$20(a0)
00019B2A 6600                       		bne.s	locret_19256
00019B2C 4A28 003E                  		tst.b	$3E(a0)
00019B30 6600                       		bne.s	loc_1923A
00019B32 117C 0020 003E             		move.b	#$20,$3E(a0)
00019B38 303C 00AC                  		move.w	#$AC,d0
00019B3C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019B42                            
00019B42                            loc_1923A:
00019B42 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019B46 7000                       		moveq	#0,d0
00019B48 4A51                       		tst.w	(a1)
00019B4A 6600                       		bne.s	loc_19248
00019B4C 303C 0EEE                  		move.w	#$EEE,d0
00019B50                            
00019B50                            loc_19248:
00019B50 3280                       		move.w	d0,(a1)
00019B52 5328 003E                  		subq.b	#1,$3E(a0)
00019B56 6600                       		bne.s	locret_19256
00019B58 117C 000F 0020             		move.b	#$F,$20(a0)
00019B5E                            
00019B5E                            locret_19256:
00019B5E 4E75                       		rts	
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            loc_19258:				; XREF: loc_19202
00019B60 7064                       		moveq	#100,d0
00019B62 6100 0000                  		bsr.w	AddPoints
00019B66 117C 0006 0025             		move.b	#6,$25(a0)
00019B6C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019B72 4268 0010                  		clr.w	$10(a0)
00019B76 4E75                       		rts	
00019B78                            ; ===========================================================================
00019B78                            
00019B78                            loc_19270:				; XREF: Obj75_ShipIndex
00019B78 3028 0030                  		move.w	$30(a0),d0
00019B7C 317C 0140 0010             		move.w	#$140,$10(a0)
00019B82 0828 0000 0022             		btst	#0,$22(a0)
00019B88 6600                       		bne.s	loc_1928E
00019B8A 4468 0010                  		neg.w	$10(a0)
00019B8E 0C40 2C08                  		cmpi.w	#$2C08,d0
00019B92 6E00                       		bgt.s	loc_1929E
00019B94 6000                       		bra.s	loc_19294
00019B96                            ; ===========================================================================
00019B96                            
00019B96                            loc_1928E:
00019B96 0C40 2D38                  		cmpi.w	#$2D38,d0
00019B9A 6D00                       		blt.s	loc_1929E
00019B9C                            
00019B9C                            loc_19294:
00019B9C 0868 0000 0022             		bchg	#0,$22(a0)
00019BA2 4228 003D                  		clr.b	$3D(a0)
00019BA6                            
00019BA6                            loc_1929E:
00019BA6 0440 2C10                  		subi.w	#$2C10,d0
00019BAA 0240 001F                  		andi.w	#$1F,d0
00019BAE 0440 001F                  		subi.w	#$1F,d0
00019BB2 6A00                       		bpl.s	loc_192AE
00019BB4 4440                       		neg.w	d0
00019BB6                            
00019BB6                            loc_192AE:
00019BB6 5340                       		subq.w	#1,d0
00019BB8 6E00                       		bgt.s	loc_192E8
00019BBA 4A28 003D                  		tst.b	$3D(a0)
00019BBE 6600                       		bne.s	loc_192E8
00019BC0 3238 D008                  		move.w	($FFFFD008).w,d1
00019BC4 0441 2C00                  		subi.w	#$2C00,d1
00019BC8 EA41                       		asr.w	#5,d1
00019BCA B228 0034                  		cmp.b	$34(a0),d1
00019BCE 6600                       		bne.s	loc_192E8
00019BD0 7000                       		moveq	#0,d0
00019BD2 1028 0034                  		move.b	$34(a0),d0
00019BD6 EB40                       		asl.w	#5,d0
00019BD8 0640 2C10                  		addi.w	#$2C10,d0
00019BDC 3140 0030                  		move.w	d0,$30(a0)
00019BE0 6100 0000                  		bsr.w	Obj75_FindBlocks
00019BE4 5428 0025                  		addq.b	#2,$25(a0)
00019BE8 4268 0028                  		clr.w	$28(a0)
00019BEC 4268 0010                  		clr.w	$10(a0)
00019BF0                            
00019BF0                            loc_192E8:
00019BF0 6000 FEF4                  		bra.w	loc_191DE
00019BF4                            ; ===========================================================================
00019BF4                            
00019BF4                            loc_192EC:				; XREF: Obj75_ShipIndex
00019BF4 7000                       		moveq	#0,d0
00019BF6 1028 0028                  		move.b	$28(a0),d0
00019BFA 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019BFE 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019C02                            ; ===========================================================================
00019C02 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019C04 0000                       		dc.w loc_19348-off_192FA
00019C06 0000                       		dc.w loc_1938E-off_192FA
00019C08 0000                       		dc.w loc_193D0-off_192FA
00019C0A                            ; ===========================================================================
00019C0A                            
00019C0A                            loc_19302:				; XREF: off_192FA
00019C0A 317C 0180 0012             		move.w	#$180,$12(a0)
00019C10 3028 0038                  		move.w	$38(a0),d0
00019C14 0C40 0556                  		cmpi.w	#$556,d0
00019C18 6500                       		bcs.s	loc_19344
00019C1A 317C 0556 0038             		move.w	#$556,$38(a0)
00019C20 4268 003C                  		clr.w	$3C(a0)
00019C24 70FF                       		moveq	#-1,d0
00019C26 3028 0036                  		move.w	$36(a0),d0
00019C2A 6700                       		beq.s	loc_1933C
00019C2C 2240                       		movea.l	d0,a1
00019C2E 137C 00FF 0029             		move.b	#-1,$29(a1)
00019C34 117C 00FF 0029             		move.b	#-1,$29(a0)
00019C3A 2348 0034                  		move.l	a0,$34(a1)
00019C3E 317C 0032 003C             		move.w	#$32,$3C(a0)
00019C44                            
00019C44                            loc_1933C:
00019C44 4268 0012                  		clr.w	$12(a0)
00019C48 5428 0028                  		addq.b	#2,$28(a0)
00019C4C                            
00019C4C                            loc_19344:
00019C4C 6000 FEAC                  		bra.w	loc_191F2
00019C50                            ; ===========================================================================
00019C50                            
00019C50                            loc_19348:				; XREF: off_192FA
00019C50 5368 003C                  		subq.w	#1,$3C(a0)
00019C54 6A00                       		bpl.s	loc_19366
00019C56 5428 0028                  		addq.b	#2,$28(a0)
00019C5A 317C F800 0012             		move.w	#-$800,$12(a0)
00019C60 4A68 0036                  		tst.w	$36(a0)
00019C64 6600                       		bne.s	loc_19362
00019C66 E0E8 0012                  		asr	$12(a0)
00019C6A                            
00019C6A                            loc_19362:
00019C6A 7000                       		moveq	#0,d0
00019C6C 6000                       		bra.s	loc_1937C
00019C6E                            ; ===========================================================================
00019C6E                            
00019C6E                            loc_19366:
00019C6E 7000                       		moveq	#0,d0
00019C70 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019C76 6E00                       		bgt.s	loc_1937C
00019C78 7002                       		moveq	#2,d0
00019C7A 0828 0001 003D             		btst	#1,$3D(a0)
00019C80 6700                       		beq.s	loc_1937C
00019C82 4440                       		neg.w	d0
00019C84                            
00019C84                            loc_1937C:
00019C84 D068 0038                  		add.w	$38(a0),d0
00019C88 3140 000C                  		move.w	d0,$C(a0)
00019C8C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C92 6000 FE76                  		bra.w	loc_19202
00019C96                            ; ===========================================================================
00019C96                            
00019C96                            loc_1938E:				; XREF: off_192FA
00019C96 303C 04DA                  		move.w	#$4DA,d0
00019C9A 4A68 0036                  		tst.w	$36(a0)
00019C9E 6700                       		beq.s	loc_1939C
00019CA0 0440 0018                  		subi.w	#$18,d0
00019CA4                            
00019CA4                            loc_1939C:
00019CA4 B068 0038                  		cmp.w	$38(a0),d0
00019CA8 6D00                       		blt.s	loc_193BE
00019CAA 317C 0008 003C             		move.w	#8,$3C(a0)
00019CB0 4A68 0036                  		tst.w	$36(a0)
00019CB4 6700                       		beq.s	loc_193B4
00019CB6 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019CBC                            
00019CBC                            loc_193B4:
00019CBC 5428 0028                  		addq.b	#2,$28(a0)
00019CC0 4268 0012                  		clr.w	$12(a0)
00019CC4 6000                       		bra.s	loc_193CC
00019CC6                            ; ===========================================================================
00019CC6                            
00019CC6                            loc_193BE:
00019CC6 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019CCC 6C00                       		bge.s	loc_193CC
00019CCE 0668 000C 0012             		addi.w	#$C,$12(a0)
00019CD4                            
00019CD4                            loc_193CC:
00019CD4 6000 FE24                  		bra.w	loc_191F2
00019CD8                            ; ===========================================================================
00019CD8                            
00019CD8                            loc_193D0:				; XREF: off_192FA
00019CD8 5368 003C                  		subq.w	#1,$3C(a0)
00019CDC 6E00                       		bgt.s	loc_19406
00019CDE 6B00                       		bmi.s	loc_193EE
00019CE0 70FF                       		moveq	#-1,d0
00019CE2 3028 0036                  		move.w	$36(a0),d0
00019CE6 6700                       		beq.s	loc_193E8
00019CE8 2240                       		movea.l	d0,a1
00019CEA 137C 000A 0029             		move.b	#$A,$29(a1)
00019CF0                            
00019CF0                            loc_193E8:
00019CF0 4268 0036                  		clr.w	$36(a0)
00019CF4 6000                       		bra.s	loc_19406
00019CF6                            ; ===========================================================================
00019CF6                            
00019CF6                            loc_193EE:
00019CF6 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019CFC 6600                       		bne.s	loc_19406
00019CFE 4228 0029                  		clr.b	$29(a0)
00019D02 5528 0025                  		subq.b	#2,$25(a0)
00019D06 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019D0C 6000                       		bra.s	loc_19446
00019D0E                            ; ===========================================================================
00019D0E                            
00019D0E                            loc_19406:
00019D0E 7001                       		moveq	#1,d0
00019D10 4A68 0036                  		tst.w	$36(a0)
00019D14 6700                       		beq.s	loc_19410
00019D16 7002                       		moveq	#2,d0
00019D18                            
00019D18                            loc_19410:
00019D18 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019D1E 6700                       		beq.s	loc_19424
00019D20 6D00                       		blt.s	loc_1941C
00019D22 4440                       		neg.w	d0
00019D24                            
00019D24                            loc_1941C:
00019D24 4A68 0036                  		tst.w	$36(a0)
00019D28 D168 0038                  		add.w	d0,$38(a0)
00019D2C                            
00019D2C                            loc_19424:
00019D2C 7000                       		moveq	#0,d0
00019D2E 4A68 0036                  		tst.w	$36(a0)
00019D32 6700                       		beq.s	loc_19438
00019D34 7002                       		moveq	#2,d0
00019D36 0828 0000 003D             		btst	#0,$3D(a0)
00019D3C 6700                       		beq.s	loc_19438
00019D3E 4440                       		neg.w	d0
00019D40                            
00019D40                            loc_19438:
00019D40 D068 0038                  		add.w	$38(a0),d0
00019D44 3140 000C                  		move.w	d0,$C(a0)
00019D48 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D4E                            
00019D4E                            loc_19446:
00019D4E 6000 FDBA                  		bra.w	loc_19202
00019D52                            
00019D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D52                            
00019D52                            
00019D52                            Obj75_FindBlocks:			; XREF: loc_192AE
00019D52 4268 0036                  		clr.w	$36(a0)
00019D56 43F8 D040                  		lea	($FFFFD040).w,a1
00019D5A 703E                       		moveq	#$3E,d0
00019D5C 7276                       		moveq	#$76,d1
00019D5E 1428 0034                  		move.b	$34(a0),d2
00019D62                            
00019D62                            Obj75_FindLoop:
00019D62 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019D64 6600                       		bne.s	loc_1946A	; if not, branch
00019D66 B429 0028                  		cmp.b	$28(a1),d2
00019D6A 6600                       		bne.s	loc_1946A
00019D6C 3149 0036                  		move.w	a1,$36(a0)
00019D70 6000                       		bra.s	locret_19472
00019D72                            ; ===========================================================================
00019D72                            
00019D72                            loc_1946A:
00019D72 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019D76 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019D7A                            
00019D7A                            locret_19472:
00019D7A 4E75                       		rts	
00019D7C                            ; End of function Obj75_FindBlocks
00019D7C                            
00019D7C                            ; ===========================================================================
00019D7C                            
00019D7C                            loc_19474:				; XREF: Obj75_ShipIndex
00019D7C 5368 003C                  		subq.w	#1,$3C(a0)
00019D80 6B00                       		bmi.s	loc_1947E
00019D82 6000 E412                  		bra.w	BossDefeated
00019D86                            ; ===========================================================================
00019D86                            
00019D86                            loc_1947E:
00019D86 5428 0025                  		addq.b	#2,$25(a0)
00019D8A 4268 0012                  		clr.w	$12(a0)
00019D8E 08E8 0000 0022             		bset	#0,$22(a0)
00019D94 08A8 0007 0022             		bclr	#7,$22(a0)
00019D9A 4268 0010                  		clr.w	$10(a0)
00019D9E 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019DA4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019DA8 6600                       		bne.s	loc_194A8
00019DAA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019DB0                            
00019DB0                            loc_194A8:
00019DB0 6000 FD58                  		bra.w	loc_19202
00019DB4                            ; ===========================================================================
00019DB4                            
00019DB4                            loc_194AC:				; XREF: Obj75_ShipIndex
00019DB4 5268 003C                  		addq.w	#1,$3C(a0)
00019DB8 6700                       		beq.s	loc_194BC
00019DBA 6A00                       		bpl.s	loc_194C2
00019DBC 0668 0018 0012             		addi.w	#$18,$12(a0)
00019DC2 6000                       		bra.s	loc_194EE
00019DC4                            ; ===========================================================================
00019DC4                            
00019DC4                            loc_194BC:
00019DC4 4268 0012                  		clr.w	$12(a0)
00019DC8 6000                       		bra.s	loc_194EE
00019DCA                            ; ===========================================================================
00019DCA                            
00019DCA                            loc_194C2:
00019DCA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019DD0 6500                       		bcs.s	loc_194DA
00019DD2 6700                       		beq.s	loc_194E0
00019DD4 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019DDA 6500                       		bcs.s	loc_194EE
00019DDC 5428 0025                  		addq.b	#2,$25(a0)
00019DE0 6000                       		bra.s	loc_194EE
00019DE2                            ; ===========================================================================
00019DE2                            
00019DE2                            loc_194DA:
00019DE2 5168 0012                  		subq.w	#8,$12(a0)
00019DE6 6000                       		bra.s	loc_194EE
00019DE8                            ; ===========================================================================
00019DE8                            
00019DE8                            loc_194E0:
00019DE8 4268 0012                  		clr.w	$12(a0)
00019DEC 303C 0085                  		move.w	#$85,d0
00019DF0 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019DF6                            
00019DF6                            loc_194EE:
00019DF6 6000 FD02                  		bra.w	loc_191F2
00019DFA                            ; ===========================================================================
00019DFA                            
00019DFA                            loc_194F2:				; XREF: Obj75_ShipIndex
00019DFA 317C 0400 0010             		move.w	#$400,$10(a0)
00019E00 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019E06 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019E0C 6400                       		bcc.s	loc_1950C
00019E0E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019E12 6000                       		bra.s	loc_19512
00019E14                            ; ===========================================================================
00019E14                            
00019E14                            loc_1950C:
00019E14 4A28 0001                  		tst.b	1(a0)
00019E18 6A00                       		bpl.s	Obj75_ShipDelete
00019E1A                            
00019E1A                            loc_19512:
00019E1A 6100 E3BC                  		bsr.w	BossMove
00019E1E 6000 FCC6                  		bra.w	loc_191DE
00019E22                            ; ===========================================================================
00019E22                            
00019E22                            Obj75_ShipDelete:
00019E22 4EF9 0000 DE3A             		jmp	DeleteObject
00019E28                            ; ===========================================================================
00019E28                            
00019E28                            Obj75_FaceMain:				; XREF: Obj75_Index
00019E28 7201                       		moveq	#1,d1
00019E2A 2268 0034                  		movea.l	$34(a0),a1
00019E2E 7000                       		moveq	#0,d0
00019E30 1029 0025                  		move.b	$25(a1),d0
00019E34 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019E38 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019E3C 1141 001C                  		move.b	d1,$1C(a0)
00019E40 1010                       		move.b	(a0),d0
00019E42 B011                       		cmp.b	(a1),d0
00019E44 6600                       		bne.s	Obj75_FaceDelete
00019E46 6000                       		bra.s	loc_195BE
00019E48                            ; ===========================================================================
00019E48                            
00019E48                            Obj75_FaceDelete:
00019E48 4EF9 0000 DE3A             		jmp	DeleteObject
00019E4E                            ; ===========================================================================
00019E4E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019E52 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019E56 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019E5A                            ; ===========================================================================
00019E5A                            
00019E5A                            loc_19552:				; XREF: off_19546
00019E5A 720A                       		moveq	#$A,d1
00019E5C 4E75                       		rts	
00019E5E                            ; ===========================================================================
00019E5E                            
00019E5E                            loc_19556:				; XREF: off_19546
00019E5E 7206                       		moveq	#6,d1
00019E60 4E75                       		rts	
00019E62                            ; ===========================================================================
00019E62                            
00019E62                            loc_1955A:				; XREF: off_19546
00019E62 7000                       		moveq	#0,d0
00019E64 1029 0028                  		move.b	$28(a1),d0
00019E68 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019E6C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019E70                            ; ===========================================================================
00019E70 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019E74 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019E78                            ; ===========================================================================
00019E78                            
00019E78                            loc_19570:				; XREF: off_19568
00019E78 6000                       		bra.s	loc_19574
00019E7A                            ; ===========================================================================
00019E7A                            
00019E7A                            loc_19572:				; XREF: off_19568
00019E7A 7206                       		moveq	#6,d1
00019E7C                            
00019E7C                            loc_19574:				; XREF: off_19546
00019E7C 4A29 0020                  		tst.b	$20(a1)
00019E80 6600                       		bne.s	loc_1957E
00019E82 7205                       		moveq	#5,d1
00019E84 4E75                       		rts	
00019E86                            ; ===========================================================================
00019E86                            
00019E86                            loc_1957E:
00019E86 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019E8C 6500                       		bcs.s	locret_19588
00019E8E 7204                       		moveq	#4,d1
00019E90                            
00019E90                            locret_19588:
00019E90 4E75                       		rts	
00019E92                            ; ===========================================================================
00019E92                            
00019E92                            Obj75_FlameMain:			; XREF: Obj75_Index
00019E92 117C 0007 001C             		move.b	#7,$1C(a0)
00019E98 2268 0034                  		movea.l	$34(a0),a1
00019E9C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019EA2 6600                       		bne.s	loc_195AA
00019EA4 117C 000B 001C             		move.b	#$B,$1C(a0)
00019EAA 4A28 0001                  		tst.b	1(a0)
00019EAE 6A00                       		bpl.s	Obj75_FlameDelete
00019EB0 6000                       		bra.s	loc_195B6
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            loc_195AA:
00019EB2 4A69 0010                  		tst.w	$10(a1)
00019EB6 6700                       		beq.s	loc_195B6
00019EB8 117C 0008 001C             		move.b	#8,$1C(a0)
00019EBE                            
00019EBE                            loc_195B6:
00019EBE 6000                       		bra.s	loc_195BE
00019EC0                            ; ===========================================================================
00019EC0                            
00019EC0                            Obj75_FlameDelete:
00019EC0 4EF9 0000 DE3A             		jmp	DeleteObject
00019EC6                            ; ===========================================================================
00019EC6                            
00019EC6                            loc_195BE:
00019EC6 43F9 0001 861A             		lea	(Ani_Eggman).l,a1
00019ECC 4EB9 0000 AEBE             		jsr	AnimateSprite
00019ED2 2268 0034                  		movea.l	$34(a0),a1
00019ED6 3169 0008 0008             		move.w	8(a1),8(a0)
00019EDC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019EE2                            
00019EE2                            loc_195DA:
00019EE2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019EE8 7003                       		moveq	#3,d0
00019EEA C028 0022                  		and.b	$22(a0),d0
00019EEE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EF4 8128 0001                  		or.b	d0,1(a0)
00019EF8 4EF9 0000 DDFE             		jmp	DisplaySprite
00019EFE                            ; ===========================================================================
00019EFE                            
00019EFE                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019EFE 217C 0001 8746 0004        		move.l	#Map_BossItems,4(a0)
00019F06 317C 246C 0002             		move.w	#$246C,2(a0)
00019F0C 117C 0005 001A             		move.b	#5,$1A(a0)
00019F12 2268 0034                  		movea.l	$34(a0),a1
00019F16 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F1C 6600                       		bne.s	loc_1961C
00019F1E 4A28 0001                  		tst.b	1(a0)
00019F22 6A00                       		bpl.s	Obj75_SpikeDelete
00019F24                            
00019F24                            loc_1961C:
00019F24 3169 0008 0008             		move.w	8(a1),8(a0)
00019F2A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F30 3028 003C                  		move.w	$3C(a0),d0
00019F34 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F3A 6600                       		bne.s	loc_19652
00019F3C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019F42 6700                       		beq.s	loc_1964C
00019F44 4A29 0028                  		tst.b	$28(a1)
00019F48 6600                       		bne.s	loc_19658
00019F4A 0C40 0094                  		cmpi.w	#$94,d0
00019F4E 6C00                       		bge.s	loc_19658
00019F50 5E40                       		addq.w	#7,d0
00019F52 6000                       		bra.s	loc_19658
00019F54                            ; ===========================================================================
00019F54                            
00019F54                            loc_1964C:
00019F54 4A69 003C                  		tst.w	$3C(a1)
00019F58 6A00                       		bpl.s	loc_19658
00019F5A                            
00019F5A                            loc_19652:
00019F5A 4A40                       		tst.w	d0
00019F5C 6F00                       		ble.s	loc_19658
00019F5E 5B40                       		subq.w	#5,d0
00019F60                            
00019F60                            loc_19658:
00019F60 3140 003C                  		move.w	d0,$3C(a0)
00019F64 E440                       		asr.w	#2,d0
00019F66 D168 000C                  		add.w	d0,$C(a0)
00019F6A 117C 0008 0019             		move.b	#8,$19(a0)
00019F70 117C 000C 0016             		move.b	#$C,$16(a0)
00019F76 4228 0020                  		clr.b	$20(a0)
00019F7A 2268 0034                  		movea.l	$34(a0),a1
00019F7E 4A29 0020                  		tst.b	$20(a1)
00019F82 6700                       		beq.s	loc_19688
00019F84 4A29 0029                  		tst.b	$29(a1)
00019F88 6600                       		bne.s	loc_19688
00019F8A 117C 0084 0020             		move.b	#$84,$20(a0)
00019F90                            
00019F90                            loc_19688:
00019F90 6000 FF50                  		bra.w	loc_195DA
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            Obj75_SpikeDelete:
00019F94 4EF9 0000 DE3A             		jmp	DeleteObject
00019F9A                            ; ===========================================================================
00019F9A                            ; ---------------------------------------------------------------------------
00019F9A                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019F9A                            ; ---------------------------------------------------------------------------
00019F9A                            
00019F9A                            Obj76:					; XREF: Obj_Index
00019F9A 7000                       		moveq	#0,d0
00019F9C 1028 0024                  		move.b	$24(a0),d0
00019FA0 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019FA4 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019FA8                            ; ===========================================================================
00019FA8 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019FAA 0000                       		dc.w Obj76_Action-Obj76_Index
00019FAC 0000                       		dc.w loc_19762-Obj76_Index
00019FAE                            ; ===========================================================================
00019FAE                            
00019FAE                            Obj76_Main:				; XREF: Obj76_Index
00019FAE 7800                       		moveq	#0,d4
00019FB0 3A3C 2C10                  		move.w	#$2C10,d5
00019FB4 7C09                       		moveq	#9,d6
00019FB6 43D0                       		lea	(a0),a1
00019FB8 6000                       		bra.s	Obj76_MakeBlock
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            Obj76_Loop:
00019FBA 4EB9 0000 E284             		jsr	SingleObjLoad
00019FC0 6600                       		bne.s	Obj76_ExitLoop
00019FC2                            
00019FC2                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019FC2 12BC 0076                  		move.b	#$76,(a1)
00019FC6 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019FCE 337C 4000 0002             		move.w	#$4000,2(a1)
00019FD4 137C 0004 0001             		move.b	#4,1(a1)
00019FDA 137C 0010 0019             		move.b	#$10,$19(a1)
00019FE0 137C 0010 0016             		move.b	#$10,$16(a1)
00019FE6 137C 0003 0018             		move.b	#3,$18(a1)
00019FEC 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019FF0 337C 0582 000C             		move.w	#$582,$C(a1)
00019FF6 3344 0028                  		move.w	d4,$28(a1)
00019FFA 0644 0101                  		addi.w	#$101,d4
00019FFE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A002 5429 0024                  		addq.b	#2,$24(a1)
0001A006 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A00A                            
0001A00A                            Obj76_ExitLoop:
0001A00A 4E75                       		rts	
0001A00C                            ; ===========================================================================
0001A00C                            
0001A00C                            Obj76_Action:				; XREF: Obj76_Index
0001A00C 1028 0029                  		move.b	$29(a0),d0
0001A010 B028 0028                  		cmp.b	$28(a0),d0
0001A014 6700                       		beq.s	Obj76_Solid
0001A016 4A00                       		tst.b	d0
0001A018 6B00                       		bmi.s	loc_19718
0001A01A                            
0001A01A                            loc_19712:
0001A01A 6100 0000                  		bsr.w	Obj76_Break
0001A01E 6000                       		bra.s	Obj76_Display
0001A020                            ; ===========================================================================
0001A020                            
0001A020                            loc_19718:
0001A020 2268 0034                  		movea.l	$34(a0),a1
0001A024 4A29 0021                  		tst.b	$21(a1)
0001A028 67F0                       		beq.s	loc_19712
0001A02A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A030 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A036 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A03C B2C8                       		cmpa.w	a0,a1
0001A03E 6500                       		bcs.s	Obj76_Display
0001A040 3029 0012                  		move.w	$12(a1),d0
0001A044 48C0                       		ext.l	d0
0001A046 E080                       		asr.l	#8,d0
0001A048 D168 000C                  		add.w	d0,$C(a0)
0001A04C 6000                       		bra.s	Obj76_Display
0001A04E                            ; ===========================================================================
0001A04E                            
0001A04E                            Obj76_Solid:				; XREF: Obj76_Action
0001A04E 323C 001B                  		move.w	#$1B,d1
0001A052 343C 0010                  		move.w	#$10,d2
0001A056 363C 0011                  		move.w	#$11,d3
0001A05A 3828 0008                  		move.w	8(a0),d4
0001A05E 4EB9 0001 01CE             		jsr	SolidObject
0001A064                            
0001A064                            Obj76_Display:				; XREF: Obj76_Action
0001A064 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A06A                            ; ===========================================================================
0001A06A                            
0001A06A                            loc_19762:				; XREF: Obj76_Index
0001A06A 4A28 0001                  		tst.b	1(a0)
0001A06E 6A00                       		bpl.s	Obj76_Delete
0001A070 4EB9 0000 DDAC             		jsr	ObjectFall
0001A076 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A07C                            ; ===========================================================================
0001A07C                            
0001A07C                            Obj76_Delete:
0001A07C 4EF9 0000 DE3A             		jmp	DeleteObject
0001A082                            
0001A082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A082                            
0001A082                            
0001A082                            Obj76_Break:				; XREF: Obj76_Action
0001A082 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A086 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A08A 7801                       		moveq	#1,d4
0001A08C 7203                       		moveq	#3,d1
0001A08E 7438                       		moveq	#$38,d2
0001A090 5428 0024                  		addq.b	#2,$24(a0)
0001A094 117C 0008 0019             		move.b	#8,$19(a0)
0001A09A 117C 0008 0016             		move.b	#8,$16(a0)
0001A0A0 43D0                       		lea	(a0),a1
0001A0A2 6000                       		bra.s	Obj76_MakeFrag
0001A0A4                            ; ===========================================================================
0001A0A4                            
0001A0A4                            Obj76_LoopFrag:
0001A0A4 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001A0AA 6600                       		bne.s	loc_197D4
0001A0AC                            
0001A0AC                            Obj76_MakeFrag:
0001A0AC 45D0                       		lea	(a0),a2
0001A0AE 47D1                       		lea	(a1),a3
0001A0B0 7603                       		moveq	#3,d3
0001A0B2                            
0001A0B2                            loc_197AA:
0001A0B2 26DA                       		move.l	(a2)+,(a3)+
0001A0B4 26DA                       		move.l	(a2)+,(a3)+
0001A0B6 26DA                       		move.l	(a2)+,(a3)+
0001A0B8 26DA                       		move.l	(a2)+,(a3)+
0001A0BA 51CB FFF6                  		dbf	d3,loc_197AA
0001A0BE                            
0001A0BE 335C 0010                  		move.w	(a4)+,$10(a1)
0001A0C2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A0C6 361D                       		move.w	(a5)+,d3
0001A0C8 D769 0008                  		add.w	d3,8(a1)
0001A0CC 361D                       		move.w	(a5)+,d3
0001A0CE D769 000C                  		add.w	d3,$C(a1)
0001A0D2 1344 001A                  		move.b	d4,$1A(a1)
0001A0D6 5244                       		addq.w	#1,d4
0001A0D8 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A0DC                            
0001A0DC                            loc_197D4:
0001A0DC 303C 00CB                  		move.w	#$CB,d0
0001A0E0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A0E6                            ; End of function Obj76_Break
0001A0E6                            
0001A0E6                            ; ===========================================================================
0001A0E6 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A0EA 0180 FE00                  		dc.w $180, $FE00
0001A0EE FF00 FF00                  		dc.w $FF00, $FF00
0001A0F2 0100 FF00                  		dc.w $100, $FF00
0001A0F6 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A0FA 0010 0000                  		dc.w $10, 0
0001A0FE 0000 0010                  		dc.w 0,	$10
0001A102 0010 0010                  		dc.w $10, $10
0001A106                            ; ---------------------------------------------------------------------------
0001A106                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A106                            ; ---------------------------------------------------------------------------
0001A106                            Map_obj76:
0001A106                            	include "_maps\obj76.asm"
0001A106                            ; ---------------------------------------------------------------------------
0001A106                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A106                            ; ---------------------------------------------------------------------------
0001A106 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A10A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A10E 0000                       		dc.w byte_19826-Map_obj76
0001A110 02                         byte_19808:	dc.b 2
0001A111 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A116 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A11B 00                         		dc.b 0
0001A11C 01                         byte_19814:	dc.b 1
0001A11D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A122 01                         byte_1981A:	dc.b 1
0001A123 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A128 01                         byte_19820:	dc.b 1
0001A129 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A12E 01                         byte_19826:	dc.b 1
0001A12F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A134                            		even
0001A134                            		even
0001A134                            
0001A134                            ; ===========================================================================
0001A134                            
0001A134                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A134 4EF9 0000 DE3A             		jmp	DeleteObject
0001A13A                            ; ===========================================================================
0001A13A                            ; ---------------------------------------------------------------------------
0001A13A                            ; Object 82 - Eggman (SBZ2)
0001A13A                            ; ---------------------------------------------------------------------------
0001A13A                            
0001A13A                            Obj82:					; XREF: Obj_Index
0001A13A 7000                       		moveq	#0,d0
0001A13C 1028 0024                  		move.b	$24(a0),d0
0001A140 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A144 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A148                            ; ===========================================================================
0001A148 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A14A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A14C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A14E                            
0001A14E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A151 0400 03                    		dc.b 4,	0, 3
0001A154                            ; ===========================================================================
0001A154                            
0001A154                            Obj82_Main:				; XREF: Obj82_Index
0001A154 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A158 317C 2160 0008             		move.w	#$2160,8(a0)
0001A15E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A164 117C 000F 0020             		move.b	#$F,$20(a0)
0001A16A 117C 0010 0021             		move.b	#$10,$21(a0)
0001A170 08A8 0000 0022             		bclr	#0,$22(a0)
0001A176 4228 0025                  		clr.b	$25(a0)
0001A17A 115A 0024                  		move.b	(a2)+,$24(a0)
0001A17E 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A182 115A 0018                  		move.b	(a2)+,$18(a0)
0001A186 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A18E 317C 0400 0002             		move.w	#$400,2(a0)
0001A194 117C 0004 0001             		move.b	#4,1(a0)
0001A19A 08E8 0007 0001             		bset	#7,1(a0)
0001A1A0 117C 0020 0019             		move.b	#$20,$19(a0)
0001A1A6 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001A1AC 6600                       		bne.s	Obj82_Eggman
0001A1AE 2348 0034                  		move.l	a0,$34(a1)
0001A1B2 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A1B6 337C 2130 0008             		move.w	#$2130,8(a1)
0001A1BC 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A1C2 4228 0025                  		clr.b	$25(a0)
0001A1C6 135A 0024                  		move.b	(a2)+,$24(a1)
0001A1CA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A1CE 135A 0018                  		move.b	(a2)+,$18(a1)
0001A1D2 237C 0000 C5F2 0004        		move.l	#Map_obj32,4(a1)
0001A1DA 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A1E0 137C 0004 0001             		move.b	#4,1(a1)
0001A1E6 08E9 0007 0001             		bset	#7,1(a1)
0001A1EC 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1F2 137C 0000 001A             		move.b	#0,$1A(a1)
0001A1F8                            
0001A1F8                            Obj82_Eggman:				; XREF: Obj82_Index
0001A1F8 7000                       		moveq	#0,d0
0001A1FA 1028 0025                  		move.b	$25(a0),d0
0001A1FE 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A202 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A206 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A20A 4EB9 0000 AEBE             		jsr	AnimateSprite
0001A210 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A216                            ; ===========================================================================
0001A216 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A218 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A21A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A21C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A21E                            ; ===========================================================================
0001A21E                            
0001A21E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A21E 3028 0008                  		move.w	8(a0),d0
0001A222 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A226 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A22A 6400                       		bcc.s	loc_19934	; if not, branch
0001A22C 5428 0025                  		addq.b	#2,$25(a0)
0001A230 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A236 117C 0001 001C             		move.b	#1,$1C(a0)
0001A23C                            
0001A23C                            loc_19934:				; XREF: Obj82_EggIndex
0001A23C 4EF9 0000 DDD8             		jmp	SpeedToPos
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A242 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A246 6600                       		bne.s	loc_19954	; if time remains, branch
0001A248 5428 0025                  		addq.b	#2,$25(a0)
0001A24C 117C 0002 001C             		move.b	#2,$1C(a0)
0001A252 5868 000C                  		addq.w	#4,$C(a0)
0001A256 317C 000F 003C             		move.w	#15,$3C(a0)
0001A25C                            
0001A25C                            loc_19954:
0001A25C 60DE                       		bra.s	loc_19934
0001A25E                            ; ===========================================================================
0001A25E                            
0001A25E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A25E 5368 003C                  		subq.w	#1,$3C(a0)
0001A262 6E00                       		bgt.s	loc_199D0
0001A264 6600                       		bne.s	loc_1996A
0001A266 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A26C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A272                            
0001A272                            loc_1996A:
0001A272 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A278 6E00                       		bgt.s	loc_19976
0001A27A 4268 0010                  		clr.w	$10(a0)
0001A27E                            
0001A27E                            loc_19976:
0001A27E 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A284 4A68 0012                  		tst.w	$12(a0)
0001A288 6B00                       		bmi.s	Obj82_FindBlocks
0001A28A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A290 6500                       		bcs.s	Obj82_FindBlocks
0001A292 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A298 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A29E 6500                       		bcs.s	Obj82_FindBlocks
0001A2A0 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A2A6 4268 0012                  		clr.w	$12(a0)
0001A2AA                            
0001A2AA                            Obj82_FindBlocks:
0001A2AA 3028 0010                  		move.w	$10(a0),d0
0001A2AE 8068 0012                  		or.w	$12(a0),d0
0001A2B2 6600                       		bne.s	loc_199D0
0001A2B4 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A2B8 703E                       		moveq	#$3E,d0
0001A2BA 7240                       		moveq	#$40,d1
0001A2BC                            
0001A2BC                            Obj82_FindLoop:	
0001A2BC D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A2BE 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A2C2 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A2C6                            
0001A2C6 6600                       		bne.s	loc_199D0
0001A2C8 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A2CE 5428 0025                  		addq.b	#2,$25(a0)
0001A2D2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A2D8                            
0001A2D8                            loc_199D0:
0001A2D8 6000 FF62                  		bra.w	loc_19934
0001A2DC                            ; ===========================================================================
0001A2DC                            
0001A2DC                            Obj82_Switch:				; XREF: Obj82_Index
0001A2DC 7000                       		moveq	#0,d0
0001A2DE 1028 0025                  		move.b	$25(a0),d0
0001A2E2 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A2E6 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A2EA                            ; ===========================================================================
0001A2EA 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A2EC 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A2EE                            ; ===========================================================================
0001A2EE                            
0001A2EE                            loc_199E6:				; XREF: Obj82_SwIndex
0001A2EE 2268 0034                  		movea.l	$34(a0),a1
0001A2F2 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A2F8 6600                       		bne.s	Obj82_SwDisplay
0001A2FA 117C 0001 001A             		move.b	#1,$1A(a0)
0001A300 5428 0025                  		addq.b	#2,$25(a0)
0001A304                            
0001A304                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A304 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A30A                            ; ===========================================================================
0001A30A                            Ani_obj82:
0001A30A                            	include "_anim\obj82.asm"
0001A30A                            ; ---------------------------------------------------------------------------
0001A30A                            ; Animation script - Eggman (SBZ2)
0001A30A                            ; ---------------------------------------------------------------------------
0001A30A 0000                       		dc.w byte_19A10-Ani_obj82
0001A30C 0000                       		dc.w byte_19A14-Ani_obj82
0001A30E 0000                       		dc.w byte_19A18-Ani_obj82
0001A310 0000                       		dc.w byte_19A20-Ani_obj82
0001A312 0000                       		dc.w byte_19A24-Ani_obj82
0001A314 0000                       		dc.w byte_19A2A-Ani_obj82
0001A316 0000                       		dc.w byte_19A30-Ani_obj82
0001A318 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A31C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A320 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A328 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A32C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A332 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A338 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A33C                            		even
0001A33C                            		even
0001A33C                            
0001A33C                            ; ---------------------------------------------------------------------------
0001A33C                            ; Sprite mappings - Eggman (SBZ2)
0001A33C                            ; ---------------------------------------------------------------------------
0001A33C                            Map_obj82:
0001A33C                            	include "_maps\obj82.asm"
0001A33C                            ; ================================================================================
0001A33C                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A33C                            ; ================================================================================
0001A33C                            
0001A33C                            DATAA16Z12RYSAF:
0001A33C 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A340 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A344 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A348 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A34C 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A350 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A352 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A353 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A358 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A35D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A362 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A363 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A368 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A36D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A372 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A377 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A378 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A37D E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A382 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A387 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A38C 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A38D E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A392 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A397 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A39C 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A39D E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A3A2 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A3A7 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A3AC E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A3B1 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A3B2 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3B7 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3BC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3C1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3C6 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A3C7 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3CC E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3D1 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A3D6 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A3DB F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A3E0 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A3E5 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A3EA 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A3EB 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A3F0 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A3F5 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A3FA F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A3FF 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A400 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A405 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A40A 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A40F 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A414 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A419 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A41A E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A41F E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A424 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A429 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A42E E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A433 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A438 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A43D 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A442 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A443 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A448 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A44D EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A452                            	even
0001A452                            	even
0001A452                            
0001A452                            ; ===========================================================================
0001A452                            ; ---------------------------------------------------------------------------
0001A452                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A452                            ; ---------------------------------------------------------------------------
0001A452                            
0001A452                            Obj83:					; XREF: Obj_Index
0001A452 7000                       		moveq	#0,d0
0001A454 1028 0024                  		move.b	$24(a0),d0
0001A458 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A45C 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A460                            ; ===========================================================================
0001A460 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A462 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A464 0000                       		dc.w loc_19C36-Obj83_Index
0001A466 0000                       		dc.w loc_19C62-Obj83_Index
0001A468 0000                       		dc.w loc_19C72-Obj83_Index
0001A46A 0000                       		dc.w loc_19C80-Obj83_Index
0001A46C                            ; ===========================================================================
0001A46C                            
0001A46C                            Obj83_Main:				; XREF: Obj83_Index
0001A46C 317C 2080 0008             		move.w	#$2080,8(a0)
0001A472 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A478 117C 0080 0019             		move.b	#$80,$19(a0)
0001A47E 117C 0010 0016             		move.b	#$10,$16(a0)
0001A484 117C 0004 0001             		move.b	#4,1(a0)
0001A48A 08E8 0007 0001             		bset	#7,1(a0)
0001A490 7800                       		moveq	#0,d4
0001A492 3A3C 2010                  		move.w	#$2010,d5
0001A496 7C07                       		moveq	#7,d6
0001A498 45E8 0030                  		lea	$30(a0),a2
0001A49C                            
0001A49C                            Obj83_MakeBlock:
0001A49C 4EB9 0000 E284             		jsr	SingleObjLoad
0001A4A2 6600                       		bne.s	Obj83_ExitMake
0001A4A4 34C9                       		move.w	a1,(a2)+
0001A4A6 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A4AA 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A4B2 337C 4518 0002             		move.w	#$4518,2(a1)
0001A4B8 137C 0004 0001             		move.b	#4,1(a1)
0001A4BE 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4C4 137C 0010 0016             		move.b	#$10,$16(a1)
0001A4CA 137C 0003 0018             		move.b	#3,$18(a1)
0001A4D0 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A4D4 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A4DA 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A4DE 137C 0008 0024             		move.b	#8,$24(a1)
0001A4E4 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A4E8                            
0001A4E8                            Obj83_ExitMake:
0001A4E8 5428 0024                  		addq.b	#2,$24(a0)
0001A4EC 4E75                       		rts	
0001A4EE                            ; ===========================================================================
0001A4EE                            
0001A4EE                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A4EE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4F4 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A4F6 4228 001A                  		clr.b	$1A(a0)
0001A4FA 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A4FE                            
0001A4FE                            Obj83_Solid:
0001A4FE 7000                       		moveq	#0,d0
0001A500 1028 001A                  		move.b	$1A(a0),d0
0001A504 4400                       		neg.b	d0
0001A506 4880                       		ext.w	d0
0001A508 5040                       		addq.w	#8,d0
0001A50A E940                       		asl.w	#4,d0
0001A50C 383C 2100                  		move.w	#$2100,d4
0001A510 9840                       		sub.w	d0,d4
0001A512 1140 0019                  		move.b	d0,$19(a0)
0001A516 3144 0008                  		move.w	d4,8(a0)
0001A51A 720B                       		moveq	#$B,d1
0001A51C D240                       		add.w	d0,d1
0001A51E 7410                       		moveq	#$10,d2
0001A520 7611                       		moveq	#$11,d3
0001A522 4EF9 0001 01CE             		jmp	SolidObject
0001A528                            ; ===========================================================================
0001A528                            
0001A528                            loc_19C36:				; XREF: Obj83_Index
0001A528 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A52E 6400                       		bcc.s	Obj83_Solid2
0001A530 70FF                       		moveq	#-1,d0
0001A532 1028 001A                  		move.b	$1A(a0),d0
0001A536 4880                       		ext.w	d0
0001A538 D040                       		add.w	d0,d0
0001A53A 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A53E 2240                       		movea.l	d0,a1
0001A540 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A546 5228 001A                  		addq.b	#1,$1A(a0)
0001A54A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A550 6700                       		beq.s	loc_19C62
0001A552                            
0001A552                            Obj83_Solid2:
0001A552 60AA                       		bra.s	Obj83_Solid
0001A554                            ; ===========================================================================
0001A554                            
0001A554                            loc_19C62:				; XREF: Obj83_Index
0001A554 08A8 0003 0022             		bclr	#3,$22(a0)
0001A55A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A560 6000 FBD2                  		bra.w	loc_1982C
0001A564                            ; ===========================================================================
0001A564                            
0001A564                            loc_19C72:				; XREF: Obj83_Index
0001A564 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A56A 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A56C 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A572                            ; ===========================================================================
0001A572                            
0001A572                            loc_19C80:				; XREF: Obj83_Index
0001A572 4A28 0001                  		tst.b	1(a0)
0001A576 6A00 FBBC                  		bpl.w	loc_1982C
0001A57A 4EB9 0000 DDAC             		jsr	ObjectFall
0001A580 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A586                            ; ===========================================================================
0001A586                            
0001A586                            Obj83_Break:				; XREF: loc_19C72
0001A586 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A58A 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A58E 7801                       		moveq	#1,d4
0001A590 7203                       		moveq	#3,d1
0001A592 7438                       		moveq	#$38,d2
0001A594 5428 0024                  		addq.b	#2,$24(a0)
0001A598 117C 0008 0019             		move.b	#8,$19(a0)
0001A59E 117C 0008 0016             		move.b	#8,$16(a0)
0001A5A4 43D0                       		lea	(a0),a1
0001A5A6 6000                       		bra.s	Obj83_MakeFrag
0001A5A8                            ; ===========================================================================
0001A5A8                            
0001A5A8                            Obj83_LoopFrag:
0001A5A8 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001A5AE 6600                       		bne.s	Obj83_BreakSnd
0001A5B0                            
0001A5B0                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A5B0 45D0                       		lea	(a0),a2
0001A5B2 47D1                       		lea	(a1),a3
0001A5B4 7603                       		moveq	#3,d3
0001A5B6                            
0001A5B6                            loc_19CC4:
0001A5B6 26DA                       		move.l	(a2)+,(a3)+
0001A5B8 26DA                       		move.l	(a2)+,(a3)+
0001A5BA 26DA                       		move.l	(a2)+,(a3)+
0001A5BC 26DA                       		move.l	(a2)+,(a3)+
0001A5BE 51CB FFF6                  		dbf	d3,loc_19CC4
0001A5C2                            
0001A5C2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A5C6 361D                       		move.w	(a5)+,d3
0001A5C8 D769 0008                  		add.w	d3,8(a1)
0001A5CC 361D                       		move.w	(a5)+,d3
0001A5CE D769 000C                  		add.w	d3,$C(a1)
0001A5D2 1344 001A                  		move.b	d4,$1A(a1)
0001A5D6 5244                       		addq.w	#1,d4
0001A5D8 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A5DC                            
0001A5DC                            Obj83_BreakSnd:
0001A5DC 303C 00CB                  		move.w	#$CB,d0
0001A5E0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A5E6 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A5EC                            ; ===========================================================================
0001A5EC 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A5F0 0120 00C0                  		dc.w $120, $C0
0001A5F4 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A5F8 0010 0000                  		dc.w $10, 0
0001A5FC 0000 0010                  		dc.w 0,	$10
0001A600 0010 0010                  		dc.w $10, $10
0001A604                            ; ---------------------------------------------------------------------------
0001A604                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A604                            ; ---------------------------------------------------------------------------
0001A604                            Map_obj83:
0001A604                            	include "_maps\obj83.asm"
0001A604                            ; ---------------------------------------------------------------------------
0001A604                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A604                            ; ---------------------------------------------------------------------------
0001A604 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A608 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A60C 0000                       		dc.w byte_19D46-Map_obj83
0001A60E 01                         byte_19D1C:	dc.b 1
0001A60F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A614 02                         byte_19D22:	dc.b 2
0001A615 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A61A F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A61F 00                         		dc.b 0
0001A620 02                         byte_19D2E:	dc.b 2
0001A621 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A626 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A62B 00                         		dc.b 0
0001A62C 02                         byte_19D3A:	dc.b 2
0001A62D F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A632 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A637 00                         		dc.b 0
0001A638 02                         byte_19D46:	dc.b 2
0001A639 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A63E F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A644 00                         		even
0001A644 00                         		even
0001A644                            
0001A644                            ; ===========================================================================
0001A644                            ; ---------------------------------------------------------------------------
0001A644                            ; Object 85 - Eggman (FZ)
0001A644                            ; ---------------------------------------------------------------------------
0001A644                            
0001A644                            Obj85_Delete:
0001A644 4EF9 0000 DE3A             		jmp	DeleteObject
0001A64A                            ; ===========================================================================
0001A64A                            
0001A64A                            Obj85:					; XREF: Obj_Index
0001A64A 7000                       		moveq	#0,d0
0001A64C 1028 0024                  		move.b	$24(a0),d0
0001A650 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A654 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A658                            ; ===========================================================================
0001A658 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A65A 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A65C 0000                       		dc.w loc_1A38E-Obj85_Index
0001A65E 0000                       		dc.w loc_1A346-Obj85_Index
0001A660 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A662 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A664 0000                       		dc.w loc_1A264-Obj85_Index
0001A666                            
0001A666 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A66C 0001 A33C                  		dc.l Map_obj82		; mappings pointer
0001A670 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A676 0000 0000                  		dc.l Map_obj84
0001A67A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A680 0000 0000                  		dc.l Map_FZBoss
0001A684 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A68A 0001 A33C                  		dc.l Map_obj82
0001A68E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A694 0001 867E                  		dc.l Map_Eggman
0001A698 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A69E 0001 867E                  		dc.l Map_Eggman
0001A6A2                            
0001A6A2 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A6A7 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A6AC 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A6B1 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A6B6 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A6BB 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A6C0                            ; ===========================================================================
0001A6C0                            
0001A6C0                            Obj85_Main:				; XREF: Obj85_Index
0001A6C0 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A6C4 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A6C8 2248                       		movea.l	a0,a1
0001A6CA 7205                       		moveq	#5,d1
0001A6CC 6000                       		bra.s	Obj85_LoadBoss
0001A6CE                            ; ===========================================================================
0001A6CE                            
0001A6CE                            Obj85_Loop:
0001A6CE 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001A6D4 6600                       		bne.s	loc_19E20
0001A6D6                            
0001A6D6                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A6D6 12BC 0085                  		move.b	#$85,(a1)
0001A6DA 335A 0008                  		move.w	(a2)+,8(a1)
0001A6DE 335A 000C                  		move.w	(a2)+,$C(a1)
0001A6E2 335A 0002                  		move.w	(a2)+,2(a1)
0001A6E6 235A 0004                  		move.l	(a2)+,4(a1)
0001A6EA 135B 0024                  		move.b	(a3)+,$24(a1)
0001A6EE 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A6F2 135B 0018                  		move.b	(a3)+,$18(a1)
0001A6F6 135B 0017                  		move.b	(a3)+,$17(a1)
0001A6FA 135B 0016                  		move.b	(a3)+,$16(a1)
0001A6FE 137C 0004 0001             		move.b	#4,1(a1)
0001A704 08E8 0007 0001             		bset	#7,1(a0)
0001A70A 2348 0034                  		move.l	a0,$34(a1)
0001A70E 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A712                            
0001A712                            loc_19E20:
0001A712 45E8 0036                  		lea	$36(a0),a2
0001A716 4EB9 0000 E284             		jsr	SingleObjLoad
0001A71C 6600                       		bne.s	loc_19E5A
0001A71E 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A722 3489                       		move.w	a1,(a2)
0001A724 2348 0034                  		move.l	a0,$34(a1)
0001A728 45E8 0038                  		lea	$38(a0),a2
0001A72C 7400                       		moveq	#0,d2
0001A72E 7203                       		moveq	#3,d1
0001A730                            
0001A730                            loc_19E3E:
0001A730 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001A736 6600                       		bne.s	loc_19E5A
0001A738 34C9                       		move.w	a1,(a2)+
0001A73A 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A73E 2348 0034                  		move.l	a0,$34(a1)
0001A742 1342 0028                  		move.b	d2,$28(a1)
0001A746 5442                       		addq.w	#2,d2
0001A748 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A74C                            
0001A74C                            loc_19E5A:
0001A74C 317C 0000 0034             		move.w	#0,$34(a0)
0001A752 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A758 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A75E                            
0001A75E                            Obj85_Eggman:				; XREF: Obj85_Index
0001A75E 7000                       		moveq	#0,d0
0001A760 1028 0034                  		move.b	$34(a0),d0
0001A764 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A768 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A76C 4EF9 0000 DDFE             		jmp	DisplaySprite
0001A772                            ; ===========================================================================
0001A772 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A776 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A77A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A77E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A782                            ; ===========================================================================
0001A782                            
0001A782                            loc_19E90:				; XREF: off_19E80
0001A782 4AB8 F680                  		tst.l	($FFFFF680).w
0001A786 6600                       		bne.s	loc_19EA2
0001A788 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A78E 6500                       		bcs.s	loc_19EA2
0001A790 5428 0034                  		addq.b	#2,$34(a0)
0001A794                            
0001A794                            loc_19EA2:
0001A794 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A798 4E75                       		rts	
0001A79A                            ; ===========================================================================
0001A79A                            
0001A79A                            loc_19EA8:				; XREF: off_19E80
0001A79A 4A68 0030                  		tst.w	$30(a0)
0001A79E 6A00                       		bpl.s	loc_19F10
0001A7A0 4268 0030                  		clr.w	$30(a0)
0001A7A4 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001A7AA 0240 000C                  		andi.w	#$C,d0
0001A7AE 3200                       		move.w	d0,d1
0001A7B0 5441                       		addq.w	#2,d1
0001A7B2 4A80                       		tst.l	d0
0001A7B4 6A00                       		bpl.s	loc_19EC6
0001A7B6 C141                       		exg	d1,d0
0001A7B8                            
0001A7B8                            loc_19EC6:
0001A7B8 43FA 0000                  		lea	word_19FD6(pc),a1
0001A7BC 3031 0000                  		move.w	(a1,d0.w),d0
0001A7C0 3231 1000                  		move.w	(a1,d1.w),d1
0001A7C4 3140 0030                  		move.w	d0,$30(a0)
0001A7C8 74FF                       		moveq	#-1,d2
0001A7CA 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A7CE 2242                       		movea.l	d2,a1
0001A7D0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A7D6 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A7DC 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A7E0 2242                       		movea.l	d2,a1
0001A7E2 137C 0001 0029             		move.b	#1,$29(a1)
0001A7E8 337C 0000 0030             		move.w	#0,$30(a1)
0001A7EE 317C 0001 0032             		move.w	#1,$32(a0)
0001A7F4 4228 0035                  		clr.b	$35(a0)
0001A7F8 303C 00B7                  		move.w	#$B7,d0
0001A7FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A802                            
0001A802                            loc_19F10:
0001A802 4A68 0032                  		tst.w	$32(a0)
0001A806 6B00 0000                  		bmi.w	loc_19FA6
0001A80A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A810 3038 D008                  		move.w	($FFFFD008).w,d0
0001A814 9068 0008                  		sub.w	8(a0),d0
0001A818 6500                       		bcs.s	loc_19F2E
0001A81A 08E8 0000 0022             		bset	#0,$22(a0)
0001A820                            
0001A820                            loc_19F2E:
0001A820 323C 002B                  		move.w	#$2B,d1
0001A824 343C 0014                  		move.w	#$14,d2
0001A828 363C 0014                  		move.w	#$14,d3
0001A82C 3828 0008                  		move.w	8(a0),d4
0001A830 4EB9 0001 01CE             		jsr	SolidObject
0001A836 4A44                       		tst.w	d4
0001A838 6E00                       		bgt.s	loc_19F50
0001A83A                            
0001A83A                            loc_19F48:
0001A83A 4A28 0035                  		tst.b	$35(a0)
0001A83E 6600                       		bne.s	loc_19F88
0001A840 6000                       		bra.s	loc_19F96
0001A842                            ; ===========================================================================
0001A842                            
0001A842                            loc_19F50:
0001A842 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A846 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A84C 66EC                       		bne.s	loc_19F48
0001A84E 303C 0300                  		move.w	#$300,d0
0001A852 0828 0000 0022             		btst	#0,$22(a0)
0001A858 6600                       		bne.s	loc_19F6A
0001A85A 4440                       		neg.w	d0
0001A85C                            
0001A85C                            loc_19F6A:
0001A85C 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A860 4A28 0035                  		tst.b	$35(a0)
0001A864 6600                       		bne.s	loc_19F88
0001A866 5328 0021                  		subq.b	#1,$21(a0)
0001A86A 117C 0064 0035             		move.b	#$64,$35(a0)
0001A870 303C 00AC                  		move.w	#$AC,d0
0001A874 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A87A                            
0001A87A                            loc_19F88:
0001A87A 5328 0035                  		subq.b	#1,$35(a0)
0001A87E 6700                       		beq.s	loc_19F96
0001A880 117C 0003 001C             		move.b	#3,$1C(a0)
0001A886 6000                       		bra.s	loc_19F9C
0001A888                            ; ===========================================================================
0001A888                            
0001A888                            loc_19F96:
0001A888 117C 0001 001C             		move.b	#1,$1C(a0)
0001A88E                            
0001A88E                            loc_19F9C:
0001A88E 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A892 4EF9 0000 AEBE             		jmp	AnimateSprite
0001A898                            ; ===========================================================================
0001A898                            
0001A898                            loc_19FA6:
0001A898 4A28 0021                  		tst.b	$21(a0)
0001A89C 6700                       		beq.s	loc_19FBC
0001A89E 5428 0034                  		addq.b	#2,$34(a0)
0001A8A2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A8A8 4268 0032                  		clr.w	$32(a0)
0001A8AC 4E75                       		rts	
0001A8AE                            ; ===========================================================================
0001A8AE                            
0001A8AE                            loc_19FBC:
0001A8AE 117C 0006 0034             		move.b	#6,$34(a0)
0001A8B4 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A8BA 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A8C0 117C 0014 0016             		move.b	#$14,$16(a0)
0001A8C6 4E75                       		rts	
0001A8C8                            ; ===========================================================================
0001A8C8 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A8D8                            ; ===========================================================================
0001A8D8                            
0001A8D8                            loc_19FE6:				; XREF: off_19E80
0001A8D8 70FF                       		moveq	#-1,d0
0001A8DA 3028 0036                  		move.w	$36(a0),d0
0001A8DE 2240                       		movea.l	d0,a1
0001A8E0 4A68 0030                  		tst.w	$30(a0)
0001A8E4 6A00                       		bpl.s	loc_1A000
0001A8E6 4268 0030                  		clr.w	$30(a0)
0001A8EA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8F0 6100                       		bsr.s	loc_1A020
0001A8F2                            
0001A8F2                            loc_1A000:
0001A8F2 700F                       		moveq	#$F,d0
0001A8F4 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A8F8 6600                       		bne.s	loc_1A00A
0001A8FA 6100                       		bsr.s	loc_1A020
0001A8FC                            
0001A8FC                            loc_1A00A:
0001A8FC 4A68 0032                  		tst.w	$32(a0)
0001A900 6700                       		beq.s	locret_1A01E
0001A902 5528 0034                  		subq.b	#2,$34(a0)
0001A906 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A90C 4268 0032                  		clr.w	$32(a0)
0001A910                            
0001A910                            locret_1A01E:
0001A910 4E75                       		rts	
0001A912                            ; ===========================================================================
0001A912                            
0001A912                            loc_1A020:
0001A912 303C 00B1                  		move.w	#$B1,d0
0001A916 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_1A02A:				; XREF: off_19E80
0001A91C 117C 0030 0017             		move.b	#$30,$17(a0)
0001A922 08E8 0000 0022             		bset	#0,$22(a0)
0001A928 4EB9 0000 DDD8             		jsr	SpeedToPos
0001A92E 117C 0006 001A             		move.b	#6,$1A(a0)
0001A934 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A93A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A940 6500                       		bcs.s	loc_1A070
0001A942 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A948 5428 0034                  		addq.b	#2,$34(a0)
0001A94C 117C 0020 0017             		move.b	#$20,$17(a0)
0001A952 317C 0100 0010             		move.w	#$100,$10(a0)
0001A958 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A95E 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A962                            
0001A962                            loc_1A070:
0001A962 6000 0000                  		bra.w	loc_1A166
0001A966                            ; ===========================================================================
0001A966                            
0001A966                            loc_1A074:				; XREF: off_19E80
0001A966 08E8 0000 0022             		bset	#0,$22(a0)
0001A96C 117C 0004 001C             		move.b	#4,$1C(a0)
0001A972 4EB9 0000 DDD8             		jsr	SpeedToPos
0001A978 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A97E 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A984 6500                       		bcs.s	loc_1A09A
0001A986 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A98C                            
0001A98C                            loc_1A09A:
0001A98C 317C 0400 0010             		move.w	#$400,$10(a0)
0001A992 3028 0008                  		move.w	8(a0),d0
0001A996 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A99A 6A00                       		bpl.s	loc_1A0B4
0001A99C 317C 0500 0010             		move.w	#$500,$10(a0)
0001A9A2 6000 0000                  		bra.w	loc_1A0F2
0001A9A6                            ; ===========================================================================
0001A9A6                            
0001A9A6                            loc_1A0B4:
0001A9A6 0440 0070                  		subi.w	#$70,d0
0001A9AA 6500                       		bcs.s	loc_1A0F2
0001A9AC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A9B2 5140                       		subq.w	#8,d0
0001A9B4 6500                       		bcs.s	loc_1A0F2
0001A9B6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A9BC 5140                       		subq.w	#8,d0
0001A9BE 6500                       		bcs.s	loc_1A0F2
0001A9C0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9C6 5140                       		subq.w	#8,d0
0001A9C8 6500                       		bcs.s	loc_1A0F2
0001A9CA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9D0 5140                       		subq.w	#8,d0
0001A9D2 6500                       		bcs.s	loc_1A0F2
0001A9D4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9DA 0440 0038                  		subi.w	#$38,d0
0001A9DE 6500                       		bcs.s	loc_1A0F2
0001A9E0 4268 0010                  		clr.w	$10(a0)
0001A9E4                            
0001A9E4                            loc_1A0F2:
0001A9E4 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A9EA 6500                       		bcs.s	loc_1A110
0001A9EC 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A9F2 317C 0240 0010             		move.w	#$240,$10(a0)
0001A9F8 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A9FE 5428 0034                  		addq.b	#2,$34(a0)
0001AA02                            
0001AA02                            loc_1A110:
0001AA02 6000                       		bra.s	loc_1A15C
0001AA04                            ; ===========================================================================
0001AA04                            
0001AA04                            loc_1A112:				; XREF: off_19E80
0001AA04 4EB9 0000 DDD8             		jsr	SpeedToPos
0001AA0A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AA10 6500                       		bcs.s	loc_1A124
0001AA12 4268 0010                  		clr.w	$10(a0)
0001AA16                            
0001AA16                            loc_1A124:
0001AA16 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AA1C 4A68 0012                  		tst.w	$12(a0)
0001AA20 6B00                       		bmi.s	loc_1A142
0001AA22 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AA28 6500                       		bcs.s	loc_1A142
0001AA2A 317C 0592 000C             		move.w	#$592,$C(a0)
0001AA30 4268 0012                  		clr.w	$12(a0)
0001AA34                            
0001AA34                            loc_1A142:
0001AA34 3028 0010                  		move.w	$10(a0),d0
0001AA38 8068 0012                  		or.w	$12(a0),d0
0001AA3C 6600                       		bne.s	loc_1A15C
0001AA3E 5428 0034                  		addq.b	#2,$34(a0)
0001AA42 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AA48 117C 0001 0021             		move.b	#1,$21(a0)
0001AA4E                            
0001AA4E                            loc_1A15C:
0001AA4E 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AA52 4EB9 0000 AEBE             		jsr	AnimateSprite
0001AA58                            
0001AA58                            loc_1A166:
0001AA58 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AA5E 6C00                       		bge.s	loc_1A172
0001AA60 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AA64                            
0001AA64                            loc_1A172:
0001AA64 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AA6A 6C00                       		bge.s	locret_1A190
0001AA6C 323C 001B                  		move.w	#$1B,d1
0001AA70 343C 0070                  		move.w	#$70,d2
0001AA74 363C 0071                  		move.w	#$71,d3
0001AA78 3828 0008                  		move.w	8(a0),d4
0001AA7C 4EF9 0001 01CE             		jmp	SolidObject
0001AA82                            ; ===========================================================================
0001AA82                            
0001AA82                            locret_1A190:
0001AA82 4E75                       		rts	
0001AA84                            ; ===========================================================================
0001AA84                            
0001AA84                            loc_1A192:				; XREF: off_19E80
0001AA84 217C 0001 867E 0004        		move.l	#Map_Eggman,4(a0)
0001AA8C 317C 0400 0002             		move.w	#$400,2(a0)
0001AA92 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA98 08E8 0000 0022             		bset	#0,$22(a0)
0001AA9E 4EB9 0000 DDD8             		jsr	SpeedToPos
0001AAA4 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AAAA 6400                       		bcc.s	loc_1A1D0
0001AAAC 317C 0180 0010             		move.w	#$180,$10(a0)
0001AAB2 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AAB8 117C 000F 0020             		move.b	#$F,$20(a0)
0001AABE 5428 0034                  		addq.b	#2,$34(a0)
0001AAC2                            
0001AAC2                            loc_1A1D0:
0001AAC2 6000 FF8A                  		bra.w	loc_1A15C
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            loc_1A1D4:				; XREF: off_19E80
0001AAC6 08E8 0000 0022             		bset	#0,$22(a0)
0001AACC 4EB9 0000 DDD8             		jsr	SpeedToPos
0001AAD2 4A68 0030                  		tst.w	$30(a0)
0001AAD6 6600                       		bne.s	loc_1A1FC
0001AAD8 4A28 0020                  		tst.b	$20(a0)
0001AADC 6600                       		bne.s	loc_1A216
0001AADE 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AAE4 303C 00AC                  		move.w	#$AC,d0
0001AAE8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AAEE                            
0001AAEE                            loc_1A1FC:
0001AAEE 5368 0030                  		subq.w	#1,$30(a0)
0001AAF2 6600                       		bne.s	loc_1A216
0001AAF4 4A28 0022                  		tst.b	$22(a0)
0001AAF8 6A00                       		bpl.s	loc_1A210
0001AAFA 317C 0060 0012             		move.w	#$60,$12(a0)
0001AB00 6000                       		bra.s	loc_1A216
0001AB02                            ; ===========================================================================
0001AB02                            
0001AB02                            loc_1A210:
0001AB02 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB08                            
0001AB08                            loc_1A216:
0001AB08 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AB0E 6D00                       		blt.s	loc_1A23A
0001AB10 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AB16 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AB1C 4278 D014                  		clr.w	($FFFFD014).w
0001AB20 4A68 0012                  		tst.w	$12(a0)
0001AB24 6A00                       		bpl.s	loc_1A248
0001AB26 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AB2C                            
0001AB2C                            loc_1A23A:
0001AB2C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AB32 6D00                       		blt.s	loc_1A248
0001AB34 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AB3A                            
0001AB3A                            loc_1A248:
0001AB3A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AB40 6500                       		bcs.s	loc_1A260
0001AB42 4A28 0001                  		tst.b	1(a0)
0001AB46 6B00                       		bmi.s	loc_1A260
0001AB48 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AB4E 6000 FAF4                  		bra.w	Obj85_Delete
0001AB52                            ; ===========================================================================
0001AB52                            
0001AB52                            loc_1A260:
0001AB52 6000 FEFA                  		bra.w	loc_1A15C
0001AB56                            ; ===========================================================================
0001AB56                            
0001AB56                            loc_1A264:				; XREF: Obj85_Index
0001AB56 2268 0034                  		movea.l	$34(a0),a1
0001AB5A 1011                       		move.b	(a1),d0
0001AB5C B010                       		cmp.b	(a0),d0
0001AB5E 6600 FAE4                  		bne.w	Obj85_Delete
0001AB62 117C 0007 001C             		move.b	#7,$1C(a0)
0001AB68 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB6E 6C00                       		bge.s	loc_1A280
0001AB70 6000                       		bra.s	loc_1A2A6
0001AB72                            ; ===========================================================================
0001AB72                            
0001AB72                            loc_1A280:
0001AB72 4A69 0010                  		tst.w	$10(a1)
0001AB76 6700                       		beq.s	loc_1A28C
0001AB78 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AB7E                            
0001AB7E                            loc_1A28C:
0001AB7E 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AB82 4EB9 0000 AEBE             		jsr	AnimateSprite
0001AB88                            
0001AB88                            loc_1A296:
0001AB88 2268 0034                  		movea.l	$34(a0),a1
0001AB8C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB92 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB98                            
0001AB98                            loc_1A2A6:
0001AB98 2268 0034                  		movea.l	$34(a0),a1
0001AB9C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ABA2 7003                       		moveq	#3,d0
0001ABA4 C028 0022                  		and.b	$22(a0),d0
0001ABA8 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ABAE 8128 0001                  		or.b	d0,1(a0)
0001ABB2 4EF9 0000 DDFE             		jmp	DisplaySprite
0001ABB8                            ; ===========================================================================
0001ABB8                            
0001ABB8                            loc_1A2C6:				; XREF: Obj85_Index
0001ABB8 2268 0034                  		movea.l	$34(a0),a1
0001ABBC 1011                       		move.b	(a1),d0
0001ABBE B010                       		cmp.b	(a0),d0
0001ABC0 6600 FA82                  		bne.w	Obj85_Delete
0001ABC4 0CA9 0001 867E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ABCC 6700                       		beq.s	loc_1A2E4
0001ABCE 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ABD4 60C2                       		bra.s	loc_1A2A6
0001ABD6                            ; ===========================================================================
0001ABD6                            
0001ABD6                            loc_1A2E4:
0001ABD6 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABDC 4A29 0021                  		tst.b	$21(a1)
0001ABE0 6F00                       		ble.s	loc_1A312
0001ABE2 117C 0006 001C             		move.b	#6,$1C(a0)
0001ABE8 217C 0001 867E 0004        		move.l	#Map_Eggman,4(a0)
0001ABF0 317C 0400 0002             		move.w	#$400,2(a0)
0001ABF6 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ABFA 4EB9 0000 AEBE             		jsr	AnimateSprite
0001AC00 6000 FF86                  		bra.w	loc_1A296
0001AC04                            ; ===========================================================================
0001AC04                            
0001AC04                            loc_1A312:
0001AC04 4A28 0001                  		tst.b	1(a0)
0001AC08 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AC0C 6100 D588                  		bsr.w	BossDefeated
0001AC10 117C 0002 0018             		move.b	#2,$18(a0)
0001AC16 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC1C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AC24 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AC2A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AC2E 4EB9 0000 AEBE             		jsr	AnimateSprite
0001AC34 6000 FF52                  		bra.w	loc_1A296
0001AC38                            ; ===========================================================================
0001AC38                            
0001AC38                            loc_1A346:				; XREF: Obj85_Index
0001AC38 08E8 0000 0022             		bset	#0,$22(a0)
0001AC3E 2268 0034                  		movea.l	$34(a0),a1
0001AC42 0CA9 0001 867E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC4A 6700                       		beq.s	loc_1A35E
0001AC4C 6000 FF4A                  		bra.w	loc_1A2A6
0001AC50                            ; ===========================================================================
0001AC50                            
0001AC50                            loc_1A35E:
0001AC50 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC56 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC5C 4A28 001E                  		tst.b	$1E(a0)
0001AC60 6600                       		bne.s	loc_1A376
0001AC62 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AC68                            
0001AC68                            loc_1A376:
0001AC68 5328 001E                  		subq.b	#1,$1E(a0)
0001AC6C 6E00                       		bgt.s	loc_1A38A
0001AC6E 5228 001A                  		addq.b	#1,$1A(a0)
0001AC72 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AC78 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AC7C                            
0001AC7C                            loc_1A38A:
0001AC7C 6000 FF0A                  		bra.w	loc_1A296
0001AC80                            ; ===========================================================================
0001AC80                            
0001AC80                            loc_1A38E:				; XREF: Obj85_Index
0001AC80 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AC86 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC8A 9068 0008                  		sub.w	8(a0),d0
0001AC8E 6500                       		bcs.s	loc_1A3A6
0001AC90 4A28 0001                  		tst.b	1(a0)
0001AC94 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AC98                            
0001AC98                            loc_1A3A6:
0001AC98 4EF9 0000 DDFE             		jmp	DisplaySprite
0001AC9E                            ; ===========================================================================
0001AC9E                            
0001AC9E                            loc_1A3AC:				; XREF: Obj85_Index
0001AC9E 117C 0000 001A             		move.b	#0,$1A(a0)
0001ACA4 08E8 0000 0022             		bset	#0,$22(a0)
0001ACAA 2268 0034                  		movea.l	$34(a0),a1
0001ACAE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ACB4 6600                       		bne.s	loc_1A3D0
0001ACB6 0CA9 0001 867E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACBE 6700 F984                  		beq.w	Obj85_Delete
0001ACC2                            
0001ACC2                            loc_1A3D0:
0001ACC2 6000 FED4                  		bra.w	loc_1A2A6
0001ACC6                            ; ===========================================================================
0001ACC6                            Ani_obj85:
0001ACC6                            	include "_anim\obj85.asm"
0001ACC6                            ; ---------------------------------------------------------------------------
0001ACC6                            ; Animation script - Eggman (FZ)
0001ACC6                            ; ---------------------------------------------------------------------------
0001ACC6 0000                       		dc.w byte_1A3D6-Ani_obj85
0001ACC8 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001ACCC                            		even
0001ACCC                            		even
0001ACCC                            
0001ACCC                            Map_Eggman2:
0001ACCC                            	include "_maps\Eggman2.asm"
0001ACCC                            ; ---------------------------------------------------------------------------
0001ACCC                            ; Sprite mappings - Eggman (FZ)
0001ACCC                            ; ---------------------------------------------------------------------------
0001ACCC 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001ACCE 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001ACD0 06                         byte_1A3DE:	dc.b 6
0001ACD1 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ACD6 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ACDB EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACE0 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACE5 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACEA 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACEF 06                         byte_1A3FD:	dc.b 6
0001ACF0 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ACF5 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ACFA EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACFF FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AD04 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AD09 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AD0E                            		even
0001AD0E                            		even
0001AD0E                            
0001AD0E                            Map_FZBoss:
0001AD0E                            	include "_maps\FZ boss.asm"
0001AD0E                            ; ---------------------------------------------------------------------------
0001AD0E                            ; Sprite mappings - boss (FZ)
0001AD0E                            ; ---------------------------------------------------------------------------
0001AD0E 0000                       		dc.w byte_1A422-Map_FZBoss
0001AD10 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AD12 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AD14 02                         byte_1A422:	dc.b 2
0001AD15 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AD1A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AD1F 03                         byte_1A42D:	dc.b 3
0001AD20 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AD25 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AD2A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AD2F 02                         byte_1A43D:	dc.b 2
0001AD30 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AD35 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AD3A                            		even
0001AD3A                            		even
0001AD3A                            
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            Obj84_Delete:
0001AD3A 4EF9 0000 DE3A             		jmp	DeleteObject
0001AD40                            ; ===========================================================================
0001AD40                            ; ---------------------------------------------------------------------------
0001AD40                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AD40                            ; ---------------------------------------------------------------------------
0001AD40                            
0001AD40                            Obj84:					; XREF: Obj_Index
0001AD40 7000                       		moveq	#0,d0
0001AD42 1028 0024                  		move.b	$24(a0),d0
0001AD46 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AD4A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AD4E                            ; ===========================================================================
0001AD4E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AD50 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AD52 0000                       		dc.w loc_1A57E-Obj84_Index
0001AD54                            
0001AD54 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AD58 2550 0620                  		dc.w $2550, $620
0001AD5C 2490 04C0                  		dc.w $2490, $4C0
0001AD60 2510 04C0                  		dc.w $2510, $4C0
0001AD64                            ; ===========================================================================
0001AD64                            
0001AD64                            Obj84_Main:				; XREF: Obj84_Index
0001AD64 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AD68 7000                       		moveq	#0,d0
0001AD6A 1028 0028                  		move.b	$28(a0),d0
0001AD6E D040                       		add.w	d0,d0
0001AD70 D2C0                       		adda.w	d0,a1
0001AD72 117C 0004 0001             		move.b	#4,1(a0)
0001AD78 08E8 0007 0001             		bset	#7,1(a0)
0001AD7E 08E8 0004 0001             		bset	#4,1(a0)
0001AD84 317C 0300 0002             		move.w	#$300,2(a0)
0001AD8A 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AD92 3159 0008                  		move.w	(a1)+,8(a0)
0001AD96 3151 000C                  		move.w	(a1),$C(a0)
0001AD9A 3159 0038                  		move.w	(a1)+,$38(a0)
0001AD9E 117C 0020 0016             		move.b	#$20,$16(a0)
0001ADA4 117C 0060 0017             		move.b	#$60,$17(a0)
0001ADAA 117C 0020 0019             		move.b	#$20,$19(a0)
0001ADB0 117C 0060 0016             		move.b	#$60,$16(a0)
0001ADB6 117C 0003 0018             		move.b	#3,$18(a0)
0001ADBC 5428 0024                  		addq.b	#2,$24(a0)
0001ADC0                            
0001ADC0                            loc_1A4CE:				; XREF: Obj84_Index
0001ADC0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADC6 6F00                       		ble.s	loc_1A4DC
0001ADC8 08E8 0001 0001             		bset	#1,1(a0)
0001ADCE                            
0001ADCE                            loc_1A4DC:
0001ADCE 42A8 003C                  		clr.l	$3C(a0)
0001ADD2 4A28 0029                  		tst.b	$29(a0)
0001ADD6 6700                       		beq.s	loc_1A4EA
0001ADD8 5428 0024                  		addq.b	#2,$24(a0)
0001ADDC                            
0001ADDC                            loc_1A4EA:
0001ADDC 2028 003C                  		move.l	$3C(a0),d0
0001ADE0 2228 0038                  		move.l	$38(a0),d1
0001ADE4 D280                       		add.l	d0,d1
0001ADE6 4841                       		swap	d1
0001ADE8 3141 000C                  		move.w	d1,$C(a0)
0001ADEC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ADF2 6600                       		bne.s	loc_1A524
0001ADF4 4A68 0030                  		tst.w	$30(a0)
0001ADF8 6A00                       		bpl.s	loc_1A524
0001ADFA 70F6                       		moveq	#-$A,d0
0001ADFC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE02 6F00                       		ble.s	loc_1A514
0001AE04 700E                       		moveq	#$E,d0
0001AE06                            
0001AE06                            loc_1A514:
0001AE06 D240                       		add.w	d0,d1
0001AE08 2268 0034                  		movea.l	$34(a0),a1
0001AE0C 3341 000C                  		move.w	d1,$C(a1)
0001AE10 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE16                            
0001AE16                            loc_1A524:
0001AE16 323C 002B                  		move.w	#$2B,d1
0001AE1A 343C 0060                  		move.w	#$60,d2
0001AE1E 363C 0061                  		move.w	#$61,d3
0001AE22 3828 0008                  		move.w	8(a0),d4
0001AE26 4EB9 0001 01CE             		jsr	SolidObject
0001AE2C 7000                       		moveq	#0,d0
0001AE2E 3228 003C                  		move.w	$3C(a0),d1
0001AE32 6A00                       		bpl.s	loc_1A550
0001AE34 4441                       		neg.w	d1
0001AE36 5141                       		subq.w	#8,d1
0001AE38 6500                       		bcs.s	loc_1A55C
0001AE3A 5200                       		addq.b	#1,d0
0001AE3C E841                       		asr.w	#4,d1
0001AE3E D041                       		add.w	d1,d0
0001AE40 6000                       		bra.s	loc_1A55C
0001AE42                            ; ===========================================================================
0001AE42                            
0001AE42                            loc_1A550:
0001AE42 0441 0027                  		subi.w	#$27,d1
0001AE46 6500                       		bcs.s	loc_1A55C
0001AE48 5200                       		addq.b	#1,d0
0001AE4A E841                       		asr.w	#4,d1
0001AE4C D041                       		add.w	d1,d0
0001AE4E                            
0001AE4E                            loc_1A55C:
0001AE4E 1140 001A                  		move.b	d0,$1A(a0)
0001AE52 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE56 9068 0008                  		sub.w	8(a0),d0
0001AE5A 6B00                       		bmi.s	loc_1A578
0001AE5C 0440 0140                  		subi.w	#$140,d0
0001AE60 6B00                       		bmi.s	loc_1A578
0001AE62 4A28 0001                  		tst.b	1(a0)
0001AE66 6A00 FED2                  		bpl.w	Obj84_Delete
0001AE6A                            
0001AE6A                            loc_1A578:
0001AE6A 4EF9 0000 DDFE             		jmp	DisplaySprite
0001AE70                            ; ===========================================================================
0001AE70                            
0001AE70                            loc_1A57E:				; XREF: Obj84_Index
0001AE70 7000                       		moveq	#0,d0
0001AE72 1028 0028                  		move.b	$28(a0),d0
0001AE76 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AE7A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AE7E 6000 FF5C                  		bra.w	loc_1A4EA
0001AE82                            ; ===========================================================================
0001AE82 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AE84 0000                       		dc.w loc_1A598-off_1A590
0001AE86 0000                       		dc.w loc_1A604-off_1A590
0001AE88 0000                       		dc.w loc_1A604-off_1A590
0001AE8A                            ; ===========================================================================
0001AE8A                            
0001AE8A                            loc_1A598:				; XREF: off_1A590
0001AE8A 4A28 0029                  		tst.b	$29(a0)
0001AE8E 6600                       		bne.s	loc_1A5D4
0001AE90 2268 0034                  		movea.l	$34(a0),a1
0001AE94 4A29 0021                  		tst.b	$21(a1)
0001AE98 6600                       		bne.s	loc_1A5B4
0001AE9A 6100 D2FA                  		bsr.w	BossDefeated
0001AE9E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AEA6                            
0001AEA6                            loc_1A5B4:
0001AEA6 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AEAE 6400                       		bcc.s	locret_1A602
0001AEB0 42A8 003C                  		clr.l	$3C(a0)
0001AEB4 2268 0034                  		movea.l	$34(a0),a1
0001AEB8 5369 0032                  		subq.w	#1,$32(a1)
0001AEBC 4269 0030                  		clr.w	$30(a1)
0001AEC0 5528 0024                  		subq.b	#2,$24(a0)
0001AEC4 4E75                       		rts	
0001AEC6                            ; ===========================================================================
0001AEC6                            
0001AEC6                            loc_1A5D4:
0001AEC6 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AECC 6C00                       		bge.s	loc_1A5E4
0001AECE 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AED6                            
0001AED6                            loc_1A5E4:
0001AED6 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AEDE 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AEE4 6E00                       		bgt.s	locret_1A602
0001AEE6 4268 003E                  		clr.w	$3E(a0)
0001AEEA 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AEF0 4228 0029                  		clr.b	$29(a0)
0001AEF4                            
0001AEF4                            locret_1A602:
0001AEF4 4E75                       		rts	
0001AEF6                            ; ===========================================================================
0001AEF6                            
0001AEF6                            loc_1A604:				; XREF: off_1A590
0001AEF6 08E8 0001 0001             		bset	#1,1(a0)
0001AEFC 4A28 0029                  		tst.b	$29(a0)
0001AF00 6600                       		bne.s	loc_1A646
0001AF02 2268 0034                  		movea.l	$34(a0),a1
0001AF06 4A29 0021                  		tst.b	$21(a1)
0001AF0A 6600                       		bne.s	loc_1A626
0001AF0C 6100 D288                  		bsr.w	BossDefeated
0001AF10 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AF18                            
0001AF18                            loc_1A626:
0001AF18 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AF20 6400                       		bcc.s	locret_1A674
0001AF22 42A8 003C                  		clr.l	$3C(a0)
0001AF26 2268 0034                  		movea.l	$34(a0),a1
0001AF2A 5369 0032                  		subq.w	#1,$32(a1)
0001AF2E 4269 0030                  		clr.w	$30(a1)
0001AF32 5528 0024                  		subq.b	#2,$24(a0)
0001AF36 4E75                       		rts	
0001AF38                            ; ===========================================================================
0001AF38                            
0001AF38                            loc_1A646:
0001AF38 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AF3E 6D00                       		blt.s	loc_1A656
0001AF40 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AF48                            
0001AF48                            loc_1A656:
0001AF48 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AF50 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AF56 6D00                       		blt.s	locret_1A674
0001AF58 4268 003E                  		clr.w	$3E(a0)
0001AF5C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AF62 4228 0029                  		clr.b	$29(a0)
0001AF66                            
0001AF66                            locret_1A674:
0001AF66 4E75                       		rts	
0001AF68                            ; ===========================================================================
0001AF68                            ; ---------------------------------------------------------------------------
0001AF68                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF68                            ; ---------------------------------------------------------------------------
0001AF68                            Map_obj84:
0001AF68                            	include "_maps\obj84.asm"
0001AF68                            ; ---------------------------------------------------------------------------
0001AF68                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF68                            ; ---------------------------------------------------------------------------
0001AF68 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AF6C 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AF70 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AF74 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF78 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF7C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AF80 06                         byte_1A68E:	dc.b 6
0001AF81 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF86 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF8B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF90 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF95 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF9A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF9F 08                         byte_1A6AD:	dc.b 8
0001AFA0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFA5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFAA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFAF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFB4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFB9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFBE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFC3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFC8 0A                         byte_1A6D6:	dc.b $A
0001AFC9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFCE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFD3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFD8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFDD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFE2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFE7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFEC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFF1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFF6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFFB 0C                         byte_1A709:	dc.b $C
0001AFFC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B001 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B006 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B00B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B010 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B015 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B01A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B01F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B024 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B029 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B02E 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B033 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B038 0D                         byte_1A746:	dc.b $D
0001B039 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B03E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B043 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B048 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B04D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B052 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B057 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B05C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B061 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B066 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B06B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B070 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B075 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B07A 0E                         byte_1A788:	dc.b $E
0001B07B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B080 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B085 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B08A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B08F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B094 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B099 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B09E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0A3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0A8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0AD 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B0B2 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B0B7 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B0BC 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B0C1 02                         byte_1A7CF:	dc.b 2
0001B0C2 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B0C7 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B0CC                            		even
0001B0CC                            		even
0001B0CC                            
0001B0CC                            ; ===========================================================================
0001B0CC                            ; ---------------------------------------------------------------------------
0001B0CC                            ; Object 86 - energy balls (FZ)
0001B0CC                            ; ---------------------------------------------------------------------------
0001B0CC                            
0001B0CC                            Obj86:					; XREF: Obj_Index
0001B0CC 7000                       		moveq	#0,d0
0001B0CE 1028 0024                  		move.b	$24(a0),d0
0001B0D2 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B0D6 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B0DA                            ; ===========================================================================
0001B0DA 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B0DC 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B0DE 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B0E0 0000                       		dc.w loc_1A962-Obj86_Index
0001B0E2 0000                       		dc.w loc_1A982-Obj86_Index
0001B0E4                            ; ===========================================================================
0001B0E4                            
0001B0E4                            Obj86_Main:				; XREF: Obj86_Index
0001B0E4 317C 2588 0008             		move.w	#$2588,8(a0)
0001B0EA 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B0F0 317C 0300 0002             		move.w	#$300,2(a0)
0001B0F6 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B0FE 117C 0000 001C             		move.b	#0,$1C(a0)
0001B104 117C 0003 0018             		move.b	#3,$18(a0)
0001B10A 117C 0008 0017             		move.b	#8,$17(a0)
0001B110 117C 0008 0016             		move.b	#8,$16(a0)
0001B116 117C 0004 0001             		move.b	#4,1(a0)
0001B11C 08E8 0007 0001             		bset	#7,1(a0)
0001B122 5428 0024                  		addq.b	#2,$24(a0)
0001B126                            
0001B126                            Obj86_Generator:			; XREF: Obj86_Index
0001B126 2268 0034                  		movea.l	$34(a0),a1
0001B12A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B130 6600                       		bne.s	loc_1A850
0001B132 10BC 003F                  		move.b	#$3F,(a0)
0001B136 117C 0000 0024             		move.b	#0,$24(a0)
0001B13C 4EF9 0000 DDFE             		jmp	DisplaySprite
0001B142                            ; ===========================================================================
0001B142                            
0001B142                            loc_1A850:
0001B142 117C 0000 001C             		move.b	#0,$1C(a0)
0001B148 4A28 0029                  		tst.b	$29(a0)
0001B14C 6700                       		beq.s	loc_1A86C
0001B14E 5428 0024                  		addq.b	#2,$24(a0)
0001B152 117C 0001 001C             		move.b	#1,$1C(a0)
0001B158 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B15E                            
0001B15E                            loc_1A86C:
0001B15E 323C 0013                  		move.w	#$13,d1
0001B162 343C 0008                  		move.w	#8,d2
0001B166 363C 0011                  		move.w	#$11,d3
0001B16A 3828 0008                  		move.w	8(a0),d4
0001B16E 4EB9 0001 01CE             		jsr	SolidObject
0001B174 3038 D008                  		move.w	($FFFFD008).w,d0
0001B178 9068 0008                  		sub.w	8(a0),d0
0001B17C 6B00                       		bmi.s	loc_1A89A
0001B17E 0440 0140                  		subi.w	#$140,d0
0001B182 6B00                       		bmi.s	loc_1A89A
0001B184 4A28 0001                  		tst.b	1(a0)
0001B188 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B18C                            
0001B18C                            loc_1A89A:
0001B18C 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B190 4EB9 0000 AEBE             		jsr	AnimateSprite
0001B196 4EF9 0000 DDFE             		jmp	DisplaySprite
0001B19C                            ; ===========================================================================
0001B19C                            
0001B19C                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B19C 4A28 0029                  		tst.b	$29(a0)
0001B1A0 6700 0000                  		beq.w	loc_1A954
0001B1A4 4228 0029                  		clr.b	$29(a0)
0001B1A8 D068 0030                  		add.w	$30(a0),d0
0001B1AC 0240 001E                  		andi.w	#$1E,d0
0001B1B0 D4C0                       		adda.w	d0,a2
0001B1B2 5868 0030                  		addq.w	#4,$30(a0)
0001B1B6 4268 0032                  		clr.w	$32(a0)
0001B1BA 7403                       		moveq	#3,d2
0001B1BC                            
0001B1BC                            Obj86_Loop:
0001B1BC 4EB9 0000 E29A             		jsr	SingleObjLoad2
0001B1C2 6600 0000                  		bne.w	loc_1A954
0001B1C6 12BC 0086                  		move.b	#$86,(a1)
0001B1CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1D0 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B1D6 137C 0008 0024             		move.b	#8,$24(a1)
0001B1DC 337C 2300 0002             		move.w	#$2300,2(a1)
0001B1E2 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B1EA 137C 000C 0016             		move.b	#$C,$16(a1)
0001B1F0 137C 000C 0017             		move.b	#$C,$17(a1)
0001B1F6 137C 0000 0020             		move.b	#0,$20(a1)
0001B1FC 137C 0003 0018             		move.b	#3,$18(a1)
0001B202 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B208 137C 0004 0001             		move.b	#4,1(a1)
0001B20E 08E9 0007 0001             		bset	#7,1(a1)
0001B214 2348 0034                  		move.l	a0,$34(a1)
0001B218 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B21E 3228 0032                  		move.w	$32(a0),d1
0001B222 C3FC FFB1                  		muls.w	#-$4F,d1
0001B226 0641 2578                  		addi.w	#$2578,d1
0001B22A 0240 001F                  		andi.w	#$1F,d0
0001B22E 0440 0010                  		subi.w	#$10,d0
0001B232 D041                       		add.w	d1,d0
0001B234 3340 0030                  		move.w	d0,$30(a1)
0001B238 5268 0032                  		addq.w	#1,$32(a0)
0001B23C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B242 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B246                            
0001B246                            loc_1A954:
0001B246 4A68 0032                  		tst.w	$32(a0)
0001B24A 6600                       		bne.s	loc_1A95E
0001B24C 5428 0024                  		addq.b	#2,$24(a0)
0001B250                            
0001B250                            loc_1A95E:
0001B250 6000 FF0C                  		bra.w	loc_1A86C
0001B254                            ; ===========================================================================
0001B254                            
0001B254                            loc_1A962:				; XREF: Obj86_Index
0001B254 117C 0002 001C             		move.b	#2,$1C(a0)
0001B25A 4A68 0038                  		tst.w	$38(a0)
0001B25E 6600                       		bne.s	loc_1A97E
0001B260 117C 0002 0024             		move.b	#2,$24(a0)
0001B266 2268 0034                  		movea.l	$34(a0),a1
0001B26A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B270                            
0001B270                            loc_1A97E:
0001B270 6000 FEEC                  		bra.w	loc_1A86C
0001B274                            ; ===========================================================================
0001B274                            
0001B274                            loc_1A982:				; XREF: Obj86_Index
0001B274 7000                       		moveq	#0,d0
0001B276 1028 0025                  		move.b	$25(a0),d0
0001B27A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B27E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B282 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B286 4EB9 0000 AEBE             		jsr	AnimateSprite
0001B28C 4EF9 0000 DDFE             		jmp	DisplaySprite
0001B292                            ; ===========================================================================
0001B292 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B294 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B296 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B298                            ; ===========================================================================
0001B298                            
0001B298                            loc_1A9A6:				; XREF: Obj86_Index2
0001B298 3028 0030                  		move.w	$30(a0),d0
0001B29C 9068 0008                  		sub.w	8(a0),d0
0001B2A0 E940                       		asl.w	#4,d0
0001B2A2 3140 0010                  		move.w	d0,$10(a0)
0001B2A6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2AC 5428 0025                  		addq.b	#2,$25(a0)
0001B2B0 4E75                       		rts	
0001B2B2                            ; ===========================================================================
0001B2B2                            
0001B2B2                            loc_1A9C0:				; XREF: Obj86_Index2
0001B2B2 4A68 0010                  		tst.w	$10(a0)
0001B2B6 6700                       		beq.s	loc_1A9E6
0001B2B8 4EB9 0000 DDD8             		jsr	SpeedToPos
0001B2BE 3028 0008                  		move.w	8(a0),d0
0001B2C2 9068 0030                  		sub.w	$30(a0),d0
0001B2C6 6400                       		bcc.s	loc_1A9E6
0001B2C8 4268 0010                  		clr.w	$10(a0)
0001B2CC D168 0008                  		add.w	d0,8(a0)
0001B2D0 2268 0034                  		movea.l	$34(a0),a1
0001B2D4 5369 0032                  		subq.w	#1,$32(a1)
0001B2D8                            
0001B2D8                            loc_1A9E6:
0001B2D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2DE 5368 0028                  		subq.w	#1,$28(a0)
0001B2E2 6600                       		bne.s	locret_1AA1C
0001B2E4 5428 0025                  		addq.b	#2,$25(a0)
0001B2E8 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2EE 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B2F4 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2FA 7000                       		moveq	#0,d0
0001B2FC 3038 D008                  		move.w	($FFFFD008).w,d0
0001B300 9068 0008                  		sub.w	8(a0),d0
0001B304 3140 0010                  		move.w	d0,$10(a0)
0001B308 317C 0140 0012             		move.w	#$140,$12(a0)
0001B30E                            
0001B30E                            locret_1AA1C:
0001B30E 4E75                       		rts	
0001B310                            ; ===========================================================================
0001B310                            
0001B310                            loc_1AA1E:				; XREF: Obj86_Index2
0001B310 4EB9 0000 DDD8             		jsr	SpeedToPos
0001B316 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B31C 6400                       		bcc.s	loc_1AA34
0001B31E 5368 0028                  		subq.w	#1,$28(a0)
0001B322 6700                       		beq.s	loc_1AA34
0001B324 4E75                       		rts	
0001B326                            ; ===========================================================================
0001B326                            
0001B326                            loc_1AA34:
0001B326 2268 0034                  		movea.l	$34(a0),a1
0001B32A 5369 0038                  		subq.w	#1,$38(a1)
0001B32E 6000 FA0A                  		bra.w	Obj84_Delete
0001B332                            ; ===========================================================================
0001B332                            Ani_obj86:
0001B332                            	include "_anim\obj86.asm"
0001B332                            ; ---------------------------------------------------------------------------
0001B332                            ; Animation script - energy ball launcher (FZ)
0001B332                            ; ---------------------------------------------------------------------------
0001B332 0000                       		dc.w byte_1AA46-Ani_obj86
0001B334 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B336 0000                       		dc.w byte_1AA50-Ani_obj86
0001B338 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B33C 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B342 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B348                            		even
0001B348                            		even
0001B348                            
0001B348                            ; ---------------------------------------------------------------------------
0001B348                            ; Sprite mappings - energy ball	launcher (FZ)
0001B348                            ; ---------------------------------------------------------------------------
0001B348                            Map_obj86:
0001B348                            	include "_maps\obj86.asm"
0001B348                            ; ---------------------------------------------------------------------------
0001B348                            ; Sprite mappings - energy ball	launcher (FZ)
0001B348                            ; ---------------------------------------------------------------------------
0001B348 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B34C 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B350 01                         byte_1AA5E:	dc.b 1
0001B351 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B356 01                         byte_1AA64:	dc.b 1
0001B357 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B35C 01                         byte_1AA6A:	dc.b 1
0001B35D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B362 01                         byte_1AA70:	dc.b 1
0001B363 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B368                            		even
0001B368                            		even
0001B368                            
0001B368                            Ani_obj86a:
0001B368                            	include "_anim\obj86a.asm"
0001B368                            ; ---------------------------------------------------------------------------
0001B368                            ; Animation script - energy balls (FZ)
0001B368                            ; ---------------------------------------------------------------------------
0001B368 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B36A 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B36C 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B37B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B38A 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B38E 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B398                            		even
0001B398                            		even
0001B398                            
0001B398                            ; ---------------------------------------------------------------------------
0001B398                            ; Sprite mappings - energy balls (FZ)
0001B398                            ; ---------------------------------------------------------------------------
0001B398                            Map_obj86a:
0001B398                            	include "_maps\obj86a.asm"
0001B398                            ; ---------------------------------------------------------------------------
0001B398                            ; Sprite mappings - energy balls (FZ)
0001B398                            ; ---------------------------------------------------------------------------
0001B398 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B39C 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B3A0 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B3A4 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B3A8 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B3AC 0000                       		dc.w byte_1AB20-Map_obj86a
0001B3AE 02                         byte_1AABC:	dc.b 2
0001B3AF F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B3B4 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B3B9 02                         byte_1AAC7:	dc.b 2
0001B3BA F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B3BF F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B3C4 02                         byte_1AAD2:	dc.b 2
0001B3C5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B3CA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B3CF 02                         byte_1AADD:	dc.b 2
0001B3D0 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B3D5 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B3DA 02                         byte_1AAE8:	dc.b 2
0001B3DB F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B3E0 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B3E5 02                         byte_1AAF3:	dc.b 2
0001B3E6 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B3EB F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B3F0 01                         byte_1AAFE:	dc.b 1
0001B3F1 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B3F6 01                         byte_1AB04:	dc.b 1
0001B3F7 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B3FC 02                         byte_1AB0A:	dc.b 2
0001B3FD F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B402 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B407 02                         byte_1AB15:	dc.b 2
0001B408 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B40D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B412 00                         byte_1AB20:	dc.b 0
0001B414 00                         		even
0001B414 00                         		even
0001B414                            
0001B414                            ; ===========================================================================
0001B414                            ; ---------------------------------------------------------------------------
0001B414                            ; Object 3E - prison capsule
0001B414                            ; ---------------------------------------------------------------------------
0001B414                            
0001B414                            Obj3E:					; XREF: Obj_Index
0001B414 7000                       		moveq	#0,d0
0001B416 1028 0024                  		move.b	$24(a0),d0
0001B41A 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B41E 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B422 3028 0008                  		move.w	8(a0),d0
0001B426 0240 FF80                  		andi.w	#$FF80,d0
0001B42A 3238 F700                  		move.w	($FFFFF700).w,d1
0001B42E 0441 0080                  		subi.w	#$80,d1
0001B432 0241 FF80                  		andi.w	#$FF80,d1
0001B436 9041                       		sub.w	d1,d0
0001B438 0C40 0280                  		cmpi.w	#$280,d0
0001B43C 6200                       		bhi.s	Obj3E_Delete
0001B43E 4EF9 0000 DDFE             		jmp	DisplaySprite
0001B444                            ; ===========================================================================
0001B444                            
0001B444                            Obj3E_Delete:
0001B444 4EF9 0000 DE3A             		jmp	DeleteObject
0001B44A                            ; ===========================================================================
0001B44A 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B44C 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B44E 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B450 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B452 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B454 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B456 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B458 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B45A                            
0001B45A 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B45E 040C 0501                  		dc.b 4,	$C, 5, 1
0001B462 0610 0403                  		dc.b 6,	$10, 4,	3
0001B466 0810 0305                  		dc.b 8,	$10, 3,	5
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            Obj3E_Main:				; XREF: Obj3E_Index
0001B46A 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B472 317C 049D 0002             		move.w	#$49D,2(a0)
0001B478 117C 0004 0001             		move.b	#4,1(a0)
0001B47E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B484 7000                       		moveq	#0,d0
0001B486 1028 0028                  		move.b	$28(a0),d0
0001B48A E548                       		lsl.w	#2,d0
0001B48C 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B490 1159 0024                  		move.b	(a1)+,$24(a0)
0001B494 1159 0019                  		move.b	(a1)+,$19(a0)
0001B498 1159 0018                  		move.b	(a1)+,$18(a0)
0001B49C 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B4A0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B4A4 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B4A6 117C 0006 0020             		move.b	#6,$20(a0)
0001B4AC 117C 0008 0021             		move.b	#8,$21(a0)
0001B4B2                            
0001B4B2                            Obj3E_Not02:
0001B4B2 4E75                       		rts	
0001B4B4                            ; ===========================================================================
0001B4B4                            
0001B4B4                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B4B4 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B4BA 6700                       		beq.s	Obj3E_ChkOpened
0001B4BC 323C 002B                  		move.w	#$2B,d1
0001B4C0 343C 0018                  		move.w	#$18,d2
0001B4C4 363C 0018                  		move.w	#$18,d3
0001B4C8 3828 0008                  		move.w	8(a0),d4
0001B4CC 4EF9 0001 01CE             		jmp	SolidObject
0001B4D2                            ; ===========================================================================
0001B4D2                            
0001B4D2                            Obj3E_ChkOpened:
0001B4D2 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B4D6 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B4D8 4228 0025                  		clr.b	$25(a0)
0001B4DC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4E2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4E8                            
0001B4E8                            Obj3E_DoOpen:
0001B4E8 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B4EE 4E75                       		rts	
0001B4F0                            ; ===========================================================================
0001B4F0                            
0001B4F0                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B4F0 323C 0017                  		move.w	#$17,d1
0001B4F4 343C 0008                  		move.w	#8,d2
0001B4F8 363C 0008                  		move.w	#8,d3
0001B4FC 3828 0008                  		move.w	8(a0),d4
0001B500 4EB9 0001 01CE             		jsr	SolidObject
0001B506 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B50C 4EB9 0000 AEBE             		jsr	AnimateSprite
0001B512 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B518 4A28 0025                  		tst.b	$25(a0)
0001B51C 6700                       		beq.s	locret_1AC60
0001B51E 5068 000C                  		addq.w	#8,$C(a0)
0001B522 117C 000A 0024             		move.b	#$A,$24(a0)
0001B528 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B52E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B532 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B536 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B53C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B542 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B544 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B54A 6000                       		bra.s	Obj3E_ContinueCode
0001B54C                            
0001B54C                            Obj3E_MoveLeft:
0001B54C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B552                            
0001B552                            Obj3E_ContinueCode:
0001B552 4228 0025                  		clr.b	$25(a0)
0001B556 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B55C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B562                            
0001B562                            locret_1AC60:
0001B562 4E75                       		rts	
0001B564                            ; ===========================================================================
0001B564                            
0001B564                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B564 7007                       		moveq	#7,d0
0001B566 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B56A 6600                       		bne.s	loc_1ACA0
0001B56C 4EB9 0000 E284             		jsr	SingleObjLoad
0001B572 6600                       		bne.s	loc_1ACA0
0001B574 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B578 3368 0008 0008             		move.w	8(a0),8(a1)
0001B57E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B584 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B58A 7200                       		moveq	#0,d1
0001B58C 1200                       		move.b	d0,d1
0001B58E E409                       		lsr.b	#2,d1
0001B590 0441 0020                  		subi.w	#$20,d1
0001B594 D369 0008                  		add.w	d1,8(a1)
0001B598 E048                       		lsr.w	#8,d0
0001B59A E608                       		lsr.b	#3,d0
0001B59C D169 000C                  		add.w	d0,$C(a1)
0001B5A0                            
0001B5A0                            loc_1ACA0:
0001B5A0 5368 001E                  		subq.w	#1,$1E(a0)
0001B5A4 6700                       		beq.s	Obj3E_MakeAnimal
0001B5A6 4E75                       		rts	
0001B5A8                            ; ===========================================================================
0001B5A8                            
0001B5A8                            Obj3E_MakeAnimal:
0001B5A8 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B5AE 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B5B4 117C 0006 001A             		move.b	#6,$1A(a0)
0001B5BA 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B5C0 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B5C6 7C07                       		moveq	#7,d6
0001B5C8 3A3C 009A                  		move.w	#$9A,d5
0001B5CC 78E4                       		moveq	#-$1C,d4
0001B5CE                            
0001B5CE                            Obj3E_Loop:
0001B5CE 4EB9 0000 E284             		jsr	SingleObjLoad
0001B5D4 6600                       		bne.s	locret_1ACF8
0001B5D6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5DA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5E6 D969 0008                  		add.w	d4,8(a1)
0001B5EA 5E44                       		addq.w	#7,d4
0001B5EC 3345 0036                  		move.w	d5,$36(a1)
0001B5F0 5145                       		subq.w	#8,d5
0001B5F2 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B5F6                            
0001B5F6                            locret_1ACF8:
0001B5F6 4E75                       		rts	
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B5F8 7007                       		moveq	#7,d0
0001B5FA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5FE 6600                       		bne.s	loc_1AD38
0001B600 4EB9 0000 E284             		jsr	SingleObjLoad
0001B606 6600                       		bne.s	loc_1AD38
0001B608 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B60C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B612 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B618 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B61E 0240 001F                  		andi.w	#$1F,d0
0001B622 5D40                       		subq.w	#6,d0
0001B624 4A41                       		tst.w	d1
0001B626 6A00                       		bpl.s	loc_1AD2E
0001B628 4440                       		neg.w	d0
0001B62A                            
0001B62A                            loc_1AD2E:
0001B62A D169 0008                  		add.w	d0,8(a1)
0001B62E 337C 000C 0036             		move.w	#$C,$36(a1)
0001B634                            
0001B634                            loc_1AD38:
0001B634 5368 001E                  		subq.w	#1,$1E(a0)
0001B638 6600                       		bne.s	locret_1AD48
0001B63A 5428 0024                  		addq.b	#2,$24(a0)
0001B63E 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B644                            
0001B644                            locret_1AD48:
0001B644 4E75                       		rts	
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B646 703E                       		moveq	#$3E,d0
0001B648 7228                       		moveq	#$28,d1
0001B64A 7440                       		moveq	#$40,d2
0001B64C 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B650                            
0001B650                            Obj3E_FindObj28:
0001B650 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B652 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B654 D2C2                       		adda.w	d2,a1		; next object RAM
0001B656 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B65A                            
0001B65A 4EB9 0000 F48A             		jsr	GotThroughAct
0001B660 4EF9 0000 DE3A             		jmp	DeleteObject
0001B666                            ; ===========================================================================
0001B666                            
0001B666                            Obj3E_Obj28Found:
0001B666 4E75                       		rts	
0001B668                            ; ===========================================================================
0001B668                            Ani_obj3E:
0001B668                            	include "_anim\obj3E.asm"
0001B668                            ; ---------------------------------------------------------------------------
0001B668                            ; Animation script - prison capsule
0001B668                            ; ---------------------------------------------------------------------------
0001B668 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B66A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B66C 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B670                            		even
0001B670                            		even
0001B670                            
0001B670                            ; ---------------------------------------------------------------------------
0001B670                            ; Sprite mappings - prison capsule
0001B670                            ; ---------------------------------------------------------------------------
0001B670                            Map_obj3E:
0001B670                            	include "_maps\obj3E.asm"
0001B670                            ; ---------------------------------------------------------------------------
0001B670                            ; Sprite mappings - prison capsule
0001B670                            ; ---------------------------------------------------------------------------
0001B670 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B674 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B678 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B67C 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B67E 07                         byte_1AD82:	dc.b 7
0001B67F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B684 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B689 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B68E F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B693 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B698 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B69D 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B6A2 01                         byte_1ADA6:	dc.b 1
0001B6A3 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B6A8 06                         byte_1ADAC:	dc.b 6
0001B6A9 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B6AE 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B6B3 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B6B8 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B6BD 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B6C2 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B6C7 01                         byte_1ADCB:	dc.b 1
0001B6C8 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B6CD 02                         byte_1ADD1:	dc.b 2
0001B6CE E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B6D3 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B6D8 01                         byte_1ADDC:	dc.b 1
0001B6D9 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B6DE 00                         byte_1ADE2:	dc.b 0
0001B6E0 00                         		even
0001B6E0 00                         		even
0001B6E0                            
0001B6E0                            ; ---------------------------------------------------------------------------
0001B6E0                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B6E0                            ; ---------------------------------------------------------------------------
0001B6E0                            
0001B6E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6E0                            
0001B6E0                            
0001B6E0                            TouchResponse:				; XREF: Obj01
0001B6E0 4E71                       		nop	
0001B6E2 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B6E6 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B6EA 5142                       		subq.w	#8,d2
0001B6EC 7A00                       		moveq	#0,d5
0001B6EE 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B6F2 5705                       		subq.b	#3,d5
0001B6F4 9645                       		sub.w	d5,d3
0001B6F6 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B6FC 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B6FE 0643 000C                  		addi.w	#$C,d3
0001B702 7A0A                       		moveq	#$A,d5
0001B704                            
0001B704                            Touch_NoDuck:
0001B704 383C 0010                  		move.w	#$10,d4
0001B708 DA45                       		add.w	d5,d5
0001B70A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B70E 3C3C 005F                  		move.w	#$5F,d6
0001B712                            
0001B712                            Touch_Loop:
0001B712 4A29 0001                  		tst.b	1(a1)
0001B716 6A00                       		bpl.s	Touch_NextObj
0001B718 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B71C 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B71E                            
0001B71E                            Touch_NextObj:
0001B71E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B722 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B726                            
0001B726 7000                       		moveq	#0,d0
0001B728 4E75                       		rts	
0001B72A                            ; ===========================================================================
0001B72A 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B72C 0C14                       		dc.b   $C, $14
0001B72E 140C                       		dc.b  $14,  $C
0001B730 0410                       		dc.b	4, $10
0001B732 0C12                       		dc.b   $C, $12
0001B734 1010                       		dc.b  $10, $10
0001B736 0606                       		dc.b	6,   6
0001B738 180C                       		dc.b  $18,  $C
0001B73A 0C10                       		dc.b   $C, $10
0001B73C 100C                       		dc.b  $10,  $C
0001B73E 0808                       		dc.b	8,   8
0001B740 1410                       		dc.b  $14, $10
0001B742 1408                       		dc.b  $14,   8
0001B744 0E0E                       		dc.b   $E,  $E
0001B746 1818                       		dc.b  $18, $18
0001B748 2810                       		dc.b  $28, $10
0001B74A 1018                       		dc.b  $10, $18
0001B74C 0810                       		dc.b	8, $10
0001B74E 2070                       		dc.b  $20, $70
0001B750 4020                       		dc.b  $40, $20
0001B752 8020                       		dc.b  $80, $20
0001B754 2020                       		dc.b  $20, $20
0001B756 0808                       		dc.b	8,   8
0001B758 0404                       		dc.b	4,   4
0001B75A 2008                       		dc.b  $20,   8
0001B75C 0C0C                       		dc.b   $C,  $C
0001B75E 0804                       		dc.b	8,   4
0001B760 1804                       		dc.b  $18,   4
0001B762 2804                       		dc.b  $28,   4
0001B764 0408                       		dc.b	4,   8
0001B766 0418                       		dc.b	4, $18
0001B768 0428                       		dc.b	4, $28
0001B76A 0420                       		dc.b	4, $20
0001B76C 1818                       		dc.b  $18, $18
0001B76E 0C18                       		dc.b   $C, $18
0001B770 4808                       		dc.b  $48,   8
0001B772                            ; ===========================================================================
0001B772                            
0001B772                            Touch_Height:				; XREF: TouchResponse
0001B772 0240 003F                  		andi.w	#$3F,d0
0001B776 D040                       		add.w	d0,d0
0001B778 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B77C 7200                       		moveq	#0,d1
0001B77E 121A                       		move.b	(a2)+,d1
0001B780 3029 0008                  		move.w	8(a1),d0
0001B784 9041                       		sub.w	d1,d0
0001B786 9042                       		sub.w	d2,d0
0001B788 6400                       		bcc.s	loc_1AE98
0001B78A D241                       		add.w	d1,d1
0001B78C D041                       		add.w	d1,d0
0001B78E 6500                       		bcs.s	Touch_Width
0001B790 6000 FF8C                  		bra.w	Touch_NextObj
0001B794                            ; ===========================================================================
0001B794                            
0001B794                            loc_1AE98:
0001B794 B044                       		cmp.w	d4,d0
0001B796 6200 FF86                  		bhi.w	Touch_NextObj
0001B79A                            
0001B79A                            Touch_Width:
0001B79A 7200                       		moveq	#0,d1
0001B79C 121A                       		move.b	(a2)+,d1
0001B79E 3029 000C                  		move.w	$C(a1),d0
0001B7A2 9041                       		sub.w	d1,d0
0001B7A4 9043                       		sub.w	d3,d0
0001B7A6 6400                       		bcc.s	loc_1AEB6
0001B7A8 D241                       		add.w	d1,d1
0001B7AA D240                       		add.w	d0,d1
0001B7AC 6500                       		bcs.s	Touch_ChkValue
0001B7AE 6000 FF6E                  		bra.w	Touch_NextObj
0001B7B2                            ; ===========================================================================
0001B7B2                            
0001B7B2                            loc_1AEB6:
0001B7B2 B045                       		cmp.w	d5,d0
0001B7B4 6200 FF68                  		bhi.w	Touch_NextObj
0001B7B8                            
0001B7B8                            Touch_ChkValue:
0001B7B8 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B7BC 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B7C0 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B7C4 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B7C8 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B7CC 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B7CE 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B7D2                            
0001B7D2                            ; touch	response is $40-$7F
0001B7D2                            
0001B7D2 1029 0020                  		move.b	$20(a1),d0
0001B7D6 0200 003F                  		andi.b	#$3F,d0
0001B7DA 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B7DE 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B7E0 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B7E6 6400 0000                  		bcc.w	locret_1AEF2
0001B7EA 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B7EE                            
0001B7EE                            locret_1AEF2:
0001B7EE 4E75                       		rts	
0001B7F0                            ; ===========================================================================
0001B7F0                            
0001B7F0                            Touch_Monitor:
0001B7F0 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B7F4 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B7F6 3028 000C                  		move.w	$C(a0),d0
0001B7FA 0440 0010                  		subi.w	#$10,d0
0001B7FE B069 000C                  		cmp.w	$C(a1),d0
0001B802 6500                       		bcs.s	locret_1AF2E
0001B804 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B808 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B80E 4A29 0025                  		tst.b	$25(a1)
0001B812 6600                       		bne.s	locret_1AF2E
0001B814 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B818 4E75                       		rts	
0001B81A                            ; ===========================================================================
0001B81A                            
0001B81A                            loc_1AF1E:
0001B81A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B820 6600                       		bne.s	locret_1AF2E
0001B822 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B826 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B82A                            
0001B82A                            locret_1AF2E:
0001B82A 4E75                       		rts	
0001B82C                            ; ===========================================================================
0001B82C                            
0001B82C                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B82C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B830 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B832 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B838 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B83C                            
0001B83C                            loc_1AF40:
0001B83C 4A29 0021                  		tst.b	$21(a1)
0001B840 6700                       		beq.s	Touch_KillEnemy
0001B842 4468 0010                  		neg.w	$10(a0)
0001B846 4468 0012                  		neg.w	$12(a0)
0001B84A E0E8 0010                  		asr	$10(a0)
0001B84E E0E8 0012                  		asr	$12(a0)
0001B852 137C 0000 0020             		move.b	#0,$20(a1)
0001B858 5329 0021                  		subq.b	#1,$21(a1)
0001B85C 6600                       		bne.s	locret_1AF68
0001B85E 08E9 0007 0022             		bset	#7,$22(a1)
0001B864                            
0001B864                            locret_1AF68:
0001B864 4E75                       		rts	
0001B866                            ; ===========================================================================
0001B866                            
0001B866                            Touch_KillEnemy:
0001B866 08E9 0007 0022             		bset	#7,$22(a1)
0001B86C 7000                       		moveq	#0,d0
0001B86E 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B872 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B876 0C40 0006                  		cmpi.w	#6,d0
0001B87A 6500                       		bcs.s	loc_1AF82
0001B87C 7006                       		moveq	#6,d0
0001B87E                            
0001B87E                            loc_1AF82:
0001B87E 3340 003E                  		move.w	d0,$3E(a1)
0001B882 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B886 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B88C 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B88E 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B892 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B898                            
0001B898                            loc_1AF9C:
0001B898 6100 0000                  		bsr.w	AddPoints
0001B89C 7400                       		moveq	#0,d2	; GMZ
0001B89E 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B8A0 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B8A2                            
0001B8A2                            TouchKE_Explode:
0001B8A2 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B8A6 137C 0000 0024             		move.b	#0,$24(a1)
0001B8AC 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B8B0                            
0001B8B0                            TouchKE_NextExplosion:
0001B8B0 5802                       		addq.b	#4,d2
0001B8B2 4EB9 0000 E284             		jsr	SingleObjLoad
0001B8B8 6600                       		bne.s	TouchKE_NoExplosion
0001B8BA 336A 0008 0008             		move.w	8(a2),8(a1)
0001B8C0 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B8C6 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B8CA                            
0001B8CA                            TouchKE_NoExplosion:
0001B8CA 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B8CC 4A68 0012                  		tst.w	$12(a0)
0001B8D0 6B00                       		bmi.s	loc_1AFC2
0001B8D2 3028 000C                  		move.w	$C(a0),d0
0001B8D6 B069 000C                  		cmp.w	$C(a1),d0
0001B8DA 6400                       		bcc.s	loc_1AFCA
0001B8DC 4468 0012                  		neg.w	$12(a0)
0001B8E0 4E75                       		rts	
0001B8E2                            ; ===========================================================================
0001B8E2                            
0001B8E2                            loc_1AFC2:
0001B8E2 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B8E8 4E75                       		rts	
0001B8EA                            ; ===========================================================================
0001B8EA                            
0001B8EA                            loc_1AFCA:
0001B8EA 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B8F0 4E75                       		rts	
0001B8F2                            ; ===========================================================================
0001B8F2 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B8FA                            ; ===========================================================================
0001B8FA                            
0001B8FA                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B8FA 08E9 0007 0022             		bset	#7,$22(a1)
0001B900                            
0001B900                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B900 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B904 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B906                            
0001B906                            loc_1AFE6:				; XREF: Touch_Hurt
0001B906 70FF                       		moveq	#-1,d0
0001B908 4E75                       		rts	
0001B90A                            ; ===========================================================================
0001B90A                            
0001B90A                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B90A 4E71                       		nop	
0001B90C 4A68 0030                  		tst.w	$30(a0)
0001B910 66F4                       		bne.s	loc_1AFE6
0001B912 2449                       		movea.l	a1,a2
0001B914                            
0001B914                            ; End of function TouchResponse
0001B914                            ; continue straight to HurtSonic
0001B914                            
0001B914                            ; ---------------------------------------------------------------------------
0001B914                            ; Hurting Sonic	subroutine
0001B914                            ; ---------------------------------------------------------------------------
0001B914                            
0001B914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B914                            
0001B914                            
0001B914                            HurtSonic:
0001B914 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B918 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B91A 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B91E 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B922 4EB9 0000 E284             		jsr	SingleObjLoad
0001B928 6600                       		bne.s	Hurt_Shield
0001B92A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B92E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B934 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B93A                            
0001B93A                            Hurt_Shield:
0001B93A 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B940 117C 0004 0024             		move.b	#4,$24(a0)
0001B946 6100 86F8                  		bsr.w	Sonic_ResetOnFloor
0001B94A 08E8 0001 0022             		bset	#1,$22(a0)
0001B950 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B956 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B95C 0828 0006 0022             		btst	#6,$22(a0)
0001B962 6700                       		beq.s	Hurt_Reverse
0001B964 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B96A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B970                            
0001B970                            Hurt_Reverse:
0001B970 3028 0008                  		move.w	8(a0),d0
0001B974 B06A 0008                  		cmp.w	8(a2),d0
0001B978 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B97A 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B97E                            
0001B97E                            Hurt_ChkSpikes:
0001B97E 317C 0000 0014             		move.w	#0,$14(a0)
0001B984 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B98A 317C 0078 0030             		move.w	#$78,$30(a0)
0001B990 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B994 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B998 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B99A 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B99E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B9A0 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B9A4                            
0001B9A4                            Hurt_Sound:
0001B9A4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B9AA 70FF                       		moveq	#-1,d0
0001B9AC 4E75                       		rts	
0001B9AE                            ; ===========================================================================
0001B9AE                            
0001B9AE                            Hurt_NoRings:
0001B9AE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B9B2 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B9B6                            ; End of function HurtSonic
0001B9B6                            
0001B9B6                            ; ---------------------------------------------------------------------------
0001B9B6                            ; Subroutine to	kill Sonic
0001B9B6                            ; ---------------------------------------------------------------------------
0001B9B6                            
0001B9B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9B6                            
0001B9B6                            
0001B9B6                            KillSonic:
0001B9B6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B9BA 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B9BC 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B9C2 117C 0006 0024             		move.b	#6,$24(a0)
0001B9C8 6100 8676                  		bsr.w	Sonic_ResetOnFloor
0001B9CC 08E8 0001 0022             		bset	#1,$22(a0)
0001B9D2 317C F900 0012             		move.w	#-$700,$12(a0)
0001B9D8 317C 0000 0010             		move.w	#0,$10(a0)
0001B9DE 317C 0000 0014             		move.w	#0,$14(a0)
0001B9E4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B9EA 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B9F0 08E8 0007 0002             		bset	#7,2(a0)
0001B9F6 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B9FA 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B9FE 6600                       		bne.s	Kill_Sound
0001BA00 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BA04                            
0001BA04                            Kill_Sound:
0001BA04 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001BA0A                            
0001BA0A                            Kill_NoDeath:
0001BA0A 70FF                       		moveq	#-1,d0
0001BA0C 4E75                       		rts	
0001BA0E                            ; End of function KillSonic
0001BA0E                            
0001BA0E                            
0001BA0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA0E                            
0001BA0E                            
0001BA0E                            Touch_Special:				; XREF: Touch_ChkValue
0001BA0E 1229 0020                  		move.b	$20(a1),d1
0001BA12 0201 003F                  		andi.b	#$3F,d1
0001BA16 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BA1A 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BA1C 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BA20 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BA22 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BA26 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA28 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BA2C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA2E 4E75                       		rts	
0001BA30                            ; ===========================================================================
0001BA30                            
0001BA30                            Touch_CatKiller:			; XREF: Touch_Special
0001BA30 6000 FEC8                  		bra.w	loc_1AFDA
0001BA34                            ; ===========================================================================
0001BA34                            
0001BA34                            Touch_Yadrin:				; XREF: Touch_Special
0001BA34 9A40                       		sub.w	d0,d5
0001BA36 0C45 0008                  		cmpi.w	#8,d5
0001BA3A 6400                       		bcc.s	loc_1B144
0001BA3C 3029 0008                  		move.w	8(a1),d0
0001BA40 5940                       		subq.w	#4,d0
0001BA42 0829 0000 0022             		btst	#0,$22(a1)
0001BA48 6700                       		beq.s	loc_1B130
0001BA4A 0440 0010                  		subi.w	#$10,d0
0001BA4E                            
0001BA4E                            loc_1B130:
0001BA4E 9042                       		sub.w	d2,d0
0001BA50 6400                       		bcc.s	loc_1B13C
0001BA52 0640 0018                  		addi.w	#$18,d0
0001BA56 6500                       		bcs.s	loc_1B140
0001BA58 6000                       		bra.s	loc_1B144
0001BA5A                            ; ===========================================================================
0001BA5A                            
0001BA5A                            loc_1B13C:
0001BA5A B044                       		cmp.w	d4,d0
0001BA5C 6200                       		bhi.s	loc_1B144
0001BA5E                            
0001BA5E                            loc_1B140:
0001BA5E 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BA62                            ; ===========================================================================
0001BA62                            
0001BA62                            loc_1B144:
0001BA62 6000 FDC8                  		bra.w	Touch_Enemy
0001BA66                            ; ===========================================================================
0001BA66                            
0001BA66                            Touch_D7orE1:				; XREF: Touch_Special
0001BA66 5229 0021                  		addq.b	#1,$21(a1)
0001BA6A 4E75                       		rts	
0001BA6C                            ; End of function Touch_Special
0001BA6C                            
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C                            ; Subroutine to	show the special stage layout
0001BA6C                            ; ---------------------------------------------------------------------------
0001BA6C                            
0001BA6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA6C                            
0001BA6C                            
0001BA6C                            SS_ShowLayout:				; XREF: SpecialStage
0001BA6C 6100 0000                  		bsr.w	SS_AniWallsRings
0001BA70 6100 0000                  		bsr.w	SS_AniItems
0001BA74 3F05                       		move.w	d5,-(sp)
0001BA76 43F8 8000                  		lea	($FFFF8000).w,a1
0001BA7A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA7E 0200 00FC                  		andi.b	#$FC,d0
0001BA82 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001BA88 3800                       		move.w	d0,d4
0001BA8A 3A01                       		move.w	d1,d5
0001BA8C C9FC 0018                  		muls.w	#$18,d4
0001BA90 CBFC 0018                  		muls.w	#$18,d5
0001BA94 7400                       		moveq	#0,d2
0001BA96 3438 F700                  		move.w	($FFFFF700).w,d2
0001BA9A 84FC 0018                  		divu.w	#$18,d2
0001BA9E 4842                       		swap	d2
0001BAA0 4442                       		neg.w	d2
0001BAA2 0642 FF4C                  		addi.w	#-$B4,d2
0001BAA6 7600                       		moveq	#0,d3
0001BAA8 3638 F704                  		move.w	($FFFFF704).w,d3
0001BAAC 86FC 0018                  		divu.w	#$18,d3
0001BAB0 4843                       		swap	d3
0001BAB2 4443                       		neg.w	d3
0001BAB4 0643 FF4C                  		addi.w	#-$B4,d3
0001BAB8 3E3C 000F                  		move.w	#$F,d7
0001BABC                            
0001BABC                            loc_1B19E:
0001BABC 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BAC0 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BAC4 4440                       		neg.w	d0
0001BAC6 C3C2                       		muls.w	d2,d1
0001BAC8 C1C3                       		muls.w	d3,d0
0001BACA 2C00                       		move.l	d0,d6
0001BACC DC81                       		add.l	d1,d6
0001BACE 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BAD2 C1C2                       		muls.w	d2,d0
0001BAD4 C3C3                       		muls.w	d3,d1
0001BAD6 D280                       		add.l	d0,d1
0001BAD8 2406                       		move.l	d6,d2
0001BADA 3C3C 000F                  		move.w	#$F,d6
0001BADE                            
0001BADE                            loc_1B1C0:
0001BADE 2002                       		move.l	d2,d0
0001BAE0 E080                       		asr.l	#8,d0
0001BAE2 32C0                       		move.w	d0,(a1)+
0001BAE4 2001                       		move.l	d1,d0
0001BAE6 E080                       		asr.l	#8,d0
0001BAE8 32C0                       		move.w	d0,(a1)+
0001BAEA D485                       		add.l	d5,d2
0001BAEC D284                       		add.l	d4,d1
0001BAEE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BAF2                            
0001BAF2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BAF6 0643 0018                  		addi.w	#$18,d3
0001BAFA 51CF FFC0                  		dbf	d7,loc_1B19E
0001BAFE                            
0001BAFE 3A1F                       		move.w	(sp)+,d5
0001BB00 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BB06 7000                       		moveq	#0,d0
0001BB08 3038 F704                  		move.w	($FFFFF704).w,d0
0001BB0C 80FC 0018                  		divu.w	#$18,d0
0001BB10 C0FC 0080                  		mulu.w	#$80,d0
0001BB14 D1C0                       		adda.l	d0,a0
0001BB16 7000                       		moveq	#0,d0
0001BB18 3038 F700                  		move.w	($FFFFF700).w,d0
0001BB1C 80FC 0018                  		divu.w	#$18,d0
0001BB20 D0C0                       		adda.w	d0,a0
0001BB22 49F8 8000                  		lea	($FFFF8000).w,a4
0001BB26 3E3C 000F                  		move.w	#$F,d7
0001BB2A                            
0001BB2A                            loc_1B20C:
0001BB2A 3C3C 000F                  		move.w	#$F,d6
0001BB2E                            
0001BB2E                            loc_1B210:
0001BB2E 7000                       		moveq	#0,d0
0001BB30 1018                       		move.b	(a0)+,d0
0001BB32 6700                       		beq.s	loc_1B268
0001BB34 0C00 004E                  		cmpi.b	#$4E,d0
0001BB38 6200                       		bhi.s	loc_1B268
0001BB3A 3614                       		move.w	(a4),d3
0001BB3C 0643 0120                  		addi.w	#$120,d3
0001BB40 0C43 0070                  		cmpi.w	#$70,d3
0001BB44 6500                       		bcs.s	loc_1B268
0001BB46 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BB4A 6400                       		bcc.s	loc_1B268
0001BB4C 342C 0002                  		move.w	2(a4),d2
0001BB50 0642 00F0                  		addi.w	#$F0,d2
0001BB54 0C42 0070                  		cmpi.w	#$70,d2
0001BB58 6500                       		bcs.s	loc_1B268
0001BB5A 0C42 0170                  		cmpi.w	#$170,d2
0001BB5E 6400                       		bcc.s	loc_1B268
0001BB60 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BB66 E748                       		lsl.w	#3,d0
0001BB68 4BF5 0000                  		lea	(a5,d0.w),a5
0001BB6C 225D                       		movea.l	(a5)+,a1
0001BB6E 321D                       		move.w	(a5)+,d1
0001BB70 D241                       		add.w	d1,d1
0001BB72 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BB76 365D                       		movea.w	(a5)+,a3
0001BB78 7200                       		moveq	#0,d1
0001BB7A 1219                       		move.b	(a1)+,d1
0001BB7C 5301                       		subq.b	#1,d1
0001BB7E 6B00                       		bmi.s	loc_1B268
0001BB80 4EB9 0000 DF5C             		jsr	sub_D762
0001BB86                            
0001BB86                            loc_1B268:
0001BB86 584C                       		addq.w	#4,a4
0001BB88 51CE FFA4                  		dbf	d6,loc_1B210
0001BB8C                            
0001BB8C 41E8 0070                  		lea	$70(a0),a0
0001BB90 51CF FF98                  		dbf	d7,loc_1B20C
0001BB94                            
0001BB94 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BB98 0C05 0050                  		cmpi.b	#$50,d5
0001BB9C 6700                       		beq.s	loc_1B288
0001BB9E 24BC 0000 0000             		move.l	#0,(a2)
0001BBA4 4E75                       		rts	
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_1B288:
0001BBA6 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BBAC 4E75                       		rts	
0001BBAE                            ; End of function SS_ShowLayout
0001BBAE                            
0001BBAE                            ; ---------------------------------------------------------------------------
0001BBAE                            ; Subroutine to	animate	walls and rings	in the special stage
0001BBAE                            ; ---------------------------------------------------------------------------
0001BBAE                            
0001BBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBAE                            
0001BBAE                            
0001BBAE                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BBAE 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BBB4 7000                       		moveq	#0,d0
0001BBB6 1038 F780                  		move.b	($FFFFF780).w,d0
0001BBBA E408                       		lsr.b	#2,d0
0001BBBC 0240 000F                  		andi.w	#$F,d0
0001BBC0 7223                       		moveq	#$23,d1
0001BBC2                            
0001BBC2                            loc_1B2A4:
0001BBC2 3280                       		move.w	d0,(a1)
0001BBC4 5049                       		addq.w	#8,a1
0001BBC6 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BBCA                            
0001BBCA 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BBD0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BBD4 6A00                       		bpl.s	loc_1B2C8
0001BBD6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BBDC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BBE0 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BBE6                            
0001BBE6                            loc_1B2C8:
0001BBE6 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BBEC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BBF0 6A00                       		bpl.s	loc_1B2E4
0001BBF2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BBF8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BBFC 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BC02                            
0001BC02                            loc_1B2E4:
0001BC02 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BC06 1340 0138                  		move.b	d0,$138(a1)
0001BC0A 1340 0160                  		move.b	d0,$160(a1)
0001BC0E 1340 0148                  		move.b	d0,$148(a1)
0001BC12 1340 0150                  		move.b	d0,$150(a1)
0001BC16 1340 01D8                  		move.b	d0,$1D8(a1)
0001BC1A 1340 01E0                  		move.b	d0,$1E0(a1)
0001BC1E 1340 01E8                  		move.b	d0,$1E8(a1)
0001BC22 1340 01F0                  		move.b	d0,$1F0(a1)
0001BC26 1340 01F8                  		move.b	d0,$1F8(a1)
0001BC2A 1340 0200                  		move.b	d0,$200(a1)
0001BC2E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BC32 6A00                       		bpl.s	loc_1B326
0001BC34 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BC3A 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BC3E 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BC44                            
0001BC44                            loc_1B326:
0001BC44 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BC48 1340 0168                  		move.b	d0,$168(a1)
0001BC4C 1340 0170                  		move.b	d0,$170(a1)
0001BC50 1340 0178                  		move.b	d0,$178(a1)
0001BC54 1340 0180                  		move.b	d0,$180(a1)
0001BC58 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BC5C 6A00                       		bpl.s	loc_1B350
0001BC5E 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BC64 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BC68 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BC6E                            
0001BC6E                            loc_1B350:
0001BC6E 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BC74 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BC7A 7000                       		moveq	#0,d0
0001BC7C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BC80 D040                       		add.w	d0,d0
0001BC82 41F0 0000                  		lea	(a0,d0.w),a0
0001BC86 3290                       		move.w	(a0),(a1)
0001BC88 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC8E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC94 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC9A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCA0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCA6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCAC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCB2 D0FC 0020                  		adda.w	#$20,a0
0001BCB6 D2FC 0048                  		adda.w	#$48,a1
0001BCBA 3290                       		move.w	(a0),(a1)
0001BCBC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCC2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCC8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCCE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCD4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCDA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCE0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCE6 D0FC 0020                  		adda.w	#$20,a0
0001BCEA D2FC 0048                  		adda.w	#$48,a1
0001BCEE 3290                       		move.w	(a0),(a1)
0001BCF0 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCF6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCFC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD02 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD08 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD0E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD14 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD1A D0FC 0020                  		adda.w	#$20,a0
0001BD1E D2FC 0048                  		adda.w	#$48,a1
0001BD22 3290                       		move.w	(a0),(a1)
0001BD24 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD2A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD30 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD36 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD3C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD42 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD48 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD4E D0FC 0020                  		adda.w	#$20,a0
0001BD52 D2FC 0048                  		adda.w	#$48,a1
0001BD56 4E75                       		rts	
0001BD58                            ; End of function SS_AniWallsRings
0001BD58                            
0001BD58                            ; ===========================================================================
0001BD58 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD68 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD78 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD88 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD98 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BDA8 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BDB8 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDC8 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDD8                            ; ---------------------------------------------------------------------------
0001BDD8                            ; Subroutine to	remove items when you collect them in the special stage
0001BDD8                            ; ---------------------------------------------------------------------------
0001BDD8                            
0001BDD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDD8                            
0001BDD8                            
0001BDD8                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BDD8 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BDDE 303C 001F                  		move.w	#$1F,d0
0001BDE2                            
0001BDE2                            loc_1B4C4:
0001BDE2 4A12                       		tst.b	(a2)
0001BDE4 6700                       		beq.s	locret_1B4CE
0001BDE6 504A                       		addq.w	#8,a2
0001BDE8 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BDEC                            
0001BDEC                            locret_1B4CE:
0001BDEC 4E75                       		rts	
0001BDEE                            ; End of function SS_RemoveCollectedItem
0001BDEE                            
0001BDEE                            ; ---------------------------------------------------------------------------
0001BDEE                            ; Subroutine to	animate	special	stage items when you touch them
0001BDEE                            ; ---------------------------------------------------------------------------
0001BDEE                            
0001BDEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDEE                            
0001BDEE                            
0001BDEE                            SS_AniItems:				; XREF: SS_ShowLayout
0001BDEE 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BDF4 3E3C 001F                  		move.w	#$1F,d7
0001BDF8                            
0001BDF8                            loc_1B4DA:
0001BDF8 7000                       		moveq	#0,d0
0001BDFA 1010                       		move.b	(a0),d0
0001BDFC 6700                       		beq.s	loc_1B4E8
0001BDFE E548                       		lsl.w	#2,d0
0001BE00 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BE04 4E91                       		jsr	(a1)
0001BE06                            
0001BE06                            loc_1B4E8:
0001BE06 5048                       		addq.w	#8,a0
0001BE08                            
0001BE08                            loc_1B4EA:
0001BE08 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BE0C                            
0001BE0C 4E75                       		rts	
0001BE0E                            ; End of function SS_AniItems
0001BE0E                            
0001BE0E                            ; ===========================================================================
0001BE0E 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BE12 0000 0000                  		dc.l SS_AniBumper
0001BE16 0000 0000                  		dc.l SS_Ani1Up
0001BE1A 0000 0000                  		dc.l SS_AniReverse
0001BE1E 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BE22 0000 0000                  		dc.l SS_AniGlassBlock
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BE26 5328 0002                  		subq.b	#1,2(a0)
0001BE2A 6A00                       		bpl.s	locret_1B530
0001BE2C 117C 0005 0002             		move.b	#5,2(a0)
0001BE32 7000                       		moveq	#0,d0
0001BE34 1028 0003                  		move.b	3(a0),d0
0001BE38 5228 0003                  		addq.b	#1,3(a0)
0001BE3C 2268 0004                  		movea.l	4(a0),a1
0001BE40 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BE44 1280                       		move.b	d0,(a1)
0001BE46 6600                       		bne.s	locret_1B530
0001BE48 4290                       		clr.l	(a0)
0001BE4A 42A8 0004                  		clr.l	4(a0)
0001BE4E                            
0001BE4E                            locret_1B530:
0001BE4E 4E75                       		rts	
0001BE50                            ; ===========================================================================
0001BE50 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BE56                            ; ===========================================================================
0001BE56                            
0001BE56                            SS_AniBumper:				; XREF: SS_AniIndex
0001BE56 5328 0002                  		subq.b	#1,2(a0)
0001BE5A 6A00                       		bpl.s	locret_1B566
0001BE5C 117C 0007 0002             		move.b	#7,2(a0)
0001BE62 7000                       		moveq	#0,d0
0001BE64 1028 0003                  		move.b	3(a0),d0
0001BE68 5228 0003                  		addq.b	#1,3(a0)
0001BE6C 2268 0004                  		movea.l	4(a0),a1
0001BE70 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BE74 6600                       		bne.s	loc_1B564
0001BE76 4290                       		clr.l	(a0)
0001BE78 42A8 0004                  		clr.l	4(a0)
0001BE7C 12BC 0025                  		move.b	#$25,(a1)
0001BE80 4E75                       		rts	
0001BE82                            ; ===========================================================================
0001BE82                            
0001BE82                            loc_1B564:
0001BE82 1280                       		move.b	d0,(a1)
0001BE84                            
0001BE84                            locret_1B566:
0001BE84 4E75                       		rts	
0001BE86                            ; ===========================================================================
0001BE86 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BE8C                            ; ===========================================================================
0001BE8C                            
0001BE8C                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BE8C 5328 0002                  		subq.b	#1,2(a0)
0001BE90 6A00                       		bpl.s	locret_1B596
0001BE92 117C 0005 0002             		move.b	#5,2(a0)
0001BE98 7000                       		moveq	#0,d0
0001BE9A 1028 0003                  		move.b	3(a0),d0
0001BE9E 5228 0003                  		addq.b	#1,3(a0)
0001BEA2 2268 0004                  		movea.l	4(a0),a1
0001BEA6 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BEAA 1280                       		move.b	d0,(a1)
0001BEAC 6600                       		bne.s	locret_1B596
0001BEAE 4290                       		clr.l	(a0)
0001BEB0 42A8 0004                  		clr.l	4(a0)
0001BEB4                            
0001BEB4                            locret_1B596:
0001BEB4 4E75                       		rts	
0001BEB6                            ; ===========================================================================
0001BEB6 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BEBC                            ; ===========================================================================
0001BEBC                            
0001BEBC                            SS_AniReverse:				; XREF: SS_AniIndex
0001BEBC 5328 0002                  		subq.b	#1,2(a0)
0001BEC0 6A00                       		bpl.s	locret_1B5CC
0001BEC2 117C 0007 0002             		move.b	#7,2(a0)
0001BEC8 7000                       		moveq	#0,d0
0001BECA 1028 0003                  		move.b	3(a0),d0
0001BECE 5228 0003                  		addq.b	#1,3(a0)
0001BED2 2268 0004                  		movea.l	4(a0),a1
0001BED6 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BEDA 6600                       		bne.s	loc_1B5CA
0001BEDC 4290                       		clr.l	(a0)
0001BEDE 42A8 0004                  		clr.l	4(a0)
0001BEE2 12BC 002B                  		move.b	#$2B,(a1)
0001BEE6 4E75                       		rts	
0001BEE8                            ; ===========================================================================
0001BEE8                            
0001BEE8                            loc_1B5CA:
0001BEE8 1280                       		move.b	d0,(a1)
0001BEEA                            
0001BEEA                            locret_1B5CC:
0001BEEA 4E75                       		rts	
0001BEEC                            ; ===========================================================================
0001BEEC 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BEF2                            ; ===========================================================================
0001BEF2                            
0001BEF2                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BEF2 5328 0002                  		subq.b	#1,2(a0)
0001BEF6 6A00                       		bpl.s	locret_1B60C
0001BEF8 117C 0005 0002             		move.b	#5,2(a0)
0001BEFE 7000                       		moveq	#0,d0
0001BF00 1028 0003                  		move.b	3(a0),d0
0001BF04 5228 0003                  		addq.b	#1,3(a0)
0001BF08 2268 0004                  		movea.l	4(a0),a1
0001BF0C 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BF10 1280                       		move.b	d0,(a1)
0001BF12 6600                       		bne.s	locret_1B60C
0001BF14 4290                       		clr.l	(a0)
0001BF16 42A8 0004                  		clr.l	4(a0)
0001BF1A 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BF20 303C 00A8                  		move.w	#$A8,d0
0001BF24 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BF2A                            
0001BF2A                            locret_1B60C:
0001BF2A 4E75                       		rts	
0001BF2C                            ; ===========================================================================
0001BF2C 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BF32                            ; ===========================================================================
0001BF32                            
0001BF32                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BF32 5328 0002                  		subq.b	#1,2(a0)
0001BF36 6A00                       		bpl.s	locret_1B640
0001BF38 117C 0001 0002             		move.b	#1,2(a0)
0001BF3E 7000                       		moveq	#0,d0
0001BF40 1028 0003                  		move.b	3(a0),d0
0001BF44 5228 0003                  		addq.b	#1,3(a0)
0001BF48 2268 0004                  		movea.l	4(a0),a1
0001BF4C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BF50 1280                       		move.b	d0,(a1)
0001BF52 6600                       		bne.s	locret_1B640
0001BF54 12A8 0004                  		move.b	4(a0),(a1)
0001BF58 4290                       		clr.l	(a0)
0001BF5A 42A8 0004                  		clr.l	4(a0)
0001BF5E                            
0001BF5E                            locret_1B640:
0001BF5E 4E75                       		rts	
0001BF60                            ; ===========================================================================
0001BF60 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            ; Special stage	layout pointers
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            SS_LayoutIndex:
0001BF6A                            	include "_inc\Special stage layout pointers.asm"
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            ; Special stage	layout pointers
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A 0000 0000                  	dc.l SS_1
0001BF6E 0000 0000                  	dc.l SS_2
0001BF72 0000 0000                  	dc.l SS_3
0001BF76 0000 0000                  	dc.l SS_4
0001BF7A 0000 0000                  	dc.l SS_5
0001BF7E 0000 0000                  	dc.l SS_6
0001BF82                            	even
0001BF82                            	even
0001BF82                            
0001BF82                            ; ---------------------------------------------------------------------------
0001BF82                            ; Special stage	start locations
0001BF82                            ; ---------------------------------------------------------------------------
0001BF82                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BF9A                            		even
0001BF9A                            
0001BF9A                            ; ---------------------------------------------------------------------------
0001BF9A                            ; Subroutine to	load special stage layout
0001BF9A                            ; ---------------------------------------------------------------------------
0001BF9A                            
0001BF9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF9A                            
0001BF9A                            
0001BF9A                            SS_Load:				; XREF: SpecialStage
0001BF9A 7000                       		moveq	#0,d0
0001BF9C 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BFA0 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BFA4 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BFAA 6500                       		bcs.s	SS_ChkEmldNum
0001BFAC 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BFB2                            
0001BFB2                            SS_ChkEmldNum:
0001BFB2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BFB8 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BFBA 7200                       		moveq	#0,d1
0001BFBC 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BFC0 5301                       		subq.b	#1,d1
0001BFC2 6500                       		bcs.s	SS_LoadData
0001BFC4 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BFC8                            
0001BFC8                            SS_ChkEmldLoop:	
0001BFC8 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BFCC 6600                       		bne.s	SS_ChkEmldRepeat
0001BFCE 60CA                       		bra.s	SS_Load
0001BFD0                            ; ===========================================================================
0001BFD0                            
0001BFD0                            SS_ChkEmldRepeat:
0001BFD0 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BFD4                            
0001BFD4                            SS_LoadData:
0001BFD4 E548                       		lsl.w	#2,d0
0001BFD6 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BFDA 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BFDE 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BFE2 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BFE6 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BFEC 303C 0000                  		move.w	#0,d0
0001BFF0 4EB9 0000 1942             		jsr	(EniDec).l
0001BFF6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BFFC 303C 0FFF                  		move.w	#$FFF,d0
0001C000                            
0001C000                            SS_ClrRAM3:
0001C000 4299                       		clr.l	(a1)+
0001C002 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C006                            
0001C006 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C00C 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C012 723F                       		moveq	#$3F,d1
0001C014                            
0001C014                            loc_1B6F6:
0001C014 743F                       		moveq	#$3F,d2
0001C016                            
0001C016                            loc_1B6F8:
0001C016 12D8                       		move.b	(a0)+,(a1)+
0001C018 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C01C                            
0001C01C 43E9 0040                  		lea	$40(a1),a1
0001C020 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C024                            
0001C024 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C02A 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C030 724D                       		moveq	#$4D,d1
0001C032                            
0001C032                            loc_1B714:
0001C032 22D8                       		move.l	(a0)+,(a1)+
0001C034 32FC 0000                  		move.w	#0,(a1)+
0001C038 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C03E 32D8                       		move.w	(a0)+,(a1)+
0001C040 51C9 FFF0                  		dbf	d1,loc_1B714
0001C044                            
0001C044 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C04A 323C 003F                  		move.w	#$3F,d1
0001C04E                            
0001C04E                            loc_1B730:
0001C04E                            
0001C04E 4299                       		clr.l	(a1)+
0001C050 51C9 FFFC                  		dbf	d1,loc_1B730
0001C054                            
0001C054 4E75                       		rts	
0001C056                            ; End of function SS_Load
0001C056                            
0001C056                            ; ===========================================================================
0001C056                            ; ---------------------------------------------------------------------------
0001C056                            ; Special stage	mappings and VRAM pointers
0001C056                            ; ---------------------------------------------------------------------------
0001C056                            SS_MapIndex:
0001C056                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C056                            ; ---------------------------------------------------------------------------
0001C056                            ; Special stage	mappings and VRAM pointers
0001C056                            ; ---------------------------------------------------------------------------
0001C056 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C05A 0142                       	dc.w $142		; VRAM setting
0001C05C 0000 0000                  	dc.l Map_SSWalls
0001C060 0142                       	dc.w $142
0001C062 0000 0000                  	dc.l Map_SSWalls
0001C066 0142                       	dc.w $142
0001C068 0000 0000                  	dc.l Map_SSWalls
0001C06C 0142                       	dc.w $142
0001C06E 0000 0000                  	dc.l Map_SSWalls
0001C072 0142                       	dc.w $142
0001C074 0000 0000                  	dc.l Map_SSWalls
0001C078 0142                       	dc.w $142
0001C07A 0000 0000                  	dc.l Map_SSWalls
0001C07E 0142                       	dc.w $142
0001C080 0000 0000                  	dc.l Map_SSWalls
0001C084 0142                       	dc.w $142
0001C086 0000 0000                  	dc.l Map_SSWalls
0001C08A 0142                       	dc.w $142
0001C08C 0000 0000                  	dc.l Map_SSWalls
0001C090 2142                       	dc.w $2142
0001C092 0000 0000                  	dc.l Map_SSWalls
0001C096 2142                       	dc.w $2142
0001C098 0000 0000                  	dc.l Map_SSWalls
0001C09C 2142                       	dc.w $2142
0001C09E 0000 0000                  	dc.l Map_SSWalls
0001C0A2 2142                       	dc.w $2142
0001C0A4 0000 0000                  	dc.l Map_SSWalls
0001C0A8 2142                       	dc.w $2142
0001C0AA 0000 0000                  	dc.l Map_SSWalls
0001C0AE 2142                       	dc.w $2142
0001C0B0 0000 0000                  	dc.l Map_SSWalls
0001C0B4 2142                       	dc.w $2142
0001C0B6 0000 0000                  	dc.l Map_SSWalls
0001C0BA 2142                       	dc.w $2142
0001C0BC 0000 0000                  	dc.l Map_SSWalls
0001C0C0 2142                       	dc.w $2142
0001C0C2 0000 0000                  	dc.l Map_SSWalls
0001C0C6 4142                       	dc.w $4142
0001C0C8 0000 0000                  	dc.l Map_SSWalls
0001C0CC 4142                       	dc.w $4142
0001C0CE 0000 0000                  	dc.l Map_SSWalls
0001C0D2 4142                       	dc.w $4142
0001C0D4 0000 0000                  	dc.l Map_SSWalls
0001C0D8 4142                       	dc.w $4142
0001C0DA 0000 0000                  	dc.l Map_SSWalls
0001C0DE 4142                       	dc.w $4142
0001C0E0 0000 0000                  	dc.l Map_SSWalls
0001C0E4 4142                       	dc.w $4142
0001C0E6 0000 0000                  	dc.l Map_SSWalls
0001C0EA 4142                       	dc.w $4142
0001C0EC 0000 0000                  	dc.l Map_SSWalls
0001C0F0 4142                       	dc.w $4142
0001C0F2 0000 0000                  	dc.l Map_SSWalls
0001C0F6 4142                       	dc.w $4142
0001C0F8 0000 0000                  	dc.l Map_SSWalls
0001C0FC 6142                       	dc.w $6142
0001C0FE 0000 0000                  	dc.l Map_SSWalls
0001C102 6142                       	dc.w $6142
0001C104 0000 0000                  	dc.l Map_SSWalls
0001C108 6142                       	dc.w $6142
0001C10A 0000 0000                  	dc.l Map_SSWalls
0001C10E 6142                       	dc.w $6142
0001C110 0000 0000                  	dc.l Map_SSWalls
0001C114 6142                       	dc.w $6142
0001C116 0000 0000                  	dc.l Map_SSWalls
0001C11A 6142                       	dc.w $6142
0001C11C 0000 0000                  	dc.l Map_SSWalls
0001C120 6142                       	dc.w $6142
0001C122 0000 0000                  	dc.l Map_SSWalls
0001C126 6142                       	dc.w $6142
0001C128 0000 0000                  	dc.l Map_SSWalls
0001C12C 6142                       	dc.w $6142
0001C12E 0000 F2F2                  	dc.l Map_obj47
0001C132 023B                       	dc.w $23B
0001C134 0000 0000                  	dc.l Map_SS_R
0001C138 0570                       	dc.w $570
0001C13A 0000 0000                  	dc.l Map_SS_R
0001C13E 0251                       	dc.w $251
0001C140 0000 0000                  	dc.l Map_SS_R
0001C144 0370                       	dc.w $370
0001C146 0000 0000                  	dc.l Map_SS_Up
0001C14A 0263                       	dc.w $263
0001C14C 0000 0000                  	dc.l Map_SS_Down
0001C150 0263                       	dc.w $263
0001C152 0000 0000                  	dc.l Map_SS_R
0001C156 22F0                       	dc.w $22F0
0001C158 0000 0000                  	dc.l Map_SS_Glass
0001C15C 0470                       	dc.w $470
0001C15E 0000 0000                  	dc.l Map_SS_Glass
0001C162 05F0                       	dc.w $5F0
0001C164 0000 0000                  	dc.l Map_SS_Glass
0001C168 65F0                       	dc.w $65F0
0001C16A 0000 0000                  	dc.l Map_SS_Glass
0001C16E 25F0                       	dc.w $25F0
0001C170 0000 0000                  	dc.l Map_SS_Glass
0001C174 45F0                       	dc.w $45F0
0001C176 0000 0000                  	dc.l Map_SS_R
0001C17A 02F0                       	dc.w $2F0
0001C17C 0100 F2F2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C180 023B                       	dc.w $23B
0001C182 0200 F2F2                  	dc.l Map_obj47+$2000000
0001C186 023B                       	dc.w $23B
0001C188 0000 0000                  	dc.l Map_SS_R
0001C18C 0797                       	dc.w $797
0001C18E 0000 0000                  	dc.l Map_SS_R
0001C192 07A0                       	dc.w $7A0
0001C194 0000 0000                  	dc.l Map_SS_R
0001C198 07A9                       	dc.w $7A9
0001C19A 0000 0000                  	dc.l Map_SS_R
0001C19E 0797                       	dc.w $797
0001C1A0 0000 0000                  	dc.l Map_SS_R
0001C1A4 07A0                       	dc.w $7A0
0001C1A6 0000 0000                  	dc.l Map_SS_R
0001C1AA 07A9                       	dc.w $7A9
0001C1AC 0000 A65C                  	dc.l Map_obj25
0001C1B0 27B2                       	dc.w $27B2
0001C1B2 0000 0000                  	dc.l Map_SS_Chaos3
0001C1B6 0770                       	dc.w $770
0001C1B8 0000 0000                  	dc.l Map_SS_Chaos3
0001C1BC 2770                       	dc.w $2770
0001C1BE 0000 0000                  	dc.l Map_SS_Chaos3
0001C1C2 4770                       	dc.w $4770
0001C1C4 0000 0000                  	dc.l Map_SS_Chaos3
0001C1C8 6770                       	dc.w $6770
0001C1CA 0000 0000                  	dc.l Map_SS_Chaos1
0001C1CE 0770                       	dc.w $770
0001C1D0 0000 0000                  	dc.l Map_SS_Chaos2
0001C1D4 0770                       	dc.w $770
0001C1D6 0000 0000                  	dc.l Map_SS_R
0001C1DA 04F0                       	dc.w $4F0
0001C1DC 0400 A65C                  	dc.l Map_obj25+$4000000
0001C1E0 27B2                       	dc.w $27B2
0001C1E2 0500 A65C                  	dc.l Map_obj25+$5000000
0001C1E6 27B2                       	dc.w $27B2
0001C1E8 0600 A65C                  	dc.l Map_obj25+$6000000
0001C1EC 27B2                       	dc.w $27B2
0001C1EE 0700 A65C                  	dc.l Map_obj25+$7000000
0001C1F2 27B2                       	dc.w $27B2
0001C1F4 0000 0000                  	dc.l Map_SS_Glass
0001C1F8 23F0                       	dc.w $23F0
0001C1FA 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C1FE 23F0                       	dc.w $23F0
0001C200 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C204 23F0                       	dc.w $23F0
0001C206 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C20A 23F0                       	dc.w $23F0
0001C20C 0000 0000                  	dc.l Map_SS_R+$2000000
0001C210 04F0                       	dc.w $4F0
0001C212 0000 0000                  	dc.l Map_SS_Glass
0001C216 05F0                       	dc.w $5F0
0001C218 0000 0000                  	dc.l Map_SS_Glass
0001C21C 65F0                       	dc.w $65F0
0001C21E 0000 0000                  	dc.l Map_SS_Glass
0001C222 25F0                       	dc.w $25F0
0001C224 0000 0000                  	dc.l Map_SS_Glass
0001C228 45F0                       	dc.w $45F0
0001C228 45F0                       	dc.w $45F0
0001C22A                            
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A                            ; Sprite mappings - special stage "R" block
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A                            Map_SS_R:
0001C22A                            	include "_maps\SSRblock.asm"
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A                            ; Sprite mappings - special stage "R" block
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C22E 0000                       		dc.w byte_1B91E-Map_SS_R
0001C230 01                         byte_1B912:	dc.b 1
0001C231 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C236 01                         byte_1B918:	dc.b 1
0001C237 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C23C 00                         byte_1B91E:	dc.b 0
0001C23E 00                         		even
0001C23E 00                         		even
0001C23E                            
0001C23E                            ; ---------------------------------------------------------------------------
0001C23E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C23E                            ; ---------------------------------------------------------------------------
0001C23E                            Map_SS_Glass:
0001C23E                            	include "_maps\SSglassblock.asm"
0001C23E                            ; ---------------------------------------------------------------------------
0001C23E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C23E                            ; ---------------------------------------------------------------------------
0001C23E 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C242 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C246 01                         byte_1B928:	dc.b 1
0001C247 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C24C 01                         byte_1B92E:	dc.b 1
0001C24D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C252 01                         byte_1B934:	dc.b 1
0001C253 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C258 01                         byte_1B93A:	dc.b 1
0001C259 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C25E                            		even
0001C25E                            		even
0001C25E                            
0001C25E                            ; ---------------------------------------------------------------------------
0001C25E                            ; Sprite mappings - special stage "UP" block
0001C25E                            ; ---------------------------------------------------------------------------
0001C25E                            Map_SS_Up:
0001C25E                            	include "_maps\SSUPblock.asm"
0001C25E                            ; ---------------------------------------------------------------------------
0001C25E                            ; Sprite mappings - special stage "UP" block
0001C25E                            ; ---------------------------------------------------------------------------
0001C25E 0000                       		dc.w byte_1B944-Map_SS_Up
0001C260 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C262 01                         byte_1B944:	dc.b 1
0001C263 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C268 01                         byte_1B94A:	dc.b 1
0001C269 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C26E                            		even
0001C26E                            		even
0001C26E                            
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E                            ; Sprite mappings - special stage "DOWN" block
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E                            Map_SS_Down:
0001C26E                            	include "_maps\SSDOWNblock.asm"
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E                            ; Sprite mappings - special stage "DOWN" block
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E 0000                       		dc.w byte_1B954-Map_SS_Down
0001C270 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C272 01                         byte_1B954:	dc.b 1
0001C273 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C278 01                         byte_1B95A:	dc.b 1
0001C279 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C27E                            		even
0001C27E                            		even
0001C27E                            
0001C27E                            ; ---------------------------------------------------------------------------
0001C27E                            ; Sprite mappings - special stage chaos	emeralds
0001C27E                            ; ---------------------------------------------------------------------------
0001C27E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C280 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C282 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C284 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C286 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C288 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C28A 01                         byte_1B96C:	dc.b 1
0001C28B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C290 01                         byte_1B972:	dc.b 1
0001C291 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C296 01                         byte_1B978:	dc.b 1
0001C297 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C29C 01                         byte_1B97E:	dc.b 1
0001C29D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C2A2                            		even
0001C2A2                            ; ===========================================================================
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            ; Object 09 - Sonic (special stage)
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            
0001C2A2                            Obj09:					; XREF: Obj_Index
0001C2A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C2A6 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C2A8 6100 0000                  		bsr.w	SS_FixCamera
0001C2AC 6000 0000                  		bra.w	DebugMode
0001C2B0                            ; ===========================================================================
0001C2B0                            
0001C2B0                            Obj09_Normal:
0001C2B0 7000                       		moveq	#0,d0
0001C2B2 1028 0024                  		move.b	$24(a0),d0
0001C2B6 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C2BA 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C2BE                            ; ===========================================================================
0001C2BE 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C2C0 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C2C2 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C2C4 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C2C6                            ; ===========================================================================
0001C2C6                            
0001C2C6                            Obj09_Main:				; XREF: Obj09_Index
0001C2C6 5428 0024                  		addq.b	#2,$24(a0)
0001C2CA 117C 000E 0016             		move.b	#$E,$16(a0)
0001C2D0 117C 0007 0017             		move.b	#7,$17(a0)
0001C2D6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C2DE 317C 0780 0002             		move.w	#$780,2(a0)
0001C2E4 117C 0004 0001             		move.b	#4,1(a0)
0001C2EA 117C 0000 0018             		move.b	#0,$18(a0)
0001C2F0 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2F6 08E8 0002 0022             		bset	#2,$22(a0)
0001C2FC 08E8 0001 0022             		bset	#1,$22(a0)
0001C302                            
0001C302                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C302 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C306 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C308 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C30E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C310 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C316                            
0001C316                            Obj09_NoDebug:
0001C316 117C 0000 0030             		move.b	#0,$30(a0)
0001C31C 7000                       		moveq	#0,d0
0001C31E 1028 0022                  		move.b	$22(a0),d0
0001C322 0240 0002                  		andi.w	#2,d0
0001C326 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C32A 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C32E 4EBA 81D6                  		jsr	LoadSonicDynPLC
0001C332 4EF9 0000 DDFE             		jmp	DisplaySprite
0001C338                            ; ===========================================================================
0001C338 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C33A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C33C                            ; ===========================================================================
0001C33C                            
0001C33C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C33C 6100 0000                  		bsr.w	Obj09_Jump
0001C340 6100 0000                  		bsr.w	Obj09_Move
0001C344 6100 0000                  		bsr.w	Obj09_Fall
0001C348 6000                       		bra.s	Obj09_Display
0001C34A                            ; ===========================================================================
0001C34A                            
0001C34A                            Obj09_InAir:				; XREF: Obj09_Modes
0001C34A 6100 0000                  		bsr.w	nullsub_2
0001C34E 6100 0000                  		bsr.w	Obj09_Move
0001C352 6100 0000                  		bsr.w	Obj09_Fall
0001C356                            
0001C356                            Obj09_Display:				; XREF: Obj09_OnWall
0001C356 6100 0000                  		bsr.w	Obj09_ChkItems
0001C35A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C35E 4EB9 0000 DDD8             		jsr	SpeedToPos
0001C364 6100 0000                  		bsr.w	SS_FixCamera
0001C368 3038 F780                  		move.w	($FFFFF780).w,d0
0001C36C D078 F782                  		add.w	($FFFFF782).w,d0
0001C370 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C374 4EB9 0001 4268             		jsr	Sonic_Animate
0001C37A 4E75                       		rts	
0001C37C                            
0001C37C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C37C                            
0001C37C                            
0001C37C                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C37C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C382 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C384 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C388                            
0001C388                            Obj09_ChkRight:
0001C388 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C38E 6700                       		beq.s	loc_1BA78	; if not, branch
0001C390 6100 0000                  		bsr.w	Obj09_MoveRight
0001C394                            
0001C394                            loc_1BA78:
0001C394 1038 F602                  		move.b	($FFFFF602).w,d0
0001C398 0200 000C                  		andi.b	#$C,d0
0001C39C 6600                       		bne.s	loc_1BAA8
0001C39E 3028 0014                  		move.w	$14(a0),d0
0001C3A2 6700                       		beq.s	loc_1BAA8
0001C3A4 6B00                       		bmi.s	loc_1BA9A
0001C3A6 0440 000C                  		subi.w	#$C,d0
0001C3AA 6400                       		bcc.s	loc_1BA94
0001C3AC 303C 0000                  		move.w	#0,d0
0001C3B0                            
0001C3B0                            loc_1BA94:
0001C3B0 3140 0014                  		move.w	d0,$14(a0)
0001C3B4 6000                       		bra.s	loc_1BAA8
0001C3B6                            ; ===========================================================================
0001C3B6                            
0001C3B6                            loc_1BA9A:
0001C3B6 0640 000C                  		addi.w	#$C,d0
0001C3BA 6400                       		bcc.s	loc_1BAA4
0001C3BC 303C 0000                  		move.w	#0,d0
0001C3C0                            
0001C3C0                            loc_1BAA4:
0001C3C0 3140 0014                  		move.w	d0,$14(a0)
0001C3C4                            
0001C3C4                            loc_1BAA8:
0001C3C4 1038 F780                  		move.b	($FFFFF780).w,d0
0001C3C8 0600 0020                  		addi.b	#$20,d0
0001C3CC 0200 00C0                  		andi.b	#$C0,d0
0001C3D0 4400                       		neg.b	d0
0001C3D2 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C3D8 C3E8 0014                  		muls.w	$14(a0),d1
0001C3DC D3A8 0008                  		add.l	d1,8(a0)
0001C3E0 C1E8 0014                  		muls.w	$14(a0),d0
0001C3E4 D1A8 000C                  		add.l	d0,$C(a0)
0001C3E8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C3EC 2428 000C                  		move.l	$C(a0),d2
0001C3F0 2628 0008                  		move.l	8(a0),d3
0001C3F4 6100 0000                  		bsr.w	sub_1BCE8
0001C3F8 6700                       		beq.s	loc_1BAF2
0001C3FA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3FE 93A8 0008                  		sub.l	d1,8(a0)
0001C402 91A8 000C                  		sub.l	d0,$C(a0)
0001C406 317C 0000 0014             		move.w	#0,$14(a0)
0001C40C 4E75                       		rts	
0001C40E                            ; ===========================================================================
0001C40E                            
0001C40E                            loc_1BAF2:
0001C40E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C412 4E75                       		rts	
0001C414                            ; End of function Obj09_Move
0001C414                            
0001C414                            
0001C414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C414                            
0001C414                            
0001C414                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C414 08E8 0000 0022             		bset	#0,$22(a0)
0001C41A 3028 0014                  		move.w	$14(a0),d0
0001C41E 6700                       		beq.s	loc_1BB06
0001C420 6A00                       		bpl.s	loc_1BB1A
0001C422                            
0001C422                            loc_1BB06:
0001C422 0440 000C                  		subi.w	#$C,d0
0001C426 0C40 F800                  		cmpi.w	#-$800,d0
0001C42A 6E00                       		bgt.s	loc_1BB14
0001C42C 303C F800                  		move.w	#-$800,d0
0001C430                            
0001C430                            loc_1BB14:
0001C430 3140 0014                  		move.w	d0,$14(a0)
0001C434 4E75                       		rts	
0001C436                            ; ===========================================================================
0001C436                            
0001C436                            loc_1BB1A:
0001C436 0440 0040                  		subi.w	#$40,d0
0001C43A 6400                       		bcc.s	loc_1BB22
0001C43C 4E71                       		nop	
0001C43E                            
0001C43E                            loc_1BB22:
0001C43E 3140 0014                  		move.w	d0,$14(a0)
0001C442 4E75                       		rts	
0001C444                            ; End of function Obj09_MoveLeft
0001C444                            
0001C444                            
0001C444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C444                            
0001C444                            
0001C444                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C444 08A8 0000 0022             		bclr	#0,$22(a0)
0001C44A 3028 0014                  		move.w	$14(a0),d0
0001C44E 6B00                       		bmi.s	loc_1BB48
0001C450 0640 000C                  		addi.w	#$C,d0
0001C454 0C40 0800                  		cmpi.w	#$800,d0
0001C458 6D00                       		blt.s	loc_1BB42
0001C45A 303C 0800                  		move.w	#$800,d0
0001C45E                            
0001C45E                            loc_1BB42:
0001C45E 3140 0014                  		move.w	d0,$14(a0)
0001C462 6000                       		bra.s	locret_1BB54
0001C464                            ; ===========================================================================
0001C464                            
0001C464                            loc_1BB48:
0001C464 0640 0040                  		addi.w	#$40,d0
0001C468 6400                       		bcc.s	loc_1BB50
0001C46A 4E71                       		nop	
0001C46C                            
0001C46C                            loc_1BB50:
0001C46C 3140 0014                  		move.w	d0,$14(a0)
0001C470                            
0001C470                            locret_1BB54:
0001C470 4E75                       		rts	
0001C472                            ; End of function Obj09_MoveRight
0001C472                            
0001C472                            
0001C472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C472                            
0001C472                            
0001C472                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C472 1038 F603                  		move.b	($FFFFF603).w,d0
0001C476 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C47A 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C47C 1038 F780                  		move.b	($FFFFF780).w,d0
0001C480 0200 00FC                  		andi.b	#$FC,d0
0001C484 4400                       		neg.b	d0
0001C486 0400 0040                  		subi.b	#$40,d0
0001C48A 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C490 C3FC 0680                  		muls.w	#$680,d1
0001C494 E081                       		asr.l	#8,d1
0001C496 3141 0010                  		move.w	d1,$10(a0)
0001C49A C1FC 0680                  		muls.w	#$680,d0
0001C49E E080                       		asr.l	#8,d0
0001C4A0 3140 0012                  		move.w	d0,$12(a0)
0001C4A4 08E8 0001 0022             		bset	#1,$22(a0)
0001C4AA 303C 00A0                  		move.w	#$A0,d0
0001C4AE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C4B4                            
0001C4B4                            Obj09_NoJump:
0001C4B4 4E75                       		rts	
0001C4B6                            ; End of function Obj09_Jump
0001C4B6                            
0001C4B6                            
0001C4B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4B6                            
0001C4B6                            
0001C4B6                            nullsub_2:				; XREF: Obj09_InAir
0001C4B6 4E75                       		rts	
0001C4B8                            ; End of function nullsub_2
0001C4B8                            
0001C4B8                            ; ===========================================================================
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            ; unused subroutine to limit Sonic's upward vertical speed
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8 323C FC00                  		move.w	#-$400,d1
0001C4BC B268 0012                  		cmp.w	$12(a0),d1
0001C4C0 6F00                       		ble.s	locret_1BBB4
0001C4C2 1038 F602                  		move.b	($FFFFF602).w,d0
0001C4C6 0200 0070                  		andi.b	#$70,d0
0001C4CA 6600                       		bne.s	locret_1BBB4
0001C4CC 3141 0012                  		move.w	d1,$12(a0)
0001C4D0                            
0001C4D0                            locret_1BBB4:
0001C4D0 4E75                       		rts	
0001C4D2                            ; ---------------------------------------------------------------------------
0001C4D2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C4D2                            ; ---------------------------------------------------------------------------
0001C4D2                            
0001C4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4D2                            
0001C4D2                            
0001C4D2                            SS_FixCamera:				; XREF: Obj09
0001C4D2 3428 000C                  		move.w	$C(a0),d2
0001C4D6 3628 0008                  		move.w	8(a0),d3
0001C4DA 3038 F700                  		move.w	($FFFFF700).w,d0
0001C4DE 0443 00A0                  		subi.w	#$A0,d3
0001C4E2 6500                       		bcs.s	loc_1BBCE
0001C4E4 9043                       		sub.w	d3,d0
0001C4E6 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C4EA                            
0001C4EA                            loc_1BBCE:
0001C4EA 3038 F704                  		move.w	($FFFFF704).w,d0
0001C4EE 0442 0070                  		subi.w	#$70,d2
0001C4F2 6500                       		bcs.s	locret_1BBDE
0001C4F4 9042                       		sub.w	d2,d0
0001C4F6 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C4FA                            
0001C4FA                            locret_1BBDE:
0001C4FA 4E75                       		rts	
0001C4FC                            ; End of function SS_FixCamera
0001C4FC                            
0001C4FC                            ; ===========================================================================
0001C4FC                            
0001C4FC                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C4FC 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C502 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C508 6600                       		bne.s	loc_1BBF4
0001C50A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C510                            
0001C510                            loc_1BBF4:
0001C510 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C516 6D00                       		blt.s	loc_1BC12
0001C518 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C51E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C524 5428 0024                  		addq.b	#2,$24(a0)
0001C528 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C52E                            
0001C52E                            loc_1BC12:
0001C52E 3038 F780                  		move.w	($FFFFF780).w,d0
0001C532 D078 F782                  		add.w	($FFFFF782).w,d0
0001C536 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C53A 4EB9 0001 4268             		jsr	Sonic_Animate
0001C540 4EB9 0001 4506             		jsr	LoadSonicDynPLC
0001C546 6100 FF8A                  		bsr.w	SS_FixCamera
0001C54A 4EF9 0000 DDFE             		jmp	DisplaySprite
0001C550                            ; ===========================================================================
0001C550                            
0001C550                            Obj09_Exit2:				; XREF: Obj09_Index
0001C550 5368 0038                  		subq.w	#1,$38(a0)
0001C554 6600                       		bne.s	loc_1BC40
0001C556 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C55C                            
0001C55C                            loc_1BC40:
0001C55C 4EB9 0001 4268             		jsr	Sonic_Animate
0001C562 4EB9 0001 4506             		jsr	LoadSonicDynPLC
0001C568 6100 FF68                  		bsr.w	SS_FixCamera
0001C56C 4EF9 0000 DDFE             		jmp	DisplaySprite
0001C572                            
0001C572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C572                            
0001C572                            
0001C572                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C572 2428 000C                  		move.l	$C(a0),d2
0001C576 2628 0008                  		move.l	8(a0),d3
0001C57A 1038 F780                  		move.b	($FFFFF780).w,d0
0001C57E 0200 00FC                  		andi.b	#$FC,d0
0001C582 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C588 3828 0010                  		move.w	$10(a0),d4
0001C58C 48C4                       		ext.l	d4
0001C58E E184                       		asl.l	#8,d4
0001C590 C1FC 002A                  		muls.w	#$2A,d0
0001C594 D084                       		add.l	d4,d0
0001C596 3828 0012                  		move.w	$12(a0),d4
0001C59A 48C4                       		ext.l	d4
0001C59C E184                       		asl.l	#8,d4
0001C59E C3FC 002A                  		muls.w	#$2A,d1
0001C5A2 D284                       		add.l	d4,d1
0001C5A4 D680                       		add.l	d0,d3
0001C5A6 6100 0000                  		bsr.w	sub_1BCE8
0001C5AA 6700                       		beq.s	loc_1BCB0
0001C5AC 9680                       		sub.l	d0,d3
0001C5AE 7000                       		moveq	#0,d0
0001C5B0 3140 0010                  		move.w	d0,$10(a0)
0001C5B4 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5BA D481                       		add.l	d1,d2
0001C5BC 6100 0000                  		bsr.w	sub_1BCE8
0001C5C0 6700                       		beq.s	loc_1BCC6
0001C5C2 9481                       		sub.l	d1,d2
0001C5C4 7200                       		moveq	#0,d1
0001C5C6 3141 0012                  		move.w	d1,$12(a0)
0001C5CA 4E75                       		rts	
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            loc_1BCB0:
0001C5CC D481                       		add.l	d1,d2
0001C5CE 6100 0000                  		bsr.w	sub_1BCE8
0001C5D2 6700                       		beq.s	loc_1BCD4
0001C5D4 9481                       		sub.l	d1,d2
0001C5D6 7200                       		moveq	#0,d1
0001C5D8 3141 0012                  		move.w	d1,$12(a0)
0001C5DC 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5E2                            
0001C5E2                            loc_1BCC6:
0001C5E2 E080                       		asr.l	#8,d0
0001C5E4 E081                       		asr.l	#8,d1
0001C5E6 3140 0010                  		move.w	d0,$10(a0)
0001C5EA 3141 0012                  		move.w	d1,$12(a0)
0001C5EE 4E75                       		rts	
0001C5F0                            ; ===========================================================================
0001C5F0                            
0001C5F0                            loc_1BCD4:
0001C5F0 E080                       		asr.l	#8,d0
0001C5F2 E081                       		asr.l	#8,d1
0001C5F4 3140 0010                  		move.w	d0,$10(a0)
0001C5F8 3141 0012                  		move.w	d1,$12(a0)
0001C5FC 08E8 0001 0022             		bset	#1,$22(a0)
0001C602 4E75                       		rts	
0001C604                            ; End of function Obj09_Fall
0001C604                            
0001C604                            
0001C604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C604                            
0001C604                            
0001C604                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C604 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C60A 7800                       		moveq	#0,d4
0001C60C 4842                       		swap	d2
0001C60E 3802                       		move.w	d2,d4
0001C610 4842                       		swap	d2
0001C612 0644 0044                  		addi.w	#$44,d4
0001C616 88FC 0018                  		divu.w	#$18,d4
0001C61A C8FC 0080                  		mulu.w	#$80,d4
0001C61E D3C4                       		adda.l	d4,a1
0001C620 7800                       		moveq	#0,d4
0001C622 4843                       		swap	d3
0001C624 3803                       		move.w	d3,d4
0001C626 4843                       		swap	d3
0001C628 0644 0014                  		addi.w	#$14,d4
0001C62C 88FC 0018                  		divu.w	#$18,d4
0001C630 D2C4                       		adda.w	d4,a1
0001C632 7A00                       		moveq	#0,d5
0001C634 1819                       		move.b	(a1)+,d4
0001C636 6100                       		bsr.s	sub_1BD30
0001C638 1819                       		move.b	(a1)+,d4
0001C63A 6100                       		bsr.s	sub_1BD30
0001C63C D2FC 007E                  		adda.w	#$7E,a1
0001C640 1819                       		move.b	(a1)+,d4
0001C642 6100                       		bsr.s	sub_1BD30
0001C644 1819                       		move.b	(a1)+,d4
0001C646 6100                       		bsr.s	sub_1BD30
0001C648 4A05                       		tst.b	d5
0001C64A 4E75                       		rts	
0001C64C                            ; End of function sub_1BCE8
0001C64C                            
0001C64C                            
0001C64C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C64C                            
0001C64C                            
0001C64C                            sub_1BD30:				; XREF: sub_1BCE8
0001C64C 6700                       		beq.s	locret_1BD44
0001C64E 0C04 0028                  		cmpi.b	#$28,d4
0001C652 6700                       		beq.s	locret_1BD44
0001C654 0C04 003A                  		cmpi.b	#$3A,d4
0001C658 6500                       		bcs.s	loc_1BD46
0001C65A 0C04 004B                  		cmpi.b	#$4B,d4
0001C65E 6400                       		bcc.s	loc_1BD46
0001C660                            
0001C660                            locret_1BD44:
0001C660 4E75                       		rts	
0001C662                            ; ===========================================================================
0001C662                            
0001C662                            loc_1BD46:
0001C662 1144 0030                  		move.b	d4,$30(a0)
0001C666 2149 0032                  		move.l	a1,$32(a0)
0001C66A 7AFF                       		moveq	#-1,d5
0001C66C 4E75                       		rts	
0001C66E                            ; End of function sub_1BD30
0001C66E                            
0001C66E                            
0001C66E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C66E                            
0001C66E                            
0001C66E                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C66E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C674 7800                       		moveq	#0,d4
0001C676 3828 000C                  		move.w	$C(a0),d4
0001C67A 0644 0050                  		addi.w	#$50,d4
0001C67E 88FC 0018                  		divu.w	#$18,d4
0001C682 C8FC 0080                  		mulu.w	#$80,d4
0001C686 D3C4                       		adda.l	d4,a1
0001C688 7800                       		moveq	#0,d4
0001C68A 3828 0008                  		move.w	8(a0),d4
0001C68E 0644 0020                  		addi.w	#$20,d4
0001C692 88FC 0018                  		divu.w	#$18,d4
0001C696 D2C4                       		adda.w	d4,a1
0001C698 1811                       		move.b	(a1),d4
0001C69A 6600                       		bne.s	Obj09_ChkCont
0001C69C 4A28 003A                  		tst.b	$3A(a0)
0001C6A0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C6A4 7800                       		moveq	#0,d4
0001C6A6 4E75                       		rts	
0001C6A8                            ; ===========================================================================
0001C6A8                            
0001C6A8                            Obj09_ChkCont:
0001C6A8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C6AC 6600                       		bne.s	Obj09_Chk1Up
0001C6AE 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C6B2 6600                       		bne.s	Obj09_GetCont
0001C6B4 14BC 0001                  		move.b	#1,(a2)
0001C6B8 2549 0004                  		move.l	a1,4(a2)
0001C6BC                            
0001C6BC                            Obj09_GetCont:
0001C6BC 4EB9 0000 A344             		jsr	CollectRing
0001C6C2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C6C8 6500                       		bcs.s	Obj09_NoCont
0001C6CA 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C6D0 6600                       		bne.s	Obj09_NoCont
0001C6D2 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C6D6 303C 00BF                  		move.w	#$BF,d0
0001C6DA 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C6E0                            
0001C6E0                            Obj09_NoCont:
0001C6E0 7800                       		moveq	#0,d4
0001C6E2 4E75                       		rts	
0001C6E4                            ; ===========================================================================
0001C6E4                            
0001C6E4                            Obj09_Chk1Up:
0001C6E4 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C6E8 6600                       		bne.s	Obj09_ChkEmer
0001C6EA 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C6EE 6600                       		bne.s	Obj09_Get1Up
0001C6F0 14BC 0003                  		move.b	#3,(a2)
0001C6F4 2549 0004                  		move.l	a1,4(a2)
0001C6F8                            
0001C6F8                            Obj09_Get1Up:
0001C6F8 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C6FC 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C700 303C 0088                  		move.w	#$88,d0
0001C704 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C70A 7800                       		moveq	#0,d4
0001C70C 4E75                       		rts	
0001C70E                            ; ===========================================================================
0001C70E                            
0001C70E                            Obj09_ChkEmer:
0001C70E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C712 6500                       		bcs.s	Obj09_ChkGhost
0001C714 0C04 0040                  		cmpi.b	#$40,d4
0001C718 6200                       		bhi.s	Obj09_ChkGhost
0001C71A 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C71E 6600                       		bne.s	Obj09_GetEmer
0001C720 14BC 0005                  		move.b	#5,(a2)
0001C724 2549 0004                  		move.l	a1,4(a2)
0001C728                            
0001C728                            Obj09_GetEmer:
0001C728 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C72E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C730 0404 003B                  		subi.b	#$3B,d4
0001C734 7000                       		moveq	#0,d0
0001C736 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C73A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C73E 1584 0000                  		move.b	d4,(a2,d0.w)
0001C742 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C746                            
0001C746                            Obj09_NoEmer:
0001C746 303C 0093                  		move.w	#$93,d0
0001C74A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C750 7800                       		moveq	#0,d4
0001C752 4E75                       		rts	
0001C754                            ; ===========================================================================
0001C754                            
0001C754                            Obj09_ChkGhost:
0001C754 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C758 6600                       		bne.s	Obj09_ChkGhostTag
0001C75A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C760                            
0001C760                            Obj09_ChkGhostTag:
0001C760 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C764 6600                       		bne.s	Obj09_NoGhost
0001C766 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C76C 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C76E 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C774                            
0001C774                            Obj09_NoGhost:
0001C774 78FF                       		moveq	#-1,d4
0001C776 4E75                       		rts	
0001C778                            ; ===========================================================================
0001C778                            
0001C778                            Obj09_MakeGhostSolid:
0001C778 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C77E 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C780 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C786 723F                       		moveq	#$3F,d1
0001C788                            
0001C788                            Obj09_GhostLoop2:
0001C788 743F                       		moveq	#$3F,d2
0001C78A                            
0001C78A                            Obj09_GhostLoop:
0001C78A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C78E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C790 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C794                            
0001C794                            Obj09_NoReplace:
0001C794 5249                       		addq.w	#1,a1
0001C796 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C79A 43E9 0040                  		lea	$40(a1),a1
0001C79E 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C7A2                            
0001C7A2                            Obj09_GhostNotSolid:
0001C7A2 4228 003A                  		clr.b	$3A(a0)
0001C7A6 7800                       		moveq	#0,d4
0001C7A8 4E75                       		rts	
0001C7AA                            ; End of function Obj09_ChkItems
0001C7AA                            
0001C7AA                            
0001C7AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7AA                            
0001C7AA                            
0001C7AA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C7AA 1028 0030                  		move.b	$30(a0),d0
0001C7AE 6600                       		bne.s	Obj09_ChkBumper
0001C7B0 5328 0036                  		subq.b	#1,$36(a0)
0001C7B4 6A00                       		bpl.s	loc_1BEA0
0001C7B6 117C 0000 0036             		move.b	#0,$36(a0)
0001C7BC                            
0001C7BC                            loc_1BEA0:
0001C7BC 5328 0037                  		subq.b	#1,$37(a0)
0001C7C0 6A00                       		bpl.s	locret_1BEAC
0001C7C2 117C 0000 0037             		move.b	#0,$37(a0)
0001C7C8                            
0001C7C8                            locret_1BEAC:
0001C7C8 4E75                       		rts	
0001C7CA                            ; ===========================================================================
0001C7CA                            
0001C7CA                            Obj09_ChkBumper:
0001C7CA 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C7CE 6600                       		bne.s	Obj09_GOAL
0001C7D0 2228 0032                  		move.l	$32(a0),d1
0001C7D4 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C7DA 3401                       		move.w	d1,d2
0001C7DC 0241 007F                  		andi.w	#$7F,d1
0001C7E0 C2FC 0018                  		mulu.w	#$18,d1
0001C7E4 0441 0014                  		subi.w	#$14,d1
0001C7E8 EE4A                       		lsr.w	#7,d2
0001C7EA 0242 007F                  		andi.w	#$7F,d2
0001C7EE C4FC 0018                  		mulu.w	#$18,d2
0001C7F2 0442 0044                  		subi.w	#$44,d2
0001C7F6 9268 0008                  		sub.w	8(a0),d1
0001C7FA 9468 000C                  		sub.w	$C(a0),d2
0001C7FE 4EB9 0000 2FBA             		jsr	(CalcAngle).l
0001C804 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C80A C3FC F900                  		muls.w	#-$700,d1
0001C80E E081                       		asr.l	#8,d1
0001C810 3141 0010                  		move.w	d1,$10(a0)
0001C814 C1FC F900                  		muls.w	#-$700,d0
0001C818 E080                       		asr.l	#8,d0
0001C81A 3140 0012                  		move.w	d0,$12(a0)
0001C81E 08E8 0001 0022             		bset	#1,$22(a0)
0001C824 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C828 6600                       		bne.s	Obj09_BumpSnd
0001C82A 14BC 0002                  		move.b	#2,(a2)
0001C82E 2028 0032                  		move.l	$32(a0),d0
0001C832 5380                       		subq.l	#1,d0
0001C834 2540 0004                  		move.l	d0,4(a2)
0001C838                            
0001C838                            Obj09_BumpSnd:
0001C838 303C 00B4                  		move.w	#$B4,d0
0001C83C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C842                            ; ===========================================================================
0001C842                            
0001C842                            Obj09_GOAL:
0001C842 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C846 6600                       		bne.s	Obj09_UPblock
0001C848 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C84C 303C 00A8                  		move.w	#$A8,d0		; change item
0001C850 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C856 4E75                       		rts	
0001C858                            ; ===========================================================================
0001C858                            
0001C858                            Obj09_UPblock:
0001C858 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C85C 6600                       		bne.s	Obj09_DOWNblock
0001C85E 4A28 0036                  		tst.b	$36(a0)
0001C862 6600 0000                  		bne.w	Obj09_NoGlass
0001C866 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C86C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C872 6700                       		beq.s	Obj09_UPsnd
0001C874 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C878 2268 0032                  		movea.l	$32(a0),a1
0001C87C 5389                       		subq.l	#1,a1
0001C87E 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C882                            
0001C882                            Obj09_UPsnd:
0001C882 303C 00A9                  		move.w	#$A9,d0
0001C886 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C88C                            ; ===========================================================================
0001C88C                            
0001C88C                            Obj09_DOWNblock:
0001C88C 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C890 6600                       		bne.s	Obj09_Rblock
0001C892 4A28 0036                  		tst.b	$36(a0)
0001C896 6600 0000                  		bne.w	Obj09_NoGlass
0001C89A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C8A0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C8A6 6600                       		bne.s	Obj09_DOWNsnd
0001C8A8 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C8AC 2268 0032                  		movea.l	$32(a0),a1
0001C8B0 5389                       		subq.l	#1,a1
0001C8B2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C8B6                            
0001C8B6                            Obj09_DOWNsnd:
0001C8B6 303C 00A9                  		move.w	#$A9,d0
0001C8BA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C8C0                            ; ===========================================================================
0001C8C0                            
0001C8C0                            Obj09_Rblock:
0001C8C0 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C8C4 6600                       		bne.s	Obj09_ChkGlass
0001C8C6 4A28 0037                  		tst.b	$37(a0)
0001C8CA 6600 0000                  		bne.w	Obj09_NoGlass
0001C8CE 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C8D4 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C8D8 6600                       		bne.s	Obj09_RevStage
0001C8DA 14BC 0004                  		move.b	#4,(a2)
0001C8DE 2028 0032                  		move.l	$32(a0),d0
0001C8E2 5380                       		subq.l	#1,d0
0001C8E4 2540 0004                  		move.l	d0,4(a2)
0001C8E8                            
0001C8E8                            Obj09_RevStage:
0001C8E8 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C8EC 303C 00A9                  		move.w	#$A9,d0
0001C8F0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C8F6                            ; ===========================================================================
0001C8F6                            
0001C8F6                            Obj09_ChkGlass:
0001C8F6 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C8FA 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C8FC 0C00 002E                  		cmpi.b	#$2E,d0
0001C900 6700                       		beq.s	Obj09_Glass
0001C902 0C00 002F                  		cmpi.b	#$2F,d0
0001C906 6700                       		beq.s	Obj09_Glass
0001C908 0C00 0030                  		cmpi.b	#$30,d0
0001C90C 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C90E                            
0001C90E                            Obj09_Glass:
0001C90E 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C912 6600                       		bne.s	Obj09_GlassSnd
0001C914 14BC 0006                  		move.b	#6,(a2)
0001C918 2268 0032                  		movea.l	$32(a0),a1
0001C91C 5389                       		subq.l	#1,a1
0001C91E 2549 0004                  		move.l	a1,4(a2)
0001C922 1011                       		move.b	(a1),d0
0001C924 5200                       		addq.b	#1,d0		; change glass type when touched
0001C926 0C00 0030                  		cmpi.b	#$30,d0
0001C92A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C92C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C92E                            
0001C92E                            Obj09_GlassUpdate:
0001C92E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C932                            
0001C932                            Obj09_GlassSnd:
0001C932 303C 00BA                  		move.w	#$BA,d0
0001C936 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C93C                            ; ===========================================================================
0001C93C                            
0001C93C                            Obj09_NoGlass:
0001C93C 4E75                       		rts	
0001C93E                            ; End of function Obj09_ChkItems2
0001C93E                            
0001C93E                            ; ===========================================================================
0001C93E                            ; ---------------------------------------------------------------------------
0001C93E                            ; Object 10 - blank
0001C93E                            ; ---------------------------------------------------------------------------
0001C93E                            
0001C93E                            Obj10:					; XREF: Obj_Index
0001C93E 4E75                       		rts	
0001C940                            ; ---------------------------------------------------------------------------
0001C940                            ; Subroutine to	animate	level graphics
0001C940                            ; ---------------------------------------------------------------------------
0001C940                            
0001C940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C940                            
0001C940                            
0001C940                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C940 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C944 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C946 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C94C 6100 0000                  		bsr.w	AniArt_GiantRing
0001C950 7000                       		moveq	#0,d0
0001C952 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C956 D040                       		add.w	d0,d0
0001C958 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C95C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C960                            ; ===========================================================================
0001C960                            
0001C960                            AniArt_Pause:
0001C960 4E75                       		rts	
0001C962                            ; End of function AniArt_Load
0001C962                            
0001C962                            ; ===========================================================================
0001C962 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C966 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C96A 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C96E 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C970                            ; ===========================================================================
0001C970                            ; ---------------------------------------------------------------------------
0001C970                            ; Animated pattern routine - Green Hill
0001C970                            ; ---------------------------------------------------------------------------
0001C970                            
0001C970                            AniArt_GHZ:				; XREF: AniArt_Index
0001C970 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C974 6A00                       		bpl.s	loc_1C08A
0001C976 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C97C 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C982 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C986 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C98A 0240 0001                  		andi.w	#1,d0
0001C98E 6700                       		beq.s	loc_1C078
0001C990 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C994                            
0001C994                            loc_1C078:
0001C994 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C99E 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C9A2 6000 0000                  		bra.w	LoadTiles
0001C9A6                            ; ===========================================================================
0001C9A6                            
0001C9A6                            loc_1C08A:
0001C9A6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9AA 6A00                       		bpl.s	loc_1C0C0
0001C9AC 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C9B2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C9B8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9BC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9C0 0240 0001                  		andi.w	#1,d0
0001C9C4 6700                       		beq.s	loc_1C0AE
0001C9C6 43E9 0200                  		lea	$200(a1),a1
0001C9CA                            
0001C9CA                            loc_1C0AE:
0001C9CA 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C9D4 323C 000F                  		move.w	#$F,d1
0001C9D8 6000 0000                  		bra.w	LoadTiles
0001C9DC                            ; ===========================================================================
0001C9DC                            
0001C9DC                            loc_1C0C0:
0001C9DC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C9E0 6A00                       		bpl.s	locret_1C10C
0001C9E2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C9E8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C9EC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C9F0 0240 0003                  		andi.w	#3,d0
0001C9F4 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C9F8 0800 0000                  		btst	#0,d0
0001C9FC 6600                       		bne.s	loc_1C0E8
0001C9FE 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CA04                            
0001CA04                            loc_1C0E8:
0001CA04 EF48                       		lsl.w	#7,d0
0001CA06 3200                       		move.w	d0,d1
0001CA08 D040                       		add.w	d0,d0
0001CA0A D041                       		add.w	d1,d0
0001CA0C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA16 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA1C 43F1 0000                  		lea	(a1,d0.w),a1
0001CA20 323C 000B                  		move.w	#$B,d1
0001CA24 6100 0000                  		bsr.w	LoadTiles
0001CA28                            
0001CA28                            locret_1C10C:
0001CA28 4E75                       		rts	
0001CA2A                            ; ===========================================================================
0001CA2A 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CA2E                            ; ===========================================================================
0001CA2E                            ; ---------------------------------------------------------------------------
0001CA2E                            ; Animated pattern routine - Marble
0001CA2E                            ; ---------------------------------------------------------------------------
0001CA2E                            
0001CA2E                            AniArt_MZ:				; XREF: AniArt_Index
0001CA2E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA32 6A00                       		bpl.s	loc_1C150
0001CA34 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CA3A 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CA40 7000                       		moveq	#0,d0
0001CA42 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA46 5200                       		addq.b	#1,d0
0001CA48 0C00 0003                  		cmpi.b	#3,d0
0001CA4C 6600                       		bne.s	loc_1C134
0001CA4E 7000                       		moveq	#0,d0
0001CA50                            
0001CA50                            loc_1C134:
0001CA50 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CA54 C0FC 0100                  		mulu.w	#$100,d0
0001CA58 D2C0                       		adda.w	d0,a1
0001CA5A 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CA64 323C 0007                  		move.w	#7,d1
0001CA68 6100 0000                  		bsr.w	LoadTiles
0001CA6C                            
0001CA6C                            loc_1C150:
0001CA6C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA70 6A00                       		bpl.s	loc_1C1AE
0001CA72 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CA78 7000                       		moveq	#0,d0
0001CA7A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA7E 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CA84 EE58                       		ror.w	#7,d0
0001CA86 D8C0                       		adda.w	d0,a4
0001CA88 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CA92 7600                       		moveq	#0,d3
0001CA94 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CA98 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA9C 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CAA0 343C 0003                  		move.w	#3,d2
0001CAA4                            
0001CAA4                            loc_1C188:
0001CAA4 3003                       		move.w	d3,d0
0001CAA6 D040                       		add.w	d0,d0
0001CAA8 0240 001E                  		andi.w	#$1E,d0
0001CAAC 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CAB2 3033 0000                  		move.w	(a3,d0.w),d0
0001CAB6 47F3 0000                  		lea	(a3,d0.w),a3
0001CABA 224C                       		movea.l	a4,a1
0001CABC 323C 001F                  		move.w	#$1F,d1
0001CAC0 4E93                       		jsr	(a3)
0001CAC2 5843                       		addq.w	#4,d3
0001CAC4 51CA FFDE                  		dbf	d2,loc_1C188
0001CAC8 4E75                       		rts	
0001CACA                            ; ===========================================================================
0001CACA                            
0001CACA                            loc_1C1AE:
0001CACA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CACE 6A00 0000                  		bpl.w	locret_1C1EA
0001CAD2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CAD8 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CADE 7000                       		moveq	#0,d0
0001CAE0 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CAE4 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CAE8 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CAEE C0FC 00C0                  		mulu.w	#$C0,d0
0001CAF2 D2C0                       		adda.w	d0,a1
0001CAF4 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CAFE 323C 0005                  		move.w	#5,d1
0001CB02 6000 0000                  		bra.w	LoadTiles
0001CB06                            ; ===========================================================================
0001CB06                            
0001CB06                            locret_1C1EA:
0001CB06 4E75                       		rts	
0001CB08                            ; ===========================================================================
0001CB08                            ; ---------------------------------------------------------------------------
0001CB08                            ; Animated pattern routine - Scrap Brain
0001CB08                            ; ---------------------------------------------------------------------------
0001CB08                            
0001CB08                            AniArt_SBZ:				; XREF: AniArt_Index
0001CB08 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CB0C 6700                       		beq.s	loc_1C1F8
0001CB0E 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CB12 6000                       		bra.s	loc_1C250
0001CB14                            ; ===========================================================================
0001CB14                            
0001CB14                            loc_1C1F8:
0001CB14 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB18 6A00                       		bpl.s	loc_1C250
0001CB1A 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CB20 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CB26 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CB30 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB34 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB38 0240 0007                  		andi.w	#7,d0
0001CB3C 6700                       		beq.s	loc_1C234
0001CB3E 5340                       		subq.w	#1,d0
0001CB40 C0FC 0180                  		mulu.w	#$180,d0
0001CB44 43F1 0000                  		lea	(a1,d0.w),a1
0001CB48 323C 000B                  		move.w	#$B,d1
0001CB4C 6000 0000                  		bra.w	LoadTiles
0001CB50                            ; ===========================================================================
0001CB50                            
0001CB50                            loc_1C234:
0001CB50 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CB56                            
0001CB56                            loc_1C23A:
0001CB56 323C 0005                  		move.w	#5,d1
0001CB5A 6100 0000                  		bsr.w	LoadTiles
0001CB5E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB64 323C 0005                  		move.w	#5,d1
0001CB68 6000 0000                  		bra.w	LoadTiles
0001CB6C                            ; ===========================================================================
0001CB6C                            
0001CB6C                            loc_1C250:
0001CB6C 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CB70 6700                       		beq.s	loc_1C25C
0001CB72 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB76 6000                       		bra.s	locret_1C2A0
0001CB78                            ; ===========================================================================
0001CB78                            
0001CB78                            loc_1C25C:
0001CB78 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB7C 6A00                       		bpl.s	locret_1C2A0
0001CB7E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB84 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB8A 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CB94 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB98 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB9C 0240 0007                  		andi.w	#7,d0
0001CBA0 6700                       		beq.s	loc_1C298
0001CBA2 5340                       		subq.w	#1,d0
0001CBA4 C0FC 0180                  		mulu.w	#$180,d0
0001CBA8 43F1 0000                  		lea	(a1,d0.w),a1
0001CBAC 323C 000B                  		move.w	#$B,d1
0001CBB0 6000 0000                  		bra.w	LoadTiles
0001CBB4                            ; ===========================================================================
0001CBB4                            
0001CBB4                            loc_1C298:
0001CBB4 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CBBA 609A                       		bra.s	loc_1C23A
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            locret_1C2A0:
0001CBBC 4E75                       		rts	
0001CBBE                            ; ===========================================================================
0001CBBE                            ; ---------------------------------------------------------------------------
0001CBBE                            ; Animated pattern routine - ending sequence
0001CBBE                            ; ---------------------------------------------------------------------------
0001CBBE                            
0001CBBE                            AniArt_Ending:				; XREF: AniArt_Index
0001CBBE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CBC2 6A00                       		bpl.s	loc_1C2F4
0001CBC4 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CBCA 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CBD0 45F8 9400                  		lea	($FFFF9400).w,a2
0001CBD4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBD8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBDC 0240 0001                  		andi.w	#1,d0
0001CBE0 6700                       		beq.s	loc_1C2CE
0001CBE2 43E9 0200                  		lea	$200(a1),a1
0001CBE6 45EA 0200                  		lea	$200(a2),a2
0001CBEA                            
0001CBEA                            loc_1C2CE:
0001CBEA 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CBF4 323C 000F                  		move.w	#$F,d1
0001CBF8 6100 0000                  		bsr.w	LoadTiles
0001CBFC 224A                       		movea.l	a2,a1
0001CBFE 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CC08 323C 000F                  		move.w	#$F,d1
0001CC0C 6000 0000                  		bra.w	LoadTiles
0001CC10                            ; ===========================================================================
0001CC10                            
0001CC10                            loc_1C2F4:
0001CC10 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC14 6A00                       		bpl.s	loc_1C33C
0001CC16 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC1C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC20 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC24 0240 0007                  		andi.w	#7,d0
0001CC28 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CC2C EF48                       		lsl.w	#7,d0
0001CC2E 3200                       		move.w	d0,d1
0001CC30 D040                       		add.w	d0,d0
0001CC32 D041                       		add.w	d1,d0
0001CC34 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CC3E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CC44 43F1 0000                  		lea	(a1,d0.w),a1
0001CC48 323C 000B                  		move.w	#$B,d1
0001CC4C 6000 0000                  		bra.w	LoadTiles
0001CC50                            ; ===========================================================================
0001CC50 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CC58                            ; ===========================================================================
0001CC58                            
0001CC58                            loc_1C33C:
0001CC58 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CC5C 6A00                       		bpl.s	loc_1C37A
0001CC5E 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CC64 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CC68 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CC6C 0240 0003                  		andi.w	#3,d0
0001CC70 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CC74 E148                       		lsl.w	#8,d0
0001CC76 D040                       		add.w	d0,d0
0001CC78 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CC82 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CC86 43F1 0000                  		lea	(a1,d0.w),a1
0001CC8A 323C 000F                  		move.w	#$F,d1
0001CC8E 6000 0000                  		bra.w	LoadTiles
0001CC92                            ; ===========================================================================
0001CC92 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CC96                            ; ===========================================================================
0001CC96                            
0001CC96                            loc_1C37A:
0001CC96 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CC9A 6A00                       		bpl.s	locret_1C3B4
0001CC9C 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CCA2 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CCA6 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CCAA 0240 0003                  		andi.w	#3,d0
0001CCAE 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CCB2 E148                       		lsl.w	#8,d0
0001CCB4 D040                       		add.w	d0,d0
0001CCB6 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CCC0 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CCC4 43F1 0000                  		lea	(a1,d0.w),a1
0001CCC8 323C 000F                  		move.w	#$F,d1
0001CCCC 6000 0000                  		bra.w	LoadTiles
0001CCD0                            ; ===========================================================================
0001CCD0                            
0001CCD0                            locret_1C3B4:
0001CCD0 4E75                       		rts	
0001CCD2                            ; ===========================================================================
0001CCD2                            
0001CCD2                            AniArt_none:				; XREF: AniArt_Index
0001CCD2 4E75                       		rts	
0001CCD4                            
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            
0001CCD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCD4                            
0001CCD4                            
0001CCD4                            LoadTiles:
0001CCD4 2C99                       		move.l	(a1)+,(a6)
0001CCD6 2C99                       		move.l	(a1)+,(a6)
0001CCD8 2C99                       		move.l	(a1)+,(a6)
0001CCDA 2C99                       		move.l	(a1)+,(a6)
0001CCDC 2C99                       		move.l	(a1)+,(a6)
0001CCDE 2C99                       		move.l	(a1)+,(a6)
0001CCE0 2C99                       		move.l	(a1)+,(a6)
0001CCE2 2C99                       		move.l	(a1)+,(a6)
0001CCE4 51C9 FFEE                  		dbf	d1,LoadTiles
0001CCE8 4E75                       		rts	
0001CCEA                            ; End of function LoadTiles
0001CCEA                            
0001CCEA                            ; ===========================================================================
0001CCEA                            ; ---------------------------------------------------------------------------
0001CCEA                            ; Animated pattern routine - more Marble Zone
0001CCEA                            ; ---------------------------------------------------------------------------
0001CCEA 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CCEE 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CCF2 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CCF6 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CCFA 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CCFE 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CD02 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CD06 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CD0A                            ; ===========================================================================
0001CD0A                            
0001CD0A                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CD0A 2C91                       		move.l	(a1),(a6)
0001CD0C 43E9 0010                  		lea	$10(a1),a1
0001CD10 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CD14 4E75                       		rts	
0001CD16                            ; ===========================================================================
0001CD16                            
0001CD16                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CD16 2029 0002                  		move.l	2(a1),d0
0001CD1A 1029 0001                  		move.b	1(a1),d0
0001CD1E E098                       		ror.l	#8,d0
0001CD20 2C80                       		move.l	d0,(a6)
0001CD22 43E9 0010                  		lea	$10(a1),a1
0001CD26 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CD2A 4E75                       		rts	
0001CD2C                            ; ===========================================================================
0001CD2C                            
0001CD2C                            loc_1C410:				; XREF: AniArt_MZextra
0001CD2C 2CA9 0002                  		move.l	2(a1),(a6)
0001CD30 43E9 0010                  		lea	$10(a1),a1
0001CD34 51C9 FFF6                  		dbf	d1,loc_1C410
0001CD38 4E75                       		rts	
0001CD3A                            ; ===========================================================================
0001CD3A                            
0001CD3A                            loc_1C41E:				; XREF: AniArt_MZextra
0001CD3A 2029 0004                  		move.l	4(a1),d0
0001CD3E 1029 0003                  		move.b	3(a1),d0
0001CD42 E098                       		ror.l	#8,d0
0001CD44 2C80                       		move.l	d0,(a6)
0001CD46 43E9 0010                  		lea	$10(a1),a1
0001CD4A 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CD4E 4E75                       		rts	
0001CD50                            ; ===========================================================================
0001CD50                            
0001CD50                            loc_1C434:				; XREF: AniArt_MZextra
0001CD50 2CA9 0004                  		move.l	4(a1),(a6)
0001CD54 43E9 0010                  		lea	$10(a1),a1
0001CD58 51C9 FFF6                  		dbf	d1,loc_1C434
0001CD5C 4E75                       		rts	
0001CD5E                            ; ===========================================================================
0001CD5E                            
0001CD5E                            loc_1C442:				; XREF: AniArt_MZextra
0001CD5E 2029 0006                  		move.l	6(a1),d0
0001CD62 1029 0005                  		move.b	5(a1),d0
0001CD66 E098                       		ror.l	#8,d0
0001CD68 2C80                       		move.l	d0,(a6)
0001CD6A 43E9 0010                  		lea	$10(a1),a1
0001CD6E 51C9 FFEE                  		dbf	d1,loc_1C442
0001CD72 4E75                       		rts	
0001CD74                            ; ===========================================================================
0001CD74                            
0001CD74                            loc_1C458:				; XREF: AniArt_MZextra
0001CD74 2CA9 0006                  		move.l	6(a1),(a6)
0001CD78 43E9 0010                  		lea	$10(a1),a1
0001CD7C 51C9 FFF6                  		dbf	d1,loc_1C458
0001CD80 4E75                       		rts	
0001CD82                            ; ===========================================================================
0001CD82                            
0001CD82                            loc_1C466:				; XREF: AniArt_MZextra
0001CD82 2029 0008                  		move.l	8(a1),d0
0001CD86 1029 0007                  		move.b	7(a1),d0
0001CD8A E098                       		ror.l	#8,d0
0001CD8C 2C80                       		move.l	d0,(a6)
0001CD8E 43E9 0010                  		lea	$10(a1),a1
0001CD92 51C9 FFEE                  		dbf	d1,loc_1C466
0001CD96 4E75                       		rts	
0001CD98                            ; ===========================================================================
0001CD98                            
0001CD98                            loc_1C47C:				; XREF: AniArt_MZextra
0001CD98 2CA9 0008                  		move.l	8(a1),(a6)
0001CD9C 43E9 0010                  		lea	$10(a1),a1
0001CDA0 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CDA4 4E75                       		rts	
0001CDA6                            ; ===========================================================================
0001CDA6                            
0001CDA6                            loc_1C48A:				; XREF: AniArt_MZextra
0001CDA6 2029 000A                  		move.l	$A(a1),d0
0001CDAA 1029 0009                  		move.b	9(a1),d0
0001CDAE E098                       		ror.l	#8,d0
0001CDB0 2C80                       		move.l	d0,(a6)
0001CDB2 43E9 0010                  		lea	$10(a1),a1
0001CDB6 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CDBA 4E75                       		rts	
0001CDBC                            ; ===========================================================================
0001CDBC                            
0001CDBC                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CDBC 2CA9 000A                  		move.l	$A(a1),(a6)
0001CDC0 43E9 0010                  		lea	$10(a1),a1
0001CDC4 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CDC8 4E75                       		rts	
0001CDCA                            ; ===========================================================================
0001CDCA                            
0001CDCA                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CDCA 2029 000C                  		move.l	$C(a1),d0
0001CDCE 1029 000B                  		move.b	$B(a1),d0
0001CDD2 E098                       		ror.l	#8,d0
0001CDD4 2C80                       		move.l	d0,(a6)
0001CDD6 43E9 0010                  		lea	$10(a1),a1
0001CDDA 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CDDE 4E75                       		rts	
0001CDE0                            ; ===========================================================================
0001CDE0                            
0001CDE0                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CDE0 2CA9 000C                  		move.l	$C(a1),(a6)
0001CDE4 43E9 0010                  		lea	$10(a1),a1
0001CDE8 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CDEC 4E75                       		rts	
0001CDEE                            ; ===========================================================================
0001CDEE                            
0001CDEE                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CDEE 2029 000C                  		move.l	$C(a1),d0
0001CDF2 E198                       		rol.l	#8,d0
0001CDF4 1011                       		move.b	0(a1),d0
0001CDF6 2C80                       		move.l	d0,(a6)
0001CDF8 43E9 0010                  		lea	$10(a1),a1
0001CDFC 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CE00 4E75                       		rts	
0001CE02                            ; ===========================================================================
0001CE02                            
0001CE02                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CE02 3CA9 000E                  		move.w	$E(a1),(a6)
0001CE06 3C91                       		move.w	0(a1),(a6)
0001CE08 43E9 0010                  		lea	$10(a1),a1
0001CE0C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CE10 4E75                       		rts	
0001CE12                            ; ===========================================================================
0001CE12                            
0001CE12                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CE12 2011                       		move.l	0(a1),d0
0001CE14 1029 000F                  		move.b	$F(a1),d0
0001CE18 E098                       		ror.l	#8,d0
0001CE1A 2C80                       		move.l	d0,(a6)
0001CE1C 43E9 0010                  		lea	$10(a1),a1
0001CE20 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CE24 4E75                       		rts	
0001CE26                            
0001CE26                            ; ---------------------------------------------------------------------------
0001CE26                            ; Animated pattern routine - giant ring
0001CE26                            ; ---------------------------------------------------------------------------
0001CE26                            
0001CE26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE26                            
0001CE26                            
0001CE26                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CE26 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CE2A 6600                       		bne.s	loc_1C518
0001CE2C 4E75                       		rts	
0001CE2E                            ; ===========================================================================
0001CE2E                            
0001CE2E                            loc_1C518:
0001CE2E 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CE34 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CE3A 7000                       		moveq	#0,d0
0001CE3C 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CE40 43F1 0000                  		lea	(a1,d0.w),a1
0001CE44 0640 8000                  		addi.w	#$8000,d0
0001CE48 E588                       		lsl.l	#2,d0
0001CE4A E448                       		lsr.w	#2,d0
0001CE4C 0040 4000                  		ori.w	#$4000,d0
0001CE50 4840                       		swap	d0
0001CE52 2D40 0004                  		move.l	d0,4(a6)
0001CE56 323C 000D                  		move.w	#$D,d1
0001CE5A 6000 FE78                  		bra.w	LoadTiles
0001CE5E                            ; End of function AniArt_GiantRing
0001CE5E                            
0001CE5E                            ; ===========================================================================
0001CE5E                            ; ---------------------------------------------------------------------------
0001CE5E                            ; Object 21 - SCORE, TIME, RINGS
0001CE5E                            ; ---------------------------------------------------------------------------
0001CE5E                            
0001CE5E                            Obj21:					; XREF: Obj_Index
0001CE5E 7000                       		moveq	#0,d0
0001CE60 1028 0024                  		move.b	$24(a0),d0
0001CE64 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CE68 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CE6C                            ; ===========================================================================
0001CE6C 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CE6E 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            Obj21_Main:				; XREF: Obj21_Main
0001CE70 5428 0024                  		addq.b	#2,$24(a0)
0001CE74 317C 0090 0008             		move.w	#$90,8(a0)
0001CE7A 317C 0108 000A             		move.w	#$108,$A(a0)
0001CE80 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CE88 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CE8E 117C 0000 0001             		move.b	#0,1(a0)
0001CE94 117C 0000 0018             		move.b	#0,$18(a0)
0001CE9A                            
0001CE9A                            Obj21_Flash:				; XREF: Obj21_Main
0001CE9A 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CE9E 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CEA0 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CEA4 4EF9 0000 DDFE             		jmp	DisplaySprite
0001CEAA                            ; ===========================================================================
0001CEAA                            
0001CEAA                            Obj21_Flash2:
0001CEAA 7000                       		moveq	#0,d0
0001CEAC 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CEB2 6600                       		bne.s	Obj21_Display
0001CEB4 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CEB6 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CEBC 6600                       		bne.s	Obj21_Display	; if not, branch
0001CEBE 5440                       		addq.w	#2,d0		; make time counter flash red
0001CEC0                            
0001CEC0                            Obj21_Display:
0001CEC0 1140 001A                  		move.b	d0,$1A(a0)
0001CEC4 4EF9 0000 DDFE             		jmp	DisplaySprite
0001CECA                            ; ===========================================================================
0001CECA                            ; ---------------------------------------------------------------------------
0001CECA                            ; Sprite mappings - SCORE, TIME, RINGS
0001CECA                            ; ---------------------------------------------------------------------------
0001CECA                            Map_obj21:
0001CECA                            	include "_maps\obj21.asm"
0001CECA                            ; ---------------------------------------------------------------------------
0001CECA                            ; Sprite mappings - SCORE, TIME, RINGS
0001CECA                            ; ---------------------------------------------------------------------------
0001CECA 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CECE 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CED2 0A                         byte_1C5BC:	dc.b $A
0001CED3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CED8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEDD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEE2 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CEE7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEEC A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEF1 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEF6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEFB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF00 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF05 00                         		dc.b 0
0001CF06 0A                         byte_1C5F0:	dc.b $A
0001CF07 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF0C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF11 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF16 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF1B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF20 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF25 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF2A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF2F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF34 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF39 00                         		dc.b 0
0001CF3A 0A                         byte_1C624:	dc.b $A
0001CF3B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF40 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF45 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF4A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF4F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF54 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF59 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF5E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF63 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF68 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF6D 00                         		dc.b 0
0001CF6E 0A                         byte_1C658:	dc.b $A
0001CF6F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF74 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF79 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF7E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF83 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF88 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF8D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF92 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF97 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF9C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CFA2 00                         		even
0001CFA2 00                         		even
0001CFA2                            
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2                            ; Add points subroutine
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2                            
0001CFA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFA2                            
0001CFA2                            
0001CFA2                            AddPoints:
0001CFA2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CFA8 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CFAC 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CFB0 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CFB2 223C 000F 423F             		move.l	#999999,d1
0001CFB8 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CFBA 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CFBE 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CFC0 2481                       		move.l	d1,(a2)
0001CFC2                            
0001CFC2                            loc_1C6AC:
0001CFC2 2013                       		move.l	(a3),d0
0001CFC4 B092                       		cmp.l	(a2),d0
0001CFC6 6500 0000                  		bcs.w	locret_1C6B6
0001CFCA 2480                       		move.l	d0,(a2)
0001CFCC                            
0001CFCC                            locret_1C6B6:
0001CFCC 4E75                       		rts	
0001CFCE                            ; End of function AddPoints
0001CFCE                            
0001CFCE                            ; ---------------------------------------------------------------------------
0001CFCE                            ; Subroutine to	update the HUD
0001CFCE                            ; ---------------------------------------------------------------------------
0001CFCE                            
0001CFCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFCE                            
0001CFCE                            
0001CFCE                            HudUpdate:
0001CFCE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CFD2 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CFD6 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CFDA 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CFDC 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CFE0 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CFE6 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CFEA 6100 0000                  		bsr.w	Hud_Score
0001CFEE                            
0001CFEE                            Hud_ChkRings:
0001CFEE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CFF2 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CFF4 6A00                       		bpl.s	loc_1C6E4
0001CFF6 6100 0000                  		bsr.w	Hud_LoadZero
0001CFFA                            
0001CFFA                            loc_1C6E4:
0001CFFA 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CFFE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D004 7200                       		moveq	#0,d1
0001D006 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D00A 6100 0000                  		bsr.w	Hud_Rings
0001D00E                            
0001D00E                            Hud_ChkTime:
0001D00E 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D012 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D014 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D018 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D01A 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D01E 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D024 6700                       		beq.s	TimeOver	; if yes, branch
0001D026 5221                       		addq.b	#1,-(a1)
0001D028 0C11 003C                  		cmpi.b	#60,(a1)
0001D02C 6500                       		bcs.s	Hud_ChkLives
0001D02E 12BC 0000                  		move.b	#0,(a1)
0001D032 5221                       		addq.b	#1,-(a1)
0001D034 0C11 003C                  		cmpi.b	#60,(a1)
0001D038 6500                       		bcs.s	loc_1C734
0001D03A 12BC 0000                  		move.b	#0,(a1)
0001D03E 5221                       		addq.b	#1,-(a1)
0001D040 0C11 0009                  		cmpi.b	#9,(a1)
0001D044 6500                       		bcs.s	loc_1C734
0001D046 12BC 0009                  		move.b	#9,(a1)
0001D04A                            
0001D04A                            loc_1C734:
0001D04A 203C 5E40 0003             		move.l	#$5E400003,d0
0001D050 7200                       		moveq	#0,d1
0001D052 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D056 6100 0000                  		bsr.w	Hud_Mins
0001D05A 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D060 7200                       		moveq	#0,d1
0001D062 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D066 6100 0000                  		bsr.w	Hud_Secs
0001D06A                            
0001D06A                            Hud_ChkLives:
0001D06A 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D06E 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D070 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D074 6100 0000                  		bsr.w	Hud_Lives
0001D078                            
0001D078                            Hud_ChkBonus:
0001D078 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D07C 6700                       		beq.s	Hud_End		; if not, branch
0001D07E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D082 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D08C 7200                       		moveq	#0,d1
0001D08E 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D092 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D096 7200                       		moveq	#0,d1
0001D098 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D09C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0A0                            
0001D0A0                            Hud_End:
0001D0A0 4E75                       		rts	
0001D0A2                            ; ===========================================================================
0001D0A2                            
0001D0A2                            TimeOver:				; XREF: Hud_ChkTime
0001D0A2 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D0A6 41F8 D000                  		lea	($FFFFD000).w,a0
0001D0AA 2448                       		movea.l	a0,a2
0001D0AC 6100 E908                  		bsr.w	KillSonic
0001D0B0 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D0B6 4E75                       		rts	
0001D0B8                            ; ===========================================================================
0001D0B8                            
0001D0B8                            HudDebug:				; XREF: HudUpdate
0001D0B8 6100 0000                  		bsr.w	HudDb_XY
0001D0BC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D0C0 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D0C2 6A00                       		bpl.s	HudDb_Rings
0001D0C4 6100 0000                  		bsr.w	Hud_LoadZero
0001D0C8                            
0001D0C8                            HudDb_Rings:
0001D0C8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D0CC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D0D2 7200                       		moveq	#0,d1
0001D0D4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D0D8 6100 0000                  		bsr.w	Hud_Rings
0001D0DC                            
0001D0DC                            HudDb_ObjCount:
0001D0DC 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D0E2 7200                       		moveq	#0,d1
0001D0E4 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D0E8 6100 0000                  		bsr.w	Hud_Secs
0001D0EC 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D0F0 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D0F2 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D0F6 6100 0000                  		bsr.w	Hud_Lives
0001D0FA                            
0001D0FA                            HudDb_ChkBonus:
0001D0FA 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D0FE 6700                       		beq.s	HudDb_End	; if not, branch
0001D100 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D104 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D10E 7200                       		moveq	#0,d1
0001D110 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D114 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D118 7200                       		moveq	#0,d1
0001D11A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D11E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D122                            
0001D122                            HudDb_End:
0001D122 4E75                       		rts	
0001D124                            ; End of function HudUpdate
0001D124                            
0001D124                            ; ---------------------------------------------------------------------------
0001D124                            ; Subroutine to	load "0" on the	HUD
0001D124                            ; ---------------------------------------------------------------------------
0001D124                            
0001D124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D124                            
0001D124                            
0001D124                            Hud_LoadZero:				; XREF: HudUpdate
0001D124 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D12E 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D132 343C 0002                  		move.w	#2,d2
0001D136 6000                       		bra.s	loc_1C83E
0001D138                            ; End of function Hud_LoadZero
0001D138                            
0001D138                            ; ---------------------------------------------------------------------------
0001D138                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D138                            ; ---------------------------------------------------------------------------
0001D138                            
0001D138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D138                            
0001D138                            
0001D138                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D138 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D13E 6100 0000                  		bsr.w	Hud_Lives
0001D142 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D14C 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D150 343C 000E                  		move.w	#$E,d2
0001D154                            
0001D154                            loc_1C83E:				; XREF: Hud_LoadZero
0001D154 43FA 0000                  		lea	Art_Hud(pc),a1
0001D158                            
0001D158                            loc_1C842:
0001D158 323C 000F                  		move.w	#$F,d1
0001D15C 101A                       		move.b	(a2)+,d0
0001D15E 6B00                       		bmi.s	loc_1C85E
0001D160 4880                       		ext.w	d0
0001D162 EB48                       		lsl.w	#5,d0
0001D164 47F1 0000                  		lea	(a1,d0.w),a3
0001D168                            
0001D168                            loc_1C852:
0001D168 2C9B                       		move.l	(a3)+,(a6)
0001D16A 51C9 FFFC                  		dbf	d1,loc_1C852
0001D16E                            
0001D16E                            loc_1C858:
0001D16E 51CA FFE8                  		dbf	d2,loc_1C842
0001D172                            
0001D172 4E75                       		rts	
0001D174                            ; ===========================================================================
0001D174                            
0001D174                            loc_1C85E:
0001D174 2CBC 0000 0000             		move.l	#0,(a6)
0001D17A 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D17E                            
0001D17E 60EE                       		bra.s	loc_1C858
0001D180                            ; End of function Hud_Base
0001D180                            
0001D180                            ; ===========================================================================
0001D180 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D18C FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D190                            ; ---------------------------------------------------------------------------
0001D190                            ; Subroutine to	load debug mode	numbers	patterns
0001D190                            ; ---------------------------------------------------------------------------
0001D190                            
0001D190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D190                            
0001D190                            
0001D190                            HudDb_XY:				; XREF: HudDebug
0001D190 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D19A 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D19E 4841                       		swap	d1
0001D1A0 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D1A4 6100                       		bsr.s	HudDb_XY2
0001D1A6 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D1AA 4841                       		swap	d1
0001D1AC 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D1B0                            ; End of function HudDb_XY
0001D1B0                            
0001D1B0                            
0001D1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1B0                            
0001D1B0                            
0001D1B0                            HudDb_XY2:
0001D1B0 7C07                       		moveq	#7,d6
0001D1B2 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D1B8                            
0001D1B8                            HudDb_XYLoop:
0001D1B8 E959                       		rol.w	#4,d1
0001D1BA 3401                       		move.w	d1,d2
0001D1BC 0242 000F                  		andi.w	#$F,d2
0001D1C0 0C42 000A                  		cmpi.w	#$A,d2
0001D1C4 6500                       		bcs.s	loc_1C8B2
0001D1C6 5E42                       		addq.w	#7,d2
0001D1C8                            
0001D1C8                            loc_1C8B2:
0001D1C8 EB4A                       		lsl.w	#5,d2
0001D1CA 47F1 2000                  		lea	(a1,d2.w),a3
0001D1CE 2C9B                       		move.l	(a3)+,(a6)
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 2C9B                       		move.l	(a3)+,(a6)
0001D1DC 2C9B                       		move.l	(a3)+,(a6)
0001D1DE 4841                       		swap	d1
0001D1E0 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D1E4                            
0001D1E4 4E75                       		rts	
0001D1E6                            ; End of function HudDb_XY2
0001D1E6                            
0001D1E6                            ; ---------------------------------------------------------------------------
0001D1E6                            ; Subroutine to	load rings numbers patterns
0001D1E6                            ; ---------------------------------------------------------------------------
0001D1E6                            
0001D1E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1E6                            
0001D1E6                            
0001D1E6                            Hud_Rings:				; XREF: HudUpdate
0001D1E6 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D1EC 7C02                       		moveq	#2,d6
0001D1EE 6000                       		bra.s	Hud_LoadArt
0001D1F0                            ; End of function Hud_Rings
0001D1F0                            
0001D1F0                            ; ---------------------------------------------------------------------------
0001D1F0                            ; Subroutine to	load score numbers patterns
0001D1F0                            ; ---------------------------------------------------------------------------
0001D1F0                            
0001D1F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1F0                            
0001D1F0                            
0001D1F0                            Hud_Score:				; XREF: HudUpdate
0001D1F0 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D1F6 7C05                       		moveq	#5,d6
0001D1F8                            
0001D1F8                            Hud_LoadArt:
0001D1F8 7800                       		moveq	#0,d4
0001D1FA 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1FE                            
0001D1FE                            Hud_ScoreLoop:
0001D1FE 7400                       		moveq	#0,d2
0001D200 261A                       		move.l	(a2)+,d3
0001D202                            
0001D202                            loc_1C8EC:
0001D202 9283                       		sub.l	d3,d1
0001D204 6500                       		bcs.s	loc_1C8F4
0001D206 5242                       		addq.w	#1,d2
0001D208 60F8                       		bra.s	loc_1C8EC
0001D20A                            ; ===========================================================================
0001D20A                            
0001D20A                            loc_1C8F4:
0001D20A D283                       		add.l	d3,d1
0001D20C 4A42                       		tst.w	d2
0001D20E 6700                       		beq.s	loc_1C8FE
0001D210 383C 0001                  		move.w	#1,d4
0001D214                            
0001D214                            loc_1C8FE:
0001D214 4A44                       		tst.w	d4
0001D216 6700                       		beq.s	loc_1C92C
0001D218 ED4A                       		lsl.w	#6,d2
0001D21A 2D40 0004                  		move.l	d0,4(a6)
0001D21E 47F1 2000                  		lea	(a1,d2.w),a3
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E 2C9B                       		move.l	(a3)+,(a6)
0001D230 2C9B                       		move.l	(a3)+,(a6)
0001D232 2C9B                       		move.l	(a3)+,(a6)
0001D234 2C9B                       		move.l	(a3)+,(a6)
0001D236 2C9B                       		move.l	(a3)+,(a6)
0001D238 2C9B                       		move.l	(a3)+,(a6)
0001D23A 2C9B                       		move.l	(a3)+,(a6)
0001D23C 2C9B                       		move.l	(a3)+,(a6)
0001D23E 2C9B                       		move.l	(a3)+,(a6)
0001D240 2C9B                       		move.l	(a3)+,(a6)
0001D242                            
0001D242                            loc_1C92C:
0001D242 0680 0040 0000             		addi.l	#$400000,d0
0001D248 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D24C                            
0001D24C 4E75                       		rts	
0001D24E                            ; End of function Hud_Score
0001D24E                            
0001D24E                            ; ---------------------------------------------------------------------------
0001D24E                            ; Subroutine to	load countdown numbers on the continue screen
0001D24E                            ; ---------------------------------------------------------------------------
0001D24E                            
0001D24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D24E                            
0001D24E                            
0001D24E                            ContScrCounter:				; XREF: ContinueScreen
0001D24E 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D258 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D25E 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D264 7C01                       		moveq	#1,d6
0001D266 7800                       		moveq	#0,d4
0001D268 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D26C                            
0001D26C                            ContScr_Loop:
0001D26C 7400                       		moveq	#0,d2
0001D26E 261A                       		move.l	(a2)+,d3
0001D270                            
0001D270                            loc_1C95A:
0001D270 9283                       		sub.l	d3,d1
0001D272 6500                       		bcs.s	loc_1C962
0001D274 5242                       		addq.w	#1,d2
0001D276 60F8                       		bra.s	loc_1C95A
0001D278                            ; ===========================================================================
0001D278                            
0001D278                            loc_1C962:
0001D278 D283                       		add.l	d3,d1
0001D27A ED4A                       		lsl.w	#6,d2
0001D27C 47F1 2000                  		lea	(a1,d2.w),a3
0001D280 2C9B                       		move.l	(a3)+,(a6)
0001D282 2C9B                       		move.l	(a3)+,(a6)
0001D284 2C9B                       		move.l	(a3)+,(a6)
0001D286 2C9B                       		move.l	(a3)+,(a6)
0001D288 2C9B                       		move.l	(a3)+,(a6)
0001D28A 2C9B                       		move.l	(a3)+,(a6)
0001D28C 2C9B                       		move.l	(a3)+,(a6)
0001D28E 2C9B                       		move.l	(a3)+,(a6)
0001D290 2C9B                       		move.l	(a3)+,(a6)
0001D292 2C9B                       		move.l	(a3)+,(a6)
0001D294 2C9B                       		move.l	(a3)+,(a6)
0001D296 2C9B                       		move.l	(a3)+,(a6)
0001D298 2C9B                       		move.l	(a3)+,(a6)
0001D29A 2C9B                       		move.l	(a3)+,(a6)
0001D29C 2C9B                       		move.l	(a3)+,(a6)
0001D29E 2C9B                       		move.l	(a3)+,(a6)
0001D2A0 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D2A4                            
0001D2A4 4E75                       		rts	
0001D2A6                            ; End of function ContScrCounter
0001D2A6                            
0001D2A6                            ; ===========================================================================
0001D2A6                            ; ---------------------------------------------------------------------------
0001D2A6                            ; HUD counter sizes
0001D2A6                            ; ---------------------------------------------------------------------------
0001D2A6 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D2AA 0000 2710                  Hud_10000:	dc.l 10000
0001D2AE 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D2B2 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D2B6 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D2BA 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D2BE                            
0001D2BE                            ; ---------------------------------------------------------------------------
0001D2BE                            ; Subroutine to	load time numbers patterns
0001D2BE                            ; ---------------------------------------------------------------------------
0001D2BE                            
0001D2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2BE                            
0001D2BE                            
0001D2BE                            Hud_Mins:				; XREF: Hud_ChkTime
0001D2BE 45F9 0001 D2BA             		lea	(Hud_1).l,a2
0001D2C4 7C00                       		moveq	#0,d6
0001D2C6 6000                       		bra.s	loc_1C9BA
0001D2C8                            ; End of function Hud_Mins
0001D2C8                            
0001D2C8                            
0001D2C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2C8                            
0001D2C8                            
0001D2C8                            Hud_Secs:				; XREF: Hud_ChkTime
0001D2C8 45F9 0001 D2B6             		lea	(Hud_10).l,a2
0001D2CE 7C01                       		moveq	#1,d6
0001D2D0                            
0001D2D0                            loc_1C9BA:
0001D2D0 7800                       		moveq	#0,d4
0001D2D2 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2D6                            
0001D2D6                            Hud_TimeLoop:
0001D2D6 7400                       		moveq	#0,d2
0001D2D8 261A                       		move.l	(a2)+,d3
0001D2DA                            
0001D2DA                            loc_1C9C4:
0001D2DA 9283                       		sub.l	d3,d1
0001D2DC 6500                       		bcs.s	loc_1C9CC
0001D2DE 5242                       		addq.w	#1,d2
0001D2E0 60F8                       		bra.s	loc_1C9C4
0001D2E2                            ; ===========================================================================
0001D2E2                            
0001D2E2                            loc_1C9CC:
0001D2E2 D283                       		add.l	d3,d1
0001D2E4 4A42                       		tst.w	d2
0001D2E6 6700                       		beq.s	loc_1C9D6
0001D2E8 383C 0001                  		move.w	#1,d4
0001D2EC                            
0001D2EC                            loc_1C9D6:
0001D2EC ED4A                       		lsl.w	#6,d2
0001D2EE 2D40 0004                  		move.l	d0,4(a6)
0001D2F2 47F1 2000                  		lea	(a1,d2.w),a3
0001D2F6 2C9B                       		move.l	(a3)+,(a6)
0001D2F8 2C9B                       		move.l	(a3)+,(a6)
0001D2FA 2C9B                       		move.l	(a3)+,(a6)
0001D2FC 2C9B                       		move.l	(a3)+,(a6)
0001D2FE 2C9B                       		move.l	(a3)+,(a6)
0001D300 2C9B                       		move.l	(a3)+,(a6)
0001D302 2C9B                       		move.l	(a3)+,(a6)
0001D304 2C9B                       		move.l	(a3)+,(a6)
0001D306 2C9B                       		move.l	(a3)+,(a6)
0001D308 2C9B                       		move.l	(a3)+,(a6)
0001D30A 2C9B                       		move.l	(a3)+,(a6)
0001D30C 2C9B                       		move.l	(a3)+,(a6)
0001D30E 2C9B                       		move.l	(a3)+,(a6)
0001D310 2C9B                       		move.l	(a3)+,(a6)
0001D312 2C9B                       		move.l	(a3)+,(a6)
0001D314 2C9B                       		move.l	(a3)+,(a6)
0001D316 0680 0040 0000             		addi.l	#$400000,d0
0001D31C 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D320                            
0001D320 4E75                       		rts	
0001D322                            ; End of function Hud_Secs
0001D322                            
0001D322                            ; ---------------------------------------------------------------------------
0001D322                            ; Subroutine to	load time/ring bonus numbers patterns
0001D322                            ; ---------------------------------------------------------------------------
0001D322                            
0001D322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D322                            
0001D322                            
0001D322                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D322 45F9 0001 D2AE             		lea	(Hud_1000).l,a2
0001D328 7C03                       		moveq	#3,d6
0001D32A 7800                       		moveq	#0,d4
0001D32C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D330                            
0001D330                            Hud_BonusLoop:
0001D330 7400                       		moveq	#0,d2
0001D332 261A                       		move.l	(a2)+,d3
0001D334                            
0001D334                            loc_1CA1E:
0001D334 9283                       		sub.l	d3,d1
0001D336 6500                       		bcs.s	loc_1CA26
0001D338 5242                       		addq.w	#1,d2
0001D33A 60F8                       		bra.s	loc_1CA1E
0001D33C                            ; ===========================================================================
0001D33C                            
0001D33C                            loc_1CA26:
0001D33C D283                       		add.l	d3,d1
0001D33E 4A42                       		tst.w	d2
0001D340 6700                       		beq.s	loc_1CA30
0001D342 383C 0001                  		move.w	#1,d4
0001D346                            
0001D346                            loc_1CA30:
0001D346 4A44                       		tst.w	d4
0001D348 6700                       		beq.s	Hud_ClrBonus
0001D34A ED4A                       		lsl.w	#6,d2
0001D34C 47F1 2000                  		lea	(a1,d2.w),a3
0001D350 2C9B                       		move.l	(a3)+,(a6)
0001D352 2C9B                       		move.l	(a3)+,(a6)
0001D354 2C9B                       		move.l	(a3)+,(a6)
0001D356 2C9B                       		move.l	(a3)+,(a6)
0001D358 2C9B                       		move.l	(a3)+,(a6)
0001D35A 2C9B                       		move.l	(a3)+,(a6)
0001D35C 2C9B                       		move.l	(a3)+,(a6)
0001D35E 2C9B                       		move.l	(a3)+,(a6)
0001D360 2C9B                       		move.l	(a3)+,(a6)
0001D362 2C9B                       		move.l	(a3)+,(a6)
0001D364 2C9B                       		move.l	(a3)+,(a6)
0001D366 2C9B                       		move.l	(a3)+,(a6)
0001D368 2C9B                       		move.l	(a3)+,(a6)
0001D36A 2C9B                       		move.l	(a3)+,(a6)
0001D36C 2C9B                       		move.l	(a3)+,(a6)
0001D36E 2C9B                       		move.l	(a3)+,(a6)
0001D370                            
0001D370                            loc_1CA5A:
0001D370 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D374                            
0001D374 4E75                       		rts	
0001D376                            ; ===========================================================================
0001D376                            
0001D376                            Hud_ClrBonus:
0001D376 7A0F                       		moveq	#$F,d5
0001D378                            
0001D378                            Hud_ClrBonusLoop:
0001D378 2CBC 0000 0000             		move.l	#0,(a6)
0001D37E 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D382                            
0001D382 60EC                       		bra.s	loc_1CA5A
0001D384                            ; End of function Hud_TimeRingBonus
0001D384                            
0001D384                            ; ---------------------------------------------------------------------------
0001D384                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D384                            ; ---------------------------------------------------------------------------
0001D384                            
0001D384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D384                            
0001D384                            
0001D384                            Hud_Lives:				; XREF: Hud_ChkLives
0001D384 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D38A 7200                       		moveq	#0,d1
0001D38C 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D390 45F9 0001 D2B6             		lea	(Hud_10).l,a2
0001D396 7C01                       		moveq	#1,d6
0001D398 7800                       		moveq	#0,d4
0001D39A 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D39E                            
0001D39E                            Hud_LivesLoop:
0001D39E 2D40 0004                  		move.l	d0,4(a6)
0001D3A2 7400                       		moveq	#0,d2
0001D3A4 261A                       		move.l	(a2)+,d3
0001D3A6                            
0001D3A6                            loc_1CA90:
0001D3A6 9283                       		sub.l	d3,d1
0001D3A8 6500                       		bcs.s	loc_1CA98
0001D3AA 5242                       		addq.w	#1,d2
0001D3AC 60F8                       		bra.s	loc_1CA90
0001D3AE                            ; ===========================================================================
0001D3AE                            
0001D3AE                            loc_1CA98:
0001D3AE D283                       		add.l	d3,d1
0001D3B0 4A42                       		tst.w	d2
0001D3B2 6700                       		beq.s	loc_1CAA2
0001D3B4 383C 0001                  		move.w	#1,d4
0001D3B8                            
0001D3B8                            loc_1CAA2:
0001D3B8 4A44                       		tst.w	d4
0001D3BA 6700                       		beq.s	Hud_ClrLives
0001D3BC                            
0001D3BC                            loc_1CAA6:
0001D3BC EB4A                       		lsl.w	#5,d2
0001D3BE 47F1 2000                  		lea	(a1,d2.w),a3
0001D3C2 2C9B                       		move.l	(a3)+,(a6)
0001D3C4 2C9B                       		move.l	(a3)+,(a6)
0001D3C6 2C9B                       		move.l	(a3)+,(a6)
0001D3C8 2C9B                       		move.l	(a3)+,(a6)
0001D3CA 2C9B                       		move.l	(a3)+,(a6)
0001D3CC 2C9B                       		move.l	(a3)+,(a6)
0001D3CE 2C9B                       		move.l	(a3)+,(a6)
0001D3D0 2C9B                       		move.l	(a3)+,(a6)
0001D3D2                            
0001D3D2                            loc_1CABC:
0001D3D2 0680 0040 0000             		addi.l	#$400000,d0
0001D3D8 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D3DC                            
0001D3DC 4E75                       		rts	
0001D3DE                            ; ===========================================================================
0001D3DE                            
0001D3DE                            Hud_ClrLives:
0001D3DE 4A46                       		tst.w	d6
0001D3E0 67DA                       		beq.s	loc_1CAA6
0001D3E2 7A07                       		moveq	#7,d5
0001D3E4                            
0001D3E4                            Hud_ClrLivesLoop:
0001D3E4 2CBC 0000 0000             		move.l	#0,(a6)
0001D3EA 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D3EE 60E2                       		bra.s	loc_1CABC
0001D3F0                            ; End of function Hud_Lives
0001D3F0                            
0001D3F0                            ; ===========================================================================
0001D3F0                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D6F0                            		even
0001D6F0                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D830                            		even
0001D830                            ; ===========================================================================
0001D830                            ; ---------------------------------------------------------------------------
0001D830                            ; When debug mode is currently in use
0001D830                            ; ---------------------------------------------------------------------------
0001D830                            
0001D830                            DebugMode:				; XREF: Obj01; Obj09
0001D830 7000                       		moveq	#0,d0
0001D832 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D836 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D83A 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D83E                            ; ===========================================================================
0001D83E 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D840 0000                       		dc.w Debug_Skip-Debug_Index
0001D842                            ; ===========================================================================
0001D842                            
0001D842                            Debug_Main:				; XREF: Debug_Index
0001D842 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D846 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D84C 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D852 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D858 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D85E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D864 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D86A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D870 117C 0000 001A             		move.b	#0,$1A(a0)
0001D876 117C 0000 001C             		move.b	#0,$1C(a0)
0001D87C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D882 6600                       		bne.s	Debug_Zone	; if not, branch
0001D884 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D88A 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D890 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D892 6000                       		bra.s	Debug_UseList
0001D894                            ; ===========================================================================
0001D894                            
0001D894                            Debug_Zone:
0001D894 7000                       		moveq	#0,d0
0001D896 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D89A                            
0001D89A                            Debug_UseList:
0001D89A 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8A0 D040                       		add.w	d0,d0
0001D8A2 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8A6 3C1A                       		move.w	(a2)+,d6
0001D8A8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D8AC 6200                       		bhi.s	loc_1CF9E
0001D8AE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D8B4                            
0001D8B4                            loc_1CF9E:
0001D8B4 6100 0000                  		bsr.w	Debug_ShowItem
0001D8B8 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8BE 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D8C4                            
0001D8C4                            Debug_Skip:				; XREF: Debug_Index
0001D8C4 7006                       		moveq	#6,d0
0001D8C6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D8CC 6700                       		beq.s	loc_1CFBE
0001D8CE 7000                       		moveq	#0,d0
0001D8D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D8D4                            
0001D8D4                            loc_1CFBE:
0001D8D4 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8DA D040                       		add.w	d0,d0
0001D8DC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8E0 3C1A                       		move.w	(a2)+,d6
0001D8E2 6100 0000                  		bsr.w	Debug_Control
0001D8E6 4EF9 0000 DDFE             		jmp	DisplaySprite
0001D8EC                            
0001D8EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8EC                            
0001D8EC                            
0001D8EC                            Debug_Control:
0001D8EC 7800                       		moveq	#0,d4
0001D8EE 323C 0001                  		move.w	#1,d1
0001D8F2 1838 F605                  		move.b	($FFFFF605).w,d4
0001D8F6 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D8FA 6600                       		bne.s	loc_1D018	; if yes, branch
0001D8FC 1038 F604                  		move.b	($FFFFF604).w,d0
0001D900 0240 000F                  		andi.w	#$F,d0
0001D904 6600                       		bne.s	loc_1D000
0001D906 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D90C 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D912 6000 0000                  		bra.w	Debug_BackItem
0001D916                            ; ===========================================================================
0001D916                            
0001D916                            loc_1D000:
0001D916 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D91A 6600                       		bne.s	loc_1D01C
0001D91C 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D922 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D926 6600                       		bne.s	loc_1D018
0001D928 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D92E                            
0001D92E                            loc_1D018:
0001D92E 1838 F604                  		move.b	($FFFFF604).w,d4
0001D932                            
0001D932                            loc_1D01C:
0001D932 7200                       		moveq	#0,d1
0001D934 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D938 5241                       		addq.w	#1,d1
0001D93A 4841                       		swap	d1
0001D93C E881                       		asr.l	#4,d1
0001D93E 2428 000C                  		move.l	$C(a0),d2
0001D942 2628 0008                  		move.l	8(a0),d3
0001D946 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D94A 6700                       		beq.s	loc_1D03C	; if not, branch
0001D94C 9481                       		sub.l	d1,d2
0001D94E 6400                       		bcc.s	loc_1D03C
0001D950 7400                       		moveq	#0,d2
0001D952                            
0001D952                            loc_1D03C:
0001D952 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D956 6700                       		beq.s	loc_1D052	; if not, branch
0001D958 D481                       		add.l	d1,d2
0001D95A 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D960 6500                       		bcs.s	loc_1D052
0001D962 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D968                            
0001D968                            loc_1D052:
0001D968 0804 0002                  		btst	#2,d4
0001D96C 6700                       		beq.s	loc_1D05E
0001D96E 9681                       		sub.l	d1,d3
0001D970 6400                       		bcc.s	loc_1D05E
0001D972 7600                       		moveq	#0,d3
0001D974                            
0001D974                            loc_1D05E:
0001D974 0804 0003                  		btst	#3,d4
0001D978 6700                       		beq.s	loc_1D066
0001D97A D681                       		add.l	d1,d3
0001D97C                            
0001D97C                            loc_1D066:
0001D97C 2142 000C                  		move.l	d2,$C(a0)
0001D980 2143 0008                  		move.l	d3,8(a0)
0001D984                            
0001D984                            Debug_BackItem:
0001D984 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D98A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D98C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D992 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D994 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D998 6400                       		bcc.s	Debug_NoLoop
0001D99A DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D99E 6000                       		bra.s	Debug_NoLoop
0001D9A0                            ; ===========================================================================
0001D9A0                            
0001D9A0                            Debug_NextItem:
0001D9A0 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D9A6 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D9A8 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D9AC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D9B0 6200                       		bhi.s	Debug_NoLoop
0001D9B2 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D9B8                            
0001D9B8                            Debug_NoLoop:
0001D9B8 6000 0000                  		bra.w	Debug_ShowItem
0001D9BC                            ; ===========================================================================
0001D9BC                            
0001D9BC                            Debug_MakeItem:
0001D9BC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D9C2 6700                       		beq.s	Debug_Exit	; if not, branch
0001D9C4 4EB9 0000 E284             		jsr	SingleObjLoad
0001D9CA 6600                       		bne.s	Debug_Exit
0001D9CC 3368 0008 0008             		move.w	8(a0),8(a1)
0001D9D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D9D8 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D9DC 1368 0001 0001             		move.b	1(a0),1(a1)
0001D9E2 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D9E8 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D9EE 7000                       		moveq	#0,d0
0001D9F0 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9F4 E748                       		lsl.w	#3,d0
0001D9F6 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D9FC 4E75                       		rts	
0001D9FE                            ; ===========================================================================
0001D9FE                            
0001D9FE                            Debug_Exit:
0001D9FE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA04 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DA06 7000                       		moveq	#0,d0
0001DA08 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DA0C 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA14 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA1A 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DA1E 3140 000A                  		move.w	d0,$A(a0)
0001DA22 3140 000E                  		move.w	d0,$E(a0)
0001DA26 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DA2C 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DA32 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DA38 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DA3A 4278 F780                  		clr.w	($FFFFF780).w
0001DA3E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DA44 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA4C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA52 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DA58 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DA5E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DA64                            
0001DA64                            Debug_DoNothing:
0001DA64 4E75                       		rts	
0001DA66                            ; End of function Debug_Control
0001DA66                            
0001DA66                            
0001DA66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA66                            
0001DA66                            
0001DA66                            Debug_ShowItem:				; XREF: Debug_Main
0001DA66 7000                       		moveq	#0,d0
0001DA68 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA6C E748                       		lsl.w	#3,d0
0001DA6E 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DA74 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DA7A 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DA80 4E75                       		rts	
0001DA82                            ; End of function Debug_ShowItem
0001DA82                            
0001DA82                            ; ===========================================================================
0001DA82                            ; ---------------------------------------------------------------------------
0001DA82                            ; Debug	list pointers
0001DA82                            ; ---------------------------------------------------------------------------
0001DA82                            DebugList:
0001DA82                            	include "_inc\Debug list pointers.asm"
0001DA82                            ; ---------------------------------------------------------------------------
0001DA82                            ; Debug	list pointers
0001DA82                            ; ---------------------------------------------------------------------------
0001DA82 0000                       	dc.w Debug_GHZ-DebugList
0001DA84 0000                       	dc.w Debug_LZ-DebugList
0001DA86 0000                       	dc.w Debug_MZ-DebugList
0001DA88 0000                       	dc.w Debug_SLZ-DebugList
0001DA8A 0000                       	dc.w Debug_SYZ-DebugList
0001DA8C 0000                       	dc.w Debug_SBZ-DebugList
0001DA8E 0000                       	dc.w Debug_Ending-DebugList
0001DA8E 0000                       	dc.w Debug_Ending-DebugList
0001DA90                            
0001DA90                            ; ---------------------------------------------------------------------------
0001DA90                            ; Debug	list - Green Hill
0001DA90                            ; ---------------------------------------------------------------------------
0001DA90                            Debug_GHZ:
0001DA90                            	include "_inc\Debug list - GHZ.asm"
0001DA90                            ; ---------------------------------------------------------------------------
0001DA90                            ; Debug	list - Green Hill
0001DA90                            ; ---------------------------------------------------------------------------
0001DA90 0010                       	dc.w $10			; number of items in list
0001DA92 2500 A65C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DA96 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DA9A 2600 AC62                  	dc.l Map_obj26+$26000000
0001DA9E 0000 0680                  	dc.b 0,	0, 6, $80
0001DAA2 1F00 9E54                  	dc.l Map_obj1F+$1F000000
0001DAA6 0000 0400                  	dc.b 0,	0, 4, 0
0001DAAA 2200 A110                  	dc.l Map_obj22+$22000000
0001DAAE 0000 0444                  	dc.b 0,	0, 4, $44
0001DAB2 2B00 B2D6                  	dc.l Map_obj2B+$2B000000
0001DAB6 0000 047B                  	dc.b 0,	0, 4, $7B
0001DABA 3600 D7E6                  	dc.l Map_obj36+$36000000
0001DABE 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAC2 1800 8770                  	dc.l Map_obj18+$18000000
0001DAC6 0000 4000                  	dc.b 0,	0, $40,	0
0001DACA 3B00 D90C                  	dc.l Map_obj3B+$3B000000
0001DACE 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DAD2 4000 FF98                  	dc.l Map_obj40+$40000000
0001DAD6 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DADA 4100 E512                  	dc.l Map_obj41+$41000000
0001DADE 0000 0523                  	dc.b 0,	0, 5, $23
0001DAE2 4200 E738                  	dc.l Map_obj42+$42000000
0001DAE6 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DAEA 4400 EA46                  	dc.l Map_obj44+$44000000
0001DAEE 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DAF2 1900 8870                  	dc.l Map_obj48+$19000000
0001DAF6 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DAFA 7901 79E6                  	dc.l Map_obj79+$79000000
0001DAFE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB02 4B00 A69C                  	dc.l Map_obj4B+$4B000000
0001DB06 0000 2400                  	dc.b 0,	0, $24,	0
0001DB0A 7D01 7B36                  	dc.l Map_obj7D+$7D000000
0001DB0E 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DB12                            	even
0001DB12                            	even
0001DB12                            
0001DB12                            ; ---------------------------------------------------------------------------
0001DB12                            ; Debug	list - Labyrinth
0001DB12                            ; ---------------------------------------------------------------------------
0001DB12                            Debug_LZ:
0001DB12                            	include "_inc\Debug list - LZ.asm"
0001DB12                            ; ---------------------------------------------------------------------------
0001DB12                            ; Debug	list - Labyrinth
0001DB12                            ; ---------------------------------------------------------------------------
0001DB12 0019                       	dc.w $19
0001DB14 2500 A65C                  	dc.l Map_obj25+$25000000
0001DB18 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB1C 2600 AC62                  	dc.l Map_obj26+$26000000
0001DB20 0000 0680                  	dc.b 0,	0, 6, $80
0001DB24 4100 E512                  	dc.l Map_obj41+$41000000
0001DB28 0000 0523                  	dc.b 0,	0, 5, $23
0001DB2C 2C00 B386                  	dc.l Map_obj2C+$2C000000
0001DB30 0800 2486                  	dc.b 8,	0, $24,	$86
0001DB34 2D00 B57A                  	dc.l Map_obj2D+$2D000000
0001DB38 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DB3C 1601 276C                  	dc.l Map_obj16+$16000000
0001DB40 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DB44 1601 276C                  	dc.l Map_obj16+$16000000
0001DB48 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB4C 3300 CA32                  	dc.l Map_obj33+$33000000
0001DB50 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB54 3200 C5F2                  	dc.l Map_obj32+$32000000
0001DB58 0000 0513                  	dc.b 0,	0, 5, $13
0001DB5C 3600 D7E6                  	dc.l Map_obj36+$36000000
0001DB60 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB64 5201 088E                  	dc.l Map_obj52a+$52000000
0001DB68 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DB6C 6101 2994                  	dc.l Map_obj61+$61000000
0001DB70 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DB74 6101 2994                  	dc.l Map_obj61+$61000000
0001DB78 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DB7C 6101 2994                  	dc.l Map_obj61+$61000000
0001DB80 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DB84 6201 2AE8                  	dc.l Map_obj62+$62000000
0001DB88 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DB8C 6101 2994                  	dc.l Map_obj61+$61000000
0001DB90 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DB94 6101 2994                  	dc.l Map_obj61+$61000000
0001DB98 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DB9C 6301 2E4A                  	dc.l Map_obj63+$63000000
0001DBA0 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DBA4 6001 26B6                  	dc.l Map_obj60+$60000000
0001DBA8 0000 0467                  	dc.b 0,	0, 4, $67
0001DBAC 6401 3190                  	dc.l Map_obj64+$64000000
0001DBB0 8413 8348                  	dc.b $84, $13, $83, $48
0001DBB4 6501 3318                  	dc.l Map_obj65+$65000000
0001DBB8 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DBBC 6501 3318                  	dc.l Map_obj65+$65000000
0001DBC0 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DBC4 0B01 1B06                  	dc.l Map_obj0B+$B000000
0001DBC8 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DBCC 0C01 1BD6                  	dc.l Map_obj0C+$C000000
0001DBD0 0200 4328                  	dc.b 2,	0, $43,	$28
0001DBD4 7901 79E6                  	dc.l Map_obj79+$79000000
0001DBD8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBDC                            	even
0001DBDC                            	even
0001DBDC                            
0001DBDC                            ; ---------------------------------------------------------------------------
0001DBDC                            ; Debug	list - Marble
0001DBDC                            ; ---------------------------------------------------------------------------
0001DBDC                            Debug_MZ:
0001DBDC                            	include "_inc\Debug list - MZ.asm"
0001DBDC                            ; ---------------------------------------------------------------------------
0001DBDC                            ; Debug	list - Marble
0001DBDC                            ; ---------------------------------------------------------------------------
0001DBDC 0012                       	dc.w $12
0001DBDE 2500 A65C                  	dc.l Map_obj25+$25000000
0001DBE2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBE6 2600 AC62                  	dc.l Map_obj26+$26000000
0001DBEA 0000 0680                  	dc.b 0,	0, 6, $80
0001DBEE 2200 A110                  	dc.l Map_obj22+$22000000
0001DBF2 0000 0444                  	dc.b 0,	0, 4, $44
0001DBF6 3600 D7E6                  	dc.l Map_obj36+$36000000
0001DBFA 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBFE 4100 E512                  	dc.l Map_obj41+$41000000
0001DC02 0000 0523                  	dc.b 0,	0, 5, $23
0001DC06 1300 BABC                  	dc.l Map_obj14+$13000000
0001DC0A 0000 0345                  	dc.b 0,	0, 3, $45
0001DC0E 4600 F0F8                  	dc.l Map_obj46+$46000000
0001DC12 0000 4000                  	dc.b 0,	0, $40,	0
0001DC16 4C00 FA44                  	dc.l Map_obj4C+$4C000000
0001DC1A 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC1E 4E00 FD28                  	dc.l Map_obj4E+$4E000000
0001DC22 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC26 3300 CA32                  	dc.l Map_obj33+$33000000
0001DC2A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC2E 5001 0126                  	dc.l Map_obj50+$50000000
0001DC32 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC36 5101 05C2                  	dc.l Map_obj51+$51000000
0001DC3A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC3E 5201 0838                  	dc.l Map_obj52+$52000000
0001DC42 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DC46 5300 8E08                  	dc.l Map_obj53+$53000000
0001DC4A 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DC4E 5400 FA0A                  	dc.l Map_obj54+$54000000
0001DC52 0000 8680                  	dc.b 0,	0, $86,	$80
0001DC56 5501 0A2C                  	dc.l Map_obj55+$55000000
0001DC5A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC5E 7801 7660                  	dc.l Map_obj78+$78000000
0001DC62 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC66 7901 79E6                  	dc.l Map_obj79+$79000000
0001DC6A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC6E                            	even
0001DC6E                            	even
0001DC6E                            
0001DC6E                            ; ---------------------------------------------------------------------------
0001DC6E                            ; Debug	list - Star Light
0001DC6E                            ; ---------------------------------------------------------------------------
0001DC6E                            Debug_SLZ:
0001DC6E                            	include "_inc\Debug list - SLZ.asm"
0001DC6E                            ; ---------------------------------------------------------------------------
0001DC6E                            ; Debug	list - Star Light
0001DC6E                            ; ---------------------------------------------------------------------------
0001DC6E 000F                       	dc.w $F
0001DC70 2500 A65C                  	dc.l Map_obj25+$25000000
0001DC74 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC78 2600 AC62                  	dc.l Map_obj26+$26000000
0001DC7C 0000 0680                  	dc.b 0,	0, 6, $80
0001DC80 5901 152E                  	dc.l Map_obj59+$59000000
0001DC84 0000 4000                  	dc.b 0,	0, $40,	0
0001DC88 5300 8E08                  	dc.l Map_obj53+$53000000
0001DC8C 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DC90 1800 87CE                  	dc.l Map_obj18b+$18000000
0001DC94 0000 4000                  	dc.b 0,	0, $40,	0
0001DC98 5A01 1668                  	dc.l Map_obj5A+$5A000000
0001DC9C 0000 4000                  	dc.b 0,	0, $40,	0
0001DCA0 5B01 1820                  	dc.l Map_obj5B+$5B000000
0001DCA4 0000 4000                  	dc.b 0,	0, $40,	0
0001DCA8 5D01 1DF0                  	dc.l Map_obj5D+$5D000000
0001DCAC 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DCB0 5E01 2182                  	dc.l Map_obj5E+$5E000000
0001DCB4 0000 0374                  	dc.b 0,	0, 3, $74
0001DCB8 4100 E512                  	dc.l Map_obj41+$41000000
0001DCBC 0000 0523                  	dc.b 0,	0, 5, $23
0001DCC0 1300 BABC                  	dc.l Map_obj14+$13000000
0001DCC4 0000 0480                  	dc.b 0,	0, 4, $80
0001DCC8 1C00 8F18                  	dc.l Map_obj1C+$1C000000
0001DCCC 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DCD0 5F01 2400                  	dc.l Map_obj5F+$5F000000
0001DCD4 0000 0400                  	dc.b 0,	0, 4, 0
0001DCD8 6001 26B6                  	dc.l Map_obj60+$60000000
0001DCDC 0000 2429                  	dc.b 0,	0, $24,	$29
0001DCE0 7901 79E6                  	dc.l Map_obj79+$79000000
0001DCE4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCE8                            	even
0001DCE8                            	even
0001DCE8                            
0001DCE8                            ; ---------------------------------------------------------------------------
0001DCE8                            ; Debug	list - Spring Yard
0001DCE8                            ; ---------------------------------------------------------------------------
0001DCE8                            Debug_SYZ:
0001DCE8                            	include "_inc\Debug list - SYZ.asm"
0001DCE8                            ; ---------------------------------------------------------------------------
0001DCE8                            ; Debug	list - Spring Yard
0001DCE8                            ; ---------------------------------------------------------------------------
0001DCE8 000F                       	dc.w $F
0001DCEA 2500 A65C                  	dc.l Map_obj25+$25000000
0001DCEE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCF2 2600 AC62                  	dc.l Map_obj26+$26000000
0001DCF6 0000 0680                  	dc.b 0,	0, 6, $80
0001DCFA 3600 D7E6                  	dc.l Map_obj36+$36000000
0001DCFE 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD02 4100 E512                  	dc.l Map_obj41+$41000000
0001DD06 0000 0523                  	dc.b 0,	0, 5, $23
0001DD0A 4300 E998                  	dc.l Map_obj43+$43000000
0001DD0E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DD12 1200 F176                  	dc.l Map_obj12+$12000000
0001DD16 0000 0000                  	dc.b 0,	0, 0, 0
0001DD1A 4700 F2F2                  	dc.l Map_obj47+$47000000
0001DD1E 0000 0380                  	dc.b 0,	0, 3, $80
0001DD22 1F00 9E54                  	dc.l Map_obj1F+$1F000000
0001DD26 0000 0400                  	dc.b 0,	0, 4, 0
0001DD2A 2200 A110                  	dc.l Map_obj22+$22000000
0001DD2E 0000 0444                  	dc.b 0,	0, 4, $44
0001DD32 5001 0126                  	dc.l Map_obj50+$50000000
0001DD36 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DD3A 1800 87BC                  	dc.l Map_obj18a+$18000000
0001DD3E 0000 4000                  	dc.b 0,	0, $40,	0
0001DD42 5601 0EEE                  	dc.l Map_obj56+$56000000
0001DD46 0000 4000                  	dc.b 0,	0, $40,	0
0001DD4A 3200 C5F2                  	dc.l Map_obj32+$32000000
0001DD4E 0000 0513                  	dc.b 0,	0, 5, $13
0001DD52 7801 7660                  	dc.l Map_obj78+$78000000
0001DD56 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DD5A 7901 79E6                  	dc.l Map_obj79+$79000000
0001DD5E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD62                            	even
0001DD62                            	even
0001DD62                            
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Debug	list - Scrap Brain
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            Debug_SBZ:
0001DD62                            	include "_inc\Debug list - SBZ.asm"
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Debug	list - Scrap Brain
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62 001D                       	dc.w $1D
0001DD64 2500 A65C                  	dc.l Map_obj25+$25000000
0001DD68 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD6C 2600 AC62                  	dc.l Map_obj26+$26000000
0001DD70 0000 0680                  	dc.b 0,	0, 6, $80
0001DD74 5F01 2400                  	dc.l Map_obj5F+$5F000000
0001DD78 0000 0400                  	dc.b 0,	0, 4, 0
0001DD7C 6001 26B6                  	dc.l Map_obj60+$60000000
0001DD80 0000 0429                  	dc.b 0,	0, 4, $29
0001DD84 7801 7660                  	dc.l Map_obj78+$78000000
0001DD88 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DD8C 1501 128A                  	dc.l Map_obj15b+$15000000
0001DD90 0702 4391                  	dc.b 7,	2, $43,	$91
0001DD94 6701 5F74                  	dc.l Map_obj67+$67000000
0001DD98 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DD9C 5201 0838                  	dc.l Map_obj52+$52000000
0001DDA0 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DDA4 3200 C5F2                  	dc.l Map_obj32+$32000000
0001DDA8 0000 0513                  	dc.b 0,	0, 5, $13
0001DDAC 6901 61CE                  	dc.l Map_obj69+$69000000
0001DDB0 0300 4492                  	dc.b 3,	0, $44,	$92
0001DDB4 6901 6228                  	dc.l Map_obj69a+$69000000
0001DDB8 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DDBC 6A01 6486                  	dc.l Map_obj6A+$6A000000
0001DDC0 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DDC4 5300 8E08                  	dc.l Map_obj53+$53000000
0001DDC8 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DDCC 5201 0838                  	dc.l Map_obj52+$52000000
0001DDD0 3903 4460                  	dc.b $39, 3, $44, $60
0001DDD4 6B01 6856                  	dc.l Map_obj6B+$6B000000
0001DDD8 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DDDC 2A00 90AE                  	dc.l Map_obj2A+$2A000000
0001DDE0 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DDE4 6B01 6856                  	dc.l Map_obj6B+$6B000000
0001DDE8 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DDEC 6A01 6486                  	dc.l Map_obj6A+$6A000000
0001DDF0 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DDF4 6B01 6856                  	dc.l Map_obj6B+$6B000000
0001DDF8 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DDFC 6A01 6486                  	dc.l Map_obj6A+$6A000000
0001DE00 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DE04 6B01 6856                  	dc.l Map_obj6B+$6B000000
0001DE08 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DE0C 6C01 6A18                  	dc.l Map_obj6C+$6C000000
0001DE10 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DE14 6D00 EDE8                  	dc.l Map_obj6D+$6D000000
0001DE18 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DE1C 6D00 EDE8                  	dc.l Map_obj6D+$6D000000
0001DE20 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DE24 6E01 6ACE                  	dc.l Map_obj6E+$6E000000
0001DE28 0400 047E                  	dc.b 4,	0, 4, $7E
0001DE2C 7001 6F24                  	dc.l Map_obj70+$70000000
0001DE30 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DE34 7101 1C96                  	dc.l Map_obj71+$71000000
0001DE38 1100 8680                  	dc.b $11, 0, $86, $80
0001DE3C 1E00 956C                  	dc.l Map_obj1E+$1E000000
0001DE40 0400 2302                  	dc.b 4,	0, $23,	2
0001DE44 7901 79E6                  	dc.l Map_obj79+$79000000
0001DE48 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE4C                            	even
0001DE4C                            	even
0001DE4C                            
0001DE4C                            ; ---------------------------------------------------------------------------
0001DE4C                            ; Debug	list - ending sequence / special stage
0001DE4C                            ; ---------------------------------------------------------------------------
0001DE4C                            Debug_Ending:
0001DE4C                            	include "_inc\Debug list - Ending and SS.asm"
0001DE4C                            ; ---------------------------------------------------------------------------
0001DE4C                            ; Debug	list - ending sequence / special stage
0001DE4C                            ; ---------------------------------------------------------------------------
0001DE4C 000D                       	dc.w $D
0001DE4E 2500 A65C                  	dc.l Map_obj25+$25000000
0001DE52 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE56 4700 F2F2                  	dc.l Map_obj47+$47000000
0001DE5A 0000 0380                  	dc.b 0,	0, 3, $80
0001DE5E 2800 9B86                  	dc.l Map_obj28a+$28000000
0001DE62 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DE66 2800 9B86                  	dc.l Map_obj28a+$28000000
0001DE6A 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DE6E 2800 9B86                  	dc.l Map_obj28a+$28000000
0001DE72 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DE76 2800 9B6E                  	dc.l Map_obj28+$28000000
0001DE7A 0D00 0553                  	dc.b $D, 0, 5, $53
0001DE7E 2800 9B6E                  	dc.l Map_obj28+$28000000
0001DE82 0E00 0553                  	dc.b $E, 0, 5, $53
0001DE86 2800 9B6E                  	dc.l Map_obj28+$28000000
0001DE8A 0F00 0573                  	dc.b $F, 0, 5, $73
0001DE8E 2800 9B6E                  	dc.l Map_obj28+$28000000
0001DE92 1000 0573                  	dc.b $10, 0, 5,	$73
0001DE96 2800 9B86                  	dc.l Map_obj28a+$28000000
0001DE9A 1100 0585                  	dc.b $11, 0, 5,	$85
0001DE9E 2800 9B9E                  	dc.l Map_obj28b+$28000000
0001DEA2 1200 0593                  	dc.b $12, 0, 5,	$93
0001DEA6 2800 9B86                  	dc.l Map_obj28a+$28000000
0001DEAA 1300 0565                  	dc.b $13, 0, 5,	$65
0001DEAE 2800 9B9E                  	dc.l Map_obj28b+$28000000
0001DEB2 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DEB6                            	even
0001DEB6                            	even
0001DEB6                            
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6                            ; Main level load blocks
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6                            MainLoadBlocks:
0001DEB6                            	include "_inc\Main level load blocks.asm"
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6                            ; Main level load blocks
0001DEB6                            ;
0001DEB6                            ; ===FORMAT===
0001DEB6                            ; level	patterns + (1st	PLC num	* 10^6)
0001DEB6                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DEB6                            ; 256x256 mappings
0001DEB6                            ; blank, music (unused), pal index (unused), pal index
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DEBA 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DEBE 0000 0000                  	dc.l Blk256_GHZ
0001DEC2 0081 0404                  	dc.b 0,	$81, 4,	4
0001DEC6 0000 0000                  	dc.l Nem_LZ+$6000000
0001DECA 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DECE 0000 0000                  	dc.l Blk256_LZ
0001DED2 0082 0505                  	dc.b 0,	$82, 5,	5
0001DED6 0000 0000                  	dc.l Nem_MZ+$8000000
0001DEDA 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DEDE 0000 0000                  	dc.l Blk256_MZ
0001DEE2 0083 0606                  	dc.b 0,	$83, 6,	6
0001DEE6 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DEEA 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DEEE 0000 0000                  	dc.l Blk256_SLZ
0001DEF2 0084 0707                  	dc.b 0,	$84, 7,	7
0001DEF6 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DEFA 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DEFE 0000 0000                  	dc.l Blk256_SYZ
0001DF02 0085 0808                  	dc.b 0,	$85, 8,	8
0001DF06 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DF0A 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DF0E 0000 0000                  	dc.l Blk256_SBZ
0001DF12 0086 0909                  	dc.b 0,	$86, 9,	9
0001DF16 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DF1A 0000 0000                  	dc.l Blk16_GHZ
0001DF1E 0000 0000                  	dc.l Blk256_GHZ
0001DF22 0086 1313                  	dc.b 0,	$86, $13, $13
0001DF26                            	even
0001DF26                            	even
0001DF26                            
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26                            ; Pattern load cues
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26                            ArtLoadCues:
0001DF26                            	include "_inc\Pattern load cues.asm"
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26                            ; Pattern load cues - index
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DF2A 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DF2E 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DF32 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DF36 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DF3A 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DF3E 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DF42 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DF46 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DF4A 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DF4E 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DF52 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DF56 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DF5A 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DF5E 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DF62 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DF66 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DF68                            ; ---------------------------------------------------------------------------
0001DF68                            ; Pattern load cues - standard block 1
0001DF68                            ; ---------------------------------------------------------------------------
0001DF68 0004                       PLC_Main:	dc.w 4
0001DF6A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DF6E F400                       		dc.w $F400
0001DF70 0000 0000                  		dc.l Nem_Hud		; HUD
0001DF74 D940                       		dc.w $D940
0001DF76 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DF7A FA80                       		dc.w $FA80
0001DF7C 0000 0000                  		dc.l Nem_Ring		; rings
0001DF80 F640                       		dc.w $F640
0001DF82 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DF86 F2E0                       		dc.w $F2E0
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88                            ; Pattern load cues - standard block 2
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88 0002                       PLC_Main2:	dc.w 2
0001DF8A 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DF8E D000                       		dc.w $D000
0001DF90 0000 0000                  		dc.l Nem_Shield		; shield
0001DF94 A820                       		dc.w $A820
0001DF96 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DF9A AB80                       		dc.w $AB80
0001DF9C                            ; ---------------------------------------------------------------------------
0001DF9C                            ; Pattern load cues - explosion
0001DF9C                            ; ---------------------------------------------------------------------------
0001DF9C 0000                       PLC_Explode:	dc.w 0
0001DF9E 0000 0000                  		dc.l Nem_Explode	; explosion
0001DFA2 B400                       		dc.w $B400
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4                            ; Pattern load cues - game/time	over
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4 0000                       PLC_GameOver:	dc.w 0
0001DFA6 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DFAA ABC0                       		dc.w $ABC0
0001DFAC                            ; ---------------------------------------------------------------------------
0001DFAC                            ; Pattern load cues - Green Hill
0001DFAC                            ; ---------------------------------------------------------------------------
0001DFAC 000B                       PLC_GHZ:	dc.w $B
0001DFAE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DFB2 0000                       		dc.w 0
0001DFB4 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DFB8 39A0                       		dc.w $39A0
0001DFBA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DFBE 6B00                       		dc.w $6B00
0001DFC0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DFC4 7A00                       		dc.w $7A00
0001DFC6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DFCA 8000                       		dc.w $8000
0001DFCC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DFD0 8880                       		dc.w $8880
0001DFD2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DFD6 8F60                       		dc.w $8F60
0001DFD8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DFDC 9360                       		dc.w $9360
0001DFDE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DFE2 9E00                       		dc.w $9E00
0001DFE4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFE8 A360                       		dc.w $A360
0001DFEA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFEE A460                       		dc.w $A460
0001DFF0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFF4 A660                       		dc.w $A660
0001DFF6 0005                       PLC_GHZ2:	dc.w 5
0001DFF8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DFFC 7000                       		dc.w $7000
0001DFFE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E002 71C0                       		dc.w $71C0
0001E004 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E008 7300                       		dc.w $7300
0001E00A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E00E 7540                       		dc.w $7540
0001E010 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E014 A1E0                       		dc.w $A1E0
0001E016 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E01A 6980                       		dc.w $6980
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C                            ; Pattern load cues - Labyrinth
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C 000B                       PLC_LZ:		dc.w $B
0001E01E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E022 0000                       		dc.w 0
0001E024 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E028 3C00                       		dc.w $3C00
0001E02A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E02E 3E00                       		dc.w $3E00
0001E030 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E034 4B20                       		dc.w $4B20
0001E036 0000 0000                  		dc.l Nem_Water		; water	surface
0001E03A 6000                       		dc.w $6000
0001E03C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E040 6200                       		dc.w $6200
0001E042 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E046 6500                       		dc.w $6500
0001E048 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E04C 6900                       		dc.w $6900
0001E04E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E052 7780                       		dc.w $7780
0001E054 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E058 7880                       		dc.w $7880
0001E05A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E05E 7980                       		dc.w $7980
0001E060 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E064 94C0                       		dc.w $94C0
0001E066 000C                       PLC_LZ2:	dc.w $C
0001E068 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E06C 7BC0                       		dc.w $7BC0
0001E06E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E072 7CC0                       		dc.w $7CC0
0001E074 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E078 7EC0                       		dc.w $7EC0
0001E07A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E07E 5D20                       		dc.w $5D20
0001E080 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E084 8800                       		dc.w $8800
0001E086 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E08A 89E0                       		dc.w $89E0
0001E08C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E090 8CE0                       		dc.w $8CE0
0001E092 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E096 90C0                       		dc.w $90C0
0001E098 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E09C A1E0                       		dc.w $A1E0
0001E09E 0000 0000                  		dc.l Nem_Cork		; cork block
0001E0A2 A000                       		dc.w $A000
0001E0A4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0A8 A360                       		dc.w $A360
0001E0AA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0AE A460                       		dc.w $A460
0001E0B0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0B4 A660                       		dc.w $A660
0001E0B6                            ; ---------------------------------------------------------------------------
0001E0B6                            ; Pattern load cues - Marble
0001E0B6                            ; ---------------------------------------------------------------------------
0001E0B6 0009                       PLC_MZ:		dc.w 9
0001E0B8 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E0BC 0000                       		dc.w 0
0001E0BE 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E0C2 6000                       		dc.w $6000
0001E0C4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E0C8 68A0                       		dc.w $68A0
0001E0CA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E0CE 7000                       		dc.w $7000
0001E0D0 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E0D4 71C0                       		dc.w $71C0
0001E0D6 0000 0000                  		dc.l Nem_Lava		; lava
0001E0DA 7500                       		dc.w $7500
0001E0DC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0E0 8880                       		dc.w $8880
0001E0E2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0E6 8F60                       		dc.w $8F60
0001E0E8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E0EC 9700                       		dc.w $9700
0001E0EE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0F2 9FE0                       		dc.w $9FE0
0001E0F4 0004                       PLC_MZ2:	dc.w 4
0001E0F6 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E0FA A260                       		dc.w $A260
0001E0FC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E100 A360                       		dc.w $A360
0001E102 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E106 A460                       		dc.w $A460
0001E108 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E10C A660                       		dc.w $A660
0001E10E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E112 5700                       		dc.w $5700
0001E114                            ; ---------------------------------------------------------------------------
0001E114                            ; Pattern load cues - Star Light
0001E114                            ; ---------------------------------------------------------------------------
0001E114 0008                       PLC_SLZ:	dc.w 8
0001E116 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E11A 0000                       		dc.w 0
0001E11C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E120 8000                       		dc.w $8000
0001E122 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E126 8520                       		dc.w $8520
0001E128 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E12C 9000                       		dc.w $9000
0001E12E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E132 9C00                       		dc.w $9C00
0001E134 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E138 A260                       		dc.w $A260
0001E13A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E13E A360                       		dc.w $A360
0001E140 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E144 A460                       		dc.w $A460
0001E146 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E14A A660                       		dc.w $A660
0001E14C 0005                       PLC_SLZ2:	dc.w 5
0001E14E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E152 6E80                       		dc.w $6E80
0001E154 0000 0000                  		dc.l Nem_Fan		; fan
0001E158 7400                       		dc.w $7400
0001E15A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E15E 7980                       		dc.w $7980
0001E160 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E164 7B80                       		dc.w $7B80
0001E166 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E16A 9B00                       		dc.w $9B00
0001E16C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E170 9E00                       		dc.w $9E00
0001E172                            ; ---------------------------------------------------------------------------
0001E172                            ; Pattern load cues - Spring Yard
0001E172                            ; ---------------------------------------------------------------------------
0001E172 0004                       PLC_SYZ:	dc.w 4
0001E174 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E178 0000                       		dc.w 0
0001E17A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E17E 8000                       		dc.w $8000
0001E180 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E184 8880                       		dc.w $8880
0001E186 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E18A 8F60                       		dc.w $8F60
0001E18C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E190 9700                       		dc.w $9700
0001E192 0007                       PLC_SYZ2:	dc.w 7
0001E194 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E198 7000                       		dc.w $7000
0001E19A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E19E 72C0                       		dc.w $72C0
0001E1A0 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E1A4 7740                       		dc.w $7740
0001E1A6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1AA 9FE0                       		dc.w $9FE0
0001E1AC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E1B0 A1E0                       		dc.w $A1E0
0001E1B2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1B6 A360                       		dc.w $A360
0001E1B8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1BC A460                       		dc.w $A460
0001E1BE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1C2 A660                       		dc.w $A660
0001E1C4                            ; ---------------------------------------------------------------------------
0001E1C4                            ; Pattern load cues - Scrap Brain
0001E1C4                            ; ---------------------------------------------------------------------------
0001E1C4 000B                       PLC_SBZ:	dc.w $B
0001E1C6 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E1CA 0000                       		dc.w 0
0001E1CC 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E1D0 5800                       		dc.w $5800
0001E1D2 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E1D6 5D00                       		dc.w $5D00
0001E1D8 0000 0000                  		dc.l Nem_Girder		; girder
0001E1DC 5E00                       		dc.w $5E00
0001E1DE 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E1E2 6040                       		dc.w $6040
0001E1E4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E1E8 6880                       		dc.w $6880
0001E1EA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E1EE 6900                       		dc.w $6900
0001E1F0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1F4 7220                       		dc.w $7220
0001E1F6 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E1FA 76A0                       		dc.w $76A0
0001E1FC 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E200 7B20                       		dc.w $7B20
0001E202 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E206 7EA0                       		dc.w $7EA0
0001E208 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E20C 9860                       		dc.w $9860
0001E20E 000C                       PLC_SBZ2:	dc.w $C
0001E210 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E214 5600                       		dc.w $5600
0001E216 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E21A 8000                       		dc.w $8000
0001E21C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E220 8520                       		dc.w $8520
0001E222 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E226 8C00                       		dc.w $8C00
0001E228 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E22C 8DE0                       		dc.w $8DE0
0001E22E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E232 8FC0                       		dc.w $8FC0
0001E234 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E238 9240                       		dc.w $9240
0001E23A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E23E 7F20                       		dc.w $7F20
0001E240 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E244 9BE0                       		dc.w $9BE0
0001E246 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E24A A1E0                       		dc.w $A1E0
0001E24C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E250 A360                       		dc.w $A360
0001E252 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E256 A460                       		dc.w $A460
0001E258 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E25C A660                       		dc.w $A660
0001E25E                            ; ---------------------------------------------------------------------------
0001E25E                            ; Pattern load cues - title card
0001E25E                            ; ---------------------------------------------------------------------------
0001E25E 0000                       PLC_TitleCard:	dc.w 0
0001E260 0000 0000                  		dc.l Nem_TitleCard
0001E264 B000                       		dc.w $B000
0001E266                            ; ---------------------------------------------------------------------------
0001E266                            ; Pattern load cues - act 3 boss
0001E266                            ; ---------------------------------------------------------------------------
0001E266 0005                       PLC_Boss:	dc.w 5
0001E268 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E26C 8000                       		dc.w $8000
0001E26E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E272 8D80                       		dc.w $8D80
0001E274 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E278 93A0                       		dc.w $93A0
0001E27A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E27E A300                       		dc.w $A300
0001E280 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E284 A300                       		dc.w $A300
0001E286 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E28A A540                       		dc.w $A540
0001E28C                            ; ---------------------------------------------------------------------------
0001E28C                            ; Pattern load cues - act 1/2 signpost
0001E28C                            ; ---------------------------------------------------------------------------
0001E28C 0002                       PLC_Signpost:	dc.w 2
0001E28E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E292 D000                       		dc.w $D000
0001E294 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E298 96C0                       		dc.w $96C0
0001E29A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E29E 8C40                       		dc.w $8C40
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0                            ; Pattern load cues - beta special stage warp effect
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0 0000                       PLC_Warp:	dc.w 0
0001E2A2 0000 0000                  		dc.l Nem_Warp
0001E2A6 A820                       		dc.w $A820
0001E2A8                            ; ---------------------------------------------------------------------------
0001E2A8                            ; Pattern load cues - special stage
0001E2A8                            ; ---------------------------------------------------------------------------
0001E2A8 0010                       PLC_SpeStage:	dc.w $10
0001E2AA 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E2AE 0000                       		dc.w 0
0001E2B0 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E2B4 0A20                       		dc.w $A20
0001E2B6 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E2BA 2840                       		dc.w $2840
0001E2BC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E2C0 4760                       		dc.w $4760
0001E2C2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E2C6 4A20                       		dc.w $4A20
0001E2C8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E2CC 4C60                       		dc.w $4C60
0001E2CE 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E2D2 5E00                       		dc.w $5E00
0001E2D4 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E2D8 6E00                       		dc.w $6E00
0001E2DA 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E2DE 7E00                       		dc.w $7E00
0001E2E0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E2E4 8E00                       		dc.w $8E00
0001E2E6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E2EA 9E00                       		dc.w $9E00
0001E2EC 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E2F0 AE00                       		dc.w $AE00
0001E2F2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E2F6 BE00                       		dc.w $BE00
0001E2F8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E2FC EE00                       		dc.w $EE00
0001E2FE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E302 F2E0                       		dc.w $F2E0
0001E304 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E308 F400                       		dc.w $F400
0001E30A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E30E F520                       		dc.w $F520
0001E310 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E314 F2E0                       		dc.w $F2E0
0001E316 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E31A F400                       		dc.w $F400
0001E31C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E320 F520                       		dc.w $F520
0001E322                            ; ---------------------------------------------------------------------------
0001E322                            ; Pattern load cues - GHZ animals
0001E322                            ; ---------------------------------------------------------------------------
0001E322 0001                       PLC_GHZAnimals:	dc.w 1
0001E324 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E328 B000                       		dc.w $B000
0001E32A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E32E B240                       		dc.w $B240
0001E330                            ; ---------------------------------------------------------------------------
0001E330                            ; Pattern load cues - LZ animals
0001E330                            ; ---------------------------------------------------------------------------
0001E330 0001                       PLC_LZAnimals:	dc.w 1
0001E332 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E336 B000                       		dc.w $B000
0001E338 0000 0000                  		dc.l Nem_Seal		; seal
0001E33C B240                       		dc.w $B240
0001E33E                            ; ---------------------------------------------------------------------------
0001E33E                            ; Pattern load cues - MZ animals
0001E33E                            ; ---------------------------------------------------------------------------
0001E33E 0001                       PLC_MZAnimals:	dc.w 1
0001E340 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E344 B000                       		dc.w $B000
0001E346 0000 0000                  		dc.l Nem_Seal		; seal
0001E34A B240                       		dc.w $B240
0001E34C                            ; ---------------------------------------------------------------------------
0001E34C                            ; Pattern load cues - SLZ animals
0001E34C                            ; ---------------------------------------------------------------------------
0001E34C 0001                       PLC_SLZAnimals:	dc.w 1
0001E34E 0000 0000                  		dc.l Nem_Pig		; pig
0001E352 B000                       		dc.w $B000
0001E354 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E358 B240                       		dc.w $B240
0001E35A                            ; ---------------------------------------------------------------------------
0001E35A                            ; Pattern load cues - SYZ animals
0001E35A                            ; ---------------------------------------------------------------------------
0001E35A 0001                       PLC_SYZAnimals:	dc.w 1
0001E35C 0000 0000                  		dc.l Nem_Pig		; pig
0001E360 B000                       		dc.w $B000
0001E362 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E366 B240                       		dc.w $B240
0001E368                            ; ---------------------------------------------------------------------------
0001E368                            ; Pattern load cues - SBZ animals
0001E368                            ; ---------------------------------------------------------------------------
0001E368 0001                       PLC_SBZAnimals:	dc.w 1
0001E36A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E36E B000                       		dc.w $B000
0001E370 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E374 B240                       		dc.w $B240
0001E376                            ; ---------------------------------------------------------------------------
0001E376                            ; Pattern load cues - special stage results screen
0001E376                            ; ---------------------------------------------------------------------------
0001E376 0001                       PLC_SpeStResult:dc.w 1
0001E378 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E37C A820                       		dc.w $A820
0001E37E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E382 AA20                       		dc.w $AA20
0001E384                            ; ---------------------------------------------------------------------------
0001E384                            ; Pattern load cues - ending sequence
0001E384                            ; ---------------------------------------------------------------------------
0001E384 000E                       PLC_Ending:	dc.w $E
0001E386 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E38A 0000                       		dc.w 0
0001E38C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E390 39A0                       		dc.w $39A0
0001E392 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E396 6B00                       		dc.w $6B00
0001E398 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E39C 7400                       		dc.w $7400
0001E39E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3A2 78A0                       		dc.w $78A0
0001E3A4 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E3A8 7C20                       		dc.w $7C20
0001E3AA 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E3AE A480                       		dc.w $A480
0001E3B0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E3B4 AA60                       		dc.w $AA60
0001E3B6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3BA ACA0                       		dc.w $ACA0
0001E3BC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E3C0 AE60                       		dc.w $AE60
0001E3C2 0000 0000                  		dc.l Nem_Seal		; seal
0001E3C6 B0A0                       		dc.w $B0A0
0001E3C8 0000 0000                  		dc.l Nem_Pig		; pig
0001E3CC B260                       		dc.w $B260
0001E3CE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E3D2 B4A0                       		dc.w $B4A0
0001E3D4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E3D8 B660                       		dc.w $B660
0001E3DA 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E3DE B8A0                       		dc.w $B8A0
0001E3E0                            ; ---------------------------------------------------------------------------
0001E3E0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E3E0                            ; ---------------------------------------------------------------------------
0001E3E0 0002                       PLC_TryAgain:	dc.w 2
0001E3E2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3E6 78A0                       		dc.w $78A0
0001E3E8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E3EC 7C20                       		dc.w $7C20
0001E3EE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E3F2 B400                       		dc.w $B400
0001E3F4                            ; ---------------------------------------------------------------------------
0001E3F4                            ; Pattern load cues - Eggman on SBZ 2
0001E3F4                            ; ---------------------------------------------------------------------------
0001E3F4 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E3F6 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E3FA A300                       		dc.w $A300
0001E3FC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E400 8000                       		dc.w $8000
0001E402 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E406 9400                       		dc.w $9400
0001E408                            ; ---------------------------------------------------------------------------
0001E408                            ; Pattern load cues - final boss
0001E408                            ; ---------------------------------------------------------------------------
0001E408 0004                       PLC_FZBoss:	dc.w 4
0001E40A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E40E 7400                       		dc.w $7400
0001E410 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E414 6000                       		dc.w $6000
0001E416 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E41A 8000                       		dc.w $8000
0001E41C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E420 8E00                       		dc.w $8E00
0001E422 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E426 A540                       		dc.w $A540
0001E428                            ; ---------------------------------------------------------------------------
0001E428                            ; Pattern load cues - Teto boss
0001E428                            ; ---------------------------------------------------------------------------
0001E428 0002                       PLC_TetoBoss:	dc.w 2
0001E42A 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E42E 8000                       		dc.w $8000
0001E430 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E434 93A0                       		dc.w $93A0
0001E436 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E43A 9000                       		dc.w $9000
0001E43C                            		even
0001E43C                            		even
0001E43C                            
0001E43C                            		incbin	misc\padding.bin
0001E52A                            		even
0001E52A                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E97A                            		even
0001E97A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EA0C                            		even
0001EA0C                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EB4E                            		even
0001EB4E                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EB9C                            		even
0001EB9C                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001ECB0                            		even
0001ECB0                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FB7A                            		even
0001FB7A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023C80                            		even
00023C80                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023CB4                            		even
00023CB4                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023D72                            		even
00023D72                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002421A                            		even
0002421A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024278                            		even
00024278                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024E7E                            		even
00024E7E                            ; ---------------------------------------------------------------------------
00024E7E                            ; Sprite mappings - Sonic
00024E7E                            ; ---------------------------------------------------------------------------
00024E7E                            Map_Sonic:
00024E7E                            	include "_maps\Sonic.asm"
00024E7E                            Map_6d2d:
00024E7E 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024E80 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024E82 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024E84 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024E86 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024E88 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024E8A 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024E8C 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024E8E 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024E90 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024E92 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024E94 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024E96 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024E98 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024E9A 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024E9C 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024E9E 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024EA0 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024EA2 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024EA4 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024EA6 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024EA8 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024EAA 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024EAC 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024EAE 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024EB0 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024EB2 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024EB4 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024EB6 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024EB8 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024EBA 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024EBC 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024EBE 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024EC0 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024EC2 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024EC4 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024EC6 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024EC8 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024ECA 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024ECC 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024ECE 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024ED0 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024ED2 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024ED4 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024ED6 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024ED8 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024EDA 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024EDC 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024EDE 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024EE0 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024EE2 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024EE4 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024EE6 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024EE8 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024EEA 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024EEC 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024EEE 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024EF0 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024EF2 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024EF4 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024EF6 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024EF8 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024EFA 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024EFC 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024EFE 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024F00 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024F02 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024F04 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024F06 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024F08 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024F0A 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024F0C 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024F0E 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024F10 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024F12 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024F14 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024F16 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024F18 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024F1A 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024F1C 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024F1E 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024F20 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024F22 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024F24 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024F26 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024F28 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024F2A 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024F2C 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024F2E 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024F30 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024F32 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024F34 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024F36 00                         Map_6d2d_B8: 	dc.b $0
00024F37 02                         Map_6d2d_B9: 	dc.b $2
00024F38 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024F3D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024F42 03                         Map_6d2d_C4: 	dc.b $3
00024F43 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F48 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F4D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F52 03                         Map_6d2d_D4: 	dc.b $3
00024F53 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F58 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F5D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F62 03                         Map_6d2d_E4: 	dc.b $3
00024F63 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F68 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F6D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F72 03                         Map_6d2d_F4: 	dc.b $3
00024F73 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024F78 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024F7D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F82 04                         Map_6d2d_104: 	dc.b $4
00024F83 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024F88 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024F8D FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024F92 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024F97 02                         Map_6d2d_119: 	dc.b $2
00024F98 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024F9D FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024FA2 02                         Map_6d2d_124: 	dc.b $2
00024FA3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024FA8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024FAD 04                         Map_6d2d_12F: 	dc.b $4
00024FAE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024FB3 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024FB8 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024FBD 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024FC2 02                         Map_6d2d_144: 	dc.b $2
00024FC3 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024FC8 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024FCD 03                         Map_6d2d_14F: 	dc.b $3
00024FCE ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024FD3 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024FD8 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024FDD 05                         Map_6d2d_15F: 	dc.b $5
00024FDE EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024FE3 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024FE8 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024FED 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024FF2 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024FF7 06                         Map_6d2d_179: 	dc.b $6
00024FF8 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FFD EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025002 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025007 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002500C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025011 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025016 04                         Map_6d2d_198: 	dc.b $4
00025017 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002501C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025021 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025026 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002502B 05                         Map_6d2d_1AD: 	dc.b $5
0002502C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025031 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025036 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002503B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025040 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025045 04                         Map_6d2d_1C7: 	dc.b $4
00025046 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002504B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025050 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00025055 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
0002505A 05                         Map_6d2d_1DC: 	dc.b $5
0002505B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025060 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025065 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
0002506A FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
0002506F 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00025074 04                         Map_6d2d_1F6: 	dc.b $4
00025075 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002507A EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
0002507F FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00025084 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00025089 02                         Map_6d2d_20B: 	dc.b $2
0002508A F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
0002508F EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00025094 02                         Map_6d2d_216: 	dc.b $2
00025095 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
0002509A F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
0002509F 04                         Map_6d2d_221: 	dc.b $4
000250A0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000250A5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000250AA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000250AF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000250B4 02                         Map_6d2d_236: 	dc.b $2
000250B5 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000250BA F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000250BF 03                         Map_6d2d_241: 	dc.b $3
000250C0 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000250C5 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000250CA F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000250CF 06                         Map_6d2d_251: 	dc.b $6
000250D0 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000250D5 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000250DA F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000250DF F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000250E4 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000250E9 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
000250EE 06                         Map_6d2d_270: 	dc.b $6
000250EF FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250F4 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000250F9 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000250FE F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025103 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025108 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002510D 04                         Map_6d2d_28F: 	dc.b $4
0002510E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025113 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025118 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002511D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025122 05                         Map_6d2d_2A4: 	dc.b $5
00025123 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025128 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002512D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025132 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025137 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002513C 04                         Map_6d2d_2BE: 	dc.b $4
0002513D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025142 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025147 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002514C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025151 05                         Map_6d2d_2D3: 	dc.b $5
00025152 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025157 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
0002515C F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025161 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025166 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
0002516B 02                         Map_6d2d_2ED: 	dc.b $2
0002516C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025171 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025176 02                         Map_6d2d_2F8: 	dc.b $2
00025177 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002517C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025181 02                         Map_6d2d_303: 	dc.b $2
00025182 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025187 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002518C 02                         Map_6d2d_30E: 	dc.b $2
0002518D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025192 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025197 04                         Map_6d2d_319: 	dc.b $4
00025198 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002519D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251A2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251A7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251AC 03                         Map_6d2d_32E: 	dc.b $3
000251AD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251B2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251B7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251BC 04                         Map_6d2d_33E: 	dc.b $4
000251BD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251C2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251C7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251CC FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251D1 03                         Map_6d2d_353: 	dc.b $3
000251D2 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251D7 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251DC FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251E1 02                         Map_6d2d_363: 	dc.b $2
000251E2 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251E7 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251EC 02                         Map_6d2d_36E: 	dc.b $2
000251ED F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251F2 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251F7 02                         Map_6d2d_379: 	dc.b $2
000251F8 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251FD F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025202 02                         Map_6d2d_384: 	dc.b $2
00025203 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025208 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002520D 04                         Map_6d2d_38F: 	dc.b $4
0002520E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025213 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025218 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002521D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025222 02                         Map_6d2d_3A4: 	dc.b $2
00025223 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025228 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002522D 04                         Map_6d2d_3AF: 	dc.b $4
0002522E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025233 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025238 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002523D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025242 02                         Map_6d2d_3C4: 	dc.b $2
00025243 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025248 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002524D 01                         Map_6d2d_3CF: 	dc.b $1
0002524E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025253 01                         Map_6d2d_3D5: 	dc.b $1
00025254 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025259 01                         Map_6d2d_3DB: 	dc.b $1
0002525A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002525F 01                         Map_6d2d_3E1: 	dc.b $1
00025260 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025265 01                         Map_6d2d_3E7: 	dc.b $1
00025266 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002526B 02                         Map_6d2d_3ED: 	dc.b $2
0002526C F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025271 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00025276 01                         Map_6d2d_3F8: 	dc.b $1
00025277 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002527C 02                         Map_6d2d_3FE: 	dc.b $2
0002527D EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025282 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00025287 01                         Map_6d2d_409: 	dc.b $1
00025288 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002528D 02                         Map_6d2d_40F: 	dc.b $2
0002528E ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025293 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00025298 04                         Map_6d2d_41A: 	dc.b $4
00025299 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002529E FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000252A3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000252A8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000252AD 06                         Map_6d2d_42F: 	dc.b $6
000252AE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000252B3 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000252B8 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000252BD 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000252C2 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000252C7 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000252CC 02                         Map_6d2d_44E: 	dc.b $2
000252CD 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000252D2 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000252D7 02                         Map_6d2d_459: 	dc.b $2
000252D8 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000252DD EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000252E2 04                         Map_6d2d_464: 	dc.b $4
000252E3 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000252E8 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252ED 0408 000C 03               	dc.b $4, $8, $0, $C, $3
000252F2 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252F7 02                         Map_6d2d_479: 	dc.b $2
000252F8 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000252FD F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025302 03                         Map_6d2d_484: 	dc.b $3
00025303 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025308 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002530D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025312 04                         Map_6d2d_494: 	dc.b $4
00025313 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025318 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002531D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025322 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025327 03                         Map_6d2d_4A9: 	dc.b $3
00025328 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002532D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025332 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00025337 04                         Map_6d2d_4B9: 	dc.b $4
00025338 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002533D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025342 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025347 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002534C 04                         Map_6d2d_4CE: 	dc.b $4
0002534D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025352 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025357 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002535C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025361 05                         Map_6d2d_4E3: 	dc.b $5
00025362 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025367 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002536C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025371 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025376 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002537B 05                         Map_6d2d_4FD: 	dc.b $5
0002537C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025381 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025386 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002538B 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025390 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025395 02                         Map_6d2d_517: 	dc.b $2
00025396 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002539B 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000253A0 03                         Map_6d2d_522: 	dc.b $3
000253A1 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000253A6 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000253AB 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253B0 02                         Map_6d2d_532: 	dc.b $2
000253B1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000253B6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000253BB 03                         Map_6d2d_53D: 	dc.b $3
000253BC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000253C1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000253C6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253CB 02                         Map_6d2d_54D: 	dc.b $2
000253CC EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000253D1 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000253D6 03                         Map_6d2d_558: 	dc.b $3
000253D7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000253DC 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000253E1 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000253E6 03                         Map_6d2d_568: 	dc.b $3
000253E7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253EC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253F1 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000253F6 05                         Map_6d2d_578: 	dc.b $5
000253F7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253FC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025401 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025406 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002540B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025410 05                         Map_6d2d_592: 	dc.b $5
00025411 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025416 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002541B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025420 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025425 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002542A 02                         Map_6d2d_5AC: 	dc.b $2
0002542B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025430 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025435 03                         Map_6d2d_5B7: 	dc.b $3
00025436 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002543B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025440 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025445 01                         Map_6d2d_5C7: 	dc.b $1
00025446 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002544B 01                         Map_6d2d_5CD: 	dc.b $1
0002544C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025451 01                         Map_6d2d_5D3: 	dc.b $1
00025452 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025457 04                         Map_6d2d_5D9: 	dc.b $4
00025458 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002545D F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025462 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025467 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002546C 03                         Map_6d2d_5EE: 	dc.b $3
0002546D F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025472 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025477 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002547C 03                         Map_6d2d_5FE: 	dc.b $3
0002547D F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025482 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025487 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002548C 03                         Map_6d2d_60E: 	dc.b $3
0002548D EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025492 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025497 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002549C 02                         Map_6d2d_61E: 	dc.b $2
0002549D F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000254A2 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000254A7 02                         Map_6d2d_629: 	dc.b $2
000254A8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000254AD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000254B2 03                         Map_6d2d_634: 	dc.b $3
000254B3 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000254B8 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000254BD 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000254C2 02                         Map_6d2d_644: 	dc.b $2
000254C3 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000254C8 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000254CD 04                         Map_6d2d_64F: 	dc.b $4
000254CE ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000254D3 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000254D8 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000254DD 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000254E2                            	even
000254E2                            	even
000254E2                            
000254E2                            ; ---------------------------------------------------------------------------
000254E2                            ; Uncompressed graphics	loading	array for Sonic
000254E2                            ; ---------------------------------------------------------------------------
000254E2                            SonicDynPLC:
000254E2                            	include "_inc\Sonic dynamic pattern load cues.asm"
000254E2                            DPLC_2d5b:
000254E2 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
000254E4 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
000254E6 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
000254E8 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
000254EA 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
000254EC 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
000254EE 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
000254F0 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
000254F2 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
000254F4 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
000254F6 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
000254F8 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
000254FA 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
000254FC 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
000254FE 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025500 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025502 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025504 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
00025506 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
00025508 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
0002550A 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
0002550C 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
0002550E 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025510 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025512 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025514 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
00025516 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
00025518 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
0002551A 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
0002551C 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
0002551E 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025520 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025522 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025524 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
00025526 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
00025528 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
0002552A 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
0002552C 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
0002552E 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025530 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025532 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025534 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
00025536 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
00025538 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
0002553A 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
0002553C 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
0002553E 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025540 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025542 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
00025544 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
00025546 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
00025548 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
0002554A 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
0002554C 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
0002554E 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025550 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025552 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
00025554 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
00025556 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
00025558 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
0002555A 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
0002555C 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
0002555E 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025560 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025562 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
00025564 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
00025566 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
00025568 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
0002556A 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
0002556C 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
0002556E 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025570 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025572 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
00025574 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
00025576 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
00025578 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
0002557A 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
0002557C 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
0002557E 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025580 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025582 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
00025584 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
00025586 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
00025588 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
0002558A 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
0002558C 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
0002558E 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
00025590 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
00025592 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
00025594 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
00025596 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
00025598 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
0002559A 00                         DPLC_2d5b_B8: 	dc.b $0
0002559B 02                         DPLC_2d5b_B9: 	dc.b $2
0002559C F000                       	dc.b $F0, $0
0002559E 1010                       	dc.b $10, $10
000255A0 03                         DPLC_2d5b_BE: 	dc.b $3
000255A1 5012                       	dc.b $50, $12
000255A3 5018                       	dc.b $50, $18
000255A5 201E                       	dc.b $20, $1E
000255A7 03                         DPLC_2d5b_C5: 	dc.b $3
000255A8 5021                       	dc.b $50, $21
000255AA 5018                       	dc.b $50, $18
000255AC 201E                       	dc.b $20, $1E
000255AE 03                         DPLC_2d5b_CC: 	dc.b $3
000255AF 5021                       	dc.b $50, $21
000255B1 5018                       	dc.b $50, $18
000255B3 2027                       	dc.b $20, $27
000255B5 03                         DPLC_2d5b_D3: 	dc.b $3
000255B6 802A                       	dc.b $80, $2A
000255B8 2033                       	dc.b $20, $33
000255BA 2036                       	dc.b $20, $36
000255BC 04                         DPLC_2d5b_DA: 	dc.b $4
000255BD 7039                       	dc.b $70, $39
000255BF 5041                       	dc.b $50, $41
000255C1 5047                       	dc.b $50, $47
000255C3 104D                       	dc.b $10, $4D
000255C5 02                         DPLC_2d5b_E3: 	dc.b $2
000255C6 7039                       	dc.b $70, $39
000255C8 B04F                       	dc.b $B0, $4F
000255CA 02                         DPLC_2d5b_E8: 	dc.b $2
000255CB 505B                       	dc.b $50, $5B
000255CD 8061                       	dc.b $80, $61
000255CF 04                         DPLC_2d5b_ED: 	dc.b $4
000255D0 505B                       	dc.b $50, $5B
000255D2 506A                       	dc.b $50, $6A
000255D4 5070                       	dc.b $50, $70
000255D6 1076                       	dc.b $10, $76
000255D8 02                         DPLC_2d5b_F6: 	dc.b $2
000255D9 F4F0                       	dc.b $F4, $F0
000255DB 1500                       	dc.b $15, $0
000255DD 03                         DPLC_2d5b_FB: 	dc.b $3
000255DE 7039                       	dc.b $70, $39
000255E0 3078                       	dc.b $30, $78
000255E2 507C                       	dc.b $50, $7C
000255E4 05                         DPLC_2d5b_102: 	dc.b $5
000255E5 5082                       	dc.b $50, $82
000255E7 5088                       	dc.b $50, $88
000255E9 208E                       	dc.b $20, $8E
000255EB 5091                       	dc.b $50, $91
000255ED 0097                       	dc.b $0, $97
000255EF 06                         DPLC_2d5b_10D: 	dc.b $6
000255F0 5082                       	dc.b $50, $82
000255F2 1098                       	dc.b $10, $98
000255F4 309A                       	dc.b $30, $9A
000255F6 509E                       	dc.b $50, $9E
000255F8 30A4                       	dc.b $30, $A4
000255FA 00A8                       	dc.b $0, $A8
000255FC 04                         DPLC_2d5b_11A: 	dc.b $4
000255FD 50A9                       	dc.b $50, $A9
000255FF 10AF                       	dc.b $10, $AF
00025601 70B1                       	dc.b $70, $B1
00025603 20B9                       	dc.b $20, $B9
00025605 05                         DPLC_2d5b_123: 	dc.b $5
00025606 50BC                       	dc.b $50, $BC
00025608 30C2                       	dc.b $30, $C2
0002560A 70C6                       	dc.b $70, $C6
0002560C 20CE                       	dc.b $20, $CE
0002560E 10D1                       	dc.b $10, $D1
00025610 04                         DPLC_2d5b_12E: 	dc.b $4
00025611 50BC                       	dc.b $50, $BC
00025613 10D3                       	dc.b $10, $D3
00025615 70D5                       	dc.b $70, $D5
00025617 20DD                       	dc.b $20, $DD
00025619 05                         DPLC_2d5b_137: 	dc.b $5
0002561A 5082                       	dc.b $50, $82
0002561C 1098                       	dc.b $10, $98
0002561E 008E                       	dc.b $0, $8E
00025620 70E0                       	dc.b $70, $E0
00025622 20E8                       	dc.b $20, $E8
00025624 04                         DPLC_2d5b_142: 	dc.b $4
00025625 70EB                       	dc.b $70, $EB
00025627 50F3                       	dc.b $50, $F3
00025629 10F9                       	dc.b $10, $F9
0002562B 50FB                       	dc.b $50, $FB
0002562D 02                         DPLC_2d5b_14B: 	dc.b $2
0002562E 70EB                       	dc.b $70, $EB
00025630 B101                       	dc.b $B1, $1
00025632 02                         DPLC_2d5b_150: 	dc.b $2
00025633 510D                       	dc.b $51, $D
00025635 8113                       	dc.b $81, $13
00025637 04                         DPLC_2d5b_155: 	dc.b $4
00025638 510D                       	dc.b $51, $D
0002563A 511C                       	dc.b $51, $1C
0002563C 1122                       	dc.b $11, $22
0002563E 5124                       	dc.b $51, $24
00025640 02                         DPLC_2d5b_15E: 	dc.b $2
00025641 510D                       	dc.b $51, $D
00025643 B12A                       	dc.b $B1, $2A
00025645 03                         DPLC_2d5b_163: 	dc.b $3
00025646 70EB                       	dc.b $70, $EB
00025648 0101                       	dc.b $1, $1
0002564A 8136                       	dc.b $81, $36
0002564C 06                         DPLC_2d5b_16A: 	dc.b $6
0002564D 513F                       	dc.b $51, $3F
0002564F 1145                       	dc.b $11, $45
00025651 1147                       	dc.b $11, $47
00025653 8149                       	dc.b $81, $49
00025655 0152                       	dc.b $1, $52
00025657 0153                       	dc.b $1, $53
00025659 06                         DPLC_2d5b_177: 	dc.b $6
0002565A 513F                       	dc.b $51, $3F
0002565C 2154                       	dc.b $21, $54
0002565E 1157                       	dc.b $11, $57
00025660 1159                       	dc.b $11, $59
00025662 815B                       	dc.b $81, $5B
00025664 0152                       	dc.b $1, $52
00025666 04                         DPLC_2d5b_184: 	dc.b $4
00025667 5164                       	dc.b $51, $64
00025669 116A                       	dc.b $11, $6A
0002566B 816C                       	dc.b $81, $6C
0002566D 1175                       	dc.b $11, $75
0002566F 05                         DPLC_2d5b_18D: 	dc.b $5
00025670 5177                       	dc.b $51, $77
00025672 217D                       	dc.b $21, $7D
00025674 1180                       	dc.b $11, $80
00025676 7182                       	dc.b $71, $82
00025678 218A                       	dc.b $21, $8A
0002567A 04                         DPLC_2d5b_198: 	dc.b $4
0002567B 5177                       	dc.b $51, $77
0002567D 118D                       	dc.b $11, $8D
0002567F 818F                       	dc.b $81, $8F
00025681 1198                       	dc.b $11, $98
00025683 05                         DPLC_2d5b_1A1: 	dc.b $5
00025684 513F                       	dc.b $51, $3F
00025686 819A                       	dc.b $81, $9A
00025688 1159                       	dc.b $11, $59
0002568A 11A3                       	dc.b $11, $A3
0002568C 0152                       	dc.b $1, $52
0002568E 02                         DPLC_2d5b_1AC: 	dc.b $2
0002568F 51A5                       	dc.b $51, $A5
00025691 B1AB                       	dc.b $B1, $AB
00025693 02                         DPLC_2d5b_1B1: 	dc.b $2
00025694 505B                       	dc.b $50, $5B
00025696 B1B7                       	dc.b $B1, $B7
00025698 02                         DPLC_2d5b_1B6: 	dc.b $2
00025699 51A5                       	dc.b $51, $A5
0002569B B1C3                       	dc.b $B1, $C3
0002569D 02                         DPLC_2d5b_1BB: 	dc.b $2
0002569E 505B                       	dc.b $50, $5B
000256A0 B1CF                       	dc.b $B1, $CF
000256A2 04                         DPLC_2d5b_1C0: 	dc.b $4
000256A3 51DB                       	dc.b $51, $DB
000256A5 11E1                       	dc.b $11, $E1
000256A7 B1E3                       	dc.b $B1, $E3
000256A9 01EF                       	dc.b $1, $EF
000256AB 03                         DPLC_2d5b_1C9: 	dc.b $3
000256AC 51F0                       	dc.b $51, $F0
000256AE 11F6                       	dc.b $11, $F6
000256B0 B1F8                       	dc.b $B1, $F8
000256B2 04                         DPLC_2d5b_1D0: 	dc.b $4
000256B3 51DB                       	dc.b $51, $DB
000256B5 1204                       	dc.b $12, $4
000256B7 B206                       	dc.b $B2, $6
000256B9 01EF                       	dc.b $1, $EF
000256BB 03                         DPLC_2d5b_1D9: 	dc.b $3
000256BC 51F0                       	dc.b $51, $F0
000256BE 11F6                       	dc.b $11, $F6
000256C0 B212                       	dc.b $B2, $12
000256C2 02                         DPLC_2d5b_1E0: 	dc.b $2
000256C3 521E                       	dc.b $52, $1E
000256C5 B224                       	dc.b $B2, $24
000256C7 02                         DPLC_2d5b_1E5: 	dc.b $2
000256C8 510D                       	dc.b $51, $D
000256CA B230                       	dc.b $B2, $30
000256CC 02                         DPLC_2d5b_1EA: 	dc.b $2
000256CD 521E                       	dc.b $52, $1E
000256CF B23C                       	dc.b $B2, $3C
000256D1 02                         DPLC_2d5b_1EF: 	dc.b $2
000256D2 510D                       	dc.b $51, $D
000256D4 B248                       	dc.b $B2, $48
000256D6 04                         DPLC_2d5b_1F4: 	dc.b $4
000256D7 5254                       	dc.b $52, $54
000256D9 125A                       	dc.b $12, $5A
000256DB B25C                       	dc.b $B2, $5C
000256DD 0268                       	dc.b $2, $68
000256DF 02                         DPLC_2d5b_1FD: 	dc.b $2
000256E0 7269                       	dc.b $72, $69
000256E2 B271                       	dc.b $B2, $71
000256E4 04                         DPLC_2d5b_202: 	dc.b $4
000256E5 5254                       	dc.b $52, $54
000256E7 127D                       	dc.b $12, $7D
000256E9 B27F                       	dc.b $B2, $7F
000256EB 0268                       	dc.b $2, $68
000256ED 02                         DPLC_2d5b_20B: 	dc.b $2
000256EE 7269                       	dc.b $72, $69
000256F0 B28B                       	dc.b $B2, $8B
000256F2 01                         DPLC_2d5b_210: 	dc.b $1
000256F3 F297                       	dc.b $F2, $97
000256F5 01                         DPLC_2d5b_213: 	dc.b $1
000256F6 F2A7                       	dc.b $F2, $A7
000256F8 01                         DPLC_2d5b_216: 	dc.b $1
000256F9 F2B7                       	dc.b $F2, $B7
000256FB 01                         DPLC_2d5b_219: 	dc.b $1
000256FC F2C7                       	dc.b $F2, $C7
000256FE 01                         DPLC_2d5b_21C: 	dc.b $1
000256FF F2D7                       	dc.b $F2, $D7
00025701 02                         DPLC_2d5b_21F: 	dc.b $2
00025702 B2E7                       	dc.b $B2, $E7
00025704 22F3                       	dc.b $22, $F3
00025706 01                         DPLC_2d5b_224: 	dc.b $1
00025707 F2F6                       	dc.b $F2, $F6
00025709 02                         DPLC_2d5b_227: 	dc.b $2
0002570A B306                       	dc.b $B3, $6
0002570C 2312                       	dc.b $23, $12
0002570E 01                         DPLC_2d5b_22C: 	dc.b $1
0002570F F315                       	dc.b $F3, $15
00025711 02                         DPLC_2d5b_22F: 	dc.b $2
00025712 5325                       	dc.b $53, $25
00025714 B32B                       	dc.b $B3, $2B
00025716 04                         DPLC_2d5b_234: 	dc.b $4
00025717 5337                       	dc.b $53, $37
00025719 733D                       	dc.b $73, $3D
0002571B 1345                       	dc.b $13, $45
0002571D 0347                       	dc.b $3, $47
0002571F 02                         DPLC_2d5b_23D: 	dc.b $2
00025720 D348                       	dc.b $D3, $48
00025722 34EC                       	dc.b $34, $EC
00025724 02                         DPLC_2d5b_242: 	dc.b $2
00025725 F528                       	dc.b $F5, $28
00025727 0538                       	dc.b $5, $38
00025729 02                         DPLC_2d5b_247: 	dc.b $2
0002572A F539                       	dc.b $F5, $39
0002572C 0549                       	dc.b $5, $49
0002572E 02                         DPLC_2d5b_24C: 	dc.b $2
0002572F E356                       	dc.b $E3, $56
00025731 054A                       	dc.b $5, $4A
00025733 01                         DPLC_2d5b_251: 	dc.b $1
00025734 8365                       	dc.b $83, $65
00025736 03                         DPLC_2d5b_254: 	dc.b $3
00025737 736E                       	dc.b $73, $6E
00025739 0376                       	dc.b $3, $76
0002573B 3377                       	dc.b $33, $77
0002573D 02                         DPLC_2d5b_25B: 	dc.b $2
0002573E E37B                       	dc.b $E3, $7B
00025740 054A                       	dc.b $5, $4A
00025742 03                         DPLC_2d5b_260: 	dc.b $3
00025743 B38A                       	dc.b $B3, $8A
00025745 1396                       	dc.b $13, $96
00025747 0398                       	dc.b $3, $98
00025749 04                         DPLC_2d5b_267: 	dc.b $4
0002574A B399                       	dc.b $B3, $99
0002574C 33A5                       	dc.b $33, $A5
0002574E 03A9                       	dc.b $3, $A9
00025750 03AA                       	dc.b $3, $AA
00025752 04                         DPLC_2d5b_270: 	dc.b $4
00025753 B3AB                       	dc.b $B3, $AB
00025755 33B7                       	dc.b $33, $B7
00025757 03BB                       	dc.b $3, $BB
00025759 03BC                       	dc.b $3, $BC
0002575B 05                         DPLC_2d5b_279: 	dc.b $5
0002575C 83BD                       	dc.b $83, $BD
0002575E 13C6                       	dc.b $13, $C6
00025760 53C8                       	dc.b $53, $C8
00025762 13CE                       	dc.b $13, $CE
00025764 03D0                       	dc.b $3, $D0
00025766 05                         DPLC_2d5b_284: 	dc.b $5
00025767 83D1                       	dc.b $83, $D1
00025769 13DA                       	dc.b $13, $DA
0002576B 53C8                       	dc.b $53, $C8
0002576D 13CE                       	dc.b $13, $CE
0002576F 03D0                       	dc.b $3, $D0
00025771 02                         DPLC_2d5b_28F: 	dc.b $2
00025772 83DC                       	dc.b $83, $DC
00025774 73E5                       	dc.b $73, $E5
00025776 03                         DPLC_2d5b_294: 	dc.b $3
00025777 83ED                       	dc.b $83, $ED
00025779 23F6                       	dc.b $23, $F6
0002577B 13F9                       	dc.b $13, $F9
0002577D 02                         DPLC_2d5b_29B: 	dc.b $2
0002577E 83FB                       	dc.b $83, $FB
00025780 7404                       	dc.b $74, $4
00025782 03                         DPLC_2d5b_2A0: 	dc.b $3
00025783 83ED                       	dc.b $83, $ED
00025785 240C                       	dc.b $24, $C
00025787 140F                       	dc.b $14, $F
00025789 02                         DPLC_2d5b_2A7: 	dc.b $2
0002578A 5411                       	dc.b $54, $11
0002578C B417                       	dc.b $B4, $17
0002578E 03                         DPLC_2d5b_2AC: 	dc.b $3
0002578F 8423                       	dc.b $84, $23
00025791 342C                       	dc.b $34, $2C
00025793 0430                       	dc.b $4, $30
00025795 03                         DPLC_2d5b_2B3: 	dc.b $3
00025796 7431                       	dc.b $74, $31
00025798 1439                       	dc.b $14, $39
0002579A B43B                       	dc.b $B4, $3B
0002579C 05                         DPLC_2d5b_2BA: 	dc.b $5
0002579D 7447                       	dc.b $74, $47
0002579F 144F                       	dc.b $14, $4F
000257A1 5451                       	dc.b $54, $51
000257A3 3457                       	dc.b $34, $57
000257A5 045B                       	dc.b $4, $5B
000257A7 05                         DPLC_2d5b_2C5: 	dc.b $5
000257A8 745C                       	dc.b $74, $5C
000257AA 144F                       	dc.b $14, $4F
000257AC 5464                       	dc.b $54, $64
000257AE 3457                       	dc.b $34, $57
000257B0 045B                       	dc.b $4, $5B
000257B2 02                         DPLC_2d5b_2D0: 	dc.b $2
000257B3 246A                       	dc.b $24, $6A
000257B5 F46D                       	dc.b $F4, $6D
000257B7 03                         DPLC_2d5b_2D5: 	dc.b $3
000257B8 247D                       	dc.b $24, $7D
000257BA B480                       	dc.b $B4, $80
000257BC 248C                       	dc.b $24, $8C
000257BE 01                         DPLC_2d5b_2DC: 	dc.b $1
000257BF B48F                       	dc.b $B4, $8F
000257C1 01                         DPLC_2d5b_2DF: 	dc.b $1
000257C2 549B                       	dc.b $54, $9B
000257C4 01                         DPLC_2d5b_2E2: 	dc.b $1
000257C5 14A1                       	dc.b $14, $A1
000257C7 02                         DPLC_2d5b_2E5: 	dc.b $2
000257C8 E356                       	dc.b $E3, $56
000257CA 054A                       	dc.b $5, $4A
000257CC 03                         DPLC_2d5b_2EA: 	dc.b $3
000257CD 736E                       	dc.b $73, $6E
000257CF 0376                       	dc.b $3, $76
000257D1 3377                       	dc.b $33, $77
000257D3 03                         DPLC_2d5b_2F1: 	dc.b $3
000257D4 B4A3                       	dc.b $B4, $A3
000257D6 14AF                       	dc.b $14, $AF
000257D8 34B1                       	dc.b $34, $B1
000257DA 03                         DPLC_2d5b_2F8: 	dc.b $3
000257DB 54B5                       	dc.b $54, $B5
000257DD B4BB                       	dc.b $B4, $BB
000257DF 1074                       	dc.b $10, $74
000257E1 02                         DPLC_2d5b_2FF: 	dc.b $2
000257E2 F4C7                       	dc.b $F4, $C7
000257E4 24D7                       	dc.b $24, $D7
000257E6 02                         DPLC_2d5b_304: 	dc.b $2
000257E7 F4DA                       	dc.b $F4, $DA
000257E9 14EA                       	dc.b $14, $EA
000257EB 02                         DPLC_2d5b_309: 	dc.b $2
000257EC F502                       	dc.b $F5, $2
000257EE 2512                       	dc.b $25, $12
000257F0 02                         DPLC_2d5b_30E: 	dc.b $2
000257F1 F515                       	dc.b $F5, $15
000257F3 2525                       	dc.b $25, $25
000257F5 02                         DPLC_2d5b_313: 	dc.b $2
000257F6 F54B                       	dc.b $F5, $4B
000257F8 755B                       	dc.b $75, $5B
000257FA                            	even
000257FA                            	even
000257FA                            
000257FA                            ; ---------------------------------------------------------------------------
000257FA                            ; Uncompressed graphics	- Sonic
000257FA                            ; ---------------------------------------------------------------------------
000257FA                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003041A                            		even
0003041A                            ; ---------------------------------------------------------------------------
0003041A                            ; Compressed graphics - various
0003041A                            ; ---------------------------------------------------------------------------
0003041A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003051E                            		even
0003051E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030558                            		even
00030558                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000306EE                            		even
000306EE                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030836                            		even
00030836                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030940                            		even
00030940                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030992                            		even
00030992                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030BDA                            		even
00030BDA                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030D60                            		even
00030D60                            ; ---------------------------------------------------------------------------
00030D60                            ; Sprite mappings - walls of the special stage
00030D60                            ; ---------------------------------------------------------------------------
00030D60                            Map_SSWalls:
00030D60                            	include "_maps\SSwalls.asm"
00030D60                            ; ---------------------------------------------------------------------------
00030D60                            ; Sprite mappings - walls of the special stage
00030D60                            ; ---------------------------------------------------------------------------
00030D60 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030D64 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030D68 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030D6C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030D70 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030D74 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030D78 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030D7C 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030D80 01                         byte_2C584:	dc.b 1
00030D81 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030D86 01                         byte_2C58A:	dc.b 1
00030D87 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030D8C 01                         byte_2C590:	dc.b 1
00030D8D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030D92 01                         byte_2C596:	dc.b 1
00030D93 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030D98 01                         byte_2C59C:	dc.b 1
00030D99 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030D9E 01                         byte_2C5A2:	dc.b 1
00030D9F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030DA4 01                         byte_2C5A8:	dc.b 1
00030DA5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030DAA 01                         byte_2C5AE:	dc.b 1
00030DAB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030DB0 01                         byte_2C5B4:	dc.b 1
00030DB1 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030DB6 01                         byte_2C5BA:	dc.b 1
00030DB7 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030DBC 01                         byte_2C5C0:	dc.b 1
00030DBD F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030DC2 01                         byte_2C5C6:	dc.b 1
00030DC3 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030DC8 01                         byte_2C5CC:	dc.b 1
00030DC9 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030DCE 01                         byte_2C5D2:	dc.b 1
00030DCF F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030DD4 01                         byte_2C5D8:	dc.b 1
00030DD5 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030DDA 01                         byte_2C5DE:	dc.b 1
00030DDB F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030DE0                            		even
00030DE0                            		even
00030DE0                            ; ---------------------------------------------------------------------------
00030DE0                            ; Compressed graphics - special stage
00030DE0                            ; ---------------------------------------------------------------------------
00030DE0                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031718                            		even
00031718                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031866                            		even
00031866                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032CF8                            		even
00032CF8                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032FF8                            		even
00032FF8                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000334EC                            		even
000334EC                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000335DA                            		even
000335DA                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000336AA                            		even
000336AA                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000337A0                            		even
000337A0                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000337FE                            		even
000337FE                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033890                            		even
00033890                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033952                            		even
00033952                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033A20                            		even
00033A20                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033AEC                            		even
00033AEC                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033BB4                            		even
00033BB4                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033C7E                            		even
00033C7E                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033D4E                            		even
00033D4E                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033F42                            		even
00033F42                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000340AA                            		even
000340AA                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003415A                            		even
0003415A                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034234                            		even
00034234                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000342B8                            		even
000342B8                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034436                            		even
00034436                            ; ---------------------------------------------------------------------------
00034436                            ; Compressed graphics - GHZ stuff
00034436                            ; ---------------------------------------------------------------------------
00034436                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034480                            		even
00034480                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003459A                            		even
0003459A                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034686                            		even
00034686                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000346CE                            		even
000346CE                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003486C                            		even
0003486C                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000348E8                            		even
000348E8                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034AFC                            		even
00034AFC                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034C28                            		even
00034C28                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034D56                            		even
00034D56                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034DF4                            		even
00034DF4                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034E54                            		even
00034E54                            ; ---------------------------------------------------------------------------
00034E54                            ; Compressed graphics - LZ stuff
00034E54                            ; ---------------------------------------------------------------------------
00034E54                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034F78                            		even
00034F78                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003576C                            		even
0003576C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000358EC                            		even
000358EC                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035A56                            		even
00035A56                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000360AC                            		even
000360AC                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036162                            		even
00036162                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036204                            		even
00036204                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036360                            		even
00036360                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000363C4                            		even
000363C4                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036516                            		even
00036516                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000369F8                            		even
000369F8                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036B68                            		even
00036B68                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036E20                            		even
00036E20                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036F58                            		even
00036F58                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037082                            		even
00037082                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037192                            		even
00037192                            ; ---------------------------------------------------------------------------
00037192                            ; Compressed graphics - MZ stuff
00037192                            ; ---------------------------------------------------------------------------
00037192                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037420                            		even
00037420                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000374DE                            		even
000374DE                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037596                            		even
00037596                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000375EA                            		even
000375EA                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000378BC 00                         		even
000378BC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000381D2                            		even
000381D2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038336                            		even
00038336                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000383BE                            		even
000383BE                            ; ---------------------------------------------------------------------------
000383BE                            ; Compressed graphics - SLZ stuff
000383BE                            ; ---------------------------------------------------------------------------
000383BE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000385FA                            		even
000385FA                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038740                            		even
00038740                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038984                            		even
00038984                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000389E6                            		even
000389E6                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038AC8                            		even
00038AC8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038CAA                            		even
00038CAA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038DB6                            		even
00038DB6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038E5A                            		even
00038E5A                            ; ---------------------------------------------------------------------------
00038E5A                            ; Compressed graphics - SYZ stuff
00038E5A                            ; ---------------------------------------------------------------------------
00038E5A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038FC4                            		even
00038FC4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039026                            		even
00039026                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00039108                            		even
00039108                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039396                            		even
00039396                            ; ---------------------------------------------------------------------------
00039396                            ; Compressed graphics - SBZ stuff
00039396                            ; ---------------------------------------------------------------------------
00039396                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000393EA                            		even
000393EA                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039686                            		even
00039686                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003988A                            		even
0003988A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039A28                            		even
00039A28                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039D58                            		even
00039D58                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039F36                            		even
00039F36                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039F8E                            		even
00039F8E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A158 00                         		even
0003A158                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A256                            		even
0003A256                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A3E2                            		even
0003A3E2                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A432                            		even
0003A432                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A48A                            		even
0003A48A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A586                            		even
0003A586                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A69C                            		even
0003A69C                            ; ---------------------------------------------------------------------------
0003A69C                            ; Compressed graphics - enemies
0003A69C                            ; ---------------------------------------------------------------------------
0003A69C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AA5C                            		even
0003AA5C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AC06 00                         		even
0003AC06                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AFC8 00                         		even
0003AFC8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B1B0                            		even
0003B1B0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B368 00                         		even
0003B368                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B4B2                            		even
0003B4B2                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B73C                            		even
0003B73C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BD60                            		even
0003BD60                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BF56                            		even
0003BF56                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C574                            		even
0003C574                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C974 00                         		even
0003C974                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CC70                            		even
0003CC70                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CEB8                            		even
0003CEB8                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D150                            		even
0003D150                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D32E                            		even
0003D32E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D4BC                            		even
0003D4BC                            ; ---------------------------------------------------------------------------
0003D4BC                            ; Compressed graphics - various
0003D4BC                            ; ---------------------------------------------------------------------------
0003D4BC                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DACA                            		even
0003DACA                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DBC0                            		even
0003DBC0                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DCC6                            		even
0003DCC6                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DDBA                            		even
0003DDBA                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E2FE                            		even
0003E2FE                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E964                            		even
0003E964                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EA14                            		even
0003EA14                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EBA6                            		even
0003EBA6                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003ECA8                            		even
0003ECA8                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ED84                            		even
0003ED84                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F200                            		even
0003F200                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F2C0                            		even
0003F2C0                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F434                            		even
0003F434                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F736                            		even
0003F736                            ; ---------------------------------------------------------------------------
0003F736                            ; Compressed graphics - continue screen
0003F736                            ; ---------------------------------------------------------------------------
0003F736                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F9E6                            		even
0003F9E6                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FC20                            		even
0003FC20                            ; ---------------------------------------------------------------------------
0003FC20                            ; Compressed graphics - animals
0003FC20                            ; ---------------------------------------------------------------------------
0003FC20                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FD78                            		even
0003FD78                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FED4                            		even
0003FED4                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040050                            		even
00040050                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004016C                            		even
0004016C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000402A2                            		even
000402A2                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000403DC                            		even
000403DC                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040538                            		even
00040538                            ; ---------------------------------------------------------------------------
00040538                            ; Compressed graphics - primary patterns and block mappings
00040538                            ; ---------------------------------------------------------------------------
00040538                            Blk16_GHZ:	incbin	map16\ghz.bin
00040E4C                            		even
00040E4C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0004275A                            		even
0004275A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043ADA                            		even
00043ADA                            Blk256_GHZ:	incbin	map256\ghz.bin
00045DD8                            		even
00045DD8                            Blk16_LZ:	incbin	map16\lz.bin
00046512                            		even
00046512                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048914                            		even
00048914                            Blk256_LZ:	incbin	map256\lz.bin
0004B294                            		even
0004B294                            Blk16_MZ:	incbin	map16\mz.bin
0004B9F0                            		even
0004B9F0                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E278                            		even
0004E278                            Blk256_MZ:	incbin	map256\mz.bin
0004F9FC                            		even
0004F9FC                            Blk16_SLZ:	incbin	map16\slz.bin
000500C6                            		even
000500C6                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005201A                            		even
0005201A                            Blk256_SLZ:	incbin	map256\slz.bin
00052694                            		even
00052694                            Blk16_SYZ:	incbin	map16\syz.bin
000532BA                            		even
000532BA                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005784C                            		even
0005784C                            Blk256_SYZ:	incbin	map256\syz.bin
000598A8                            		even
000598A8                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A7F0                            		even
0005A7F0                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D1B4                            		even
0005D1B4                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FCAA                            		even
0005FCAA                            ; ---------------------------------------------------------------------------
0005FCAA                            ; Compressed graphics - bosses and ending sequence
0005FCAA                            ; ---------------------------------------------------------------------------
0005FCAA                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000604C4 00                         		even
000604C4                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060B12                            		even
00060B12                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060B8C                            		even
00060B8C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060E76                            		even
00060E76                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000616FA                            		even
000616FA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00062450 00                         		even
00062450                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062BB8                            		even
00062BB8                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00063138                            		even
00063138                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00063258                            		even
00063258                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00063456                            		even
00063456                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064634                            		even
00064634                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064F78                            		even
00064F78                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006534E                            		even
0006534E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000658DE                            		even
000658DE                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065B66                            		even
00065B66                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00066154 00                         		even
00066154                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000663DC                            		even
000663DC                            		incbin	misc\padding2.bin
000664E0                            		even
000664E0                            ; ---------------------------------------------------------------------------
000664E0                            ; Collision data
000664E0                            ; ---------------------------------------------------------------------------
000664E0                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000665E0                            		even
000665E0                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000675E0                            		even
000675E0                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000685E0                            		even
000685E0                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068798 00                         		even
00068798                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068900                            		even
00068900                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068A90                            		even
00068A90                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068C84                            		even
00068C84                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068E8A                            		even
00068E8A                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00069128                            		even
00069128                            ; ---------------------------------------------------------------------------
00069128                            ; Special layouts
00069128                            ; ---------------------------------------------------------------------------
00069128                            SS_1:		incbin	sslayout\1.bin
000693A2                            		even
000693A2                            SS_2:		incbin	sslayout\2.bin
000697B4                            		even
000697B4                            SS_3:		incbin	sslayout\3.bin
00069B10                            		even
00069B10                            SS_4:		incbin	sslayout\4.bin
00069FEA                            		even
00069FEA                            SS_5:		incbin	sslayout\5.bin
0006A4BC                            		even
0006A4BC                            SS_6:		incbin	sslayout\6.bin
0006A7CC                            		even
0006A7CC                            ; ---------------------------------------------------------------------------
0006A7CC                            ; Animated uncompressed graphics
0006A7CC                            ; ---------------------------------------------------------------------------
0006A7CC                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A9CC                            		even
0006A9CC                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006ADCC                            		even
0006ADCC                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B24C                            		even
0006B24C                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B54C                            		even
0006B54C                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BB4C                            		even
0006BB4C                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BE4C                            		even
0006BE4C                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C8CC                            		even
0006C8CC                            
0006C8CC                            ; ---------------------------------------------------------------------------
0006C8CC                            ; Level	layout index
0006C8CC                            ; ---------------------------------------------------------------------------
0006C8CC 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C8D2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C8D8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C8DE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C8E4 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C8EA 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C8F0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C8F6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C8FC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C902 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C908 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C90E 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C914 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C91A 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C920 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C926 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C92C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C932 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C938 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C93E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C944 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C94A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C950 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C956 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C95C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C962 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C968 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C96E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C974                            
0006C974                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CA66                            		even
0006CA66 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CA6A                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CB32                            		even
0006CB32 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CB36                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CC58                            		even
0006CC58                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CC7A                            		even
0006CC7A 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CC7E 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CC82                            
0006CC82                            Level_LZ1:	incbin	levels\lz1.bin
0006CD84                            		even
0006CD84                            Level_LZbg:	incbin	levels\lzbg.bin
0006CE86                            		even
0006CE86 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006CE8A                            Level_LZ2:	incbin	levels\lz2.bin
0006CF24                            		even
0006CF24 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006CF28                            Level_LZ3:	incbin	levels\lz3.bin
0006D042                            		even
0006D042 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D046                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D100                            		even
0006D100 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D104                            
0006D104                            Level_MZ1:	incbin	levels\mz1.bin
0006D1A2                            		even
0006D1A2                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D21C                            		even
0006D21C                            Level_MZ2:	incbin	levels\mz2.bin
0006D2C0                            		even
0006D2C0                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D352                            		even
0006D352 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D356                            Level_MZ3:	incbin	levels\mz3.bin
0006D438                            		even
0006D438                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D4DC 00                         		even
0006D4DC 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D4E0 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D4E4                            
0006D4E4                            Level_SLZ1:	incbin	levels\slz1.bin
0006D5F6                            		even
0006D5F6                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D610                            		even
0006D610                            Level_SLZ2:	incbin	levels\slz2.bin
0006D700                            		even
0006D700                            Level_SLZ3:	incbin	levels\slz3.bin
0006D81A                            		even
0006D81A 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D81E                            
0006D81E                            Level_SYZ1:	incbin	levels\syz1.bin
0006D8DA 00                         		even
0006D8DA                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D914                            		even
0006D914 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D918                            Level_SYZ2:	incbin	levels\syz2.bin
0006DA1C                            		even
0006DA1C 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DA20                            Level_SYZ3:	incbin	levels\syz3.bin
0006DB7A 00                         		even
0006DB7A 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DB7E 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DB82                            
0006DB82                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DCA4                            		even
0006DCA4                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DCE2                            		even
0006DCE2                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DE24                            		even
0006DE24                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006DF8E                            		even
0006DF8E 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006DF92 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006DF96                            Level_End:	incbin	levels\ending.bin
0006DFC6 00                         		even
0006DFC6 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006DFCA                            
0006DFCA                            ; ---------------------------------------------------------------------------
0006DFCA                            ; Animated uncompressed giant ring graphics
0006DFCA                            ; ---------------------------------------------------------------------------
0006DFCA                            Art_BigRing:	incbin	artunc\bigring.bin
0006EC0A                            		even
0006EC0A                            
0006EC0A                            		incbin	misc\padding3.bin
0006ECA6                            		even
0006ECA6                            
0006ECA6                            ; ---------------------------------------------------------------------------
0006ECA6                            ; Sprite locations index
0006ECA6                            ; ---------------------------------------------------------------------------
0006ECA6 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECAA 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECAE 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECB2 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECB6 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECBA 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECBE 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC2 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC6 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECCA 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECCE 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECD2 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECD6 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECDA 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECDE 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECE2 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECE6 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECEA 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECEE 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECF2 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECF6 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECFA 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECFE 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED02 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED06 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED0A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED0E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED12 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED16 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006ED1A 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006ED1E 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006ED22 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006ED26 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006ED2A 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006ED2E 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006ED32 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006ED36 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006ED3C                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F588                            		even
0006F588                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F63C                            		even
0006F63C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00070080                            		even
00070080                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00070428                            		even
00070428                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007075E                            		even
0007075E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070C74                            		even
00070C74                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007110C                            		even
0007110C                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007113E                            		even
0007113E                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00071170                            		even
00071170                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000711A2                            		even
000711A2                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000711D4                            		even
000711D4                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007121E                            		even
0007121E                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007125C                            		even
0007125C                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000715C8                            		even
000715C8                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071A72                            		even
00071A72                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071FE8                            		even
00071FE8                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00072012                            		even
00072012                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007247A                            		even
0007247A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072A5C                            		even
00072A5C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000730CE                            		even
000730CE                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00073638                            		even
00073638                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073C3E                            		even
00073C3E                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007437C                            		even
0007437C                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074A5A                            		even
00074A5A                            ObjPos_FZ:	incbin	objpos\fz.bin
00074A6C                            		even
00074A6C                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074A9E                            		even
00074A9E                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074AD0                            		even
00074AD0                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074B02                            		even
00074B02                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074B34                            		even
00074B34                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074B66                            		even
00074B66                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074B9E                            		even
00074B9E                            ObjPos_End:	incbin	objpos\ending.bin
00074CFA                            		even
00074CFA FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074D00                            ; ---------------------------------------------------------------------------
00074D00                            		incbin	misc\padding4.bin
0007532A                            		even
0007532A                            
0007532A 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007532E 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00075332 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00075336 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007533A 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007533E 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00075342                            ; ---------------------------------------------------------------------------
00075342                            ; PSG instruments used in music
00075342                            ; ---------------------------------------------------------------------------
00075342 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007534E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007535A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00075366                            PSG1:		incbin	sound\psg1.bin
0007537D                            PSG2:		incbin	sound\psg2.bin
00075384                            PSG3:		incbin	sound\psg3.bin
00075395                            PSG4:		incbin	sound\psg4.bin
000753A0                            PSG6:		incbin	sound\psg6.bin
000753AF                            PSG5:		incbin	sound\psg5.bin
000753D9                            PSG7:		incbin	sound\psg7.bin
000753F5                            PSG8:		incbin	sound\psg8.bin
0007541D                            PSG9:		incbin	sound\psg9.bin
0007542E                            
0007542E 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00075436                            ; ---------------------------------------------------------------------------
00075436                            ; Music	Pointers
00075436                            ; ---------------------------------------------------------------------------
00075436 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007543E 0000 0000 0000 0000        		dc.l Music83, Music84
00075446 0000 0000 0000 0000        		dc.l Music85, Music86
0007544E 0000 0000 0000 0000        		dc.l Music87, Music88
00075456 0000 0000 0000 0000        		dc.l Music89, Music8A
0007545E 0000 0000 0000 0000        		dc.l Music8B, Music8C
00075466 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007546E 0000 0000 0000 0000        		dc.l Music8F, Music90
00075476 0000 0000 0000 0000        		dc.l Music91, Music92
0007547E 0000 0000 0000 0000        		dc.l Music93, Music94
00075486 0000 0000 0000 0000        		dc.l Music95, Music96
0007548E 0000 0000 0000 0000        		dc.l Music97, Music98
00075496 0000 0000 0000 0000        		dc.l Music99, Music9A
0007549E 0000 0000 0000 0000        		dc.l Music9B, Music9C
000754A6 0000 0000 0000 0000        		dc.l Music9D, Music9E
000754AE 0000 0000                  		dc.l Music9F
000754B2                            ; ---------------------------------------------------------------------------
000754B2                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000754B2                            ; ---------------------------------------------------------------------------
000754B2 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000754C2 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000754D2 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000754E2 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000754F2 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075502 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075512 9090 9090                  		dc.b $90, $90, $90, $90
00075516                            
00075516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075516                            
00075516                            
00075516                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075516 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007551E 4E71                       		nop	
00075520 4E71                       		nop	
00075522 4E71                       		nop	
00075524                            
00075524                            loc_71B5A:
00075524 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007552C 66F6                       		bne.s	loc_71B5A
0007552E                            
0007552E 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075536 6700                       		beq.s	loc_71B82
00075538 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075540 4E71                       		nop	
00075542 4E71                       		nop	
00075544 4E71                       		nop	
00075546 4E71                       		nop	
00075548 4E71                       		nop	
0007554A 60CA                       		bra.s	sub_71B4C
0007554C                            ; ===========================================================================
0007554C                            
0007554C                            loc_71B82:
0007554C 4DF9 00FF F000             		lea	($FFF000).l,a6
00075552 422E 000E                  		clr.b	$E(a6)
00075556 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007555A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007555E 532E 0001                  		subq.b	#1,1(a6)
00075562 6600                       		bne.s	loc_71B9E
00075564 4EBA 0000                  		jsr	sub_7260C(pc)
00075568                            
00075568                            loc_71B9E:
00075568 102E 0004                  		move.b	4(a6),d0
0007556C 6700                       		beq.s	loc_71BA8
0007556E 4EBA 0000                  		jsr	sub_72504(pc)
00075572                            
00075572                            loc_71BA8:
00075572 4A2E 0024                  		tst.b	$24(a6)
00075576 6700                       		beq.s	loc_71BB2
00075578 4EBA 0000                  		jsr	sub_7267C(pc)
0007557C                            
0007557C                            loc_71BB2:
0007557C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00075580 6700                       		beq.s	loc_71BBC	; if not, branch
00075582 4EBA 0000                  		jsr	Sound_Play(pc)
00075586                            
00075586                            loc_71BBC:
00075586 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007558C 6700                       		beq.s	loc_71BC8
0007558E 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00075592                            
00075592                            loc_71BC8:
00075592 4BEE 0040                  		lea	$40(a6),a5
00075596 4A15                       		tst.b	(a5)
00075598 6A00                       		bpl.s	loc_71BD4
0007559A 4EBA 0000                  		jsr	sub_71C4E(pc)
0007559E                            
0007559E                            loc_71BD4:
0007559E 422E 0008                  		clr.b	8(a6)
000755A2 7E05                       		moveq	#5,d7
000755A4                            
000755A4                            loc_71BDA:
000755A4 DAFC 0030                  		adda.w	#$30,a5
000755A8 4A15                       		tst.b	(a5)
000755AA 6A00                       		bpl.s	loc_71BE6
000755AC 4EBA 0000                  		jsr	sub_71CCA(pc)
000755B0                            
000755B0                            loc_71BE6:
000755B0 51CF FFF2                  		dbf	d7,loc_71BDA
000755B4                            
000755B4 7E02                       		moveq	#2,d7
000755B6                            
000755B6                            loc_71BEC:
000755B6 DAFC 0030                  		adda.w	#$30,a5
000755BA 4A15                       		tst.b	(a5)
000755BC 6A00                       		bpl.s	loc_71BF8
000755BE 4EBA 0000                  		jsr	sub_72850(pc)
000755C2                            
000755C2                            loc_71BF8:
000755C2 51CF FFF2                  		dbf	d7,loc_71BEC
000755C6                            
000755C6 1D7C 0080 000E             		move.b	#$80,$E(a6)
000755CC 7E02                       		moveq	#2,d7
000755CE                            
000755CE                            loc_71C04:
000755CE DAFC 0030                  		adda.w	#$30,a5
000755D2 4A15                       		tst.b	(a5)
000755D4 6A00                       		bpl.s	loc_71C10
000755D6 4EBA 0000                  		jsr	sub_71CCA(pc)
000755DA                            
000755DA                            loc_71C10:
000755DA 51CF FFF2                  		dbf	d7,loc_71C04
000755DE                            
000755DE 7E02                       		moveq	#2,d7
000755E0                            
000755E0                            loc_71C16:
000755E0 DAFC 0030                  		adda.w	#$30,a5
000755E4 4A15                       		tst.b	(a5)
000755E6 6A00                       		bpl.s	loc_71C22
000755E8 4EBA 0000                  		jsr	sub_72850(pc)
000755EC                            
000755EC                            loc_71C22:
000755EC 51CF FFF2                  		dbf	d7,loc_71C16
000755F0 1D7C 0040 000E             		move.b	#$40,$E(a6)
000755F6 DAFC 0030                  		adda.w	#$30,a5
000755FA 4A15                       		tst.b	(a5)
000755FC 6A00                       		bpl.s	loc_71C38
000755FE 4EBA 0000                  		jsr	sub_71CCA(pc)
00075602                            
00075602                            loc_71C38:
00075602 DAFC 0030                  		adda.w	#$30,a5
00075606 4A15                       		tst.b	(a5)
00075608 6A00                       		bpl.s	loc_71C44
0007560A 4EBA 0000                  		jsr	sub_72850(pc)
0007560E                            
0007560E                            loc_71C44:
0007560E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075616 4E75                       		rts	
00075618                            ; End of function sub_71B4C
00075618                            
00075618                            
00075618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075618                            
00075618                            
00075618                            sub_71C4E:				; XREF: sub_71B4C
00075618 532D 000E                  		subq.b	#1,$E(a5)
0007561C 6600                       		bne.s	locret_71CAA
0007561E 1D7C 0080 0008             		move.b	#$80,8(a6)
00075624 286D 0004                  		movea.l	4(a5),a4
00075628                            
00075628                            loc_71C5E:
00075628 7A00                       		moveq	#0,d5
0007562A 1A1C                       		move.b	(a4)+,d5
0007562C 0C05 00E0                  		cmpi.b	#-$20,d5
00075630 6500                       		bcs.s	loc_71C6E
00075632 4EBA 0000                  		jsr	sub_72A5A(pc)
00075636 60F0                       		bra.s	loc_71C5E
00075638                            ; ===========================================================================
00075638                            
00075638                            loc_71C6E:
00075638 4A05                       		tst.b	d5
0007563A 6A00                       		bpl.s	loc_71C84
0007563C 1B45 0010                  		move.b	d5,$10(a5)
00075640 1A1C                       		move.b	(a4)+,d5
00075642 6A00                       		bpl.s	loc_71C84
00075644 534C                       		subq.w	#1,a4
00075646 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007564C 6000                       		bra.s	loc_71C88
0007564E                            ; ===========================================================================
0007564E                            
0007564E                            loc_71C84:
0007564E 4EBA 0000                  		jsr	sub_71D40(pc)
00075652                            
00075652                            loc_71C88:
00075652 2B4C 0004                  		move.l	a4,4(a5)
00075656 0815 0002                  		btst	#2,(a5)
0007565A 6600                       		bne.s	locret_71CAA
0007565C 7000                       		moveq	#0,d0
0007565E 102D 0010                  		move.b	$10(a5),d0
00075662 0C00 0080                  		cmpi.b	#$80,d0
00075666 6700                       		beq.s	locret_71CAA
00075668 0800 0003                  		btst	#3,d0
0007566C 6600                       		bne.s	loc_71CAC
0007566E 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00075674                            
00075674                            locret_71CAA:
00075674 4E75                       		rts	
00075676                            ; ===========================================================================
00075676                            
00075676                            loc_71CAC:
00075676 0400 0088                  		subi.b	#$88,d0
0007567A 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007567E 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00075684 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007568C 4E75                       		rts	
0007568E                            ; End of function sub_71C4E
0007568E                            
0007568E                            ; ===========================================================================
0007568E 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00075694                            
00075694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075694                            
00075694                            
00075694                            sub_71CCA:				; XREF: sub_71B4C
00075694 532D 000E                  		subq.b	#1,$E(a5)
00075698 6600                       		bne.s	loc_71CE0
0007569A 0895 0004                  		bclr	#4,(a5)
0007569E 4EBA 0000                  		jsr	sub_71CEC(pc)
000756A2 4EBA 0000                  		jsr	sub_71E18(pc)
000756A6 6000 0000                  		bra.w	loc_726E2
000756AA                            ; ===========================================================================
000756AA                            
000756AA                            loc_71CE0:
000756AA 4EBA 0000                  		jsr	sub_71D9E(pc)
000756AE 4EBA 0000                  		jsr	sub_71DC6(pc)
000756B2 6000 0000                  		bra.w	loc_71E24
000756B6                            ; End of function sub_71CCA
000756B6                            
000756B6                            
000756B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756B6                            
000756B6                            
000756B6                            sub_71CEC:				; XREF: sub_71CCA
000756B6 286D 0004                  		movea.l	4(a5),a4
000756BA 0895 0001                  		bclr	#1,(a5)
000756BE                            
000756BE                            loc_71CF4:
000756BE 7A00                       		moveq	#0,d5
000756C0 1A1C                       		move.b	(a4)+,d5
000756C2 0C05 00E0                  		cmpi.b	#-$20,d5
000756C6 6500                       		bcs.s	loc_71D04
000756C8 4EBA 0000                  		jsr	sub_72A5A(pc)
000756CC 60F0                       		bra.s	loc_71CF4
000756CE                            ; ===========================================================================
000756CE                            
000756CE                            loc_71D04:
000756CE 4EBA 0000                  		jsr	sub_726FE(pc)
000756D2 4A05                       		tst.b	d5
000756D4 6A00                       		bpl.s	loc_71D1A
000756D6 4EBA 0000                  		jsr	sub_71D22(pc)
000756DA 1A1C                       		move.b	(a4)+,d5
000756DC 6A00                       		bpl.s	loc_71D1A
000756DE 534C                       		subq.w	#1,a4
000756E0 6000 0000                  		bra.w	sub_71D60
000756E4                            ; ===========================================================================
000756E4                            
000756E4                            loc_71D1A:
000756E4 4EBA 0000                  		jsr	sub_71D40(pc)
000756E8 6000 0000                  		bra.w	sub_71D60
000756EC                            ; End of function sub_71CEC
000756EC                            
000756EC                            
000756EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756EC                            
000756EC                            
000756EC                            sub_71D22:				; XREF: sub_71CEC
000756EC 0405 0080                  		subi.b	#$80,d5
000756F0 6700                       		beq.s	loc_71D58
000756F2 DA2D 0008                  		add.b	8(a5),d5
000756F6 0245 007F                  		andi.w	#$7F,d5
000756FA E34D                       		lsl.w	#1,d5
000756FC 41FA 0000                  		lea	word_72790(pc),a0
00075700 3C30 5000                  		move.w	(a0,d5.w),d6
00075704 3B46 0010                  		move.w	d6,$10(a5)
00075708 4E75                       		rts	
0007570A                            ; End of function sub_71D22
0007570A                            
0007570A                            
0007570A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007570A                            
0007570A                            
0007570A                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007570A 1005                       		move.b	d5,d0
0007570C 122D 0002                  		move.b	2(a5),d1
00075710                            
00075710                            loc_71D46:
00075710 5301                       		subq.b	#1,d1
00075712 6700                       		beq.s	loc_71D4E
00075714 D005                       		add.b	d5,d0
00075716 60F8                       		bra.s	loc_71D46
00075718                            ; ===========================================================================
00075718                            
00075718                            loc_71D4E:
00075718 1B40 000F                  		move.b	d0,$F(a5)
0007571C 1B40 000E                  		move.b	d0,$E(a5)
00075720 4E75                       		rts	
00075722                            ; End of function sub_71D40
00075722                            
00075722                            ; ===========================================================================
00075722                            
00075722                            loc_71D58:				; XREF: sub_71D22
00075722 08D5 0001                  		bset	#1,(a5)
00075726 426D 0010                  		clr.w	$10(a5)
0007572A                            
0007572A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007572A                            
0007572A                            
0007572A                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007572A 2B4C 0004                  		move.l	a4,4(a5)
0007572E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075734 0815 0004                  		btst	#4,(a5)
00075738 6600                       		bne.s	locret_71D9C
0007573A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075740 422D 000C                  		clr.b	$C(a5)
00075744 0815 0003                  		btst	#3,(a5)
00075748 6700                       		beq.s	locret_71D9C
0007574A 206D 0014                  		movea.l	$14(a5),a0
0007574E 1B58 0018                  		move.b	(a0)+,$18(a5)
00075752 1B58 0019                  		move.b	(a0)+,$19(a5)
00075756 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007575A 1018                       		move.b	(a0)+,d0
0007575C E208                       		lsr.b	#1,d0
0007575E 1B40 001B                  		move.b	d0,$1B(a5)
00075762 426D 001C                  		clr.w	$1C(a5)
00075766                            
00075766                            locret_71D9C:
00075766 4E75                       		rts	
00075768                            ; End of function sub_71D60
00075768                            
00075768                            
00075768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075768                            
00075768                            
00075768                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075768 4A2D 0012                  		tst.b	$12(a5)
0007576C 6700                       		beq.s	locret_71DC4
0007576E 532D 0012                  		subq.b	#1,$12(a5)
00075772 6600                       		bne.s	locret_71DC4
00075774 08D5 0001                  		bset	#1,(a5)
00075778 4A2D 0001                  		tst.b	1(a5)
0007577C 6B00 0000                  		bmi.w	loc_71DBE
00075780 4EBA 0000                  		jsr	sub_726FE(pc)
00075784 584F                       		addq.w	#4,sp
00075786 4E75                       		rts	
00075788                            ; ===========================================================================
00075788                            
00075788                            loc_71DBE:
00075788 4EBA 0000                  		jsr	sub_729A0(pc)
0007578C 584F                       		addq.w	#4,sp
0007578E                            
0007578E                            locret_71DC4:
0007578E 4E75                       		rts	
00075790                            ; End of function sub_71D9E
00075790                            
00075790                            
00075790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075790                            
00075790                            
00075790                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075790 584F                       		addq.w	#4,sp
00075792 0815 0003                  		btst	#3,(a5)
00075796 6700                       		beq.s	locret_71E16
00075798 4A2D 0018                  		tst.b	$18(a5)
0007579C 6700                       		beq.s	loc_71DDA
0007579E 532D 0018                  		subq.b	#1,$18(a5)
000757A2 4E75                       		rts	
000757A4                            ; ===========================================================================
000757A4                            
000757A4                            loc_71DDA:
000757A4 532D 0019                  		subq.b	#1,$19(a5)
000757A8 6700                       		beq.s	loc_71DE2
000757AA 4E75                       		rts	
000757AC                            ; ===========================================================================
000757AC                            
000757AC                            loc_71DE2:
000757AC 206D 0014                  		movea.l	$14(a5),a0
000757B0 1B68 0001 0019             		move.b	1(a0),$19(a5)
000757B6 4A2D 001B                  		tst.b	$1B(a5)
000757BA 6600                       		bne.s	loc_71DFE
000757BC 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000757C2 442D 001A                  		neg.b	$1A(a5)
000757C6 4E75                       		rts	
000757C8                            ; ===========================================================================
000757C8                            
000757C8                            loc_71DFE:
000757C8 532D 001B                  		subq.b	#1,$1B(a5)
000757CC 1C2D 001A                  		move.b	$1A(a5),d6
000757D0 4886                       		ext.w	d6
000757D2 DC6D 001C                  		add.w	$1C(a5),d6
000757D6 3B46 001C                  		move.w	d6,$1C(a5)
000757DA DC6D 0010                  		add.w	$10(a5),d6
000757DE 594F                       		subq.w	#4,sp
000757E0                            
000757E0                            locret_71E16:
000757E0 4E75                       		rts	
000757E2                            ; End of function sub_71DC6
000757E2                            
000757E2                            
000757E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757E2                            
000757E2                            
000757E2                            sub_71E18:				; XREF: sub_71CCA
000757E2 0815 0001                  		btst	#1,(a5)
000757E6 6600                       		bne.s	locret_71E48
000757E8 3C2D 0010                  		move.w	$10(a5),d6
000757EC 6700                       		beq.s	loc_71E4A
000757EE                            
000757EE                            loc_71E24:				; XREF: sub_71CCA
000757EE 102D 001E                  		move.b	$1E(a5),d0
000757F2 4880                       		ext.w	d0
000757F4 DC40                       		add.w	d0,d6
000757F6 0815 0002                  		btst	#2,(a5)
000757FA 6600                       		bne.s	locret_71E48
000757FC 3206                       		move.w	d6,d1
000757FE E049                       		lsr.w	#8,d1
00075800 103C 00A4                  		move.b	#-$5C,d0
00075804 4EBA 0000                  		jsr	sub_72722(pc)
00075808 1206                       		move.b	d6,d1
0007580A 103C 00A0                  		move.b	#-$60,d0
0007580E 4EBA 0000                  		jsr	sub_72722(pc)
00075812                            
00075812                            locret_71E48:
00075812 4E75                       		rts	
00075814                            ; ===========================================================================
00075814                            
00075814                            loc_71E4A:
00075814 08D5 0001                  		bset	#1,(a5)
00075818 4E75                       		rts	
0007581A                            ; End of function sub_71E18
0007581A                            
0007581A                            ; ===========================================================================
0007581A                            
0007581A                            loc_71E50:				; XREF: sub_71B4C
0007581A 6B00                       		bmi.s	loc_71E94
0007581C 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075822 6700 0000                  		beq.w	loc_71EFE
00075826 1D7C 0002 0003             		move.b	#2,3(a6)
0007582C 7602                       		moveq	#2,d3
0007582E 103C 00B4                  		move.b	#-$4C,d0
00075832 7200                       		moveq	#0,d1
00075834                            
00075834                            loc_71E6A:
00075834 4EBA 0000                  		jsr	sub_7272E(pc)
00075838 4EBA 0000                  		jsr	sub_72764(pc)
0007583C 5200                       		addq.b	#1,d0
0007583E 51CB FFF4                  		dbf	d3,loc_71E6A
00075842                            
00075842 7602                       		moveq	#2,d3
00075844 7028                       		moveq	#$28,d0
00075846                            
00075846                            loc_71E7C:
00075846 1203                       		move.b	d3,d1
00075848 4EBA 0000                  		jsr	sub_7272E(pc)
0007584C 5801                       		addq.b	#4,d1
0007584E 4EBA 0000                  		jsr	sub_7272E(pc)
00075852 51CB FFF2                  		dbf	d3,loc_71E7C
00075856                            
00075856 4EBA 0000                  		jsr	sub_729B6(pc)
0007585A 6000 FDB2                  		bra.w	loc_71C44
0007585E                            ; ===========================================================================
0007585E                            
0007585E                            loc_71E94:				; XREF: loc_71E50
0007585E 422E 0003                  		clr.b	3(a6)
00075862 7630                       		moveq	#$30,d3
00075864 4BEE 0040                  		lea	$40(a6),a5
00075868 7806                       		moveq	#6,d4
0007586A                            
0007586A                            loc_71EA0:
0007586A 0815 0007                  		btst	#7,(a5)
0007586E 6700                       		beq.s	loc_71EB8
00075870 0815 0002                  		btst	#2,(a5)
00075874 6600                       		bne.s	loc_71EB8
00075876 103C 00B4                  		move.b	#-$4C,d0
0007587A 122D 000A                  		move.b	$A(a5),d1
0007587E 4EBA 0000                  		jsr	sub_72722(pc)
00075882                            
00075882                            loc_71EB8:
00075882 DAC3                       		adda.w	d3,a5
00075884 51CC FFE4                  		dbf	d4,loc_71EA0
00075888                            
00075888 4BEE 0220                  		lea	$220(a6),a5
0007588C 7802                       		moveq	#2,d4
0007588E                            
0007588E                            loc_71EC4:
0007588E 0815 0007                  		btst	#7,(a5)
00075892 6700                       		beq.s	loc_71EDC
00075894 0815 0002                  		btst	#2,(a5)
00075898 6600                       		bne.s	loc_71EDC
0007589A 103C 00B4                  		move.b	#-$4C,d0
0007589E 122D 000A                  		move.b	$A(a5),d1
000758A2 4EBA 0000                  		jsr	sub_72722(pc)
000758A6                            
000758A6                            loc_71EDC:
000758A6 DAC3                       		adda.w	d3,a5
000758A8 51CC FFE4                  		dbf	d4,loc_71EC4
000758AC                            
000758AC 4BEE 0340                  		lea	$340(a6),a5
000758B0 0815 0007                  		btst	#7,(a5)
000758B4 6700                       		beq.s	loc_71EFE
000758B6 0815 0002                  		btst	#2,(a5)
000758BA 6600                       		bne.s	loc_71EFE
000758BC 103C 00B4                  		move.b	#-$4C,d0
000758C0 122D 000A                  		move.b	$A(a5),d1
000758C4 4EBA 0000                  		jsr	sub_72722(pc)
000758C8                            
000758C8                            loc_71EFE:
000758C8 6000 FD44                  		bra.w	loc_71C44
000758CC                            
000758CC                            ; ---------------------------------------------------------------------------
000758CC                            ; Subroutine to	play a sound or	music track
000758CC                            ; ---------------------------------------------------------------------------
000758CC                            
000758CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758CC                            
000758CC                            
000758CC                            Sound_Play:				; XREF: sub_71B4C
000758CC 2079 0007 532A             		movea.l	(Go_SoundTypes).l,a0
000758D2 43EE 000A                  		lea	$A(a6),a1	; load music track number
000758D6 1616                       		move.b	0(a6),d3
000758D8 7802                       		moveq	#2,d4
000758DA                            
000758DA                            loc_71F12:
000758DA 1011                       		move.b	(a1),d0		; move track number to d0
000758DC 1200                       		move.b	d0,d1
000758DE 4219                       		clr.b	(a1)+
000758E0 0400 0081                  		subi.b	#$81,d0
000758E4 6500                       		bcs.s	loc_71F3E
000758E6 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000758EC 6700                       		beq.s	loc_71F2C
000758EE 1D41 000A                  		move.b	d1,$A(a6)
000758F2 6000                       		bra.s	loc_71F3E
000758F4                            ; ===========================================================================
000758F4                            
000758F4                            loc_71F2C:
000758F4 0240 007F                  		andi.w	#$7F,d0
000758F8 1430 0000                  		move.b	(a0,d0.w),d2
000758FC B403                       		cmp.b	d3,d2
000758FE 6500                       		bcs.s	loc_71F3E
00075900 1602                       		move.b	d2,d3
00075902 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075906                            
00075906                            loc_71F3E:
00075906 51CC FFD2                  		dbf	d4,loc_71F12
0007590A                            
0007590A 4A03                       		tst.b	d3
0007590C 6B00                       		bmi.s	locret_71F4A
0007590E 1C83                       		move.b	d3,0(a6)
00075910                            
00075910                            locret_71F4A:
00075910 4E75                       		rts	
00075912                            ; End of function Sound_Play
00075912                            
00075912                            
00075912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075912                            
00075912                            
00075912                            Sound_ChkValue:				; XREF: sub_71B4C
00075912 7E00                       		moveq	#0,d7
00075914 1E2E 0009                  		move.b	9(a6),d7
00075918 6700 0000                  		beq.w	Sound_E4
0007591C 6A00                       		bpl.s	locret_71F8C
0007591E 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075924 0C07 009F                  		cmpi.b	#$9F,d7
00075928 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007592C 0C07 00A0                  		cmpi.b	#$A0,d7
00075930 6500 0000                  		bcs.w	locret_71F8C
00075934 0C07 00CF                  		cmpi.b	#$CF,d7
00075938 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007593C 0C07 00D0                  		cmpi.b	#$D0,d7
00075940 6500 0000                  		bcs.w	locret_71F8C
00075944 0C07 00E0                  		cmpi.b	#$E0,d7
00075948 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007594C 0C07 00E5                  		cmpi.b	#$E5,d7
00075950 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075952                            
00075952                            locret_71F8C:
00075952 4E75                       		rts	
00075954                            ; ===========================================================================
00075954                            
00075954                            Sound_E0toE5				; XREF: Sound_ChkValue
00075954 0407 00E0                  		subi.b	#$E0,d7
00075958 E54F                       		lsl.w	#2,d7
0007595A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007595E                            ; ===========================================================================
0007595E                            
0007595E                            Sound_ExIndex:
0007595E 6000 0000                  		bra.w	Sound_E0
00075962                            ; ===========================================================================
00075962 6000 0000                  		bra.w	Sound_E1
00075966                            ; ===========================================================================
00075966 6000 0000                  		bra.w	Sound_E2
0007596A                            ; ===========================================================================
0007596A 6000 0000                  		bra.w	Sound_E3
0007596E                            ; ===========================================================================
0007596E 6000 0000                  		bra.w	Sound_E4
00075972                            ; ===========================================================================
00075972 6000 0000                  		bra.w	Sound_E5
00075976                            ; ===========================================================================
00075976                            ; ---------------------------------------------------------------------------
00075976                            ; Play "Say-gaa" PCM sound
00075976                            ; ---------------------------------------------------------------------------
00075976                            
00075976                            Sound_E1:				  
00075976 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007597C 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075982 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007598A                            PlayPCM_Loop:	  
0007598A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075990 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075994 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075998 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007599A 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007599C 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000759A0 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000759A6 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000759AA 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000759B0 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000759B2 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000759B4                            return_PlayPCM: 
000759B4 584F                       		addq.w	#4,sp 
000759B6 4E75                       		rts
000759B8                            		
000759B8                            ; ---------------------------------------------------------------------------
000759B8                            ; Play you are an idiot pcm sound
000759B8                            ; since the sfx already crashes the game forever load it here :V
000759B8                            ; ---------------------------------------------------------------------------
000759B8                            
000759B8                            Sound_E5: 
000759B8 4EB8 14E8                  		jsr	ClearScreen
000759BC                            		;control port on a5
000759BC 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
000759C2 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
000759C8 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
000759CC 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
000759D0 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
000759D4                            		
000759D4 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
000759D8                            		
000759D8 2ABC 4000 0000             		move.l	#$40000000,(a5)
000759DE 41F9 0002 4278             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
000759E4 4EB8 1664                  		jsr	NemDec
000759E8 43F9 00FF 0000             		lea	($FF0000).l,a1
000759EE 41F9 0002 421A             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000759F4 303C 0000                  		move.w	#0,d0
000759F8 4EB8 1942                  		jsr	EniDec
000759FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00075A02 203C 4304 0003             		move.l	#$43040003,d0
00075A08 7223                       		moveq	#35,d1
00075A0A 740D                       		moveq	#13,d2
00075A0C 4EB8 1644                  		jsr	ShowVDPGraphics
00075A10 7014                       		moveq	#20,d0
00075A12 4EB8 2302                  		jsr	PalLoad2	; load pallet
00075A16                            		
00075A16                            Sound_E5_StartPCM:
00075A16 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075A1C 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075A22 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075A2A                            PlayPCM_LoopE5:	  
00075A2A                            
00075A2A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075A30                            		
00075A30 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075A34                            		
00075A34 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075A38 0200 000F                  		andi.b	#$F,d0
00075A3C 6700                       		beq.s	SfxE5SwapPalette
00075A3E                            		
00075A3E 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075A42 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075A46 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075A48 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075A4A 60DE                       		bra.s	PlayPCM_LoopE5
00075A4C                            		
00075A4C                            SfxE5SwapPalette:
00075A4C                            		
00075A4C 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075A52                            		
00075A52                            		
00075A52 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075A58 6700                       		beq.s	@not_black
00075A5A 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075A60 6000                       		bra.s	@merge
00075A62                            	@not_black:
00075A62 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075A68                            	@merge:
00075A68 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00075A6C 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075A70 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075A76 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00075A7A                            		
00075A7A 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075A7E 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075A82 60A6                       		bra.s	PlayPCM_LoopE5
00075A84                            		
00075A84                            ; ===========================================================================
00075A84                            ; ---------------------------------------------------------------------------
00075A84                            ; Play music track $81-$9F
00075A84                            ; ---------------------------------------------------------------------------
00075A84                            
00075A84                            Sound_81to9F:				; XREF: Sound_ChkValue
00075A84 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075A88 6600                       		bne.s	loc_72024	; if not, branch
00075A8A 4A2E 0027                  		tst.b	$27(a6)
00075A8E 6600 0000                  		bne.w	loc_721B6
00075A92 4BEE 0040                  		lea	$40(a6),a5
00075A96 7009                       		moveq	#9,d0
00075A98                            
00075A98                            loc_71FE6:
00075A98 0895 0002                  		bclr	#2,(a5)
00075A9C DAFC 0030                  		adda.w	#$30,a5
00075AA0 51C8 FFF6                  		dbf	d0,loc_71FE6
00075AA4                            
00075AA4 4BEE 0220                  		lea	$220(a6),a5
00075AA8 7005                       		moveq	#5,d0
00075AAA                            
00075AAA                            loc_71FF8:
00075AAA 0895 0007                  		bclr	#7,(a5)
00075AAE DAFC 0030                  		adda.w	#$30,a5
00075AB2 51C8 FFF6                  		dbf	d0,loc_71FF8
00075AB6 4216                       		clr.b	0(a6)
00075AB8 204E                       		movea.l	a6,a0
00075ABA 43EE 03A0                  		lea	$3A0(a6),a1
00075ABE 303C 0087                  		move.w	#$87,d0
00075AC2                            
00075AC2                            loc_72012:
00075AC2 22D8                       		move.l	(a0)+,(a1)+
00075AC4 51C8 FFFC                  		dbf	d0,loc_72012
00075AC8                            
00075AC8 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075ACE 4216                       		clr.b	0(a6)
00075AD0 6000                       		bra.s	loc_7202C
00075AD2                            ; ===========================================================================
00075AD2                            
00075AD2                            loc_72024:
00075AD2 422E 0027                  		clr.b	$27(a6)
00075AD6 422E 0026                  		clr.b	$26(a6)
00075ADA                            
00075ADA                            loc_7202C:
00075ADA 4EBA 0000                  		jsr	sub_725CA(pc)
00075ADE 2879 0007 533A             		movea.l	(off_719A0).l,a4
00075AE4 0407 0081                  		subi.b	#$81,d7
00075AE8 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075AEE 2879 0007 5332             		movea.l	(Go_MusicIndex).l,a4
00075AF4 E54F                       		lsl.w	#2,d7
00075AF6 2874 7000                  		movea.l	(a4,d7.w),a4
00075AFA 7000                       		moveq	#0,d0
00075AFC 3014                       		move.w	(a4),d0
00075AFE D08C                       		add.l	a4,d0
00075B00 2D40 0018                  		move.l	d0,$18(a6)
00075B04 102C 0005                  		move.b	5(a4),d0
00075B08 1D40 0028                  		move.b	d0,$28(a6)
00075B0C 4A2E 002A                  		tst.b	$2A(a6)
00075B10 6700                       		beq.s	loc_72068
00075B12 102E 0029                  		move.b	$29(a6),d0
00075B16                            
00075B16                            loc_72068:
00075B16 1D40 0002                  		move.b	d0,2(a6)
00075B1A 1D40 0001                  		move.b	d0,1(a6)
00075B1E 7200                       		moveq	#0,d1
00075B20 264C                       		movea.l	a4,a3
00075B22 5C4C                       		addq.w	#6,a4
00075B24 7E00                       		moveq	#0,d7
00075B26 1E2B 0002                  		move.b	2(a3),d7
00075B2A 6700 0000                  		beq.w	loc_72114
00075B2E 5307                       		subq.b	#1,d7
00075B30 123C 00C0                  		move.b	#-$40,d1
00075B34 182B 0004                  		move.b	4(a3),d4
00075B38 7C30                       		moveq	#$30,d6
00075B3A 1A3C 0001                  		move.b	#1,d5
00075B3E 43EE 0040                  		lea	$40(a6),a1
00075B42 45FA 0000                  		lea	byte_721BA(pc),a2
00075B46                            
00075B46                            loc_72098:
00075B46 08D1 0007                  		bset	#7,(a1)
00075B4A 135A 0001                  		move.b	(a2)+,1(a1)
00075B4E 1344 0002                  		move.b	d4,2(a1)
00075B52 1346 000D                  		move.b	d6,$D(a1)
00075B56 1341 000A                  		move.b	d1,$A(a1)
00075B5A 1345 000E                  		move.b	d5,$E(a1)
00075B5E 7000                       		moveq	#0,d0
00075B60 301C                       		move.w	(a4)+,d0
00075B62 D08B                       		add.l	a3,d0
00075B64 2340 0004                  		move.l	d0,4(a1)
00075B68 335C 0008                  		move.w	(a4)+,8(a1)
00075B6C D2C6                       		adda.w	d6,a1
00075B6E 51CF FFD6                  		dbf	d7,loc_72098
00075B72 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075B78 6600                       		bne.s	loc_720D8
00075B7A 702B                       		moveq	#$2B,d0
00075B7C 7200                       		moveq	#0,d1
00075B7E 4EBA 0000                  		jsr	sub_7272E(pc)
00075B82 6000 0000                  		bra.w	loc_72114
00075B86                            ; ===========================================================================
00075B86                            
00075B86                            loc_720D8:
00075B86 7028                       		moveq	#$28,d0
00075B88 7206                       		moveq	#6,d1
00075B8A 4EBA 0000                  		jsr	sub_7272E(pc)
00075B8E 103C 0042                  		move.b	#$42,d0
00075B92 727F                       		moveq	#$7F,d1
00075B94 4EBA 0000                  		jsr	sub_72764(pc)
00075B98 103C 004A                  		move.b	#$4A,d0
00075B9C 727F                       		moveq	#$7F,d1
00075B9E 4EBA 0000                  		jsr	sub_72764(pc)
00075BA2 103C 0046                  		move.b	#$46,d0
00075BA6 727F                       		moveq	#$7F,d1
00075BA8 4EBA 0000                  		jsr	sub_72764(pc)
00075BAC 103C 004E                  		move.b	#$4E,d0
00075BB0 727F                       		moveq	#$7F,d1
00075BB2 4EBA 0000                  		jsr	sub_72764(pc)
00075BB6 103C 00B6                  		move.b	#-$4A,d0
00075BBA 123C 00C0                  		move.b	#-$40,d1
00075BBE 4EBA 0000                  		jsr	sub_72764(pc)
00075BC2                            
00075BC2                            loc_72114:
00075BC2 7E00                       		moveq	#0,d7
00075BC4 1E2B 0003                  		move.b	3(a3),d7
00075BC8 6700                       		beq.s	loc_72154
00075BCA 5307                       		subq.b	#1,d7
00075BCC 43EE 0190                  		lea	$190(a6),a1
00075BD0 45FA 0000                  		lea	byte_721C2(pc),a2
00075BD4                            
00075BD4                            loc_72126:
00075BD4 08D1 0007                  		bset	#7,(a1)
00075BD8 135A 0001                  		move.b	(a2)+,1(a1)
00075BDC 1344 0002                  		move.b	d4,2(a1)
00075BE0 1346 000D                  		move.b	d6,$D(a1)
00075BE4 1345 000E                  		move.b	d5,$E(a1)
00075BE8 7000                       		moveq	#0,d0
00075BEA 301C                       		move.w	(a4)+,d0
00075BEC D08B                       		add.l	a3,d0
00075BEE 2340 0004                  		move.l	d0,4(a1)
00075BF2 335C 0008                  		move.w	(a4)+,8(a1)
00075BF6 101C                       		move.b	(a4)+,d0
00075BF8 135C 000B                  		move.b	(a4)+,$B(a1)
00075BFC D2C6                       		adda.w	d6,a1
00075BFE 51CF FFD4                  		dbf	d7,loc_72126
00075C02                            
00075C02                            loc_72154:
00075C02 43EE 0220                  		lea	$220(a6),a1
00075C06 7E05                       		moveq	#5,d7
00075C08                            
00075C08                            loc_7215A:
00075C08 4A11                       		tst.b	(a1)
00075C0A 6A00 0000                  		bpl.w	loc_7217C
00075C0E 7000                       		moveq	#0,d0
00075C10 1029 0001                  		move.b	1(a1),d0
00075C14 6B00                       		bmi.s	loc_7216E
00075C16 5500                       		subq.b	#2,d0
00075C18 E508                       		lsl.b	#2,d0
00075C1A 6000                       		bra.s	loc_72170
00075C1C                            ; ===========================================================================
00075C1C                            
00075C1C                            loc_7216E:
00075C1C E608                       		lsr.b	#3,d0
00075C1E                            
00075C1E                            loc_72170:
00075C1E 41FA 0000                  		lea	dword_722CC(pc),a0
00075C22 2070 0000                  		movea.l	(a0,d0.w),a0
00075C26 08D0 0002                  		bset	#2,(a0)
00075C2A                            
00075C2A                            loc_7217C:
00075C2A D2C6                       		adda.w	d6,a1
00075C2C 51CF FFDA                  		dbf	d7,loc_7215A
00075C30                            
00075C30 4A6E 0340                  		tst.w	$340(a6)
00075C34 6A00                       		bpl.s	loc_7218E
00075C36 08EE 0002 0100             		bset	#2,$100(a6)
00075C3C                            
00075C3C                            loc_7218E:
00075C3C 4A6E 0370                  		tst.w	$370(a6)
00075C40 6A00                       		bpl.s	loc_7219A
00075C42 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075C48                            
00075C48                            loc_7219A:
00075C48 4BEE 0070                  		lea	$70(a6),a5
00075C4C 7805                       		moveq	#5,d4
00075C4E                            
00075C4E                            loc_721A0:
00075C4E 4EBA 0000                  		jsr	sub_726FE(pc)
00075C52 DAC6                       		adda.w	d6,a5
00075C54 51CC FFF8                  		dbf	d4,loc_721A0
00075C58 7802                       		moveq	#2,d4
00075C5A                            
00075C5A                            loc_721AC:
00075C5A 4EBA 0000                  		jsr	sub_729A0(pc)
00075C5E DAC6                       		adda.w	d6,a5
00075C60 51CC FFF8                  		dbf	d4,loc_721AC
00075C64                            
00075C64                            loc_721B6:
00075C64 584F                       		addq.w	#4,sp
00075C66 4E75                       		rts	
00075C68                            ; ===========================================================================
00075C68 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075C70                            		even
00075C70 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075C74                            		even
00075C74                            ; ===========================================================================
00075C74                            ; ---------------------------------------------------------------------------
00075C74                            ; Play normal sound effect
00075C74                            ; ---------------------------------------------------------------------------
00075C74                            
00075C74                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075C74 4A2E 0027                  		tst.b	$27(a6)
00075C78 6600 0000                  		bne.w	loc_722C6
00075C7C 4A2E 0004                  		tst.b	4(a6)
00075C80 6600 0000                  		bne.w	loc_722C6
00075C84 4A2E 0024                  		tst.b	$24(a6)
00075C88 6600 0000                  		bne.w	loc_722C6
00075C8C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075C90 6600                       		bne.s	Sound_notB5	; if not, branch
00075C92 4A2E 002B                  		tst.b	$2B(a6)
00075C96 6600                       		bne.s	loc_721EE
00075C98 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075C9C                            
00075C9C                            loc_721EE:
00075C9C 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075CA2                            
00075CA2                            Sound_notB5:
00075CA2 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075CA6 6600                       		bne.s	Sound_notA7	; if not, branch
00075CA8 4A2E 002C                  		tst.b	$2C(a6)
00075CAC 6600 0000                  		bne.w	locret_722C4
00075CB0 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075CB6                            
00075CB6                            Sound_notA7:
00075CB6 2079 0007 5336             		movea.l	(Go_SoundIndex).l,a0
00075CBC 0407 00A0                  		subi.b	#$A0,d7
00075CC0 E54F                       		lsl.w	#2,d7
00075CC2 2670 7000                  		movea.l	(a0,d7.w),a3
00075CC6 224B                       		movea.l	a3,a1
00075CC8 7200                       		moveq	#0,d1
00075CCA 3219                       		move.w	(a1)+,d1
00075CCC D28B                       		add.l	a3,d1
00075CCE 1A19                       		move.b	(a1)+,d5
00075CD0 1E19                       		move.b	(a1)+,d7
00075CD2 5307                       		subq.b	#1,d7
00075CD4 7C30                       		moveq	#$30,d6
00075CD6                            
00075CD6                            loc_72228:
00075CD6 7600                       		moveq	#0,d3
00075CD8 1629 0001                  		move.b	1(a1),d3
00075CDC 1803                       		move.b	d3,d4
00075CDE 6B00                       		bmi.s	loc_72244
00075CE0 5543                       		subq.w	#2,d3
00075CE2 E54B                       		lsl.w	#2,d3
00075CE4 4BFA 0000                  		lea	dword_722CC(pc),a5
00075CE8 2A75 3000                  		movea.l	(a5,d3.w),a5
00075CEC 08D5 0002                  		bset	#2,(a5)
00075CF0 6000                       		bra.s	loc_7226E
00075CF2                            ; ===========================================================================
00075CF2                            
00075CF2                            loc_72244:
00075CF2 E64B                       		lsr.w	#3,d3
00075CF4 4BFA 0000                  		lea	dword_722CC(pc),a5
00075CF8 2A75 3000                  		movea.l	(a5,d3.w),a5
00075CFC 08D5 0002                  		bset	#2,(a5)
00075D00 0C04 00C0                  		cmpi.b	#$C0,d4
00075D04 6600                       		bne.s	loc_7226E
00075D06 1004                       		move.b	d4,d0
00075D08 0000 001F                  		ori.b	#$1F,d0
00075D0C 13C0 00C0 0011             		move.b	d0,($C00011).l
00075D12 0840 0005                  		bchg	#5,d0
00075D16 13C0 00C0 0011             		move.b	d0,($C00011).l
00075D1C                            
00075D1C                            loc_7226E:
00075D1C 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075D20 244D                       		movea.l	a5,a2
00075D22 700B                       		moveq	#$B,d0
00075D24                            
00075D24                            loc_72276:
00075D24 429A                       		clr.l	(a2)+
00075D26 51C8 FFFC                  		dbf	d0,loc_72276
00075D2A                            
00075D2A 3A99                       		move.w	(a1)+,(a5)
00075D2C 1B45 0002                  		move.b	d5,2(a5)
00075D30 7000                       		moveq	#0,d0
00075D32 3019                       		move.w	(a1)+,d0
00075D34 D08B                       		add.l	a3,d0
00075D36 2B40 0004                  		move.l	d0,4(a5)
00075D3A 3B59 0008                  		move.w	(a1)+,8(a5)
00075D3E 1B7C 0001 000E             		move.b	#1,$E(a5)
00075D44 1B46 000D                  		move.b	d6,$D(a5)
00075D48 4A04                       		tst.b	d4
00075D4A 6B00                       		bmi.s	loc_722A8
00075D4C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075D52 2B41 0020                  		move.l	d1,$20(a5)
00075D56                            
00075D56                            loc_722A8:
00075D56 51CF FF7E                  		dbf	d7,loc_72228
00075D5A                            
00075D5A 4A2E 0250                  		tst.b	$250(a6)
00075D5E 6A00                       		bpl.s	loc_722B8
00075D60 08EE 0002 0340             		bset	#2,$340(a6)
00075D66                            
00075D66                            loc_722B8:
00075D66 4A2E 0310                  		tst.b	$310(a6)
00075D6A 6A00                       		bpl.s	locret_722C4
00075D6C 08EE 0002 0370             		bset	#2,$370(a6)
00075D72                            
00075D72                            locret_722C4:
00075D72 4E75                       		rts	
00075D74                            ; ===========================================================================
00075D74                            
00075D74                            loc_722C6:
00075D74 4216                       		clr.b	0(a6)
00075D76 4E75                       		rts	
00075D78                            ; ===========================================================================
00075D78 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075D7C 0000 0000                  		dc.l 0
00075D80 00FF F100                  		dc.l $FFF100
00075D84 00FF F130                  		dc.l $FFF130
00075D88 00FF F190                  		dc.l $FFF190
00075D8C 00FF F1C0                  		dc.l $FFF1C0
00075D90 00FF F1F0                  		dc.l $FFF1F0
00075D94 00FF F1F0                  		dc.l $FFF1F0
00075D98 00FF F220                  dword_722EC:	dc.l $FFF220
00075D9C 0000 0000                  		dc.l 0
00075DA0 00FF F250                  		dc.l $FFF250
00075DA4 00FF F280                  		dc.l $FFF280
00075DA8 00FF F2B0                  		dc.l $FFF2B0
00075DAC 00FF F2E0                  		dc.l $FFF2E0
00075DB0 00FF F310                  		dc.l $FFF310
00075DB4 00FF F310                  		dc.l $FFF310
00075DB8                            ; ===========================================================================
00075DB8                            ; ---------------------------------------------------------------------------
00075DB8                            ; Play GHZ waterfall sound
00075DB8                            ; ---------------------------------------------------------------------------
00075DB8                            
00075DB8                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075DB8 4A2E 0027                  		tst.b	$27(a6)
00075DBC 6600 0000                  		bne.w	locret_723C6
00075DC0 4A2E 0004                  		tst.b	4(a6)
00075DC4 6600 0000                  		bne.w	locret_723C6
00075DC8 4A2E 0024                  		tst.b	$24(a6)
00075DCC 6600 0000                  		bne.w	locret_723C6
00075DD0 2079 0007 532E             		movea.l	(Go_SoundD0).l,a0
00075DD6 0407 00D0                  		subi.b	#$D0,d7
00075DDA E54F                       		lsl.w	#2,d7
00075DDC 2670 7000                  		movea.l	(a0,d7.w),a3
00075DE0 224B                       		movea.l	a3,a1
00075DE2 7000                       		moveq	#0,d0
00075DE4 3019                       		move.w	(a1)+,d0
00075DE6 D08B                       		add.l	a3,d0
00075DE8 2D40 0020                  		move.l	d0,$20(a6)
00075DEC 1A19                       		move.b	(a1)+,d5
00075DEE 1E19                       		move.b	(a1)+,d7
00075DF0 5307                       		subq.b	#1,d7
00075DF2 7C30                       		moveq	#$30,d6
00075DF4                            
00075DF4                            loc_72348:
00075DF4 1829 0001                  		move.b	1(a1),d4
00075DF8 6B00                       		bmi.s	loc_7235A
00075DFA 08EE 0002 0100             		bset	#2,$100(a6)
00075E00 4BEE 0340                  		lea	$340(a6),a5
00075E04 6000                       		bra.s	loc_72364
00075E06                            ; ===========================================================================
00075E06                            
00075E06                            loc_7235A:
00075E06 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075E0C 4BEE 0370                  		lea	$370(a6),a5
00075E10                            
00075E10                            loc_72364:
00075E10 244D                       		movea.l	a5,a2
00075E12 700B                       		moveq	#$B,d0
00075E14                            
00075E14                            loc_72368:
00075E14 429A                       		clr.l	(a2)+
00075E16 51C8 FFFC                  		dbf	d0,loc_72368
00075E1A                            
00075E1A 3A99                       		move.w	(a1)+,(a5)
00075E1C 1B45 0002                  		move.b	d5,2(a5)
00075E20 7000                       		moveq	#0,d0
00075E22 3019                       		move.w	(a1)+,d0
00075E24 D08B                       		add.l	a3,d0
00075E26 2B40 0004                  		move.l	d0,4(a5)
00075E2A 3B59 0008                  		move.w	(a1)+,8(a5)
00075E2E 1B7C 0001 000E             		move.b	#1,$E(a5)
00075E34 1B46 000D                  		move.b	d6,$D(a5)
00075E38 4A04                       		tst.b	d4
00075E3A 6B00                       		bmi.s	loc_72396
00075E3C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075E42                            
00075E42                            loc_72396:
00075E42 51CF FFB0                  		dbf	d7,loc_72348
00075E46                            
00075E46 4A2E 0250                  		tst.b	$250(a6)
00075E4A 6A00                       		bpl.s	loc_723A6
00075E4C 08EE 0002 0340             		bset	#2,$340(a6)
00075E52                            
00075E52                            loc_723A6:
00075E52 4A2E 0310                  		tst.b	$310(a6)
00075E56 6A00                       		bpl.s	locret_723C6
00075E58 08EE 0002 0370             		bset	#2,$370(a6)
00075E5E 0004 001F                  		ori.b	#$1F,d4
00075E62 13C4 00C0 0011             		move.b	d4,($C00011).l
00075E68 0844 0005                  		bchg	#5,d4
00075E6C 13C4 00C0 0011             		move.b	d4,($C00011).l
00075E72                            
00075E72                            locret_723C6:
00075E72 4E75                       		rts	
00075E74                            ; End of function Sound_ChkValue
00075E74                            
00075E74                            ; ===========================================================================
00075E74 00FF F100                  		dc.l $FFF100
00075E78 00FF F1F0                  		dc.l $FFF1F0
00075E7C 00FF F250                  		dc.l $FFF250
00075E80 00FF F310                  		dc.l $FFF310
00075E84 00FF F340                  		dc.l $FFF340
00075E88 00FF F370                  		dc.l $FFF370
00075E8C                            
00075E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E8C                            
00075E8C                            
00075E8C                            Snd_FadeOut1:				; XREF: Sound_E0
00075E8C 4216                       		clr.b	0(a6)
00075E8E 4BEE 0220                  		lea	$220(a6),a5
00075E92 7E05                       		moveq	#5,d7
00075E94                            
00075E94                            loc_723EA:
00075E94 4A15                       		tst.b	(a5)
00075E96 6A00 0000                  		bpl.w	loc_72472
00075E9A 0895 0007                  		bclr	#7,(a5)
00075E9E 7600                       		moveq	#0,d3
00075EA0 162D 0001                  		move.b	1(a5),d3
00075EA4 6B00                       		bmi.s	loc_7243C
00075EA6 4EBA 0000                  		jsr	sub_726FE(pc)
00075EAA 0C03 0004                  		cmpi.b	#4,d3
00075EAE 6600                       		bne.s	loc_72416
00075EB0 4A2E 0340                  		tst.b	$340(a6)
00075EB4 6A00                       		bpl.s	loc_72416
00075EB6 4BEE 0340                  		lea	$340(a6),a5
00075EBA 226E 0020                  		movea.l	$20(a6),a1
00075EBE 6000                       		bra.s	loc_72428
00075EC0                            ; ===========================================================================
00075EC0                            
00075EC0                            loc_72416:
00075EC0 5503                       		subq.b	#2,d3
00075EC2 E50B                       		lsl.b	#2,d3
00075EC4 41FA FEB2                  		lea	dword_722CC(pc),a0
00075EC8 264D                       		movea.l	a5,a3
00075ECA 2A70 3000                  		movea.l	(a0,d3.w),a5
00075ECE 226E 0018                  		movea.l	$18(a6),a1
00075ED2                            
00075ED2                            loc_72428:
00075ED2 0895 0002                  		bclr	#2,(a5)
00075ED6 08D5 0001                  		bset	#1,(a5)
00075EDA 102D 000B                  		move.b	$B(a5),d0
00075EDE 4EBA 0000                  		jsr	sub_72C4E(pc)
00075EE2 2A4B                       		movea.l	a3,a5
00075EE4 6000                       		bra.s	loc_72472
00075EE6                            ; ===========================================================================
00075EE6                            
00075EE6                            loc_7243C:
00075EE6 4EBA 0000                  		jsr	sub_729A0(pc)
00075EEA 41EE 0370                  		lea	$370(a6),a0
00075EEE 0C03 00E0                  		cmpi.b	#$E0,d3
00075EF2 6700                       		beq.s	loc_7245A
00075EF4 0C03 00C0                  		cmpi.b	#$C0,d3
00075EF8 6700                       		beq.s	loc_7245A
00075EFA E60B                       		lsr.b	#3,d3
00075EFC 41FA FE7A                  		lea	dword_722CC(pc),a0
00075F00 2070 3000                  		movea.l	(a0,d3.w),a0
00075F04                            
00075F04                            loc_7245A:
00075F04 0890 0002                  		bclr	#2,(a0)
00075F08 08D0 0001                  		bset	#1,(a0)
00075F0C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075F12 6600                       		bne.s	loc_72472
00075F14 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075F1C                            
00075F1C                            loc_72472:
00075F1C DAFC 0030                  		adda.w	#$30,a5
00075F20 51CF FF72                  		dbf	d7,loc_723EA
00075F24                            
00075F24 4E75                       		rts	
00075F26                            ; End of function Snd_FadeOut1
00075F26                            
00075F26                            
00075F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F26                            
00075F26                            
00075F26                            Snd_FadeOut2:				; XREF: Sound_E0
00075F26 4BEE 0340                  		lea	$340(a6),a5
00075F2A 4A15                       		tst.b	(a5)
00075F2C 6A00                       		bpl.s	loc_724AE
00075F2E 0895 0007                  		bclr	#7,(a5)
00075F32 0815 0002                  		btst	#2,(a5)
00075F36 6600                       		bne.s	loc_724AE
00075F38 4EBA 0000                  		jsr	loc_7270A(pc)
00075F3C 4BEE 0100                  		lea	$100(a6),a5
00075F40 0895 0002                  		bclr	#2,(a5)
00075F44 08D5 0001                  		bset	#1,(a5)
00075F48 4A15                       		tst.b	(a5)
00075F4A 6A00                       		bpl.s	loc_724AE
00075F4C 226E 0018                  		movea.l	$18(a6),a1
00075F50 102D 000B                  		move.b	$B(a5),d0
00075F54 4EBA 0000                  		jsr	sub_72C4E(pc)
00075F58                            
00075F58                            loc_724AE:
00075F58 4BEE 0370                  		lea	$370(a6),a5
00075F5C 4A15                       		tst.b	(a5)
00075F5E 6A00                       		bpl.s	locret_724E4
00075F60 0895 0007                  		bclr	#7,(a5)
00075F64 0815 0002                  		btst	#2,(a5)
00075F68 6600                       		bne.s	locret_724E4
00075F6A 4EBA 0000                  		jsr	loc_729A6(pc)
00075F6E 4BEE 01F0                  		lea	$1F0(a6),a5
00075F72 0895 0002                  		bclr	#2,(a5)
00075F76 08D5 0001                  		bset	#1,(a5)
00075F7A 4A15                       		tst.b	(a5)
00075F7C 6A00                       		bpl.s	locret_724E4
00075F7E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075F84 6600                       		bne.s	locret_724E4
00075F86 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075F8E                            
00075F8E                            locret_724E4:
00075F8E 4E75                       		rts	
00075F90                            ; End of function Snd_FadeOut2
00075F90                            
00075F90                            ; ===========================================================================
00075F90                            ; ---------------------------------------------------------------------------
00075F90                            ; Fade out music
00075F90                            ; ---------------------------------------------------------------------------
00075F90                            
00075F90                            Sound_E0:				; XREF: Sound_ExIndex
00075F90 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075F94 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075F98 1D7C 0003 0006             		move.b	#3,6(a6)
00075F9E 1D7C 0028 0004             		move.b	#$28,4(a6)
00075FA4 422E 0040                  		clr.b	$40(a6)
00075FA8 422E 002A                  		clr.b	$2A(a6)
00075FAC 4E75                       		rts	
00075FAE                            
00075FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FAE                            
00075FAE                            
00075FAE                            sub_72504:				; XREF: sub_71B4C
00075FAE 102E 0006                  		move.b	6(a6),d0
00075FB2 6700                       		beq.s	loc_72510
00075FB4 532E 0006                  		subq.b	#1,6(a6)
00075FB8 4E75                       		rts	
00075FBA                            ; ===========================================================================
00075FBA                            
00075FBA                            loc_72510:
00075FBA 532E 0004                  		subq.b	#1,4(a6)
00075FBE 6700 0000                  		beq.w	Sound_E4
00075FC2 1D7C 0003 0006             		move.b	#3,6(a6)
00075FC8 4BEE 0070                  		lea	$70(a6),a5
00075FCC 7E05                       		moveq	#5,d7
00075FCE                            
00075FCE                            loc_72524:
00075FCE 4A15                       		tst.b	(a5)
00075FD0 6A00                       		bpl.s	loc_72538
00075FD2 522D 0009                  		addq.b	#1,9(a5)
00075FD6 6A00                       		bpl.s	loc_72534
00075FD8 0895 0007                  		bclr	#7,(a5)
00075FDC 6000                       		bra.s	loc_72538
00075FDE                            ; ===========================================================================
00075FDE                            
00075FDE                            loc_72534:
00075FDE 4EBA 0000                  		jsr	sub_72CB4(pc)
00075FE2                            
00075FE2                            loc_72538:
00075FE2 DAFC 0030                  		adda.w	#$30,a5
00075FE6 51CF FFE6                  		dbf	d7,loc_72524
00075FEA                            
00075FEA 7E02                       		moveq	#2,d7
00075FEC                            
00075FEC                            loc_72542:
00075FEC 4A15                       		tst.b	(a5)
00075FEE 6A00                       		bpl.s	loc_72560
00075FF0 522D 0009                  		addq.b	#1,9(a5)
00075FF4 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075FFA 6500                       		bcs.s	loc_72558
00075FFC 0895 0007                  		bclr	#7,(a5)
00076000 6000                       		bra.s	loc_72560
00076002                            ; ===========================================================================
00076002                            
00076002                            loc_72558:
00076002 1C2D 0009                  		move.b	9(a5),d6
00076006 4EBA 0000                  		jsr	sub_7296A(pc)
0007600A                            
0007600A                            loc_72560:
0007600A DAFC 0030                  		adda.w	#$30,a5
0007600E 51CF FFDC                  		dbf	d7,loc_72542
00076012                            
00076012 4E75                       		rts	
00076014                            ; End of function sub_72504
00076014                            
00076014                            
00076014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076014                            
00076014                            
00076014                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00076014 7602                       		moveq	#2,d3
00076016 7028                       		moveq	#$28,d0
00076018                            
00076018                            loc_7256E:
00076018 1203                       		move.b	d3,d1
0007601A 4EBA 0000                  		jsr	sub_7272E(pc)
0007601E 5801                       		addq.b	#4,d1
00076020 4EBA 0000                  		jsr	sub_7272E(pc)
00076024 51CB FFF2                  		dbf	d3,loc_7256E
00076028                            
00076028 7040                       		moveq	#$40,d0
0007602A 727F                       		moveq	#$7F,d1
0007602C 7802                       		moveq	#2,d4
0007602E                            
0007602E                            loc_72584:
0007602E 7603                       		moveq	#3,d3
00076030                            
00076030                            loc_72586:
00076030 4EBA 0000                  		jsr	sub_7272E(pc)
00076034 4EBA 0000                  		jsr	sub_72764(pc)
00076038 5840                       		addq.w	#4,d0
0007603A 51CB FFF4                  		dbf	d3,loc_72586
0007603E                            
0007603E 0400 000F                  		subi.b	#$F,d0
00076042 51CC FFEA                  		dbf	d4,loc_72584
00076046                            
00076046 4E75                       		rts	
00076048                            ; End of function sub_7256A
00076048                            
00076048                            ; ===========================================================================
00076048                            ; ---------------------------------------------------------------------------
00076048                            ; Stop music
00076048                            ; ---------------------------------------------------------------------------
00076048                            
00076048                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00076048 702B                       		moveq	#$2B,d0
0007604A 123C 0080                  		move.b	#$80,d1
0007604E 4EBA 0000                  		jsr	sub_7272E(pc)
00076052 7027                       		moveq	#$27,d0
00076054 7200                       		moveq	#0,d1
00076056 4EBA 0000                  		jsr	sub_7272E(pc)
0007605A 204E                       		movea.l	a6,a0
0007605C 303C 00E3                  		move.w	#$E3,d0
00076060                            
00076060                            loc_725B6:
00076060 4298                       		clr.l	(a0)+
00076062 51C8 FFFC                  		dbf	d0,loc_725B6
00076066                            
00076066 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007606C 4EBA FFA6                  		jsr	sub_7256A(pc)
00076070 6000 0000                  		bra.w	sub_729B6
00076074                            
00076074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076074                            
00076074                            
00076074                            sub_725CA:				; XREF: Sound_ChkValue
00076074 204E                       		movea.l	a6,a0
00076076 1216                       		move.b	0(a6),d1
00076078 142E 0027                  		move.b	$27(a6),d2
0007607C 162E 002A                  		move.b	$2A(a6),d3
00076080 182E 0026                  		move.b	$26(a6),d4
00076084 3A2E 000A                  		move.w	$A(a6),d5
00076088 303C 0087                  		move.w	#$87,d0
0007608C                            
0007608C                            loc_725E4:
0007608C 4298                       		clr.l	(a0)+
0007608E 51C8 FFFC                  		dbf	d0,loc_725E4
00076092                            
00076092 1C81                       		move.b	d1,0(a6)
00076094 1D42 0027                  		move.b	d2,$27(a6)
00076098 1D43 002A                  		move.b	d3,$2A(a6)
0007609C 1D44 0026                  		move.b	d4,$26(a6)
000760A0 3D45 000A                  		move.w	d5,$A(a6)
000760A4 1D7C 0080 0009             		move.b	#$80,9(a6)
000760AA 4EBA FF68                  		jsr	sub_7256A(pc)
000760AE 6000 0000                  		bra.w	sub_729B6
000760B2                            ; End of function sub_725CA
000760B2                            
000760B2                            
000760B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000760B2                            
000760B2                            
000760B2                            sub_7260C:				; XREF: sub_71B4C
000760B2 1D6E 0002 0001             		move.b	2(a6),1(a6)
000760B8 41EE 004E                  		lea	$4E(a6),a0
000760BC 7030                       		moveq	#$30,d0
000760BE 7209                       		moveq	#9,d1
000760C0                            
000760C0                            loc_7261A:
000760C0 5210                       		addq.b	#1,(a0)
000760C2 D0C0                       		adda.w	d0,a0
000760C4 51C9 FFFA                  		dbf	d1,loc_7261A
000760C8                            
000760C8 4E75                       		rts	
000760CA                            ; End of function sub_7260C
000760CA                            
000760CA                            ; ===========================================================================
000760CA                            ; ---------------------------------------------------------------------------
000760CA                            ; Speed	up music
000760CA                            ; ---------------------------------------------------------------------------
000760CA                            
000760CA                            Sound_E2:				; XREF: Sound_ExIndex
000760CA 4A2E 0027                  		tst.b	$27(a6)
000760CE 6600                       		bne.s	loc_7263E
000760D0 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000760D6 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000760DC 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000760E2 4E75                       		rts	
000760E4                            ; ===========================================================================
000760E4                            
000760E4                            loc_7263E:
000760E4 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000760EA 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000760F0 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000760F6 4E75                       		rts	
000760F8                            ; ===========================================================================
000760F8                            ; ---------------------------------------------------------------------------
000760F8                            ; Change music back to normal speed
000760F8                            ; ---------------------------------------------------------------------------
000760F8                            
000760F8                            Sound_E3:				; XREF: Sound_ExIndex
000760F8 4A2E 0027                  		tst.b	$27(a6)
000760FC 6600                       		bne.s	loc_7266A
000760FE 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00076104 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007610A 422E 002A                  		clr.b	$2A(a6)
0007610E 4E75                       		rts	
00076110                            ; ===========================================================================
00076110                            
00076110                            loc_7266A:
00076110 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00076116 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007611C 422E 03CA                  		clr.b	$3CA(a6)
00076120 4E75                       		rts	
00076122                            
00076122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076122                            
00076122                            
00076122                            sub_7267C:				; XREF: sub_71B4C
00076122 4A2E 0025                  		tst.b	$25(a6)
00076126 6700                       		beq.s	loc_72688
00076128 532E 0025                  		subq.b	#1,$25(a6)
0007612C 4E75                       		rts	
0007612E                            ; ===========================================================================
0007612E                            
0007612E                            loc_72688:
0007612E 4A2E 0026                  		tst.b	$26(a6)
00076132 6700                       		beq.s	loc_726D6
00076134 532E 0026                  		subq.b	#1,$26(a6)
00076138 1D7C 0002 0025             		move.b	#2,$25(a6)
0007613E 4BEE 0070                  		lea	$70(a6),a5
00076142 7E05                       		moveq	#5,d7
00076144                            
00076144                            loc_7269E:
00076144 4A15                       		tst.b	(a5)
00076146 6A00                       		bpl.s	loc_726AA
00076148 532D 0009                  		subq.b	#1,9(a5)
0007614C 4EBA 0000                  		jsr	sub_72CB4(pc)
00076150                            
00076150                            loc_726AA:
00076150 DAFC 0030                  		adda.w	#$30,a5
00076154 51CF FFEE                  		dbf	d7,loc_7269E
00076158 7E02                       		moveq	#2,d7
0007615A                            
0007615A                            loc_726B4:
0007615A 4A15                       		tst.b	(a5)
0007615C 6A00                       		bpl.s	loc_726CC
0007615E 532D 0009                  		subq.b	#1,9(a5)
00076162 1C2D 0009                  		move.b	9(a5),d6
00076166 0C06 0010                  		cmpi.b	#$10,d6
0007616A 6500                       		bcs.s	loc_726C8
0007616C 7C0F                       		moveq	#$F,d6
0007616E                            
0007616E                            loc_726C8:
0007616E 4EBA 0000                  		jsr	sub_7296A(pc)
00076172                            
00076172                            loc_726CC:
00076172 DAFC 0030                  		adda.w	#$30,a5
00076176 51CF FFE2                  		dbf	d7,loc_726B4
0007617A 4E75                       		rts	
0007617C                            ; ===========================================================================
0007617C                            
0007617C                            loc_726D6:
0007617C 08AE 0002 0040             		bclr	#2,$40(a6)
00076182 422E 0024                  		clr.b	$24(a6)
00076186 4E75                       		rts	
00076188                            ; End of function sub_7267C
00076188                            
00076188                            ; ===========================================================================
00076188                            
00076188                            loc_726E2:				; XREF: sub_71CCA
00076188 0815 0001                  		btst	#1,(a5)
0007618C 6600                       		bne.s	locret_726FC
0007618E 0815 0002                  		btst	#2,(a5)
00076192 6600                       		bne.s	locret_726FC
00076194 7028                       		moveq	#$28,d0
00076196 122D 0001                  		move.b	1(a5),d1
0007619A 0001 00F0                  		ori.b	#-$10,d1
0007619E 6000 0000                  		bra.w	sub_7272E
000761A2                            ; ===========================================================================
000761A2                            
000761A2                            locret_726FC:
000761A2 4E75                       		rts	
000761A4                            
000761A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761A4                            
000761A4                            
000761A4                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000761A4 0815 0004                  		btst	#4,(a5)
000761A8 6600                       		bne.s	locret_72714
000761AA 0815 0002                  		btst	#2,(a5)
000761AE 6600                       		bne.s	locret_72714
000761B0                            
000761B0                            loc_7270A:				; XREF: Snd_FadeOut2
000761B0 7028                       		moveq	#$28,d0
000761B2 122D 0001                  		move.b	1(a5),d1
000761B6 6000 0000                  		bra.w	sub_7272E
000761BA                            ; ===========================================================================
000761BA                            
000761BA                            locret_72714:
000761BA 4E75                       		rts	
000761BC                            ; End of function sub_726FE
000761BC                            
000761BC                            ; ===========================================================================
000761BC                            
000761BC                            loc_72716:				; XREF: sub_72A5A
000761BC 0815 0002                  		btst	#2,(a5)
000761C0 6600                       		bne.s	locret_72720
000761C2 6000 0000                  		bra.w	sub_72722
000761C6                            ; ===========================================================================
000761C6                            
000761C6                            locret_72720:
000761C6 4E75                       		rts	
000761C8                            
000761C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761C8                            
000761C8                            
000761C8                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000761C8 082D 0002 0001             		btst	#2,1(a5)
000761CE 6600                       		bne.s	loc_7275A
000761D0 D02D 0001                  		add.b	1(a5),d0
000761D4                            ; End of function sub_72722
000761D4                            
000761D4                            
000761D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761D4                            
000761D4                            
000761D4                            sub_7272E:				; XREF: loc_71E6A
000761D4 1439 00A0 4000             		move.b	($A04000).l,d2
000761DA 0802 0007                  		btst	#7,d2
000761DE 66F4                       		bne.s	sub_7272E
000761E0 13C0 00A0 4000             		move.b	d0,($A04000).l
000761E6 4E71                       		nop	
000761E8 4E71                       		nop	
000761EA 4E71                       		nop	
000761EC                            
000761EC                            loc_72746:
000761EC 1439 00A0 4000             		move.b	($A04000).l,d2
000761F2 0802 0007                  		btst	#7,d2
000761F6 66F4                       		bne.s	loc_72746
000761F8                            
000761F8 13C1 00A0 4001             		move.b	d1,($A04001).l
000761FE 4E75                       		rts	
00076200                            ; End of function sub_7272E
00076200                            
00076200                            ; ===========================================================================
00076200                            
00076200                            loc_7275A:				; XREF: sub_72722
00076200 142D 0001                  		move.b	1(a5),d2
00076204 0882 0002                  		bclr	#2,d2
00076208 D002                       		add.b	d2,d0
0007620A                            
0007620A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007620A                            
0007620A                            
0007620A                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007620A 1439 00A0 4000             		move.b	($A04000).l,d2
00076210 0802 0007                  		btst	#7,d2
00076214 66F4                       		bne.s	sub_72764
00076216 13C0 00A0 4002             		move.b	d0,($A04002).l
0007621C 4E71                       		nop	
0007621E 4E71                       		nop	
00076220 4E71                       		nop	
00076222                            
00076222                            loc_7277C:
00076222 1439 00A0 4000             		move.b	($A04000).l,d2
00076228 0802 0007                  		btst	#7,d2
0007622C 66F4                       		bne.s	loc_7277C
0007622E                            
0007622E 13C1 00A0 4003             		move.b	d1,($A04003).l
00076234 4E75                       		rts	
00076236                            ; End of function sub_72764
00076236                            
00076236                            ; ===========================================================================
00076236 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00076248 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007625A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007626A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007627A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007628A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007629A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000762AA 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000762BA 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000762CA 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000762DA 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000762EA 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000762F6                            
000762F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762F6                            
000762F6                            
000762F6                            sub_72850:				; XREF: sub_71B4C
000762F6 532D 000E                  		subq.b	#1,$E(a5)
000762FA 6600                       		bne.s	loc_72866
000762FC 0895 0004                  		bclr	#4,(a5)
00076300 4EBA 0000                  		jsr	sub_72878(pc)
00076304 4EBA 0000                  		jsr	sub_728DC(pc)
00076308 6000 0000                  		bra.w	loc_7292E
0007630C                            ; ===========================================================================
0007630C                            
0007630C                            loc_72866:
0007630C 4EBA F45A                  		jsr	sub_71D9E(pc)
00076310 4EBA 0000                  		jsr	sub_72926(pc)
00076314 4EBA F47A                  		jsr	sub_71DC6(pc)
00076318 4EBA 0000                  		jsr	sub_728E2(pc)
0007631C 4E75                       		rts	
0007631E                            ; End of function sub_72850
0007631E                            
0007631E                            
0007631E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007631E                            
0007631E                            
0007631E                            sub_72878:				; XREF: sub_72850
0007631E 0895 0001                  		bclr	#1,(a5)
00076322 286D 0004                  		movea.l	4(a5),a4
00076326                            
00076326                            loc_72880:
00076326 7A00                       		moveq	#0,d5
00076328 1A1C                       		move.b	(a4)+,d5
0007632A 0C05 00E0                  		cmpi.b	#$E0,d5
0007632E 6500                       		bcs.s	loc_72890
00076330 4EBA 0000                  		jsr	sub_72A5A(pc)
00076334 60F0                       		bra.s	loc_72880
00076336                            ; ===========================================================================
00076336                            
00076336                            loc_72890:
00076336 4A05                       		tst.b	d5
00076338 6A00                       		bpl.s	loc_728A4
0007633A 4EBA 0000                  		jsr	sub_728AC(pc)
0007633E 1A1C                       		move.b	(a4)+,d5
00076340 4A05                       		tst.b	d5
00076342 6A00                       		bpl.s	loc_728A4
00076344 534C                       		subq.w	#1,a4
00076346 6000 F3E2                  		bra.w	sub_71D60
0007634A                            ; ===========================================================================
0007634A                            
0007634A                            loc_728A4:
0007634A 4EBA F3BE                  		jsr	sub_71D40(pc)
0007634E 6000 F3DA                  		bra.w	sub_71D60
00076352                            ; End of function sub_72878
00076352                            
00076352                            
00076352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076352                            
00076352                            
00076352                            sub_728AC:				; XREF: sub_72878
00076352 0405 0081                  		subi.b	#$81,d5
00076356 6500                       		bcs.s	loc_728CA
00076358 DA2D 0008                  		add.b	8(a5),d5
0007635C 0245 007F                  		andi.w	#$7F,d5
00076360 E34D                       		lsl.w	#1,d5
00076362 41FA 0000                  		lea	word_729CE(pc),a0
00076366 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007636C 6000 F3BC                  		bra.w	sub_71D60
00076370                            ; ===========================================================================
00076370                            
00076370                            loc_728CA:
00076370 08D5 0001                  		bset	#1,(a5)
00076374 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007637A 4EBA F3AE                  		jsr	sub_71D60(pc)
0007637E 6000 0000                  		bra.w	sub_729A0
00076382                            ; End of function sub_728AC
00076382                            
00076382                            
00076382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076382                            
00076382                            
00076382                            sub_728DC:				; XREF: sub_72850
00076382 3C2D 0010                  		move.w	$10(a5),d6
00076386 6B00                       		bmi.s	loc_72920
00076388                            ; End of function sub_728DC
00076388                            
00076388                            
00076388                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076388                            
00076388                            
00076388                            sub_728E2:				; XREF: sub_72850
00076388 102D 001E                  		move.b	$1E(a5),d0
0007638C 4880                       		ext.w	d0
0007638E DC40                       		add.w	d0,d6
00076390 0815 0002                  		btst	#2,(a5)
00076394 6600                       		bne.s	locret_7291E
00076396 0815 0001                  		btst	#1,(a5)
0007639A 6600                       		bne.s	locret_7291E
0007639C 102D 0001                  		move.b	1(a5),d0
000763A0 0C00 00E0                  		cmpi.b	#$E0,d0
000763A4 6600                       		bne.s	loc_72904
000763A6 103C 00C0                  		move.b	#$C0,d0
000763AA                            
000763AA                            loc_72904:
000763AA 3206                       		move.w	d6,d1
000763AC 0201 000F                  		andi.b	#$F,d1
000763B0 8001                       		or.b	d1,d0
000763B2 E84E                       		lsr.w	#4,d6
000763B4 0206 003F                  		andi.b	#$3F,d6
000763B8 13C0 00C0 0011             		move.b	d0,($C00011).l
000763BE 13C6 00C0 0011             		move.b	d6,($C00011).l
000763C4                            
000763C4                            locret_7291E:
000763C4 4E75                       		rts	
000763C6                            ; End of function sub_728E2
000763C6                            
000763C6                            ; ===========================================================================
000763C6                            
000763C6                            loc_72920:				; XREF: sub_728DC
000763C6 08D5 0001                  		bset	#1,(a5)
000763CA 4E75                       		rts	
000763CC                            
000763CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763CC                            
000763CC                            
000763CC                            sub_72926:				; XREF: sub_72850
000763CC 4A2D 000B                  		tst.b	$B(a5)
000763D0 6700 0000                  		beq.w	locret_7298A
000763D4                            
000763D4                            loc_7292E:				; XREF: sub_72850
000763D4 1C2D 0009                  		move.b	9(a5),d6
000763D8 7000                       		moveq	#0,d0
000763DA 102D 000B                  		move.b	$B(a5),d0
000763DE 6700                       		beq.s	sub_7296A
000763E0 2079 0007 533E             		movea.l	(Go_PSGIndex).l,a0
000763E6 5340                       		subq.w	#1,d0
000763E8 E548                       		lsl.w	#2,d0
000763EA 2070 0000                  		movea.l	(a0,d0.w),a0
000763EE 102D 000C                  		move.b	$C(a5),d0
000763F2 1030 0000                  		move.b	(a0,d0.w),d0
000763F6 522D 000C                  		addq.b	#1,$C(a5)
000763FA 0800 0007                  		btst	#7,d0
000763FE 6700                       		beq.s	loc_72960
00076400 0C00 0080                  		cmpi.b	#$80,d0
00076404 6700                       		beq.s	loc_7299A
00076406                            
00076406                            loc_72960:
00076406 DC40                       		add.w	d0,d6
00076408 0C06 0010                  		cmpi.b	#$10,d6
0007640C 6500                       		bcs.s	sub_7296A
0007640E 7C0F                       		moveq	#$F,d6
00076410                            ; End of function sub_72926
00076410                            
00076410                            
00076410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076410                            
00076410                            
00076410                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00076410 0815 0001                  		btst	#1,(a5)
00076414 6600                       		bne.s	locret_7298A
00076416 0815 0002                  		btst	#2,(a5)
0007641A 6600                       		bne.s	locret_7298A
0007641C 0815 0004                  		btst	#4,(a5)
00076420 6600                       		bne.s	loc_7298C
00076422                            
00076422                            loc_7297C:
00076422 8C2D 0001                  		or.b	1(a5),d6
00076426 0606 0010                  		addi.b	#$10,d6
0007642A 13C6 00C0 0011             		move.b	d6,($C00011).l
00076430                            
00076430                            locret_7298A:
00076430 4E75                       		rts	
00076432                            ; ===========================================================================
00076432                            
00076432                            loc_7298C:
00076432 4A2D 0013                  		tst.b	$13(a5)
00076436 67EA                       		beq.s	loc_7297C
00076438 4A2D 0012                  		tst.b	$12(a5)
0007643C 66E4                       		bne.s	loc_7297C
0007643E 4E75                       		rts	
00076440                            ; End of function sub_7296A
00076440                            
00076440                            ; ===========================================================================
00076440                            
00076440                            loc_7299A:				; XREF: sub_72926
00076440 532D 000C                  		subq.b	#1,$C(a5)
00076444 4E75                       		rts	
00076446                            
00076446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076446                            
00076446                            
00076446                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00076446 0815 0002                  		btst	#2,(a5)
0007644A 6600                       		bne.s	locret_729B4
0007644C                            
0007644C                            loc_729A6:				; XREF: Snd_FadeOut2
0007644C 102D 0001                  		move.b	1(a5),d0
00076450 0000 001F                  		ori.b	#$1F,d0
00076454 13C0 00C0 0011             		move.b	d0,($C00011).l
0007645A                            
0007645A                            locret_729B4:
0007645A 4E75                       		rts	
0007645C                            ; End of function sub_729A0
0007645C                            
0007645C                            
0007645C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007645C                            
0007645C                            
0007645C                            sub_729B6:				; XREF: loc_71E7C
0007645C 41F9 00C0 0011             		lea	($C00011).l,a0
00076462 10BC 009F                  		move.b	#$9F,(a0)
00076466 10BC 00BF                  		move.b	#$BF,(a0)
0007646A 10BC 00DF                  		move.b	#$DF,(a0)
0007646E 10BC 00FF                  		move.b	#$FF,(a0)
00076472 4E75                       		rts	
00076474                            ; End of function sub_729B6
00076474                            
00076474                            ; ===========================================================================
00076474 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00076486 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00076498 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000764AC 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000764C0 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000764D4 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000764E8 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000764FC 0011 0000                  		dc.w $11, 0
00076500                            
00076500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076500                            
00076500                            
00076500                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00076500 0445 00E0                  		subi.w	#$E0,d5
00076504 E54D                       		lsl.w	#2,d5
00076506 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007650A                            ; End of function sub_72A5A
0007650A                            
0007650A                            ; ===========================================================================
0007650A                            
0007650A                            loc_72A64:
0007650A 6000 0000                  		bra.w	loc_72ACC
0007650E                            ; ===========================================================================
0007650E 6000 0000                  		bra.w	loc_72AEC
00076512                            ; ===========================================================================
00076512 6000 0000                  		bra.w	loc_72AF2
00076516                            ; ===========================================================================
00076516 6000 0000                  		bra.w	loc_72AF8
0007651A                            ; ===========================================================================
0007651A 6000 0000                  		bra.w	loc_72B14
0007651E                            ; ===========================================================================
0007651E 6000 0000                  		bra.w	loc_72B9E
00076522                            ; ===========================================================================
00076522 6000 0000                  		bra.w	loc_72BA4
00076526                            ; ===========================================================================
00076526 6000 0000                  		bra.w	loc_72BAE
0007652A                            ; ===========================================================================
0007652A 6000 0000                  		bra.w	loc_72BB4
0007652E                            ; ===========================================================================
0007652E 6000 0000                  		bra.w	loc_72BBE
00076532                            ; ===========================================================================
00076532 6000 0000                  		bra.w	loc_72BC6
00076536                            ; ===========================================================================
00076536 6000 0000                  		bra.w	loc_72BD0
0007653A                            ; ===========================================================================
0007653A 6000 0000                  		bra.w	loc_72BE6
0007653E                            ; ===========================================================================
0007653E 6000 0000                  		bra.w	loc_72BEE
00076542                            ; ===========================================================================
00076542 6000 0000                  		bra.w	loc_72BF4
00076546                            ; ===========================================================================
00076546 6000 0000                  		bra.w	loc_72C26
0007654A                            ; ===========================================================================
0007654A 6000 0000                  		bra.w	loc_72D30
0007654E                            ; ===========================================================================
0007654E 6000 0000                  		bra.w	loc_72D52
00076552                            ; ===========================================================================
00076552 6000 0000                  		bra.w	loc_72D58
00076556                            ; ===========================================================================
00076556 6000 0000                  		bra.w	loc_72E06
0007655A                            ; ===========================================================================
0007655A 6000 0000                  		bra.w	loc_72E20
0007655E                            ; ===========================================================================
0007655E 6000 0000                  		bra.w	loc_72E26
00076562                            ; ===========================================================================
00076562 6000 0000                  		bra.w	loc_72E2C
00076566                            ; ===========================================================================
00076566 6000 0000                  		bra.w	loc_72E38
0007656A                            ; ===========================================================================
0007656A 6000 0000                  		bra.w	loc_72E52
0007656E                            ; ===========================================================================
0007656E 6000 0000                  		bra.w	loc_72E64
00076572                            ; ===========================================================================
00076572                            
00076572                            loc_72ACC:				; XREF: loc_72A64
00076572 121C                       		move.b	(a4)+,d1
00076574 4A2D 0001                  		tst.b	1(a5)
00076578 6B00                       		bmi.s	locret_72AEA
0007657A 102D 000A                  		move.b	$A(a5),d0
0007657E 0200 0037                  		andi.b	#$37,d0
00076582 8200                       		or.b	d0,d1
00076584 1B41 000A                  		move.b	d1,$A(a5)
00076588 103C 00B4                  		move.b	#$B4,d0
0007658C 6000 FC2E                  		bra.w	loc_72716
00076590                            ; ===========================================================================
00076590                            
00076590                            locret_72AEA:
00076590 4E75                       		rts	
00076592                            ; ===========================================================================
00076592                            
00076592                            loc_72AEC:				; XREF: loc_72A64
00076592 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00076596 4E75                       		rts	
00076598                            ; ===========================================================================
00076598                            
00076598                            loc_72AF2:				; XREF: loc_72A64
00076598 1D5C 0007                  		move.b	(a4)+,7(a6)
0007659C 4E75                       		rts	
0007659E                            ; ===========================================================================
0007659E                            
0007659E                            loc_72AF8:				; XREF: loc_72A64
0007659E 7000                       		moveq	#0,d0
000765A0 102D 000D                  		move.b	$D(a5),d0
000765A4 2875 0000                  		movea.l	(a5,d0.w),a4
000765A8 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000765B0 544C                       		addq.w	#2,a4
000765B2 5800                       		addq.b	#4,d0
000765B4 1B40 000D                  		move.b	d0,$D(a5)
000765B8 4E75                       		rts	
000765BA                            ; ===========================================================================
000765BA                            
000765BA                            loc_72B14:				; XREF: loc_72A64
000765BA 204E                       		movea.l	a6,a0
000765BC 43EE 03A0                  		lea	$3A0(a6),a1
000765C0 303C 0087                  		move.w	#$87,d0
000765C4                            
000765C4                            loc_72B1E:
000765C4 20D9                       		move.l	(a1)+,(a0)+
000765C6 51C8 FFFC                  		dbf	d0,loc_72B1E
000765CA                            
000765CA 08EE 0002 0040             		bset	#2,$40(a6)
000765D0 264D                       		movea.l	a5,a3
000765D2 1C3C 0028                  		move.b	#$28,d6
000765D6 9C2E 0026                  		sub.b	$26(a6),d6
000765DA 7E05                       		moveq	#5,d7
000765DC 4BEE 0070                  		lea	$70(a6),a5
000765E0                            
000765E0                            loc_72B3A:
000765E0 0815 0007                  		btst	#7,(a5)
000765E4 6700                       		beq.s	loc_72B5C
000765E6 08D5 0001                  		bset	#1,(a5)
000765EA DD2D 0009                  		add.b	d6,9(a5)
000765EE 0815 0002                  		btst	#2,(a5)
000765F2 6600                       		bne.s	loc_72B5C
000765F4 7000                       		moveq	#0,d0
000765F6 102D 000B                  		move.b	$B(a5),d0
000765FA 226E 0018                  		movea.l	$18(a6),a1
000765FE 4EBA 0000                  		jsr	sub_72C4E(pc)
00076602                            
00076602                            loc_72B5C:
00076602 DAFC 0030                  		adda.w	#$30,a5
00076606 51CF FFD8                  		dbf	d7,loc_72B3A
0007660A                            
0007660A 7E02                       		moveq	#2,d7
0007660C                            
0007660C                            loc_72B66:
0007660C 0815 0007                  		btst	#7,(a5)
00076610 6700                       		beq.s	loc_72B78
00076612 08D5 0001                  		bset	#1,(a5)
00076616 4EBA FE2E                  		jsr	sub_729A0(pc)
0007661A DD2D 0009                  		add.b	d6,9(a5)
0007661E                            
0007661E                            loc_72B78:
0007661E DAFC 0030                  		adda.w	#$30,a5
00076622 51CF FFE8                  		dbf	d7,loc_72B66
00076626 2A4B                       		movea.l	a3,a5
00076628 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007662E 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076634 422E 0027                  		clr.b	$27(a6)
00076638 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00076640 504F                       		addq.w	#8,sp
00076642 4E75                       		rts	
00076644                            ; ===========================================================================
00076644                            
00076644                            loc_72B9E:				; XREF: loc_72A64
00076644 1B5C 0002                  		move.b	(a4)+,2(a5)
00076648 4E75                       		rts	
0007664A                            ; ===========================================================================
0007664A                            
0007664A                            loc_72BA4:				; XREF: loc_72A64
0007664A 101C                       		move.b	(a4)+,d0
0007664C D12D 0009                  		add.b	d0,9(a5)
00076650 6000 0000                  		bra.w	sub_72CB4
00076654                            ; ===========================================================================
00076654                            
00076654                            loc_72BAE:				; XREF: loc_72A64
00076654 08D5 0004                  		bset	#4,(a5)
00076658 4E75                       		rts	
0007665A                            ; ===========================================================================
0007665A                            
0007665A                            loc_72BB4:				; XREF: loc_72A64
0007665A 1B54 0012                  		move.b	(a4),$12(a5)
0007665E 1B5C 0013                  		move.b	(a4)+,$13(a5)
00076662 4E75                       		rts	
00076664                            ; ===========================================================================
00076664                            
00076664                            loc_72BBE:				; XREF: loc_72A64
00076664 101C                       		move.b	(a4)+,d0
00076666 D12D 0008                  		add.b	d0,8(a5)
0007666A 4E75                       		rts	
0007666C                            ; ===========================================================================
0007666C                            
0007666C                            loc_72BC6:				; XREF: loc_72A64
0007666C 1D54 0002                  		move.b	(a4),2(a6)
00076670 1D5C 0001                  		move.b	(a4)+,1(a6)
00076674 4E75                       		rts	
00076676                            ; ===========================================================================
00076676                            
00076676                            loc_72BD0:				; XREF: loc_72A64
00076676 41EE 0040                  		lea	$40(a6),a0
0007667A 101C                       		move.b	(a4)+,d0
0007667C 7230                       		moveq	#$30,d1
0007667E 7409                       		moveq	#9,d2
00076680                            
00076680                            loc_72BDA:
00076680 1140 0002                  		move.b	d0,2(a0)
00076684 D0C1                       		adda.w	d1,a0
00076686 51CA FFF8                  		dbf	d2,loc_72BDA
0007668A                            
0007668A 4E75                       		rts	
0007668C                            ; ===========================================================================
0007668C                            
0007668C                            loc_72BE6:				; XREF: loc_72A64
0007668C 101C                       		move.b	(a4)+,d0
0007668E D12D 0009                  		add.b	d0,9(a5)
00076692 4E75                       		rts	
00076694                            ; ===========================================================================
00076694                            
00076694                            loc_72BEE:				; XREF: loc_72A64
00076694 422E 002C                  		clr.b	$2C(a6)
00076698 4E75                       		rts	
0007669A                            ; ===========================================================================
0007669A                            
0007669A                            loc_72BF4:				; XREF: loc_72A64
0007669A 0895 0007                  		bclr	#7,(a5)
0007669E 0895 0004                  		bclr	#4,(a5)
000766A2 4EBA FB00                  		jsr	sub_726FE(pc)
000766A6 4A2E 0250                  		tst.b	$250(a6)
000766AA 6B00                       		bmi.s	loc_72C22
000766AC 264D                       		movea.l	a5,a3
000766AE 4BEE 0100                  		lea	$100(a6),a5
000766B2 226E 0018                  		movea.l	$18(a6),a1
000766B6 0895 0002                  		bclr	#2,(a5)
000766BA 08D5 0001                  		bset	#1,(a5)
000766BE 102D 000B                  		move.b	$B(a5),d0
000766C2 4EBA 0000                  		jsr	sub_72C4E(pc)
000766C6 2A4B                       		movea.l	a3,a5
000766C8                            
000766C8                            loc_72C22:
000766C8 504F                       		addq.w	#8,sp
000766CA 4E75                       		rts	
000766CC                            ; ===========================================================================
000766CC                            
000766CC                            loc_72C26:				; XREF: loc_72A64
000766CC 7000                       		moveq	#0,d0
000766CE 101C                       		move.b	(a4)+,d0
000766D0 1B40 000B                  		move.b	d0,$B(a5)
000766D4 0815 0002                  		btst	#2,(a5)
000766D8 6600 0000                  		bne.w	locret_72CAA
000766DC 226E 0018                  		movea.l	$18(a6),a1
000766E0 4A2E 000E                  		tst.b	$E(a6)
000766E4 6700                       		beq.s	sub_72C4E
000766E6 226D 0020                  		movea.l	$20(a5),a1
000766EA 4A2E 000E                  		tst.b	$E(a6)
000766EE 6B00                       		bmi.s	sub_72C4E
000766F0 226E 0020                  		movea.l	$20(a6),a1
000766F4                            
000766F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766F4                            
000766F4                            
000766F4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000766F4 5340                       		subq.w	#1,d0
000766F6 6B00                       		bmi.s	loc_72C5C
000766F8 323C 0019                  		move.w	#$19,d1
000766FC                            
000766FC                            loc_72C56:
000766FC D2C1                       		adda.w	d1,a1
000766FE 51C8 FFFC                  		dbf	d0,loc_72C56
00076702                            
00076702                            loc_72C5C:
00076702 1219                       		move.b	(a1)+,d1
00076704 1B41 001F                  		move.b	d1,$1F(a5)
00076708 1801                       		move.b	d1,d4
0007670A 103C 00B0                  		move.b	#$B0,d0
0007670E 4EBA FAB8                  		jsr	sub_72722(pc)
00076712 45FA 0000                  		lea	byte_72D18(pc),a2
00076716 7613                       		moveq	#$13,d3
00076718                            
00076718                            loc_72C72:
00076718 101A                       		move.b	(a2)+,d0
0007671A 1219                       		move.b	(a1)+,d1
0007671C 4EBA FAAA                  		jsr	sub_72722(pc)
00076720 51CB FFF6                  		dbf	d3,loc_72C72
00076724 7A03                       		moveq	#3,d5
00076726 0244 0007                  		andi.w	#7,d4
0007672A 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007672E 162D 0009                  		move.b	9(a5),d3
00076732                            
00076732                            loc_72C8C:
00076732 101A                       		move.b	(a2)+,d0
00076734 1219                       		move.b	(a1)+,d1
00076736 E20C                       		lsr.b	#1,d4
00076738 6400                       		bcc.s	loc_72C96
0007673A D203                       		add.b	d3,d1
0007673C                            
0007673C                            loc_72C96:
0007673C 4EBA FA8A                  		jsr	sub_72722(pc)
00076740 51CD FFF0                  		dbf	d5,loc_72C8C
00076744 103C 00B4                  		move.b	#$B4,d0
00076748 122D 000A                  		move.b	$A(a5),d1
0007674C 4EBA FA7A                  		jsr	sub_72722(pc)
00076750                            
00076750                            locret_72CAA:
00076750 4E75                       		rts	
00076752                            ; End of function sub_72C4E
00076752                            
00076752                            ; ===========================================================================
00076752 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007675A                            
0007675A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007675A                            
0007675A                            
0007675A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007675A 0815 0002                  		btst	#2,(a5)
0007675E 6600                       		bne.s	locret_72D16
00076760 7000                       		moveq	#0,d0
00076762 102D 000B                  		move.b	$B(a5),d0
00076766 226E 0018                  		movea.l	$18(a6),a1
0007676A 4A2E 000E                  		tst.b	$E(a6)
0007676E 6700                       		beq.s	loc_72CD8
00076770 226E 0020                  		movea.l	$20(a6),a1
00076774 4A2E 000E                  		tst.b	$E(a6)
00076778 6B00                       		bmi.s	loc_72CD8
0007677A 226E 0020                  		movea.l	$20(a6),a1
0007677E                            
0007677E                            loc_72CD8:
0007677E 5340                       		subq.w	#1,d0
00076780 6B00                       		bmi.s	loc_72CE6
00076782 323C 0019                  		move.w	#$19,d1
00076786                            
00076786                            loc_72CE0:
00076786 D2C1                       		adda.w	d1,a1
00076788 51C8 FFFC                  		dbf	d0,loc_72CE0
0007678C                            
0007678C                            loc_72CE6:
0007678C D2FC 0015                  		adda.w	#$15,a1
00076790 45FA 0000                  		lea	byte_72D2C(pc),a2
00076794 102D 001F                  		move.b	$1F(a5),d0
00076798 0240 0007                  		andi.w	#7,d0
0007679C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000767A0 162D 0009                  		move.b	9(a5),d3
000767A4 6B00                       		bmi.s	locret_72D16
000767A6 7A03                       		moveq	#3,d5
000767A8                            
000767A8                            loc_72D02:
000767A8 101A                       		move.b	(a2)+,d0
000767AA 1219                       		move.b	(a1)+,d1
000767AC E20C                       		lsr.b	#1,d4
000767AE 6400                       		bcc.s	loc_72D12
000767B0 D203                       		add.b	d3,d1
000767B2 6500                       		bcs.s	loc_72D12
000767B4 4EBA FA12                  		jsr	sub_72722(pc)
000767B8                            
000767B8                            loc_72D12:
000767B8 51CD FFEE                  		dbf	d5,loc_72D02
000767BC                            
000767BC                            locret_72D16:
000767BC 4E75                       		rts	
000767BE                            ; End of function sub_72CB4
000767BE                            
000767BE                            ; ===========================================================================
000767BE 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000767C8 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000767D2 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000767D6                            ; ===========================================================================
000767D6                            
000767D6                            loc_72D30:				; XREF: loc_72A64
000767D6 08D5 0003                  		bset	#3,(a5)
000767DA 2B4C 0014                  		move.l	a4,$14(a5)
000767DE 1B5C 0018                  		move.b	(a4)+,$18(a5)
000767E2 1B5C 0019                  		move.b	(a4)+,$19(a5)
000767E6 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000767EA 101C                       		move.b	(a4)+,d0
000767EC E208                       		lsr.b	#1,d0
000767EE 1B40 001B                  		move.b	d0,$1B(a5)
000767F2 426D 001C                  		clr.w	$1C(a5)
000767F6 4E75                       		rts	
000767F8                            ; ===========================================================================
000767F8                            
000767F8                            loc_72D52:				; XREF: loc_72A64
000767F8 08D5 0003                  		bset	#3,(a5)
000767FC 4E75                       		rts	
000767FE                            ; ===========================================================================
000767FE                            
000767FE                            loc_72D58:				; XREF: loc_72A64
000767FE 0895 0007                  		bclr	#7,(a5)
00076802 0895 0004                  		bclr	#4,(a5)
00076806 4A2D 0001                  		tst.b	1(a5)
0007680A 6B00                       		bmi.s	loc_72D74
0007680C 4A2E 0008                  		tst.b	8(a6)
00076810 6B00 0000                  		bmi.w	loc_72E02
00076814 4EBA F98E                  		jsr	sub_726FE(pc)
00076818 6000                       		bra.s	loc_72D78
0007681A                            ; ===========================================================================
0007681A                            
0007681A                            loc_72D74:
0007681A 4EBA FC2A                  		jsr	sub_729A0(pc)
0007681E                            
0007681E                            loc_72D78:
0007681E 4A2E 000E                  		tst.b	$E(a6)
00076822 6A00 0000                  		bpl.w	loc_72E02
00076826 4216                       		clr.b	0(a6)
00076828 7000                       		moveq	#0,d0
0007682A 102D 0001                  		move.b	1(a5),d0
0007682E 6B00                       		bmi.s	loc_72DCC
00076830 41FA F546                  		lea	dword_722CC(pc),a0
00076834 264D                       		movea.l	a5,a3
00076836 0C00 0004                  		cmpi.b	#4,d0
0007683A 6600                       		bne.s	loc_72DA8
0007683C 4A2E 0340                  		tst.b	$340(a6)
00076840 6A00                       		bpl.s	loc_72DA8
00076842 4BEE 0340                  		lea	$340(a6),a5
00076846 226E 0020                  		movea.l	$20(a6),a1
0007684A 6000                       		bra.s	loc_72DB8
0007684C                            ; ===========================================================================
0007684C                            
0007684C                            loc_72DA8:
0007684C 5500                       		subq.b	#2,d0
0007684E E508                       		lsl.b	#2,d0
00076850 2A70 0000                  		movea.l	(a0,d0.w),a5
00076854 4A15                       		tst.b	(a5)
00076856 6A00                       		bpl.s	loc_72DC8
00076858 226E 0018                  		movea.l	$18(a6),a1
0007685C                            
0007685C                            loc_72DB8:
0007685C 0895 0002                  		bclr	#2,(a5)
00076860 08D5 0001                  		bset	#1,(a5)
00076864 102D 000B                  		move.b	$B(a5),d0
00076868 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007686C                            
0007686C                            loc_72DC8:
0007686C 2A4B                       		movea.l	a3,a5
0007686E 6000                       		bra.s	loc_72E02
00076870                            ; ===========================================================================
00076870                            
00076870                            loc_72DCC:
00076870 41EE 0370                  		lea	$370(a6),a0
00076874 4A10                       		tst.b	(a0)
00076876 6A00                       		bpl.s	loc_72DE0
00076878 0C00 00E0                  		cmpi.b	#$E0,d0
0007687C 6700                       		beq.s	loc_72DEA
0007687E 0C00 00C0                  		cmpi.b	#$C0,d0
00076882 6700                       		beq.s	loc_72DEA
00076884                            
00076884                            loc_72DE0:
00076884 41FA F4F2                  		lea	dword_722CC(pc),a0
00076888 E608                       		lsr.b	#3,d0
0007688A 2070 0000                  		movea.l	(a0,d0.w),a0
0007688E                            
0007688E                            loc_72DEA:
0007688E 0890 0002                  		bclr	#2,(a0)
00076892 08D0 0001                  		bset	#1,(a0)
00076896 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007689C 6600                       		bne.s	loc_72E02
0007689E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000768A6                            
000768A6                            loc_72E02:
000768A6 504F                       		addq.w	#8,sp
000768A8 4E75                       		rts	
000768AA                            ; ===========================================================================
000768AA                            
000768AA                            loc_72E06:				; XREF: loc_72A64
000768AA 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000768B0 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000768B4 0815 0002                  		btst	#2,(a5)
000768B8 6600                       		bne.s	locret_72E1E
000768BA 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000768C2                            
000768C2                            locret_72E1E:
000768C2 4E75                       		rts	
000768C4                            ; ===========================================================================
000768C4                            
000768C4                            loc_72E20:				; XREF: loc_72A64
000768C4 0895 0003                  		bclr	#3,(a5)
000768C8 4E75                       		rts	
000768CA                            ; ===========================================================================
000768CA                            
000768CA                            loc_72E26:				; XREF: loc_72A64
000768CA 1B5C 000B                  		move.b	(a4)+,$B(a5)
000768CE 4E75                       		rts	
000768D0                            ; ===========================================================================
000768D0                            
000768D0                            loc_72E2C:				; XREF: loc_72A64
000768D0 101C                       		move.b	(a4)+,d0
000768D2 E148                       		lsl.w	#8,d0
000768D4 101C                       		move.b	(a4)+,d0
000768D6 D8C0                       		adda.w	d0,a4
000768D8 534C                       		subq.w	#1,a4
000768DA 4E75                       		rts	
000768DC                            ; ===========================================================================
000768DC                            
000768DC                            loc_72E38:				; XREF: loc_72A64
000768DC 7000                       		moveq	#0,d0
000768DE 101C                       		move.b	(a4)+,d0
000768E0 121C                       		move.b	(a4)+,d1
000768E2 4A35 0024                  		tst.b	$24(a5,d0.w)
000768E6 6600                       		bne.s	loc_72E48
000768E8 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000768EC                            
000768EC                            loc_72E48:
000768EC 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000768F0 66DE                       		bne.s	loc_72E2C
000768F2 544C                       		addq.w	#2,a4
000768F4 4E75                       		rts	
000768F6                            ; ===========================================================================
000768F6                            
000768F6                            loc_72E52:				; XREF: loc_72A64
000768F6 7000                       		moveq	#0,d0
000768F8 102D 000D                  		move.b	$D(a5),d0
000768FC 5900                       		subq.b	#4,d0
000768FE 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076902 1B40 000D                  		move.b	d0,$D(a5)
00076906 60C8                       		bra.s	loc_72E2C
00076908                            ; ===========================================================================
00076908                            
00076908                            loc_72E64:				; XREF: loc_72A64
00076908 103C 0088                  		move.b	#$88,d0
0007690C 123C 000F                  		move.b	#$F,d1
00076910 4EBA F8C2                  		jsr	sub_7272E(pc)
00076914 103C 008C                  		move.b	#$8C,d0
00076918 123C 000F                  		move.b	#$F,d1
0007691C 6000 F8B6                  		bra.w	sub_7272E
00076920                            ; ===========================================================================
00076920                            Kos_Z80:	incbin	sound\z80_1.bin
000769D0 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000769D2 21                         		dc.b $21
000769D3 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000769D5                            		incbin	sound\z80_2.bin
00078080                            		even
00078080                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E880                            		even
0007E880                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008811E                            		even
0008811E                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008BD3E 00                         		even
0008BD3E                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008BD3E                            music84_Header:
0008BD3E =00000001                  smpsHeaderStartSong = 1
0008BD3E 0000                       	smpsHeaderVoice     music84_Voices
0008BD40 0603                       	smpsHeaderChan      $06, $03
0008BD42 0205                       	smpsHeaderTempo     $02, $05
0008BD44                            
0008BD48 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008BD4C 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008BD50 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008BD54 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008BD58 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008BD5C 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008BD62 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008BD68 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008BD6E                            
0008BD6E                            ; FM1 Data
0008BD6E                            music84_FM1:
0008BD6E E0C0                       	smpsPan             panCenter, $00
0008BD72 E107                       	smpsAlterNote       $07
0008BD74 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008BD78 E106                       	smpsAlterNote       $06
0008BD7A 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008BD7E E10B                       	smpsAlterNote       $0B
0008BD80 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008BD86 E10C                       	smpsAlterNote       $0C
0008BD88 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BD8B E10B                       	smpsAlterNote       $0B
0008BD8D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BD90 E109                       	smpsAlterNote       $09
0008BD92 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008BD97 E108                       	smpsAlterNote       $08
0008BD99 8001                       	dc.b	nRst, $01
0008BD9B E10B                       	smpsAlterNote       $0B
0008BD9D 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008BDA3 E107                       	smpsAlterNote       $07
0008BDA5 9B03                       	dc.b	nD2, $03
0008BDA7                            
0008BDA7                            music84_Jump04:
0008BDA7 E107                       	smpsAlterNote       $07
0008BDA9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BDAD E10B                       	smpsAlterNote       $0B
0008BDAF A202 8001                  	dc.b	nA2, $02, nRst, $01
0008BDB3 E107                       	smpsAlterNote       $07
0008BDB5 9B03                       	dc.b	nD2, $03
0008BDB7 E11A                       	smpsAlterNote       $1A
0008BDB9 A301                       	dc.b	nBb2, $01
0008BDBB E1F2                       	smpsAlterNote       $F2
0008BDBD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BDC0 E1FF                       	smpsAlterNote       $FF
0008BDC2 E701                       	dc.b	smpsNoAttack, $01
0008BDC4 E111                       	smpsAlterNote       $11
0008BDC6 E701                       	dc.b	smpsNoAttack, $01
0008BDC8 E106                       	smpsAlterNote       $06
0008BDCA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008BDCD E107                       	smpsAlterNote       $07
0008BDCF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BDD3 E108                       	smpsAlterNote       $08
0008BDD5 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008BDDD E109                       	smpsAlterNote       $09
0008BDDF A003                       	dc.b	nG2, $03
0008BDE1 E10C                       	smpsAlterNote       $0C
0008BDE3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008BDE7 E1FD                       	smpsAlterNote       $FD
0008BDE9 A401                       	dc.b	nB2, $01
0008BDEB E109                       	smpsAlterNote       $09
0008BDED E701                       	dc.b	smpsNoAttack, $01
0008BDEF E106                       	smpsAlterNote       $06
0008BDF1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BDF4 E109                       	smpsAlterNote       $09
0008BDF6 A007                       	dc.b	nG2, $07
0008BDF8 E108                       	smpsAlterNote       $08
0008BDFA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008BDFE E107                       	smpsAlterNote       $07
0008BE00 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BE06 E10B                       	smpsAlterNote       $0B
0008BE08 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BE0C E107                       	smpsAlterNote       $07
0008BE0E 9B03                       	dc.b	nD2, $03
0008BE10 E11A                       	smpsAlterNote       $1A
0008BE12 A301                       	dc.b	nBb2, $01
0008BE14 E1F9                       	smpsAlterNote       $F9
0008BE16 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BE19 E107                       	smpsAlterNote       $07
0008BE1B E701                       	dc.b	smpsNoAttack, $01
0008BE1D E111                       	smpsAlterNote       $11
0008BE1F E701                       	dc.b	smpsNoAttack, $01
0008BE21 E106                       	smpsAlterNote       $06
0008BE23 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008BE28 E107                       	smpsAlterNote       $07
0008BE2A 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008BE32 E1EC                       	smpsAlterNote       $EC
0008BE34 A101                       	dc.b	nAb2, $01
0008BE36 E108                       	smpsAlterNote       $08
0008BE38 E701                       	dc.b	smpsNoAttack, $01
0008BE3A E116                       	smpsAlterNote       $16
0008BE3C E701                       	dc.b	smpsNoAttack, $01
0008BE3E E1F5                       	smpsAlterNote       $F5
0008BE40 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BE43 E10B                       	smpsAlterNote       $0B
0008BE45 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BE49 E107                       	smpsAlterNote       $07
0008BE4B 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BE51 E109                       	smpsAlterNote       $09
0008BE53 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BE57 E10B                       	smpsAlterNote       $0B
0008BE59 9603                       	dc.b	nA1, $03
0008BE5B E107                       	smpsAlterNote       $07
0008BE5D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008BE63 E10B                       	smpsAlterNote       $0B
0008BE65 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BE69 E107                       	smpsAlterNote       $07
0008BE6B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008BE6F E11A                       	smpsAlterNote       $1A
0008BE71 A301                       	dc.b	nBb2, $01
0008BE73 E1F9                       	smpsAlterNote       $F9
0008BE75 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BE78 E107                       	smpsAlterNote       $07
0008BE7A E701                       	dc.b	smpsNoAttack, $01
0008BE7C E1FB                       	smpsAlterNote       $FB
0008BE7E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BE81 E106                       	smpsAlterNote       $06
0008BE83 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BE87 E107                       	smpsAlterNote       $07
0008BE89 9B03                       	dc.b	nD2, $03
0008BE8B E108                       	smpsAlterNote       $08
0008BE8D 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008BE93 E109                       	smpsAlterNote       $09
0008BE95 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008BE99 E10C                       	smpsAlterNote       $0C
0008BE9B A303                       	dc.b	nBb2, $03
0008BE9D E1F0                       	smpsAlterNote       $F0
0008BE9F A401                       	dc.b	nB2, $01
0008BEA1 E1FD                       	smpsAlterNote       $FD
0008BEA3 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008BEA8 E106                       	smpsAlterNote       $06
0008BEAA 8001                       	dc.b	nRst, $01
0008BEAC E109                       	smpsAlterNote       $09
0008BEAE A006 8001                  	dc.b	nG2, $06, nRst, $01
0008BEB2 E108                       	smpsAlterNote       $08
0008BEB4 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008BEB8 E107                       	smpsAlterNote       $07
0008BEBA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008BEC0 E10B                       	smpsAlterNote       $0B
0008BEC2 A203                       	dc.b	nA2, $03
0008BEC4 E107                       	smpsAlterNote       $07
0008BEC6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BECA E1F2                       	smpsAlterNote       $F2
0008BECC A401                       	dc.b	nB2, $01
0008BECE E1FF                       	smpsAlterNote       $FF
0008BED0 E701                       	dc.b	smpsNoAttack, $01
0008BED2 E107                       	smpsAlterNote       $07
0008BED4 E701                       	dc.b	smpsNoAttack, $01
0008BED6 E1FB                       	smpsAlterNote       $FB
0008BED8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BEDB E106                       	smpsAlterNote       $06
0008BEDD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BEE1 E107                       	smpsAlterNote       $07
0008BEE3 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008BEED E117                       	smpsAlterNote       $17
0008BEEF A001                       	dc.b	nG2, $01
0008BEF1 E1FA                       	smpsAlterNote       $FA
0008BEF3 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008BEF6 E108                       	smpsAlterNote       $08
0008BEF8 E701                       	dc.b	smpsNoAttack, $01
0008BEFA E1E7                       	smpsAlterNote       $E7
0008BEFC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BEFF E103                       	smpsAlterNote       $03
0008BF01 E701                       	dc.b	smpsNoAttack, $01
0008BF03 E10B                       	smpsAlterNote       $0B
0008BF05 E702                       	dc.b	smpsNoAttack, $02
0008BF07 E107                       	smpsAlterNote       $07
0008BF09 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008BF11 E106                       	smpsAlterNote       $06
0008BF13 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008BF19 E10C                       	smpsAlterNote       $0C
0008BF1B 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008BF21 E109                       	smpsAlterNote       $09
0008BF23 9E03                       	dc.b	nF2, $03
0008BF25 E10C                       	smpsAlterNote       $0C
0008BF27 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008BF2B E1EA                       	smpsAlterNote       $EA
0008BF2D A201                       	dc.b	nA2, $01
0008BF2F E106                       	smpsAlterNote       $06
0008BF31 E701                       	dc.b	smpsNoAttack, $01
0008BF33 E1E2                       	smpsAlterNote       $E2
0008BF35 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BF38 E1F0                       	smpsAlterNote       $F0
0008BF3A E701                       	dc.b	smpsNoAttack, $01
0008BF3C E10C                       	smpsAlterNote       $0C
0008BF3E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008BF4A E116                       	smpsAlterNote       $16
0008BF4C 9C01                       	dc.b	nEb2, $01
0008BF4E E105                       	smpsAlterNote       $05
0008BF50 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008BF53 E1F1                       	smpsAlterNote       $F1
0008BF55 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008BF58 E1FF                       	smpsAlterNote       $FF
0008BF5A E701                       	dc.b	smpsNoAttack, $01
0008BF5C E109                       	smpsAlterNote       $09
0008BF5E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BF62 E10C                       	smpsAlterNote       $0C
0008BF64 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008BF70 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008BF76 E109                       	smpsAlterNote       $09
0008BF78 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BF7C E10C                       	smpsAlterNote       $0C
0008BF7E 9703                       	dc.b	nBb1, $03
0008BF80 E11A                       	smpsAlterNote       $1A
0008BF82 A101                       	dc.b	nAb2, $01
0008BF84 E1FB                       	smpsAlterNote       $FB
0008BF86 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BF89 E10A                       	smpsAlterNote       $0A
0008BF8B E701                       	dc.b	smpsNoAttack, $01
0008BF8D E1E8                       	smpsAlterNote       $E8
0008BF8F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BF92 E106                       	smpsAlterNote       $06
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 E10C                       	smpsAlterNote       $0C
0008BF98 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008BFA4 E1F9                       	smpsAlterNote       $F9
0008BFA6 9D01                       	dc.b	nE2, $01
0008BFA8 E108                       	smpsAlterNote       $08
0008BFAA E701                       	dc.b	smpsNoAttack, $01
0008BFAC E1F6                       	smpsAlterNote       $F6
0008BFAE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008BFB1 E109                       	smpsAlterNote       $09
0008BFB3 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008BFB7 E10C                       	smpsAlterNote       $0C
0008BFB9 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008BFC5 E108                       	smpsAlterNote       $08
0008BFC7 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008BFCD E106                       	smpsAlterNote       $06
0008BFCF A403 8001                  	dc.b	nB2, $03, nRst, $01
0008BFD3 E108                       	smpsAlterNote       $08
0008BFD5 9D03                       	dc.b	nE2, $03
0008BFD7 E1EB                       	smpsAlterNote       $EB
0008BFD9 A801                       	dc.b	nEb3, $01
0008BFDB E109                       	smpsAlterNote       $09
0008BFDD E701                       	dc.b	smpsNoAttack, $01
0008BFDF E1FA                       	smpsAlterNote       $FA
0008BFE1 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008BFE4 E108                       	smpsAlterNote       $08
0008BFE6 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008BFF2 E1E9                       	smpsAlterNote       $E9
0008BFF4 A301                       	dc.b	nBb2, $01
0008BFF6 E107                       	smpsAlterNote       $07
0008BFF8 E701                       	dc.b	smpsNoAttack, $01
0008BFFA E1F0                       	smpsAlterNote       $F0
0008BFFC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BFFF E1F7                       	smpsAlterNote       $F7
0008C001 E701                       	dc.b	smpsNoAttack, $01
0008C003 E107                       	smpsAlterNote       $07
0008C005 E701                       	dc.b	smpsNoAttack, $01
0008C007 E106                       	smpsAlterNote       $06
0008C009 E701                       	dc.b	smpsNoAttack, $01
0008C00B E108                       	smpsAlterNote       $08
0008C00D 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C013 E106                       	smpsAlterNote       $06
0008C015 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C019 E108                       	smpsAlterNote       $08
0008C01B 9D03                       	dc.b	nE2, $03
0008C01D E10B                       	smpsAlterNote       $0B
0008C01F 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C027 E108                       	smpsAlterNote       $08
0008C029 9D03                       	dc.b	nE2, $03
0008C02B E10B                       	smpsAlterNote       $0B
0008C02D 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C031 E113                       	smpsAlterNote       $13
0008C033 A001                       	dc.b	nG2, $01
0008C035 E118                       	smpsAlterNote       $18
0008C037 E701                       	dc.b	smpsNoAttack, $01
0008C039 E1E9                       	smpsAlterNote       $E9
0008C03B E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C03E E1F3                       	smpsAlterNote       $F3
0008C040 E701                       	dc.b	smpsNoAttack, $01
0008C042 E1FD                       	smpsAlterNote       $FD
0008C044 E701                       	dc.b	smpsNoAttack, $01
0008C046 E102                       	smpsAlterNote       $02
0008C048 E701                       	dc.b	smpsNoAttack, $01
0008C04A E107                       	smpsAlterNote       $07
0008C04C 8001                       	dc.b	nRst, $01
0008C04E E10B                       	smpsAlterNote       $0B
0008C050 9603                       	dc.b	nA1, $03
0008C052 E10C                       	smpsAlterNote       $0C
0008C054 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C05A E10B                       	smpsAlterNote       $0B
0008C05C 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C068 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C06E E107                       	smpsAlterNote       $07
0008C070 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C076 E10B                       	smpsAlterNote       $0B
0008C078 A203                       	dc.b	nA2, $03
0008C07A E107                       	smpsAlterNote       $07
0008C07C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C080 E1F2                       	smpsAlterNote       $F2
0008C082 A401                       	dc.b	nB2, $01
0008C084 E1FF                       	smpsAlterNote       $FF
0008C086 E701                       	dc.b	smpsNoAttack, $01
0008C088 E107                       	smpsAlterNote       $07
0008C08A E701                       	dc.b	smpsNoAttack, $01
0008C08C E1FB                       	smpsAlterNote       $FB
0008C08E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C091 E106                       	smpsAlterNote       $06
0008C093 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C097 E107                       	smpsAlterNote       $07
0008C099 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C09D E108                       	smpsAlterNote       $08
0008C09F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C0A5 E109                       	smpsAlterNote       $09
0008C0A7 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C0AB E10C                       	smpsAlterNote       $0C
0008C0AD A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C0B1 E1F0                       	smpsAlterNote       $F0
0008C0B3 A401                       	dc.b	nB2, $01
0008C0B5 E109                       	smpsAlterNote       $09
0008C0B7 E701                       	dc.b	smpsNoAttack, $01
0008C0B9 E106                       	smpsAlterNote       $06
0008C0BB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C0BE E109                       	smpsAlterNote       $09
0008C0C0 A007                       	dc.b	nG2, $07
0008C0C2 E108                       	smpsAlterNote       $08
0008C0C4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C0C8 E107                       	smpsAlterNote       $07
0008C0CA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C0D0 E10B                       	smpsAlterNote       $0B
0008C0D2 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C0D6 E107                       	smpsAlterNote       $07
0008C0D8 9B03                       	dc.b	nD2, $03
0008C0DA E11A                       	smpsAlterNote       $1A
0008C0DC A301                       	dc.b	nBb2, $01
0008C0DE E1F2                       	smpsAlterNote       $F2
0008C0E0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C0E3 E1FF                       	smpsAlterNote       $FF
0008C0E5 E701                       	dc.b	smpsNoAttack, $01
0008C0E7 E111                       	smpsAlterNote       $11
0008C0E9 E701                       	dc.b	smpsNoAttack, $01
0008C0EB E106                       	smpsAlterNote       $06
0008C0ED E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C0F0 E107                       	smpsAlterNote       $07
0008C0F2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C0FE E117                       	smpsAlterNote       $17
0008C100 A001                       	dc.b	nG2, $01
0008C102 E1FA                       	smpsAlterNote       $FA
0008C104 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C107 E116                       	smpsAlterNote       $16
0008C109 E701                       	dc.b	smpsNoAttack, $01
0008C10B E1F5                       	smpsAlterNote       $F5
0008C10D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C110 E103                       	smpsAlterNote       $03
0008C112 E701                       	dc.b	smpsNoAttack, $01
0008C114 E10B                       	smpsAlterNote       $0B
0008C116 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C11A E107                       	smpsAlterNote       $07
0008C11C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C122 E109                       	smpsAlterNote       $09
0008C124 9E03                       	dc.b	nF2, $03
0008C126 E10B                       	smpsAlterNote       $0B
0008C128 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C12C E107                       	smpsAlterNote       $07
0008C12E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C134 E10B                       	smpsAlterNote       $0B
0008C136 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C13A E107                       	smpsAlterNote       $07
0008C13C 9B03                       	dc.b	nD2, $03
0008C13E E11A                       	smpsAlterNote       $1A
0008C140 A301                       	dc.b	nBb2, $01
0008C142 E1F9                       	smpsAlterNote       $F9
0008C144 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C147 E107                       	smpsAlterNote       $07
0008C149 E701                       	dc.b	smpsNoAttack, $01
0008C14B E111                       	smpsAlterNote       $11
0008C14D E701                       	dc.b	smpsNoAttack, $01
0008C14F E106                       	smpsAlterNote       $06
0008C151 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C156 E107                       	smpsAlterNote       $07
0008C158 9B03                       	dc.b	nD2, $03
0008C15A E108                       	smpsAlterNote       $08
0008C15C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C162 E109                       	smpsAlterNote       $09
0008C164 A003                       	dc.b	nG2, $03
0008C166 E10C                       	smpsAlterNote       $0C
0008C168 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C16C E1FD                       	smpsAlterNote       $FD
0008C16E A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C173 E106                       	smpsAlterNote       $06
0008C175 8001                       	dc.b	nRst, $01
0008C177 E109                       	smpsAlterNote       $09
0008C179 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C17D E108                       	smpsAlterNote       $08
0008C17F 9C03                       	dc.b	nEb2, $03
0008C181 E107                       	smpsAlterNote       $07
0008C183 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C189 E10B                       	smpsAlterNote       $0B
0008C18B A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C18F E107                       	smpsAlterNote       $07
0008C191 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C195 E11A                       	smpsAlterNote       $1A
0008C197 A301                       	dc.b	nBb2, $01
0008C199 E1F9                       	smpsAlterNote       $F9
0008C19B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C19E E107                       	smpsAlterNote       $07
0008C1A0 E701                       	dc.b	smpsNoAttack, $01
0008C1A2 E1FB                       	smpsAlterNote       $FB
0008C1A4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C1A7 E106                       	smpsAlterNote       $06
0008C1A9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C1AD E107                       	smpsAlterNote       $07
0008C1AF 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C1B7 E1EC                       	smpsAlterNote       $EC
0008C1B9 A101                       	dc.b	nAb2, $01
0008C1BB E108                       	smpsAlterNote       $08
0008C1BD E701                       	dc.b	smpsNoAttack, $01
0008C1BF E1E7                       	smpsAlterNote       $E7
0008C1C1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C1C4 E1F5                       	smpsAlterNote       $F5
0008C1C6 E701                       	dc.b	smpsNoAttack, $01
0008C1C8 E10B                       	smpsAlterNote       $0B
0008C1CA E702                       	dc.b	smpsNoAttack, $02
0008C1CC E107                       	smpsAlterNote       $07
0008C1CE 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C1D4 E106                       	smpsAlterNote       $06
0008C1D6 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C1DC E10C                       	smpsAlterNote       $0C
0008C1DE 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C1E6 E109                       	smpsAlterNote       $09
0008C1E8 9E03                       	dc.b	nF2, $03
0008C1EA E10C                       	smpsAlterNote       $0C
0008C1EC 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C1F0 E1EA                       	smpsAlterNote       $EA
0008C1F2 A201                       	dc.b	nA2, $01
0008C1F4 E106                       	smpsAlterNote       $06
0008C1F6 E701                       	dc.b	smpsNoAttack, $01
0008C1F8 E114                       	smpsAlterNote       $14
0008C1FA E701                       	dc.b	smpsNoAttack, $01
0008C1FC E1F0                       	smpsAlterNote       $F0
0008C1FE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C201 E10C                       	smpsAlterNote       $0C
0008C203 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C20F 9703                       	dc.b	nBb1, $03
0008C211 E116                       	smpsAlterNote       $16
0008C213 9C01                       	dc.b	nEb2, $01
0008C215 E105                       	smpsAlterNote       $05
0008C217 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C21A E113                       	smpsAlterNote       $13
0008C21C E701                       	dc.b	smpsNoAttack, $01
0008C21E E1FF                       	smpsAlterNote       $FF
0008C220 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C223 E109                       	smpsAlterNote       $09
0008C225 E703                       	dc.b	smpsNoAttack, $03
0008C227 E10C                       	smpsAlterNote       $0C
0008C229 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C235 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C23D E109                       	smpsAlterNote       $09
0008C23F 9E03                       	dc.b	nF2, $03
0008C241 E10C                       	smpsAlterNote       $0C
0008C243 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C247 E1EC                       	smpsAlterNote       $EC
0008C249 A201                       	dc.b	nA2, $01
0008C24B E10A                       	smpsAlterNote       $0A
0008C24D E701                       	dc.b	smpsNoAttack, $01
0008C24F E1E8                       	smpsAlterNote       $E8
0008C251 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C254 E1F7                       	smpsAlterNote       $F7
0008C256 E701                       	dc.b	smpsNoAttack, $01
0008C258 E10C                       	smpsAlterNote       $0C
0008C25A E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C266 E1EA                       	smpsAlterNote       $EA
0008C268 9D01                       	dc.b	nE2, $01
0008C26A E108                       	smpsAlterNote       $08
0008C26C E701                       	dc.b	smpsNoAttack, $01
0008C26E E1F6                       	smpsAlterNote       $F6
0008C270 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C273 E105                       	smpsAlterNote       $05
0008C275 E701                       	dc.b	smpsNoAttack, $01
0008C277 E109                       	smpsAlterNote       $09
0008C279 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C27D E10C                       	smpsAlterNote       $0C
0008C27F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C28B E108                       	smpsAlterNote       $08
0008C28D 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C293 E106                       	smpsAlterNote       $06
0008C295 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C299 E108                       	smpsAlterNote       $08
0008C29B 9D03                       	dc.b	nE2, $03
0008C29D E1EB                       	smpsAlterNote       $EB
0008C29F A801                       	dc.b	nEb3, $01
0008C2A1 E109                       	smpsAlterNote       $09
0008C2A3 E701                       	dc.b	smpsNoAttack, $01
0008C2A5 E1EB                       	smpsAlterNote       $EB
0008C2A7 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C2AA E108                       	smpsAlterNote       $08
0008C2AC E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C2B8 E1E9                       	smpsAlterNote       $E9
0008C2BA A301                       	dc.b	nBb2, $01
0008C2BC E1F8                       	smpsAlterNote       $F8
0008C2BE E701                       	dc.b	smpsNoAttack, $01
0008C2C0 E116                       	smpsAlterNote       $16
0008C2C2 E701                       	dc.b	smpsNoAttack, $01
0008C2C4 E1F7                       	smpsAlterNote       $F7
0008C2C6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C2C9 E107                       	smpsAlterNote       $07
0008C2CB E701                       	dc.b	smpsNoAttack, $01
0008C2CD E1EE                       	smpsAlterNote       $EE
0008C2CF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C2D2 E106                       	smpsAlterNote       $06
0008C2D4 8001                       	dc.b	nRst, $01
0008C2D6 E108                       	smpsAlterNote       $08
0008C2D8 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C2DE E106                       	smpsAlterNote       $06
0008C2E0 A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C2E4 E108                       	smpsAlterNote       $08
0008C2E6 9D03                       	dc.b	nE2, $03
0008C2E8 E10B                       	smpsAlterNote       $0B
0008C2EA 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C2F0 E108                       	smpsAlterNote       $08
0008C2F2 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C2F6 E10B                       	smpsAlterNote       $0B
0008C2F8 9603                       	dc.b	nA1, $03
0008C2FA E10E                       	smpsAlterNote       $0E
0008C2FC A001                       	dc.b	nG2, $01
0008C2FE E118                       	smpsAlterNote       $18
0008C300 E701                       	dc.b	smpsNoAttack, $01
0008C302 E1E9                       	smpsAlterNote       $E9
0008C304 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C307 E1EE                       	smpsAlterNote       $EE
0008C309 E701                       	dc.b	smpsNoAttack, $01
0008C30B E1F8                       	smpsAlterNote       $F8
0008C30D E701                       	dc.b	smpsNoAttack, $01
0008C30F E102                       	smpsAlterNote       $02
0008C311 E701                       	dc.b	smpsNoAttack, $01
0008C313 E107                       	smpsAlterNote       $07
0008C315 8001                       	dc.b	nRst, $01
0008C317 E10B                       	smpsAlterNote       $0B
0008C319 9603                       	dc.b	nA1, $03
0008C31B E10C                       	smpsAlterNote       $0C
0008C31D 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C323 E10B                       	smpsAlterNote       $0B
0008C325 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C331 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C335 E10C                       	smpsAlterNote       $0C
0008C337 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C343 8001                       	dc.b	nRst, $01
0008C345 E10B                       	smpsAlterNote       $0B
0008C347 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C34F E107                       	smpsAlterNote       $07
0008C351 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C355 E10B                       	smpsAlterNote       $0B
0008C357 9603                       	dc.b	nA1, $03
0008C359 E109                       	smpsAlterNote       $09
0008C35B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C35F E108                       	smpsAlterNote       $08
0008C361 9D06                       	dc.b	nE2, $06
0008C363 E107                       	smpsAlterNote       $07
0008C365 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C369 E106                       	smpsAlterNote       $06
0008C36B 9903                       	dc.b	nC2, $03
0008C36D E10C                       	smpsAlterNote       $0C
0008C36F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C373 E10B                       	smpsAlterNote       $0B
0008C375 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C381 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C38B E10C                       	smpsAlterNote       $0C
0008C38D 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C399 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C3A5 8001                       	dc.b	nRst, $01
0008C3A7 E10B                       	smpsAlterNote       $0B
0008C3A9 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C3B5 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C3C1 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C3CD 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C3D7 E10C                       	smpsAlterNote       $0C
0008C3D9 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C3E5 E10B                       	smpsAlterNote       $0B
0008C3E7 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C3EF E107                       	smpsAlterNote       $07
0008C3F1 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C3F5 E10B                       	smpsAlterNote       $0B
0008C3F7 9603                       	dc.b	nA1, $03
0008C3F9 E109                       	smpsAlterNote       $09
0008C3FB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C3FF E108                       	smpsAlterNote       $08
0008C401 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C405 E107                       	smpsAlterNote       $07
0008C407 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C40B E106                       	smpsAlterNote       $06
0008C40D 9903                       	dc.b	nC2, $03
0008C40F E10C                       	smpsAlterNote       $0C
0008C411 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C415 E10B                       	smpsAlterNote       $0B
0008C417 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C423 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C42D E10C                       	smpsAlterNote       $0C
0008C42F 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C43B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C447 8001                       	dc.b	nRst, $01
0008C449 E10B                       	smpsAlterNote       $0B
0008C44B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C457 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C461 E10C                       	smpsAlterNote       $0C
0008C463 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C46F 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008C47B E10B                       	smpsAlterNote       $0B
0008C47D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C489 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C493 E10C                       	smpsAlterNote       $0C
0008C495 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C4A1 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008C4AD E10B                       	smpsAlterNote       $0B
0008C4AF 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008C4BB 8001                       	dc.b	nRst, $01
0008C4BD E1EC                       	smpsAlterNote       $EC
0008C4BF A101                       	dc.b	nAb2, $01
0008C4C1 E1FA                       	smpsAlterNote       $FA
0008C4C3 E701                       	dc.b	smpsNoAttack, $01
0008C4C5 E116                       	smpsAlterNote       $16
0008C4C7 E701                       	dc.b	smpsNoAttack, $01
0008C4C9 E1F5                       	smpsAlterNote       $F5
0008C4CB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C4CE E10B                       	smpsAlterNote       $0B
0008C4D0 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008C4DC 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008C4E8 E107                       	smpsAlterNote       $07
0008C4EA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C4F0 E10B                       	smpsAlterNote       $0B
0008C4F2 A203                       	dc.b	nA2, $03
0008C4F4 E107                       	smpsAlterNote       $07
0008C4F6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C4FA E1F3                       	smpsAlterNote       $F3
0008C4FC A401                       	dc.b	nB2, $01
0008C4FE E102                       	smpsAlterNote       $02
0008C500 E701                       	dc.b	smpsNoAttack, $01
0008C502 E109                       	smpsAlterNote       $09
0008C504 E701                       	dc.b	smpsNoAttack, $01
0008C506 E102                       	smpsAlterNote       $02
0008C508 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C50B E106                       	smpsAlterNote       $06
0008C50D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C511 E107                       	smpsAlterNote       $07
0008C513 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C517 E108                       	smpsAlterNote       $08
0008C519 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C51F E109                       	smpsAlterNote       $09
0008C521 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C525 E1F2                       	smpsAlterNote       $F2
0008C527 A401                       	dc.b	nB2, $01
0008C529 E1FF                       	smpsAlterNote       $FF
0008C52B E701                       	dc.b	smpsNoAttack, $01
0008C52D E111                       	smpsAlterNote       $11
0008C52F E701                       	dc.b	smpsNoAttack, $01
0008C531 E1FB                       	smpsAlterNote       $FB
0008C533 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C536 E106                       	smpsAlterNote       $06
0008C538 E702                       	dc.b	smpsNoAttack, $02
0008C53A E109                       	smpsAlterNote       $09
0008C53C A007                       	dc.b	nG2, $07
0008C53E E108                       	smpsAlterNote       $08
0008C540 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C544 E107                       	smpsAlterNote       $07
0008C546 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C54C E10B                       	smpsAlterNote       $0B
0008C54E A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C552 E107                       	smpsAlterNote       $07
0008C554 9B03                       	dc.b	nD2, $03
0008C556 E11A                       	smpsAlterNote       $1A
0008C558 A301                       	dc.b	nBb2, $01
0008C55A E1F2                       	smpsAlterNote       $F2
0008C55C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C55F E1FF                       	smpsAlterNote       $FF
0008C561 E701                       	dc.b	smpsNoAttack, $01
0008C563 E111                       	smpsAlterNote       $11
0008C565 E701                       	dc.b	smpsNoAttack, $01
0008C567 E106                       	smpsAlterNote       $06
0008C569 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C56C E107                       	smpsAlterNote       $07
0008C56E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C57A E117                       	smpsAlterNote       $17
0008C57C A001                       	dc.b	nG2, $01
0008C57E E1FA                       	smpsAlterNote       $FA
0008C580 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C583 E116                       	smpsAlterNote       $16
0008C585 E701                       	dc.b	smpsNoAttack, $01
0008C587 E1F5                       	smpsAlterNote       $F5
0008C589 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C58C E103                       	smpsAlterNote       $03
0008C58E E701                       	dc.b	smpsNoAttack, $01
0008C590 E10B                       	smpsAlterNote       $0B
0008C592 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C596 E107                       	smpsAlterNote       $07
0008C598 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C59E E109                       	smpsAlterNote       $09
0008C5A0 9E03                       	dc.b	nF2, $03
0008C5A2 E10B                       	smpsAlterNote       $0B
0008C5A4 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C5A8 E107                       	smpsAlterNote       $07
0008C5AA 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C5B0 E10B                       	smpsAlterNote       $0B
0008C5B2 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C5B6 E107                       	smpsAlterNote       $07
0008C5B8 9B03                       	dc.b	nD2, $03
0008C5BA E11A                       	smpsAlterNote       $1A
0008C5BC A301                       	dc.b	nBb2, $01
0008C5BE E1F9                       	smpsAlterNote       $F9
0008C5C0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C5C3 E1FF                       	smpsAlterNote       $FF
0008C5C5 E701                       	dc.b	smpsNoAttack, $01
0008C5C7 E111                       	smpsAlterNote       $11
0008C5C9 E701                       	dc.b	smpsNoAttack, $01
0008C5CB E106                       	smpsAlterNote       $06
0008C5CD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C5D0 E107                       	smpsAlterNote       $07
0008C5D2 9B03                       	dc.b	nD2, $03
0008C5D4 E108                       	smpsAlterNote       $08
0008C5D6 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C5DC E109                       	smpsAlterNote       $09
0008C5DE A003                       	dc.b	nG2, $03
0008C5E0 E1F0                       	smpsAlterNote       $F0
0008C5E2 A501                       	dc.b	nC3, $01
0008C5E4 E106                       	smpsAlterNote       $06
0008C5E6 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008C5EA E109                       	smpsAlterNote       $09
0008C5EC A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C5F0 E108                       	smpsAlterNote       $08
0008C5F2 9C03                       	dc.b	nEb2, $03
0008C5F4 E107                       	smpsAlterNote       $07
0008C5F6 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C5FC E10B                       	smpsAlterNote       $0B
0008C5FE A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C602 E107                       	smpsAlterNote       $07
0008C604 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C608 E11A                       	smpsAlterNote       $1A
0008C60A A301                       	dc.b	nBb2, $01
0008C60C E1F9                       	smpsAlterNote       $F9
0008C60E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C611 E107                       	smpsAlterNote       $07
0008C613 E701                       	dc.b	smpsNoAttack, $01
0008C615 E1FB                       	smpsAlterNote       $FB
0008C617 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C61A E106                       	smpsAlterNote       $06
0008C61C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C620 E107                       	smpsAlterNote       $07
0008C622 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C62A E1EC                       	smpsAlterNote       $EC
0008C62C A101                       	dc.b	nAb2, $01
0008C62E E108                       	smpsAlterNote       $08
0008C630 E701                       	dc.b	smpsNoAttack, $01
0008C632 E1E7                       	smpsAlterNote       $E7
0008C634 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C637 E1F5                       	smpsAlterNote       $F5
0008C639 E701                       	dc.b	smpsNoAttack, $01
0008C63B E10B                       	smpsAlterNote       $0B
0008C63D E702                       	dc.b	smpsNoAttack, $02
0008C63F E107                       	smpsAlterNote       $07
0008C641 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C647 E106                       	smpsAlterNote       $06
0008C649 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C64F E10C                       	smpsAlterNote       $0C
0008C651 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C659 E109                       	smpsAlterNote       $09
0008C65B 9E03                       	dc.b	nF2, $03
0008C65D E10C                       	smpsAlterNote       $0C
0008C65F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C663 E1EA                       	smpsAlterNote       $EA
0008C665 A201                       	dc.b	nA2, $01
0008C667 E106                       	smpsAlterNote       $06
0008C669 E701                       	dc.b	smpsNoAttack, $01
0008C66B E114                       	smpsAlterNote       $14
0008C66D E701                       	dc.b	smpsNoAttack, $01
0008C66F E1F0                       	smpsAlterNote       $F0
0008C671 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C674 E10C                       	smpsAlterNote       $0C
0008C676 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C682 9703                       	dc.b	nBb1, $03
0008C684 E116                       	smpsAlterNote       $16
0008C686 9C01                       	dc.b	nEb2, $01
0008C688 E105                       	smpsAlterNote       $05
0008C68A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C68D E113                       	smpsAlterNote       $13
0008C68F E701                       	dc.b	smpsNoAttack, $01
0008C691 E1FF                       	smpsAlterNote       $FF
0008C693 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C696 E109                       	smpsAlterNote       $09
0008C698 E703                       	dc.b	smpsNoAttack, $03
0008C69A E10C                       	smpsAlterNote       $0C
0008C69C 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C6A8 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C6B0 E109                       	smpsAlterNote       $09
0008C6B2 9E03                       	dc.b	nF2, $03
0008C6B4 E10C                       	smpsAlterNote       $0C
0008C6B6 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C6BA E1EA                       	smpsAlterNote       $EA
0008C6BC A201                       	dc.b	nA2, $01
0008C6BE E106                       	smpsAlterNote       $06
0008C6C0 E701                       	dc.b	smpsNoAttack, $01
0008C6C2 E1E2                       	smpsAlterNote       $E2
0008C6C4 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C6C7 E1F0                       	smpsAlterNote       $F0
0008C6C9 E701                       	dc.b	smpsNoAttack, $01
0008C6CB E10C                       	smpsAlterNote       $0C
0008C6CD E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C6D9 E116                       	smpsAlterNote       $16
0008C6DB 9C01                       	dc.b	nEb2, $01
0008C6DD E105                       	smpsAlterNote       $05
0008C6DF E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C6E2 E1F1                       	smpsAlterNote       $F1
0008C6E4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C6E7 E1FF                       	smpsAlterNote       $FF
0008C6E9 E701                       	dc.b	smpsNoAttack, $01
0008C6EB E109                       	smpsAlterNote       $09
0008C6ED E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C6F1 E10C                       	smpsAlterNote       $0C
0008C6F3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008C6FF E106                       	smpsAlterNote       $06
0008C701 9903                       	dc.b	nC2, $03
0008C703 E107                       	smpsAlterNote       $07
0008C705 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C709 E109                       	smpsAlterNote       $09
0008C70B 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008C711 E107                       	smpsAlterNote       $07
0008C713 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C717 E108                       	smpsAlterNote       $08
0008C719 9D03                       	dc.b	nE2, $03
0008C71B E10B                       	smpsAlterNote       $0B
0008C71D 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008C723 E109                       	smpsAlterNote       $09
0008C725 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008C72B E10C                       	smpsAlterNote       $0C
0008C72D 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008C733 E106                       	smpsAlterNote       $06
0008C735 9903                       	dc.b	nC2, $03
0008C737 E11A                       	smpsAlterNote       $1A
0008C739 A301                       	dc.b	nBb2, $01
0008C73B E1F9                       	smpsAlterNote       $F9
0008C73D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C740 E1FF                       	smpsAlterNote       $FF
0008C742 E701                       	dc.b	smpsNoAttack, $01
0008C744 E111                       	smpsAlterNote       $11
0008C746 E701                       	dc.b	smpsNoAttack, $01
0008C748 E106                       	smpsAlterNote       $06
0008C74A E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008C751 E109                       	smpsAlterNote       $09
0008C753 A003                       	dc.b	nG2, $03
0008C755 E106                       	smpsAlterNote       $06
0008C757 9907                       	dc.b	nC2, $07
0008C759 E107                       	smpsAlterNote       $07
0008C75B 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008C763 E10B                       	smpsAlterNote       $0B
0008C765 A203                       	dc.b	nA2, $03
0008C767 E107                       	smpsAlterNote       $07
0008C769 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C76D E1F2                       	smpsAlterNote       $F2
0008C76F A401                       	dc.b	nB2, $01
0008C771 E1F9                       	smpsAlterNote       $F9
0008C773 E701                       	dc.b	smpsNoAttack, $01
0008C775 E107                       	smpsAlterNote       $07
0008C777 E701                       	dc.b	smpsNoAttack, $01
0008C779 E1FB                       	smpsAlterNote       $FB
0008C77B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C77E E106                       	smpsAlterNote       $06
0008C780 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C784 E107                       	smpsAlterNote       $07
0008C786 9B03                       	dc.b	nD2, $03
0008C788 E108                       	smpsAlterNote       $08
0008C78A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C790 E109                       	smpsAlterNote       $09
0008C792 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C796 E1F2                       	smpsAlterNote       $F2
0008C798 A401                       	dc.b	nB2, $01
0008C79A E1F9                       	smpsAlterNote       $F9
0008C79C E701                       	dc.b	smpsNoAttack, $01
0008C79E E107                       	smpsAlterNote       $07
0008C7A0 E701                       	dc.b	smpsNoAttack, $01
0008C7A2 E1FB                       	smpsAlterNote       $FB
0008C7A4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7A7 E106                       	smpsAlterNote       $06
0008C7A9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7AD E108                       	smpsAlterNote       $08
0008C7AF 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008C7B3 E10C                       	smpsAlterNote       $0C
0008C7B5 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C7B9 E107                       	smpsAlterNote       $07
0008C7BB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C7C1 E10B                       	smpsAlterNote       $0B
0008C7C3 A203                       	dc.b	nA2, $03
0008C7C5 E107                       	smpsAlterNote       $07
0008C7C7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C7CB E1F2                       	smpsAlterNote       $F2
0008C7CD A401                       	dc.b	nB2, $01
0008C7CF E1FF                       	smpsAlterNote       $FF
0008C7D1 E701                       	dc.b	smpsNoAttack, $01
0008C7D3 E107                       	smpsAlterNote       $07
0008C7D5 E701                       	dc.b	smpsNoAttack, $01
0008C7D7 E1FB                       	smpsAlterNote       $FB
0008C7D9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7DC E106                       	smpsAlterNote       $06
0008C7DE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7E2 E107                       	smpsAlterNote       $07
0008C7E4 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C7E8 E108                       	smpsAlterNote       $08
0008C7EA 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C7F0 E109                       	smpsAlterNote       $09
0008C7F2 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C7F6 E1F2                       	smpsAlterNote       $F2
0008C7F8 A401                       	dc.b	nB2, $01
0008C7FA E1FF                       	smpsAlterNote       $FF
0008C7FC E701                       	dc.b	smpsNoAttack, $01
0008C7FE E111                       	smpsAlterNote       $11
0008C800 E701                       	dc.b	smpsNoAttack, $01
0008C802 E1FB                       	smpsAlterNote       $FB
0008C804 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C807 E106                       	smpsAlterNote       $06
0008C809 E702                       	dc.b	smpsNoAttack, $02
0008C80B E108                       	smpsAlterNote       $08
0008C80D 9C07                       	dc.b	nEb2, $07
0008C80F E10C                       	smpsAlterNote       $0C
0008C811 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C815 E107                       	smpsAlterNote       $07
0008C817 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C81D E10B                       	smpsAlterNote       $0B
0008C81F A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C823 E107                       	smpsAlterNote       $07
0008C825 9B03                       	dc.b	nD2, $03
0008C827 E11A                       	smpsAlterNote       $1A
0008C829 A301                       	dc.b	nBb2, $01
0008C82B E1F2                       	smpsAlterNote       $F2
0008C82D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C830 E1FF                       	smpsAlterNote       $FF
0008C832 E701                       	dc.b	smpsNoAttack, $01
0008C834 E111                       	smpsAlterNote       $11
0008C836 E701                       	dc.b	smpsNoAttack, $01
0008C838 E106                       	smpsAlterNote       $06
0008C83A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C83D E107                       	smpsAlterNote       $07
0008C83F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C843 E108                       	smpsAlterNote       $08
0008C845 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008C84D E109                       	smpsAlterNote       $09
0008C84F A003                       	dc.b	nG2, $03
0008C851 E11A                       	smpsAlterNote       $1A
0008C853 A301                       	dc.b	nBb2, $01
0008C855 E1F2                       	smpsAlterNote       $F2
0008C857 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C85A E1FF                       	smpsAlterNote       $FF
0008C85C E701                       	dc.b	smpsNoAttack, $01
0008C85E E111                       	smpsAlterNote       $11
0008C860 E701                       	dc.b	smpsNoAttack, $01
0008C862 E106                       	smpsAlterNote       $06
0008C864 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C867 E108                       	smpsAlterNote       $08
0008C869 9C07                       	dc.b	nEb2, $07
0008C86B E10C                       	smpsAlterNote       $0C
0008C86D A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C871 E107                       	smpsAlterNote       $07
0008C873 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008C87F 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008C889 E108                       	smpsAlterNote       $08
0008C88B 9C06                       	dc.b	nEb2, $06
0008C88D E10C                       	smpsAlterNote       $0C
0008C88F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C893 E108                       	smpsAlterNote       $08
0008C895 9C03                       	dc.b	nEb2, $03
0008C897 E109                       	smpsAlterNote       $09
0008C899 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C89D E10C                       	smpsAlterNote       $0C
0008C89F A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008C8A7 E107                       	smpsAlterNote       $07
0008C8A9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C8AD F6F4 F8                    	smpsJump            music84_Jump04
0008C8B0                            
0008C8B0                            ; FM2 Data
0008C8B0                            music84_FM2:
0008C8B0 E0C0                       	smpsPan             panCenter, $00
0008C8B4 E10B                       	smpsAlterNote       $0B
0008C8B6 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008C8BA E109                       	smpsAlterNote       $09
0008C8BC C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008C8C0 E108                       	smpsAlterNote       $08
0008C8C2 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008C8C8 E080                       	smpsPan             panLeft, $00
0008C8CA E10C                       	smpsAlterNote       $0C
0008C8CC E6F9                       	smpsAlterVol        $F9
0008C8CE C703                       	dc.b	nBb5, $03
0008C8D0 E10B                       	smpsAlterNote       $0B
0008C8D2 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008C8D6 E109                       	smpsAlterNote       $09
0008C8D8 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008C8DE E108                       	smpsAlterNote       $08
0008C8E0 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C8E4 E106                       	smpsAlterNote       $06
0008C8E6 BD03                       	dc.b	nC5, $03
0008C8E8 E10B                       	smpsAlterNote       $0B
0008C8EA BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008C8F0 E0C0                       	smpsPan             panCenter, $00
0008C8F2 E107                       	smpsAlterNote       $07
0008C8F4 E606                       	smpsAlterVol        $06
0008C8F6 BF03                       	dc.b	nD5, $03
0008C8F8                            
0008C8F8                            music84_Jump03:
0008C8F8 E108                       	smpsAlterNote       $08
0008C8FA C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C8FE E109                       	smpsAlterNote       $09
0008C900 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008C906 E10B                       	smpsAlterNote       $0B
0008C908 C607                       	dc.b	nA5, $07
0008C90A E107                       	smpsAlterNote       $07
0008C90C BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008C910 E106                       	smpsAlterNote       $06
0008C912 C90D                       	dc.b	nC6, $0D
0008C914 E100                       	smpsAlterNote       $00
0008C916 E701                       	dc.b	smpsNoAttack, $01
0008C918 E1FF                       	smpsAlterNote       $FF
0008C91A E701                       	dc.b	smpsNoAttack, $01
0008C91C E103                       	smpsAlterNote       $03
0008C91E E701                       	dc.b	smpsNoAttack, $01
0008C920 E109                       	smpsAlterNote       $09
0008C922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C926 E106                       	smpsAlterNote       $06
0008C928 E701                       	dc.b	smpsNoAttack, $01
0008C92A E100                       	smpsAlterNote       $00
0008C92C E701                       	dc.b	smpsNoAttack, $01
0008C92E E10C                       	smpsAlterNote       $0C
0008C930 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008C934 E10B                       	smpsAlterNote       $0B
0008C936 C603                       	dc.b	nA5, $03
0008C938 E109                       	smpsAlterNote       $09
0008C93A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008C93E E10B                       	smpsAlterNote       $0B
0008C940 C60D                       	dc.b	nA5, $0D
0008C942 E105                       	smpsAlterNote       $05
0008C944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C948 E10B                       	smpsAlterNote       $0B
0008C94A E701                       	dc.b	smpsNoAttack, $01
0008C94C E10E                       	smpsAlterNote       $0E
0008C94E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C952 E108                       	smpsAlterNote       $08
0008C954 E701                       	dc.b	smpsNoAttack, $01
0008C956 E104                       	smpsAlterNote       $04
0008C958 E701                       	dc.b	smpsNoAttack, $01
0008C95A E105                       	smpsAlterNote       $05
0008C95C E701                       	dc.b	smpsNoAttack, $01
0008C95E E10B                       	smpsAlterNote       $0B
0008C960 E701                       	dc.b	smpsNoAttack, $01
0008C962 E10F                       	smpsAlterNote       $0F
0008C964 E701                       	dc.b	smpsNoAttack, $01
0008C966 E10B                       	smpsAlterNote       $0B
0008C968 E701                       	dc.b	smpsNoAttack, $01
0008C96A E108                       	smpsAlterNote       $08
0008C96C E701                       	dc.b	smpsNoAttack, $01
0008C96E E104                       	smpsAlterNote       $04
0008C970 E701                       	dc.b	smpsNoAttack, $01
0008C972 E108                       	smpsAlterNote       $08
0008C974 E701                       	dc.b	smpsNoAttack, $01
0008C976 E10E                       	smpsAlterNote       $0E
0008C978 E701                       	dc.b	smpsNoAttack, $01
0008C97A E10F                       	smpsAlterNote       $0F
0008C97C E701                       	dc.b	smpsNoAttack, $01
0008C97E E10B                       	smpsAlterNote       $0B
0008C980 E701                       	dc.b	smpsNoAttack, $01
0008C982 E105                       	smpsAlterNote       $05
0008C984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C988 E108                       	smpsAlterNote       $08
0008C98A E701                       	dc.b	smpsNoAttack, $01
0008C98C E10E                       	smpsAlterNote       $0E
0008C98E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C992 E108                       	smpsAlterNote       $08
0008C994 E701                       	dc.b	smpsNoAttack, $01
0008C996 E105                       	smpsAlterNote       $05
0008C998 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C99C E10B                       	smpsAlterNote       $0B
0008C99E E701                       	dc.b	smpsNoAttack, $01
0008C9A0 E10F                       	smpsAlterNote       $0F
0008C9A2 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008C9A6 E107                       	smpsAlterNote       $07
0008C9A8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008C9AC E108                       	smpsAlterNote       $08
0008C9AE C103                       	dc.b	nE5, $03
0008C9B0 E109                       	smpsAlterNote       $09
0008C9B2 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008C9BA E10B                       	smpsAlterNote       $0B
0008C9BC C606 8001                  	dc.b	nA5, $06, nRst, $01
0008C9C0 E107                       	smpsAlterNote       $07
0008C9C2 BF03                       	dc.b	nD5, $03
0008C9C4 E106                       	smpsAlterNote       $06
0008C9C6 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008C9CA E107                       	smpsAlterNote       $07
0008C9CC CB03                       	dc.b	nD6, $03
0008C9CE E10C                       	smpsAlterNote       $0C
0008C9D0 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008C9D4 E10B                       	smpsAlterNote       $0B
0008C9D6 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008C9DA E109                       	smpsAlterNote       $09
0008C9DC C404                       	dc.b	nG5, $04
0008C9DE E10B                       	smpsAlterNote       $0B
0008C9E0 C60D                       	dc.b	nA5, $0D
0008C9E2 E108                       	smpsAlterNote       $08
0008C9E4 E701                       	dc.b	smpsNoAttack, $01
0008C9E6 E104                       	smpsAlterNote       $04
0008C9E8 E701                       	dc.b	smpsNoAttack, $01
0008C9EA E108                       	smpsAlterNote       $08
0008C9EC E701                       	dc.b	smpsNoAttack, $01
0008C9EE E10B                       	smpsAlterNote       $0B
0008C9F0 E701                       	dc.b	smpsNoAttack, $01
0008C9F2 E10F                       	smpsAlterNote       $0F
0008C9F4 E701                       	dc.b	smpsNoAttack, $01
0008C9F6 E10B                       	smpsAlterNote       $0B
0008C9F8 E701                       	dc.b	smpsNoAttack, $01
0008C9FA E105                       	smpsAlterNote       $05
0008C9FC E701                       	dc.b	smpsNoAttack, $01
0008C9FE E104                       	smpsAlterNote       $04
0008CA00 E701                       	dc.b	smpsNoAttack, $01
0008CA02 E108                       	smpsAlterNote       $08
0008CA04 E701                       	dc.b	smpsNoAttack, $01
0008CA06 E10E                       	smpsAlterNote       $0E
0008CA08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA0C E10B                       	smpsAlterNote       $0B
0008CA0E E701                       	dc.b	smpsNoAttack, $01
0008CA10 E105                       	smpsAlterNote       $05
0008CA12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA16 E10B                       	smpsAlterNote       $0B
0008CA18 E701                       	dc.b	smpsNoAttack, $01
0008CA1A E10E                       	smpsAlterNote       $0E
0008CA1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA20 E108                       	smpsAlterNote       $08
0008CA22 E701                       	dc.b	smpsNoAttack, $01
0008CA24 E104                       	smpsAlterNote       $04
0008CA26 E701                       	dc.b	smpsNoAttack, $01
0008CA28 E105                       	smpsAlterNote       $05
0008CA2A E701                       	dc.b	smpsNoAttack, $01
0008CA2C E10B                       	smpsAlterNote       $0B
0008CA2E E701                       	dc.b	smpsNoAttack, $01
0008CA30 E10F                       	smpsAlterNote       $0F
0008CA32 E701                       	dc.b	smpsNoAttack, $01
0008CA34 E10B                       	smpsAlterNote       $0B
0008CA36 E701                       	dc.b	smpsNoAttack, $01
0008CA38 E108                       	smpsAlterNote       $08
0008CA3A E701                       	dc.b	smpsNoAttack, $01
0008CA3C E105                       	smpsAlterNote       $05
0008CA3E 8001                       	dc.b	nRst, $01
0008CA40 E109                       	smpsAlterNote       $09
0008CA42 C401                       	dc.b	nG5, $01
0008CA44 E10B                       	smpsAlterNote       $0B
0008CA46 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CA4F E109                       	smpsAlterNote       $09
0008CA51 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CA55 E10B                       	smpsAlterNote       $0B
0008CA57 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CA5B E107                       	smpsAlterNote       $07
0008CA5D BF0D                       	dc.b	nD5, $0D
0008CA5F E101                       	smpsAlterNote       $01
0008CA61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA65 E104                       	smpsAlterNote       $04
0008CA67 E701                       	dc.b	smpsNoAttack, $01
0008CA69 E10A                       	smpsAlterNote       $0A
0008CA6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA6F E104                       	smpsAlterNote       $04
0008CA71 E701                       	dc.b	smpsNoAttack, $01
0008CA73 E101                       	smpsAlterNote       $01
0008CA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA79 E107                       	smpsAlterNote       $07
0008CA7B E701                       	dc.b	smpsNoAttack, $01
0008CA7D E10B                       	smpsAlterNote       $0B
0008CA7F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CA83 E108                       	smpsAlterNote       $08
0008CA85 C101                       	dc.b	nE5, $01
0008CA87 E109                       	smpsAlterNote       $09
0008CA89 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CA8E E10B                       	smpsAlterNote       $0B
0008CA90 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CA98 E108                       	smpsAlterNote       $08
0008CA9A CD06                       	dc.b	nE6, $06
0008CA9C E109                       	smpsAlterNote       $09
0008CA9E CE07                       	dc.b	nF6, $07
0008CAA0 E108                       	smpsAlterNote       $08
0008CAA2 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008CAA6 E106                       	smpsAlterNote       $06
0008CAA8 C903                       	dc.b	nC6, $03
0008CAAA E109                       	smpsAlterNote       $09
0008CAAC C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CAB0 E10C                       	smpsAlterNote       $0C
0008CAB2 C70D                       	dc.b	nBb5, $0D
0008CAB4 E106                       	smpsAlterNote       $06
0008CAB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CABA E109                       	smpsAlterNote       $09
0008CABC E701                       	dc.b	smpsNoAttack, $01
0008CABE E10F                       	smpsAlterNote       $0F
0008CAC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAC4 E109                       	smpsAlterNote       $09
0008CAC6 E701                       	dc.b	smpsNoAttack, $01
0008CAC8 E106                       	smpsAlterNote       $06
0008CACA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CACE E10C                       	smpsAlterNote       $0C
0008CAD0 E701                       	dc.b	smpsNoAttack, $01
0008CAD2 E110                       	smpsAlterNote       $10
0008CAD4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CAD8 E10B                       	smpsAlterNote       $0B
0008CADA C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008CADE E105                       	smpsAlterNote       $05
0008CAE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAE4 E10B                       	smpsAlterNote       $0B
0008CAE6 E701                       	dc.b	smpsNoAttack, $01
0008CAE8 E10E                       	smpsAlterNote       $0E
0008CAEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAEE E108                       	smpsAlterNote       $08
0008CAF0 E701                       	dc.b	smpsNoAttack, $01
0008CAF2 E104                       	smpsAlterNote       $04
0008CAF4 E701                       	dc.b	smpsNoAttack, $01
0008CAF6 E105                       	smpsAlterNote       $05
0008CAF8 E701                       	dc.b	smpsNoAttack, $01
0008CAFA E10B                       	smpsAlterNote       $0B
0008CAFC E701                       	dc.b	smpsNoAttack, $01
0008CAFE E10F                       	smpsAlterNote       $0F
0008CB00 E701                       	dc.b	smpsNoAttack, $01
0008CB02 E10B                       	smpsAlterNote       $0B
0008CB04 E701                       	dc.b	smpsNoAttack, $01
0008CB06 E108                       	smpsAlterNote       $08
0008CB08 E701                       	dc.b	smpsNoAttack, $01
0008CB0A E104                       	smpsAlterNote       $04
0008CB0C E701                       	dc.b	smpsNoAttack, $01
0008CB0E E108                       	smpsAlterNote       $08
0008CB10 E701                       	dc.b	smpsNoAttack, $01
0008CB12 E10E                       	smpsAlterNote       $0E
0008CB14 E701                       	dc.b	smpsNoAttack, $01
0008CB16 E10F                       	smpsAlterNote       $0F
0008CB18 E701                       	dc.b	smpsNoAttack, $01
0008CB1A E10B                       	smpsAlterNote       $0B
0008CB1C E701                       	dc.b	smpsNoAttack, $01
0008CB1E E105                       	smpsAlterNote       $05
0008CB20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB24 E108                       	smpsAlterNote       $08
0008CB26 E701                       	dc.b	smpsNoAttack, $01
0008CB28 E10E                       	smpsAlterNote       $0E
0008CB2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB2E E108                       	smpsAlterNote       $08
0008CB30 E701                       	dc.b	smpsNoAttack, $01
0008CB32 E105                       	smpsAlterNote       $05
0008CB34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB38 E10B                       	smpsAlterNote       $0B
0008CB3A E701                       	dc.b	smpsNoAttack, $01
0008CB3C E10F                       	smpsAlterNote       $0F
0008CB3E E701                       	dc.b	smpsNoAttack, $01
0008CB40 E10E                       	smpsAlterNote       $0E
0008CB42 E701                       	dc.b	smpsNoAttack, $01
0008CB44 E108                       	smpsAlterNote       $08
0008CB46 E701                       	dc.b	smpsNoAttack, $01
0008CB48 E104                       	smpsAlterNote       $04
0008CB4A E701                       	dc.b	smpsNoAttack, $01
0008CB4C E108                       	smpsAlterNote       $08
0008CB4E E701                       	dc.b	smpsNoAttack, $01
0008CB50 E10E                       	smpsAlterNote       $0E
0008CB52 E701                       	dc.b	smpsNoAttack, $01
0008CB54 E10F                       	smpsAlterNote       $0F
0008CB56 E701                       	dc.b	smpsNoAttack, $01
0008CB58 E10B                       	smpsAlterNote       $0B
0008CB5A E701                       	dc.b	smpsNoAttack, $01
0008CB5C E105                       	smpsAlterNote       $05
0008CB5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB62 E108                       	smpsAlterNote       $08
0008CB64 E701                       	dc.b	smpsNoAttack, $01
0008CB66 E10E                       	smpsAlterNote       $0E
0008CB68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB6C E108                       	smpsAlterNote       $08
0008CB6E E701                       	dc.b	smpsNoAttack, $01
0008CB70 E105                       	smpsAlterNote       $05
0008CB72 E701                       	dc.b	smpsNoAttack, $01
0008CB74 E10B                       	smpsAlterNote       $0B
0008CB76 C60D                       	dc.b	nA5, $0D
0008CB78 E108                       	smpsAlterNote       $08
0008CB7A E701                       	dc.b	smpsNoAttack, $01
0008CB7C E104                       	smpsAlterNote       $04
0008CB7E E701                       	dc.b	smpsNoAttack, $01
0008CB80 E105                       	smpsAlterNote       $05
0008CB82 E701                       	dc.b	smpsNoAttack, $01
0008CB84 E10B                       	smpsAlterNote       $0B
0008CB86 E701                       	dc.b	smpsNoAttack, $01
0008CB88 E10F                       	smpsAlterNote       $0F
0008CB8A E701                       	dc.b	smpsNoAttack, $01
0008CB8C E10B                       	smpsAlterNote       $0B
0008CB8E E701                       	dc.b	smpsNoAttack, $01
0008CB90 E108                       	smpsAlterNote       $08
0008CB92 E701                       	dc.b	smpsNoAttack, $01
0008CB94 E104                       	smpsAlterNote       $04
0008CB96 E701                       	dc.b	smpsNoAttack, $01
0008CB98 E108                       	smpsAlterNote       $08
0008CB9A E701                       	dc.b	smpsNoAttack, $01
0008CB9C E10E                       	smpsAlterNote       $0E
0008CB9E E701                       	dc.b	smpsNoAttack, $01
0008CBA0 E10F                       	smpsAlterNote       $0F
0008CBA2 E701                       	dc.b	smpsNoAttack, $01
0008CBA6 E109                       	smpsAlterNote       $09
0008CBA8 E6FF                       	smpsAlterVol        $FF
0008CBAA C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008CBB4 E108                       	smpsAlterNote       $08
0008CBB6 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008CBBC E107                       	smpsAlterNote       $07
0008CBBE E601                       	smpsAlterVol        $01
0008CBC0 BF03                       	dc.b	nD5, $03
0008CBC2 E108                       	smpsAlterNote       $08
0008CBC4 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CBC8 E109                       	smpsAlterNote       $09
0008CBCA C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008CBD0 E10B                       	smpsAlterNote       $0B
0008CBD2 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CBD6 E107                       	smpsAlterNote       $07
0008CBD8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CBDC E106                       	smpsAlterNote       $06
0008CBDE C90D                       	dc.b	nC6, $0D
0008CBE0 E103                       	smpsAlterNote       $03
0008CBE2 E701                       	dc.b	smpsNoAttack, $01
0008CBE4 E1FF                       	smpsAlterNote       $FF
0008CBE6 E701                       	dc.b	smpsNoAttack, $01
0008CBE8 E103                       	smpsAlterNote       $03
0008CBEA E701                       	dc.b	smpsNoAttack, $01
0008CBEC E109                       	smpsAlterNote       $09
0008CBEE E701                       	dc.b	smpsNoAttack, $01
0008CBF0 E10A                       	smpsAlterNote       $0A
0008CBF2 E701                       	dc.b	smpsNoAttack, $01
0008CBF4 E106                       	smpsAlterNote       $06
0008CBF6 E701                       	dc.b	smpsNoAttack, $01
0008CBF8 E100                       	smpsAlterNote       $00
0008CBFA E701                       	dc.b	smpsNoAttack, $01
0008CBFC E10C                       	smpsAlterNote       $0C
0008CBFE C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CC02 E10B                       	smpsAlterNote       $0B
0008CC04 C603                       	dc.b	nA5, $03
0008CC06 E109                       	smpsAlterNote       $09
0008CC08 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CC0C E10B                       	smpsAlterNote       $0B
0008CC0E C60D                       	dc.b	nA5, $0D
0008CC10 E105                       	smpsAlterNote       $05
0008CC12 E701                       	dc.b	smpsNoAttack, $01
0008CC14 E104                       	smpsAlterNote       $04
0008CC16 E701                       	dc.b	smpsNoAttack, $01
0008CC18 E108                       	smpsAlterNote       $08
0008CC1A E701                       	dc.b	smpsNoAttack, $01
0008CC1C E10E                       	smpsAlterNote       $0E
0008CC1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC22 E10B                       	smpsAlterNote       $0B
0008CC24 E701                       	dc.b	smpsNoAttack, $01
0008CC26 E105                       	smpsAlterNote       $05
0008CC28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC2C E10B                       	smpsAlterNote       $0B
0008CC2E E701                       	dc.b	smpsNoAttack, $01
0008CC30 E10E                       	smpsAlterNote       $0E
0008CC32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC36 E108                       	smpsAlterNote       $08
0008CC38 E701                       	dc.b	smpsNoAttack, $01
0008CC3A E104                       	smpsAlterNote       $04
0008CC3C E701                       	dc.b	smpsNoAttack, $01
0008CC3E E105                       	smpsAlterNote       $05
0008CC40 E701                       	dc.b	smpsNoAttack, $01
0008CC42 E10B                       	smpsAlterNote       $0B
0008CC44 E701                       	dc.b	smpsNoAttack, $01
0008CC46 E10F                       	smpsAlterNote       $0F
0008CC48 E701                       	dc.b	smpsNoAttack, $01
0008CC4A E10B                       	smpsAlterNote       $0B
0008CC4C E701                       	dc.b	smpsNoAttack, $01
0008CC4E E108                       	smpsAlterNote       $08
0008CC50 E701                       	dc.b	smpsNoAttack, $01
0008CC52 E104                       	smpsAlterNote       $04
0008CC54 E701                       	dc.b	smpsNoAttack, $01
0008CC56 E108                       	smpsAlterNote       $08
0008CC58 E701                       	dc.b	smpsNoAttack, $01
0008CC5A E10E                       	smpsAlterNote       $0E
0008CC5C E701                       	dc.b	smpsNoAttack, $01
0008CC5E E10F                       	smpsAlterNote       $0F
0008CC60 E701                       	dc.b	smpsNoAttack, $01
0008CC62 E10B                       	smpsAlterNote       $0B
0008CC64 E701                       	dc.b	smpsNoAttack, $01
0008CC66 E105                       	smpsAlterNote       $05
0008CC68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC6C E108                       	smpsAlterNote       $08
0008CC6E E701                       	dc.b	smpsNoAttack, $01
0008CC70 E10E                       	smpsAlterNote       $0E
0008CC72 E701                       	dc.b	smpsNoAttack, $01
0008CC74 E10F                       	smpsAlterNote       $0F
0008CC76 800F                       	dc.b	nRst, $0F
0008CC78 E107                       	smpsAlterNote       $07
0008CC7A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CC7E E108                       	smpsAlterNote       $08
0008CC80 C103                       	dc.b	nE5, $03
0008CC82 E109                       	smpsAlterNote       $09
0008CC84 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008CC8A E10B                       	smpsAlterNote       $0B
0008CC8C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CC90 E107                       	smpsAlterNote       $07
0008CC92 BF03                       	dc.b	nD5, $03
0008CC94 E106                       	smpsAlterNote       $06
0008CC96 C90E                       	dc.b	nC6, $0E
0008CC98 E107                       	smpsAlterNote       $07
0008CC9A CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008CC9E E10C                       	smpsAlterNote       $0C
0008CCA0 C704                       	dc.b	nBb5, $04
0008CCA2 E10B                       	smpsAlterNote       $0B
0008CCA4 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CCA8 E109                       	smpsAlterNote       $09
0008CCAA C404                       	dc.b	nG5, $04
0008CCAC E10B                       	smpsAlterNote       $0B
0008CCAE C60D                       	dc.b	nA5, $0D
0008CCB0 E108                       	smpsAlterNote       $08
0008CCB2 E701                       	dc.b	smpsNoAttack, $01
0008CCB4 E105                       	smpsAlterNote       $05
0008CCB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCBA E10B                       	smpsAlterNote       $0B
0008CCBC E701                       	dc.b	smpsNoAttack, $01
0008CCBE E10F                       	smpsAlterNote       $0F
0008CCC0 E701                       	dc.b	smpsNoAttack, $01
0008CCC2 E10E                       	smpsAlterNote       $0E
0008CCC4 E701                       	dc.b	smpsNoAttack, $01
0008CCC6 E108                       	smpsAlterNote       $08
0008CCC8 E701                       	dc.b	smpsNoAttack, $01
0008CCCA E104                       	smpsAlterNote       $04
0008CCCC E701                       	dc.b	smpsNoAttack, $01
0008CCCE E108                       	smpsAlterNote       $08
0008CCD0 E701                       	dc.b	smpsNoAttack, $01
0008CCD2 E10B                       	smpsAlterNote       $0B
0008CCD4 E701                       	dc.b	smpsNoAttack, $01
0008CCD6 E10F                       	smpsAlterNote       $0F
0008CCD8 E701                       	dc.b	smpsNoAttack, $01
0008CCDA E10B                       	smpsAlterNote       $0B
0008CCDC E701                       	dc.b	smpsNoAttack, $01
0008CCDE E105                       	smpsAlterNote       $05
0008CCE0 E701                       	dc.b	smpsNoAttack, $01
0008CCE2 E104                       	smpsAlterNote       $04
0008CCE4 E701                       	dc.b	smpsNoAttack, $01
0008CCE6 E108                       	smpsAlterNote       $08
0008CCE8 E701                       	dc.b	smpsNoAttack, $01
0008CCEA E10E                       	smpsAlterNote       $0E
0008CCEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCF0 E10B                       	smpsAlterNote       $0B
0008CCF2 E701                       	dc.b	smpsNoAttack, $01
0008CCF4 E105                       	smpsAlterNote       $05
0008CCF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCFA E10B                       	smpsAlterNote       $0B
0008CCFC E701                       	dc.b	smpsNoAttack, $01
0008CCFE E10E                       	smpsAlterNote       $0E
0008CD00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD04 E108                       	smpsAlterNote       $08
0008CD06 E701                       	dc.b	smpsNoAttack, $01
0008CD08 E105                       	smpsAlterNote       $05
0008CD0A 8001                       	dc.b	nRst, $01
0008CD0C E109                       	smpsAlterNote       $09
0008CD0E C402                       	dc.b	nG5, $02
0008CD10 E10B                       	smpsAlterNote       $0B
0008CD12 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008CD1B E109                       	smpsAlterNote       $09
0008CD1D C404                       	dc.b	nG5, $04
0008CD1F E10B                       	smpsAlterNote       $0B
0008CD21 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CD25 E107                       	smpsAlterNote       $07
0008CD27 BF0D                       	dc.b	nD5, $0D
0008CD29 E101                       	smpsAlterNote       $01
0008CD2B E701                       	dc.b	smpsNoAttack, $01
0008CD2D E100                       	smpsAlterNote       $00
0008CD2F E701                       	dc.b	smpsNoAttack, $01
0008CD31 E104                       	smpsAlterNote       $04
0008CD33 E701                       	dc.b	smpsNoAttack, $01
0008CD35 E10A                       	smpsAlterNote       $0A
0008CD37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD3B E107                       	smpsAlterNote       $07
0008CD3D E701                       	dc.b	smpsNoAttack, $01
0008CD3F E101                       	smpsAlterNote       $01
0008CD41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD45 E107                       	smpsAlterNote       $07
0008CD47 E701                       	dc.b	smpsNoAttack, $01
0008CD49 E10A                       	smpsAlterNote       $0A
0008CD4B E701                       	dc.b	smpsNoAttack, $01
0008CD4D E10B                       	smpsAlterNote       $0B
0008CD4F 8001                       	dc.b	nRst, $01
0008CD51 E108                       	smpsAlterNote       $08
0008CD53 C101                       	dc.b	nE5, $01
0008CD55 E109                       	smpsAlterNote       $09
0008CD57 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CD5C E10B                       	smpsAlterNote       $0B
0008CD5E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CD66 E108                       	smpsAlterNote       $08
0008CD68 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008CD6C E109                       	smpsAlterNote       $09
0008CD6E CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008CD72 E108                       	smpsAlterNote       $08
0008CD74 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008CD78 E106                       	smpsAlterNote       $06
0008CD7A C903                       	dc.b	nC6, $03
0008CD7C E109                       	smpsAlterNote       $09
0008CD7E C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CD82 E10C                       	smpsAlterNote       $0C
0008CD84 C70D                       	dc.b	nBb5, $0D
0008CD86 E109                       	smpsAlterNote       $09
0008CD88 E701                       	dc.b	smpsNoAttack, $01
0008CD8A E105                       	smpsAlterNote       $05
0008CD8C E701                       	dc.b	smpsNoAttack, $01
0008CD8E E109                       	smpsAlterNote       $09
0008CD90 E701                       	dc.b	smpsNoAttack, $01
0008CD92 E10F                       	smpsAlterNote       $0F
0008CD94 E701                       	dc.b	smpsNoAttack, $01
0008CD96 E110                       	smpsAlterNote       $10
0008CD98 E701                       	dc.b	smpsNoAttack, $01
0008CD9A E10C                       	smpsAlterNote       $0C
0008CD9C E701                       	dc.b	smpsNoAttack, $01
0008CD9E E106                       	smpsAlterNote       $06
0008CDA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDA4 E109                       	smpsAlterNote       $09
0008CDA6 E701                       	dc.b	smpsNoAttack, $01
0008CDA8 E10F                       	smpsAlterNote       $0F
0008CDAA E701                       	dc.b	smpsNoAttack, $01
0008CDAC E110                       	smpsAlterNote       $10
0008CDAE 8001                       	dc.b	nRst, $01
0008CDB0 E10B                       	smpsAlterNote       $0B
0008CDB2 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008CDB8 E105                       	smpsAlterNote       $05
0008CDBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDBE E108                       	smpsAlterNote       $08
0008CDC0 E701                       	dc.b	smpsNoAttack, $01
0008CDC2 E10E                       	smpsAlterNote       $0E
0008CDC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDC8 E108                       	smpsAlterNote       $08
0008CDCA E701                       	dc.b	smpsNoAttack, $01
0008CDCC E105                       	smpsAlterNote       $05
0008CDCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDD2 E10B                       	smpsAlterNote       $0B
0008CDD4 E701                       	dc.b	smpsNoAttack, $01
0008CDD6 E10F                       	smpsAlterNote       $0F
0008CDD8 E701                       	dc.b	smpsNoAttack, $01
0008CDDA E10E                       	smpsAlterNote       $0E
0008CDDC E701                       	dc.b	smpsNoAttack, $01
0008CDDE E108                       	smpsAlterNote       $08
0008CDE0 E701                       	dc.b	smpsNoAttack, $01
0008CDE2 E104                       	smpsAlterNote       $04
0008CDE4 E701                       	dc.b	smpsNoAttack, $01
0008CDE6 E108                       	smpsAlterNote       $08
0008CDE8 E701                       	dc.b	smpsNoAttack, $01
0008CDEA E10B                       	smpsAlterNote       $0B
0008CDEC E701                       	dc.b	smpsNoAttack, $01
0008CDEE E10F                       	smpsAlterNote       $0F
0008CDF0 E701                       	dc.b	smpsNoAttack, $01
0008CDF2 E10B                       	smpsAlterNote       $0B
0008CDF4 E701                       	dc.b	smpsNoAttack, $01
0008CDF6 E105                       	smpsAlterNote       $05
0008CDF8 E701                       	dc.b	smpsNoAttack, $01
0008CDFA E104                       	smpsAlterNote       $04
0008CDFC E701                       	dc.b	smpsNoAttack, $01
0008CDFE E108                       	smpsAlterNote       $08
0008CE00 E701                       	dc.b	smpsNoAttack, $01
0008CE02 E10E                       	smpsAlterNote       $0E
0008CE04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE08 E10B                       	smpsAlterNote       $0B
0008CE0A E701                       	dc.b	smpsNoAttack, $01
0008CE0C E105                       	smpsAlterNote       $05
0008CE0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE12 E10B                       	smpsAlterNote       $0B
0008CE14 E701                       	dc.b	smpsNoAttack, $01
0008CE16 E10E                       	smpsAlterNote       $0E
0008CE18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE1C E108                       	smpsAlterNote       $08
0008CE1E E701                       	dc.b	smpsNoAttack, $01
0008CE20 E104                       	smpsAlterNote       $04
0008CE22 E701                       	dc.b	smpsNoAttack, $01
0008CE24 E105                       	smpsAlterNote       $05
0008CE26 E701                       	dc.b	smpsNoAttack, $01
0008CE28 E10B                       	smpsAlterNote       $0B
0008CE2A E701                       	dc.b	smpsNoAttack, $01
0008CE2C E10F                       	smpsAlterNote       $0F
0008CE2E E701                       	dc.b	smpsNoAttack, $01
0008CE30 E10B                       	smpsAlterNote       $0B
0008CE32 E701                       	dc.b	smpsNoAttack, $01
0008CE34 E108                       	smpsAlterNote       $08
0008CE36 E701                       	dc.b	smpsNoAttack, $01
0008CE38 E104                       	smpsAlterNote       $04
0008CE3A E701                       	dc.b	smpsNoAttack, $01
0008CE3C E108                       	smpsAlterNote       $08
0008CE3E E701                       	dc.b	smpsNoAttack, $01
0008CE40 E10E                       	smpsAlterNote       $0E
0008CE42 E701                       	dc.b	smpsNoAttack, $01
0008CE44 E10F                       	smpsAlterNote       $0F
0008CE46 E701                       	dc.b	smpsNoAttack, $01
0008CE48 E10B                       	smpsAlterNote       $0B
0008CE4A E701                       	dc.b	smpsNoAttack, $01
0008CE4C E105                       	smpsAlterNote       $05
0008CE4E E701                       	dc.b	smpsNoAttack, $01
0008CE50 E10B                       	smpsAlterNote       $0B
0008CE52 C60E                       	dc.b	nA5, $0E
0008CE54 E105                       	smpsAlterNote       $05
0008CE56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE5A E10B                       	smpsAlterNote       $0B
0008CE5C E701                       	dc.b	smpsNoAttack, $01
0008CE5E E10E                       	smpsAlterNote       $0E
0008CE60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE64 E108                       	smpsAlterNote       $08
0008CE66 E701                       	dc.b	smpsNoAttack, $01
0008CE68 E104                       	smpsAlterNote       $04
0008CE6A E701                       	dc.b	smpsNoAttack, $01
0008CE6C E105                       	smpsAlterNote       $05
0008CE6E E701                       	dc.b	smpsNoAttack, $01
0008CE70 E10B                       	smpsAlterNote       $0B
0008CE72 E701                       	dc.b	smpsNoAttack, $01
0008CE74 E10F                       	smpsAlterNote       $0F
0008CE76 E701                       	dc.b	smpsNoAttack, $01
0008CE78 E10B                       	smpsAlterNote       $0B
0008CE7A E701                       	dc.b	smpsNoAttack, $01
0008CE7C E108                       	smpsAlterNote       $08
0008CE7E E701                       	dc.b	smpsNoAttack, $01
0008CE80 E104                       	smpsAlterNote       $04
0008CE82 E701                       	dc.b	smpsNoAttack, $01
0008CE84 E108                       	smpsAlterNote       $08
0008CE86 E701                       	dc.b	smpsNoAttack, $01
0008CE88 E10E                       	smpsAlterNote       $0E
0008CE8A E701                       	dc.b	smpsNoAttack, $01
0008CE8C E10F                       	smpsAlterNote       $0F
0008CE8E E701                       	dc.b	smpsNoAttack, $01
0008CE90 E10B                       	smpsAlterNote       $0B
0008CE92 E701                       	dc.b	smpsNoAttack, $01
0008CE94 E105                       	smpsAlterNote       $05
0008CE96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE9A E108                       	smpsAlterNote       $08
0008CE9C E701                       	dc.b	smpsNoAttack, $01
0008CE9E E10E                       	smpsAlterNote       $0E
0008CEA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEA4 E108                       	smpsAlterNote       $08
0008CEA6 E701                       	dc.b	smpsNoAttack, $01
0008CEA8 E105                       	smpsAlterNote       $05
0008CEAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEAE E10B                       	smpsAlterNote       $0B
0008CEB0 E701                       	dc.b	smpsNoAttack, $01
0008CEB2 E10F                       	smpsAlterNote       $0F
0008CEB4 E701                       	dc.b	smpsNoAttack, $01
0008CEB6 E10E                       	smpsAlterNote       $0E
0008CEB8 E701                       	dc.b	smpsNoAttack, $01
0008CEBA E108                       	smpsAlterNote       $08
0008CEBC E701                       	dc.b	smpsNoAttack, $01
0008CEBE E104                       	smpsAlterNote       $04
0008CEC0 E701                       	dc.b	smpsNoAttack, $01
0008CEC2 E108                       	smpsAlterNote       $08
0008CEC4 E701                       	dc.b	smpsNoAttack, $01
0008CEC6 E10E                       	smpsAlterNote       $0E
0008CEC8 E701                       	dc.b	smpsNoAttack, $01
0008CECA E10F                       	smpsAlterNote       $0F
0008CECC E701                       	dc.b	smpsNoAttack, $01
0008CECE E10B                       	smpsAlterNote       $0B
0008CED0 E701                       	dc.b	smpsNoAttack, $01
0008CED2 E105                       	smpsAlterNote       $05
0008CED4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CED8 E108                       	smpsAlterNote       $08
0008CEDA E701                       	dc.b	smpsNoAttack, $01
0008CEDC E10E                       	smpsAlterNote       $0E
0008CEDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEE2 E108                       	smpsAlterNote       $08
0008CEE4 E701                       	dc.b	smpsNoAttack, $01
0008CEE6 E105                       	smpsAlterNote       $05
0008CEE8 E701                       	dc.b	smpsNoAttack, $01
0008CEEC E10B                       	smpsAlterNote       $0B
0008CEEE E6FD                       	smpsAlterVol        $FD
0008CEF0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CEF4 E109                       	smpsAlterNote       $09
0008CEF6 C404                       	dc.b	nG5, $04
0008CEF8 E10B                       	smpsAlterNote       $0B
0008CEFA C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CEFE E107                       	smpsAlterNote       $07
0008CF00 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008CF06 E10B                       	smpsAlterNote       $0B
0008CF08 C604                       	dc.b	nA5, $04
0008CF0A E109                       	smpsAlterNote       $09
0008CF0C C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CF10 E10B                       	smpsAlterNote       $0B
0008CF12 C604                       	dc.b	nA5, $04
0008CF14 E108                       	smpsAlterNote       $08
0008CF16 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008CF1E E106                       	smpsAlterNote       $06
0008CF20 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008CF24 E10C                       	smpsAlterNote       $0C
0008CF26 C704                       	dc.b	nBb5, $04
0008CF28 E10B                       	smpsAlterNote       $0B
0008CF2A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CF2E E109                       	smpsAlterNote       $09
0008CF30 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CF3A E10B                       	smpsAlterNote       $0B
0008CF3C C60D                       	dc.b	nA5, $0D
0008CF3E E108                       	smpsAlterNote       $08
0008CF40 E701                       	dc.b	smpsNoAttack, $01
0008CF42 E104                       	smpsAlterNote       $04
0008CF44 E701                       	dc.b	smpsNoAttack, $01
0008CF46 E108                       	smpsAlterNote       $08
0008CF48 E701                       	dc.b	smpsNoAttack, $01
0008CF4A E10E                       	smpsAlterNote       $0E
0008CF4C E701                       	dc.b	smpsNoAttack, $01
0008CF4E E10F                       	smpsAlterNote       $0F
0008CF50 E701                       	dc.b	smpsNoAttack, $01
0008CF52 E10B                       	smpsAlterNote       $0B
0008CF54 E701                       	dc.b	smpsNoAttack, $01
0008CF56 E105                       	smpsAlterNote       $05
0008CF58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF5C E108                       	smpsAlterNote       $08
0008CF5E E701                       	dc.b	smpsNoAttack, $01
0008CF60 E10E                       	smpsAlterNote       $0E
0008CF62 E701                       	dc.b	smpsNoAttack, $01
0008CF64 E10F                       	smpsAlterNote       $0F
0008CF66 8001                       	dc.b	nRst, $01
0008CF68 E109                       	smpsAlterNote       $09
0008CF6A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008CF70 E108                       	smpsAlterNote       $08
0008CF72 C10D                       	dc.b	nE5, $0D
0008CF74 E102                       	smpsAlterNote       $02
0008CF76 E701                       	dc.b	smpsNoAttack, $01
0008CF78 E101                       	smpsAlterNote       $01
0008CF7A E701                       	dc.b	smpsNoAttack, $01
0008CF7C E105                       	smpsAlterNote       $05
0008CF7E E701                       	dc.b	smpsNoAttack, $01
0008CF80 E10B                       	smpsAlterNote       $0B
0008CF82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF86 E108                       	smpsAlterNote       $08
0008CF88 E701                       	dc.b	smpsNoAttack, $01
0008CF8A E102                       	smpsAlterNote       $02
0008CF8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF90 E108                       	smpsAlterNote       $08
0008CF92 E701                       	dc.b	smpsNoAttack, $01
0008CF94 E10B                       	smpsAlterNote       $0B
0008CF96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF9A E105                       	smpsAlterNote       $05
0008CF9C E701                       	dc.b	smpsNoAttack, $01
0008CF9E E101                       	smpsAlterNote       $01
0008CFA0 E701                       	dc.b	smpsNoAttack, $01
0008CFA2 E102                       	smpsAlterNote       $02
0008CFA4 E701                       	dc.b	smpsNoAttack, $01
0008CFA6 E108                       	smpsAlterNote       $08
0008CFA8 E701                       	dc.b	smpsNoAttack, $01
0008CFAA E10C                       	smpsAlterNote       $0C
0008CFAC E701                       	dc.b	smpsNoAttack, $01
0008CFAE E108                       	smpsAlterNote       $08
0008CFB0 E701                       	dc.b	smpsNoAttack, $01
0008CFB2 E105                       	smpsAlterNote       $05
0008CFB4 E701                       	dc.b	smpsNoAttack, $01
0008CFB6 E101                       	smpsAlterNote       $01
0008CFB8 E701                       	dc.b	smpsNoAttack, $01
0008CFBA E105                       	smpsAlterNote       $05
0008CFBC E701                       	dc.b	smpsNoAttack, $01
0008CFBE E10B                       	smpsAlterNote       $0B
0008CFC0 E701                       	dc.b	smpsNoAttack, $01
0008CFC2 E10C                       	smpsAlterNote       $0C
0008CFC4 E701                       	dc.b	smpsNoAttack, $01
0008CFC6 E108                       	smpsAlterNote       $08
0008CFC8 E701                       	dc.b	smpsNoAttack, $01
0008CFCA E102                       	smpsAlterNote       $02
0008CFCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFD0 E105                       	smpsAlterNote       $05
0008CFD2 E701                       	dc.b	smpsNoAttack, $01
0008CFD4 E10B                       	smpsAlterNote       $0B
0008CFD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFDA E105                       	smpsAlterNote       $05
0008CFDC E701                       	dc.b	smpsNoAttack, $01
0008CFDE E102                       	smpsAlterNote       $02
0008CFE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFE4 E108                       	smpsAlterNote       $08
0008CFE6 E701                       	dc.b	smpsNoAttack, $01
0008CFE8 E10C                       	smpsAlterNote       $0C
0008CFEA E701                       	dc.b	smpsNoAttack, $01
0008CFEC E10B                       	smpsAlterNote       $0B
0008CFEE E701                       	dc.b	smpsNoAttack, $01
0008CFF0 E105                       	smpsAlterNote       $05
0008CFF2 E701                       	dc.b	smpsNoAttack, $01
0008CFF4 E101                       	smpsAlterNote       $01
0008CFF6 E701                       	dc.b	smpsNoAttack, $01
0008CFF8 E105                       	smpsAlterNote       $05
0008CFFA E701                       	dc.b	smpsNoAttack, $01
0008CFFC E108                       	smpsAlterNote       $08
0008CFFE E701                       	dc.b	smpsNoAttack, $01
0008D000 E10C                       	smpsAlterNote       $0C
0008D002 E701                       	dc.b	smpsNoAttack, $01
0008D004 E108                       	smpsAlterNote       $08
0008D006 E701                       	dc.b	smpsNoAttack, $01
0008D008 E102                       	smpsAlterNote       $02
0008D00A E701                       	dc.b	smpsNoAttack, $01
0008D00C E101                       	smpsAlterNote       $01
0008D00E E701                       	dc.b	smpsNoAttack, $01
0008D010 E105                       	smpsAlterNote       $05
0008D012 E701                       	dc.b	smpsNoAttack, $01
0008D014 E10B                       	smpsAlterNote       $0B
0008D016 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D01A E108                       	smpsAlterNote       $08
0008D01C E701                       	dc.b	smpsNoAttack, $01
0008D01E E102                       	smpsAlterNote       $02
0008D020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D024 E108                       	smpsAlterNote       $08
0008D026 E701                       	dc.b	smpsNoAttack, $01
0008D028 E10B                       	smpsAlterNote       $0B
0008D02A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D02E E105                       	smpsAlterNote       $05
0008D030 E701                       	dc.b	smpsNoAttack, $01
0008D032 E101                       	smpsAlterNote       $01
0008D034 E701                       	dc.b	smpsNoAttack, $01
0008D036 E102                       	smpsAlterNote       $02
0008D038 E701                       	dc.b	smpsNoAttack, $01
0008D03A E108                       	smpsAlterNote       $08
0008D03C E701                       	dc.b	smpsNoAttack, $01
0008D03E E10C                       	smpsAlterNote       $0C
0008D040 E701                       	dc.b	smpsNoAttack, $01
0008D042 E108                       	smpsAlterNote       $08
0008D044 E701                       	dc.b	smpsNoAttack, $01
0008D046 E105                       	smpsAlterNote       $05
0008D048 E701                       	dc.b	smpsNoAttack, $01
0008D04A E101                       	smpsAlterNote       $01
0008D04C E701                       	dc.b	smpsNoAttack, $01
0008D04E E105                       	smpsAlterNote       $05
0008D050 E701                       	dc.b	smpsNoAttack, $01
0008D052 E10B                       	smpsAlterNote       $0B
0008D054 E701                       	dc.b	smpsNoAttack, $01
0008D056 E10C                       	smpsAlterNote       $0C
0008D058 E701                       	dc.b	smpsNoAttack, $01
0008D05A E108                       	smpsAlterNote       $08
0008D05C E701                       	dc.b	smpsNoAttack, $01
0008D05E E102                       	smpsAlterNote       $02
0008D060 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D064 E105                       	smpsAlterNote       $05
0008D066 E701                       	dc.b	smpsNoAttack, $01
0008D068 E10B                       	smpsAlterNote       $0B
0008D06A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D06E E105                       	smpsAlterNote       $05
0008D070 E701                       	dc.b	smpsNoAttack, $01
0008D072 E101                       	smpsAlterNote       $01
0008D074 E701                       	dc.b	smpsNoAttack, $01
0008D076 E102                       	smpsAlterNote       $02
0008D078 E701                       	dc.b	smpsNoAttack, $01
0008D07A E108                       	smpsAlterNote       $08
0008D07C E701                       	dc.b	smpsNoAttack, $01
0008D07E E10C                       	smpsAlterNote       $0C
0008D080 E701                       	dc.b	smpsNoAttack, $01
0008D082 E108                       	smpsAlterNote       $08
0008D084 E701                       	dc.b	smpsNoAttack, $01
0008D086 E105                       	smpsAlterNote       $05
0008D088 E701                       	dc.b	smpsNoAttack, $01
0008D08A E101                       	smpsAlterNote       $01
0008D08C E701                       	dc.b	smpsNoAttack, $01
0008D08E E105                       	smpsAlterNote       $05
0008D090 E701                       	dc.b	smpsNoAttack, $01
0008D092 E10B                       	smpsAlterNote       $0B
0008D094 E701                       	dc.b	smpsNoAttack, $01
0008D096 E10C                       	smpsAlterNote       $0C
0008D098 E701                       	dc.b	smpsNoAttack, $01
0008D09A E108                       	smpsAlterNote       $08
0008D09C E701                       	dc.b	smpsNoAttack, $01
0008D09E E102                       	smpsAlterNote       $02
0008D0A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0A4 E105                       	smpsAlterNote       $05
0008D0A6 E701                       	dc.b	smpsNoAttack, $01
0008D0A8 E10B                       	smpsAlterNote       $0B
0008D0AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0AE E105                       	smpsAlterNote       $05
0008D0B0 E701                       	dc.b	smpsNoAttack, $01
0008D0B2 E102                       	smpsAlterNote       $02
0008D0B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0B8 E108                       	smpsAlterNote       $08
0008D0BA E701                       	dc.b	smpsNoAttack, $01
0008D0BC E10C                       	smpsAlterNote       $0C
0008D0BE E701                       	dc.b	smpsNoAttack, $01
0008D0C0 E10B                       	smpsAlterNote       $0B
0008D0C2 E701                       	dc.b	smpsNoAttack, $01
0008D0C4 E105                       	smpsAlterNote       $05
0008D0C6 E701                       	dc.b	smpsNoAttack, $01
0008D0C8 E101                       	smpsAlterNote       $01
0008D0CA E701                       	dc.b	smpsNoAttack, $01
0008D0CC E105                       	smpsAlterNote       $05
0008D0CE E701                       	dc.b	smpsNoAttack, $01
0008D0D0 E108                       	smpsAlterNote       $08
0008D0D2 E701                       	dc.b	smpsNoAttack, $01
0008D0D4 E10C                       	smpsAlterNote       $0C
0008D0D6 E701                       	dc.b	smpsNoAttack, $01
0008D0DA E10B                       	smpsAlterNote       $0B
0008D0DC C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0E0 E109                       	smpsAlterNote       $09
0008D0E2 C404                       	dc.b	nG5, $04
0008D0E4 E10B                       	smpsAlterNote       $0B
0008D0E6 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0EA E107                       	smpsAlterNote       $07
0008D0EC BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D0F2 E10B                       	smpsAlterNote       $0B
0008D0F4 C604                       	dc.b	nA5, $04
0008D0F6 E109                       	smpsAlterNote       $09
0008D0F8 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D0FC E10B                       	smpsAlterNote       $0B
0008D0FE C604                       	dc.b	nA5, $04
0008D100 E108                       	smpsAlterNote       $08
0008D102 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D108 E106                       	smpsAlterNote       $06
0008D10A C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D10E E10C                       	smpsAlterNote       $0C
0008D110 C704                       	dc.b	nBb5, $04
0008D112 E10B                       	smpsAlterNote       $0B
0008D114 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D118 E109                       	smpsAlterNote       $09
0008D11A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D124 E10B                       	smpsAlterNote       $0B
0008D126 C60D                       	dc.b	nA5, $0D
0008D128 E108                       	smpsAlterNote       $08
0008D12A E701                       	dc.b	smpsNoAttack, $01
0008D12C E104                       	smpsAlterNote       $04
0008D12E E701                       	dc.b	smpsNoAttack, $01
0008D130 E108                       	smpsAlterNote       $08
0008D132 E701                       	dc.b	smpsNoAttack, $01
0008D134 E10B                       	smpsAlterNote       $0B
0008D136 E701                       	dc.b	smpsNoAttack, $01
0008D138 E10F                       	smpsAlterNote       $0F
0008D13A E701                       	dc.b	smpsNoAttack, $01
0008D13C E10B                       	smpsAlterNote       $0B
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 E105                       	smpsAlterNote       $05
0008D142 E701                       	dc.b	smpsNoAttack, $01
0008D144 E104                       	smpsAlterNote       $04
0008D146 E701                       	dc.b	smpsNoAttack, $01
0008D148 E108                       	smpsAlterNote       $08
0008D14A E701                       	dc.b	smpsNoAttack, $01
0008D14C E10E                       	smpsAlterNote       $0E
0008D14E E701                       	dc.b	smpsNoAttack, $01
0008D150 E10F                       	smpsAlterNote       $0F
0008D152 8001                       	dc.b	nRst, $01
0008D154 E109                       	smpsAlterNote       $09
0008D156 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D15C E108                       	smpsAlterNote       $08
0008D15E C10D                       	dc.b	nE5, $0D
0008D160 E105                       	smpsAlterNote       $05
0008D162 E701                       	dc.b	smpsNoAttack, $01
0008D164 E101                       	smpsAlterNote       $01
0008D166 E701                       	dc.b	smpsNoAttack, $01
0008D168 E105                       	smpsAlterNote       $05
0008D16A E701                       	dc.b	smpsNoAttack, $01
0008D16C E10B                       	smpsAlterNote       $0B
0008D16E E701                       	dc.b	smpsNoAttack, $01
0008D170 E10C                       	smpsAlterNote       $0C
0008D172 E701                       	dc.b	smpsNoAttack, $01
0008D174 E108                       	smpsAlterNote       $08
0008D176 E701                       	dc.b	smpsNoAttack, $01
0008D178 E102                       	smpsAlterNote       $02
0008D17A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D17E E105                       	smpsAlterNote       $05
0008D180 E701                       	dc.b	smpsNoAttack, $01
0008D182 E10B                       	smpsAlterNote       $0B
0008D184 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D188 E105                       	smpsAlterNote       $05
0008D18A E701                       	dc.b	smpsNoAttack, $01
0008D18C E102                       	smpsAlterNote       $02
0008D18E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D192 E108                       	smpsAlterNote       $08
0008D194 E701                       	dc.b	smpsNoAttack, $01
0008D196 E10C                       	smpsAlterNote       $0C
0008D198 E701                       	dc.b	smpsNoAttack, $01
0008D19A E10B                       	smpsAlterNote       $0B
0008D19C E701                       	dc.b	smpsNoAttack, $01
0008D19E E105                       	smpsAlterNote       $05
0008D1A0 E701                       	dc.b	smpsNoAttack, $01
0008D1A2 E101                       	smpsAlterNote       $01
0008D1A4 E701                       	dc.b	smpsNoAttack, $01
0008D1A6 E105                       	smpsAlterNote       $05
0008D1A8 E701                       	dc.b	smpsNoAttack, $01
0008D1AA E108                       	smpsAlterNote       $08
0008D1AC E701                       	dc.b	smpsNoAttack, $01
0008D1AE E10C                       	smpsAlterNote       $0C
0008D1B0 E701                       	dc.b	smpsNoAttack, $01
0008D1B2 E108                       	smpsAlterNote       $08
0008D1B4 E701                       	dc.b	smpsNoAttack, $01
0008D1B6 E102                       	smpsAlterNote       $02
0008D1B8 E701                       	dc.b	smpsNoAttack, $01
0008D1BA E101                       	smpsAlterNote       $01
0008D1BC E701                       	dc.b	smpsNoAttack, $01
0008D1BE E105                       	smpsAlterNote       $05
0008D1C0 E701                       	dc.b	smpsNoAttack, $01
0008D1C2 E10B                       	smpsAlterNote       $0B
0008D1C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1C8 E108                       	smpsAlterNote       $08
0008D1CA E701                       	dc.b	smpsNoAttack, $01
0008D1CC E102                       	smpsAlterNote       $02
0008D1CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1D2 E108                       	smpsAlterNote       $08
0008D1D4 E701                       	dc.b	smpsNoAttack, $01
0008D1D6 E10B                       	smpsAlterNote       $0B
0008D1D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1DC E105                       	smpsAlterNote       $05
0008D1DE E701                       	dc.b	smpsNoAttack, $01
0008D1E0 E101                       	smpsAlterNote       $01
0008D1E2 E701                       	dc.b	smpsNoAttack, $01
0008D1E4 E102                       	smpsAlterNote       $02
0008D1E6 E701                       	dc.b	smpsNoAttack, $01
0008D1E8 E108                       	smpsAlterNote       $08
0008D1EA E701                       	dc.b	smpsNoAttack, $01
0008D1EC E10C                       	smpsAlterNote       $0C
0008D1EE E701                       	dc.b	smpsNoAttack, $01
0008D1F0 E108                       	smpsAlterNote       $08
0008D1F2 E701                       	dc.b	smpsNoAttack, $01
0008D1F4 E105                       	smpsAlterNote       $05
0008D1F6 E701                       	dc.b	smpsNoAttack, $01
0008D1F8 E101                       	smpsAlterNote       $01
0008D1FA E701                       	dc.b	smpsNoAttack, $01
0008D1FC E105                       	smpsAlterNote       $05
0008D1FE E701                       	dc.b	smpsNoAttack, $01
0008D200 E10B                       	smpsAlterNote       $0B
0008D202 E701                       	dc.b	smpsNoAttack, $01
0008D204 E10C                       	smpsAlterNote       $0C
0008D206 E701                       	dc.b	smpsNoAttack, $01
0008D208 E108                       	smpsAlterNote       $08
0008D20A E701                       	dc.b	smpsNoAttack, $01
0008D20C E102                       	smpsAlterNote       $02
0008D20E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D212 E108                       	smpsAlterNote       $08
0008D214 E701                       	dc.b	smpsNoAttack, $01
0008D216 E10B                       	smpsAlterNote       $0B
0008D218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D21C E105                       	smpsAlterNote       $05
0008D21E E701                       	dc.b	smpsNoAttack, $01
0008D220 E101                       	smpsAlterNote       $01
0008D222 E701                       	dc.b	smpsNoAttack, $01
0008D224 E102                       	smpsAlterNote       $02
0008D226 E701                       	dc.b	smpsNoAttack, $01
0008D228 E108                       	smpsAlterNote       $08
0008D22A E701                       	dc.b	smpsNoAttack, $01
0008D22C E10C                       	smpsAlterNote       $0C
0008D22E E701                       	dc.b	smpsNoAttack, $01
0008D230 E108                       	smpsAlterNote       $08
0008D232 E701                       	dc.b	smpsNoAttack, $01
0008D234 E105                       	smpsAlterNote       $05
0008D236 E701                       	dc.b	smpsNoAttack, $01
0008D238 E101                       	smpsAlterNote       $01
0008D23A E701                       	dc.b	smpsNoAttack, $01
0008D23C E105                       	smpsAlterNote       $05
0008D23E E701                       	dc.b	smpsNoAttack, $01
0008D240 E10B                       	smpsAlterNote       $0B
0008D242 E701                       	dc.b	smpsNoAttack, $01
0008D244 E10C                       	smpsAlterNote       $0C
0008D246 E701                       	dc.b	smpsNoAttack, $01
0008D248 E108                       	smpsAlterNote       $08
0008D24A E701                       	dc.b	smpsNoAttack, $01
0008D24C E102                       	smpsAlterNote       $02
0008D24E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D252 E105                       	smpsAlterNote       $05
0008D254 E701                       	dc.b	smpsNoAttack, $01
0008D256 E10B                       	smpsAlterNote       $0B
0008D258 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D25C E105                       	smpsAlterNote       $05
0008D25E E701                       	dc.b	smpsNoAttack, $01
0008D260 E102                       	smpsAlterNote       $02
0008D262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D266 E108                       	smpsAlterNote       $08
0008D268 E701                       	dc.b	smpsNoAttack, $01
0008D26A E10C                       	smpsAlterNote       $0C
0008D26C E701                       	dc.b	smpsNoAttack, $01
0008D26E E10B                       	smpsAlterNote       $0B
0008D270 E701                       	dc.b	smpsNoAttack, $01
0008D272 E105                       	smpsAlterNote       $05
0008D274 E701                       	dc.b	smpsNoAttack, $01
0008D276 E101                       	smpsAlterNote       $01
0008D278 E701                       	dc.b	smpsNoAttack, $01
0008D27A E105                       	smpsAlterNote       $05
0008D27C E701                       	dc.b	smpsNoAttack, $01
0008D27E E108                       	smpsAlterNote       $08
0008D280 E701                       	dc.b	smpsNoAttack, $01
0008D282 E10C                       	smpsAlterNote       $0C
0008D284 E701                       	dc.b	smpsNoAttack, $01
0008D286 E108                       	smpsAlterNote       $08
0008D288 E701                       	dc.b	smpsNoAttack, $01
0008D28A E102                       	smpsAlterNote       $02
0008D28C E701                       	dc.b	smpsNoAttack, $01
0008D28E E101                       	smpsAlterNote       $01
0008D290 E701                       	dc.b	smpsNoAttack, $01
0008D292 E105                       	smpsAlterNote       $05
0008D294 E701                       	dc.b	smpsNoAttack, $01
0008D296 E10B                       	smpsAlterNote       $0B
0008D298 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D29C E108                       	smpsAlterNote       $08
0008D29E E701                       	dc.b	smpsNoAttack, $01
0008D2A0 E102                       	smpsAlterNote       $02
0008D2A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2A6 E108                       	smpsAlterNote       $08
0008D2A8 E701                       	dc.b	smpsNoAttack, $01
0008D2AA E10B                       	smpsAlterNote       $0B
0008D2AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2B0 E105                       	smpsAlterNote       $05
0008D2B2 E701                       	dc.b	smpsNoAttack, $01
0008D2B4 E102                       	smpsAlterNote       $02
0008D2B6 8001                       	dc.b	nRst, $01
0008D2B8 E107                       	smpsAlterNote       $07
0008D2BA BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D2BE E108                       	smpsAlterNote       $08
0008D2C0 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D2C4 E102                       	smpsAlterNote       $02
0008D2C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2CA E108                       	smpsAlterNote       $08
0008D2CC E701                       	dc.b	smpsNoAttack, $01
0008D2CE E10B                       	smpsAlterNote       $0B
0008D2D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2D4 E105                       	smpsAlterNote       $05
0008D2D6 E701                       	dc.b	smpsNoAttack, $01
0008D2D8 E101                       	smpsAlterNote       $01
0008D2DA E701                       	dc.b	smpsNoAttack, $01
0008D2DC E102                       	smpsAlterNote       $02
0008D2DE E701                       	dc.b	smpsNoAttack, $01
0008D2E0 E108                       	smpsAlterNote       $08
0008D2E2 E701                       	dc.b	smpsNoAttack, $01
0008D2E4 E10C                       	smpsAlterNote       $0C
0008D2E6 E701                       	dc.b	smpsNoAttack, $01
0008D2E8 E108                       	smpsAlterNote       $08
0008D2EA E701                       	dc.b	smpsNoAttack, $01
0008D2EC E105                       	smpsAlterNote       $05
0008D2EE E701                       	dc.b	smpsNoAttack, $01
0008D2F0 E101                       	smpsAlterNote       $01
0008D2F2 E701                       	dc.b	smpsNoAttack, $01
0008D2F4 E105                       	smpsAlterNote       $05
0008D2F6 E701                       	dc.b	smpsNoAttack, $01
0008D2F8 E10B                       	smpsAlterNote       $0B
0008D2FA E701                       	dc.b	smpsNoAttack, $01
0008D2FC E10C                       	smpsAlterNote       $0C
0008D2FE E701                       	dc.b	smpsNoAttack, $01
0008D300 E108                       	smpsAlterNote       $08
0008D302 E701                       	dc.b	smpsNoAttack, $01
0008D304 E102                       	smpsAlterNote       $02
0008D306 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D30A E105                       	smpsAlterNote       $05
0008D30C E701                       	dc.b	smpsNoAttack, $01
0008D30E E10B                       	smpsAlterNote       $0B
0008D310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D314 E105                       	smpsAlterNote       $05
0008D316 E701                       	dc.b	smpsNoAttack, $01
0008D318 E102                       	smpsAlterNote       $02
0008D31A E701                       	dc.b	smpsNoAttack, $01
0008D31C E109                       	smpsAlterNote       $09
0008D31E C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D322 E108                       	smpsAlterNote       $08
0008D324 C10D                       	dc.b	nE5, $0D
0008D326 E105                       	smpsAlterNote       $05
0008D328 E701                       	dc.b	smpsNoAttack, $01
0008D32A E101                       	smpsAlterNote       $01
0008D32C E701                       	dc.b	smpsNoAttack, $01
0008D32E E102                       	smpsAlterNote       $02
0008D330 E701                       	dc.b	smpsNoAttack, $01
0008D332 E108                       	smpsAlterNote       $08
0008D334 E701                       	dc.b	smpsNoAttack, $01
0008D336 E10C                       	smpsAlterNote       $0C
0008D338 E701                       	dc.b	smpsNoAttack, $01
0008D33A E108                       	smpsAlterNote       $08
0008D33C E701                       	dc.b	smpsNoAttack, $01
0008D33E E105                       	smpsAlterNote       $05
0008D340 E701                       	dc.b	smpsNoAttack, $01
0008D342 E101                       	smpsAlterNote       $01
0008D344 E701                       	dc.b	smpsNoAttack, $01
0008D346 E105                       	smpsAlterNote       $05
0008D348 E701                       	dc.b	smpsNoAttack, $01
0008D34A E10B                       	smpsAlterNote       $0B
0008D34C E701                       	dc.b	smpsNoAttack, $01
0008D34E E10C                       	smpsAlterNote       $0C
0008D350 E701                       	dc.b	smpsNoAttack, $01
0008D352 E108                       	smpsAlterNote       $08
0008D354 E701                       	dc.b	smpsNoAttack, $01
0008D356 E102                       	smpsAlterNote       $02
0008D358 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D360 E10B                       	smpsAlterNote       $0B
0008D362 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D366 E10C                       	smpsAlterNote       $0C
0008D368 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D36C E10B                       	smpsAlterNote       $0B
0008D36E BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D374 E107                       	smpsAlterNote       $07
0008D376 BF03                       	dc.b	nD5, $03
0008D378 E108                       	smpsAlterNote       $08
0008D37A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D37E E109                       	smpsAlterNote       $09
0008D380 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D386 E10B                       	smpsAlterNote       $0B
0008D388 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D38C E107                       	smpsAlterNote       $07
0008D38E BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D392 E106                       	smpsAlterNote       $06
0008D394 C90D                       	dc.b	nC6, $0D
0008D396 E103                       	smpsAlterNote       $03
0008D398 E701                       	dc.b	smpsNoAttack, $01
0008D39A E1FF                       	smpsAlterNote       $FF
0008D39C E701                       	dc.b	smpsNoAttack, $01
0008D39E E103                       	smpsAlterNote       $03
0008D3A0 E701                       	dc.b	smpsNoAttack, $01
0008D3A2 E109                       	smpsAlterNote       $09
0008D3A4 E701                       	dc.b	smpsNoAttack, $01
0008D3A6 E10A                       	smpsAlterNote       $0A
0008D3A8 E701                       	dc.b	smpsNoAttack, $01
0008D3AA E106                       	smpsAlterNote       $06
0008D3AC E701                       	dc.b	smpsNoAttack, $01
0008D3AE E100                       	smpsAlterNote       $00
0008D3B0 E701                       	dc.b	smpsNoAttack, $01
0008D3B2 E10C                       	smpsAlterNote       $0C
0008D3B4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D3B8 E10B                       	smpsAlterNote       $0B
0008D3BA C603                       	dc.b	nA5, $03
0008D3BC E109                       	smpsAlterNote       $09
0008D3BE C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D3C2 E10B                       	smpsAlterNote       $0B
0008D3C4 C60D                       	dc.b	nA5, $0D
0008D3C6 E105                       	smpsAlterNote       $05
0008D3C8 E701                       	dc.b	smpsNoAttack, $01
0008D3CA E104                       	smpsAlterNote       $04
0008D3CC E701                       	dc.b	smpsNoAttack, $01
0008D3CE E108                       	smpsAlterNote       $08
0008D3D0 E701                       	dc.b	smpsNoAttack, $01
0008D3D2 E10E                       	smpsAlterNote       $0E
0008D3D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3D8 E10B                       	smpsAlterNote       $0B
0008D3DA E701                       	dc.b	smpsNoAttack, $01
0008D3DC E105                       	smpsAlterNote       $05
0008D3DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3E2 E10B                       	smpsAlterNote       $0B
0008D3E4 E701                       	dc.b	smpsNoAttack, $01
0008D3E6 E10E                       	smpsAlterNote       $0E
0008D3E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3EC E108                       	smpsAlterNote       $08
0008D3EE E701                       	dc.b	smpsNoAttack, $01
0008D3F0 E104                       	smpsAlterNote       $04
0008D3F2 E701                       	dc.b	smpsNoAttack, $01
0008D3F4 E105                       	smpsAlterNote       $05
0008D3F6 E701                       	dc.b	smpsNoAttack, $01
0008D3F8 E10B                       	smpsAlterNote       $0B
0008D3FA E701                       	dc.b	smpsNoAttack, $01
0008D3FC E10F                       	smpsAlterNote       $0F
0008D3FE E701                       	dc.b	smpsNoAttack, $01
0008D400 E10B                       	smpsAlterNote       $0B
0008D402 E701                       	dc.b	smpsNoAttack, $01
0008D404 E108                       	smpsAlterNote       $08
0008D406 E701                       	dc.b	smpsNoAttack, $01
0008D408 E104                       	smpsAlterNote       $04
0008D40A E701                       	dc.b	smpsNoAttack, $01
0008D40C E108                       	smpsAlterNote       $08
0008D40E E701                       	dc.b	smpsNoAttack, $01
0008D410 E10E                       	smpsAlterNote       $0E
0008D412 E701                       	dc.b	smpsNoAttack, $01
0008D414 E10F                       	smpsAlterNote       $0F
0008D416 E701                       	dc.b	smpsNoAttack, $01
0008D418 E10B                       	smpsAlterNote       $0B
0008D41A E701                       	dc.b	smpsNoAttack, $01
0008D41C E105                       	smpsAlterNote       $05
0008D41E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D422 E108                       	smpsAlterNote       $08
0008D424 E701                       	dc.b	smpsNoAttack, $01
0008D426 E10E                       	smpsAlterNote       $0E
0008D428 E701                       	dc.b	smpsNoAttack, $01
0008D42A E10F                       	smpsAlterNote       $0F
0008D42C 800F                       	dc.b	nRst, $0F
0008D42E E107                       	smpsAlterNote       $07
0008D430 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D434 E108                       	smpsAlterNote       $08
0008D436 C103                       	dc.b	nE5, $03
0008D438 E109                       	smpsAlterNote       $09
0008D43A C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D440 E10B                       	smpsAlterNote       $0B
0008D442 C607                       	dc.b	nA5, $07
0008D444 E107                       	smpsAlterNote       $07
0008D446 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D44A E106                       	smpsAlterNote       $06
0008D44C C90D                       	dc.b	nC6, $0D
0008D44E E107                       	smpsAlterNote       $07
0008D450 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D454 E10C                       	smpsAlterNote       $0C
0008D456 C704                       	dc.b	nBb5, $04
0008D458 E10B                       	smpsAlterNote       $0B
0008D45A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D45E E109                       	smpsAlterNote       $09
0008D460 C404                       	dc.b	nG5, $04
0008D462 E10B                       	smpsAlterNote       $0B
0008D464 C60D                       	dc.b	nA5, $0D
0008D466 E108                       	smpsAlterNote       $08
0008D468 E701                       	dc.b	smpsNoAttack, $01
0008D46A E105                       	smpsAlterNote       $05
0008D46C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D470 E10B                       	smpsAlterNote       $0B
0008D472 E701                       	dc.b	smpsNoAttack, $01
0008D474 E10F                       	smpsAlterNote       $0F
0008D476 E701                       	dc.b	smpsNoAttack, $01
0008D478 E10E                       	smpsAlterNote       $0E
0008D47A E701                       	dc.b	smpsNoAttack, $01
0008D47C E108                       	smpsAlterNote       $08
0008D47E E701                       	dc.b	smpsNoAttack, $01
0008D480 E104                       	smpsAlterNote       $04
0008D482 E701                       	dc.b	smpsNoAttack, $01
0008D484 E108                       	smpsAlterNote       $08
0008D486 E701                       	dc.b	smpsNoAttack, $01
0008D488 E10B                       	smpsAlterNote       $0B
0008D48A E701                       	dc.b	smpsNoAttack, $01
0008D48C E10F                       	smpsAlterNote       $0F
0008D48E E701                       	dc.b	smpsNoAttack, $01
0008D490 E10B                       	smpsAlterNote       $0B
0008D492 E701                       	dc.b	smpsNoAttack, $01
0008D494 E105                       	smpsAlterNote       $05
0008D496 E701                       	dc.b	smpsNoAttack, $01
0008D498 E104                       	smpsAlterNote       $04
0008D49A E701                       	dc.b	smpsNoAttack, $01
0008D49C E108                       	smpsAlterNote       $08
0008D49E E701                       	dc.b	smpsNoAttack, $01
0008D4A0 E10E                       	smpsAlterNote       $0E
0008D4A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4A6 E10B                       	smpsAlterNote       $0B
0008D4A8 E701                       	dc.b	smpsNoAttack, $01
0008D4AA E105                       	smpsAlterNote       $05
0008D4AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4B0 E10B                       	smpsAlterNote       $0B
0008D4B2 E701                       	dc.b	smpsNoAttack, $01
0008D4B4 E10E                       	smpsAlterNote       $0E
0008D4B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4BA E108                       	smpsAlterNote       $08
0008D4BC E701                       	dc.b	smpsNoAttack, $01
0008D4BE E105                       	smpsAlterNote       $05
0008D4C0 8001                       	dc.b	nRst, $01
0008D4C2 E109                       	smpsAlterNote       $09
0008D4C4 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008D4C8 E10B                       	smpsAlterNote       $0B
0008D4CA C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D4D2 E109                       	smpsAlterNote       $09
0008D4D4 C404                       	dc.b	nG5, $04
0008D4D6 E10B                       	smpsAlterNote       $0B
0008D4D8 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D4DC E107                       	smpsAlterNote       $07
0008D4DE BF0D                       	dc.b	nD5, $0D
0008D4E0 E101                       	smpsAlterNote       $01
0008D4E2 E701                       	dc.b	smpsNoAttack, $01
0008D4E4 E100                       	smpsAlterNote       $00
0008D4E6 E701                       	dc.b	smpsNoAttack, $01
0008D4E8 E104                       	smpsAlterNote       $04
0008D4EA E701                       	dc.b	smpsNoAttack, $01
0008D4EC E10A                       	smpsAlterNote       $0A
0008D4EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4F2 E107                       	smpsAlterNote       $07
0008D4F4 E701                       	dc.b	smpsNoAttack, $01
0008D4F6 E101                       	smpsAlterNote       $01
0008D4F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4FC E107                       	smpsAlterNote       $07
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E10A                       	smpsAlterNote       $0A
0008D502 E701                       	dc.b	smpsNoAttack, $01
0008D504 E10B                       	smpsAlterNote       $0B
0008D506 8001                       	dc.b	nRst, $01
0008D508 E108                       	smpsAlterNote       $08
0008D50A 8001                       	dc.b	nRst, $01
0008D50C E109                       	smpsAlterNote       $09
0008D50E 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008D512 E10B                       	smpsAlterNote       $0B
0008D514 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D51C E108                       	smpsAlterNote       $08
0008D51E CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D522 E109                       	smpsAlterNote       $09
0008D524 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D528 E108                       	smpsAlterNote       $08
0008D52A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D52E E106                       	smpsAlterNote       $06
0008D530 C903                       	dc.b	nC6, $03
0008D532 E109                       	smpsAlterNote       $09
0008D534 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D538 E10C                       	smpsAlterNote       $0C
0008D53A C70D                       	dc.b	nBb5, $0D
0008D53C E109                       	smpsAlterNote       $09
0008D53E E701                       	dc.b	smpsNoAttack, $01
0008D540 E105                       	smpsAlterNote       $05
0008D542 E701                       	dc.b	smpsNoAttack, $01
0008D544 E109                       	smpsAlterNote       $09
0008D546 E701                       	dc.b	smpsNoAttack, $01
0008D548 E10F                       	smpsAlterNote       $0F
0008D54A E701                       	dc.b	smpsNoAttack, $01
0008D54C E110                       	smpsAlterNote       $10
0008D54E E701                       	dc.b	smpsNoAttack, $01
0008D550 E10C                       	smpsAlterNote       $0C
0008D552 E701                       	dc.b	smpsNoAttack, $01
0008D554 E106                       	smpsAlterNote       $06
0008D556 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D55A E109                       	smpsAlterNote       $09
0008D55C E701                       	dc.b	smpsNoAttack, $01
0008D55E E10F                       	smpsAlterNote       $0F
0008D560 E701                       	dc.b	smpsNoAttack, $01
0008D562 E110                       	smpsAlterNote       $10
0008D564 8001                       	dc.b	nRst, $01
0008D566 E10B                       	smpsAlterNote       $0B
0008D568 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D56C E109                       	smpsAlterNote       $09
0008D56E C40D                       	dc.b	nG5, $0D
0008D570 E103                       	smpsAlterNote       $03
0008D572 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D576 E106                       	smpsAlterNote       $06
0008D578 E701                       	dc.b	smpsNoAttack, $01
0008D57A E10C                       	smpsAlterNote       $0C
0008D57C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D580 E106                       	smpsAlterNote       $06
0008D582 E701                       	dc.b	smpsNoAttack, $01
0008D584 E103                       	smpsAlterNote       $03
0008D586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D58A E109                       	smpsAlterNote       $09
0008D58C E701                       	dc.b	smpsNoAttack, $01
0008D58E E10D                       	smpsAlterNote       $0D
0008D590 E701                       	dc.b	smpsNoAttack, $01
0008D592 E10C                       	smpsAlterNote       $0C
0008D594 E701                       	dc.b	smpsNoAttack, $01
0008D596 E106                       	smpsAlterNote       $06
0008D598 E701                       	dc.b	smpsNoAttack, $01
0008D59A E102                       	smpsAlterNote       $02
0008D59C E701                       	dc.b	smpsNoAttack, $01
0008D59E E103                       	smpsAlterNote       $03
0008D5A0 8001                       	dc.b	nRst, $01
0008D5A2 E10B                       	smpsAlterNote       $0B
0008D5A4 C60D                       	dc.b	nA5, $0D
0008D5A6 E108                       	smpsAlterNote       $08
0008D5A8 E701                       	dc.b	smpsNoAttack, $01
0008D5AA E104                       	smpsAlterNote       $04
0008D5AC E701                       	dc.b	smpsNoAttack, $01
0008D5AE E108                       	smpsAlterNote       $08
0008D5B0 E701                       	dc.b	smpsNoAttack, $01
0008D5B2 E10B                       	smpsAlterNote       $0B
0008D5B4 E701                       	dc.b	smpsNoAttack, $01
0008D5B6 E10F                       	smpsAlterNote       $0F
0008D5B8 E701                       	dc.b	smpsNoAttack, $01
0008D5BA E10B                       	smpsAlterNote       $0B
0008D5BC E701                       	dc.b	smpsNoAttack, $01
0008D5BE E105                       	smpsAlterNote       $05
0008D5C0 E701                       	dc.b	smpsNoAttack, $01
0008D5C2 E104                       	smpsAlterNote       $04
0008D5C4 E701                       	dc.b	smpsNoAttack, $01
0008D5C6 E108                       	smpsAlterNote       $08
0008D5C8 E701                       	dc.b	smpsNoAttack, $01
0008D5CA E10E                       	smpsAlterNote       $0E
0008D5CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5D0 E10B                       	smpsAlterNote       $0B
0008D5D2 E701                       	dc.b	smpsNoAttack, $01
0008D5D4 E105                       	smpsAlterNote       $05
0008D5D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5DA E10C                       	smpsAlterNote       $0C
0008D5DC C70E                       	dc.b	nBb5, $0E
0008D5DE E106                       	smpsAlterNote       $06
0008D5E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5E4 E10C                       	smpsAlterNote       $0C
0008D5E6 E701                       	dc.b	smpsNoAttack, $01
0008D5E8 E10F                       	smpsAlterNote       $0F
0008D5EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5EE E109                       	smpsAlterNote       $09
0008D5F0 E701                       	dc.b	smpsNoAttack, $01
0008D5F2 E105                       	smpsAlterNote       $05
0008D5F4 E701                       	dc.b	smpsNoAttack, $01
0008D5F6 E106                       	smpsAlterNote       $06
0008D5F8 E701                       	dc.b	smpsNoAttack, $01
0008D5FA E10C                       	smpsAlterNote       $0C
0008D5FC E701                       	dc.b	smpsNoAttack, $01
0008D5FE E110                       	smpsAlterNote       $10
0008D600 E701                       	dc.b	smpsNoAttack, $01
0008D602 E10C                       	smpsAlterNote       $0C
0008D604 E701                       	dc.b	smpsNoAttack, $01
0008D606 E109                       	smpsAlterNote       $09
0008D608 E701                       	dc.b	smpsNoAttack, $01
0008D60A E105                       	smpsAlterNote       $05
0008D60C E701                       	dc.b	smpsNoAttack, $01
0008D60E E106                       	smpsAlterNote       $06
0008D610 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008D614 E107                       	smpsAlterNote       $07
0008D616 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008D61B E108                       	smpsAlterNote       $08
0008D61D CD0D                       	dc.b	nE6, $0D
0008D61F E107                       	smpsAlterNote       $07
0008D621 CB0D                       	dc.b	nD6, $0D
0008D623 E104                       	smpsAlterNote       $04
0008D625 E701                       	dc.b	smpsNoAttack, $01
0008D627 E100                       	smpsAlterNote       $00
0008D629 E701                       	dc.b	smpsNoAttack, $01
0008D62B E101                       	smpsAlterNote       $01
0008D62D E701                       	dc.b	smpsNoAttack, $01
0008D62F E107                       	smpsAlterNote       $07
0008D631 E701                       	dc.b	smpsNoAttack, $01
0008D633 E10B                       	smpsAlterNote       $0B
0008D635 E701                       	dc.b	smpsNoAttack, $01
0008D637 E107                       	smpsAlterNote       $07
0008D639 E701                       	dc.b	smpsNoAttack, $01
0008D63B E104                       	smpsAlterNote       $04
0008D63D E701                       	dc.b	smpsNoAttack, $01
0008D63F E100                       	smpsAlterNote       $00
0008D641 E701                       	dc.b	smpsNoAttack, $01
0008D643 E104                       	smpsAlterNote       $04
0008D645 E701                       	dc.b	smpsNoAttack, $01
0008D647 E10A                       	smpsAlterNote       $0A
0008D649 E701                       	dc.b	smpsNoAttack, $01
0008D64B E10B                       	smpsAlterNote       $0B
0008D64D E701                       	dc.b	smpsNoAttack, $01
0008D64F E108                       	smpsAlterNote       $08
0008D651 CC0D                       	dc.b	nEb6, $0D
0008D653 E105                       	smpsAlterNote       $05
0008D655 E701                       	dc.b	smpsNoAttack, $01
0008D657 E101                       	smpsAlterNote       $01
0008D659 E701                       	dc.b	smpsNoAttack, $01
0008D65B E102                       	smpsAlterNote       $02
0008D65D E701                       	dc.b	smpsNoAttack, $01
0008D65F E108                       	smpsAlterNote       $08
0008D661 E701                       	dc.b	smpsNoAttack, $01
0008D663 E106                       	smpsAlterNote       $06
0008D665 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008D671 8001                       	dc.b	nRst, $01
0008D673 E107                       	smpsAlterNote       $07
0008D675 CB0D                       	dc.b	nD6, $0D
0008D677 E104                       	smpsAlterNote       $04
0008D679 E701                       	dc.b	smpsNoAttack, $01
0008D67B E100                       	smpsAlterNote       $00
0008D67D E701                       	dc.b	smpsNoAttack, $01
0008D67F E104                       	smpsAlterNote       $04
0008D681 E701                       	dc.b	smpsNoAttack, $01
0008D683 E107                       	smpsAlterNote       $07
0008D685 E701                       	dc.b	smpsNoAttack, $01
0008D687 E10B                       	smpsAlterNote       $0B
0008D689 E701                       	dc.b	smpsNoAttack, $01
0008D68B E107                       	smpsAlterNote       $07
0008D68D E701                       	dc.b	smpsNoAttack, $01
0008D68F E101                       	smpsAlterNote       $01
0008D691 E701                       	dc.b	smpsNoAttack, $01
0008D693 E100                       	smpsAlterNote       $00
0008D695 E701                       	dc.b	smpsNoAttack, $01
0008D697 E104                       	smpsAlterNote       $04
0008D699 E701                       	dc.b	smpsNoAttack, $01
0008D69B E10A                       	smpsAlterNote       $0A
0008D69D E701                       	dc.b	smpsNoAttack, $01
0008D69F E10B                       	smpsAlterNote       $0B
0008D6A1 8001                       	dc.b	nRst, $01
0008D6A3 E109                       	smpsAlterNote       $09
0008D6A5 CE0A                       	dc.b	nF6, $0A
0008D6A7 E108                       	smpsAlterNote       $08
0008D6A9 CC07                       	dc.b	nEb6, $07
0008D6AB E106                       	smpsAlterNote       $06
0008D6AD C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008D6B9 E107                       	smpsAlterNote       $07
0008D6BB CB0D                       	dc.b	nD6, $0D
0008D6BD E101                       	smpsAlterNote       $01
0008D6BF E701                       	dc.b	smpsNoAttack, $01
0008D6C1 E100                       	smpsAlterNote       $00
0008D6C3 E701                       	dc.b	smpsNoAttack, $01
0008D6C5 E104                       	smpsAlterNote       $04
0008D6C7 E701                       	dc.b	smpsNoAttack, $01
0008D6C9 E10A                       	smpsAlterNote       $0A
0008D6CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6CF E107                       	smpsAlterNote       $07
0008D6D1 E701                       	dc.b	smpsNoAttack, $01
0008D6D3 E101                       	smpsAlterNote       $01
0008D6D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6D9 E107                       	smpsAlterNote       $07
0008D6DB E701                       	dc.b	smpsNoAttack, $01
0008D6DD E10A                       	smpsAlterNote       $0A
0008D6DF E701                       	dc.b	smpsNoAttack, $01
0008D6E1 E10B                       	smpsAlterNote       $0B
0008D6E3 8001                       	dc.b	nRst, $01
0008D6E5 E108                       	smpsAlterNote       $08
0008D6E7 CC0D                       	dc.b	nEb6, $0D
0008D6E9 E102                       	smpsAlterNote       $02
0008D6EB E701                       	dc.b	smpsNoAttack, $01
0008D6ED E101                       	smpsAlterNote       $01
0008D6EF E701                       	dc.b	smpsNoAttack, $01
0008D6F1 E105                       	smpsAlterNote       $05
0008D6F3 E701                       	dc.b	smpsNoAttack, $01
0008D6F5 E108                       	smpsAlterNote       $08
0008D6F7 8001                       	dc.b	nRst, $01
0008D6F9 E106                       	smpsAlterNote       $06
0008D6FB C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008D707 8001                       	dc.b	nRst, $01
0008D709 E107                       	smpsAlterNote       $07
0008D70B CB0D                       	dc.b	nD6, $0D
0008D70D E101                       	smpsAlterNote       $01
0008D70F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D713 E104                       	smpsAlterNote       $04
0008D715 E701                       	dc.b	smpsNoAttack, $01
0008D717 E10A                       	smpsAlterNote       $0A
0008D719 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D71D E104                       	smpsAlterNote       $04
0008D71F E701                       	dc.b	smpsNoAttack, $01
0008D721 E101                       	smpsAlterNote       $01
0008D723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D727 E107                       	smpsAlterNote       $07
0008D729 E701                       	dc.b	smpsNoAttack, $01
0008D72B E10B                       	smpsAlterNote       $0B
0008D72D E701                       	dc.b	smpsNoAttack, $01
0008D72F E10A                       	smpsAlterNote       $0A
0008D731 E701                       	dc.b	smpsNoAttack, $01
0008D733 E104                       	smpsAlterNote       $04
0008D735 E701                       	dc.b	smpsNoAttack, $01
0008D737 E100                       	smpsAlterNote       $00
0008D739 E701                       	dc.b	smpsNoAttack, $01
0008D73B E101                       	smpsAlterNote       $01
0008D73D 801C                       	dc.b	nRst, $1C
0008D741 E107                       	smpsAlterNote       $07
0008D743 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D747 E603                       	smpsAlterVol        $03
0008D749 F6F1 AD                    	smpsJump            music84_Jump03
0008D74C                            
0008D74C                            ; FM3 Data
0008D74C                            music84_FM3:
0008D74C E0C0                       	smpsPan             panCenter, $00
0008D750 E109                       	smpsAlterNote       $09
0008D752 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008D756 E108                       	smpsAlterNote       $08
0008D758 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008D75C E10B                       	smpsAlterNote       $0B
0008D75E BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008D764 E040                       	smpsPan             panRight, $00
0008D766 E110                       	smpsAlterNote       $10
0008D768 E6F9                       	smpsAlterVol        $F9
0008D76A C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008D76E E10F                       	smpsAlterNote       $0F
0008D770 C603                       	dc.b	nA5, $03
0008D772 E10D                       	smpsAlterNote       $0D
0008D774 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008D77A E10C                       	smpsAlterNote       $0C
0008D77C C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D780 E10A                       	smpsAlterNote       $0A
0008D782 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008D786 E10F                       	smpsAlterNote       $0F
0008D788 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D78C E0C0                       	smpsPan             panCenter, $00
0008D790 E109                       	smpsAlterNote       $09
0008D792 E609                       	smpsAlterVol        $09
0008D794 B603                       	dc.b	nF4, $03
0008D796                            
0008D796                            music84_Jump02:
0008D796 E70A                       	dc.b	smpsNoAttack, $0A
0008D798 E103                       	smpsAlterNote       $03
0008D79A E701                       	dc.b	smpsNoAttack, $01
0008D79C E102                       	smpsAlterNote       $02
0008D79E E701                       	dc.b	smpsNoAttack, $01
0008D7A0 E106                       	smpsAlterNote       $06
0008D7A2 E701                       	dc.b	smpsNoAttack, $01
0008D7A4 E10C                       	smpsAlterNote       $0C
0008D7A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7AA E109                       	smpsAlterNote       $09
0008D7AC E701                       	dc.b	smpsNoAttack, $01
0008D7AE E103                       	smpsAlterNote       $03
0008D7B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7B4 E109                       	smpsAlterNote       $09
0008D7B6 E701                       	dc.b	smpsNoAttack, $01
0008D7B8 E10C                       	smpsAlterNote       $0C
0008D7BA E701                       	dc.b	smpsNoAttack, $01
0008D7BC E10D                       	smpsAlterNote       $0D
0008D7BE 8001                       	dc.b	nRst, $01
0008D7C0 E109                       	smpsAlterNote       $09
0008D7C2 B80D                       	dc.b	nG4, $0D
0008D7C4 E103                       	smpsAlterNote       $03
0008D7C6 E701                       	dc.b	smpsNoAttack, $01
0008D7C8 E102                       	smpsAlterNote       $02
0008D7CA E701                       	dc.b	smpsNoAttack, $01
0008D7CC E106                       	smpsAlterNote       $06
0008D7CE E701                       	dc.b	smpsNoAttack, $01
0008D7D0 E10C                       	smpsAlterNote       $0C
0008D7D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7D6 E109                       	smpsAlterNote       $09
0008D7D8 E701                       	dc.b	smpsNoAttack, $01
0008D7DA E103                       	smpsAlterNote       $03
0008D7DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7E0 E109                       	smpsAlterNote       $09
0008D7E2 E701                       	dc.b	smpsNoAttack, $01
0008D7E4 E10C                       	smpsAlterNote       $0C
0008D7E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7EA E106                       	smpsAlterNote       $06
0008D7EC E701                       	dc.b	smpsNoAttack, $01
0008D7EE E102                       	smpsAlterNote       $02
0008D7F0 E701                       	dc.b	smpsNoAttack, $01
0008D7F2 E103                       	smpsAlterNote       $03
0008D7F4 E701                       	dc.b	smpsNoAttack, $01
0008D7F6 E109                       	smpsAlterNote       $09
0008D7F8 E701                       	dc.b	smpsNoAttack, $01
0008D7FA E10D                       	smpsAlterNote       $0D
0008D7FC E701                       	dc.b	smpsNoAttack, $01
0008D7FE E109                       	smpsAlterNote       $09
0008D800 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D804 E10B                       	smpsAlterNote       $0B
0008D806 BA0D                       	dc.b	nA4, $0D
0008D808 E105                       	smpsAlterNote       $05
0008D80A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D80E E108                       	smpsAlterNote       $08
0008D810 E701                       	dc.b	smpsNoAttack, $01
0008D812 E10E                       	smpsAlterNote       $0E
0008D814 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D818 E108                       	smpsAlterNote       $08
0008D81A E701                       	dc.b	smpsNoAttack, $01
0008D81C E104                       	smpsAlterNote       $04
0008D81E E701                       	dc.b	smpsNoAttack, $01
0008D820 E105                       	smpsAlterNote       $05
0008D822 E701                       	dc.b	smpsNoAttack, $01
0008D824 E10B                       	smpsAlterNote       $0B
0008D826 E701                       	dc.b	smpsNoAttack, $01
0008D828 E10F                       	smpsAlterNote       $0F
0008D82A E701                       	dc.b	smpsNoAttack, $01
0008D82C E10B                       	smpsAlterNote       $0B
0008D82E E701                       	dc.b	smpsNoAttack, $01
0008D830 E108                       	smpsAlterNote       $08
0008D832 E701                       	dc.b	smpsNoAttack, $01
0008D834 E104                       	smpsAlterNote       $04
0008D836 E701                       	dc.b	smpsNoAttack, $01
0008D838 E108                       	smpsAlterNote       $08
0008D83A E701                       	dc.b	smpsNoAttack, $01
0008D83C E10E                       	smpsAlterNote       $0E
0008D83E E701                       	dc.b	smpsNoAttack, $01
0008D840 E10F                       	smpsAlterNote       $0F
0008D842 E701                       	dc.b	smpsNoAttack, $01
0008D844 E10B                       	smpsAlterNote       $0B
0008D846 E701                       	dc.b	smpsNoAttack, $01
0008D848 E105                       	smpsAlterNote       $05
0008D84A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D84E E108                       	smpsAlterNote       $08
0008D850 E701                       	dc.b	smpsNoAttack, $01
0008D852 E10E                       	smpsAlterNote       $0E
0008D854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D858 E108                       	smpsAlterNote       $08
0008D85A E701                       	dc.b	smpsNoAttack, $01
0008D85C E105                       	smpsAlterNote       $05
0008D85E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D862 E10B                       	smpsAlterNote       $0B
0008D864 E701                       	dc.b	smpsNoAttack, $01
0008D866 E10F                       	smpsAlterNote       $0F
0008D868 E701                       	dc.b	smpsNoAttack, $01
0008D86A E10E                       	smpsAlterNote       $0E
0008D86C E701                       	dc.b	smpsNoAttack, $01
0008D86E E108                       	smpsAlterNote       $08
0008D870 E701                       	dc.b	smpsNoAttack, $01
0008D872 E104                       	smpsAlterNote       $04
0008D874 E701                       	dc.b	smpsNoAttack, $01
0008D876 E105                       	smpsAlterNote       $05
0008D878 8001                       	dc.b	nRst, $01
0008D87A E108                       	smpsAlterNote       $08
0008D87C B50A                       	dc.b	nE4, $0A
0008D87E E109                       	smpsAlterNote       $09
0008D880 B60D                       	dc.b	nF4, $0D
0008D882 E106                       	smpsAlterNote       $06
0008D884 E701                       	dc.b	smpsNoAttack, $01
0008D886 E103                       	smpsAlterNote       $03
0008D888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D88C E109                       	smpsAlterNote       $09
0008D88E E701                       	dc.b	smpsNoAttack, $01
0008D890 E10D                       	smpsAlterNote       $0D
0008D892 E701                       	dc.b	smpsNoAttack, $01
0008D894 E10C                       	smpsAlterNote       $0C
0008D896 E701                       	dc.b	smpsNoAttack, $01
0008D898 E106                       	smpsAlterNote       $06
0008D89A E701                       	dc.b	smpsNoAttack, $01
0008D89C E102                       	smpsAlterNote       $02
0008D89E E701                       	dc.b	smpsNoAttack, $01
0008D8A0 E106                       	smpsAlterNote       $06
0008D8A2 E701                       	dc.b	smpsNoAttack, $01
0008D8A4 E109                       	smpsAlterNote       $09
0008D8A6 E701                       	dc.b	smpsNoAttack, $01
0008D8A8 E10D                       	smpsAlterNote       $0D
0008D8AA E701                       	dc.b	smpsNoAttack, $01
0008D8AC E109                       	smpsAlterNote       $09
0008D8AE B80D                       	dc.b	nG4, $0D
0008D8B0 E106                       	smpsAlterNote       $06
0008D8B2 E701                       	dc.b	smpsNoAttack, $01
0008D8B4 E103                       	smpsAlterNote       $03
0008D8B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8BA E109                       	smpsAlterNote       $09
0008D8BC E701                       	dc.b	smpsNoAttack, $01
0008D8BE E10D                       	smpsAlterNote       $0D
0008D8C0 E701                       	dc.b	smpsNoAttack, $01
0008D8C2 E10C                       	smpsAlterNote       $0C
0008D8C4 E701                       	dc.b	smpsNoAttack, $01
0008D8C6 E106                       	smpsAlterNote       $06
0008D8C8 E701                       	dc.b	smpsNoAttack, $01
0008D8CA E102                       	smpsAlterNote       $02
0008D8CC E701                       	dc.b	smpsNoAttack, $01
0008D8CE E106                       	smpsAlterNote       $06
0008D8D0 E701                       	dc.b	smpsNoAttack, $01
0008D8D2 E109                       	smpsAlterNote       $09
0008D8D4 E701                       	dc.b	smpsNoAttack, $01
0008D8D6 E10D                       	smpsAlterNote       $0D
0008D8D8 E701                       	dc.b	smpsNoAttack, $01
0008D8DA E109                       	smpsAlterNote       $09
0008D8DC E701                       	dc.b	smpsNoAttack, $01
0008D8DE E103                       	smpsAlterNote       $03
0008D8E0 E701                       	dc.b	smpsNoAttack, $01
0008D8E2 E102                       	smpsAlterNote       $02
0008D8E4 E701                       	dc.b	smpsNoAttack, $01
0008D8E6 E106                       	smpsAlterNote       $06
0008D8E8 E701                       	dc.b	smpsNoAttack, $01
0008D8EA E10C                       	smpsAlterNote       $0C
0008D8EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8F0 E109                       	smpsAlterNote       $09
0008D8F2 E701                       	dc.b	smpsNoAttack, $01
0008D8F4 E10B                       	smpsAlterNote       $0B
0008D8F6 BA0D                       	dc.b	nA4, $0D
0008D8F8 E108                       	smpsAlterNote       $08
0008D8FA E701                       	dc.b	smpsNoAttack, $01
0008D8FC E104                       	smpsAlterNote       $04
0008D8FE E701                       	dc.b	smpsNoAttack, $01
0008D900 E108                       	smpsAlterNote       $08
0008D902 E701                       	dc.b	smpsNoAttack, $01
0008D904 E10B                       	smpsAlterNote       $0B
0008D906 E701                       	dc.b	smpsNoAttack, $01
0008D908 E10F                       	smpsAlterNote       $0F
0008D90A E701                       	dc.b	smpsNoAttack, $01
0008D90C E10B                       	smpsAlterNote       $0B
0008D90E E701                       	dc.b	smpsNoAttack, $01
0008D910 E105                       	smpsAlterNote       $05
0008D912 E701                       	dc.b	smpsNoAttack, $01
0008D914 E104                       	smpsAlterNote       $04
0008D916 E701                       	dc.b	smpsNoAttack, $01
0008D918 E108                       	smpsAlterNote       $08
0008D91A E701                       	dc.b	smpsNoAttack, $01
0008D91C E10E                       	smpsAlterNote       $0E
0008D91E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D922 E10B                       	smpsAlterNote       $0B
0008D924 E701                       	dc.b	smpsNoAttack, $01
0008D926 E105                       	smpsAlterNote       $05
0008D928 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D92C E10B                       	smpsAlterNote       $0B
0008D92E E701                       	dc.b	smpsNoAttack, $01
0008D930 E10E                       	smpsAlterNote       $0E
0008D932 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D936 E108                       	smpsAlterNote       $08
0008D938 E701                       	dc.b	smpsNoAttack, $01
0008D93A E104                       	smpsAlterNote       $04
0008D93C E701                       	dc.b	smpsNoAttack, $01
0008D93E E105                       	smpsAlterNote       $05
0008D940 E701                       	dc.b	smpsNoAttack, $01
0008D942 E10B                       	smpsAlterNote       $0B
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 E10F                       	smpsAlterNote       $0F
0008D948 E701                       	dc.b	smpsNoAttack, $01
0008D94A E10B                       	smpsAlterNote       $0B
0008D94C E701                       	dc.b	smpsNoAttack, $01
0008D94E E108                       	smpsAlterNote       $08
0008D950 E701                       	dc.b	smpsNoAttack, $01
0008D952 E105                       	smpsAlterNote       $05
0008D954 8001                       	dc.b	nRst, $01
0008D956 E109                       	smpsAlterNote       $09
0008D958 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008D95C E108                       	smpsAlterNote       $08
0008D95E B506 8001                  	dc.b	nE4, $06, nRst, $01
0008D962 E107                       	smpsAlterNote       $07
0008D964 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008D968 E108                       	smpsAlterNote       $08
0008D96A B502 8001                  	dc.b	nE4, $02, nRst, $01
0008D96E E109                       	smpsAlterNote       $09
0008D970 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008D976 E10B                       	smpsAlterNote       $0B
0008D978 BA0D                       	dc.b	nA4, $0D
0008D97A E108                       	smpsAlterNote       $08
0008D97C E701                       	dc.b	smpsNoAttack, $01
0008D97E E104                       	smpsAlterNote       $04
0008D980 E701                       	dc.b	smpsNoAttack, $01
0008D982 E108                       	smpsAlterNote       $08
0008D984 E701                       	dc.b	smpsNoAttack, $01
0008D986 E10E                       	smpsAlterNote       $0E
0008D988 E701                       	dc.b	smpsNoAttack, $01
0008D98A E10F                       	smpsAlterNote       $0F
0008D98C E701                       	dc.b	smpsNoAttack, $01
0008D98E E10B                       	smpsAlterNote       $0B
0008D990 E701                       	dc.b	smpsNoAttack, $01
0008D992 E105                       	smpsAlterNote       $05
0008D994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D998 E108                       	smpsAlterNote       $08
0008D99A E701                       	dc.b	smpsNoAttack, $01
0008D99C E10E                       	smpsAlterNote       $0E
0008D99E E701                       	dc.b	smpsNoAttack, $01
0008D9A0 E10F                       	smpsAlterNote       $0F
0008D9A2 8001                       	dc.b	nRst, $01
0008D9A4 E109                       	smpsAlterNote       $09
0008D9A6 C20D                       	dc.b	nF5, $0D
0008D9A8 E103                       	smpsAlterNote       $03
0008D9AA E701                       	dc.b	smpsNoAttack, $01
0008D9AC E102                       	smpsAlterNote       $02
0008D9AE E701                       	dc.b	smpsNoAttack, $01
0008D9B0 E106                       	smpsAlterNote       $06
0008D9B2 E701                       	dc.b	smpsNoAttack, $01
0008D9B4 E10C                       	smpsAlterNote       $0C
0008D9B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9BA E109                       	smpsAlterNote       $09
0008D9BC E701                       	dc.b	smpsNoAttack, $01
0008D9BE E103                       	smpsAlterNote       $03
0008D9C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9C4 E109                       	smpsAlterNote       $09
0008D9C6 E701                       	dc.b	smpsNoAttack, $01
0008D9C8 E10C                       	smpsAlterNote       $0C
0008D9CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9CE E106                       	smpsAlterNote       $06
0008D9D0 E701                       	dc.b	smpsNoAttack, $01
0008D9D2 E102                       	smpsAlterNote       $02
0008D9D4 E701                       	dc.b	smpsNoAttack, $01
0008D9D6 E103                       	smpsAlterNote       $03
0008D9D8 E701                       	dc.b	smpsNoAttack, $01
0008D9DA E109                       	smpsAlterNote       $09
0008D9DC E701                       	dc.b	smpsNoAttack, $01
0008D9DE E10D                       	smpsAlterNote       $0D
0008D9E0 E701                       	dc.b	smpsNoAttack, $01
0008D9E2 E109                       	smpsAlterNote       $09
0008D9E4 E701                       	dc.b	smpsNoAttack, $01
0008D9E6 E106                       	smpsAlterNote       $06
0008D9E8 E701                       	dc.b	smpsNoAttack, $01
0008D9EA E102                       	smpsAlterNote       $02
0008D9EC E701                       	dc.b	smpsNoAttack, $01
0008D9EE E106                       	smpsAlterNote       $06
0008D9F0 E701                       	dc.b	smpsNoAttack, $01
0008D9F2 E10C                       	smpsAlterNote       $0C
0008D9F4 E701                       	dc.b	smpsNoAttack, $01
0008D9F6 E10D                       	smpsAlterNote       $0D
0008D9F8 E701                       	dc.b	smpsNoAttack, $01
0008D9FA E109                       	smpsAlterNote       $09
0008D9FC E701                       	dc.b	smpsNoAttack, $01
0008D9FE E103                       	smpsAlterNote       $03
0008DA00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA04 E106                       	smpsAlterNote       $06
0008DA06 E701                       	dc.b	smpsNoAttack, $01
0008DA08 E10C                       	smpsAlterNote       $0C
0008DA0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA0E E106                       	smpsAlterNote       $06
0008DA10 E701                       	dc.b	smpsNoAttack, $01
0008DA12 E103                       	smpsAlterNote       $03
0008DA14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA18 E109                       	smpsAlterNote       $09
0008DA1A E701                       	dc.b	smpsNoAttack, $01
0008DA1C E10D                       	smpsAlterNote       $0D
0008DA1E E701                       	dc.b	smpsNoAttack, $01
0008DA20 E10C                       	smpsAlterNote       $0C
0008DA22 E701                       	dc.b	smpsNoAttack, $01
0008DA24 E106                       	smpsAlterNote       $06
0008DA26 E701                       	dc.b	smpsNoAttack, $01
0008DA28 E102                       	smpsAlterNote       $02
0008DA2A E701                       	dc.b	smpsNoAttack, $01
0008DA2C E106                       	smpsAlterNote       $06
0008DA2E E701                       	dc.b	smpsNoAttack, $01
0008DA30 E109                       	smpsAlterNote       $09
0008DA32 E701                       	dc.b	smpsNoAttack, $01
0008DA34 E10D                       	smpsAlterNote       $0D
0008DA36 E701                       	dc.b	smpsNoAttack, $01
0008DA38 E109                       	smpsAlterNote       $09
0008DA3A E701                       	dc.b	smpsNoAttack, $01
0008DA3C E103                       	smpsAlterNote       $03
0008DA3E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DA42 E109                       	smpsAlterNote       $09
0008DA44 C206                       	dc.b	nF5, $06
0008DA46 E108                       	smpsAlterNote       $08
0008DA48 C10E                       	dc.b	nE5, $0E
0008DA4A E102                       	smpsAlterNote       $02
0008DA4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA50 E108                       	smpsAlterNote       $08
0008DA52 E701                       	dc.b	smpsNoAttack, $01
0008DA54 E10B                       	smpsAlterNote       $0B
0008DA56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA5A E105                       	smpsAlterNote       $05
0008DA5C E701                       	dc.b	smpsNoAttack, $01
0008DA5E E101                       	smpsAlterNote       $01
0008DA60 E701                       	dc.b	smpsNoAttack, $01
0008DA62 E102                       	smpsAlterNote       $02
0008DA64 E701                       	dc.b	smpsNoAttack, $01
0008DA66 E108                       	smpsAlterNote       $08
0008DA68 E701                       	dc.b	smpsNoAttack, $01
0008DA6A E10C                       	smpsAlterNote       $0C
0008DA6C E701                       	dc.b	smpsNoAttack, $01
0008DA6E E107                       	smpsAlterNote       $07
0008DA70 BF0E                       	dc.b	nD5, $0E
0008DA72 E101                       	smpsAlterNote       $01
0008DA74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA78 E107                       	smpsAlterNote       $07
0008DA7A E701                       	dc.b	smpsNoAttack, $01
0008DA7C E10A                       	smpsAlterNote       $0A
0008DA7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA82 E104                       	smpsAlterNote       $04
0008DA84 E701                       	dc.b	smpsNoAttack, $01
0008DA86 E100                       	smpsAlterNote       $00
0008DA88 E701                       	dc.b	smpsNoAttack, $01
0008DA8A E104                       	smpsAlterNote       $04
0008DA8C E701                       	dc.b	smpsNoAttack, $01
0008DA8E E107                       	smpsAlterNote       $07
0008DA90 E701                       	dc.b	smpsNoAttack, $01
0008DA92 E10B                       	smpsAlterNote       $0B
0008DA94 E701                       	dc.b	smpsNoAttack, $01
0008DA96 E107                       	smpsAlterNote       $07
0008DA98 E701                       	dc.b	smpsNoAttack, $01
0008DA9A E101                       	smpsAlterNote       $01
0008DA9C E701                       	dc.b	smpsNoAttack, $01
0008DA9E E100                       	smpsAlterNote       $00
0008DAA0 E701                       	dc.b	smpsNoAttack, $01
0008DAA2 E104                       	smpsAlterNote       $04
0008DAA4 E701                       	dc.b	smpsNoAttack, $01
0008DAA6 E10A                       	smpsAlterNote       $0A
0008DAA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAAC E107                       	smpsAlterNote       $07
0008DAAE E701                       	dc.b	smpsNoAttack, $01
0008DAB0 E101                       	smpsAlterNote       $01
0008DAB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAB6 E107                       	smpsAlterNote       $07
0008DAB8 E701                       	dc.b	smpsNoAttack, $01
0008DABA E10A                       	smpsAlterNote       $0A
0008DABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAC0 E104                       	smpsAlterNote       $04
0008DAC2 E701                       	dc.b	smpsNoAttack, $01
0008DAC4 E100                       	smpsAlterNote       $00
0008DAC6 E701                       	dc.b	smpsNoAttack, $01
0008DAC8 E101                       	smpsAlterNote       $01
0008DACA E701                       	dc.b	smpsNoAttack, $01
0008DACC E107                       	smpsAlterNote       $07
0008DACE E701                       	dc.b	smpsNoAttack, $01
0008DAD0 E10B                       	smpsAlterNote       $0B
0008DAD2 E701                       	dc.b	smpsNoAttack, $01
0008DAD4 E107                       	smpsAlterNote       $07
0008DAD6 E701                       	dc.b	smpsNoAttack, $01
0008DAD8 E104                       	smpsAlterNote       $04
0008DADA E701                       	dc.b	smpsNoAttack, $01
0008DADC E100                       	smpsAlterNote       $00
0008DADE E701                       	dc.b	smpsNoAttack, $01
0008DAE0 E104                       	smpsAlterNote       $04
0008DAE2 E701                       	dc.b	smpsNoAttack, $01
0008DAE4 E10A                       	smpsAlterNote       $0A
0008DAE6 E701                       	dc.b	smpsNoAttack, $01
0008DAE8 E10B                       	smpsAlterNote       $0B
0008DAEA E701                       	dc.b	smpsNoAttack, $01
0008DAEC E107                       	smpsAlterNote       $07
0008DAEE E701                       	dc.b	smpsNoAttack, $01
0008DAF0 E101                       	smpsAlterNote       $01
0008DAF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAF6 E104                       	smpsAlterNote       $04
0008DAF8 E701                       	dc.b	smpsNoAttack, $01
0008DAFA E10A                       	smpsAlterNote       $0A
0008DAFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB00 E104                       	smpsAlterNote       $04
0008DB02 E701                       	dc.b	smpsNoAttack, $01
0008DB04 E101                       	smpsAlterNote       $01
0008DB06 E701                       	dc.b	smpsNoAttack, $01
0008DB0A E107                       	smpsAlterNote       $07
0008DB0C E6FF                       	smpsAlterVol        $FF
0008DB0E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008DB1A 8004                       	dc.b	nRst, $04
0008DB1E E109                       	smpsAlterNote       $09
0008DB20 E602                       	smpsAlterVol        $02
0008DB22 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008DB28 E108                       	smpsAlterNote       $08
0008DB2A B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DB2E E109                       	smpsAlterNote       $09
0008DB30 B60D                       	dc.b	nF4, $0D
0008DB32 E106                       	smpsAlterNote       $06
0008DB34 E701                       	dc.b	smpsNoAttack, $01
0008DB36 E102                       	smpsAlterNote       $02
0008DB38 E701                       	dc.b	smpsNoAttack, $01
0008DB3A E106                       	smpsAlterNote       $06
0008DB3C E701                       	dc.b	smpsNoAttack, $01
0008DB3E E109                       	smpsAlterNote       $09
0008DB40 E701                       	dc.b	smpsNoAttack, $01
0008DB42 E10D                       	smpsAlterNote       $0D
0008DB44 E701                       	dc.b	smpsNoAttack, $01
0008DB46 E109                       	smpsAlterNote       $09
0008DB48 E701                       	dc.b	smpsNoAttack, $01
0008DB4A E103                       	smpsAlterNote       $03
0008DB4C E701                       	dc.b	smpsNoAttack, $01
0008DB4E E102                       	smpsAlterNote       $02
0008DB50 E701                       	dc.b	smpsNoAttack, $01
0008DB52 E106                       	smpsAlterNote       $06
0008DB54 E701                       	dc.b	smpsNoAttack, $01
0008DB56 E10C                       	smpsAlterNote       $0C
0008DB58 E701                       	dc.b	smpsNoAttack, $01
0008DB5A E10D                       	smpsAlterNote       $0D
0008DB5C 8001                       	dc.b	nRst, $01
0008DB5E E109                       	smpsAlterNote       $09
0008DB60 B80D                       	dc.b	nG4, $0D
0008DB62 E106                       	smpsAlterNote       $06
0008DB64 E701                       	dc.b	smpsNoAttack, $01
0008DB66 E102                       	smpsAlterNote       $02
0008DB68 E701                       	dc.b	smpsNoAttack, $01
0008DB6A E106                       	smpsAlterNote       $06
0008DB6C E701                       	dc.b	smpsNoAttack, $01
0008DB6E E10C                       	smpsAlterNote       $0C
0008DB70 E701                       	dc.b	smpsNoAttack, $01
0008DB72 E10D                       	smpsAlterNote       $0D
0008DB74 E701                       	dc.b	smpsNoAttack, $01
0008DB76 E109                       	smpsAlterNote       $09
0008DB78 E701                       	dc.b	smpsNoAttack, $01
0008DB7A E103                       	smpsAlterNote       $03
0008DB7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB80 E106                       	smpsAlterNote       $06
0008DB82 E701                       	dc.b	smpsNoAttack, $01
0008DB84 E10C                       	smpsAlterNote       $0C
0008DB86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB8A E106                       	smpsAlterNote       $06
0008DB8C E701                       	dc.b	smpsNoAttack, $01
0008DB8E E103                       	smpsAlterNote       $03
0008DB90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB94 E109                       	smpsAlterNote       $09
0008DB96 E701                       	dc.b	smpsNoAttack, $01
0008DB98 E10D                       	smpsAlterNote       $0D
0008DB9A E701                       	dc.b	smpsNoAttack, $01
0008DB9C E10C                       	smpsAlterNote       $0C
0008DB9E E701                       	dc.b	smpsNoAttack, $01
0008DBA0 E109                       	smpsAlterNote       $09
0008DBA2 8001                       	dc.b	nRst, $01
0008DBA4 E10B                       	smpsAlterNote       $0B
0008DBA6 BA03                       	dc.b	nA4, $03
0008DBA8 E10C                       	smpsAlterNote       $0C
0008DBAA BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008DBAE E10B                       	smpsAlterNote       $0B
0008DBB0 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008DBB6 E10C                       	smpsAlterNote       $0C
0008DBB8 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008DBBC E10B                       	smpsAlterNote       $0B
0008DBBE C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008DBC4 E10C                       	smpsAlterNote       $0C
0008DBC6 D303                       	dc.b	nBb6, $03
0008DBC8 E10B                       	smpsAlterNote       $0B
0008DBCA D20D                       	dc.b	nA6, $0D
0008DBCC E108                       	smpsAlterNote       $08
0008DBCE E701                       	dc.b	smpsNoAttack, $01
0008DBD0 E104                       	smpsAlterNote       $04
0008DBD2 E701                       	dc.b	smpsNoAttack, $01
0008DBD4 E105                       	smpsAlterNote       $05
0008DBD6 E701                       	dc.b	smpsNoAttack, $01
0008DBD8 E10B                       	smpsAlterNote       $0B
0008DBDA E701                       	dc.b	smpsNoAttack, $01
0008DBDC E10F                       	smpsAlterNote       $0F
0008DBDE E701                       	dc.b	smpsNoAttack, $01
0008DBE0 E10B                       	smpsAlterNote       $0B
0008DBE2 E701                       	dc.b	smpsNoAttack, $01
0008DBE4 E108                       	smpsAlterNote       $08
0008DBE6 E701                       	dc.b	smpsNoAttack, $01
0008DBE8 E104                       	smpsAlterNote       $04
0008DBEA E701                       	dc.b	smpsNoAttack, $01
0008DBEC E108                       	smpsAlterNote       $08
0008DBEE E701                       	dc.b	smpsNoAttack, $01
0008DBF0 E10E                       	smpsAlterNote       $0E
0008DBF2 E701                       	dc.b	smpsNoAttack, $01
0008DBF4 E10F                       	smpsAlterNote       $0F
0008DBF6 E701                       	dc.b	smpsNoAttack, $01
0008DBF8 E10B                       	smpsAlterNote       $0B
0008DBFA E701                       	dc.b	smpsNoAttack, $01
0008DBFC E105                       	smpsAlterNote       $05
0008DBFE E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008DC04 E109                       	smpsAlterNote       $09
0008DC06 CE07                       	dc.b	nF6, $07
0008DC08 E108                       	smpsAlterNote       $08
0008DC0A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DC0E E109                       	smpsAlterNote       $09
0008DC10 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008DC14 E108                       	smpsAlterNote       $08
0008DC16 CC0D                       	dc.b	nEb6, $0D
0008DC18 E102                       	smpsAlterNote       $02
0008DC1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC1E E108                       	smpsAlterNote       $08
0008DC20 E701                       	dc.b	smpsNoAttack, $01
0008DC22 E10B                       	smpsAlterNote       $0B
0008DC24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC28 E105                       	smpsAlterNote       $05
0008DC2A E701                       	dc.b	smpsNoAttack, $01
0008DC2C E101                       	smpsAlterNote       $01
0008DC2E E701                       	dc.b	smpsNoAttack, $01
0008DC30 E102                       	smpsAlterNote       $02
0008DC32 E701                       	dc.b	smpsNoAttack, $01
0008DC34 E108                       	smpsAlterNote       $08
0008DC36 E701                       	dc.b	smpsNoAttack, $01
0008DC38 E10C                       	smpsAlterNote       $0C
0008DC3A E701                       	dc.b	smpsNoAttack, $01
0008DC3C E108                       	smpsAlterNote       $08
0008DC3E E701                       	dc.b	smpsNoAttack, $01
0008DC40 E105                       	smpsAlterNote       $05
0008DC42 E701                       	dc.b	smpsNoAttack, $01
0008DC44 E101                       	smpsAlterNote       $01
0008DC46 E701                       	dc.b	smpsNoAttack, $01
0008DC48 E105                       	smpsAlterNote       $05
0008DC4A E701                       	dc.b	smpsNoAttack, $01
0008DC4C E10B                       	smpsAlterNote       $0B
0008DC4E E701                       	dc.b	smpsNoAttack, $01
0008DC50 E10C                       	smpsAlterNote       $0C
0008DC52 E701                       	dc.b	smpsNoAttack, $01
0008DC54 E108                       	smpsAlterNote       $08
0008DC56 E701                       	dc.b	smpsNoAttack, $01
0008DC58 E107                       	smpsAlterNote       $07
0008DC5A CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008DC64 E10B                       	smpsAlterNote       $0B
0008DC66 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008DC70 E109                       	smpsAlterNote       $09
0008DC72 C203                       	dc.b	nF5, $03
0008DC74 E108                       	smpsAlterNote       $08
0008DC76 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DC7A E109                       	smpsAlterNote       $09
0008DC7C C20D                       	dc.b	nF5, $0D
0008DC7E E108                       	smpsAlterNote       $08
0008DC80 C10E                       	dc.b	nE5, $0E
0008DC82 E107                       	smpsAlterNote       $07
0008DC84 BF0D                       	dc.b	nD5, $0D
0008DC86 E104                       	smpsAlterNote       $04
0008DC88 E701                       	dc.b	smpsNoAttack, $01
0008DC8A E100                       	smpsAlterNote       $00
0008DC8C E701                       	dc.b	smpsNoAttack, $01
0008DC8E E104                       	smpsAlterNote       $04
0008DC90 E701                       	dc.b	smpsNoAttack, $01
0008DC92 E107                       	smpsAlterNote       $07
0008DC94 E701                       	dc.b	smpsNoAttack, $01
0008DC96 E10B                       	smpsAlterNote       $0B
0008DC98 E701                       	dc.b	smpsNoAttack, $01
0008DC9A E107                       	smpsAlterNote       $07
0008DC9C E701                       	dc.b	smpsNoAttack, $01
0008DC9E E101                       	smpsAlterNote       $01
0008DCA0 E701                       	dc.b	smpsNoAttack, $01
0008DCA2 E100                       	smpsAlterNote       $00
0008DCA4 E701                       	dc.b	smpsNoAttack, $01
0008DCA6 E104                       	smpsAlterNote       $04
0008DCA8 E701                       	dc.b	smpsNoAttack, $01
0008DCAA E10A                       	smpsAlterNote       $0A
0008DCAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCB0 E107                       	smpsAlterNote       $07
0008DCB2 E701                       	dc.b	smpsNoAttack, $01
0008DCB4 E101                       	smpsAlterNote       $01
0008DCB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCBA E107                       	smpsAlterNote       $07
0008DCBC E701                       	dc.b	smpsNoAttack, $01
0008DCBE E10A                       	smpsAlterNote       $0A
0008DCC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCC4 E104                       	smpsAlterNote       $04
0008DCC6 E701                       	dc.b	smpsNoAttack, $01
0008DCC8 E100                       	smpsAlterNote       $00
0008DCCA E701                       	dc.b	smpsNoAttack, $01
0008DCCC E101                       	smpsAlterNote       $01
0008DCCE E701                       	dc.b	smpsNoAttack, $01
0008DCD0 E107                       	smpsAlterNote       $07
0008DCD2 E701                       	dc.b	smpsNoAttack, $01
0008DCD4 E10B                       	smpsAlterNote       $0B
0008DCD6 E701                       	dc.b	smpsNoAttack, $01
0008DCD8 E107                       	smpsAlterNote       $07
0008DCDA E701                       	dc.b	smpsNoAttack, $01
0008DCDC E104                       	smpsAlterNote       $04
0008DCDE E701                       	dc.b	smpsNoAttack, $01
0008DCE0 E100                       	smpsAlterNote       $00
0008DCE2 E701                       	dc.b	smpsNoAttack, $01
0008DCE4 E104                       	smpsAlterNote       $04
0008DCE6 E701                       	dc.b	smpsNoAttack, $01
0008DCE8 E10A                       	smpsAlterNote       $0A
0008DCEA E701                       	dc.b	smpsNoAttack, $01
0008DCEC E10B                       	smpsAlterNote       $0B
0008DCEE E701                       	dc.b	smpsNoAttack, $01
0008DCF0 E107                       	smpsAlterNote       $07
0008DCF2 E701                       	dc.b	smpsNoAttack, $01
0008DCF4 E101                       	smpsAlterNote       $01
0008DCF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCFA E104                       	smpsAlterNote       $04
0008DCFC E701                       	dc.b	smpsNoAttack, $01
0008DCFE E10A                       	smpsAlterNote       $0A
0008DD00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD04 E104                       	smpsAlterNote       $04
0008DD06 E701                       	dc.b	smpsNoAttack, $01
0008DD08 E101                       	smpsAlterNote       $01
0008DD0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD0E E107                       	smpsAlterNote       $07
0008DD10 E701                       	dc.b	smpsNoAttack, $01
0008DD12 E10B                       	smpsAlterNote       $0B
0008DD14 E701                       	dc.b	smpsNoAttack, $01
0008DD16 E10A                       	smpsAlterNote       $0A
0008DD18 E701                       	dc.b	smpsNoAttack, $01
0008DD1A E104                       	smpsAlterNote       $04
0008DD1C E701                       	dc.b	smpsNoAttack, $01
0008DD1E E100                       	smpsAlterNote       $00
0008DD20 E701                       	dc.b	smpsNoAttack, $01
0008DD22 E104                       	smpsAlterNote       $04
0008DD24 E701                       	dc.b	smpsNoAttack, $01
0008DD26 E107                       	smpsAlterNote       $07
0008DD28 E701                       	dc.b	smpsNoAttack, $01
0008DD2A E10B                       	smpsAlterNote       $0B
0008DD2C E701                       	dc.b	smpsNoAttack, $01
0008DD2E E107                       	smpsAlterNote       $07
0008DD30 E701                       	dc.b	smpsNoAttack, $01
0008DD32 E101                       	smpsAlterNote       $01
0008DD34 E701                       	dc.b	smpsNoAttack, $01
0008DD36 E100                       	smpsAlterNote       $00
0008DD38 E701                       	dc.b	smpsNoAttack, $01
0008DD3A E104                       	smpsAlterNote       $04
0008DD3C E701                       	dc.b	smpsNoAttack, $01
0008DD3E E10A                       	smpsAlterNote       $0A
0008DD40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD44 E107                       	smpsAlterNote       $07
0008DD46 E701                       	dc.b	smpsNoAttack, $01
0008DD48 E101                       	smpsAlterNote       $01
0008DD4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD4E E107                       	smpsAlterNote       $07
0008DD50 E701                       	dc.b	smpsNoAttack, $01
0008DD52 E10A                       	smpsAlterNote       $0A
0008DD54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD58 E104                       	smpsAlterNote       $04
0008DD5A E701                       	dc.b	smpsNoAttack, $01
0008DD5C E100                       	smpsAlterNote       $00
0008DD5E E701                       	dc.b	smpsNoAttack, $01
0008DD60 E101                       	smpsAlterNote       $01
0008DD62 E701                       	dc.b	smpsNoAttack, $01
0008DD64 E107                       	smpsAlterNote       $07
0008DD66 E701                       	dc.b	smpsNoAttack, $01
0008DD68 E10B                       	smpsAlterNote       $0B
0008DD6A E701                       	dc.b	smpsNoAttack, $01
0008DD6C E107                       	smpsAlterNote       $07
0008DD6E E701                       	dc.b	smpsNoAttack, $01
0008DD70 E104                       	smpsAlterNote       $04
0008DD72 E701                       	dc.b	smpsNoAttack, $01
0008DD74 E100                       	smpsAlterNote       $00
0008DD76 E701                       	dc.b	smpsNoAttack, $01
0008DD78 E101                       	smpsAlterNote       $01
0008DD7A 8001                       	dc.b	nRst, $01
0008DD7C E109                       	smpsAlterNote       $09
0008DD7E C20D                       	dc.b	nF5, $0D
0008DD80 E106                       	smpsAlterNote       $06
0008DD82 E701                       	dc.b	smpsNoAttack, $01
0008DD84 E102                       	smpsAlterNote       $02
0008DD86 E701                       	dc.b	smpsNoAttack, $01
0008DD88 E106                       	smpsAlterNote       $06
0008DD8A E701                       	dc.b	smpsNoAttack, $01
0008DD8C E10C                       	smpsAlterNote       $0C
0008DD8E E701                       	dc.b	smpsNoAttack, $01
0008DD90 E10D                       	smpsAlterNote       $0D
0008DD92 E701                       	dc.b	smpsNoAttack, $01
0008DD94 E109                       	smpsAlterNote       $09
0008DD96 E701                       	dc.b	smpsNoAttack, $01
0008DD98 E103                       	smpsAlterNote       $03
0008DD9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD9E E106                       	smpsAlterNote       $06
0008DDA0 E701                       	dc.b	smpsNoAttack, $01
0008DDA2 E10C                       	smpsAlterNote       $0C
0008DDA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDA8 E106                       	smpsAlterNote       $06
0008DDAA E701                       	dc.b	smpsNoAttack, $01
0008DDAC E103                       	smpsAlterNote       $03
0008DDAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDB2 E109                       	smpsAlterNote       $09
0008DDB4 E701                       	dc.b	smpsNoAttack, $01
0008DDB6 E10D                       	smpsAlterNote       $0D
0008DDB8 E701                       	dc.b	smpsNoAttack, $01
0008DDBA E10C                       	smpsAlterNote       $0C
0008DDBC E701                       	dc.b	smpsNoAttack, $01
0008DDBE E109                       	smpsAlterNote       $09
0008DDC0 8001                       	dc.b	nRst, $01
0008DDC2 E108                       	smpsAlterNote       $08
0008DDC4 C10D                       	dc.b	nE5, $0D
0008DDC6 E109                       	smpsAlterNote       $09
0008DDC8 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008DDCC E108                       	smpsAlterNote       $08
0008DDCE C10D                       	dc.b	nE5, $0D
0008DDD0 E102                       	smpsAlterNote       $02
0008DDD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDD6 E105                       	smpsAlterNote       $05
0008DDD8 E701                       	dc.b	smpsNoAttack, $01
0008DDDA E108                       	smpsAlterNote       $08
0008DDDC 8001                       	dc.b	nRst, $01
0008DDDE E107                       	smpsAlterNote       $07
0008DDE0 BF0D                       	dc.b	nD5, $0D
0008DDE2 E108                       	smpsAlterNote       $08
0008DDE4 C107                       	dc.b	nE5, $07
0008DDE6 E109                       	smpsAlterNote       $09
0008DDE8 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008DDEE E10B                       	smpsAlterNote       $0B
0008DDF0 C603                       	dc.b	nA5, $03
0008DDF2 E10C                       	smpsAlterNote       $0C
0008DDF4 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008DDFA E10B                       	smpsAlterNote       $0B
0008DDFC C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008DE02 E109                       	smpsAlterNote       $09
0008DE04 D003                       	dc.b	nG6, $03
0008DE06 E108                       	smpsAlterNote       $08
0008DE08 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008DE0C E10B                       	smpsAlterNote       $0B
0008DE0E C601 8001                  	dc.b	nA5, $01, nRst, $01
0008DE12 E108                       	smpsAlterNote       $08
0008DE14 C102                       	dc.b	nE5, $02
0008DE18 E10C                       	smpsAlterNote       $0C
0008DE1A E6FB                       	smpsAlterVol        $FB
0008DE1C A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008DE28 8001                       	dc.b	nRst, $01
0008DE2A E10B                       	smpsAlterNote       $0B
0008DE2C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DE34 E107                       	smpsAlterNote       $07
0008DE36 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DE3A E10B                       	smpsAlterNote       $0B
0008DE3C A203                       	dc.b	nA2, $03
0008DE3E E109                       	smpsAlterNote       $09
0008DE40 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DE44 E108                       	smpsAlterNote       $08
0008DE46 A906                       	dc.b	nE3, $06
0008DE48 E107                       	smpsAlterNote       $07
0008DE4A A703 8001                  	dc.b	nD3, $03, nRst, $01
0008DE4E E106                       	smpsAlterNote       $06
0008DE50 A503                       	dc.b	nC3, $03
0008DE52 E10C                       	smpsAlterNote       $0C
0008DE54 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008DE58 E10B                       	smpsAlterNote       $0B
0008DE5A A203 8004                  	dc.b	nA2, $03, nRst, $04
0008DE5E E11B                       	smpsAlterNote       $1B
0008DE60 C401                       	dc.b	nG5, $01
0008DE62 E1F4                       	smpsAlterNote       $F4
0008DE64 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008DE67 E106                       	smpsAlterNote       $06
0008DE69 E701                       	dc.b	smpsNoAttack, $01
0008DE6B E10F                       	smpsAlterNote       $0F
0008DE6D E701                       	dc.b	smpsNoAttack, $01
0008DE6F E1E4                       	smpsAlterNote       $E4
0008DE71 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008DE74 E1F6                       	smpsAlterNote       $F6
0008DE76 E701                       	dc.b	smpsNoAttack, $01
0008DE78 E108                       	smpsAlterNote       $08
0008DE7A E701                       	dc.b	smpsNoAttack, $01
0008DE7C E10B                       	smpsAlterNote       $0B
0008DE7E E706                       	dc.b	smpsNoAttack, $06
0008DE80 E105                       	smpsAlterNote       $05
0008DE82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE86 E108                       	smpsAlterNote       $08
0008DE88 E701                       	dc.b	smpsNoAttack, $01
0008DE8A E10E                       	smpsAlterNote       $0E
0008DE8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE90 E108                       	smpsAlterNote       $08
0008DE92 E701                       	dc.b	smpsNoAttack, $01
0008DE94 E105                       	smpsAlterNote       $05
0008DE96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE9A E10B                       	smpsAlterNote       $0B
0008DE9C E701                       	dc.b	smpsNoAttack, $01
0008DE9E E10F                       	smpsAlterNote       $0F
0008DEA0 E701                       	dc.b	smpsNoAttack, $01
0008DEA2 E10E                       	smpsAlterNote       $0E
0008DEA4 E701                       	dc.b	smpsNoAttack, $01
0008DEA6 E108                       	smpsAlterNote       $08
0008DEA8 E701                       	dc.b	smpsNoAttack, $01
0008DEAA E104                       	smpsAlterNote       $04
0008DEAC E701                       	dc.b	smpsNoAttack, $01
0008DEAE E108                       	smpsAlterNote       $08
0008DEB0 E701                       	dc.b	smpsNoAttack, $01
0008DEB2 E10B                       	smpsAlterNote       $0B
0008DEB4 E701                       	dc.b	smpsNoAttack, $01
0008DEB6 E10F                       	smpsAlterNote       $0F
0008DEB8 E701                       	dc.b	smpsNoAttack, $01
0008DEBA E10B                       	smpsAlterNote       $0B
0008DEBC E701                       	dc.b	smpsNoAttack, $01
0008DEBE E105                       	smpsAlterNote       $05
0008DEC0 E701                       	dc.b	smpsNoAttack, $01
0008DEC2 E104                       	smpsAlterNote       $04
0008DEC4 E701                       	dc.b	smpsNoAttack, $01
0008DEC6 E108                       	smpsAlterNote       $08
0008DEC8 E701                       	dc.b	smpsNoAttack, $01
0008DECA E10E                       	smpsAlterNote       $0E
0008DECC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DED0 E10B                       	smpsAlterNote       $0B
0008DED2 E701                       	dc.b	smpsNoAttack, $01
0008DED4 E105                       	smpsAlterNote       $05
0008DED6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEDA E10B                       	smpsAlterNote       $0B
0008DEDC E701                       	dc.b	smpsNoAttack, $01
0008DEDE E10E                       	smpsAlterNote       $0E
0008DEE0 E701                       	dc.b	smpsNoAttack, $01
0008DEE2 E10F                       	smpsAlterNote       $0F
0008DEE4 8001                       	dc.b	nRst, $01
0008DEE6 E109                       	smpsAlterNote       $09
0008DEE8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008DEEE E108                       	smpsAlterNote       $08
0008DEF0 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008DEF4 E109                       	smpsAlterNote       $09
0008DEF6 C202                       	dc.b	nF5, $02
0008DEF8 E108                       	smpsAlterNote       $08
0008DEFA C102                       	dc.b	nE5, $02
0008DEFC E107                       	smpsAlterNote       $07
0008DEFE BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008DF02 E108                       	smpsAlterNote       $08
0008DF04 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008DF08 E107                       	smpsAlterNote       $07
0008DF0A BF02                       	dc.b	nD5, $02
0008DF0C E106                       	smpsAlterNote       $06
0008DF0E BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DF12 E107                       	smpsAlterNote       $07
0008DF14 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008DF18 E106                       	smpsAlterNote       $06
0008DF1A BD02                       	dc.b	nC5, $02
0008DF1C E10C                       	smpsAlterNote       $0C
0008DF1E BB02                       	dc.b	nBb4, $02
0008DF20 E106                       	smpsAlterNote       $06
0008DF22 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DF26 E10C                       	smpsAlterNote       $0C
0008DF28 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008DF2C E10B                       	smpsAlterNote       $0B
0008DF2E BA02                       	dc.b	nA4, $02
0008DF30 E10C                       	smpsAlterNote       $0C
0008DF32 BB02                       	dc.b	nBb4, $02
0008DF34 E10B                       	smpsAlterNote       $0B
0008DF36 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008DF40 E108                       	smpsAlterNote       $08
0008DF42 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008DF4A E107                       	smpsAlterNote       $07
0008DF4C BE02                       	dc.b	nCs5, $02
0008DF4E E10B                       	smpsAlterNote       $0B
0008DF50 BA02                       	dc.b	nA4, $02
0008DF52 E109                       	smpsAlterNote       $09
0008DF54 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008DF58 E108                       	smpsAlterNote       $08
0008DF5A B501 8001                  	dc.b	nE4, $01, nRst, $01
0008DF5E E10B                       	smpsAlterNote       $0B
0008DF60 AE02                       	dc.b	nA3, $02
0008DF62 E10C                       	smpsAlterNote       $0C
0008DF64 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008DF70 E10B                       	smpsAlterNote       $0B
0008DF72 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DF7A E107                       	smpsAlterNote       $07
0008DF7C A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DF80 E10B                       	smpsAlterNote       $0B
0008DF82 A203                       	dc.b	nA2, $03
0008DF84 E109                       	smpsAlterNote       $09
0008DF86 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DF8A E108                       	smpsAlterNote       $08
0008DF8C A906 8001                  	dc.b	nE3, $06, nRst, $01
0008DF90 E107                       	smpsAlterNote       $07
0008DF92 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008DF96 E106                       	smpsAlterNote       $06
0008DF98 A503                       	dc.b	nC3, $03
0008DF9A E10C                       	smpsAlterNote       $0C
0008DF9C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008DFA2 E107                       	smpsAlterNote       $07
0008DFA4 B20D                       	dc.b	nCs4, $0D
0008DFA6 E104                       	smpsAlterNote       $04
0008DFA8 E701                       	dc.b	smpsNoAttack, $01
0008DFAA E100                       	smpsAlterNote       $00
0008DFAC E701                       	dc.b	smpsNoAttack, $01
0008DFAE E104                       	smpsAlterNote       $04
0008DFB0 E701                       	dc.b	smpsNoAttack, $01
0008DFB2 E10A                       	smpsAlterNote       $0A
0008DFB4 E701                       	dc.b	smpsNoAttack, $01
0008DFB6 E10B                       	smpsAlterNote       $0B
0008DFB8 E701                       	dc.b	smpsNoAttack, $01
0008DFBA E107                       	smpsAlterNote       $07
0008DFBC E701                       	dc.b	smpsNoAttack, $01
0008DFBE E101                       	smpsAlterNote       $01
0008DFC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFC4 E104                       	smpsAlterNote       $04
0008DFC6 E701                       	dc.b	smpsNoAttack, $01
0008DFC8 E10A                       	smpsAlterNote       $0A
0008DFCA E701                       	dc.b	smpsNoAttack, $01
0008DFCC E10B                       	smpsAlterNote       $0B
0008DFCE 8001                       	dc.b	nRst, $01
0008DFD0 E107                       	smpsAlterNote       $07
0008DFD2 B30D                       	dc.b	nD4, $0D
0008DFD4 E104                       	smpsAlterNote       $04
0008DFD6 E701                       	dc.b	smpsNoAttack, $01
0008DFD8 E100                       	smpsAlterNote       $00
0008DFDA E701                       	dc.b	smpsNoAttack, $01
0008DFDC E104                       	smpsAlterNote       $04
0008DFDE E701                       	dc.b	smpsNoAttack, $01
0008DFE0 E10A                       	smpsAlterNote       $0A
0008DFE2 E701                       	dc.b	smpsNoAttack, $01
0008DFE4 E10B                       	smpsAlterNote       $0B
0008DFE6 E701                       	dc.b	smpsNoAttack, $01
0008DFE8 E107                       	smpsAlterNote       $07
0008DFEA E701                       	dc.b	smpsNoAttack, $01
0008DFEC E101                       	smpsAlterNote       $01
0008DFEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFF2 E104                       	smpsAlterNote       $04
0008DFF4 E701                       	dc.b	smpsNoAttack, $01
0008DFF6 E10A                       	smpsAlterNote       $0A
0008DFF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFFC E104                       	smpsAlterNote       $04
0008DFFE E701                       	dc.b	smpsNoAttack, $01
0008E000 E101                       	smpsAlterNote       $01
0008E002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E006 E107                       	smpsAlterNote       $07
0008E008 E701                       	dc.b	smpsNoAttack, $01
0008E00A E10B                       	smpsAlterNote       $0B
0008E00C E701                       	dc.b	smpsNoAttack, $01
0008E00E E10A                       	smpsAlterNote       $0A
0008E010 E701                       	dc.b	smpsNoAttack, $01
0008E012 E107                       	smpsAlterNote       $07
0008E014 8001                       	dc.b	nRst, $01
0008E016 E108                       	smpsAlterNote       $08
0008E018 B50D                       	dc.b	nE4, $0D
0008E01A E102                       	smpsAlterNote       $02
0008E01C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E020 E105                       	smpsAlterNote       $05
0008E022 E701                       	dc.b	smpsNoAttack, $01
0008E024 E10B                       	smpsAlterNote       $0B
0008E026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E02A E105                       	smpsAlterNote       $05
0008E02C E701                       	dc.b	smpsNoAttack, $01
0008E02E E102                       	smpsAlterNote       $02
0008E030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E034 E108                       	smpsAlterNote       $08
0008E036 E701                       	dc.b	smpsNoAttack, $01
0008E038 E10C                       	smpsAlterNote       $0C
0008E03A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E03E E107                       	smpsAlterNote       $07
0008E040 B30D                       	dc.b	nD4, $0D
0008E042 E101                       	smpsAlterNote       $01
0008E044 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E048 E104                       	smpsAlterNote       $04
0008E04A E701                       	dc.b	smpsNoAttack, $01
0008E04C E10A                       	smpsAlterNote       $0A
0008E04E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E052 E104                       	smpsAlterNote       $04
0008E054 E701                       	dc.b	smpsNoAttack, $01
0008E056 E101                       	smpsAlterNote       $01
0008E058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E05C E107                       	smpsAlterNote       $07
0008E05E E701                       	dc.b	smpsNoAttack, $01
0008E060 E10B                       	smpsAlterNote       $0B
0008E062 E701                       	dc.b	smpsNoAttack, $01
0008E064 E10A                       	smpsAlterNote       $0A
0008E066 E701                       	dc.b	smpsNoAttack, $01
0008E068 E104                       	smpsAlterNote       $04
0008E06A E701                       	dc.b	smpsNoAttack, $01
0008E06C E100                       	smpsAlterNote       $00
0008E06E E701                       	dc.b	smpsNoAttack, $01
0008E070 E104                       	smpsAlterNote       $04
0008E072 E701                       	dc.b	smpsNoAttack, $01
0008E074 E107                       	smpsAlterNote       $07
0008E076 E701                       	dc.b	smpsNoAttack, $01
0008E078 E10B                       	smpsAlterNote       $0B
0008E07A E701                       	dc.b	smpsNoAttack, $01
0008E07C E107                       	smpsAlterNote       $07
0008E07E E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E082 E101                       	smpsAlterNote       $01
0008E084 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E088 E107                       	smpsAlterNote       $07
0008E08A E701                       	dc.b	smpsNoAttack, $01
0008E08C E10A                       	smpsAlterNote       $0A
0008E08E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E092 E104                       	smpsAlterNote       $04
0008E094 E701                       	dc.b	smpsNoAttack, $01
0008E096 E100                       	smpsAlterNote       $00
0008E098 E701                       	dc.b	smpsNoAttack, $01
0008E09A E101                       	smpsAlterNote       $01
0008E09C E701                       	dc.b	smpsNoAttack, $01
0008E09E E107                       	smpsAlterNote       $07
0008E0A0 E701                       	dc.b	smpsNoAttack, $01
0008E0A2 E10B                       	smpsAlterNote       $0B
0008E0A4 E701                       	dc.b	smpsNoAttack, $01
0008E0A6 E107                       	smpsAlterNote       $07
0008E0A8 B30E                       	dc.b	nD4, $0E
0008E0AA E101                       	smpsAlterNote       $01
0008E0AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0B0 E107                       	smpsAlterNote       $07
0008E0B2 E701                       	dc.b	smpsNoAttack, $01
0008E0B4 E10A                       	smpsAlterNote       $0A
0008E0B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0BA E104                       	smpsAlterNote       $04
0008E0BC E701                       	dc.b	smpsNoAttack, $01
0008E0BE E100                       	smpsAlterNote       $00
0008E0C0 E701                       	dc.b	smpsNoAttack, $01
0008E0C2 E101                       	smpsAlterNote       $01
0008E0C4 E701                       	dc.b	smpsNoAttack, $01
0008E0C6 E107                       	smpsAlterNote       $07
0008E0C8 E701                       	dc.b	smpsNoAttack, $01
0008E0CA E10B                       	smpsAlterNote       $0B
0008E0CC E701                       	dc.b	smpsNoAttack, $01
0008E0CE E107                       	smpsAlterNote       $07
0008E0D0 E701                       	dc.b	smpsNoAttack, $01
0008E0D2 E104                       	smpsAlterNote       $04
0008E0D4 E701                       	dc.b	smpsNoAttack, $01
0008E0D6 E100                       	smpsAlterNote       $00
0008E0D8 E701                       	dc.b	smpsNoAttack, $01
0008E0DA E104                       	smpsAlterNote       $04
0008E0DC E701                       	dc.b	smpsNoAttack, $01
0008E0DE E10A                       	smpsAlterNote       $0A
0008E0E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0E4 E107                       	smpsAlterNote       $07
0008E0E6 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E0EA E104                       	smpsAlterNote       $04
0008E0EC E701                       	dc.b	smpsNoAttack, $01
0008E0EE E100                       	smpsAlterNote       $00
0008E0F0 E701                       	dc.b	smpsNoAttack, $01
0008E0F2 E101                       	smpsAlterNote       $01
0008E0F4 E701                       	dc.b	smpsNoAttack, $01
0008E0F6 E107                       	smpsAlterNote       $07
0008E0F8 E701                       	dc.b	smpsNoAttack, $01
0008E0FA E10B                       	smpsAlterNote       $0B
0008E0FC E701                       	dc.b	smpsNoAttack, $01
0008E0FE E107                       	smpsAlterNote       $07
0008E100 E701                       	dc.b	smpsNoAttack, $01
0008E102 E104                       	smpsAlterNote       $04
0008E104 E701                       	dc.b	smpsNoAttack, $01
0008E106 E100                       	smpsAlterNote       $00
0008E108 E701                       	dc.b	smpsNoAttack, $01
0008E10A E104                       	smpsAlterNote       $04
0008E10C E701                       	dc.b	smpsNoAttack, $01
0008E10E E10A                       	smpsAlterNote       $0A
0008E110 E701                       	dc.b	smpsNoAttack, $01
0008E112 E10B                       	smpsAlterNote       $0B
0008E114 E701                       	dc.b	smpsNoAttack, $01
0008E118 E6FF                       	smpsAlterVol        $FF
0008E11A A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E126 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E12E E109                       	smpsAlterNote       $09
0008E130 E601                       	smpsAlterVol        $01
0008E132 B60D                       	dc.b	nF4, $0D
0008E134 E106                       	smpsAlterNote       $06
0008E136 E701                       	dc.b	smpsNoAttack, $01
0008E138 E102                       	smpsAlterNote       $02
0008E13A E701                       	dc.b	smpsNoAttack, $01
0008E13C E106                       	smpsAlterNote       $06
0008E13E E701                       	dc.b	smpsNoAttack, $01
0008E140 E109                       	smpsAlterNote       $09
0008E142 E701                       	dc.b	smpsNoAttack, $01
0008E144 E10D                       	smpsAlterNote       $0D
0008E146 E701                       	dc.b	smpsNoAttack, $01
0008E148 E109                       	smpsAlterNote       $09
0008E14A E701                       	dc.b	smpsNoAttack, $01
0008E14C E103                       	smpsAlterNote       $03
0008E14E E701                       	dc.b	smpsNoAttack, $01
0008E150 E102                       	smpsAlterNote       $02
0008E152 E701                       	dc.b	smpsNoAttack, $01
0008E154 E106                       	smpsAlterNote       $06
0008E156 E701                       	dc.b	smpsNoAttack, $01
0008E158 E10C                       	smpsAlterNote       $0C
0008E15A E701                       	dc.b	smpsNoAttack, $01
0008E15C E10D                       	smpsAlterNote       $0D
0008E15E 8001                       	dc.b	nRst, $01
0008E160 E109                       	smpsAlterNote       $09
0008E162 B80D                       	dc.b	nG4, $0D
0008E164 E106                       	smpsAlterNote       $06
0008E166 E701                       	dc.b	smpsNoAttack, $01
0008E168 E102                       	smpsAlterNote       $02
0008E16A E701                       	dc.b	smpsNoAttack, $01
0008E16C E106                       	smpsAlterNote       $06
0008E16E E701                       	dc.b	smpsNoAttack, $01
0008E170 E109                       	smpsAlterNote       $09
0008E172 E701                       	dc.b	smpsNoAttack, $01
0008E174 E10D                       	smpsAlterNote       $0D
0008E176 E701                       	dc.b	smpsNoAttack, $01
0008E178 E109                       	smpsAlterNote       $09
0008E17A E701                       	dc.b	smpsNoAttack, $01
0008E17C E103                       	smpsAlterNote       $03
0008E17E E701                       	dc.b	smpsNoAttack, $01
0008E180 E102                       	smpsAlterNote       $02
0008E182 E701                       	dc.b	smpsNoAttack, $01
0008E184 E106                       	smpsAlterNote       $06
0008E186 E701                       	dc.b	smpsNoAttack, $01
0008E188 E10C                       	smpsAlterNote       $0C
0008E18A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E18E E106                       	smpsAlterNote       $06
0008E190 E701                       	dc.b	smpsNoAttack, $01
0008E192 E103                       	smpsAlterNote       $03
0008E194 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E198 E109                       	smpsAlterNote       $09
0008E19A E701                       	dc.b	smpsNoAttack, $01
0008E19C E10D                       	smpsAlterNote       $0D
0008E19E E701                       	dc.b	smpsNoAttack, $01
0008E1A0 E10C                       	smpsAlterNote       $0C
0008E1A2 E701                       	dc.b	smpsNoAttack, $01
0008E1A4 E109                       	smpsAlterNote       $09
0008E1A6 8001                       	dc.b	nRst, $01
0008E1A8 E10B                       	smpsAlterNote       $0B
0008E1AA BA0D                       	dc.b	nA4, $0D
0008E1AC E105                       	smpsAlterNote       $05
0008E1AE E701                       	dc.b	smpsNoAttack, $01
0008E1B0 E104                       	smpsAlterNote       $04
0008E1B2 E701                       	dc.b	smpsNoAttack, $01
0008E1B4 E108                       	smpsAlterNote       $08
0008E1B6 E701                       	dc.b	smpsNoAttack, $01
0008E1B8 E10E                       	smpsAlterNote       $0E
0008E1BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1BE E10B                       	smpsAlterNote       $0B
0008E1C0 E701                       	dc.b	smpsNoAttack, $01
0008E1C2 E105                       	smpsAlterNote       $05
0008E1C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1C8 E10B                       	smpsAlterNote       $0B
0008E1CA E701                       	dc.b	smpsNoAttack, $01
0008E1CC E10E                       	smpsAlterNote       $0E
0008E1CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1D2 E108                       	smpsAlterNote       $08
0008E1D4 E701                       	dc.b	smpsNoAttack, $01
0008E1D6 E104                       	smpsAlterNote       $04
0008E1D8 E701                       	dc.b	smpsNoAttack, $01
0008E1DA E105                       	smpsAlterNote       $05
0008E1DC E701                       	dc.b	smpsNoAttack, $01
0008E1DE E10B                       	smpsAlterNote       $0B
0008E1E0 E701                       	dc.b	smpsNoAttack, $01
0008E1E2 E10F                       	smpsAlterNote       $0F
0008E1E4 E701                       	dc.b	smpsNoAttack, $01
0008E1E6 E10B                       	smpsAlterNote       $0B
0008E1E8 E701                       	dc.b	smpsNoAttack, $01
0008E1EA E108                       	smpsAlterNote       $08
0008E1EC E701                       	dc.b	smpsNoAttack, $01
0008E1EE E104                       	smpsAlterNote       $04
0008E1F0 E701                       	dc.b	smpsNoAttack, $01
0008E1F2 E108                       	smpsAlterNote       $08
0008E1F4 E701                       	dc.b	smpsNoAttack, $01
0008E1F6 E10E                       	smpsAlterNote       $0E
0008E1F8 E701                       	dc.b	smpsNoAttack, $01
0008E1FA E10F                       	smpsAlterNote       $0F
0008E1FC E701                       	dc.b	smpsNoAttack, $01
0008E1FE E10B                       	smpsAlterNote       $0B
0008E200 E701                       	dc.b	smpsNoAttack, $01
0008E202 E105                       	smpsAlterNote       $05
0008E204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E208 E108                       	smpsAlterNote       $08
0008E20A E701                       	dc.b	smpsNoAttack, $01
0008E20C E10E                       	smpsAlterNote       $0E
0008E20E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E212 E108                       	smpsAlterNote       $08
0008E214 E701                       	dc.b	smpsNoAttack, $01
0008E216 E105                       	smpsAlterNote       $05
0008E218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E21C E108                       	smpsAlterNote       $08
0008E21E B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E222 E109                       	smpsAlterNote       $09
0008E224 B60D                       	dc.b	nF4, $0D
0008E226 E103                       	smpsAlterNote       $03
0008E228 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E22C E106                       	smpsAlterNote       $06
0008E22E E701                       	dc.b	smpsNoAttack, $01
0008E230 E10C                       	smpsAlterNote       $0C
0008E232 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E236 E106                       	smpsAlterNote       $06
0008E238 E701                       	dc.b	smpsNoAttack, $01
0008E23A E103                       	smpsAlterNote       $03
0008E23C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E240 E109                       	smpsAlterNote       $09
0008E242 E701                       	dc.b	smpsNoAttack, $01
0008E244 E10D                       	smpsAlterNote       $0D
0008E246 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E24A E109                       	smpsAlterNote       $09
0008E24C B80D                       	dc.b	nG4, $0D
0008E24E E103                       	smpsAlterNote       $03
0008E250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E254 E109                       	smpsAlterNote       $09
0008E256 E701                       	dc.b	smpsNoAttack, $01
0008E258 E10C                       	smpsAlterNote       $0C
0008E25A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E25E E106                       	smpsAlterNote       $06
0008E260 E701                       	dc.b	smpsNoAttack, $01
0008E262 E102                       	smpsAlterNote       $02
0008E264 E701                       	dc.b	smpsNoAttack, $01
0008E266 E103                       	smpsAlterNote       $03
0008E268 E701                       	dc.b	smpsNoAttack, $01
0008E26A E109                       	smpsAlterNote       $09
0008E26C E701                       	dc.b	smpsNoAttack, $01
0008E26E E10D                       	smpsAlterNote       $0D
0008E270 E701                       	dc.b	smpsNoAttack, $01
0008E272 E109                       	smpsAlterNote       $09
0008E274 E701                       	dc.b	smpsNoAttack, $01
0008E276 E106                       	smpsAlterNote       $06
0008E278 E701                       	dc.b	smpsNoAttack, $01
0008E27A E102                       	smpsAlterNote       $02
0008E27C E701                       	dc.b	smpsNoAttack, $01
0008E27E E106                       	smpsAlterNote       $06
0008E280 E701                       	dc.b	smpsNoAttack, $01
0008E282 E10C                       	smpsAlterNote       $0C
0008E284 E701                       	dc.b	smpsNoAttack, $01
0008E286 E10D                       	smpsAlterNote       $0D
0008E288 E701                       	dc.b	smpsNoAttack, $01
0008E28A E109                       	smpsAlterNote       $09
0008E28C E701                       	dc.b	smpsNoAttack, $01
0008E28E E10B                       	smpsAlterNote       $0B
0008E290 BA0D                       	dc.b	nA4, $0D
0008E292 E108                       	smpsAlterNote       $08
0008E294 E701                       	dc.b	smpsNoAttack, $01
0008E296 E105                       	smpsAlterNote       $05
0008E298 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E29C E10B                       	smpsAlterNote       $0B
0008E29E E701                       	dc.b	smpsNoAttack, $01
0008E2A0 E10F                       	smpsAlterNote       $0F
0008E2A2 E701                       	dc.b	smpsNoAttack, $01
0008E2A4 E10E                       	smpsAlterNote       $0E
0008E2A6 E701                       	dc.b	smpsNoAttack, $01
0008E2A8 E108                       	smpsAlterNote       $08
0008E2AA E701                       	dc.b	smpsNoAttack, $01
0008E2AC E104                       	smpsAlterNote       $04
0008E2AE E701                       	dc.b	smpsNoAttack, $01
0008E2B0 E108                       	smpsAlterNote       $08
0008E2B2 E701                       	dc.b	smpsNoAttack, $01
0008E2B4 E10B                       	smpsAlterNote       $0B
0008E2B6 E701                       	dc.b	smpsNoAttack, $01
0008E2B8 E10F                       	smpsAlterNote       $0F
0008E2BA E701                       	dc.b	smpsNoAttack, $01
0008E2BC E10B                       	smpsAlterNote       $0B
0008E2BE E701                       	dc.b	smpsNoAttack, $01
0008E2C0 E105                       	smpsAlterNote       $05
0008E2C2 E701                       	dc.b	smpsNoAttack, $01
0008E2C4 E104                       	smpsAlterNote       $04
0008E2C6 E701                       	dc.b	smpsNoAttack, $01
0008E2C8 E108                       	smpsAlterNote       $08
0008E2CA E701                       	dc.b	smpsNoAttack, $01
0008E2CC E10E                       	smpsAlterNote       $0E
0008E2CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2D2 E10B                       	smpsAlterNote       $0B
0008E2D4 E701                       	dc.b	smpsNoAttack, $01
0008E2D6 E105                       	smpsAlterNote       $05
0008E2D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2DC E10B                       	smpsAlterNote       $0B
0008E2DE E701                       	dc.b	smpsNoAttack, $01
0008E2E0 E10E                       	smpsAlterNote       $0E
0008E2E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2E6 E108                       	smpsAlterNote       $08
0008E2E8 E701                       	dc.b	smpsNoAttack, $01
0008E2EA E105                       	smpsAlterNote       $05
0008E2EC 8001                       	dc.b	nRst, $01
0008E2EE E109                       	smpsAlterNote       $09
0008E2F0 B60A                       	dc.b	nF4, $0A
0008E2F2 E108                       	smpsAlterNote       $08
0008E2F4 B507                       	dc.b	nE4, $07
0008E2F6 E107                       	smpsAlterNote       $07
0008E2F8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E2FC E108                       	smpsAlterNote       $08
0008E2FE B503                       	dc.b	nE4, $03
0008E300 E109                       	smpsAlterNote       $09
0008E302 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E30A E10B                       	smpsAlterNote       $0B
0008E30C BA0D                       	dc.b	nA4, $0D
0008E30E E108                       	smpsAlterNote       $08
0008E310 E701                       	dc.b	smpsNoAttack, $01
0008E312 E104                       	smpsAlterNote       $04
0008E314 E701                       	dc.b	smpsNoAttack, $01
0008E316 E108                       	smpsAlterNote       $08
0008E318 E701                       	dc.b	smpsNoAttack, $01
0008E31A E10B                       	smpsAlterNote       $0B
0008E31C E701                       	dc.b	smpsNoAttack, $01
0008E31E E10F                       	smpsAlterNote       $0F
0008E320 E701                       	dc.b	smpsNoAttack, $01
0008E322 E10B                       	smpsAlterNote       $0B
0008E324 E701                       	dc.b	smpsNoAttack, $01
0008E326 E105                       	smpsAlterNote       $05
0008E328 E701                       	dc.b	smpsNoAttack, $01
0008E32A E104                       	smpsAlterNote       $04
0008E32C E701                       	dc.b	smpsNoAttack, $01
0008E32E E108                       	smpsAlterNote       $08
0008E330 E701                       	dc.b	smpsNoAttack, $01
0008E332 E10E                       	smpsAlterNote       $0E
0008E334 E701                       	dc.b	smpsNoAttack, $01
0008E336 E10F                       	smpsAlterNote       $0F
0008E338 8001                       	dc.b	nRst, $01
0008E33A E109                       	smpsAlterNote       $09
0008E33C C20D                       	dc.b	nF5, $0D
0008E33E E106                       	smpsAlterNote       $06
0008E340 E701                       	dc.b	smpsNoAttack, $01
0008E342 E102                       	smpsAlterNote       $02
0008E344 E701                       	dc.b	smpsNoAttack, $01
0008E346 E106                       	smpsAlterNote       $06
0008E348 E701                       	dc.b	smpsNoAttack, $01
0008E34A E109                       	smpsAlterNote       $09
0008E34C E701                       	dc.b	smpsNoAttack, $01
0008E34E E10D                       	smpsAlterNote       $0D
0008E350 E701                       	dc.b	smpsNoAttack, $01
0008E352 E109                       	smpsAlterNote       $09
0008E354 E701                       	dc.b	smpsNoAttack, $01
0008E356 E103                       	smpsAlterNote       $03
0008E358 E701                       	dc.b	smpsNoAttack, $01
0008E35A E102                       	smpsAlterNote       $02
0008E35C E701                       	dc.b	smpsNoAttack, $01
0008E35E E106                       	smpsAlterNote       $06
0008E360 E701                       	dc.b	smpsNoAttack, $01
0008E362 E10C                       	smpsAlterNote       $0C
0008E364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E368 E109                       	smpsAlterNote       $09
0008E36A E701                       	dc.b	smpsNoAttack, $01
0008E36C E103                       	smpsAlterNote       $03
0008E36E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E372 E109                       	smpsAlterNote       $09
0008E374 E701                       	dc.b	smpsNoAttack, $01
0008E376 E10C                       	smpsAlterNote       $0C
0008E378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E37C E106                       	smpsAlterNote       $06
0008E37E E701                       	dc.b	smpsNoAttack, $01
0008E380 E102                       	smpsAlterNote       $02
0008E382 E701                       	dc.b	smpsNoAttack, $01
0008E384 E103                       	smpsAlterNote       $03
0008E386 E701                       	dc.b	smpsNoAttack, $01
0008E388 E109                       	smpsAlterNote       $09
0008E38A E701                       	dc.b	smpsNoAttack, $01
0008E38C E10D                       	smpsAlterNote       $0D
0008E38E E701                       	dc.b	smpsNoAttack, $01
0008E390 E109                       	smpsAlterNote       $09
0008E392 E701                       	dc.b	smpsNoAttack, $01
0008E394 E106                       	smpsAlterNote       $06
0008E396 E701                       	dc.b	smpsNoAttack, $01
0008E398 E102                       	smpsAlterNote       $02
0008E39A E701                       	dc.b	smpsNoAttack, $01
0008E39C E106                       	smpsAlterNote       $06
0008E39E E701                       	dc.b	smpsNoAttack, $01
0008E3A0 E10C                       	smpsAlterNote       $0C
0008E3A2 E701                       	dc.b	smpsNoAttack, $01
0008E3A4 E10D                       	smpsAlterNote       $0D
0008E3A6 E701                       	dc.b	smpsNoAttack, $01
0008E3A8 E109                       	smpsAlterNote       $09
0008E3AA E701                       	dc.b	smpsNoAttack, $01
0008E3AC E103                       	smpsAlterNote       $03
0008E3AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3B2 E106                       	smpsAlterNote       $06
0008E3B4 E701                       	dc.b	smpsNoAttack, $01
0008E3B6 E10C                       	smpsAlterNote       $0C
0008E3B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3BC E106                       	smpsAlterNote       $06
0008E3BE E701                       	dc.b	smpsNoAttack, $01
0008E3C0 E103                       	smpsAlterNote       $03
0008E3C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3C6 E109                       	smpsAlterNote       $09
0008E3C8 E701                       	dc.b	smpsNoAttack, $01
0008E3CA E10D                       	smpsAlterNote       $0D
0008E3CC E701                       	dc.b	smpsNoAttack, $01
0008E3CE E10C                       	smpsAlterNote       $0C
0008E3D0 E701                       	dc.b	smpsNoAttack, $01
0008E3D2 E106                       	smpsAlterNote       $06
0008E3D4 E701                       	dc.b	smpsNoAttack, $01
0008E3D6 E103                       	smpsAlterNote       $03
0008E3D8 8001                       	dc.b	nRst, $01
0008E3DA E109                       	smpsAlterNote       $09
0008E3DC C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E3E2 E10C                       	smpsAlterNote       $0C
0008E3E4 E601                       	smpsAlterVol        $01
0008E3E6 BB0D                       	dc.b	nBb4, $0D
0008E3E8 E106                       	smpsAlterNote       $06
0008E3EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3EE E109                       	smpsAlterNote       $09
0008E3F0 E701                       	dc.b	smpsNoAttack, $01
0008E3F2 E10F                       	smpsAlterNote       $0F
0008E3F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3F8 E109                       	smpsAlterNote       $09
0008E3FA E701                       	dc.b	smpsNoAttack, $01
0008E3FC E106                       	smpsAlterNote       $06
0008E3FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E402 E10C                       	smpsAlterNote       $0C
0008E404 E701                       	dc.b	smpsNoAttack, $01
0008E406 E110                       	smpsAlterNote       $10
0008E408 E701                       	dc.b	smpsNoAttack, $01
0008E40A E10F                       	smpsAlterNote       $0F
0008E40C E701                       	dc.b	smpsNoAttack, $01
0008E40E E109                       	smpsAlterNote       $09
0008E410 E701                       	dc.b	smpsNoAttack, $01
0008E412 E105                       	smpsAlterNote       $05
0008E414 E701                       	dc.b	smpsNoAttack, $01
0008E416 E106                       	smpsAlterNote       $06
0008E418 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E41C E103                       	smpsAlterNote       $03
0008E41E E701                       	dc.b	smpsNoAttack, $01
0008E420 E1FF                       	smpsAlterNote       $FF
0008E422 E701                       	dc.b	smpsNoAttack, $01
0008E424 E103                       	smpsAlterNote       $03
0008E426 E701                       	dc.b	smpsNoAttack, $01
0008E428 E106                       	smpsAlterNote       $06
0008E42A E701                       	dc.b	smpsNoAttack, $01
0008E42C E10A                       	smpsAlterNote       $0A
0008E42E E701                       	dc.b	smpsNoAttack, $01
0008E430 E106                       	smpsAlterNote       $06
0008E432 E701                       	dc.b	smpsNoAttack, $01
0008E434 E100                       	smpsAlterNote       $00
0008E436 E701                       	dc.b	smpsNoAttack, $01
0008E438 E1FF                       	smpsAlterNote       $FF
0008E43A E701                       	dc.b	smpsNoAttack, $01
0008E43C E103                       	smpsAlterNote       $03
0008E43E E701                       	dc.b	smpsNoAttack, $01
0008E440 E109                       	smpsAlterNote       $09
0008E442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E446 E106                       	smpsAlterNote       $06
0008E448 E701                       	dc.b	smpsNoAttack, $01
0008E44A E100                       	smpsAlterNote       $00
0008E44C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E450 E107                       	smpsAlterNote       $07
0008E452 BF0E                       	dc.b	nD5, $0E
0008E454 E101                       	smpsAlterNote       $01
0008E456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E45A E107                       	smpsAlterNote       $07
0008E45C E701                       	dc.b	smpsNoAttack, $01
0008E45E E10A                       	smpsAlterNote       $0A
0008E460 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E464 E104                       	smpsAlterNote       $04
0008E466 E701                       	dc.b	smpsNoAttack, $01
0008E468 E100                       	smpsAlterNote       $00
0008E46A E701                       	dc.b	smpsNoAttack, $01
0008E46C E101                       	smpsAlterNote       $01
0008E46E E701                       	dc.b	smpsNoAttack, $01
0008E470 E107                       	smpsAlterNote       $07
0008E472 E701                       	dc.b	smpsNoAttack, $01
0008E474 E10B                       	smpsAlterNote       $0B
0008E476 E701                       	dc.b	smpsNoAttack, $01
0008E478 E107                       	smpsAlterNote       $07
0008E47A E701                       	dc.b	smpsNoAttack, $01
0008E47C E104                       	smpsAlterNote       $04
0008E47E E701                       	dc.b	smpsNoAttack, $01
0008E480 E100                       	smpsAlterNote       $00
0008E482 E701                       	dc.b	smpsNoAttack, $01
0008E484 E101                       	smpsAlterNote       $01
0008E486 8001                       	dc.b	nRst, $01
0008E488 E108                       	smpsAlterNote       $08
0008E48A C10C                       	dc.b	nE5, $0C
0008E48C E109                       	smpsAlterNote       $09
0008E48E C201 8001                  	dc.b	nF5, $01, nRst, $01
0008E492 E10A                       	smpsAlterNote       $0A
0008E494 8001                       	dc.b	nRst, $01
0008E496 E109                       	smpsAlterNote       $09
0008E498 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008E49C E106                       	smpsAlterNote       $06
0008E49E E701                       	dc.b	smpsNoAttack, $01
0008E4A0 E102                       	smpsAlterNote       $02
0008E4A2 E701                       	dc.b	smpsNoAttack, $01
0008E4A4 E103                       	smpsAlterNote       $03
0008E4A6 E701                       	dc.b	smpsNoAttack, $01
0008E4A8 E109                       	smpsAlterNote       $09
0008E4AA E701                       	dc.b	smpsNoAttack, $01
0008E4AC E10D                       	smpsAlterNote       $0D
0008E4AE E701                       	dc.b	smpsNoAttack, $01
0008E4B0 E109                       	smpsAlterNote       $09
0008E4B2 E701                       	dc.b	smpsNoAttack, $01
0008E4B4 E106                       	smpsAlterNote       $06
0008E4B6 E701                       	dc.b	smpsNoAttack, $01
0008E4B8 E102                       	smpsAlterNote       $02
0008E4BA E701                       	dc.b	smpsNoAttack, $01
0008E4BC E106                       	smpsAlterNote       $06
0008E4BE E701                       	dc.b	smpsNoAttack, $01
0008E4C0 E10C                       	smpsAlterNote       $0C
0008E4C2 E701                       	dc.b	smpsNoAttack, $01
0008E4C4 E10D                       	smpsAlterNote       $0D
0008E4C6 E701                       	dc.b	smpsNoAttack, $01
0008E4C8 E109                       	smpsAlterNote       $09
0008E4CA C40D                       	dc.b	nG5, $0D
0008E4CC E106                       	smpsAlterNote       $06
0008E4CE E701                       	dc.b	smpsNoAttack, $01
0008E4D0 E102                       	smpsAlterNote       $02
0008E4D2 E701                       	dc.b	smpsNoAttack, $01
0008E4D4 E103                       	smpsAlterNote       $03
0008E4D6 E701                       	dc.b	smpsNoAttack, $01
0008E4D8 E109                       	smpsAlterNote       $09
0008E4DA E701                       	dc.b	smpsNoAttack, $01
0008E4DC E108                       	smpsAlterNote       $08
0008E4DE C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008E4EA E109                       	smpsAlterNote       $09
0008E4EC C20D                       	dc.b	nF5, $0D
0008E4EE E106                       	smpsAlterNote       $06
0008E4F0 E701                       	dc.b	smpsNoAttack, $01
0008E4F2 E102                       	smpsAlterNote       $02
0008E4F4 E701                       	dc.b	smpsNoAttack, $01
0008E4F6 E106                       	smpsAlterNote       $06
0008E4F8 E701                       	dc.b	smpsNoAttack, $01
0008E4FA E109                       	smpsAlterNote       $09
0008E4FC E701                       	dc.b	smpsNoAttack, $01
0008E4FE E10D                       	smpsAlterNote       $0D
0008E500 E701                       	dc.b	smpsNoAttack, $01
0008E502 E109                       	smpsAlterNote       $09
0008E504 E701                       	dc.b	smpsNoAttack, $01
0008E506 E103                       	smpsAlterNote       $03
0008E508 E701                       	dc.b	smpsNoAttack, $01
0008E50A E102                       	smpsAlterNote       $02
0008E50C E701                       	dc.b	smpsNoAttack, $01
0008E50E E106                       	smpsAlterNote       $06
0008E510 E701                       	dc.b	smpsNoAttack, $01
0008E512 E10C                       	smpsAlterNote       $0C
0008E514 E701                       	dc.b	smpsNoAttack, $01
0008E516 E10D                       	smpsAlterNote       $0D
0008E518 8001                       	dc.b	nRst, $01
0008E51A E112                       	smpsAlterNote       $12
0008E51C C401                       	dc.b	nG5, $01
0008E51E E1EB                       	smpsAlterNote       $EB
0008E520 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E523 E1FD                       	smpsAlterNote       $FD
0008E525 E701                       	dc.b	smpsNoAttack, $01
0008E527 E10F                       	smpsAlterNote       $0F
0008E529 E701                       	dc.b	smpsNoAttack, $01
0008E52B E118                       	smpsAlterNote       $18
0008E52D E701                       	dc.b	smpsNoAttack, $01
0008E52F E1ED                       	smpsAlterNote       $ED
0008E531 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E534 E1FF                       	smpsAlterNote       $FF
0008E536 E701                       	dc.b	smpsNoAttack, $01
0008E538 E10B                       	smpsAlterNote       $0B
0008E53A E703                       	dc.b	smpsNoAttack, $03
0008E53C E109                       	smpsAlterNote       $09
0008E53E C407                       	dc.b	nG5, $07
0008E540 E108                       	smpsAlterNote       $08
0008E542 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008E54E E109                       	smpsAlterNote       $09
0008E550 C20D                       	dc.b	nF5, $0D
0008E552 E103                       	smpsAlterNote       $03
0008E554 E701                       	dc.b	smpsNoAttack, $01
0008E556 E102                       	smpsAlterNote       $02
0008E558 E701                       	dc.b	smpsNoAttack, $01
0008E55A E106                       	smpsAlterNote       $06
0008E55C E701                       	dc.b	smpsNoAttack, $01
0008E55E E10C                       	smpsAlterNote       $0C
0008E560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E564 E109                       	smpsAlterNote       $09
0008E566 E701                       	dc.b	smpsNoAttack, $01
0008E568 E103                       	smpsAlterNote       $03
0008E56A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E56E E109                       	smpsAlterNote       $09
0008E570 E701                       	dc.b	smpsNoAttack, $01
0008E572 E10C                       	smpsAlterNote       $0C
0008E574 E701                       	dc.b	smpsNoAttack, $01
0008E576 E10D                       	smpsAlterNote       $0D
0008E578 8001                       	dc.b	nRst, $01
0008E57A E10B                       	smpsAlterNote       $0B
0008E57C C609 8001                  	dc.b	nA5, $09, nRst, $01
0008E580 E109                       	smpsAlterNote       $09
0008E582 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008E586 E108                       	smpsAlterNote       $08
0008E588 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008E594 8001                       	dc.b	nRst, $01
0008E596 E109                       	smpsAlterNote       $09
0008E598 C20D                       	dc.b	nF5, $0D
0008E59A E103                       	smpsAlterNote       $03
0008E59C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5A0 E106                       	smpsAlterNote       $06
0008E5A2 E701                       	dc.b	smpsNoAttack, $01
0008E5A4 E10C                       	smpsAlterNote       $0C
0008E5A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5AA E106                       	smpsAlterNote       $06
0008E5AC E701                       	dc.b	smpsNoAttack, $01
0008E5AE E103                       	smpsAlterNote       $03
0008E5B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5B4 E109                       	smpsAlterNote       $09
0008E5B6 E701                       	dc.b	smpsNoAttack, $01
0008E5B8 E10D                       	smpsAlterNote       $0D
0008E5BA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E5C0 E108                       	smpsAlterNote       $08
0008E5C2 E6FF                       	smpsAlterVol        $FF
0008E5C4 A806                       	dc.b	nEb3, $06
0008E5C6 E10C                       	smpsAlterNote       $0C
0008E5C8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E5CC E108                       	smpsAlterNote       $08
0008E5CE A803                       	dc.b	nEb3, $03
0008E5D0 E109                       	smpsAlterNote       $09
0008E5D2 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008E5D6 E10C                       	smpsAlterNote       $0C
0008E5D8 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008E5E2 E109                       	smpsAlterNote       $09
0008E5E4 E602                       	smpsAlterVol        $02
0008E5E6 B604                       	dc.b	nF4, $04
0008E5E8 E602                       	smpsAlterVol        $02
0008E5EA F6F1 AA                    	smpsJump            music84_Jump02
0008E5ED                            
0008E5ED                            ; FM4 Data
0008E5ED                            music84_FM4:
0008E5EF E040                       	smpsPan             panRight, $00
0008E5F1 8003                       	dc.b	nRst, $03
0008E5F3 E10F                       	smpsAlterNote       $0F
0008E5F5 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008E5F9 E10D                       	smpsAlterNote       $0D
0008E5FB C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008E5FF E10C                       	smpsAlterNote       $0C
0008E601 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008E607 E6FE                       	smpsAlterVol        $FE
0008E609 E110                       	smpsAlterNote       $10
0008E60B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E60F E10F                       	smpsAlterNote       $0F
0008E611 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008E615 E10D                       	smpsAlterNote       $0D
0008E617 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008E620 E10C                       	smpsAlterNote       $0C
0008E622 C103                       	dc.b	nE5, $03
0008E624 E10A                       	smpsAlterNote       $0A
0008E626 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008E62C 03                         	dc.b	$03
0008E62D                            
0008E62D                            music84_Jump01:
0008E62D E10B                       	smpsAlterNote       $0B
0008E62F BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E633 E10C                       	smpsAlterNote       $0C
0008E635 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008E639 E10D                       	smpsAlterNote       $0D
0008E63B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E645 E10B                       	smpsAlterNote       $0B
0008E647 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E64B E107                       	smpsAlterNote       $07
0008E64D E701                       	dc.b	smpsNoAttack, $01
0008E64F E103                       	smpsAlterNote       $03
0008E651 E701                       	dc.b	smpsNoAttack, $01
0008E653 E104                       	smpsAlterNote       $04
0008E655 E701                       	dc.b	smpsNoAttack, $01
0008E657 E10A                       	smpsAlterNote       $0A
0008E659 E701                       	dc.b	smpsNoAttack, $01
0008E65B E10E                       	smpsAlterNote       $0E
0008E65D E701                       	dc.b	smpsNoAttack, $01
0008E65F E10A                       	smpsAlterNote       $0A
0008E661 E701                       	dc.b	smpsNoAttack, $01
0008E663 E107                       	smpsAlterNote       $07
0008E665 E701                       	dc.b	smpsNoAttack, $01
0008E667 E104                       	smpsAlterNote       $04
0008E669 8001                       	dc.b	nRst, $01
0008E66B E110                       	smpsAlterNote       $10
0008E66D C703                       	dc.b	nBb5, $03
0008E66F E10F                       	smpsAlterNote       $0F
0008E671 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E675 E10D                       	smpsAlterNote       $0D
0008E677 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008E67D E10C                       	smpsAlterNote       $0C
0008E67F E701                       	dc.b	smpsNoAttack, $01
0008E681 E108                       	smpsAlterNote       $08
0008E683 E701                       	dc.b	smpsNoAttack, $01
0008E685 E10C                       	smpsAlterNote       $0C
0008E687 E701                       	dc.b	smpsNoAttack, $01
0008E689 E10F                       	smpsAlterNote       $0F
0008E68B E701                       	dc.b	smpsNoAttack, $01
0008E68D E113                       	smpsAlterNote       $13
0008E68F E701                       	dc.b	smpsNoAttack, $01
0008E691 E10F                       	smpsAlterNote       $0F
0008E693 E701                       	dc.b	smpsNoAttack, $01
0008E695 E109                       	smpsAlterNote       $09
0008E697 E701                       	dc.b	smpsNoAttack, $01
0008E699 E108                       	smpsAlterNote       $08
0008E69B E701                       	dc.b	smpsNoAttack, $01
0008E69D E10C                       	smpsAlterNote       $0C
0008E69F E701                       	dc.b	smpsNoAttack, $01
0008E6A1 E112                       	smpsAlterNote       $12
0008E6A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6A7 E10C                       	smpsAlterNote       $0C
0008E6A9 E701                       	dc.b	smpsNoAttack, $01
0008E6AB E109                       	smpsAlterNote       $09
0008E6AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6B1 E10F                       	smpsAlterNote       $0F
0008E6B3 E701                       	dc.b	smpsNoAttack, $01
0008E6B5 E113                       	smpsAlterNote       $13
0008E6B7 E701                       	dc.b	smpsNoAttack, $01
0008E6B9 E112                       	smpsAlterNote       $12
0008E6BB E701                       	dc.b	smpsNoAttack, $01
0008E6BD E10C                       	smpsAlterNote       $0C
0008E6BF E701                       	dc.b	smpsNoAttack, $01
0008E6C1 E108                       	smpsAlterNote       $08
0008E6C3 E701                       	dc.b	smpsNoAttack, $01
0008E6C5 E10C                       	smpsAlterNote       $0C
0008E6C7 E701                       	dc.b	smpsNoAttack, $01
0008E6C9 E10F                       	smpsAlterNote       $0F
0008E6CB E701                       	dc.b	smpsNoAttack, $01
0008E6CD E113                       	smpsAlterNote       $13
0008E6CF E701                       	dc.b	smpsNoAttack, $01
0008E6D1 E10F                       	smpsAlterNote       $0F
0008E6D3 E701                       	dc.b	smpsNoAttack, $01
0008E6D5 E109                       	smpsAlterNote       $09
0008E6D7 E701                       	dc.b	smpsNoAttack, $01
0008E6D9 E108                       	smpsAlterNote       $08
0008E6DB E701                       	dc.b	smpsNoAttack, $01
0008E6DD E10C                       	smpsAlterNote       $0C
0008E6DF E701                       	dc.b	smpsNoAttack, $01
0008E6E1 E112                       	smpsAlterNote       $12
0008E6E3 E701                       	dc.b	smpsNoAttack, $01
0008E6E5 E113                       	smpsAlterNote       $13
0008E6E7 800F                       	dc.b	nRst, $0F
0008E6E9 E10B                       	smpsAlterNote       $0B
0008E6EB BF03                       	dc.b	nD5, $03
0008E6ED E10C                       	smpsAlterNote       $0C
0008E6EF C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E6F3 E10D                       	smpsAlterNote       $0D
0008E6F5 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008E6FD E10B                       	smpsAlterNote       $0B
0008E6FF BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008E709 E110                       	smpsAlterNote       $10
0008E70B C704                       	dc.b	nBb5, $04
0008E70D E10F                       	smpsAlterNote       $0F
0008E70F C604 8001                  	dc.b	nA5, $04, nRst, $01
0008E713 E10D                       	smpsAlterNote       $0D
0008E715 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E71B E109                       	smpsAlterNote       $09
0008E71D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E721 E10F                       	smpsAlterNote       $0F
0008E723 E701                       	dc.b	smpsNoAttack, $01
0008E725 E112                       	smpsAlterNote       $12
0008E727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E72B E10C                       	smpsAlterNote       $0C
0008E72D E701                       	dc.b	smpsNoAttack, $01
0008E72F E108                       	smpsAlterNote       $08
0008E731 E701                       	dc.b	smpsNoAttack, $01
0008E733 E109                       	smpsAlterNote       $09
0008E735 E701                       	dc.b	smpsNoAttack, $01
0008E737 E10F                       	smpsAlterNote       $0F
0008E739 E701                       	dc.b	smpsNoAttack, $01
0008E73B E113                       	smpsAlterNote       $13
0008E73D E701                       	dc.b	smpsNoAttack, $01
0008E73F E10F                       	smpsAlterNote       $0F
0008E741 E701                       	dc.b	smpsNoAttack, $01
0008E743 E10C                       	smpsAlterNote       $0C
0008E745 E701                       	dc.b	smpsNoAttack, $01
0008E747 E108                       	smpsAlterNote       $08
0008E749 E701                       	dc.b	smpsNoAttack, $01
0008E74B E10C                       	smpsAlterNote       $0C
0008E74D E701                       	dc.b	smpsNoAttack, $01
0008E74F E112                       	smpsAlterNote       $12
0008E751 E701                       	dc.b	smpsNoAttack, $01
0008E753 E113                       	smpsAlterNote       $13
0008E755 E701                       	dc.b	smpsNoAttack, $01
0008E757 E10F                       	smpsAlterNote       $0F
0008E759 E701                       	dc.b	smpsNoAttack, $01
0008E75B E109                       	smpsAlterNote       $09
0008E75D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E761 E10C                       	smpsAlterNote       $0C
0008E763 E701                       	dc.b	smpsNoAttack, $01
0008E765 E112                       	smpsAlterNote       $12
0008E767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E76B E10C                       	smpsAlterNote       $0C
0008E76D E701                       	dc.b	smpsNoAttack, $01
0008E76F E109                       	smpsAlterNote       $09
0008E771 E701                       	dc.b	smpsNoAttack, $01
0008E773 E10D                       	smpsAlterNote       $0D
0008E775 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008E779 E10F                       	smpsAlterNote       $0F
0008E77B C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008E785 E10D                       	smpsAlterNote       $0D
0008E787 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008E78D E10B                       	smpsAlterNote       $0B
0008E78F BF0D                       	dc.b	nD5, $0D
0008E791 E108                       	smpsAlterNote       $08
0008E793 E701                       	dc.b	smpsNoAttack, $01
0008E795 E104                       	smpsAlterNote       $04
0008E797 E701                       	dc.b	smpsNoAttack, $01
0008E799 E108                       	smpsAlterNote       $08
0008E79B E701                       	dc.b	smpsNoAttack, $01
0008E79D E10B                       	smpsAlterNote       $0B
0008E79F E701                       	dc.b	smpsNoAttack, $01
0008E7A1 E10F                       	smpsAlterNote       $0F
0008E7A3 E701                       	dc.b	smpsNoAttack, $01
0008E7A5 E10B                       	smpsAlterNote       $0B
0008E7A7 E701                       	dc.b	smpsNoAttack, $01
0008E7A9 E105                       	smpsAlterNote       $05
0008E7AB E701                       	dc.b	smpsNoAttack, $01
0008E7AD E104                       	smpsAlterNote       $04
0008E7AF E701                       	dc.b	smpsNoAttack, $01
0008E7B1 E108                       	smpsAlterNote       $08
0008E7B3 E701                       	dc.b	smpsNoAttack, $01
0008E7B5 E10E                       	smpsAlterNote       $0E
0008E7B7 E701                       	dc.b	smpsNoAttack, $01
0008E7B9 E10F                       	smpsAlterNote       $0F
0008E7BB 8001                       	dc.b	nRst, $01
0008E7BD E10C                       	smpsAlterNote       $0C
0008E7BF C101                       	dc.b	nE5, $01
0008E7C1 E10D                       	smpsAlterNote       $0D
0008E7C3 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008E7C9 E10F                       	smpsAlterNote       $0F
0008E7CB C606 8001                  	dc.b	nA5, $06, nRst, $01
0008E7CF E10C                       	smpsAlterNote       $0C
0008E7D1 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008E7D5 E10D                       	smpsAlterNote       $0D
0008E7D7 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008E7DB E10C                       	smpsAlterNote       $0C
0008E7DD CD03                       	dc.b	nE6, $03
0008E7DF E10A                       	smpsAlterNote       $0A
0008E7E1 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008E7E5 E10D                       	smpsAlterNote       $0D
0008E7E7 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008E7EF E109                       	smpsAlterNote       $09
0008E7F1 E701                       	dc.b	smpsNoAttack, $01
0008E7F3 E10D                       	smpsAlterNote       $0D
0008E7F5 E701                       	dc.b	smpsNoAttack, $01
0008E7F7 E110                       	smpsAlterNote       $10
0008E7F9 E701                       	dc.b	smpsNoAttack, $01
0008E7FB E114                       	smpsAlterNote       $14
0008E7FD E701                       	dc.b	smpsNoAttack, $01
0008E7FF E110                       	smpsAlterNote       $10
0008E801 E701                       	dc.b	smpsNoAttack, $01
0008E803 E10A                       	smpsAlterNote       $0A
0008E805 E701                       	dc.b	smpsNoAttack, $01
0008E807 E109                       	smpsAlterNote       $09
0008E809 E701                       	dc.b	smpsNoAttack, $01
0008E80B E10D                       	smpsAlterNote       $0D
0008E80D E701                       	dc.b	smpsNoAttack, $01
0008E80F E113                       	smpsAlterNote       $13
0008E811 E701                       	dc.b	smpsNoAttack, $01
0008E813 E114                       	smpsAlterNote       $14
0008E815 8001                       	dc.b	nRst, $01
0008E817 E10F                       	smpsAlterNote       $0F
0008E819 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008E81F E10C                       	smpsAlterNote       $0C
0008E821 E701                       	dc.b	smpsNoAttack, $01
0008E823 E108                       	smpsAlterNote       $08
0008E825 E701                       	dc.b	smpsNoAttack, $01
0008E827 E10C                       	smpsAlterNote       $0C
0008E829 E701                       	dc.b	smpsNoAttack, $01
0008E82B E112                       	smpsAlterNote       $12
0008E82D E701                       	dc.b	smpsNoAttack, $01
0008E82F E113                       	smpsAlterNote       $13
0008E831 E701                       	dc.b	smpsNoAttack, $01
0008E833 E10F                       	smpsAlterNote       $0F
0008E835 E701                       	dc.b	smpsNoAttack, $01
0008E837 E109                       	smpsAlterNote       $09
0008E839 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E83D E10C                       	smpsAlterNote       $0C
0008E83F E701                       	dc.b	smpsNoAttack, $01
0008E841 E112                       	smpsAlterNote       $12
0008E843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E847 E10C                       	smpsAlterNote       $0C
0008E849 E701                       	dc.b	smpsNoAttack, $01
0008E84B E109                       	smpsAlterNote       $09
0008E84D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E851 E10F                       	smpsAlterNote       $0F
0008E853 E701                       	dc.b	smpsNoAttack, $01
0008E855 E113                       	smpsAlterNote       $13
0008E857 E701                       	dc.b	smpsNoAttack, $01
0008E859 E112                       	smpsAlterNote       $12
0008E85B E701                       	dc.b	smpsNoAttack, $01
0008E85D E10C                       	smpsAlterNote       $0C
0008E85F E701                       	dc.b	smpsNoAttack, $01
0008E861 E108                       	smpsAlterNote       $08
0008E863 E701                       	dc.b	smpsNoAttack, $01
0008E865 E10C                       	smpsAlterNote       $0C
0008E867 E701                       	dc.b	smpsNoAttack, $01
0008E869 E10F                       	smpsAlterNote       $0F
0008E86B E701                       	dc.b	smpsNoAttack, $01
0008E86D E113                       	smpsAlterNote       $13
0008E86F E701                       	dc.b	smpsNoAttack, $01
0008E871 E10F                       	smpsAlterNote       $0F
0008E873 E701                       	dc.b	smpsNoAttack, $01
0008E875 E109                       	smpsAlterNote       $09
0008E877 E701                       	dc.b	smpsNoAttack, $01
0008E879 E108                       	smpsAlterNote       $08
0008E87B E701                       	dc.b	smpsNoAttack, $01
0008E87D E10C                       	smpsAlterNote       $0C
0008E87F E701                       	dc.b	smpsNoAttack, $01
0008E881 E112                       	smpsAlterNote       $12
0008E883 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E887 E10F                       	smpsAlterNote       $0F
0008E889 E701                       	dc.b	smpsNoAttack, $01
0008E88B E109                       	smpsAlterNote       $09
0008E88D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E891 E10F                       	smpsAlterNote       $0F
0008E893 E701                       	dc.b	smpsNoAttack, $01
0008E895 E113                       	smpsAlterNote       $13
0008E897 E701                       	dc.b	smpsNoAttack, $01
0008E899 E112                       	smpsAlterNote       $12
0008E89B E701                       	dc.b	smpsNoAttack, $01
0008E89D E10C                       	smpsAlterNote       $0C
0008E89F E701                       	dc.b	smpsNoAttack, $01
0008E8A1 E108                       	smpsAlterNote       $08
0008E8A3 E701                       	dc.b	smpsNoAttack, $01
0008E8A5 E10C                       	smpsAlterNote       $0C
0008E8A7 E701                       	dc.b	smpsNoAttack, $01
0008E8A9 E10F                       	smpsAlterNote       $0F
0008E8AB E701                       	dc.b	smpsNoAttack, $01
0008E8AD E113                       	smpsAlterNote       $13
0008E8AF E701                       	dc.b	smpsNoAttack, $01
0008E8B1 E10F                       	smpsAlterNote       $0F
0008E8B3 E701                       	dc.b	smpsNoAttack, $01
0008E8B5 E109                       	smpsAlterNote       $09
0008E8B7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E8BB E10F                       	smpsAlterNote       $0F
0008E8BD C60D                       	dc.b	nA5, $0D
0008E8BF E109                       	smpsAlterNote       $09
0008E8C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8C5 E10C                       	smpsAlterNote       $0C
0008E8C7 E701                       	dc.b	smpsNoAttack, $01
0008E8C9 E112                       	smpsAlterNote       $12
0008E8CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8CF E10C                       	smpsAlterNote       $0C
0008E8D1 E701                       	dc.b	smpsNoAttack, $01
0008E8D3 E109                       	smpsAlterNote       $09
0008E8D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8D9 E10F                       	smpsAlterNote       $0F
0008E8DB E701                       	dc.b	smpsNoAttack, $01
0008E8DD E113                       	smpsAlterNote       $13
0008E8DF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E8E5 E10D                       	smpsAlterNote       $0D
0008E8E7 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008E8EF E10C                       	smpsAlterNote       $0C
0008E8F1 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008E8F7 E6FF                       	smpsAlterVol        $FF
0008E8F9 E10B                       	smpsAlterNote       $0B
0008E8FB BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E8FF E10C                       	smpsAlterNote       $0C
0008E901 C103                       	dc.b	nE5, $03
0008E903 E10D                       	smpsAlterNote       $0D
0008E905 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008E90F E10B                       	smpsAlterNote       $0B
0008E911 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E915 E107                       	smpsAlterNote       $07
0008E917 E701                       	dc.b	smpsNoAttack, $01
0008E919 E104                       	smpsAlterNote       $04
0008E91B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E91F E10A                       	smpsAlterNote       $0A
0008E921 E701                       	dc.b	smpsNoAttack, $01
0008E923 E10D                       	smpsAlterNote       $0D
0008E925 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E929 E107                       	smpsAlterNote       $07
0008E92B E701                       	dc.b	smpsNoAttack, $01
0008E92D E104                       	smpsAlterNote       $04
0008E92F 8001                       	dc.b	nRst, $01
0008E931 E110                       	smpsAlterNote       $10
0008E933 C703                       	dc.b	nBb5, $03
0008E935 E10F                       	smpsAlterNote       $0F
0008E937 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E93B E10D                       	smpsAlterNote       $0D
0008E93D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008E941 E10C                       	smpsAlterNote       $0C
0008E943 E701                       	dc.b	smpsNoAttack, $01
0008E945 E108                       	smpsAlterNote       $08
0008E947 E701                       	dc.b	smpsNoAttack, $01
0008E949 E109                       	smpsAlterNote       $09
0008E94B E701                       	dc.b	smpsNoAttack, $01
0008E94D E10F                       	smpsAlterNote       $0F
0008E94F E701                       	dc.b	smpsNoAttack, $01
0008E951 E113                       	smpsAlterNote       $13
0008E953 E701                       	dc.b	smpsNoAttack, $01
0008E955 E10F                       	smpsAlterNote       $0F
0008E957 E701                       	dc.b	smpsNoAttack, $01
0008E959 E10C                       	smpsAlterNote       $0C
0008E95B E701                       	dc.b	smpsNoAttack, $01
0008E95D E108                       	smpsAlterNote       $08
0008E95F E701                       	dc.b	smpsNoAttack, $01
0008E961 E10C                       	smpsAlterNote       $0C
0008E963 E701                       	dc.b	smpsNoAttack, $01
0008E965 E112                       	smpsAlterNote       $12
0008E967 E701                       	dc.b	smpsNoAttack, $01
0008E969 E113                       	smpsAlterNote       $13
0008E96B E701                       	dc.b	smpsNoAttack, $01
0008E96D E10F                       	smpsAlterNote       $0F
0008E96F E701                       	dc.b	smpsNoAttack, $01
0008E971 E109                       	smpsAlterNote       $09
0008E973 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E977 E10C                       	smpsAlterNote       $0C
0008E979 E701                       	dc.b	smpsNoAttack, $01
0008E97B E112                       	smpsAlterNote       $12
0008E97D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E981 E10C                       	smpsAlterNote       $0C
0008E983 E701                       	dc.b	smpsNoAttack, $01
0008E985 E109                       	smpsAlterNote       $09
0008E987 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E98B E10F                       	smpsAlterNote       $0F
0008E98D E701                       	dc.b	smpsNoAttack, $01
0008E98F E113                       	smpsAlterNote       $13
0008E991 E701                       	dc.b	smpsNoAttack, $01
0008E993 E112                       	smpsAlterNote       $12
0008E995 E701                       	dc.b	smpsNoAttack, $01
0008E997 E10C                       	smpsAlterNote       $0C
0008E999 E701                       	dc.b	smpsNoAttack, $01
0008E99B E108                       	smpsAlterNote       $08
0008E99D E701                       	dc.b	smpsNoAttack, $01
0008E99F E10C                       	smpsAlterNote       $0C
0008E9A1 E701                       	dc.b	smpsNoAttack, $01
0008E9A3 E10F                       	smpsAlterNote       $0F
0008E9A5 E701                       	dc.b	smpsNoAttack, $01
0008E9A7 E113                       	smpsAlterNote       $13
0008E9A9 E701                       	dc.b	smpsNoAttack, $01
0008E9AB E10F                       	smpsAlterNote       $0F
0008E9AD BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008E9B1 E110                       	smpsAlterNote       $10
0008E9B3 BB03                       	dc.b	nBb4, $03
0008E9B5 E10F                       	smpsAlterNote       $0F
0008E9B7 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008E9BB E10B                       	smpsAlterNote       $0B
0008E9BD BF03                       	dc.b	nD5, $03
0008E9BF E10C                       	smpsAlterNote       $0C
0008E9C1 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E9C5 E10D                       	smpsAlterNote       $0D
0008E9C7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E9D1 E10B                       	smpsAlterNote       $0B
0008E9D3 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008E9DF E110                       	smpsAlterNote       $10
0008E9E1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008E9E5 E10F                       	smpsAlterNote       $0F
0008E9E7 C604                       	dc.b	nA5, $04
0008E9E9 E10D                       	smpsAlterNote       $0D
0008E9EB C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E9F1 E109                       	smpsAlterNote       $09
0008E9F3 E701                       	dc.b	smpsNoAttack, $01
0008E9F5 E108                       	smpsAlterNote       $08
0008E9F7 E701                       	dc.b	smpsNoAttack, $01
0008E9F9 E10C                       	smpsAlterNote       $0C
0008E9FB E701                       	dc.b	smpsNoAttack, $01
0008E9FD E112                       	smpsAlterNote       $12
0008E9FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA03 E10F                       	smpsAlterNote       $0F
0008EA05 E701                       	dc.b	smpsNoAttack, $01
0008EA07 E109                       	smpsAlterNote       $09
0008EA09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA0D E10F                       	smpsAlterNote       $0F
0008EA0F E701                       	dc.b	smpsNoAttack, $01
0008EA11 E112                       	smpsAlterNote       $12
0008EA13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA17 E10C                       	smpsAlterNote       $0C
0008EA19 E701                       	dc.b	smpsNoAttack, $01
0008EA1B E108                       	smpsAlterNote       $08
0008EA1D E701                       	dc.b	smpsNoAttack, $01
0008EA1F E109                       	smpsAlterNote       $09
0008EA21 E701                       	dc.b	smpsNoAttack, $01
0008EA23 E10F                       	smpsAlterNote       $0F
0008EA25 E701                       	dc.b	smpsNoAttack, $01
0008EA27 E113                       	smpsAlterNote       $13
0008EA29 E701                       	dc.b	smpsNoAttack, $01
0008EA2B E10F                       	smpsAlterNote       $0F
0008EA2D E701                       	dc.b	smpsNoAttack, $01
0008EA2F E10C                       	smpsAlterNote       $0C
0008EA31 E701                       	dc.b	smpsNoAttack, $01
0008EA33 E108                       	smpsAlterNote       $08
0008EA35 E701                       	dc.b	smpsNoAttack, $01
0008EA37 E10C                       	smpsAlterNote       $0C
0008EA39 E701                       	dc.b	smpsNoAttack, $01
0008EA3B E112                       	smpsAlterNote       $12
0008EA3D E701                       	dc.b	smpsNoAttack, $01
0008EA3F E113                       	smpsAlterNote       $13
0008EA41 E701                       	dc.b	smpsNoAttack, $01
0008EA43 E10F                       	smpsAlterNote       $0F
0008EA45 E701                       	dc.b	smpsNoAttack, $01
0008EA47 E109                       	smpsAlterNote       $09
0008EA49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA4D E10C                       	smpsAlterNote       $0C
0008EA4F E701                       	dc.b	smpsNoAttack, $01
0008EA51 E112                       	smpsAlterNote       $12
0008EA53 E701                       	dc.b	smpsNoAttack, $01
0008EA55 E113                       	smpsAlterNote       $13
0008EA57 8001                       	dc.b	nRst, $01
0008EA59 E10F                       	smpsAlterNote       $0F
0008EA5B C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008EA67 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008EA6F E10D                       	smpsAlterNote       $0D
0008EA71 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EA77 E10B                       	smpsAlterNote       $0B
0008EA79 BF0D                       	dc.b	nD5, $0D
0008EA7B E108                       	smpsAlterNote       $08
0008EA7D E701                       	dc.b	smpsNoAttack, $01
0008EA7F E104                       	smpsAlterNote       $04
0008EA81 E701                       	dc.b	smpsNoAttack, $01
0008EA83 E105                       	smpsAlterNote       $05
0008EA85 E701                       	dc.b	smpsNoAttack, $01
0008EA87 E10B                       	smpsAlterNote       $0B
0008EA89 E701                       	dc.b	smpsNoAttack, $01
0008EA8B E10F                       	smpsAlterNote       $0F
0008EA8D E701                       	dc.b	smpsNoAttack, $01
0008EA8F E10B                       	smpsAlterNote       $0B
0008EA91 E701                       	dc.b	smpsNoAttack, $01
0008EA93 E108                       	smpsAlterNote       $08
0008EA95 E701                       	dc.b	smpsNoAttack, $01
0008EA97 E104                       	smpsAlterNote       $04
0008EA99 E701                       	dc.b	smpsNoAttack, $01
0008EA9B E108                       	smpsAlterNote       $08
0008EA9D E701                       	dc.b	smpsNoAttack, $01
0008EA9F E10E                       	smpsAlterNote       $0E
0008EAA1 E701                       	dc.b	smpsNoAttack, $01
0008EAA3 E10F                       	smpsAlterNote       $0F
0008EAA5 E701                       	dc.b	smpsNoAttack, $01
0008EAA7 E10C                       	smpsAlterNote       $0C
0008EAA9 C101                       	dc.b	nE5, $01
0008EAAB E10D                       	smpsAlterNote       $0D
0008EAAD C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008EAB5 E10F                       	smpsAlterNote       $0F
0008EAB7 C607                       	dc.b	nA5, $07
0008EAB9 E10C                       	smpsAlterNote       $0C
0008EABB CD07                       	dc.b	nE6, $07
0008EABD E10D                       	smpsAlterNote       $0D
0008EABF CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EAC3 E10C                       	smpsAlterNote       $0C
0008EAC5 CD03                       	dc.b	nE6, $03
0008EAC7 E10A                       	smpsAlterNote       $0A
0008EAC9 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EACD E10D                       	smpsAlterNote       $0D
0008EACF C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008EAD5 E10A                       	smpsAlterNote       $0A
0008EAD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EADB E110                       	smpsAlterNote       $10
0008EADD E701                       	dc.b	smpsNoAttack, $01
0008EADF E114                       	smpsAlterNote       $14
0008EAE1 E701                       	dc.b	smpsNoAttack, $01
0008EAE3 E113                       	smpsAlterNote       $13
0008EAE5 E701                       	dc.b	smpsNoAttack, $01
0008EAE7 E10D                       	smpsAlterNote       $0D
0008EAE9 E701                       	dc.b	smpsNoAttack, $01
0008EAEB E109                       	smpsAlterNote       $09
0008EAED E701                       	dc.b	smpsNoAttack, $01
0008EAEF E10D                       	smpsAlterNote       $0D
0008EAF1 E701                       	dc.b	smpsNoAttack, $01
0008EAF3 E110                       	smpsAlterNote       $10
0008EAF5 E701                       	dc.b	smpsNoAttack, $01
0008EAF7 E114                       	smpsAlterNote       $14
0008EAF9 E701                       	dc.b	smpsNoAttack, $01
0008EAFB E10F                       	smpsAlterNote       $0F
0008EAFD C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008EB01 E10C                       	smpsAlterNote       $0C
0008EB03 E701                       	dc.b	smpsNoAttack, $01
0008EB05 E108                       	smpsAlterNote       $08
0008EB07 E701                       	dc.b	smpsNoAttack, $01
0008EB09 E10C                       	smpsAlterNote       $0C
0008EB0B E701                       	dc.b	smpsNoAttack, $01
0008EB0D E10F                       	smpsAlterNote       $0F
0008EB0F E701                       	dc.b	smpsNoAttack, $01
0008EB11 E113                       	smpsAlterNote       $13
0008EB13 E701                       	dc.b	smpsNoAttack, $01
0008EB15 E10F                       	smpsAlterNote       $0F
0008EB17 E701                       	dc.b	smpsNoAttack, $01
0008EB19 E109                       	smpsAlterNote       $09
0008EB1B E701                       	dc.b	smpsNoAttack, $01
0008EB1D E108                       	smpsAlterNote       $08
0008EB1F E701                       	dc.b	smpsNoAttack, $01
0008EB21 E10C                       	smpsAlterNote       $0C
0008EB23 E701                       	dc.b	smpsNoAttack, $01
0008EB25 E112                       	smpsAlterNote       $12
0008EB27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB2B E10F                       	smpsAlterNote       $0F
0008EB2D E701                       	dc.b	smpsNoAttack, $01
0008EB2F E109                       	smpsAlterNote       $09
0008EB31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB35 E10F                       	smpsAlterNote       $0F
0008EB37 E701                       	dc.b	smpsNoAttack, $01
0008EB39 E112                       	smpsAlterNote       $12
0008EB3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB3F E10C                       	smpsAlterNote       $0C
0008EB41 E701                       	dc.b	smpsNoAttack, $01
0008EB43 E108                       	smpsAlterNote       $08
0008EB45 E701                       	dc.b	smpsNoAttack, $01
0008EB47 E109                       	smpsAlterNote       $09
0008EB49 E701                       	dc.b	smpsNoAttack, $01
0008EB4B E10F                       	smpsAlterNote       $0F
0008EB4D E701                       	dc.b	smpsNoAttack, $01
0008EB4F E113                       	smpsAlterNote       $13
0008EB51 E701                       	dc.b	smpsNoAttack, $01
0008EB53 E10F                       	smpsAlterNote       $0F
0008EB55 E701                       	dc.b	smpsNoAttack, $01
0008EB57 E10C                       	smpsAlterNote       $0C
0008EB59 E701                       	dc.b	smpsNoAttack, $01
0008EB5B E108                       	smpsAlterNote       $08
0008EB5D E701                       	dc.b	smpsNoAttack, $01
0008EB5F E10C                       	smpsAlterNote       $0C
0008EB61 E701                       	dc.b	smpsNoAttack, $01
0008EB63 E112                       	smpsAlterNote       $12
0008EB65 E701                       	dc.b	smpsNoAttack, $01
0008EB67 E113                       	smpsAlterNote       $13
0008EB69 E701                       	dc.b	smpsNoAttack, $01
0008EB6B E10F                       	smpsAlterNote       $0F
0008EB6D E701                       	dc.b	smpsNoAttack, $01
0008EB6F E109                       	smpsAlterNote       $09
0008EB71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB75 E10C                       	smpsAlterNote       $0C
0008EB77 E701                       	dc.b	smpsNoAttack, $01
0008EB79 E112                       	smpsAlterNote       $12
0008EB7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB7F E10C                       	smpsAlterNote       $0C
0008EB81 E701                       	dc.b	smpsNoAttack, $01
0008EB83 E109                       	smpsAlterNote       $09
0008EB85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB89 E10F                       	smpsAlterNote       $0F
0008EB8B E701                       	dc.b	smpsNoAttack, $01
0008EB8D E113                       	smpsAlterNote       $13
0008EB8F E701                       	dc.b	smpsNoAttack, $01
0008EB91 E112                       	smpsAlterNote       $12
0008EB93 E701                       	dc.b	smpsNoAttack, $01
0008EB95 E10C                       	smpsAlterNote       $0C
0008EB97 E701                       	dc.b	smpsNoAttack, $01
0008EB99 E109                       	smpsAlterNote       $09
0008EB9B 8001                       	dc.b	nRst, $01
0008EB9D E10F                       	smpsAlterNote       $0F
0008EB9F C60D                       	dc.b	nA5, $0D
0008EBA1 E10C                       	smpsAlterNote       $0C
0008EBA3 E701                       	dc.b	smpsNoAttack, $01
0008EBA5 E108                       	smpsAlterNote       $08
0008EBA7 E701                       	dc.b	smpsNoAttack, $01
0008EBA9 E10C                       	smpsAlterNote       $0C
0008EBAB E701                       	dc.b	smpsNoAttack, $01
0008EBAD E112                       	smpsAlterNote       $12
0008EBAF E701                       	dc.b	smpsNoAttack, $01
0008EBB1 E113                       	smpsAlterNote       $13
0008EBB3 E701                       	dc.b	smpsNoAttack, $01
0008EBB5 E10F                       	smpsAlterNote       $0F
0008EBB7 E701                       	dc.b	smpsNoAttack, $01
0008EBB9 E109                       	smpsAlterNote       $09
0008EBBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBBF E10C                       	smpsAlterNote       $0C
0008EBC1 E701                       	dc.b	smpsNoAttack, $01
0008EBC3 E112                       	smpsAlterNote       $12
0008EBC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBC9 E10C                       	smpsAlterNote       $0C
0008EBCB E701                       	dc.b	smpsNoAttack, $01
0008EBCD E109                       	smpsAlterNote       $09
0008EBCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBD3 E10F                       	smpsAlterNote       $0F
0008EBD5 E701                       	dc.b	smpsNoAttack, $01
0008EBD7 E113                       	smpsAlterNote       $13
0008EBD9 E701                       	dc.b	smpsNoAttack, $01
0008EBDB E112                       	smpsAlterNote       $12
0008EBDD E701                       	dc.b	smpsNoAttack, $01
0008EBDF E10C                       	smpsAlterNote       $0C
0008EBE1 E701                       	dc.b	smpsNoAttack, $01
0008EBE3 E108                       	smpsAlterNote       $08
0008EBE5 E701                       	dc.b	smpsNoAttack, $01
0008EBE7 E10C                       	smpsAlterNote       $0C
0008EBE9 E701                       	dc.b	smpsNoAttack, $01
0008EBEB E10F                       	smpsAlterNote       $0F
0008EBED E701                       	dc.b	smpsNoAttack, $01
0008EBEF E113                       	smpsAlterNote       $13
0008EBF1 E701                       	dc.b	smpsNoAttack, $01
0008EBF3 E10F                       	smpsAlterNote       $0F
0008EBF5 E701                       	dc.b	smpsNoAttack, $01
0008EBF7 E109                       	smpsAlterNote       $09
0008EBF9 E701                       	dc.b	smpsNoAttack, $01
0008EBFB E108                       	smpsAlterNote       $08
0008EBFD E701                       	dc.b	smpsNoAttack, $01
0008EBFF E10C                       	smpsAlterNote       $0C
0008EC01 E701                       	dc.b	smpsNoAttack, $01
0008EC03 E112                       	smpsAlterNote       $12
0008EC05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC09 E10F                       	smpsAlterNote       $0F
0008EC0B E701                       	dc.b	smpsNoAttack, $01
0008EC0D E109                       	smpsAlterNote       $09
0008EC0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC13 E10F                       	smpsAlterNote       $0F
0008EC15 E701                       	dc.b	smpsNoAttack, $01
0008EC17 E112                       	smpsAlterNote       $12
0008EC19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC1D E10C                       	smpsAlterNote       $0C
0008EC1F E701                       	dc.b	smpsNoAttack, $01
0008EC21 E108                       	smpsAlterNote       $08
0008EC23 E701                       	dc.b	smpsNoAttack, $01
0008EC25 E10C                       	smpsAlterNote       $0C
0008EC27 E701                       	dc.b	smpsNoAttack, $01
0008EC29 E10F                       	smpsAlterNote       $0F
0008EC2B E701                       	dc.b	smpsNoAttack, $01
0008EC2D E113                       	smpsAlterNote       $13
0008EC2F E701                       	dc.b	smpsNoAttack, $01
0008EC31 E10F                       	smpsAlterNote       $0F
0008EC33 E701                       	dc.b	smpsNoAttack, $01
0008EC35 E109                       	smpsAlterNote       $09
0008EC37 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EC3D E601                       	smpsAlterVol        $01
0008EC3F E10F                       	smpsAlterNote       $0F
0008EC41 C604                       	dc.b	nA5, $04
0008EC43 E10D                       	smpsAlterNote       $0D
0008EC45 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EC4B E10B                       	smpsAlterNote       $0B
0008EC4D BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008EC55 E10F                       	smpsAlterNote       $0F
0008EC57 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EC5B E10D                       	smpsAlterNote       $0D
0008EC5D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EC63 E10C                       	smpsAlterNote       $0C
0008EC65 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008EC6B E10A                       	smpsAlterNote       $0A
0008EC6D C904 8001                  	dc.b	nC6, $04, nRst, $01
0008EC71 E110                       	smpsAlterNote       $10
0008EC73 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EC77 E10F                       	smpsAlterNote       $0F
0008EC79 C604                       	dc.b	nA5, $04
0008EC7B E10D                       	smpsAlterNote       $0D
0008EC7D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EC89 E109                       	smpsAlterNote       $09
0008EC8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC8F E10F                       	smpsAlterNote       $0F
0008EC91 E701                       	dc.b	smpsNoAttack, $01
0008EC93 E112                       	smpsAlterNote       $12
0008EC95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC99 E10C                       	smpsAlterNote       $0C
0008EC9B E701                       	dc.b	smpsNoAttack, $01
0008EC9D E108                       	smpsAlterNote       $08
0008EC9F E701                       	dc.b	smpsNoAttack, $01
0008ECA1 E10C                       	smpsAlterNote       $0C
0008ECA3 E701                       	dc.b	smpsNoAttack, $01
0008ECA5 E10F                       	smpsAlterNote       $0F
0008ECA7 E701                       	dc.b	smpsNoAttack, $01
0008ECA9 E113                       	smpsAlterNote       $13
0008ECAB E701                       	dc.b	smpsNoAttack, $01
0008ECAD E10D                       	smpsAlterNote       $0D
0008ECAF C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008ECB5 E10C                       	smpsAlterNote       $0C
0008ECB7 C10D                       	dc.b	nE5, $0D
0008ECB9 E109                       	smpsAlterNote       $09
0008ECBB E701                       	dc.b	smpsNoAttack, $01
0008ECBD E105                       	smpsAlterNote       $05
0008ECBF E701                       	dc.b	smpsNoAttack, $01
0008ECC1 E106                       	smpsAlterNote       $06
0008ECC3 E701                       	dc.b	smpsNoAttack, $01
0008ECC5 E10C                       	smpsAlterNote       $0C
0008ECC7 E701                       	dc.b	smpsNoAttack, $01
0008ECC9 E110                       	smpsAlterNote       $10
0008ECCB E701                       	dc.b	smpsNoAttack, $01
0008ECCD E10C                       	smpsAlterNote       $0C
0008ECCF E701                       	dc.b	smpsNoAttack, $01
0008ECD1 E109                       	smpsAlterNote       $09
0008ECD3 E701                       	dc.b	smpsNoAttack, $01
0008ECD5 E105                       	smpsAlterNote       $05
0008ECD7 E701                       	dc.b	smpsNoAttack, $01
0008ECD9 E109                       	smpsAlterNote       $09
0008ECDB E701                       	dc.b	smpsNoAttack, $01
0008ECDD E10F                       	smpsAlterNote       $0F
0008ECDF E701                       	dc.b	smpsNoAttack, $01
0008ECE1 E110                       	smpsAlterNote       $10
0008ECE3 E701                       	dc.b	smpsNoAttack, $01
0008ECE5 E10C                       	smpsAlterNote       $0C
0008ECE7 E701                       	dc.b	smpsNoAttack, $01
0008ECE9 E106                       	smpsAlterNote       $06
0008ECEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECEF E109                       	smpsAlterNote       $09
0008ECF1 E701                       	dc.b	smpsNoAttack, $01
0008ECF3 E10F                       	smpsAlterNote       $0F
0008ECF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECF9 E109                       	smpsAlterNote       $09
0008ECFB E701                       	dc.b	smpsNoAttack, $01
0008ECFD E106                       	smpsAlterNote       $06
0008ECFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED03 E10C                       	smpsAlterNote       $0C
0008ED05 E701                       	dc.b	smpsNoAttack, $01
0008ED07 E110                       	smpsAlterNote       $10
0008ED09 E701                       	dc.b	smpsNoAttack, $01
0008ED0B E10F                       	smpsAlterNote       $0F
0008ED0D E701                       	dc.b	smpsNoAttack, $01
0008ED0F E109                       	smpsAlterNote       $09
0008ED11 E701                       	dc.b	smpsNoAttack, $01
0008ED13 E105                       	smpsAlterNote       $05
0008ED15 E701                       	dc.b	smpsNoAttack, $01
0008ED17 E109                       	smpsAlterNote       $09
0008ED19 E701                       	dc.b	smpsNoAttack, $01
0008ED1B E10C                       	smpsAlterNote       $0C
0008ED1D E701                       	dc.b	smpsNoAttack, $01
0008ED1F E110                       	smpsAlterNote       $10
0008ED21 E701                       	dc.b	smpsNoAttack, $01
0008ED23 E10C                       	smpsAlterNote       $0C
0008ED25 E701                       	dc.b	smpsNoAttack, $01
0008ED27 E106                       	smpsAlterNote       $06
0008ED29 E701                       	dc.b	smpsNoAttack, $01
0008ED2B E105                       	smpsAlterNote       $05
0008ED2D E701                       	dc.b	smpsNoAttack, $01
0008ED2F E109                       	smpsAlterNote       $09
0008ED31 E701                       	dc.b	smpsNoAttack, $01
0008ED33 E10F                       	smpsAlterNote       $0F
0008ED35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED39 E10C                       	smpsAlterNote       $0C
0008ED3B E701                       	dc.b	smpsNoAttack, $01
0008ED3D E106                       	smpsAlterNote       $06
0008ED3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED43 E10C                       	smpsAlterNote       $0C
0008ED45 E701                       	dc.b	smpsNoAttack, $01
0008ED47 E10F                       	smpsAlterNote       $0F
0008ED49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED4D E109                       	smpsAlterNote       $09
0008ED4F E701                       	dc.b	smpsNoAttack, $01
0008ED51 E105                       	smpsAlterNote       $05
0008ED53 E701                       	dc.b	smpsNoAttack, $01
0008ED55 E106                       	smpsAlterNote       $06
0008ED57 E701                       	dc.b	smpsNoAttack, $01
0008ED59 E10C                       	smpsAlterNote       $0C
0008ED5B E701                       	dc.b	smpsNoAttack, $01
0008ED5D E110                       	smpsAlterNote       $10
0008ED5F E701                       	dc.b	smpsNoAttack, $01
0008ED61 E10C                       	smpsAlterNote       $0C
0008ED63 E701                       	dc.b	smpsNoAttack, $01
0008ED65 E109                       	smpsAlterNote       $09
0008ED67 E701                       	dc.b	smpsNoAttack, $01
0008ED69 E105                       	smpsAlterNote       $05
0008ED6B E701                       	dc.b	smpsNoAttack, $01
0008ED6D E109                       	smpsAlterNote       $09
0008ED6F E701                       	dc.b	smpsNoAttack, $01
0008ED71 E10F                       	smpsAlterNote       $0F
0008ED73 E701                       	dc.b	smpsNoAttack, $01
0008ED75 E110                       	smpsAlterNote       $10
0008ED77 E701                       	dc.b	smpsNoAttack, $01
0008ED79 E10C                       	smpsAlterNote       $0C
0008ED7B E701                       	dc.b	smpsNoAttack, $01
0008ED7D E106                       	smpsAlterNote       $06
0008ED7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED83 E109                       	smpsAlterNote       $09
0008ED85 E701                       	dc.b	smpsNoAttack, $01
0008ED87 E10F                       	smpsAlterNote       $0F
0008ED89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED8D E109                       	smpsAlterNote       $09
0008ED8F E701                       	dc.b	smpsNoAttack, $01
0008ED91 E106                       	smpsAlterNote       $06
0008ED93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED97 E10C                       	smpsAlterNote       $0C
0008ED99 E701                       	dc.b	smpsNoAttack, $01
0008ED9B E110                       	smpsAlterNote       $10
0008ED9D E701                       	dc.b	smpsNoAttack, $01
0008ED9F E10F                       	smpsAlterNote       $0F
0008EDA1 E701                       	dc.b	smpsNoAttack, $01
0008EDA3 E109                       	smpsAlterNote       $09
0008EDA5 E701                       	dc.b	smpsNoAttack, $01
0008EDA7 E105                       	smpsAlterNote       $05
0008EDA9 E701                       	dc.b	smpsNoAttack, $01
0008EDAB E109                       	smpsAlterNote       $09
0008EDAD E701                       	dc.b	smpsNoAttack, $01
0008EDAF E10C                       	smpsAlterNote       $0C
0008EDB1 E701                       	dc.b	smpsNoAttack, $01
0008EDB3 E110                       	smpsAlterNote       $10
0008EDB5 E701                       	dc.b	smpsNoAttack, $01
0008EDB7 E10C                       	smpsAlterNote       $0C
0008EDB9 E701                       	dc.b	smpsNoAttack, $01
0008EDBB E106                       	smpsAlterNote       $06
0008EDBD E701                       	dc.b	smpsNoAttack, $01
0008EDBF E105                       	smpsAlterNote       $05
0008EDC1 E701                       	dc.b	smpsNoAttack, $01
0008EDC3 E109                       	smpsAlterNote       $09
0008EDC5 E701                       	dc.b	smpsNoAttack, $01
0008EDC7 E10F                       	smpsAlterNote       $0F
0008EDC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDCD E109                       	smpsAlterNote       $09
0008EDCF E701                       	dc.b	smpsNoAttack, $01
0008EDD1 E106                       	smpsAlterNote       $06
0008EDD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDD7 E10C                       	smpsAlterNote       $0C
0008EDD9 E701                       	dc.b	smpsNoAttack, $01
0008EDDB E110                       	smpsAlterNote       $10
0008EDDD E701                       	dc.b	smpsNoAttack, $01
0008EDDF E10F                       	smpsAlterNote       $0F
0008EDE1 E701                       	dc.b	smpsNoAttack, $01
0008EDE3 E109                       	smpsAlterNote       $09
0008EDE5 E701                       	dc.b	smpsNoAttack, $01
0008EDE7 E105                       	smpsAlterNote       $05
0008EDE9 E701                       	dc.b	smpsNoAttack, $01
0008EDEB E109                       	smpsAlterNote       $09
0008EDED E701                       	dc.b	smpsNoAttack, $01
0008EDEF E10C                       	smpsAlterNote       $0C
0008EDF1 E701                       	dc.b	smpsNoAttack, $01
0008EDF3 E110                       	smpsAlterNote       $10
0008EDF5 E701                       	dc.b	smpsNoAttack, $01
0008EDF7 E10C                       	smpsAlterNote       $0C
0008EDF9 E701                       	dc.b	smpsNoAttack, $01
0008EDFB E106                       	smpsAlterNote       $06
0008EDFD E701                       	dc.b	smpsNoAttack, $01
0008EDFF E105                       	smpsAlterNote       $05
0008EE01 E701                       	dc.b	smpsNoAttack, $01
0008EE03 E109                       	smpsAlterNote       $09
0008EE05 E701                       	dc.b	smpsNoAttack, $01
0008EE07 E10F                       	smpsAlterNote       $0F
0008EE09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE0D E10C                       	smpsAlterNote       $0C
0008EE0F E701                       	dc.b	smpsNoAttack, $01
0008EE11 E106                       	smpsAlterNote       $06
0008EE13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE17 E10C                       	smpsAlterNote       $0C
0008EE19 E701                       	dc.b	smpsNoAttack, $01
0008EE1B E10F                       	smpsAlterNote       $0F
0008EE1D E701                       	dc.b	smpsNoAttack, $01
0008EE1F E110                       	smpsAlterNote       $10
0008EE21 8001                       	dc.b	nRst, $01
0008EE23 E10F                       	smpsAlterNote       $0F
0008EE25 C604                       	dc.b	nA5, $04
0008EE27 E10D                       	smpsAlterNote       $0D
0008EE29 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EE2F E10B                       	smpsAlterNote       $0B
0008EE31 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008EE37 E10F                       	smpsAlterNote       $0F
0008EE39 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EE3D E10D                       	smpsAlterNote       $0D
0008EE3F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EE45 E10C                       	smpsAlterNote       $0C
0008EE47 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008EE4D E10A                       	smpsAlterNote       $0A
0008EE4F C904                       	dc.b	nC6, $04
0008EE51 E110                       	smpsAlterNote       $10
0008EE53 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EE57 E10F                       	smpsAlterNote       $0F
0008EE59 C604                       	dc.b	nA5, $04
0008EE5B E10D                       	smpsAlterNote       $0D
0008EE5D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EE69 E109                       	smpsAlterNote       $09
0008EE6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE6F E10F                       	smpsAlterNote       $0F
0008EE71 E701                       	dc.b	smpsNoAttack, $01
0008EE73 E112                       	smpsAlterNote       $12
0008EE75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE79 E10C                       	smpsAlterNote       $0C
0008EE7B E701                       	dc.b	smpsNoAttack, $01
0008EE7D E108                       	smpsAlterNote       $08
0008EE7F E701                       	dc.b	smpsNoAttack, $01
0008EE81 E109                       	smpsAlterNote       $09
0008EE83 E701                       	dc.b	smpsNoAttack, $01
0008EE85 E10F                       	smpsAlterNote       $0F
0008EE87 E701                       	dc.b	smpsNoAttack, $01
0008EE89 E113                       	smpsAlterNote       $13
0008EE8B E701                       	dc.b	smpsNoAttack, $01
0008EE8D E10D                       	smpsAlterNote       $0D
0008EE8F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EE95 E10C                       	smpsAlterNote       $0C
0008EE97 C10D                       	dc.b	nE5, $0D
0008EE99 E109                       	smpsAlterNote       $09
0008EE9B E701                       	dc.b	smpsNoAttack, $01
0008EE9D E106                       	smpsAlterNote       $06
0008EE9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEA3 E10C                       	smpsAlterNote       $0C
0008EEA5 E701                       	dc.b	smpsNoAttack, $01
0008EEA7 E110                       	smpsAlterNote       $10
0008EEA9 E701                       	dc.b	smpsNoAttack, $01
0008EEAB E10F                       	smpsAlterNote       $0F
0008EEAD E701                       	dc.b	smpsNoAttack, $01
0008EEAF E109                       	smpsAlterNote       $09
0008EEB1 E701                       	dc.b	smpsNoAttack, $01
0008EEB3 E105                       	smpsAlterNote       $05
0008EEB5 E701                       	dc.b	smpsNoAttack, $01
0008EEB7 E109                       	smpsAlterNote       $09
0008EEB9 E701                       	dc.b	smpsNoAttack, $01
0008EEBB E10C                       	smpsAlterNote       $0C
0008EEBD E701                       	dc.b	smpsNoAttack, $01
0008EEBF E110                       	smpsAlterNote       $10
0008EEC1 E701                       	dc.b	smpsNoAttack, $01
0008EEC3 E10C                       	smpsAlterNote       $0C
0008EEC5 E701                       	dc.b	smpsNoAttack, $01
0008EEC7 E106                       	smpsAlterNote       $06
0008EEC9 E701                       	dc.b	smpsNoAttack, $01
0008EECB E105                       	smpsAlterNote       $05
0008EECD E701                       	dc.b	smpsNoAttack, $01
0008EECF E109                       	smpsAlterNote       $09
0008EED1 E701                       	dc.b	smpsNoAttack, $01
0008EED3 E10F                       	smpsAlterNote       $0F
0008EED5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EED9 E10C                       	smpsAlterNote       $0C
0008EEDB E701                       	dc.b	smpsNoAttack, $01
0008EEDD E106                       	smpsAlterNote       $06
0008EEDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEE3 E10C                       	smpsAlterNote       $0C
0008EEE5 E701                       	dc.b	smpsNoAttack, $01
0008EEE7 E10F                       	smpsAlterNote       $0F
0008EEE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEED E109                       	smpsAlterNote       $09
0008EEEF E701                       	dc.b	smpsNoAttack, $01
0008EEF1 E105                       	smpsAlterNote       $05
0008EEF3 E701                       	dc.b	smpsNoAttack, $01
0008EEF5 E106                       	smpsAlterNote       $06
0008EEF7 E701                       	dc.b	smpsNoAttack, $01
0008EEF9 E10C                       	smpsAlterNote       $0C
0008EEFB E701                       	dc.b	smpsNoAttack, $01
0008EEFD E110                       	smpsAlterNote       $10
0008EEFF E701                       	dc.b	smpsNoAttack, $01
0008EF01 E10C                       	smpsAlterNote       $0C
0008EF03 E701                       	dc.b	smpsNoAttack, $01
0008EF05 E109                       	smpsAlterNote       $09
0008EF07 E701                       	dc.b	smpsNoAttack, $01
0008EF09 E105                       	smpsAlterNote       $05
0008EF0B E701                       	dc.b	smpsNoAttack, $01
0008EF0D E109                       	smpsAlterNote       $09
0008EF0F E701                       	dc.b	smpsNoAttack, $01
0008EF11 E10F                       	smpsAlterNote       $0F
0008EF13 E701                       	dc.b	smpsNoAttack, $01
0008EF15 E110                       	smpsAlterNote       $10
0008EF17 E701                       	dc.b	smpsNoAttack, $01
0008EF19 E10C                       	smpsAlterNote       $0C
0008EF1B E701                       	dc.b	smpsNoAttack, $01
0008EF1D E106                       	smpsAlterNote       $06
0008EF1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF23 E109                       	smpsAlterNote       $09
0008EF25 E701                       	dc.b	smpsNoAttack, $01
0008EF27 E10F                       	smpsAlterNote       $0F
0008EF29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF2D E109                       	smpsAlterNote       $09
0008EF2F E701                       	dc.b	smpsNoAttack, $01
0008EF31 E106                       	smpsAlterNote       $06
0008EF33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF37 E10C                       	smpsAlterNote       $0C
0008EF39 E701                       	dc.b	smpsNoAttack, $01
0008EF3B E110                       	smpsAlterNote       $10
0008EF3D E701                       	dc.b	smpsNoAttack, $01
0008EF3F E10F                       	smpsAlterNote       $0F
0008EF41 E701                       	dc.b	smpsNoAttack, $01
0008EF43 E109                       	smpsAlterNote       $09
0008EF45 E701                       	dc.b	smpsNoAttack, $01
0008EF47 E105                       	smpsAlterNote       $05
0008EF49 E701                       	dc.b	smpsNoAttack, $01
0008EF4B E109                       	smpsAlterNote       $09
0008EF4D E701                       	dc.b	smpsNoAttack, $01
0008EF4F E10F                       	smpsAlterNote       $0F
0008EF51 E701                       	dc.b	smpsNoAttack, $01
0008EF53 E110                       	smpsAlterNote       $10
0008EF55 E701                       	dc.b	smpsNoAttack, $01
0008EF57 E10C                       	smpsAlterNote       $0C
0008EF59 E701                       	dc.b	smpsNoAttack, $01
0008EF5B E106                       	smpsAlterNote       $06
0008EF5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF61 E109                       	smpsAlterNote       $09
0008EF63 E701                       	dc.b	smpsNoAttack, $01
0008EF65 E10F                       	smpsAlterNote       $0F
0008EF67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF6B E109                       	smpsAlterNote       $09
0008EF6D E701                       	dc.b	smpsNoAttack, $01
0008EF6F E106                       	smpsAlterNote       $06
0008EF71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF75 E10C                       	smpsAlterNote       $0C
0008EF77 E701                       	dc.b	smpsNoAttack, $01
0008EF79 E110                       	smpsAlterNote       $10
0008EF7B E701                       	dc.b	smpsNoAttack, $01
0008EF7D E10F                       	smpsAlterNote       $0F
0008EF7F E701                       	dc.b	smpsNoAttack, $01
0008EF81 E109                       	smpsAlterNote       $09
0008EF83 E701                       	dc.b	smpsNoAttack, $01
0008EF85 E105                       	smpsAlterNote       $05
0008EF87 E701                       	dc.b	smpsNoAttack, $01
0008EF89 E109                       	smpsAlterNote       $09
0008EF8B E701                       	dc.b	smpsNoAttack, $01
0008EF8D E10C                       	smpsAlterNote       $0C
0008EF8F E701                       	dc.b	smpsNoAttack, $01
0008EF91 E110                       	smpsAlterNote       $10
0008EF93 E701                       	dc.b	smpsNoAttack, $01
0008EF95 E10C                       	smpsAlterNote       $0C
0008EF97 E701                       	dc.b	smpsNoAttack, $01
0008EF99 E106                       	smpsAlterNote       $06
0008EF9B E701                       	dc.b	smpsNoAttack, $01
0008EF9D E105                       	smpsAlterNote       $05
0008EF9F E701                       	dc.b	smpsNoAttack, $01
0008EFA1 E109                       	smpsAlterNote       $09
0008EFA3 E701                       	dc.b	smpsNoAttack, $01
0008EFA5 E10F                       	smpsAlterNote       $0F
0008EFA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFAB E10C                       	smpsAlterNote       $0C
0008EFAD E701                       	dc.b	smpsNoAttack, $01
0008EFAF E106                       	smpsAlterNote       $06
0008EFB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFB5 E10C                       	smpsAlterNote       $0C
0008EFB7 E701                       	dc.b	smpsNoAttack, $01
0008EFB9 E10F                       	smpsAlterNote       $0F
0008EFBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFBF E109                       	smpsAlterNote       $09
0008EFC1 E701                       	dc.b	smpsNoAttack, $01
0008EFC3 E105                       	smpsAlterNote       $05
0008EFC5 E701                       	dc.b	smpsNoAttack, $01
0008EFC7 E106                       	smpsAlterNote       $06
0008EFC9 E701                       	dc.b	smpsNoAttack, $01
0008EFCB E10C                       	smpsAlterNote       $0C
0008EFCD E701                       	dc.b	smpsNoAttack, $01
0008EFCF E110                       	smpsAlterNote       $10
0008EFD1 E701                       	dc.b	smpsNoAttack, $01
0008EFD3 E10C                       	smpsAlterNote       $0C
0008EFD5 E701                       	dc.b	smpsNoAttack, $01
0008EFD7 E109                       	smpsAlterNote       $09
0008EFD9 E701                       	dc.b	smpsNoAttack, $01
0008EFDB E105                       	smpsAlterNote       $05
0008EFDD E701                       	dc.b	smpsNoAttack, $01
0008EFDF E109                       	smpsAlterNote       $09
0008EFE1 E701                       	dc.b	smpsNoAttack, $01
0008EFE3 E10F                       	smpsAlterNote       $0F
0008EFE5 E701                       	dc.b	smpsNoAttack, $01
0008EFE7 E110                       	smpsAlterNote       $10
0008EFE9 E701                       	dc.b	smpsNoAttack, $01
0008EFEB E10C                       	smpsAlterNote       $0C
0008EFED E701                       	dc.b	smpsNoAttack, $01
0008EFEF E106                       	smpsAlterNote       $06
0008EFF1 E701                       	dc.b	smpsNoAttack, $01
0008EFF3 E10B                       	smpsAlterNote       $0B
0008EFF5 BF02                       	dc.b	nD5, $02
0008EFF7 E10C                       	smpsAlterNote       $0C
0008EFF9 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008EFFF E109                       	smpsAlterNote       $09
0008F001 E701                       	dc.b	smpsNoAttack, $01
0008F003 E105                       	smpsAlterNote       $05
0008F005 E701                       	dc.b	smpsNoAttack, $01
0008F007 E109                       	smpsAlterNote       $09
0008F009 E701                       	dc.b	smpsNoAttack, $01
0008F00B E10F                       	smpsAlterNote       $0F
0008F00D E701                       	dc.b	smpsNoAttack, $01
0008F00F E110                       	smpsAlterNote       $10
0008F011 E701                       	dc.b	smpsNoAttack, $01
0008F013 E10C                       	smpsAlterNote       $0C
0008F015 E701                       	dc.b	smpsNoAttack, $01
0008F017 E106                       	smpsAlterNote       $06
0008F019 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F01D E109                       	smpsAlterNote       $09
0008F01F E701                       	dc.b	smpsNoAttack, $01
0008F021 E10F                       	smpsAlterNote       $0F
0008F023 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F027 E109                       	smpsAlterNote       $09
0008F029 E701                       	dc.b	smpsNoAttack, $01
0008F02B E106                       	smpsAlterNote       $06
0008F02D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F031 E10C                       	smpsAlterNote       $0C
0008F033 E701                       	dc.b	smpsNoAttack, $01
0008F035 E110                       	smpsAlterNote       $10
0008F037 E701                       	dc.b	smpsNoAttack, $01
0008F039 E10F                       	smpsAlterNote       $0F
0008F03B E701                       	dc.b	smpsNoAttack, $01
0008F03D E109                       	smpsAlterNote       $09
0008F03F E701                       	dc.b	smpsNoAttack, $01
0008F041 E105                       	smpsAlterNote       $05
0008F043 E701                       	dc.b	smpsNoAttack, $01
0008F045 E109                       	smpsAlterNote       $09
0008F047 E701                       	dc.b	smpsNoAttack, $01
0008F049 E10C                       	smpsAlterNote       $0C
0008F04B E701                       	dc.b	smpsNoAttack, $01
0008F04D E110                       	smpsAlterNote       $10
0008F04F E701                       	dc.b	smpsNoAttack, $01
0008F051 E10C                       	smpsAlterNote       $0C
0008F053 E701                       	dc.b	smpsNoAttack, $01
0008F055 E106                       	smpsAlterNote       $06
0008F057 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F05B E10D                       	smpsAlterNote       $0D
0008F05D C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F065 E10C                       	smpsAlterNote       $0C
0008F067 C10D                       	dc.b	nE5, $0D
0008F069 E106                       	smpsAlterNote       $06
0008F06B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F06F E109                       	smpsAlterNote       $09
0008F071 E701                       	dc.b	smpsNoAttack, $01
0008F073 E10F                       	smpsAlterNote       $0F
0008F075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F079 E109                       	smpsAlterNote       $09
0008F07B E701                       	dc.b	smpsNoAttack, $01
0008F07D E106                       	smpsAlterNote       $06
0008F07F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F083 E10C                       	smpsAlterNote       $0C
0008F085 E701                       	dc.b	smpsNoAttack, $01
0008F087 E110                       	smpsAlterNote       $10
0008F089 E701                       	dc.b	smpsNoAttack, $01
0008F08B E10F                       	smpsAlterNote       $0F
0008F08D E701                       	dc.b	smpsNoAttack, $01
0008F08F E109                       	smpsAlterNote       $09
0008F091 E701                       	dc.b	smpsNoAttack, $01
0008F093 E105                       	smpsAlterNote       $05
0008F095 E701                       	dc.b	smpsNoAttack, $01
0008F097 E106                       	smpsAlterNote       $06
0008F099 800F                       	dc.b	nRst, $0F
0008F09D E6FF                       	smpsAlterVol        $FF
0008F09F E10F                       	smpsAlterNote       $0F
0008F0A1 BA01                       	dc.b	nA4, $01
0008F0A3 E110                       	smpsAlterNote       $10
0008F0A5 BB02                       	dc.b	nBb4, $02
0008F0A7 E10F                       	smpsAlterNote       $0F
0008F0A9 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F0AF E10B                       	smpsAlterNote       $0B
0008F0B1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F0B5 E10C                       	smpsAlterNote       $0C
0008F0B7 C103                       	dc.b	nE5, $03
0008F0B9 E10D                       	smpsAlterNote       $0D
0008F0BB C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F0C5 E10B                       	smpsAlterNote       $0B
0008F0C7 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F0CB E104                       	smpsAlterNote       $04
0008F0CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0D1 E10A                       	smpsAlterNote       $0A
0008F0D3 E701                       	dc.b	smpsNoAttack, $01
0008F0D5 E10D                       	smpsAlterNote       $0D
0008F0D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0DB E107                       	smpsAlterNote       $07
0008F0DD E701                       	dc.b	smpsNoAttack, $01
0008F0DF E104                       	smpsAlterNote       $04
0008F0E1 8001                       	dc.b	nRst, $01
0008F0E3 E110                       	smpsAlterNote       $10
0008F0E5 C703                       	dc.b	nBb5, $03
0008F0E7 E10F                       	smpsAlterNote       $0F
0008F0E9 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F0ED E10D                       	smpsAlterNote       $0D
0008F0EF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F0F3 E10C                       	smpsAlterNote       $0C
0008F0F5 E701                       	dc.b	smpsNoAttack, $01
0008F0F7 E108                       	smpsAlterNote       $08
0008F0F9 E701                       	dc.b	smpsNoAttack, $01
0008F0FB E109                       	smpsAlterNote       $09
0008F0FD E701                       	dc.b	smpsNoAttack, $01
0008F0FF E10F                       	smpsAlterNote       $0F
0008F101 E701                       	dc.b	smpsNoAttack, $01
0008F103 E113                       	smpsAlterNote       $13
0008F105 E701                       	dc.b	smpsNoAttack, $01
0008F107 E10F                       	smpsAlterNote       $0F
0008F109 E701                       	dc.b	smpsNoAttack, $01
0008F10B E10C                       	smpsAlterNote       $0C
0008F10D E701                       	dc.b	smpsNoAttack, $01
0008F10F E108                       	smpsAlterNote       $08
0008F111 E701                       	dc.b	smpsNoAttack, $01
0008F113 E10C                       	smpsAlterNote       $0C
0008F115 E701                       	dc.b	smpsNoAttack, $01
0008F117 E112                       	smpsAlterNote       $12
0008F119 E701                       	dc.b	smpsNoAttack, $01
0008F11B E113                       	smpsAlterNote       $13
0008F11D E701                       	dc.b	smpsNoAttack, $01
0008F11F E10F                       	smpsAlterNote       $0F
0008F121 E701                       	dc.b	smpsNoAttack, $01
0008F123 E109                       	smpsAlterNote       $09
0008F125 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F129 E10C                       	smpsAlterNote       $0C
0008F12B E701                       	dc.b	smpsNoAttack, $01
0008F12D E112                       	smpsAlterNote       $12
0008F12F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F133 E10C                       	smpsAlterNote       $0C
0008F135 E701                       	dc.b	smpsNoAttack, $01
0008F137 E109                       	smpsAlterNote       $09
0008F139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F13D E10F                       	smpsAlterNote       $0F
0008F13F E701                       	dc.b	smpsNoAttack, $01
0008F141 E113                       	smpsAlterNote       $13
0008F143 E701                       	dc.b	smpsNoAttack, $01
0008F145 E112                       	smpsAlterNote       $12
0008F147 E701                       	dc.b	smpsNoAttack, $01
0008F149 E10C                       	smpsAlterNote       $0C
0008F14B E701                       	dc.b	smpsNoAttack, $01
0008F14D E108                       	smpsAlterNote       $08
0008F14F E701                       	dc.b	smpsNoAttack, $01
0008F151 E10C                       	smpsAlterNote       $0C
0008F153 E701                       	dc.b	smpsNoAttack, $01
0008F155 E10F                       	smpsAlterNote       $0F
0008F157 E701                       	dc.b	smpsNoAttack, $01
0008F159 E113                       	smpsAlterNote       $13
0008F15B E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F15F E10B                       	smpsAlterNote       $0B
0008F161 BF03                       	dc.b	nD5, $03
0008F163 E10C                       	smpsAlterNote       $0C
0008F165 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F169 E10D                       	smpsAlterNote       $0D
0008F16B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F175 E10B                       	smpsAlterNote       $0B
0008F177 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F183 E110                       	smpsAlterNote       $10
0008F185 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F189 E10F                       	smpsAlterNote       $0F
0008F18B C604                       	dc.b	nA5, $04
0008F18D E10D                       	smpsAlterNote       $0D
0008F18F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F195 E109                       	smpsAlterNote       $09
0008F197 E701                       	dc.b	smpsNoAttack, $01
0008F199 E108                       	smpsAlterNote       $08
0008F19B E701                       	dc.b	smpsNoAttack, $01
0008F19D E10C                       	smpsAlterNote       $0C
0008F19F E701                       	dc.b	smpsNoAttack, $01
0008F1A1 E112                       	smpsAlterNote       $12
0008F1A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1A7 E10F                       	smpsAlterNote       $0F
0008F1A9 E701                       	dc.b	smpsNoAttack, $01
0008F1AB E109                       	smpsAlterNote       $09
0008F1AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1B1 E10F                       	smpsAlterNote       $0F
0008F1B3 E701                       	dc.b	smpsNoAttack, $01
0008F1B5 E112                       	smpsAlterNote       $12
0008F1B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1BB E10C                       	smpsAlterNote       $0C
0008F1BD E701                       	dc.b	smpsNoAttack, $01
0008F1BF E108                       	smpsAlterNote       $08
0008F1C1 E701                       	dc.b	smpsNoAttack, $01
0008F1C3 E109                       	smpsAlterNote       $09
0008F1C5 E701                       	dc.b	smpsNoAttack, $01
0008F1C7 E10F                       	smpsAlterNote       $0F
0008F1C9 E701                       	dc.b	smpsNoAttack, $01
0008F1CB E113                       	smpsAlterNote       $13
0008F1CD E701                       	dc.b	smpsNoAttack, $01
0008F1CF E10F                       	smpsAlterNote       $0F
0008F1D1 E701                       	dc.b	smpsNoAttack, $01
0008F1D3 E10C                       	smpsAlterNote       $0C
0008F1D5 E701                       	dc.b	smpsNoAttack, $01
0008F1D7 E108                       	smpsAlterNote       $08
0008F1D9 E701                       	dc.b	smpsNoAttack, $01
0008F1DB E10C                       	smpsAlterNote       $0C
0008F1DD E701                       	dc.b	smpsNoAttack, $01
0008F1DF E112                       	smpsAlterNote       $12
0008F1E1 E701                       	dc.b	smpsNoAttack, $01
0008F1E3 E113                       	smpsAlterNote       $13
0008F1E5 E701                       	dc.b	smpsNoAttack, $01
0008F1E7 E10F                       	smpsAlterNote       $0F
0008F1E9 E701                       	dc.b	smpsNoAttack, $01
0008F1EB E109                       	smpsAlterNote       $09
0008F1ED E701                       	dc.b	smpsNoAttack, $01
0008F1EF E10D                       	smpsAlterNote       $0D
0008F1F1 C402                       	dc.b	nG5, $02
0008F1F3 E10F                       	smpsAlterNote       $0F
0008F1F5 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F1FF E10D                       	smpsAlterNote       $0D
0008F201 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F207 E10B                       	smpsAlterNote       $0B
0008F209 BF0D                       	dc.b	nD5, $0D
0008F20B E108                       	smpsAlterNote       $08
0008F20D E701                       	dc.b	smpsNoAttack, $01
0008F20F E104                       	smpsAlterNote       $04
0008F211 E701                       	dc.b	smpsNoAttack, $01
0008F213 E105                       	smpsAlterNote       $05
0008F215 E701                       	dc.b	smpsNoAttack, $01
0008F217 E10B                       	smpsAlterNote       $0B
0008F219 E701                       	dc.b	smpsNoAttack, $01
0008F21B E10F                       	smpsAlterNote       $0F
0008F21D E701                       	dc.b	smpsNoAttack, $01
0008F21F E10B                       	smpsAlterNote       $0B
0008F221 E701                       	dc.b	smpsNoAttack, $01
0008F223 E108                       	smpsAlterNote       $08
0008F225 E701                       	dc.b	smpsNoAttack, $01
0008F227 E104                       	smpsAlterNote       $04
0008F229 E701                       	dc.b	smpsNoAttack, $01
0008F22B E108                       	smpsAlterNote       $08
0008F22D E701                       	dc.b	smpsNoAttack, $01
0008F22F E10E                       	smpsAlterNote       $0E
0008F231 E701                       	dc.b	smpsNoAttack, $01
0008F233 E10F                       	smpsAlterNote       $0F
0008F235 E701                       	dc.b	smpsNoAttack, $01
0008F237 E10C                       	smpsAlterNote       $0C
0008F239 C101                       	dc.b	nE5, $01
0008F23B E10D                       	smpsAlterNote       $0D
0008F23D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F245 E10F                       	smpsAlterNote       $0F
0008F247 C607                       	dc.b	nA5, $07
0008F249 E10C                       	smpsAlterNote       $0C
0008F24B CD07                       	dc.b	nE6, $07
0008F24D E10D                       	smpsAlterNote       $0D
0008F24F CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F253 E10C                       	smpsAlterNote       $0C
0008F255 CD03                       	dc.b	nE6, $03
0008F257 E10A                       	smpsAlterNote       $0A
0008F259 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F25D E10D                       	smpsAlterNote       $0D
0008F25F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F265 E10A                       	smpsAlterNote       $0A
0008F267 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F26B E110                       	smpsAlterNote       $10
0008F26D E701                       	dc.b	smpsNoAttack, $01
0008F26F E114                       	smpsAlterNote       $14
0008F271 E701                       	dc.b	smpsNoAttack, $01
0008F273 E113                       	smpsAlterNote       $13
0008F275 E701                       	dc.b	smpsNoAttack, $01
0008F277 E10D                       	smpsAlterNote       $0D
0008F279 E701                       	dc.b	smpsNoAttack, $01
0008F27B E109                       	smpsAlterNote       $09
0008F27D E701                       	dc.b	smpsNoAttack, $01
0008F27F E10D                       	smpsAlterNote       $0D
0008F281 E701                       	dc.b	smpsNoAttack, $01
0008F283 E110                       	smpsAlterNote       $10
0008F285 E701                       	dc.b	smpsNoAttack, $01
0008F287 E114                       	smpsAlterNote       $14
0008F289 E701                       	dc.b	smpsNoAttack, $01
0008F28B E10F                       	smpsAlterNote       $0F
0008F28D C607                       	dc.b	nA5, $07
0008F28F E10D                       	smpsAlterNote       $0D
0008F291 C40D                       	dc.b	nG5, $0D
0008F293 E10A                       	smpsAlterNote       $0A
0008F295 E701                       	dc.b	smpsNoAttack, $01
0008F297 E106                       	smpsAlterNote       $06
0008F299 E701                       	dc.b	smpsNoAttack, $01
0008F29B E10A                       	smpsAlterNote       $0A
0008F29D E701                       	dc.b	smpsNoAttack, $01
0008F29F E10D                       	smpsAlterNote       $0D
0008F2A1 E701                       	dc.b	smpsNoAttack, $01
0008F2A3 E111                       	smpsAlterNote       $11
0008F2A5 E701                       	dc.b	smpsNoAttack, $01
0008F2A7 E10D                       	smpsAlterNote       $0D
0008F2A9 E701                       	dc.b	smpsNoAttack, $01
0008F2AB E107                       	smpsAlterNote       $07
0008F2AD E701                       	dc.b	smpsNoAttack, $01
0008F2AF E106                       	smpsAlterNote       $06
0008F2B1 E701                       	dc.b	smpsNoAttack, $01
0008F2B3 E10A                       	smpsAlterNote       $0A
0008F2B5 E701                       	dc.b	smpsNoAttack, $01
0008F2B7 E110                       	smpsAlterNote       $10
0008F2B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2BD E10D                       	smpsAlterNote       $0D
0008F2BF E701                       	dc.b	smpsNoAttack, $01
0008F2C1 E107                       	smpsAlterNote       $07
0008F2C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2C7 E10F                       	smpsAlterNote       $0F
0008F2C9 C60E                       	dc.b	nA5, $0E
0008F2CB E109                       	smpsAlterNote       $09
0008F2CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2D1 E10F                       	smpsAlterNote       $0F
0008F2D3 E701                       	dc.b	smpsNoAttack, $01
0008F2D5 E112                       	smpsAlterNote       $12
0008F2D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2DB E10C                       	smpsAlterNote       $0C
0008F2DD E701                       	dc.b	smpsNoAttack, $01
0008F2DF E108                       	smpsAlterNote       $08
0008F2E1 E701                       	dc.b	smpsNoAttack, $01
0008F2E3 E109                       	smpsAlterNote       $09
0008F2E5 E701                       	dc.b	smpsNoAttack, $01
0008F2E7 E10F                       	smpsAlterNote       $0F
0008F2E9 E701                       	dc.b	smpsNoAttack, $01
0008F2EB E113                       	smpsAlterNote       $13
0008F2ED E701                       	dc.b	smpsNoAttack, $01
0008F2EF E10F                       	smpsAlterNote       $0F
0008F2F1 E701                       	dc.b	smpsNoAttack, $01
0008F2F3 E10C                       	smpsAlterNote       $0C
0008F2F5 E701                       	dc.b	smpsNoAttack, $01
0008F2F7 E108                       	smpsAlterNote       $08
0008F2F9 E701                       	dc.b	smpsNoAttack, $01
0008F2FB E109                       	smpsAlterNote       $09
0008F2FD 8001                       	dc.b	nRst, $01
0008F2FF E110                       	smpsAlterNote       $10
0008F301 C70D                       	dc.b	nBb5, $0D
0008F303 E10D                       	smpsAlterNote       $0D
0008F305 E701                       	dc.b	smpsNoAttack, $01
0008F307 E109                       	smpsAlterNote       $09
0008F309 E701                       	dc.b	smpsNoAttack, $01
0008F30B E10D                       	smpsAlterNote       $0D
0008F30D E701                       	dc.b	smpsNoAttack, $01
0008F30F E113                       	smpsAlterNote       $13
0008F311 E701                       	dc.b	smpsNoAttack, $01
0008F313 E114                       	smpsAlterNote       $14
0008F315 E701                       	dc.b	smpsNoAttack, $01
0008F317 E110                       	smpsAlterNote       $10
0008F319 E701                       	dc.b	smpsNoAttack, $01
0008F31B E10A                       	smpsAlterNote       $0A
0008F31D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F321 E10D                       	smpsAlterNote       $0D
0008F323 E701                       	dc.b	smpsNoAttack, $01
0008F325 E113                       	smpsAlterNote       $13
0008F327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F32B E10D                       	smpsAlterNote       $0D
0008F32D E701                       	dc.b	smpsNoAttack, $01
0008F32F E10A                       	smpsAlterNote       $0A
0008F331 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F33B E10B                       	smpsAlterNote       $0B
0008F33D 8001                       	dc.b	nRst, $01
0008F33F E10C                       	smpsAlterNote       $0C
0008F341 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F345 E10B                       	smpsAlterNote       $0B
0008F347 CB0D                       	dc.b	nD6, $0D
0008F349 E105                       	smpsAlterNote       $05
0008F34B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F34F E108                       	smpsAlterNote       $08
0008F351 E701                       	dc.b	smpsNoAttack, $01
0008F353 E10E                       	smpsAlterNote       $0E
0008F355 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F359 E108                       	smpsAlterNote       $08
0008F35B E701                       	dc.b	smpsNoAttack, $01
0008F35D E105                       	smpsAlterNote       $05
0008F35F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F363 E10B                       	smpsAlterNote       $0B
0008F365 E701                       	dc.b	smpsNoAttack, $01
0008F367 E10F                       	smpsAlterNote       $0F
0008F369 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F36D E10C                       	smpsAlterNote       $0C
0008F36F CC0D                       	dc.b	nEb6, $0D
0008F371 E106                       	smpsAlterNote       $06
0008F373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F377 E109                       	smpsAlterNote       $09
0008F379 E701                       	dc.b	smpsNoAttack, $01
0008F37B E10C                       	smpsAlterNote       $0C
0008F37D 8001                       	dc.b	nRst, $01
0008F37F E10A                       	smpsAlterNote       $0A
0008F381 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F38D CB0E                       	dc.b	nD6, $0E
0008F38F E105                       	smpsAlterNote       $05
0008F391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F395 E10B                       	smpsAlterNote       $0B
0008F397 E701                       	dc.b	smpsNoAttack, $01
0008F399 E10E                       	smpsAlterNote       $0E
0008F39B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F39F E108                       	smpsAlterNote       $08
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E104                       	smpsAlterNote       $04
0008F3A5 E701                       	dc.b	smpsNoAttack, $01
0008F3A7 E105                       	smpsAlterNote       $05
0008F3A9 E701                       	dc.b	smpsNoAttack, $01
0008F3AB E10B                       	smpsAlterNote       $0B
0008F3AD E701                       	dc.b	smpsNoAttack, $01
0008F3AF E10F                       	smpsAlterNote       $0F
0008F3B1 E701                       	dc.b	smpsNoAttack, $01
0008F3B3 E10D                       	smpsAlterNote       $0D
0008F3B5 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F3B9 E10C                       	smpsAlterNote       $0C
0008F3BB CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F3BF E10A                       	smpsAlterNote       $0A
0008F3C1 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F3CD CB0D                       	dc.b	nD6, $0D
0008F3CF E108                       	smpsAlterNote       $08
0008F3D1 E701                       	dc.b	smpsNoAttack, $01
0008F3D3 E104                       	smpsAlterNote       $04
0008F3D5 E701                       	dc.b	smpsNoAttack, $01
0008F3D7 E105                       	smpsAlterNote       $05
0008F3D9 E701                       	dc.b	smpsNoAttack, $01
0008F3DB E10B                       	smpsAlterNote       $0B
0008F3DD E701                       	dc.b	smpsNoAttack, $01
0008F3DF E10F                       	smpsAlterNote       $0F
0008F3E1 E701                       	dc.b	smpsNoAttack, $01
0008F3E3 E10B                       	smpsAlterNote       $0B
0008F3E5 E701                       	dc.b	smpsNoAttack, $01
0008F3E7 E108                       	smpsAlterNote       $08
0008F3E9 E701                       	dc.b	smpsNoAttack, $01
0008F3EB E104                       	smpsAlterNote       $04
0008F3ED E701                       	dc.b	smpsNoAttack, $01
0008F3EF E108                       	smpsAlterNote       $08
0008F3F1 E701                       	dc.b	smpsNoAttack, $01
0008F3F3 E10E                       	smpsAlterNote       $0E
0008F3F5 E701                       	dc.b	smpsNoAttack, $01
0008F3F7 E10F                       	smpsAlterNote       $0F
0008F3F9 E701                       	dc.b	smpsNoAttack, $01
0008F3FB E10C                       	smpsAlterNote       $0C
0008F3FD CC0D                       	dc.b	nEb6, $0D
0008F3FF E109                       	smpsAlterNote       $09
0008F401 E701                       	dc.b	smpsNoAttack, $01
0008F403 E105                       	smpsAlterNote       $05
0008F405 E701                       	dc.b	smpsNoAttack, $01
0008F407 E106                       	smpsAlterNote       $06
0008F409 E701                       	dc.b	smpsNoAttack, $01
0008F40B E10C                       	smpsAlterNote       $0C
0008F40D E701                       	dc.b	smpsNoAttack, $01
0008F40F E10A                       	smpsAlterNote       $0A
0008F411 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F41D CB0D                       	dc.b	nD6, $0D
0008F41F E108                       	smpsAlterNote       $08
0008F421 E701                       	dc.b	smpsNoAttack, $01
0008F423 E104                       	smpsAlterNote       $04
0008F425 E701                       	dc.b	smpsNoAttack, $01
0008F427 E108                       	smpsAlterNote       $08
0008F429 E701                       	dc.b	smpsNoAttack, $01
0008F42B E10B                       	smpsAlterNote       $0B
0008F42D E701                       	dc.b	smpsNoAttack, $01
0008F42F E10F                       	smpsAlterNote       $0F
0008F431 E701                       	dc.b	smpsNoAttack, $01
0008F433 E10B                       	smpsAlterNote       $0B
0008F435 E701                       	dc.b	smpsNoAttack, $01
0008F437 E105                       	smpsAlterNote       $05
0008F439 E701                       	dc.b	smpsNoAttack, $01
0008F43B E104                       	smpsAlterNote       $04
0008F43D E701                       	dc.b	smpsNoAttack, $01
0008F43F E108                       	smpsAlterNote       $08
0008F441 E701                       	dc.b	smpsNoAttack, $01
0008F443 E10E                       	smpsAlterNote       $0E
0008F445 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F449 E10B                       	smpsAlterNote       $0B
0008F44B E701                       	dc.b	smpsNoAttack, $01
0008F44D E105                       	smpsAlterNote       $05
0008F44F E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008F457 03                         	dc.b	$03
0008F458 E601                       	smpsAlterVol        $01
0008F45A F6F1 D1                    	smpsJump            music84_Jump01
0008F45D                            
0008F45D                            ; FM5 Data
0008F45D                            music84_FM5:
0008F45F E080                       	smpsPan             panLeft, $00
0008F461 8003                       	dc.b	nRst, $03
0008F463 E10D                       	smpsAlterNote       $0D
0008F465 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008F469 E10C                       	smpsAlterNote       $0C
0008F46B C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008F46F E10F                       	smpsAlterNote       $0F
0008F471 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008F477 E6FE                       	smpsAlterVol        $FE
0008F479 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008F47F E10D                       	smpsAlterNote       $0D
0008F481 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008F487 E10C                       	smpsAlterNote       $0C
0008F489 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008F48D E10A                       	smpsAlterNote       $0A
0008F48F BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008F495 03                         	dc.b	$03
0008F496                            
0008F496                            music84_Jump00:
0008F496 8004                       	dc.b	nRst, $04
0008F498 E602                       	smpsAlterVol        $02
0008F49A E10D                       	smpsAlterNote       $0D
0008F49C B60D                       	dc.b	nF4, $0D
0008F49E E107                       	smpsAlterNote       $07
0008F4A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4A4 E10A                       	smpsAlterNote       $0A
0008F4A6 E701                       	dc.b	smpsNoAttack, $01
0008F4A8 E110                       	smpsAlterNote       $10
0008F4AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4AE E10A                       	smpsAlterNote       $0A
0008F4B0 E701                       	dc.b	smpsNoAttack, $01
0008F4B2 E107                       	smpsAlterNote       $07
0008F4B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4B8 E10D                       	smpsAlterNote       $0D
0008F4BA E701                       	dc.b	smpsNoAttack, $01
0008F4BC E111                       	smpsAlterNote       $11
0008F4BE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F4C2 E10D                       	smpsAlterNote       $0D
0008F4C4 B80D                       	dc.b	nG4, $0D
0008F4C6 E107                       	smpsAlterNote       $07
0008F4C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4CC E10A                       	smpsAlterNote       $0A
0008F4CE E701                       	dc.b	smpsNoAttack, $01
0008F4D0 E110                       	smpsAlterNote       $10
0008F4D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4D6 E10A                       	smpsAlterNote       $0A
0008F4D8 E701                       	dc.b	smpsNoAttack, $01
0008F4DA E107                       	smpsAlterNote       $07
0008F4DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4E0 E10D                       	smpsAlterNote       $0D
0008F4E2 E701                       	dc.b	smpsNoAttack, $01
0008F4E4 E111                       	smpsAlterNote       $11
0008F4E6 E701                       	dc.b	smpsNoAttack, $01
0008F4E8 E110                       	smpsAlterNote       $10
0008F4EA E701                       	dc.b	smpsNoAttack, $01
0008F4EC E10A                       	smpsAlterNote       $0A
0008F4EE E701                       	dc.b	smpsNoAttack, $01
0008F4F0 E106                       	smpsAlterNote       $06
0008F4F2 E701                       	dc.b	smpsNoAttack, $01
0008F4F4 E10A                       	smpsAlterNote       $0A
0008F4F6 E701                       	dc.b	smpsNoAttack, $01
0008F4F8 E10D                       	smpsAlterNote       $0D
0008F4FA E701                       	dc.b	smpsNoAttack, $01
0008F4FC E111                       	smpsAlterNote       $11
0008F4FE E701                       	dc.b	smpsNoAttack, $01
0008F500 E10D                       	smpsAlterNote       $0D
0008F502 E701                       	dc.b	smpsNoAttack, $01
0008F504 E10F                       	smpsAlterNote       $0F
0008F506 BA0E                       	dc.b	nA4, $0E
0008F508 E109                       	smpsAlterNote       $09
0008F50A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F50E E10F                       	smpsAlterNote       $0F
0008F510 E701                       	dc.b	smpsNoAttack, $01
0008F512 E112                       	smpsAlterNote       $12
0008F514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F518 E10C                       	smpsAlterNote       $0C
0008F51A E701                       	dc.b	smpsNoAttack, $01
0008F51C E108                       	smpsAlterNote       $08
0008F51E E701                       	dc.b	smpsNoAttack, $01
0008F520 E109                       	smpsAlterNote       $09
0008F522 E701                       	dc.b	smpsNoAttack, $01
0008F524 E10F                       	smpsAlterNote       $0F
0008F526 E701                       	dc.b	smpsNoAttack, $01
0008F528 E113                       	smpsAlterNote       $13
0008F52A E701                       	dc.b	smpsNoAttack, $01
0008F52C E10F                       	smpsAlterNote       $0F
0008F52E E701                       	dc.b	smpsNoAttack, $01
0008F530 E109                       	smpsAlterNote       $09
0008F532 E701                       	dc.b	smpsNoAttack, $01
0008F534 E108                       	smpsAlterNote       $08
0008F536 E701                       	dc.b	smpsNoAttack, $01
0008F538 E10C                       	smpsAlterNote       $0C
0008F53A E701                       	dc.b	smpsNoAttack, $01
0008F53C E112                       	smpsAlterNote       $12
0008F53E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F542 E10F                       	smpsAlterNote       $0F
0008F544 E701                       	dc.b	smpsNoAttack, $01
0008F546 E109                       	smpsAlterNote       $09
0008F548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F54C E10F                       	smpsAlterNote       $0F
0008F54E E701                       	dc.b	smpsNoAttack, $01
0008F550 E112                       	smpsAlterNote       $12
0008F552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F556 E10C                       	smpsAlterNote       $0C
0008F558 E701                       	dc.b	smpsNoAttack, $01
0008F55A E108                       	smpsAlterNote       $08
0008F55C E701                       	dc.b	smpsNoAttack, $01
0008F55E E109                       	smpsAlterNote       $09
0008F560 E701                       	dc.b	smpsNoAttack, $01
0008F562 E10F                       	smpsAlterNote       $0F
0008F564 E701                       	dc.b	smpsNoAttack, $01
0008F566 E113                       	smpsAlterNote       $13
0008F568 E701                       	dc.b	smpsNoAttack, $01
0008F56A E10F                       	smpsAlterNote       $0F
0008F56C E701                       	dc.b	smpsNoAttack, $01
0008F56E E10C                       	smpsAlterNote       $0C
0008F570 E701                       	dc.b	smpsNoAttack, $01
0008F572 E108                       	smpsAlterNote       $08
0008F574 E701                       	dc.b	smpsNoAttack, $01
0008F576 E109                       	smpsAlterNote       $09
0008F578 8001                       	dc.b	nRst, $01
0008F57A E10C                       	smpsAlterNote       $0C
0008F57C B50A                       	dc.b	nE4, $0A
0008F57E E10D                       	smpsAlterNote       $0D
0008F580 B60D                       	dc.b	nF4, $0D
0008F582 E10A                       	smpsAlterNote       $0A
0008F584 E701                       	dc.b	smpsNoAttack, $01
0008F586 E106                       	smpsAlterNote       $06
0008F588 E701                       	dc.b	smpsNoAttack, $01
0008F58A E107                       	smpsAlterNote       $07
0008F58C E701                       	dc.b	smpsNoAttack, $01
0008F58E E10D                       	smpsAlterNote       $0D
0008F590 E701                       	dc.b	smpsNoAttack, $01
0008F592 E111                       	smpsAlterNote       $11
0008F594 E701                       	dc.b	smpsNoAttack, $01
0008F596 E10D                       	smpsAlterNote       $0D
0008F598 E701                       	dc.b	smpsNoAttack, $01
0008F59A E10A                       	smpsAlterNote       $0A
0008F59C E701                       	dc.b	smpsNoAttack, $01
0008F59E E106                       	smpsAlterNote       $06
0008F5A0 E701                       	dc.b	smpsNoAttack, $01
0008F5A2 E10A                       	smpsAlterNote       $0A
0008F5A4 E701                       	dc.b	smpsNoAttack, $01
0008F5A6 E110                       	smpsAlterNote       $10
0008F5A8 E701                       	dc.b	smpsNoAttack, $01
0008F5AA E111                       	smpsAlterNote       $11
0008F5AC E701                       	dc.b	smpsNoAttack, $01
0008F5AE E10D                       	smpsAlterNote       $0D
0008F5B0 B80D                       	dc.b	nG4, $0D
0008F5B2 E10A                       	smpsAlterNote       $0A
0008F5B4 E701                       	dc.b	smpsNoAttack, $01
0008F5B6 E106                       	smpsAlterNote       $06
0008F5B8 E701                       	dc.b	smpsNoAttack, $01
0008F5BA E107                       	smpsAlterNote       $07
0008F5BC E701                       	dc.b	smpsNoAttack, $01
0008F5BE E10D                       	smpsAlterNote       $0D
0008F5C0 E701                       	dc.b	smpsNoAttack, $01
0008F5C2 E111                       	smpsAlterNote       $11
0008F5C4 E701                       	dc.b	smpsNoAttack, $01
0008F5C6 E10D                       	smpsAlterNote       $0D
0008F5C8 E701                       	dc.b	smpsNoAttack, $01
0008F5CA E10A                       	smpsAlterNote       $0A
0008F5CC E701                       	dc.b	smpsNoAttack, $01
0008F5CE E106                       	smpsAlterNote       $06
0008F5D0 E701                       	dc.b	smpsNoAttack, $01
0008F5D2 E10A                       	smpsAlterNote       $0A
0008F5D4 E701                       	dc.b	smpsNoAttack, $01
0008F5D6 E110                       	smpsAlterNote       $10
0008F5D8 E701                       	dc.b	smpsNoAttack, $01
0008F5DA E111                       	smpsAlterNote       $11
0008F5DC E701                       	dc.b	smpsNoAttack, $01
0008F5DE E10D                       	smpsAlterNote       $0D
0008F5E0 E701                       	dc.b	smpsNoAttack, $01
0008F5E2 E107                       	smpsAlterNote       $07
0008F5E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5E8 E10A                       	smpsAlterNote       $0A
0008F5EA E701                       	dc.b	smpsNoAttack, $01
0008F5EC E110                       	smpsAlterNote       $10
0008F5EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5F2 E10D                       	smpsAlterNote       $0D
0008F5F4 8001                       	dc.b	nRst, $01
0008F5F6 E10F                       	smpsAlterNote       $0F
0008F5F8 BA0D                       	dc.b	nA4, $0D
0008F5FA E10C                       	smpsAlterNote       $0C
0008F5FC E701                       	dc.b	smpsNoAttack, $01
0008F5FE E108                       	smpsAlterNote       $08
0008F600 E701                       	dc.b	smpsNoAttack, $01
0008F602 E10C                       	smpsAlterNote       $0C
0008F604 E701                       	dc.b	smpsNoAttack, $01
0008F606 E112                       	smpsAlterNote       $12
0008F608 E701                       	dc.b	smpsNoAttack, $01
0008F60A E113                       	smpsAlterNote       $13
0008F60C E701                       	dc.b	smpsNoAttack, $01
0008F60E E10F                       	smpsAlterNote       $0F
0008F610 E701                       	dc.b	smpsNoAttack, $01
0008F612 E109                       	smpsAlterNote       $09
0008F614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F618 E10C                       	smpsAlterNote       $0C
0008F61A E701                       	dc.b	smpsNoAttack, $01
0008F61C E112                       	smpsAlterNote       $12
0008F61E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F622 E10C                       	smpsAlterNote       $0C
0008F624 E701                       	dc.b	smpsNoAttack, $01
0008F626 E109                       	smpsAlterNote       $09
0008F628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F62C E10F                       	smpsAlterNote       $0F
0008F62E E701                       	dc.b	smpsNoAttack, $01
0008F630 E113                       	smpsAlterNote       $13
0008F632 E701                       	dc.b	smpsNoAttack, $01
0008F634 E112                       	smpsAlterNote       $12
0008F636 E701                       	dc.b	smpsNoAttack, $01
0008F638 E10C                       	smpsAlterNote       $0C
0008F63A E701                       	dc.b	smpsNoAttack, $01
0008F63C E108                       	smpsAlterNote       $08
0008F63E E701                       	dc.b	smpsNoAttack, $01
0008F640 E10C                       	smpsAlterNote       $0C
0008F642 E701                       	dc.b	smpsNoAttack, $01
0008F644 E10F                       	smpsAlterNote       $0F
0008F646 E701                       	dc.b	smpsNoAttack, $01
0008F648 E113                       	smpsAlterNote       $13
0008F64A E701                       	dc.b	smpsNoAttack, $01
0008F64C E10F                       	smpsAlterNote       $0F
0008F64E E701                       	dc.b	smpsNoAttack, $01
0008F650 E109                       	smpsAlterNote       $09
0008F652 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F656 E10D                       	smpsAlterNote       $0D
0008F658 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008F65C E10C                       	smpsAlterNote       $0C
0008F65E B506 8001                  	dc.b	nE4, $06, nRst, $01
0008F662 E10B                       	smpsAlterNote       $0B
0008F664 B30D                       	dc.b	nD4, $0D
0008F666 E10C                       	smpsAlterNote       $0C
0008F668 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008F66C E10D                       	smpsAlterNote       $0D
0008F66E B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008F676 E109                       	smpsAlterNote       $09
0008F678 E701                       	dc.b	smpsNoAttack, $01
0008F67A E108                       	smpsAlterNote       $08
0008F67C E701                       	dc.b	smpsNoAttack, $01
0008F67E E10C                       	smpsAlterNote       $0C
0008F680 E701                       	dc.b	smpsNoAttack, $01
0008F682 E112                       	smpsAlterNote       $12
0008F684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F688 E10F                       	smpsAlterNote       $0F
0008F68A E701                       	dc.b	smpsNoAttack, $01
0008F68C E109                       	smpsAlterNote       $09
0008F68E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F692 E10F                       	smpsAlterNote       $0F
0008F694 E701                       	dc.b	smpsNoAttack, $01
0008F696 E112                       	smpsAlterNote       $12
0008F698 E701                       	dc.b	smpsNoAttack, $01
0008F69A E113                       	smpsAlterNote       $13
0008F69C 8001                       	dc.b	nRst, $01
0008F69E E10D                       	smpsAlterNote       $0D
0008F6A0 C20D                       	dc.b	nF5, $0D
0008F6A2 E107                       	smpsAlterNote       $07
0008F6A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6A8 E10A                       	smpsAlterNote       $0A
0008F6AA E701                       	dc.b	smpsNoAttack, $01
0008F6AC E110                       	smpsAlterNote       $10
0008F6AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6B2 E10A                       	smpsAlterNote       $0A
0008F6B4 E701                       	dc.b	smpsNoAttack, $01
0008F6B6 E107                       	smpsAlterNote       $07
0008F6B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6BC E10D                       	smpsAlterNote       $0D
0008F6BE E701                       	dc.b	smpsNoAttack, $01
0008F6C0 E111                       	smpsAlterNote       $11
0008F6C2 E701                       	dc.b	smpsNoAttack, $01
0008F6C4 E110                       	smpsAlterNote       $10
0008F6C6 E701                       	dc.b	smpsNoAttack, $01
0008F6C8 E10A                       	smpsAlterNote       $0A
0008F6CA E701                       	dc.b	smpsNoAttack, $01
0008F6CC E106                       	smpsAlterNote       $06
0008F6CE E701                       	dc.b	smpsNoAttack, $01
0008F6D0 E10A                       	smpsAlterNote       $0A
0008F6D2 E701                       	dc.b	smpsNoAttack, $01
0008F6D4 E10D                       	smpsAlterNote       $0D
0008F6D6 E701                       	dc.b	smpsNoAttack, $01
0008F6D8 E111                       	smpsAlterNote       $11
0008F6DA E701                       	dc.b	smpsNoAttack, $01
0008F6DC E10D                       	smpsAlterNote       $0D
0008F6DE E701                       	dc.b	smpsNoAttack, $01
0008F6E0 E107                       	smpsAlterNote       $07
0008F6E2 E701                       	dc.b	smpsNoAttack, $01
0008F6E4 E106                       	smpsAlterNote       $06
0008F6E6 E701                       	dc.b	smpsNoAttack, $01
0008F6E8 E10A                       	smpsAlterNote       $0A
0008F6EA E701                       	dc.b	smpsNoAttack, $01
0008F6EC E110                       	smpsAlterNote       $10
0008F6EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6F2 E10D                       	smpsAlterNote       $0D
0008F6F4 E701                       	dc.b	smpsNoAttack, $01
0008F6F6 E107                       	smpsAlterNote       $07
0008F6F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6FC E10D                       	smpsAlterNote       $0D
0008F6FE E701                       	dc.b	smpsNoAttack, $01
0008F700 E110                       	smpsAlterNote       $10
0008F702 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F706 E10A                       	smpsAlterNote       $0A
0008F708 E701                       	dc.b	smpsNoAttack, $01
0008F70A E106                       	smpsAlterNote       $06
0008F70C E701                       	dc.b	smpsNoAttack, $01
0008F70E E107                       	smpsAlterNote       $07
0008F710 E701                       	dc.b	smpsNoAttack, $01
0008F712 E10D                       	smpsAlterNote       $0D
0008F714 E701                       	dc.b	smpsNoAttack, $01
0008F716 E111                       	smpsAlterNote       $11
0008F718 E701                       	dc.b	smpsNoAttack, $01
0008F71A E10D                       	smpsAlterNote       $0D
0008F71C E701                       	dc.b	smpsNoAttack, $01
0008F71E E10A                       	smpsAlterNote       $0A
0008F720 E701                       	dc.b	smpsNoAttack, $01
0008F722 E106                       	smpsAlterNote       $06
0008F724 E701                       	dc.b	smpsNoAttack, $01
0008F726 E10A                       	smpsAlterNote       $0A
0008F728 E701                       	dc.b	smpsNoAttack, $01
0008F72A E110                       	smpsAlterNote       $10
0008F72C E701                       	dc.b	smpsNoAttack, $01
0008F72E E111                       	smpsAlterNote       $11
0008F730 E701                       	dc.b	smpsNoAttack, $01
0008F732 E10D                       	smpsAlterNote       $0D
0008F734 E701                       	dc.b	smpsNoAttack, $01
0008F736 E107                       	smpsAlterNote       $07
0008F738 E701                       	dc.b	smpsNoAttack, $01
0008F73A E10D                       	smpsAlterNote       $0D
0008F73C C207                       	dc.b	nF5, $07
0008F73E E10C                       	smpsAlterNote       $0C
0008F740 C10D                       	dc.b	nE5, $0D
0008F742 E109                       	smpsAlterNote       $09
0008F744 E701                       	dc.b	smpsNoAttack, $01
0008F746 E106                       	smpsAlterNote       $06
0008F748 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F74C E10C                       	smpsAlterNote       $0C
0008F74E E701                       	dc.b	smpsNoAttack, $01
0008F750 E110                       	smpsAlterNote       $10
0008F752 E701                       	dc.b	smpsNoAttack, $01
0008F754 E10F                       	smpsAlterNote       $0F
0008F756 E701                       	dc.b	smpsNoAttack, $01
0008F758 E109                       	smpsAlterNote       $09
0008F75A E701                       	dc.b	smpsNoAttack, $01
0008F75C E105                       	smpsAlterNote       $05
0008F75E E701                       	dc.b	smpsNoAttack, $01
0008F760 E109                       	smpsAlterNote       $09
0008F762 E701                       	dc.b	smpsNoAttack, $01
0008F764 E10C                       	smpsAlterNote       $0C
0008F766 E701                       	dc.b	smpsNoAttack, $01
0008F768 E110                       	smpsAlterNote       $10
0008F76A E701                       	dc.b	smpsNoAttack, $01
0008F76C E10B                       	smpsAlterNote       $0B
0008F76E BF0D                       	dc.b	nD5, $0D
0008F770 E108                       	smpsAlterNote       $08
0008F772 E701                       	dc.b	smpsNoAttack, $01
0008F774 E105                       	smpsAlterNote       $05
0008F776 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F77A E10B                       	smpsAlterNote       $0B
0008F77C E701                       	dc.b	smpsNoAttack, $01
0008F77E E10F                       	smpsAlterNote       $0F
0008F780 E701                       	dc.b	smpsNoAttack, $01
0008F782 E10E                       	smpsAlterNote       $0E
0008F784 E701                       	dc.b	smpsNoAttack, $01
0008F786 E108                       	smpsAlterNote       $08
0008F788 E701                       	dc.b	smpsNoAttack, $01
0008F78A E104                       	smpsAlterNote       $04
0008F78C E701                       	dc.b	smpsNoAttack, $01
0008F78E E108                       	smpsAlterNote       $08
0008F790 E701                       	dc.b	smpsNoAttack, $01
0008F792 E10E                       	smpsAlterNote       $0E
0008F794 E701                       	dc.b	smpsNoAttack, $01
0008F796 E10F                       	smpsAlterNote       $0F
0008F798 E701                       	dc.b	smpsNoAttack, $01
0008F79A E10B                       	smpsAlterNote       $0B
0008F79C E701                       	dc.b	smpsNoAttack, $01
0008F79E E105                       	smpsAlterNote       $05
0008F7A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7A4 E108                       	smpsAlterNote       $08
0008F7A6 E701                       	dc.b	smpsNoAttack, $01
0008F7A8 E10E                       	smpsAlterNote       $0E
0008F7AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7AE E108                       	smpsAlterNote       $08
0008F7B0 E701                       	dc.b	smpsNoAttack, $01
0008F7B2 E105                       	smpsAlterNote       $05
0008F7B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7B8 E10B                       	smpsAlterNote       $0B
0008F7BA E701                       	dc.b	smpsNoAttack, $01
0008F7BC E10F                       	smpsAlterNote       $0F
0008F7BE E701                       	dc.b	smpsNoAttack, $01
0008F7C0 E10E                       	smpsAlterNote       $0E
0008F7C2 E701                       	dc.b	smpsNoAttack, $01
0008F7C4 E108                       	smpsAlterNote       $08
0008F7C6 E701                       	dc.b	smpsNoAttack, $01
0008F7C8 E104                       	smpsAlterNote       $04
0008F7CA E701                       	dc.b	smpsNoAttack, $01
0008F7CC E108                       	smpsAlterNote       $08
0008F7CE E701                       	dc.b	smpsNoAttack, $01
0008F7D0 E10B                       	smpsAlterNote       $0B
0008F7D2 E701                       	dc.b	smpsNoAttack, $01
0008F7D4 E10F                       	smpsAlterNote       $0F
0008F7D6 E701                       	dc.b	smpsNoAttack, $01
0008F7D8 E10B                       	smpsAlterNote       $0B
0008F7DA E701                       	dc.b	smpsNoAttack, $01
0008F7DC E105                       	smpsAlterNote       $05
0008F7DE E701                       	dc.b	smpsNoAttack, $01
0008F7E0 E104                       	smpsAlterNote       $04
0008F7E2 E701                       	dc.b	smpsNoAttack, $01
0008F7E4 E108                       	smpsAlterNote       $08
0008F7E6 E701                       	dc.b	smpsNoAttack, $01
0008F7E8 E10E                       	smpsAlterNote       $0E
0008F7EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7EE E10B                       	smpsAlterNote       $0B
0008F7F0 E701                       	dc.b	smpsNoAttack, $01
0008F7F2 E105                       	smpsAlterNote       $05
0008F7F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7F8 E10B                       	smpsAlterNote       $0B
0008F7FA E701                       	dc.b	smpsNoAttack, $01
0008F7FC E10E                       	smpsAlterNote       $0E
0008F7FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F802 E108                       	smpsAlterNote       $08
0008F804 E701                       	dc.b	smpsNoAttack, $01
0008F806 E105                       	smpsAlterNote       $05
0008F808 8001                       	dc.b	nRst, $01
0008F80C E601                       	smpsAlterVol        $01
0008F80E E10B                       	smpsAlterNote       $0B
0008F810 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008F81C 8004                       	dc.b	nRst, $04
0008F820 E6FF                       	smpsAlterVol        $FF
0008F822 E10D                       	smpsAlterNote       $0D
0008F824 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008F82C E10C                       	smpsAlterNote       $0C
0008F82E E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008F833 E10D                       	smpsAlterNote       $0D
0008F835 B60D                       	dc.b	nF4, $0D
0008F837 E10A                       	smpsAlterNote       $0A
0008F839 E701                       	dc.b	smpsNoAttack, $01
0008F83B E106                       	smpsAlterNote       $06
0008F83D E701                       	dc.b	smpsNoAttack, $01
0008F83F E10A                       	smpsAlterNote       $0A
0008F841 E701                       	dc.b	smpsNoAttack, $01
0008F843 E110                       	smpsAlterNote       $10
0008F845 E701                       	dc.b	smpsNoAttack, $01
0008F847 E111                       	smpsAlterNote       $11
0008F849 E701                       	dc.b	smpsNoAttack, $01
0008F84B E10D                       	smpsAlterNote       $0D
0008F84D E701                       	dc.b	smpsNoAttack, $01
0008F84F E107                       	smpsAlterNote       $07
0008F851 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F855 E10A                       	smpsAlterNote       $0A
0008F857 E701                       	dc.b	smpsNoAttack, $01
0008F859 E110                       	smpsAlterNote       $10
0008F85B E701                       	dc.b	smpsNoAttack, $01
0008F85D E111                       	smpsAlterNote       $11
0008F85F 8001                       	dc.b	nRst, $01
0008F861 E10D                       	smpsAlterNote       $0D
0008F863 B80D                       	dc.b	nG4, $0D
0008F865 E10A                       	smpsAlterNote       $0A
0008F867 E701                       	dc.b	smpsNoAttack, $01
0008F869 E106                       	smpsAlterNote       $06
0008F86B E701                       	dc.b	smpsNoAttack, $01
0008F86D E10A                       	smpsAlterNote       $0A
0008F86F E701                       	dc.b	smpsNoAttack, $01
0008F871 E110                       	smpsAlterNote       $10
0008F873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F877 E10D                       	smpsAlterNote       $0D
0008F879 E701                       	dc.b	smpsNoAttack, $01
0008F87B E107                       	smpsAlterNote       $07
0008F87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F881 E10D                       	smpsAlterNote       $0D
0008F883 E701                       	dc.b	smpsNoAttack, $01
0008F885 E110                       	smpsAlterNote       $10
0008F887 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F88B E10A                       	smpsAlterNote       $0A
0008F88D E701                       	dc.b	smpsNoAttack, $01
0008F88F E106                       	smpsAlterNote       $06
0008F891 E701                       	dc.b	smpsNoAttack, $01
0008F893 E107                       	smpsAlterNote       $07
0008F895 E701                       	dc.b	smpsNoAttack, $01
0008F897 E10D                       	smpsAlterNote       $0D
0008F899 E701                       	dc.b	smpsNoAttack, $01
0008F89B E111                       	smpsAlterNote       $11
0008F89D E701                       	dc.b	smpsNoAttack, $01
0008F89F E10D                       	smpsAlterNote       $0D
0008F8A1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F8A5 E10F                       	smpsAlterNote       $0F
0008F8A7 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008F8AB E110                       	smpsAlterNote       $10
0008F8AD BB03                       	dc.b	nBb4, $03
0008F8AF E10F                       	smpsAlterNote       $0F
0008F8B1 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008F8B7 E110                       	smpsAlterNote       $10
0008F8B9 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008F8BD E10F                       	smpsAlterNote       $0F
0008F8BF C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008F8C5 E110                       	smpsAlterNote       $10
0008F8C7 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008F8CB E10F                       	smpsAlterNote       $0F
0008F8CD D20D                       	dc.b	nA6, $0D
0008F8CF E10C                       	smpsAlterNote       $0C
0008F8D1 E701                       	dc.b	smpsNoAttack, $01
0008F8D3 E108                       	smpsAlterNote       $08
0008F8D5 E701                       	dc.b	smpsNoAttack, $01
0008F8D7 E10C                       	smpsAlterNote       $0C
0008F8D9 E701                       	dc.b	smpsNoAttack, $01
0008F8DB E10F                       	smpsAlterNote       $0F
0008F8DD E701                       	dc.b	smpsNoAttack, $01
0008F8DF E113                       	smpsAlterNote       $13
0008F8E1 E701                       	dc.b	smpsNoAttack, $01
0008F8E3 E10F                       	smpsAlterNote       $0F
0008F8E5 E701                       	dc.b	smpsNoAttack, $01
0008F8E7 E109                       	smpsAlterNote       $09
0008F8E9 E701                       	dc.b	smpsNoAttack, $01
0008F8EB E108                       	smpsAlterNote       $08
0008F8ED E701                       	dc.b	smpsNoAttack, $01
0008F8EF E10C                       	smpsAlterNote       $0C
0008F8F1 E701                       	dc.b	smpsNoAttack, $01
0008F8F3 E112                       	smpsAlterNote       $12
0008F8F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8F9 E10F                       	smpsAlterNote       $0F
0008F8FB E701                       	dc.b	smpsNoAttack, $01
0008F8FD E109                       	smpsAlterNote       $09
0008F8FF E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008F905 E10D                       	smpsAlterNote       $0D
0008F907 CE07                       	dc.b	nF6, $07
0008F909 E10C                       	smpsAlterNote       $0C
0008F90B CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008F90F E10D                       	smpsAlterNote       $0D
0008F911 CE03                       	dc.b	nF6, $03
0008F913 E10C                       	smpsAlterNote       $0C
0008F915 CC0D                       	dc.b	nEb6, $0D
0008F917 E109                       	smpsAlterNote       $09
0008F919 E701                       	dc.b	smpsNoAttack, $01
0008F91B E106                       	smpsAlterNote       $06
0008F91D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F921 E10C                       	smpsAlterNote       $0C
0008F923 E701                       	dc.b	smpsNoAttack, $01
0008F925 E110                       	smpsAlterNote       $10
0008F927 E701                       	dc.b	smpsNoAttack, $01
0008F929 E10F                       	smpsAlterNote       $0F
0008F92B E701                       	dc.b	smpsNoAttack, $01
0008F92D E109                       	smpsAlterNote       $09
0008F92F E701                       	dc.b	smpsNoAttack, $01
0008F931 E105                       	smpsAlterNote       $05
0008F933 E701                       	dc.b	smpsNoAttack, $01
0008F935 E109                       	smpsAlterNote       $09
0008F937 E701                       	dc.b	smpsNoAttack, $01
0008F939 E10C                       	smpsAlterNote       $0C
0008F93B E701                       	dc.b	smpsNoAttack, $01
0008F93D E110                       	smpsAlterNote       $10
0008F93F E701                       	dc.b	smpsNoAttack, $01
0008F941 E10C                       	smpsAlterNote       $0C
0008F943 E701                       	dc.b	smpsNoAttack, $01
0008F945 E106                       	smpsAlterNote       $06
0008F947 E701                       	dc.b	smpsNoAttack, $01
0008F949 E105                       	smpsAlterNote       $05
0008F94B E701                       	dc.b	smpsNoAttack, $01
0008F94D E109                       	smpsAlterNote       $09
0008F94F E701                       	dc.b	smpsNoAttack, $01
0008F951 E10F                       	smpsAlterNote       $0F
0008F953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F957 E10C                       	smpsAlterNote       $0C
0008F959 E701                       	dc.b	smpsNoAttack, $01
0008F95B E10B                       	smpsAlterNote       $0B
0008F95D CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008F967 E10F                       	smpsAlterNote       $0F
0008F969 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008F973 E10D                       	smpsAlterNote       $0D
0008F975 C203                       	dc.b	nF5, $03
0008F977 E10C                       	smpsAlterNote       $0C
0008F979 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F97D E10D                       	smpsAlterNote       $0D
0008F97F C20D                       	dc.b	nF5, $0D
0008F981 E10C                       	smpsAlterNote       $0C
0008F983 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008F987 E10B                       	smpsAlterNote       $0B
0008F989 BF0D                       	dc.b	nD5, $0D
0008F98B E108                       	smpsAlterNote       $08
0008F98D E701                       	dc.b	smpsNoAttack, $01
0008F98F E104                       	smpsAlterNote       $04
0008F991 E701                       	dc.b	smpsNoAttack, $01
0008F993 E108                       	smpsAlterNote       $08
0008F995 E701                       	dc.b	smpsNoAttack, $01
0008F997 E10E                       	smpsAlterNote       $0E
0008F999 E701                       	dc.b	smpsNoAttack, $01
0008F99B E10F                       	smpsAlterNote       $0F
0008F99D E701                       	dc.b	smpsNoAttack, $01
0008F99F E10B                       	smpsAlterNote       $0B
0008F9A1 E701                       	dc.b	smpsNoAttack, $01
0008F9A3 E105                       	smpsAlterNote       $05
0008F9A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9A9 E108                       	smpsAlterNote       $08
0008F9AB E701                       	dc.b	smpsNoAttack, $01
0008F9AD E10E                       	smpsAlterNote       $0E
0008F9AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9B3 E108                       	smpsAlterNote       $08
0008F9B5 E701                       	dc.b	smpsNoAttack, $01
0008F9B7 E105                       	smpsAlterNote       $05
0008F9B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9BD E10B                       	smpsAlterNote       $0B
0008F9BF E701                       	dc.b	smpsNoAttack, $01
0008F9C1 E10F                       	smpsAlterNote       $0F
0008F9C3 E701                       	dc.b	smpsNoAttack, $01
0008F9C5 E10E                       	smpsAlterNote       $0E
0008F9C7 E701                       	dc.b	smpsNoAttack, $01
0008F9C9 E108                       	smpsAlterNote       $08
0008F9CB E701                       	dc.b	smpsNoAttack, $01
0008F9CD E104                       	smpsAlterNote       $04
0008F9CF E701                       	dc.b	smpsNoAttack, $01
0008F9D1 E108                       	smpsAlterNote       $08
0008F9D3 E701                       	dc.b	smpsNoAttack, $01
0008F9D5 E10B                       	smpsAlterNote       $0B
0008F9D7 E701                       	dc.b	smpsNoAttack, $01
0008F9D9 E10F                       	smpsAlterNote       $0F
0008F9DB E701                       	dc.b	smpsNoAttack, $01
0008F9DD E10B                       	smpsAlterNote       $0B
0008F9DF E701                       	dc.b	smpsNoAttack, $01
0008F9E1 E105                       	smpsAlterNote       $05
0008F9E3 E701                       	dc.b	smpsNoAttack, $01
0008F9E5 E104                       	smpsAlterNote       $04
0008F9E7 E701                       	dc.b	smpsNoAttack, $01
0008F9E9 E108                       	smpsAlterNote       $08
0008F9EB E701                       	dc.b	smpsNoAttack, $01
0008F9ED E10E                       	smpsAlterNote       $0E
0008F9EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9F3 E10B                       	smpsAlterNote       $0B
0008F9F5 E701                       	dc.b	smpsNoAttack, $01
0008F9F7 E105                       	smpsAlterNote       $05
0008F9F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9FD E10B                       	smpsAlterNote       $0B
0008F9FF E701                       	dc.b	smpsNoAttack, $01
0008FA01 E10E                       	smpsAlterNote       $0E
0008FA03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA07 E108                       	smpsAlterNote       $08
0008FA09 E701                       	dc.b	smpsNoAttack, $01
0008FA0B E104                       	smpsAlterNote       $04
0008FA0D E701                       	dc.b	smpsNoAttack, $01
0008FA0F E105                       	smpsAlterNote       $05
0008FA11 E701                       	dc.b	smpsNoAttack, $01
0008FA13 E10B                       	smpsAlterNote       $0B
0008FA15 E701                       	dc.b	smpsNoAttack, $01
0008FA17 E10F                       	smpsAlterNote       $0F
0008FA19 E701                       	dc.b	smpsNoAttack, $01
0008FA1B E10B                       	smpsAlterNote       $0B
0008FA1D E701                       	dc.b	smpsNoAttack, $01
0008FA1F E108                       	smpsAlterNote       $08
0008FA21 E701                       	dc.b	smpsNoAttack, $01
0008FA23 E104                       	smpsAlterNote       $04
0008FA25 E701                       	dc.b	smpsNoAttack, $01
0008FA27 E108                       	smpsAlterNote       $08
0008FA29 E701                       	dc.b	smpsNoAttack, $01
0008FA2B E10E                       	smpsAlterNote       $0E
0008FA2D E701                       	dc.b	smpsNoAttack, $01
0008FA2F E10F                       	smpsAlterNote       $0F
0008FA31 E701                       	dc.b	smpsNoAttack, $01
0008FA33 E10B                       	smpsAlterNote       $0B
0008FA35 E701                       	dc.b	smpsNoAttack, $01
0008FA37 E105                       	smpsAlterNote       $05
0008FA39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA3D E108                       	smpsAlterNote       $08
0008FA3F E701                       	dc.b	smpsNoAttack, $01
0008FA41 E10E                       	smpsAlterNote       $0E
0008FA43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA47 E108                       	smpsAlterNote       $08
0008FA49 E701                       	dc.b	smpsNoAttack, $01
0008FA4B E105                       	smpsAlterNote       $05
0008FA4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA51 E10B                       	smpsAlterNote       $0B
0008FA53 E701                       	dc.b	smpsNoAttack, $01
0008FA55 E10F                       	smpsAlterNote       $0F
0008FA57 E701                       	dc.b	smpsNoAttack, $01
0008FA59 E10E                       	smpsAlterNote       $0E
0008FA5B E701                       	dc.b	smpsNoAttack, $01
0008FA5D E108                       	smpsAlterNote       $08
0008FA5F E701                       	dc.b	smpsNoAttack, $01
0008FA61 E104                       	smpsAlterNote       $04
0008FA63 E701                       	dc.b	smpsNoAttack, $01
0008FA65 E108                       	smpsAlterNote       $08
0008FA67 E701                       	dc.b	smpsNoAttack, $01
0008FA69 E10B                       	smpsAlterNote       $0B
0008FA6B E701                       	dc.b	smpsNoAttack, $01
0008FA6D E10F                       	smpsAlterNote       $0F
0008FA6F E701                       	dc.b	smpsNoAttack, $01
0008FA71 E10B                       	smpsAlterNote       $0B
0008FA73 E701                       	dc.b	smpsNoAttack, $01
0008FA75 E105                       	smpsAlterNote       $05
0008FA77 E701                       	dc.b	smpsNoAttack, $01
0008FA79 E104                       	smpsAlterNote       $04
0008FA7B E701                       	dc.b	smpsNoAttack, $01
0008FA7D E105                       	smpsAlterNote       $05
0008FA7F 8001                       	dc.b	nRst, $01
0008FA81 E10D                       	smpsAlterNote       $0D
0008FA83 C20D                       	dc.b	nF5, $0D
0008FA85 E107                       	smpsAlterNote       $07
0008FA87 E701                       	dc.b	smpsNoAttack, $01
0008FA89 E106                       	smpsAlterNote       $06
0008FA8B E701                       	dc.b	smpsNoAttack, $01
0008FA8D E10A                       	smpsAlterNote       $0A
0008FA8F E701                       	dc.b	smpsNoAttack, $01
0008FA91 E110                       	smpsAlterNote       $10
0008FA93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA97 E10D                       	smpsAlterNote       $0D
0008FA99 E701                       	dc.b	smpsNoAttack, $01
0008FA9B E107                       	smpsAlterNote       $07
0008FA9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAA1 E10D                       	smpsAlterNote       $0D
0008FAA3 E701                       	dc.b	smpsNoAttack, $01
0008FAA5 E110                       	smpsAlterNote       $10
0008FAA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAAB E10A                       	smpsAlterNote       $0A
0008FAAD E701                       	dc.b	smpsNoAttack, $01
0008FAAF E106                       	smpsAlterNote       $06
0008FAB1 E701                       	dc.b	smpsNoAttack, $01
0008FAB3 E107                       	smpsAlterNote       $07
0008FAB5 E701                       	dc.b	smpsNoAttack, $01
0008FAB7 E10D                       	smpsAlterNote       $0D
0008FAB9 E701                       	dc.b	smpsNoAttack, $01
0008FABB E111                       	smpsAlterNote       $11
0008FABD E701                       	dc.b	smpsNoAttack, $01
0008FABF E10D                       	smpsAlterNote       $0D
0008FAC1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FAC5 E10C                       	smpsAlterNote       $0C
0008FAC7 C10D                       	dc.b	nE5, $0D
0008FAC9 E10D                       	smpsAlterNote       $0D
0008FACB C20A                       	dc.b	nF5, $0A
0008FACD E10C                       	smpsAlterNote       $0C
0008FACF C10E                       	dc.b	nE5, $0E
0008FAD1 E106                       	smpsAlterNote       $06
0008FAD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAD7 E10C                       	smpsAlterNote       $0C
0008FAD9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FADD E10B                       	smpsAlterNote       $0B
0008FADF BF0D                       	dc.b	nD5, $0D
0008FAE1 E10C                       	smpsAlterNote       $0C
0008FAE3 C107                       	dc.b	nE5, $07
0008FAE5 E10D                       	smpsAlterNote       $0D
0008FAE7 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008FAF1 E110                       	smpsAlterNote       $10
0008FAF3 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008FAF9 E10F                       	smpsAlterNote       $0F
0008FAFB C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008FB03 E10D                       	smpsAlterNote       $0D
0008FB05 D003                       	dc.b	nG6, $03
0008FB09 E0C0                       	smpsPan             panCenter, $00
0008FB0B E6FF                       	smpsAlterVol        $FF
0008FB0D AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008FB19 8001                       	dc.b	nRst, $01
0008FB1B E10C                       	smpsAlterNote       $0C
0008FB1D A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008FB27 E604                       	smpsAlterVol        $04
0008FB29 E10B                       	smpsAlterNote       $0B
0008FB2B B306 8001                  	dc.b	nD4, $06, nRst, $01
0008FB2F E10F                       	smpsAlterNote       $0F
0008FB31 AE03                       	dc.b	nA3, $03
0008FB33 E10D                       	smpsAlterNote       $0D
0008FB35 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FB39 E10C                       	smpsAlterNote       $0C
0008FB3B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FB3F E10B                       	smpsAlterNote       $0B
0008FB41 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FB45 E10A                       	smpsAlterNote       $0A
0008FB47 B103                       	dc.b	nC4, $03
0008FB49 E110                       	smpsAlterNote       $10
0008FB4B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FB4F E10F                       	smpsAlterNote       $0F
0008FB51 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008FB55 E080                       	smpsPan             panLeft, $00
0008FB57 01                         	dc.b	$01
0008FB5A E6FB                       	smpsAlterVol        $FB
0008FB5C E1E4                       	smpsAlterNote       $E4
0008FB5E C501                       	dc.b	nAb5, $01
0008FB60 E1F4                       	smpsAlterNote       $F4
0008FB62 E701                       	dc.b	smpsNoAttack, $01
0008FB64 E104                       	smpsAlterNote       $04
0008FB66 E701                       	dc.b	smpsNoAttack, $01
0008FB68 E114                       	smpsAlterNote       $14
0008FB6A E701                       	dc.b	smpsNoAttack, $01
0008FB6C E11C                       	smpsAlterNote       $1C
0008FB6E E701                       	dc.b	smpsNoAttack, $01
0008FB70 E1EF                       	smpsAlterNote       $EF
0008FB72 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008FB75 E1FF                       	smpsAlterNote       $FF
0008FB77 E701                       	dc.b	smpsNoAttack, $01
0008FB79 E10F                       	smpsAlterNote       $0F
0008FB7B C606                       	dc.b	nA5, $06
0008FB7D E109                       	smpsAlterNote       $09
0008FB7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB83 E10F                       	smpsAlterNote       $0F
0008FB85 E701                       	dc.b	smpsNoAttack, $01
0008FB87 E112                       	smpsAlterNote       $12
0008FB89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB8D E10C                       	smpsAlterNote       $0C
0008FB8F E701                       	dc.b	smpsNoAttack, $01
0008FB91 E108                       	smpsAlterNote       $08
0008FB93 E701                       	dc.b	smpsNoAttack, $01
0008FB95 E109                       	smpsAlterNote       $09
0008FB97 E701                       	dc.b	smpsNoAttack, $01
0008FB99 E10F                       	smpsAlterNote       $0F
0008FB9B E701                       	dc.b	smpsNoAttack, $01
0008FB9D E113                       	smpsAlterNote       $13
0008FB9F E701                       	dc.b	smpsNoAttack, $01
0008FBA1 E10F                       	smpsAlterNote       $0F
0008FBA3 E701                       	dc.b	smpsNoAttack, $01
0008FBA5 E10C                       	smpsAlterNote       $0C
0008FBA7 E701                       	dc.b	smpsNoAttack, $01
0008FBA9 E108                       	smpsAlterNote       $08
0008FBAB E701                       	dc.b	smpsNoAttack, $01
0008FBAD E10C                       	smpsAlterNote       $0C
0008FBAF E701                       	dc.b	smpsNoAttack, $01
0008FBB1 E112                       	smpsAlterNote       $12
0008FBB3 E701                       	dc.b	smpsNoAttack, $01
0008FBB5 E113                       	smpsAlterNote       $13
0008FBB7 E701                       	dc.b	smpsNoAttack, $01
0008FBB9 E10F                       	smpsAlterNote       $0F
0008FBBB E701                       	dc.b	smpsNoAttack, $01
0008FBBD E109                       	smpsAlterNote       $09
0008FBBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBC3 E10C                       	smpsAlterNote       $0C
0008FBC5 E701                       	dc.b	smpsNoAttack, $01
0008FBC7 E112                       	smpsAlterNote       $12
0008FBC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBCD E10C                       	smpsAlterNote       $0C
0008FBCF E701                       	dc.b	smpsNoAttack, $01
0008FBD1 E109                       	smpsAlterNote       $09
0008FBD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBD7 E10F                       	smpsAlterNote       $0F
0008FBD9 E701                       	dc.b	smpsNoAttack, $01
0008FBDB E113                       	smpsAlterNote       $13
0008FBDD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FBE1 E10D                       	smpsAlterNote       $0D
0008FBE3 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008FBE9 E10C                       	smpsAlterNote       $0C
0008FBEB C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FBEF E10D                       	smpsAlterNote       $0D
0008FBF1 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008FBF5 E10C                       	smpsAlterNote       $0C
0008FBF7 C102                       	dc.b	nE5, $02
0008FBF9 E10B                       	smpsAlterNote       $0B
0008FBFB BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008FBFF E10C                       	smpsAlterNote       $0C
0008FC01 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008FC05 E10B                       	smpsAlterNote       $0B
0008FC07 BF02                       	dc.b	nD5, $02
0008FC09 E10A                       	smpsAlterNote       $0A
0008FC0B BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008FC15 E110                       	smpsAlterNote       $10
0008FC17 BB02                       	dc.b	nBb4, $02
0008FC19 E10A                       	smpsAlterNote       $0A
0008FC1B BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008FC1F E110                       	smpsAlterNote       $10
0008FC21 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008FC25 E10F                       	smpsAlterNote       $0F
0008FC27 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008FC2B E110                       	smpsAlterNote       $10
0008FC2D BB02                       	dc.b	nBb4, $02
0008FC2F E10F                       	smpsAlterNote       $0F
0008FC31 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008FC3B E10C                       	smpsAlterNote       $0C
0008FC3D B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008FC45 E10B                       	smpsAlterNote       $0B
0008FC47 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008FC4B E10F                       	smpsAlterNote       $0F
0008FC4D BA02                       	dc.b	nA4, $02
0008FC51 E0C0                       	smpsPan             panCenter, $00
0008FC53 E601                       	smpsAlterVol        $01
0008FC55 E109                       	smpsAlterNote       $09
0008FC57 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008FC63 E108                       	smpsAlterNote       $08
0008FC65 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008FC6B E107                       	smpsAlterNote       $07
0008FC6D B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008FC73 E109                       	smpsAlterNote       $09
0008FC75 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FC79 E108                       	smpsAlterNote       $08
0008FC7B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FC7F E107                       	smpsAlterNote       $07
0008FC81 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FC85 E106                       	smpsAlterNote       $06
0008FC87 B103                       	dc.b	nC4, $03
0008FC89 E10C                       	smpsAlterNote       $0C
0008FC8B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FC91 E080                       	smpsPan             panLeft, $00
0008FC93 07                         	dc.b	$07
0008FC94 E6FE                       	smpsAlterVol        $FE
0008FC96 E10B                       	smpsAlterNote       $0B
0008FC98 B20D                       	dc.b	nCs4, $0D
0008FC9A E105                       	smpsAlterNote       $05
0008FC9C E701                       	dc.b	smpsNoAttack, $01
0008FC9E E104                       	smpsAlterNote       $04
0008FCA0 E701                       	dc.b	smpsNoAttack, $01
0008FCA2 E108                       	smpsAlterNote       $08
0008FCA4 E701                       	dc.b	smpsNoAttack, $01
0008FCA6 E10E                       	smpsAlterNote       $0E
0008FCA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCAC E10B                       	smpsAlterNote       $0B
0008FCAE E701                       	dc.b	smpsNoAttack, $01
0008FCB0 E105                       	smpsAlterNote       $05
0008FCB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCB6 E10B                       	smpsAlterNote       $0B
0008FCB8 E701                       	dc.b	smpsNoAttack, $01
0008FCBA E10E                       	smpsAlterNote       $0E
0008FCBC E701                       	dc.b	smpsNoAttack, $01
0008FCBE E10F                       	smpsAlterNote       $0F
0008FCC0 8001                       	dc.b	nRst, $01
0008FCC2 E10B                       	smpsAlterNote       $0B
0008FCC4 B30D                       	dc.b	nD4, $0D
0008FCC6 E105                       	smpsAlterNote       $05
0008FCC8 E701                       	dc.b	smpsNoAttack, $01
0008FCCA E104                       	smpsAlterNote       $04
0008FCCC E701                       	dc.b	smpsNoAttack, $01
0008FCCE E108                       	smpsAlterNote       $08
0008FCD0 E701                       	dc.b	smpsNoAttack, $01
0008FCD2 E10E                       	smpsAlterNote       $0E
0008FCD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCD8 E10B                       	smpsAlterNote       $0B
0008FCDA E701                       	dc.b	smpsNoAttack, $01
0008FCDC E105                       	smpsAlterNote       $05
0008FCDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCE2 E10B                       	smpsAlterNote       $0B
0008FCE4 E701                       	dc.b	smpsNoAttack, $01
0008FCE6 E10E                       	smpsAlterNote       $0E
0008FCE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCEC E108                       	smpsAlterNote       $08
0008FCEE E701                       	dc.b	smpsNoAttack, $01
0008FCF0 E104                       	smpsAlterNote       $04
0008FCF2 E701                       	dc.b	smpsNoAttack, $01
0008FCF4 E105                       	smpsAlterNote       $05
0008FCF6 E701                       	dc.b	smpsNoAttack, $01
0008FCF8 E10B                       	smpsAlterNote       $0B
0008FCFA E701                       	dc.b	smpsNoAttack, $01
0008FCFC E10F                       	smpsAlterNote       $0F
0008FCFE E701                       	dc.b	smpsNoAttack, $01
0008FD00 E10B                       	smpsAlterNote       $0B
0008FD02 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FD06 E10C                       	smpsAlterNote       $0C
0008FD08 B50D                       	dc.b	nE4, $0D
0008FD0A E106                       	smpsAlterNote       $06
0008FD0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD10 E10C                       	smpsAlterNote       $0C
0008FD12 E701                       	dc.b	smpsNoAttack, $01
0008FD14 E10F                       	smpsAlterNote       $0F
0008FD16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD1A E109                       	smpsAlterNote       $09
0008FD1C E701                       	dc.b	smpsNoAttack, $01
0008FD1E E105                       	smpsAlterNote       $05
0008FD20 E701                       	dc.b	smpsNoAttack, $01
0008FD22 E106                       	smpsAlterNote       $06
0008FD24 E701                       	dc.b	smpsNoAttack, $01
0008FD26 E10C                       	smpsAlterNote       $0C
0008FD28 E701                       	dc.b	smpsNoAttack, $01
0008FD2A E110                       	smpsAlterNote       $10
0008FD2C E701                       	dc.b	smpsNoAttack, $01
0008FD2E E10B                       	smpsAlterNote       $0B
0008FD30 B30E                       	dc.b	nD4, $0E
0008FD32 E105                       	smpsAlterNote       $05
0008FD34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD38 E10B                       	smpsAlterNote       $0B
0008FD3A E701                       	dc.b	smpsNoAttack, $01
0008FD3C E10E                       	smpsAlterNote       $0E
0008FD3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD42 E108                       	smpsAlterNote       $08
0008FD44 E701                       	dc.b	smpsNoAttack, $01
0008FD46 E104                       	smpsAlterNote       $04
0008FD48 E701                       	dc.b	smpsNoAttack, $01
0008FD4A E105                       	smpsAlterNote       $05
0008FD4C E701                       	dc.b	smpsNoAttack, $01
0008FD4E E10B                       	smpsAlterNote       $0B
0008FD50 E701                       	dc.b	smpsNoAttack, $01
0008FD52 E10F                       	smpsAlterNote       $0F
0008FD54 E701                       	dc.b	smpsNoAttack, $01
0008FD56 E10B                       	smpsAlterNote       $0B
0008FD58 E701                       	dc.b	smpsNoAttack, $01
0008FD5A E108                       	smpsAlterNote       $08
0008FD5C E701                       	dc.b	smpsNoAttack, $01
0008FD5E E104                       	smpsAlterNote       $04
0008FD60 E701                       	dc.b	smpsNoAttack, $01
0008FD62 E108                       	smpsAlterNote       $08
0008FD64 E701                       	dc.b	smpsNoAttack, $01
0008FD66 E10E                       	smpsAlterNote       $0E
0008FD68 E701                       	dc.b	smpsNoAttack, $01
0008FD6A E10F                       	smpsAlterNote       $0F
0008FD6C E701                       	dc.b	smpsNoAttack, $01
0008FD6E E10B                       	smpsAlterNote       $0B
0008FD70 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008FD74 E108                       	smpsAlterNote       $08
0008FD76 E701                       	dc.b	smpsNoAttack, $01
0008FD78 E105                       	smpsAlterNote       $05
0008FD7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD7E E10B                       	smpsAlterNote       $0B
0008FD80 E701                       	dc.b	smpsNoAttack, $01
0008FD82 E10F                       	smpsAlterNote       $0F
0008FD84 E701                       	dc.b	smpsNoAttack, $01
0008FD86 E10E                       	smpsAlterNote       $0E
0008FD88 E701                       	dc.b	smpsNoAttack, $01
0008FD8A E108                       	smpsAlterNote       $08
0008FD8C E701                       	dc.b	smpsNoAttack, $01
0008FD8E E104                       	smpsAlterNote       $04
0008FD90 E701                       	dc.b	smpsNoAttack, $01
0008FD92 E108                       	smpsAlterNote       $08
0008FD94 E701                       	dc.b	smpsNoAttack, $01
0008FD96 E10B                       	smpsAlterNote       $0B
0008FD98 E701                       	dc.b	smpsNoAttack, $01
0008FD9A E10F                       	smpsAlterNote       $0F
0008FD9C E701                       	dc.b	smpsNoAttack, $01
0008FD9E E10B                       	smpsAlterNote       $0B
0008FDA0 B30D                       	dc.b	nD4, $0D
0008FDA2 E108                       	smpsAlterNote       $08
0008FDA4 E701                       	dc.b	smpsNoAttack, $01
0008FDA6 E105                       	smpsAlterNote       $05
0008FDA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDAC E10B                       	smpsAlterNote       $0B
0008FDAE E701                       	dc.b	smpsNoAttack, $01
0008FDB0 E10F                       	smpsAlterNote       $0F
0008FDB2 E701                       	dc.b	smpsNoAttack, $01
0008FDB4 E10E                       	smpsAlterNote       $0E
0008FDB6 E701                       	dc.b	smpsNoAttack, $01
0008FDB8 E108                       	smpsAlterNote       $08
0008FDBA E701                       	dc.b	smpsNoAttack, $01
0008FDBC E104                       	smpsAlterNote       $04
0008FDBE E701                       	dc.b	smpsNoAttack, $01
0008FDC0 E108                       	smpsAlterNote       $08
0008FDC2 E701                       	dc.b	smpsNoAttack, $01
0008FDC4 E10B                       	smpsAlterNote       $0B
0008FDC6 E701                       	dc.b	smpsNoAttack, $01
0008FDC8 E10F                       	smpsAlterNote       $0F
0008FDCA E701                       	dc.b	smpsNoAttack, $01
0008FDCC E10B                       	smpsAlterNote       $0B
0008FDCE E701                       	dc.b	smpsNoAttack, $01
0008FDD0 E105                       	smpsAlterNote       $05
0008FDD2 E701                       	dc.b	smpsNoAttack, $01
0008FDD4 E104                       	smpsAlterNote       $04
0008FDD6 E701                       	dc.b	smpsNoAttack, $01
0008FDD8 E108                       	smpsAlterNote       $08
0008FDDA E701                       	dc.b	smpsNoAttack, $01
0008FDDC E10E                       	smpsAlterNote       $0E
0008FDDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDE2 E10B                       	smpsAlterNote       $0B
0008FDE4 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008FDE8 E108                       	smpsAlterNote       $08
0008FDEA E701                       	dc.b	smpsNoAttack, $01
0008FDEC E104                       	smpsAlterNote       $04
0008FDEE E701                       	dc.b	smpsNoAttack, $01
0008FDF0 E108                       	smpsAlterNote       $08
0008FDF2 E701                       	dc.b	smpsNoAttack, $01
0008FDF4 E10B                       	smpsAlterNote       $0B
0008FDF6 E701                       	dc.b	smpsNoAttack, $01
0008FDFA E0C0                       	smpsPan             panCenter, $00
0008FDFC E601                       	smpsAlterVol        $01
0008FDFE E108                       	smpsAlterNote       $08
0008FE00 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008FE0C 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008FE14 E080                       	smpsPan             panLeft, $00
0008FE16 07                         	dc.b	$07
0008FE17 E6FF                       	smpsAlterVol        $FF
0008FE19 E10D                       	smpsAlterNote       $0D
0008FE1B B60D                       	dc.b	nF4, $0D
0008FE1D E10A                       	smpsAlterNote       $0A
0008FE1F E701                       	dc.b	smpsNoAttack, $01
0008FE21 E106                       	smpsAlterNote       $06
0008FE23 E701                       	dc.b	smpsNoAttack, $01
0008FE25 E10A                       	smpsAlterNote       $0A
0008FE27 E701                       	dc.b	smpsNoAttack, $01
0008FE29 E110                       	smpsAlterNote       $10
0008FE2B E701                       	dc.b	smpsNoAttack, $01
0008FE2D E111                       	smpsAlterNote       $11
0008FE2F E701                       	dc.b	smpsNoAttack, $01
0008FE31 E10D                       	smpsAlterNote       $0D
0008FE33 E701                       	dc.b	smpsNoAttack, $01
0008FE35 E107                       	smpsAlterNote       $07
0008FE37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE3B E10A                       	smpsAlterNote       $0A
0008FE3D E701                       	dc.b	smpsNoAttack, $01
0008FE3F E110                       	smpsAlterNote       $10
0008FE41 E701                       	dc.b	smpsNoAttack, $01
0008FE43 E111                       	smpsAlterNote       $11
0008FE45 8001                       	dc.b	nRst, $01
0008FE47 E10D                       	smpsAlterNote       $0D
0008FE49 B80D                       	dc.b	nG4, $0D
0008FE4B E10A                       	smpsAlterNote       $0A
0008FE4D E701                       	dc.b	smpsNoAttack, $01
0008FE4F E106                       	smpsAlterNote       $06
0008FE51 E701                       	dc.b	smpsNoAttack, $01
0008FE53 E10A                       	smpsAlterNote       $0A
0008FE55 E701                       	dc.b	smpsNoAttack, $01
0008FE57 E110                       	smpsAlterNote       $10
0008FE59 E701                       	dc.b	smpsNoAttack, $01
0008FE5B E111                       	smpsAlterNote       $11
0008FE5D E701                       	dc.b	smpsNoAttack, $01
0008FE5F E10D                       	smpsAlterNote       $0D
0008FE61 E701                       	dc.b	smpsNoAttack, $01
0008FE63 E107                       	smpsAlterNote       $07
0008FE65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE69 E10D                       	smpsAlterNote       $0D
0008FE6B E701                       	dc.b	smpsNoAttack, $01
0008FE6D E110                       	smpsAlterNote       $10
0008FE6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE73 E10A                       	smpsAlterNote       $0A
0008FE75 E701                       	dc.b	smpsNoAttack, $01
0008FE77 E106                       	smpsAlterNote       $06
0008FE79 E701                       	dc.b	smpsNoAttack, $01
0008FE7B E107                       	smpsAlterNote       $07
0008FE7D E701                       	dc.b	smpsNoAttack, $01
0008FE7F E10D                       	smpsAlterNote       $0D
0008FE81 E701                       	dc.b	smpsNoAttack, $01
0008FE83 E111                       	smpsAlterNote       $11
0008FE85 E701                       	dc.b	smpsNoAttack, $01
0008FE87 E10D                       	smpsAlterNote       $0D
0008FE89 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FE8D E10F                       	smpsAlterNote       $0F
0008FE8F BA0D                       	dc.b	nA4, $0D
0008FE91 E109                       	smpsAlterNote       $09
0008FE93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE97 E10C                       	smpsAlterNote       $0C
0008FE99 E701                       	dc.b	smpsNoAttack, $01
0008FE9B E112                       	smpsAlterNote       $12
0008FE9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEA1 E10C                       	smpsAlterNote       $0C
0008FEA3 E701                       	dc.b	smpsNoAttack, $01
0008FEA5 E109                       	smpsAlterNote       $09
0008FEA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEAB E10F                       	smpsAlterNote       $0F
0008FEAD E701                       	dc.b	smpsNoAttack, $01
0008FEAF E113                       	smpsAlterNote       $13
0008FEB1 E701                       	dc.b	smpsNoAttack, $01
0008FEB3 E112                       	smpsAlterNote       $12
0008FEB5 E701                       	dc.b	smpsNoAttack, $01
0008FEB7 E10C                       	smpsAlterNote       $0C
0008FEB9 E701                       	dc.b	smpsNoAttack, $01
0008FEBB E108                       	smpsAlterNote       $08
0008FEBD E701                       	dc.b	smpsNoAttack, $01
0008FEBF E10C                       	smpsAlterNote       $0C
0008FEC1 E701                       	dc.b	smpsNoAttack, $01
0008FEC3 E10F                       	smpsAlterNote       $0F
0008FEC5 E701                       	dc.b	smpsNoAttack, $01
0008FEC7 E113                       	smpsAlterNote       $13
0008FEC9 E701                       	dc.b	smpsNoAttack, $01
0008FECB E10F                       	smpsAlterNote       $0F
0008FECD E701                       	dc.b	smpsNoAttack, $01
0008FECF E109                       	smpsAlterNote       $09
0008FED1 E701                       	dc.b	smpsNoAttack, $01
0008FED3 E108                       	smpsAlterNote       $08
0008FED5 E701                       	dc.b	smpsNoAttack, $01
0008FED7 E10C                       	smpsAlterNote       $0C
0008FED9 E701                       	dc.b	smpsNoAttack, $01
0008FEDB E112                       	smpsAlterNote       $12
0008FEDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEE1 E10F                       	smpsAlterNote       $0F
0008FEE3 E701                       	dc.b	smpsNoAttack, $01
0008FEE5 E109                       	smpsAlterNote       $09
0008FEE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEEB E10F                       	smpsAlterNote       $0F
0008FEED E701                       	dc.b	smpsNoAttack, $01
0008FEEF E112                       	smpsAlterNote       $12
0008FEF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEF5 E10C                       	smpsAlterNote       $0C
0008FEF7 E701                       	dc.b	smpsNoAttack, $01
0008FEF9 E108                       	smpsAlterNote       $08
0008FEFB E701                       	dc.b	smpsNoAttack, $01
0008FEFD E109                       	smpsAlterNote       $09
0008FEFF E701                       	dc.b	smpsNoAttack, $01
0008FF01 E10C                       	smpsAlterNote       $0C
0008FF03 B50A                       	dc.b	nE4, $0A
0008FF05 E10D                       	smpsAlterNote       $0D
0008FF07 B60E                       	dc.b	nF4, $0E
0008FF09 E107                       	smpsAlterNote       $07
0008FF0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF0F E10D                       	smpsAlterNote       $0D
0008FF11 E701                       	dc.b	smpsNoAttack, $01
0008FF13 E110                       	smpsAlterNote       $10
0008FF15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF19 E10A                       	smpsAlterNote       $0A
0008FF1B E701                       	dc.b	smpsNoAttack, $01
0008FF1D E106                       	smpsAlterNote       $06
0008FF1F E701                       	dc.b	smpsNoAttack, $01
0008FF21 E107                       	smpsAlterNote       $07
0008FF23 E701                       	dc.b	smpsNoAttack, $01
0008FF25 E10D                       	smpsAlterNote       $0D
0008FF27 E701                       	dc.b	smpsNoAttack, $01
0008FF29 E111                       	smpsAlterNote       $11
0008FF2B E701                       	dc.b	smpsNoAttack, $01
0008FF2D E10D                       	smpsAlterNote       $0D
0008FF2F B80D                       	dc.b	nG4, $0D
0008FF31 E10A                       	smpsAlterNote       $0A
0008FF33 E701                       	dc.b	smpsNoAttack, $01
0008FF35 E107                       	smpsAlterNote       $07
0008FF37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF3B E10D                       	smpsAlterNote       $0D
0008FF3D E701                       	dc.b	smpsNoAttack, $01
0008FF3F E111                       	smpsAlterNote       $11
0008FF41 E701                       	dc.b	smpsNoAttack, $01
0008FF43 E110                       	smpsAlterNote       $10
0008FF45 E701                       	dc.b	smpsNoAttack, $01
0008FF47 E10A                       	smpsAlterNote       $0A
0008FF49 E701                       	dc.b	smpsNoAttack, $01
0008FF4B E106                       	smpsAlterNote       $06
0008FF4D E701                       	dc.b	smpsNoAttack, $01
0008FF4F E10A                       	smpsAlterNote       $0A
0008FF51 E701                       	dc.b	smpsNoAttack, $01
0008FF53 E10D                       	smpsAlterNote       $0D
0008FF55 E701                       	dc.b	smpsNoAttack, $01
0008FF57 E111                       	smpsAlterNote       $11
0008FF59 E701                       	dc.b	smpsNoAttack, $01
0008FF5B E10D                       	smpsAlterNote       $0D
0008FF5D E701                       	dc.b	smpsNoAttack, $01
0008FF5F E107                       	smpsAlterNote       $07
0008FF61 E701                       	dc.b	smpsNoAttack, $01
0008FF63 E106                       	smpsAlterNote       $06
0008FF65 E701                       	dc.b	smpsNoAttack, $01
0008FF67 E10A                       	smpsAlterNote       $0A
0008FF69 E701                       	dc.b	smpsNoAttack, $01
0008FF6B E110                       	smpsAlterNote       $10
0008FF6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF71 E10D                       	smpsAlterNote       $0D
0008FF73 E701                       	dc.b	smpsNoAttack, $01
0008FF75 E10F                       	smpsAlterNote       $0F
0008FF77 BA0D                       	dc.b	nA4, $0D
0008FF79 E10C                       	smpsAlterNote       $0C
0008FF7B E701                       	dc.b	smpsNoAttack, $01
0008FF7D E108                       	smpsAlterNote       $08
0008FF7F E701                       	dc.b	smpsNoAttack, $01
0008FF81 E109                       	smpsAlterNote       $09
0008FF83 E701                       	dc.b	smpsNoAttack, $01
0008FF85 E10F                       	smpsAlterNote       $0F
0008FF87 E701                       	dc.b	smpsNoAttack, $01
0008FF89 E113                       	smpsAlterNote       $13
0008FF8B E701                       	dc.b	smpsNoAttack, $01
0008FF8D E10F                       	smpsAlterNote       $0F
0008FF8F E701                       	dc.b	smpsNoAttack, $01
0008FF91 E10C                       	smpsAlterNote       $0C
0008FF93 E701                       	dc.b	smpsNoAttack, $01
0008FF95 E108                       	smpsAlterNote       $08
0008FF97 E701                       	dc.b	smpsNoAttack, $01
0008FF99 E10C                       	smpsAlterNote       $0C
0008FF9B E701                       	dc.b	smpsNoAttack, $01
0008FF9D E112                       	smpsAlterNote       $12
0008FF9F E701                       	dc.b	smpsNoAttack, $01
0008FFA1 E113                       	smpsAlterNote       $13
0008FFA3 E701                       	dc.b	smpsNoAttack, $01
0008FFA5 E10F                       	smpsAlterNote       $0F
0008FFA7 E701                       	dc.b	smpsNoAttack, $01
0008FFA9 E109                       	smpsAlterNote       $09
0008FFAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFAF E10C                       	smpsAlterNote       $0C
0008FFB1 E701                       	dc.b	smpsNoAttack, $01
0008FFB3 E112                       	smpsAlterNote       $12
0008FFB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFB9 E10C                       	smpsAlterNote       $0C
0008FFBB E701                       	dc.b	smpsNoAttack, $01
0008FFBD E109                       	smpsAlterNote       $09
0008FFBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFC3 E10F                       	smpsAlterNote       $0F
0008FFC5 E701                       	dc.b	smpsNoAttack, $01
0008FFC7 E113                       	smpsAlterNote       $13
0008FFC9 E701                       	dc.b	smpsNoAttack, $01
0008FFCB E112                       	smpsAlterNote       $12
0008FFCD E701                       	dc.b	smpsNoAttack, $01
0008FFCF E10C                       	smpsAlterNote       $0C
0008FFD1 E701                       	dc.b	smpsNoAttack, $01
0008FFD3 E109                       	smpsAlterNote       $09
0008FFD5 8001                       	dc.b	nRst, $01
0008FFD7 E10D                       	smpsAlterNote       $0D
0008FFD9 B60A                       	dc.b	nF4, $0A
0008FFDB E10C                       	smpsAlterNote       $0C
0008FFDD B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FFE1 E10B                       	smpsAlterNote       $0B
0008FFE3 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008FFE7 E10C                       	smpsAlterNote       $0C
0008FFE9 B503                       	dc.b	nE4, $03
0008FFEB E10D                       	smpsAlterNote       $0D
0008FFED B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008FFF7 E10C                       	smpsAlterNote       $0C
0008FFF9 E701                       	dc.b	smpsNoAttack, $01
0008FFFB E108                       	smpsAlterNote       $08
0008FFFD E701                       	dc.b	smpsNoAttack, $01
0008FFFF E10C                       	smpsAlterNote       $0C
00090001 E701                       	dc.b	smpsNoAttack, $01
00090003 E112                       	smpsAlterNote       $12
00090005 E701                       	dc.b	smpsNoAttack, $01
00090007 E113                       	smpsAlterNote       $13
00090009 E701                       	dc.b	smpsNoAttack, $01
0009000B E10F                       	smpsAlterNote       $0F
0009000D E701                       	dc.b	smpsNoAttack, $01
0009000F E109                       	smpsAlterNote       $09
00090011 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090015 E10C                       	smpsAlterNote       $0C
00090017 E701                       	dc.b	smpsNoAttack, $01
00090019 E112                       	smpsAlterNote       $12
0009001B E701                       	dc.b	smpsNoAttack, $01
0009001D E113                       	smpsAlterNote       $13
0009001F 8001                       	dc.b	nRst, $01
00090021 E10D                       	smpsAlterNote       $0D
00090023 C20D                       	dc.b	nF5, $0D
00090025 E10A                       	smpsAlterNote       $0A
00090027 E701                       	dc.b	smpsNoAttack, $01
00090029 E106                       	smpsAlterNote       $06
0009002B E701                       	dc.b	smpsNoAttack, $01
0009002D E10A                       	smpsAlterNote       $0A
0009002F E701                       	dc.b	smpsNoAttack, $01
00090031 E110                       	smpsAlterNote       $10
00090033 E701                       	dc.b	smpsNoAttack, $01
00090035 E111                       	smpsAlterNote       $11
00090037 E701                       	dc.b	smpsNoAttack, $01
00090039 E10D                       	smpsAlterNote       $0D
0009003B E701                       	dc.b	smpsNoAttack, $01
0009003D E107                       	smpsAlterNote       $07
0009003F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090043 E10A                       	smpsAlterNote       $0A
00090045 E701                       	dc.b	smpsNoAttack, $01
00090047 E110                       	smpsAlterNote       $10
00090049 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009004D E10A                       	smpsAlterNote       $0A
0009004F E701                       	dc.b	smpsNoAttack, $01
00090051 E107                       	smpsAlterNote       $07
00090053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090057 E10D                       	smpsAlterNote       $0D
00090059 E701                       	dc.b	smpsNoAttack, $01
0009005B E111                       	smpsAlterNote       $11
0009005D E701                       	dc.b	smpsNoAttack, $01
0009005F E110                       	smpsAlterNote       $10
00090061 E701                       	dc.b	smpsNoAttack, $01
00090063 E10A                       	smpsAlterNote       $0A
00090065 E701                       	dc.b	smpsNoAttack, $01
00090067 E106                       	smpsAlterNote       $06
00090069 E701                       	dc.b	smpsNoAttack, $01
0009006B E10A                       	smpsAlterNote       $0A
0009006D E701                       	dc.b	smpsNoAttack, $01
0009006F E10D                       	smpsAlterNote       $0D
00090071 E701                       	dc.b	smpsNoAttack, $01
00090073 E111                       	smpsAlterNote       $11
00090075 E701                       	dc.b	smpsNoAttack, $01
00090077 E10D                       	smpsAlterNote       $0D
00090079 E701                       	dc.b	smpsNoAttack, $01
0009007B E107                       	smpsAlterNote       $07
0009007D E701                       	dc.b	smpsNoAttack, $01
0009007F E106                       	smpsAlterNote       $06
00090081 E701                       	dc.b	smpsNoAttack, $01
00090083 E10A                       	smpsAlterNote       $0A
00090085 E701                       	dc.b	smpsNoAttack, $01
00090087 E110                       	smpsAlterNote       $10
00090089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009008D E10D                       	smpsAlterNote       $0D
0009008F E701                       	dc.b	smpsNoAttack, $01
00090091 E107                       	smpsAlterNote       $07
00090093 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090097 E10D                       	smpsAlterNote       $0D
00090099 E701                       	dc.b	smpsNoAttack, $01
0009009B E110                       	smpsAlterNote       $10
0009009D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900A1 E10A                       	smpsAlterNote       $0A
000900A3 E701                       	dc.b	smpsNoAttack, $01
000900A5 E106                       	smpsAlterNote       $06
000900A7 E701                       	dc.b	smpsNoAttack, $01
000900A9 E107                       	smpsAlterNote       $07
000900AB E701                       	dc.b	smpsNoAttack, $01
000900AD E10D                       	smpsAlterNote       $0D
000900AF E701                       	dc.b	smpsNoAttack, $01
000900B1 E111                       	smpsAlterNote       $11
000900B3 E701                       	dc.b	smpsNoAttack, $01
000900B5 E10D                       	smpsAlterNote       $0D
000900B7 E701                       	dc.b	smpsNoAttack, $01
000900B9 E10A                       	smpsAlterNote       $0A
000900BB E701                       	dc.b	smpsNoAttack, $01
000900BD E107                       	smpsAlterNote       $07
000900BF 8001                       	dc.b	nRst, $01
000900C1 E10D                       	smpsAlterNote       $0D
000900C3 C206 8001                  	dc.b	nF5, $06, nRst, $01
000900C9 E601                       	smpsAlterVol        $01
000900CB E110                       	smpsAlterNote       $10
000900CD BB0D                       	dc.b	nBb4, $0D
000900CF E10A                       	smpsAlterNote       $0A
000900D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900D5 E110                       	smpsAlterNote       $10
000900D7 E701                       	dc.b	smpsNoAttack, $01
000900D9 E113                       	smpsAlterNote       $13
000900DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900DF E10D                       	smpsAlterNote       $0D
000900E1 E701                       	dc.b	smpsNoAttack, $01
000900E3 E109                       	smpsAlterNote       $09
000900E5 E701                       	dc.b	smpsNoAttack, $01
000900E7 E10A                       	smpsAlterNote       $0A
000900E9 E701                       	dc.b	smpsNoAttack, $01
000900EB E110                       	smpsAlterNote       $10
000900ED E701                       	dc.b	smpsNoAttack, $01
000900EF E114                       	smpsAlterNote       $14
000900F1 E701                       	dc.b	smpsNoAttack, $01
000900F3 E110                       	smpsAlterNote       $10
000900F5 E701                       	dc.b	smpsNoAttack, $01
000900F7 E10D                       	smpsAlterNote       $0D
000900F9 E701                       	dc.b	smpsNoAttack, $01
000900FB E109                       	smpsAlterNote       $09
000900FD E701                       	dc.b	smpsNoAttack, $01
000900FF E10A                       	smpsAlterNote       $0A
00090101 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00090105 E107                       	smpsAlterNote       $07
00090107 E701                       	dc.b	smpsNoAttack, $01
00090109 E103                       	smpsAlterNote       $03
0009010B E701                       	dc.b	smpsNoAttack, $01
0009010D E107                       	smpsAlterNote       $07
0009010F E701                       	dc.b	smpsNoAttack, $01
00090111 E10D                       	smpsAlterNote       $0D
00090113 E701                       	dc.b	smpsNoAttack, $01
00090115 E10E                       	smpsAlterNote       $0E
00090117 E701                       	dc.b	smpsNoAttack, $01
00090119 E10A                       	smpsAlterNote       $0A
0009011B E701                       	dc.b	smpsNoAttack, $01
0009011D E104                       	smpsAlterNote       $04
0009011F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090123 E107                       	smpsAlterNote       $07
00090125 E701                       	dc.b	smpsNoAttack, $01
00090127 E10D                       	smpsAlterNote       $0D
00090129 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009012D E107                       	smpsAlterNote       $07
0009012F E701                       	dc.b	smpsNoAttack, $01
00090131 E104                       	smpsAlterNote       $04
00090133 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090137 E10B                       	smpsAlterNote       $0B
00090139 BF0D                       	dc.b	nD5, $0D
0009013B E108                       	smpsAlterNote       $08
0009013D E701                       	dc.b	smpsNoAttack, $01
0009013F E105                       	smpsAlterNote       $05
00090141 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090145 E10B                       	smpsAlterNote       $0B
00090147 E701                       	dc.b	smpsNoAttack, $01
00090149 E10F                       	smpsAlterNote       $0F
0009014B E701                       	dc.b	smpsNoAttack, $01
0009014D E10E                       	smpsAlterNote       $0E
0009014F E701                       	dc.b	smpsNoAttack, $01
00090151 E108                       	smpsAlterNote       $08
00090153 E701                       	dc.b	smpsNoAttack, $01
00090155 E104                       	smpsAlterNote       $04
00090157 E701                       	dc.b	smpsNoAttack, $01
00090159 E108                       	smpsAlterNote       $08
0009015B E701                       	dc.b	smpsNoAttack, $01
0009015D E10B                       	smpsAlterNote       $0B
0009015F E701                       	dc.b	smpsNoAttack, $01
00090161 E10F                       	smpsAlterNote       $0F
00090163 E701                       	dc.b	smpsNoAttack, $01
00090165 E10B                       	smpsAlterNote       $0B
00090167 E701                       	dc.b	smpsNoAttack, $01
00090169 E105                       	smpsAlterNote       $05
0009016B E701                       	dc.b	smpsNoAttack, $01
0009016D E104                       	smpsAlterNote       $04
0009016F E701                       	dc.b	smpsNoAttack, $01
00090171 E105                       	smpsAlterNote       $05
00090173 8001                       	dc.b	nRst, $01
00090175 E10C                       	smpsAlterNote       $0C
00090177 C10C                       	dc.b	nE5, $0C
00090179 E10D                       	smpsAlterNote       $0D
0009017B C201                       	dc.b	nF5, $01
0009017D E10E                       	smpsAlterNote       $0E
0009017F C301 8001                  	dc.b	nFs5, $01, nRst, $01
00090183 E10D                       	smpsAlterNote       $0D
00090185 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00090189 E10A                       	smpsAlterNote       $0A
0009018B E701                       	dc.b	smpsNoAttack, $01
0009018D E106                       	smpsAlterNote       $06
0009018F E701                       	dc.b	smpsNoAttack, $01
00090191 E10A                       	smpsAlterNote       $0A
00090193 E701                       	dc.b	smpsNoAttack, $01
00090195 E10D                       	smpsAlterNote       $0D
00090197 E701                       	dc.b	smpsNoAttack, $01
00090199 E111                       	smpsAlterNote       $11
0009019B E701                       	dc.b	smpsNoAttack, $01
0009019D E10D                       	smpsAlterNote       $0D
0009019F E701                       	dc.b	smpsNoAttack, $01
000901A1 E107                       	smpsAlterNote       $07
000901A3 E701                       	dc.b	smpsNoAttack, $01
000901A5 E106                       	smpsAlterNote       $06
000901A7 E701                       	dc.b	smpsNoAttack, $01
000901A9 E10A                       	smpsAlterNote       $0A
000901AB E701                       	dc.b	smpsNoAttack, $01
000901AD E110                       	smpsAlterNote       $10
000901AF E701                       	dc.b	smpsNoAttack, $01
000901B1 E111                       	smpsAlterNote       $11
000901B3 8001                       	dc.b	nRst, $01
000901B5 E10D                       	smpsAlterNote       $0D
000901B7 C40D                       	dc.b	nG5, $0D
000901B9 E10A                       	smpsAlterNote       $0A
000901BB E701                       	dc.b	smpsNoAttack, $01
000901BD E106                       	smpsAlterNote       $06
000901BF E701                       	dc.b	smpsNoAttack, $01
000901C1 E10A                       	smpsAlterNote       $0A
000901C3 E701                       	dc.b	smpsNoAttack, $01
000901C5 E10D                       	smpsAlterNote       $0D
000901C7 E701                       	dc.b	smpsNoAttack, $01
000901C9 E10C                       	smpsAlterNote       $0C
000901CB C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000901D7 8001                       	dc.b	nRst, $01
000901D9 E10D                       	smpsAlterNote       $0D
000901DB C20D                       	dc.b	nF5, $0D
000901DD E10A                       	smpsAlterNote       $0A
000901DF E701                       	dc.b	smpsNoAttack, $01
000901E1 E106                       	smpsAlterNote       $06
000901E3 E701                       	dc.b	smpsNoAttack, $01
000901E5 E10A                       	smpsAlterNote       $0A
000901E7 E701                       	dc.b	smpsNoAttack, $01
000901E9 E110                       	smpsAlterNote       $10
000901EB E701                       	dc.b	smpsNoAttack, $01
000901ED E111                       	smpsAlterNote       $11
000901EF E701                       	dc.b	smpsNoAttack, $01
000901F1 E10D                       	smpsAlterNote       $0D
000901F3 E701                       	dc.b	smpsNoAttack, $01
000901F5 E107                       	smpsAlterNote       $07
000901F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901FB E10A                       	smpsAlterNote       $0A
000901FD E701                       	dc.b	smpsNoAttack, $01
000901FF E110                       	smpsAlterNote       $10
00090201 E701                       	dc.b	smpsNoAttack, $01
00090203 E111                       	smpsAlterNote       $11
00090205 8001                       	dc.b	nRst, $01
00090207 E10F                       	smpsAlterNote       $0F
00090209 C60A                       	dc.b	nA5, $0A
0009020B E10D                       	smpsAlterNote       $0D
0009020D C406 8001                  	dc.b	nG5, $06, nRst, $01
00090211 E10C                       	smpsAlterNote       $0C
00090213 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009021F 8001                       	dc.b	nRst, $01
00090221 E10D                       	smpsAlterNote       $0D
00090223 C20D                       	dc.b	nF5, $0D
00090225 E107                       	smpsAlterNote       $07
00090227 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009022B E10A                       	smpsAlterNote       $0A
0009022D E701                       	dc.b	smpsNoAttack, $01
0009022F E110                       	smpsAlterNote       $10
00090231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090235 E10A                       	smpsAlterNote       $0A
00090237 E701                       	dc.b	smpsNoAttack, $01
00090239 E107                       	smpsAlterNote       $07
0009023B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009023F E10D                       	smpsAlterNote       $0D
00090241 E701                       	dc.b	smpsNoAttack, $01
00090243 E111                       	smpsAlterNote       $11
00090245 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090249 E10D                       	smpsAlterNote       $0D
0009024B C40D                       	dc.b	nG5, $0D
0009024D E107                       	smpsAlterNote       $07
0009024F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090253 E10A                       	smpsAlterNote       $0A
00090255 E701                       	dc.b	smpsNoAttack, $01
00090257 E10D                       	smpsAlterNote       $0D
00090259 8001                       	dc.b	nRst, $01
0009025B E10C                       	smpsAlterNote       $0C
0009025D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090269 E10D                       	smpsAlterNote       $0D
0009026B C20E                       	dc.b	nF5, $0E
0009026D E107                       	smpsAlterNote       $07
0009026F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090273 E10D                       	smpsAlterNote       $0D
00090275 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009027B E0C0                       	smpsPan             panCenter, $00
0009027D E603                       	smpsAlterVol        $03
0009027F E108                       	smpsAlterNote       $08
00090281 B406                       	dc.b	nEb4, $06
00090283 E10C                       	smpsAlterNote       $0C
00090285 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00090289 E108                       	smpsAlterNote       $08
0009028B B403                       	dc.b	nEb4, $03
0009028D E109                       	smpsAlterNote       $09
0009028F B803 8001                  	dc.b	nG4, $03, nRst, $01
00090293 E10C                       	smpsAlterNote       $0C
00090295 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009029D 03                         	dc.b	$03
0009029E E6FD                       	smpsAlterVol        $FD
000902A0 F6F1 F4                    	smpsJump            music84_Jump00
000902A3                            
000902A3                            ; PSG1 Data
000902A3                            music84_PSG1:
000902A3 E1FD                       	smpsAlterNote       $FD
000902A5 EC04                       	smpsPSGAlterVol     $04
000902A7 9203                       	dc.b	nF1, $03
000902A9 E1FE                       	smpsAlterNote       $FE
000902AB 9603                       	dc.b	nA1, $03
000902AD EC04                       	smpsPSGAlterVol     $04
000902AF E701                       	dc.b	smpsNoAttack, $01
000902B1 E1FF                       	smpsAlterNote       $FF
000902B3 ECFC                       	smpsPSGAlterVol     $FC
000902B5 9B03                       	dc.b	nD2, $03
000902B7 E1FD                       	smpsAlterNote       $FD
000902B9 9403                       	dc.b	nG1, $03
000902BB EC04                       	smpsPSGAlterVol     $04
000902BD E701                       	dc.b	smpsNoAttack, $01
000902BF E1FE                       	smpsAlterNote       $FE
000902C1 ECFC                       	smpsPSGAlterVol     $FC
000902C3 9703                       	dc.b	nBb1, $03
000902C5 E1FF                       	smpsAlterNote       $FF
000902C7 9B03                       	dc.b	nD2, $03
000902C9 EC04                       	smpsPSGAlterVol     $04
000902CB E701                       	dc.b	smpsNoAttack, $01
000902CD E1FE                       	smpsAlterNote       $FE
000902CF ECFC                       	smpsPSGAlterVol     $FC
000902D1 A002                       	dc.b	nG2, $02
000902D3 EC04                       	smpsPSGAlterVol     $04
000902D5 E701                       	dc.b	smpsNoAttack, $01
000902D7 E1FF                       	smpsAlterNote       $FF
000902D9 ECFC                       	smpsPSGAlterVol     $FC
000902DB A203                       	dc.b	nA2, $03
000902DD EC0B                       	smpsPSGAlterVol     $0B
000902DF 800A                       	dc.b	nRst, $0A
000902E1 E105                       	smpsAlterNote       $05
000902E3 01                         	dc.b	$01
000902E4 E1FC                       	smpsAlterNote       $FC
000902E6 01                         	dc.b	$01
000902E7 E105                       	smpsAlterNote       $05
000902E9 01                         	dc.b	$01
000902EA E1FD                       	smpsAlterNote       $FD
000902EC 01                         	dc.b	$01
000902ED E105                       	smpsAlterNote       $05
000902EF 01                         	dc.b	$01
000902F0 E1FD                       	smpsAlterNote       $FD
000902F2 01                         	dc.b	$01
000902F3 E1FA                       	smpsAlterNote       $FA
000902F5 01                         	dc.b	$01
000902F6 E1FC                       	smpsAlterNote       $FC
000902F8 01                         	dc.b	$01
000902F9 E105                       	smpsAlterNote       $05
000902FB 01                         	dc.b	$01
000902FC E108                       	smpsAlterNote       $08
000902FE 0101                       	dc.b	$01, $01
00090300 E105                       	smpsAlterNote       $05
00090302 01                         	dc.b	$01
00090303 E1FA                       	smpsAlterNote       $FA
00090305 0101                       	dc.b	$01, $01
00090307 E1FD                       	smpsAlterNote       $FD
00090309 01                         	dc.b	$01
0009030A E105                       	smpsAlterNote       $05
0009030C 01                         	dc.b	$01
0009030D E108                       	smpsAlterNote       $08
0009030F 01                         	dc.b	$01
00090310 E105                       	smpsAlterNote       $05
00090312 01                         	dc.b	$01
00090313 E1FC                       	smpsAlterNote       $FC
00090315 01                         	dc.b	$01
00090316 E105                       	smpsAlterNote       $05
00090318 01                         	dc.b	$01
00090319 E1FD                       	smpsAlterNote       $FD
0009031B 01                         	dc.b	$01
0009031C                            
0009031C                            music84_Jump07:
0009031C E105                       	smpsAlterNote       $05
0009031E 8001                       	dc.b	nRst, $01
00090320 E1FD                       	smpsAlterNote       $FD
00090322 01                         	dc.b	$01
00090323 E1FA                       	smpsAlterNote       $FA
00090325 01                         	dc.b	$01
00090326 E1FC                       	smpsAlterNote       $FC
00090328 01                         	dc.b	$01
00090329 E1FD                       	smpsAlterNote       $FD
0009032B ECF5                       	smpsPSGAlterVol     $F5
0009032D 9206                       	dc.b	nF1, $06
0009032F EC04                       	smpsPSGAlterVol     $04
00090331 E701                       	dc.b	smpsNoAttack, $01
00090333 EC07                       	smpsPSGAlterVol     $07
00090335 8003                       	dc.b	nRst, $03
00090337 ECF5                       	smpsPSGAlterVol     $F5
00090339 9206                       	dc.b	nF1, $06
0009033B EC04                       	smpsPSGAlterVol     $04
0009033D E701                       	dc.b	smpsNoAttack, $01
0009033F EC07                       	smpsPSGAlterVol     $07
00090341 8006                       	dc.b	nRst, $06
00090343 E100                       	smpsAlterNote       $00
00090345 01                         	dc.b	$01
00090346 E104                       	smpsAlterNote       $04
00090348 01                         	dc.b	$01
00090349 E100                       	smpsAlterNote       $00
0009034B 01                         	dc.b	$01
0009034C E1FB                       	smpsAlterNote       $FB
0009034E 01                         	dc.b	$01
0009034F E1FD                       	smpsAlterNote       $FD
00090351 ECF5                       	smpsPSGAlterVol     $F5
00090353 9406                       	dc.b	nG1, $06
00090355 EC04                       	smpsPSGAlterVol     $04
00090357 E701                       	dc.b	smpsNoAttack, $01
00090359 EC07                       	smpsPSGAlterVol     $07
0009035B 8003                       	dc.b	nRst, $03
0009035D ECF5                       	smpsPSGAlterVol     $F5
0009035F 9407                       	dc.b	nG1, $07
00090361 EC0B                       	smpsPSGAlterVol     $0B
00090363 8006                       	dc.b	nRst, $06
00090365 E100                       	smpsAlterNote       $00
00090367 01                         	dc.b	$01
00090368 E103                       	smpsAlterNote       $03
0009036A 0101                       	dc.b	$01, $01
0009036C E1FD                       	smpsAlterNote       $FD
0009036E 01                         	dc.b	$01
0009036F ECF5                       	smpsPSGAlterVol     $F5
00090371 9207                       	dc.b	nF1, $07
00090373 EC0B                       	smpsPSGAlterVol     $0B
00090375 8004                       	dc.b	nRst, $04
00090377 ECF5                       	smpsPSGAlterVol     $F5
00090379 9206                       	dc.b	nF1, $06
0009037B EC04                       	smpsPSGAlterVol     $04
0009037D E701                       	dc.b	smpsNoAttack, $01
0009037F EC07                       	smpsPSGAlterVol     $07
00090381 8006                       	dc.b	nRst, $06
00090383 E103                       	smpsAlterNote       $03
00090385 01                         	dc.b	$01
00090386 E104                       	smpsAlterNote       $04
00090388 01                         	dc.b	$01
00090389 E100                       	smpsAlterNote       $00
0009038B 01                         	dc.b	$01
0009038C E1FA                       	smpsAlterNote       $FA
0009038E 01                         	dc.b	$01
0009038F E1FD                       	smpsAlterNote       $FD
00090391 ECF5                       	smpsPSGAlterVol     $F5
00090393 9206                       	dc.b	nF1, $06
00090395 EC04                       	smpsPSGAlterVol     $04
00090397 E701                       	dc.b	smpsNoAttack, $01
00090399 EC07                       	smpsPSGAlterVol     $07
0009039B 8003                       	dc.b	nRst, $03
0009039D ECF5                       	smpsPSGAlterVol     $F5
0009039F 9106                       	dc.b	nE1, $06
000903A1 EC04                       	smpsPSGAlterVol     $04
000903A3 E701                       	dc.b	smpsNoAttack, $01
000903A5 EC07                       	smpsPSGAlterVol     $07
000903A7 8006                       	dc.b	nRst, $06
000903A9 E100                       	smpsAlterNote       $00
000903AB 01                         	dc.b	$01
000903AC E104                       	smpsAlterNote       $04
000903AE 01                         	dc.b	$01
000903AF E100                       	smpsAlterNote       $00
000903B1 01                         	dc.b	$01
000903B2 E1FD                       	smpsAlterNote       $FD
000903B4 01                         	dc.b	$01
000903B5 ECF5                       	smpsPSGAlterVol     $F5
000903B7 9206                       	dc.b	nF1, $06
000903B9 EC04                       	smpsPSGAlterVol     $04
000903BB E701                       	dc.b	smpsNoAttack, $01
000903BD EC07                       	smpsPSGAlterVol     $07
000903BF 8003                       	dc.b	nRst, $03
000903C1 ECF5                       	smpsPSGAlterVol     $F5
000903C3 9207                       	dc.b	nF1, $07
000903C5 EC0B                       	smpsPSGAlterVol     $0B
000903C7 8007                       	dc.b	nRst, $07
000903C9 E103                       	smpsAlterNote       $03
000903CB 0101                       	dc.b	$01, $01
000903CD E1FD                       	smpsAlterNote       $FD
000903CF 01                         	dc.b	$01
000903D0 E1FB                       	smpsAlterNote       $FB
000903D2 01                         	dc.b	$01
000903D3 E1FD                       	smpsAlterNote       $FD
000903D5 ECF5                       	smpsPSGAlterVol     $F5
000903D7 9406                       	dc.b	nG1, $06
000903D9 EC0B                       	smpsPSGAlterVol     $0B
000903DB 8004                       	dc.b	nRst, $04
000903DD ECF5                       	smpsPSGAlterVol     $F5
000903DF 9406                       	dc.b	nG1, $06
000903E1 EC04                       	smpsPSGAlterVol     $04
000903E3 E701                       	dc.b	smpsNoAttack, $01
000903E5 EC07                       	smpsPSGAlterVol     $07
000903E7 8006                       	dc.b	nRst, $06
000903E9 E100                       	smpsAlterNote       $00
000903EB 01                         	dc.b	$01
000903EC E104                       	smpsAlterNote       $04
000903EE 01                         	dc.b	$01
000903EF E100                       	smpsAlterNote       $00
000903F1 01                         	dc.b	$01
000903F2 E1F9                       	smpsAlterNote       $F9
000903F4 01                         	dc.b	$01
000903F5 E1FD                       	smpsAlterNote       $FD
000903F7 ECF5                       	smpsPSGAlterVol     $F5
000903F9 9206                       	dc.b	nF1, $06
000903FB EC04                       	smpsPSGAlterVol     $04
000903FD E701                       	dc.b	smpsNoAttack, $01
000903FF EC07                       	smpsPSGAlterVol     $07
00090401 8003                       	dc.b	nRst, $03
00090403 ECF5                       	smpsPSGAlterVol     $F5
00090405 9207                       	dc.b	nF1, $07
00090407 EC0B                       	smpsPSGAlterVol     $0B
00090409 8006                       	dc.b	nRst, $06
0009040B E100                       	smpsAlterNote       $00
0009040D 01                         	dc.b	$01
0009040E E104                       	smpsAlterNote       $04
00090410 01                         	dc.b	$01
00090411 E103                       	smpsAlterNote       $03
00090413 01                         	dc.b	$01
00090414 E1FD                       	smpsAlterNote       $FD
00090416 01                         	dc.b	$01
00090417 ECF5                       	smpsPSGAlterVol     $F5
00090419 9207                       	dc.b	nF1, $07
0009041B EC0B                       	smpsPSGAlterVol     $0B
0009041D 8004                       	dc.b	nRst, $04
0009041F ECF5                       	smpsPSGAlterVol     $F5
00090421 9206                       	dc.b	nF1, $06
00090423 EC0B                       	smpsPSGAlterVol     $0B
00090425 8007                       	dc.b	nRst, $07
00090427 E103                       	smpsAlterNote       $03
00090429 0101                       	dc.b	$01, $01
0009042B E100                       	smpsAlterNote       $00
0009042D 01                         	dc.b	$01
0009042E E1FA                       	smpsAlterNote       $FA
00090430 01                         	dc.b	$01
00090431 E1FD                       	smpsAlterNote       $FD
00090433 ECF5                       	smpsPSGAlterVol     $F5
00090435 9206                       	dc.b	nF1, $06
00090437 EC04                       	smpsPSGAlterVol     $04
00090439 E701                       	dc.b	smpsNoAttack, $01
0009043B EC07                       	smpsPSGAlterVol     $07
0009043D 8003                       	dc.b	nRst, $03
0009043F ECF5                       	smpsPSGAlterVol     $F5
00090441 9206                       	dc.b	nF1, $06
00090443 EC04                       	smpsPSGAlterVol     $04
00090445 E701                       	dc.b	smpsNoAttack, $01
00090447 EC07                       	smpsPSGAlterVol     $07
00090449 8006                       	dc.b	nRst, $06
0009044B E100                       	smpsAlterNote       $00
0009044D 01                         	dc.b	$01
0009044E E104                       	smpsAlterNote       $04
00090450 01                         	dc.b	$01
00090451 E100                       	smpsAlterNote       $00
00090453 01                         	dc.b	$01
00090454 E1FD                       	smpsAlterNote       $FD
00090456 01                         	dc.b	$01
00090457 ECF5                       	smpsPSGAlterVol     $F5
00090459 9206                       	dc.b	nF1, $06
0009045B EC04                       	smpsPSGAlterVol     $04
0009045D E701                       	dc.b	smpsNoAttack, $01
0009045F EC07                       	smpsPSGAlterVol     $07
00090461 8003                       	dc.b	nRst, $03
00090463 ECF5                       	smpsPSGAlterVol     $F5
00090465 9207                       	dc.b	nF1, $07
00090467 EC0B                       	smpsPSGAlterVol     $0B
00090469 8007                       	dc.b	nRst, $07
0009046B E103                       	smpsAlterNote       $03
0009046D 0101                       	dc.b	$01, $01
0009046F E1FD                       	smpsAlterNote       $FD
00090471 01                         	dc.b	$01
00090472 E1FA                       	smpsAlterNote       $FA
00090474 01                         	dc.b	$01
00090475 E1FD                       	smpsAlterNote       $FD
00090477 ECF5                       	smpsPSGAlterVol     $F5
00090479 9206                       	dc.b	nF1, $06
0009047B EC0B                       	smpsPSGAlterVol     $0B
0009047D 8004                       	dc.b	nRst, $04
0009047F ECF5                       	smpsPSGAlterVol     $F5
00090481 9206                       	dc.b	nF1, $06
00090483 EC04                       	smpsPSGAlterVol     $04
00090485 E701                       	dc.b	smpsNoAttack, $01
00090487 EC07                       	smpsPSGAlterVol     $07
00090489 8006                       	dc.b	nRst, $06
0009048B E103                       	smpsAlterNote       $03
0009048D 01                         	dc.b	$01
0009048E E104                       	smpsAlterNote       $04
00090490 01                         	dc.b	$01
00090491 E100                       	smpsAlterNote       $00
00090493 01                         	dc.b	$01
00090494 E1FA                       	smpsAlterNote       $FA
00090496 01                         	dc.b	$01
00090497 E1FD                       	smpsAlterNote       $FD
00090499 ECF5                       	smpsPSGAlterVol     $F5
0009049B 9206                       	dc.b	nF1, $06
0009049D EC04                       	smpsPSGAlterVol     $04
0009049F E701                       	dc.b	smpsNoAttack, $01
000904A1 EC07                       	smpsPSGAlterVol     $07
000904A3 8003                       	dc.b	nRst, $03
000904A5 ECF5                       	smpsPSGAlterVol     $F5
000904A7 9206                       	dc.b	nF1, $06
000904A9 EC04                       	smpsPSGAlterVol     $04
000904AB E701                       	dc.b	smpsNoAttack, $01
000904AD EC07                       	smpsPSGAlterVol     $07
000904AF 8006                       	dc.b	nRst, $06
000904B1 E100                       	smpsAlterNote       $00
000904B3 01                         	dc.b	$01
000904B4 E104                       	smpsAlterNote       $04
000904B6 01                         	dc.b	$01
000904B7 E103                       	smpsAlterNote       $03
000904B9 01                         	dc.b	$01
000904BA E1FD                       	smpsAlterNote       $FD
000904BC 01                         	dc.b	$01
000904BD ECF5                       	smpsPSGAlterVol     $F5
000904BF 9107                       	dc.b	nE1, $07
000904C1 EC0B                       	smpsPSGAlterVol     $0B
000904C3 8004                       	dc.b	nRst, $04
000904C5 ECF5                       	smpsPSGAlterVol     $F5
000904C7 9106                       	dc.b	nE1, $06
000904C9 EC0B                       	smpsPSGAlterVol     $0B
000904CB 8007                       	dc.b	nRst, $07
000904CD E103                       	smpsAlterNote       $03
000904CF 0101                       	dc.b	$01, $01
000904D1 E100                       	smpsAlterNote       $00
000904D3 01                         	dc.b	$01
000904D4 E1FA                       	smpsAlterNote       $FA
000904D6 01                         	dc.b	$01
000904D7 E1FD                       	smpsAlterNote       $FD
000904D9 ECF5                       	smpsPSGAlterVol     $F5
000904DB 9106                       	dc.b	nE1, $06
000904DD EC04                       	smpsPSGAlterVol     $04
000904DF E701                       	dc.b	smpsNoAttack, $01
000904E1 EC07                       	smpsPSGAlterVol     $07
000904E3 8003                       	dc.b	nRst, $03
000904E5 ECF5                       	smpsPSGAlterVol     $F5
000904E7 9106                       	dc.b	nE1, $06
000904E9 EC04                       	smpsPSGAlterVol     $04
000904EB E701                       	dc.b	smpsNoAttack, $01
000904ED EC07                       	smpsPSGAlterVol     $07
000904EF 8006                       	dc.b	nRst, $06
000904F1 E100                       	smpsAlterNote       $00
000904F3 01                         	dc.b	$01
000904F4 E104                       	smpsAlterNote       $04
000904F6 01                         	dc.b	$01
000904F7 E100                       	smpsAlterNote       $00
000904F9 01                         	dc.b	$01
000904FA E1FA                       	smpsAlterNote       $FA
000904FC 01                         	dc.b	$01
000904FD E1FD                       	smpsAlterNote       $FD
000904FF ECF5                       	smpsPSGAlterVol     $F5
00090501 9106                       	dc.b	nE1, $06
00090503 EC04                       	smpsPSGAlterVol     $04
00090505 E701                       	dc.b	smpsNoAttack, $01
00090507 EC07                       	smpsPSGAlterVol     $07
00090509 8003                       	dc.b	nRst, $03
0009050B ECF5                       	smpsPSGAlterVol     $F5
0009050D 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090511 EC04                       	smpsPSGAlterVol     $04
00090513 E701                       	dc.b	smpsNoAttack, $01
00090515 ECFC                       	smpsPSGAlterVol     $FC
00090517 9103 9103                  	dc.b	nE1, $03, nE1, $03
0009051B EC04                       	smpsPSGAlterVol     $04
0009051D E701                       	dc.b	smpsNoAttack, $01
0009051F ECFC                       	smpsPSGAlterVol     $FC
00090521 9106                       	dc.b	nE1, $06
00090523 EC04                       	smpsPSGAlterVol     $04
00090525 E701                       	dc.b	smpsNoAttack, $01
00090527 EC07                       	smpsPSGAlterVol     $07
00090529 8006                       	dc.b	nRst, $06
0009052B E100                       	smpsAlterNote       $00
0009052D 01                         	dc.b	$01
0009052E E104                       	smpsAlterNote       $04
00090530 01                         	dc.b	$01
00090531 E100                       	smpsAlterNote       $00
00090533 01                         	dc.b	$01
00090534 E1FA                       	smpsAlterNote       $FA
00090536 01                         	dc.b	$01
00090537 E1F9                       	smpsAlterNote       $F9
00090539 01                         	dc.b	$01
0009053A E1FD                       	smpsAlterNote       $FD
0009053C 01                         	dc.b	$01
0009053D E103                       	smpsAlterNote       $03
0009053F 01                         	dc.b	$01
00090540 E104                       	smpsAlterNote       $04
00090542 01                         	dc.b	$01
00090543 E100                       	smpsAlterNote       $00
00090545 01                         	dc.b	$01
00090546 E1FA                       	smpsAlterNote       $FA
00090548 0101                       	dc.b	$01, $01
0009054A E1FD                       	smpsAlterNote       $FD
0009054C ECF5                       	smpsPSGAlterVol     $F5
0009054E 9206                       	dc.b	nF1, $06
00090550 EC04                       	smpsPSGAlterVol     $04
00090552 E701                       	dc.b	smpsNoAttack, $01
00090554 EC07                       	smpsPSGAlterVol     $07
00090556 8003                       	dc.b	nRst, $03
00090558 ECF5                       	smpsPSGAlterVol     $F5
0009055A 9206                       	dc.b	nF1, $06
0009055C EC04                       	smpsPSGAlterVol     $04
0009055E E701                       	dc.b	smpsNoAttack, $01
00090560 EC07                       	smpsPSGAlterVol     $07
00090562 8006                       	dc.b	nRst, $06
00090564 E100                       	smpsAlterNote       $00
00090566 01                         	dc.b	$01
00090567 E104                       	smpsAlterNote       $04
00090569 01                         	dc.b	$01
0009056A E103                       	smpsAlterNote       $03
0009056C 01                         	dc.b	$01
0009056D E1FD                       	smpsAlterNote       $FD
0009056F 01                         	dc.b	$01
00090570 ECF5                       	smpsPSGAlterVol     $F5
00090572 9407                       	dc.b	nG1, $07
00090574 EC0B                       	smpsPSGAlterVol     $0B
00090576 8004                       	dc.b	nRst, $04
00090578 ECF5                       	smpsPSGAlterVol     $F5
0009057A 9406                       	dc.b	nG1, $06
0009057C EC0B                       	smpsPSGAlterVol     $0B
0009057E 8007                       	dc.b	nRst, $07
00090580 E103                       	smpsAlterNote       $03
00090582 0101                       	dc.b	$01, $01
00090584 E1FD                       	smpsAlterNote       $FD
00090586 01                         	dc.b	$01
00090587 E1F9                       	smpsAlterNote       $F9
00090589 01                         	dc.b	$01
0009058A E1FD                       	smpsAlterNote       $FD
0009058C ECF5                       	smpsPSGAlterVol     $F5
0009058E 9206                       	dc.b	nF1, $06
00090590 EC04                       	smpsPSGAlterVol     $04
00090592 E701                       	dc.b	smpsNoAttack, $01
00090594 EC07                       	smpsPSGAlterVol     $07
00090596 8003                       	dc.b	nRst, $03
00090598 ECF5                       	smpsPSGAlterVol     $F5
0009059A 9206                       	dc.b	nF1, $06
0009059C EC04                       	smpsPSGAlterVol     $04
0009059E E701                       	dc.b	smpsNoAttack, $01
000905A0 EC07                       	smpsPSGAlterVol     $07
000905A2 8006                       	dc.b	nRst, $06
000905A4 E100                       	smpsAlterNote       $00
000905A6 01                         	dc.b	$01
000905A7 E104                       	smpsAlterNote       $04
000905A9 01                         	dc.b	$01
000905AA E100                       	smpsAlterNote       $00
000905AC 01                         	dc.b	$01
000905AD E1FA                       	smpsAlterNote       $FA
000905AF 01                         	dc.b	$01
000905B0 E1FD                       	smpsAlterNote       $FD
000905B2 ECF5                       	smpsPSGAlterVol     $F5
000905B4 9206                       	dc.b	nF1, $06
000905B6 EC04                       	smpsPSGAlterVol     $04
000905B8 E701                       	dc.b	smpsNoAttack, $01
000905BA EC07                       	smpsPSGAlterVol     $07
000905BC 8003                       	dc.b	nRst, $03
000905BE ECF5                       	smpsPSGAlterVol     $F5
000905C0 9107                       	dc.b	nE1, $07
000905C2 EC0B                       	smpsPSGAlterVol     $0B
000905C4 8006                       	dc.b	nRst, $06
000905C6 E100                       	smpsAlterNote       $00
000905C8 01                         	dc.b	$01
000905C9 E103                       	smpsAlterNote       $03
000905CB 0101                       	dc.b	$01, $01
000905CD E1FD                       	smpsAlterNote       $FD
000905CF 01                         	dc.b	$01
000905D0 ECF5                       	smpsPSGAlterVol     $F5
000905D2 9207                       	dc.b	nF1, $07
000905D4 EC0B                       	smpsPSGAlterVol     $0B
000905D6 8004                       	dc.b	nRst, $04
000905D8 ECF5                       	smpsPSGAlterVol     $F5
000905DA 9206                       	dc.b	nF1, $06
000905DC EC04                       	smpsPSGAlterVol     $04
000905DE E701                       	dc.b	smpsNoAttack, $01
000905E0 EC07                       	smpsPSGAlterVol     $07
000905E2 8006                       	dc.b	nRst, $06
000905E4 E103                       	smpsAlterNote       $03
000905E6 01                         	dc.b	$01
000905E7 E104                       	smpsAlterNote       $04
000905E9 01                         	dc.b	$01
000905EA E100                       	smpsAlterNote       $00
000905EC 01                         	dc.b	$01
000905ED E1FB                       	smpsAlterNote       $FB
000905EF 01                         	dc.b	$01
000905F0 E1FD                       	smpsAlterNote       $FD
000905F2 ECF5                       	smpsPSGAlterVol     $F5
000905F4 9406                       	dc.b	nG1, $06
000905F6 EC04                       	smpsPSGAlterVol     $04
000905F8 E701                       	dc.b	smpsNoAttack, $01
000905FA EC07                       	smpsPSGAlterVol     $07
000905FC 8003                       	dc.b	nRst, $03
000905FE ECF5                       	smpsPSGAlterVol     $F5
00090600 9406                       	dc.b	nG1, $06
00090602 EC04                       	smpsPSGAlterVol     $04
00090604 E701                       	dc.b	smpsNoAttack, $01
00090606 EC07                       	smpsPSGAlterVol     $07
00090608 8006                       	dc.b	nRst, $06
0009060A E100                       	smpsAlterNote       $00
0009060C 01                         	dc.b	$01
0009060D E104                       	smpsAlterNote       $04
0009060F 01                         	dc.b	$01
00090610 E100                       	smpsAlterNote       $00
00090612 01                         	dc.b	$01
00090613 E1FD                       	smpsAlterNote       $FD
00090615 01                         	dc.b	$01
00090616 ECF5                       	smpsPSGAlterVol     $F5
00090618 9206                       	dc.b	nF1, $06
0009061A EC04                       	smpsPSGAlterVol     $04
0009061C E701                       	dc.b	smpsNoAttack, $01
0009061E EC07                       	smpsPSGAlterVol     $07
00090620 8003                       	dc.b	nRst, $03
00090622 ECF5                       	smpsPSGAlterVol     $F5
00090624 9207                       	dc.b	nF1, $07
00090626 EC0B                       	smpsPSGAlterVol     $0B
00090628 8007                       	dc.b	nRst, $07
0009062A E103                       	smpsAlterNote       $03
0009062C 0101                       	dc.b	$01, $01
0009062E E1FD                       	smpsAlterNote       $FD
00090630 01                         	dc.b	$01
00090631 E1FA                       	smpsAlterNote       $FA
00090633 01                         	dc.b	$01
00090634 E1FD                       	smpsAlterNote       $FD
00090636 ECF5                       	smpsPSGAlterVol     $F5
00090638 9206                       	dc.b	nF1, $06
0009063A EC0B                       	smpsPSGAlterVol     $0B
0009063C 8004                       	dc.b	nRst, $04
0009063E ECF5                       	smpsPSGAlterVol     $F5
00090640 9206                       	dc.b	nF1, $06
00090642 EC04                       	smpsPSGAlterVol     $04
00090644 E701                       	dc.b	smpsNoAttack, $01
00090646 EC07                       	smpsPSGAlterVol     $07
00090648 8006                       	dc.b	nRst, $06
0009064A E100                       	smpsAlterNote       $00
0009064C 01                         	dc.b	$01
0009064D E104                       	smpsAlterNote       $04
0009064F 01                         	dc.b	$01
00090650 E100                       	smpsAlterNote       $00
00090652 01                         	dc.b	$01
00090653 E1FA                       	smpsAlterNote       $FA
00090655 01                         	dc.b	$01
00090656 E1FD                       	smpsAlterNote       $FD
00090658 ECF5                       	smpsPSGAlterVol     $F5
0009065A 9206                       	dc.b	nF1, $06
0009065C EC04                       	smpsPSGAlterVol     $04
0009065E E704                       	dc.b	smpsNoAttack, $04
00090660 ECFC                       	smpsPSGAlterVol     $FC
00090662 9207                       	dc.b	nF1, $07
00090664 EC0B                       	smpsPSGAlterVol     $0B
00090666 8006                       	dc.b	nRst, $06
00090668 E100                       	smpsAlterNote       $00
0009066A 01                         	dc.b	$01
0009066B E104                       	smpsAlterNote       $04
0009066D 01                         	dc.b	$01
0009066E E103                       	smpsAlterNote       $03
00090670 01                         	dc.b	$01
00090671 E1FD                       	smpsAlterNote       $FD
00090673 01                         	dc.b	$01
00090674 ECF5                       	smpsPSGAlterVol     $F5
00090676 9207                       	dc.b	nF1, $07
00090678 EC0B                       	smpsPSGAlterVol     $0B
0009067A 8004                       	dc.b	nRst, $04
0009067C ECF5                       	smpsPSGAlterVol     $F5
0009067E 9206                       	dc.b	nF1, $06
00090680 EC0B                       	smpsPSGAlterVol     $0B
00090682 8007                       	dc.b	nRst, $07
00090684 E103                       	smpsAlterNote       $03
00090686 0101                       	dc.b	$01, $01
00090688 E100                       	smpsAlterNote       $00
0009068A 01                         	dc.b	$01
0009068B E1FA                       	smpsAlterNote       $FA
0009068D 01                         	dc.b	$01
0009068E E1FD                       	smpsAlterNote       $FD
00090690 ECF5                       	smpsPSGAlterVol     $F5
00090692 9206                       	dc.b	nF1, $06
00090694 EC04                       	smpsPSGAlterVol     $04
00090696 E704                       	dc.b	smpsNoAttack, $04
00090698 ECFC                       	smpsPSGAlterVol     $FC
0009069A 9206                       	dc.b	nF1, $06
0009069C EC04                       	smpsPSGAlterVol     $04
0009069E E701                       	dc.b	smpsNoAttack, $01
000906A0 EC07                       	smpsPSGAlterVol     $07
000906A2 8006                       	dc.b	nRst, $06
000906A4 E100                       	smpsAlterNote       $00
000906A6 01                         	dc.b	$01
000906A7 E104                       	smpsAlterNote       $04
000906A9 01                         	dc.b	$01
000906AA E100                       	smpsAlterNote       $00
000906AC 01                         	dc.b	$01
000906AD E1FD                       	smpsAlterNote       $FD
000906AF 01                         	dc.b	$01
000906B0 ECF5                       	smpsPSGAlterVol     $F5
000906B2 9206                       	dc.b	nF1, $06
000906B4 EC04                       	smpsPSGAlterVol     $04
000906B6 E701                       	dc.b	smpsNoAttack, $01
000906B8 EC07                       	smpsPSGAlterVol     $07
000906BA 8003                       	dc.b	nRst, $03
000906BC ECF5                       	smpsPSGAlterVol     $F5
000906BE 9207                       	dc.b	nF1, $07
000906C0 EC0B                       	smpsPSGAlterVol     $0B
000906C2 8007                       	dc.b	nRst, $07
000906C4 E103                       	smpsAlterNote       $03
000906C6 0101                       	dc.b	$01, $01
000906C8 E1FD                       	smpsAlterNote       $FD
000906CA 01                         	dc.b	$01
000906CB E1FA                       	smpsAlterNote       $FA
000906CD 01                         	dc.b	$01
000906CE E1FD                       	smpsAlterNote       $FD
000906D0 ECF5                       	smpsPSGAlterVol     $F5
000906D2 9106                       	dc.b	nE1, $06
000906D4 EC0B                       	smpsPSGAlterVol     $0B
000906D6 8004                       	dc.b	nRst, $04
000906D8 ECF5                       	smpsPSGAlterVol     $F5
000906DA 9106                       	dc.b	nE1, $06
000906DC EC04                       	smpsPSGAlterVol     $04
000906DE E701                       	dc.b	smpsNoAttack, $01
000906E0 EC07                       	smpsPSGAlterVol     $07
000906E2 8006                       	dc.b	nRst, $06
000906E4 E100                       	smpsAlterNote       $00
000906E6 01                         	dc.b	$01
000906E7 E104                       	smpsAlterNote       $04
000906E9 01                         	dc.b	$01
000906EA E100                       	smpsAlterNote       $00
000906EC 01                         	dc.b	$01
000906ED E1FA                       	smpsAlterNote       $FA
000906EF 01                         	dc.b	$01
000906F0 E1FD                       	smpsAlterNote       $FD
000906F2 ECF5                       	smpsPSGAlterVol     $F5
000906F4 9106                       	dc.b	nE1, $06
000906F6 EC04                       	smpsPSGAlterVol     $04
000906F8 E701                       	dc.b	smpsNoAttack, $01
000906FA EC07                       	smpsPSGAlterVol     $07
000906FC 8003                       	dc.b	nRst, $03
000906FE ECF5                       	smpsPSGAlterVol     $F5
00090700 9106                       	dc.b	nE1, $06
00090702 EC04                       	smpsPSGAlterVol     $04
00090704 E701                       	dc.b	smpsNoAttack, $01
00090706 EC07                       	smpsPSGAlterVol     $07
00090708 8006                       	dc.b	nRst, $06
0009070A E100                       	smpsAlterNote       $00
0009070C 01                         	dc.b	$01
0009070D E104                       	smpsAlterNote       $04
0009070F 01                         	dc.b	$01
00090710 E103                       	smpsAlterNote       $03
00090712 01                         	dc.b	$01
00090713 E1FD                       	smpsAlterNote       $FD
00090715 01                         	dc.b	$01
00090716 ECF5                       	smpsPSGAlterVol     $F5
00090718 9107                       	dc.b	nE1, $07
0009071A EC0B                       	smpsPSGAlterVol     $0B
0009071C 8004                       	dc.b	nRst, $04
0009071E ECF5                       	smpsPSGAlterVol     $F5
00090720 9106                       	dc.b	nE1, $06
00090722 EC0B                       	smpsPSGAlterVol     $0B
00090724 8007                       	dc.b	nRst, $07
00090726 E103                       	smpsAlterNote       $03
00090728 0101                       	dc.b	$01, $01
0009072A E100                       	smpsAlterNote       $00
0009072C 01                         	dc.b	$01
0009072D E1FA                       	smpsAlterNote       $FA
0009072F 01                         	dc.b	$01
00090730 E1FD                       	smpsAlterNote       $FD
00090732 ECF5                       	smpsPSGAlterVol     $F5
00090734 9106                       	dc.b	nE1, $06
00090736 EC04                       	smpsPSGAlterVol     $04
00090738 E701                       	dc.b	smpsNoAttack, $01
0009073A EC07                       	smpsPSGAlterVol     $07
0009073C 8003                       	dc.b	nRst, $03
0009073E ECF5                       	smpsPSGAlterVol     $F5
00090740 9106                       	dc.b	nE1, $06
00090742 EC04                       	smpsPSGAlterVol     $04
00090744 E701                       	dc.b	smpsNoAttack, $01
00090746 EC07                       	smpsPSGAlterVol     $07
00090748 8003                       	dc.b	nRst, $03
0009074A ECF5                       	smpsPSGAlterVol     $F5
0009074C 9207                       	dc.b	nF1, $07
0009074E EC0B                       	smpsPSGAlterVol     $0B
00090750 8006                       	dc.b	nRst, $06
00090752 E100                       	smpsAlterNote       $00
00090754 01                         	dc.b	$01
00090755 E104                       	smpsAlterNote       $04
00090757 01                         	dc.b	$01
00090758 E103                       	smpsAlterNote       $03
0009075A 01                         	dc.b	$01
0009075B E1FD                       	smpsAlterNote       $FD
0009075D 01                         	dc.b	$01
0009075E E1F9                       	smpsAlterNote       $F9
00090760 01                         	dc.b	$01
00090761 E1FD                       	smpsAlterNote       $FD
00090763 01                         	dc.b	$01
00090764 E100                       	smpsAlterNote       $00
00090766 01                         	dc.b	$01
00090767 E104                       	smpsAlterNote       $04
00090769 01                         	dc.b	$01
0009076A E1FD                       	smpsAlterNote       $FD
0009076C ECF5                       	smpsPSGAlterVol     $F5
0009076E 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090772 EC04                       	smpsPSGAlterVol     $04
00090774 E701                       	dc.b	smpsNoAttack, $01
00090776 EC07                       	smpsPSGAlterVol     $07
00090778 8009                       	dc.b	nRst, $09
0009077A E100                       	smpsAlterNote       $00
0009077C 01                         	dc.b	$01
0009077D E104                       	smpsAlterNote       $04
0009077F 01                         	dc.b	$01
00090780 E103                       	smpsAlterNote       $03
00090782 01                         	dc.b	$01
00090783 E1FD                       	smpsAlterNote       $FD
00090785 01                         	dc.b	$01
00090786 E1F9                       	smpsAlterNote       $F9
00090788 01                         	dc.b	$01
00090789 E1FD                       	smpsAlterNote       $FD
0009078B 01                         	dc.b	$01
0009078C E100                       	smpsAlterNote       $00
0009078E 01                         	dc.b	$01
0009078F E104                       	smpsAlterNote       $04
00090791 01                         	dc.b	$01
00090792 E100                       	smpsAlterNote       $00
00090794 01                         	dc.b	$01
00090795 E1FA                       	smpsAlterNote       $FA
00090797 01                         	dc.b	$01
00090798 E1F9                       	smpsAlterNote       $F9
0009079A 01                         	dc.b	$01
0009079B E1FD                       	smpsAlterNote       $FD
0009079D 01                         	dc.b	$01
0009079E E103                       	smpsAlterNote       $03
000907A0 0101                       	dc.b	$01, $01
000907A2 E100                       	smpsAlterNote       $00
000907A4 01                         	dc.b	$01
000907A5 E1FD                       	smpsAlterNote       $FD
000907A7 ECF5                       	smpsPSGAlterVol     $F5
000907A9 9202                       	dc.b	nF1, $02
000907AB EC04                       	smpsPSGAlterVol     $04
000907AD E701                       	dc.b	smpsNoAttack, $01
000907AF ECFC                       	smpsPSGAlterVol     $FC
000907B1 9106                       	dc.b	nE1, $06
000907B3 EC04                       	smpsPSGAlterVol     $04
000907B5 E701                       	dc.b	smpsNoAttack, $01
000907B7 EC07                       	smpsPSGAlterVol     $07
000907B9 8006                       	dc.b	nRst, $06
000907BB E100                       	smpsAlterNote       $00
000907BD 01                         	dc.b	$01
000907BE E104                       	smpsAlterNote       $04
000907C0 01                         	dc.b	$01
000907C1 E100                       	smpsAlterNote       $00
000907C3 01                         	dc.b	$01
000907C4 E1FD                       	smpsAlterNote       $FD
000907C6 01                         	dc.b	$01
000907C7 E1F9                       	smpsAlterNote       $F9
000907C9 01                         	dc.b	$01
000907CA E1FD                       	smpsAlterNote       $FD
000907CC 01                         	dc.b	$01
000907CD E103                       	smpsAlterNote       $03
000907CF 01                         	dc.b	$01
000907D0 E104                       	smpsAlterNote       $04
000907D2 01                         	dc.b	$01
000907D3 E1FD                       	smpsAlterNote       $FD
000907D5 ECF5                       	smpsPSGAlterVol     $F5
000907D7 9102                       	dc.b	nE1, $02
000907D9 EC04                       	smpsPSGAlterVol     $04
000907DB E701                       	dc.b	smpsNoAttack, $01
000907DD ECFC                       	smpsPSGAlterVol     $FC
000907DF 920D                       	dc.b	nF1, $0D
000907E1 E100                       	smpsAlterNote       $00
000907E3 E701                       	dc.b	smpsNoAttack, $01
000907E5 E104                       	smpsAlterNote       $04
000907E7 E701                       	dc.b	smpsNoAttack, $01
000907E9 E100                       	smpsAlterNote       $00
000907EB E701                       	dc.b	smpsNoAttack, $01
000907ED E1FD                       	smpsAlterNote       $FD
000907EF E701                       	dc.b	smpsNoAttack, $01
000907F1 E1F9                       	smpsAlterNote       $F9
000907F3 E701                       	dc.b	smpsNoAttack, $01
000907F5 E1FD                       	smpsAlterNote       $FD
000907F7 E701                       	dc.b	smpsNoAttack, $01
000907F9 E103                       	smpsAlterNote       $03
000907FB E701                       	dc.b	smpsNoAttack, $01
000907FD E104                       	smpsAlterNote       $04
000907FF E701                       	dc.b	smpsNoAttack, $01
00090801 E100                       	smpsAlterNote       $00
00090803 E701                       	dc.b	smpsNoAttack, $01
00090805 E1FA                       	smpsAlterNote       $FA
00090807 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009080B E1FD                       	smpsAlterNote       $FD
0009080D E701                       	dc.b	smpsNoAttack, $01
0009080F E103                       	smpsAlterNote       $03
00090811 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090815 E1FD                       	smpsAlterNote       $FD
00090817 E701                       	dc.b	smpsNoAttack, $01
00090819 E1F9                       	smpsAlterNote       $F9
0009081B E701                       	dc.b	smpsNoAttack, $01
0009081D E1FA                       	smpsAlterNote       $FA
0009081F E701                       	dc.b	smpsNoAttack, $01
00090821 E100                       	smpsAlterNote       $00
00090823 EC04                       	smpsPSGAlterVol     $04
00090825 E701                       	dc.b	smpsNoAttack, $01
00090827 EC07                       	smpsPSGAlterVol     $07
00090829 E104                       	smpsAlterNote       $04
0009082B 8001                       	dc.b	nRst, $01
0009082D E100                       	smpsAlterNote       $00
0009082F 01                         	dc.b	$01
00090830 E1FD                       	smpsAlterNote       $FD
00090832 01                         	dc.b	$01
00090833 E1F9                       	smpsAlterNote       $F9
00090835 01                         	dc.b	$01
00090836 E1FD                       	smpsAlterNote       $FD
00090838 01                         	dc.b	$01
00090839 E103                       	smpsAlterNote       $03
0009083B 01                         	dc.b	$01
0009083C E104                       	smpsAlterNote       $04
0009083E 01                         	dc.b	$01
0009083F E1FD                       	smpsAlterNote       $FD
00090841 ECF5                       	smpsPSGAlterVol     $F5
00090843 9106                       	dc.b	nE1, $06
00090845 EC04                       	smpsPSGAlterVol     $04
00090847 E701                       	dc.b	smpsNoAttack, $01
00090849 EC07                       	smpsPSGAlterVol     $07
0009084B 8003                       	dc.b	nRst, $03
0009084D ECF5                       	smpsPSGAlterVol     $F5
0009084F 9106                       	dc.b	nE1, $06
00090851 EC04                       	smpsPSGAlterVol     $04
00090853 E701                       	dc.b	smpsNoAttack, $01
00090855 EC07                       	smpsPSGAlterVol     $07
00090857 8006                       	dc.b	nRst, $06
00090859 E100                       	smpsAlterNote       $00
0009085B 01                         	dc.b	$01
0009085C E104                       	smpsAlterNote       $04
0009085E 01                         	dc.b	$01
0009085F E100                       	smpsAlterNote       $00
00090861 01                         	dc.b	$01
00090862 E1FA                       	smpsAlterNote       $FA
00090864 01                         	dc.b	$01
00090865 E1FD                       	smpsAlterNote       $FD
00090867 ECF5                       	smpsPSGAlterVol     $F5
00090869 9206                       	dc.b	nF1, $06
0009086B EC04                       	smpsPSGAlterVol     $04
0009086D E701                       	dc.b	smpsNoAttack, $01
0009086F EC07                       	smpsPSGAlterVol     $07
00090871 8003                       	dc.b	nRst, $03
00090873 ECF5                       	smpsPSGAlterVol     $F5
00090875 9207                       	dc.b	nF1, $07
00090877 EC0B                       	smpsPSGAlterVol     $0B
00090879 8006                       	dc.b	nRst, $06
0009087B E100                       	smpsAlterNote       $00
0009087D 01                         	dc.b	$01
0009087E E103                       	smpsAlterNote       $03
00090880 0101                       	dc.b	$01, $01
00090882 E1FD                       	smpsAlterNote       $FD
00090884 01                         	dc.b	$01
00090885 ECF5                       	smpsPSGAlterVol     $F5
00090887 9107                       	dc.b	nE1, $07
00090889 EC0B                       	smpsPSGAlterVol     $0B
0009088B 8004                       	dc.b	nRst, $04
0009088D ECF5                       	smpsPSGAlterVol     $F5
0009088F 9106                       	dc.b	nE1, $06
00090891 EC04                       	smpsPSGAlterVol     $04
00090893 E701                       	dc.b	smpsNoAttack, $01
00090895 EC07                       	smpsPSGAlterVol     $07
00090897 8006                       	dc.b	nRst, $06
00090899 E103                       	smpsAlterNote       $03
0009089B 01                         	dc.b	$01
0009089C E104                       	smpsAlterNote       $04
0009089E 01                         	dc.b	$01
0009089F E100                       	smpsAlterNote       $00
000908A1 01                         	dc.b	$01
000908A2 E1FA                       	smpsAlterNote       $FA
000908A4 01                         	dc.b	$01
000908A5 E1FD                       	smpsAlterNote       $FD
000908A7 ECF5                       	smpsPSGAlterVol     $F5
000908A9 9106                       	dc.b	nE1, $06
000908AB EC04                       	smpsPSGAlterVol     $04
000908AD E701                       	dc.b	smpsNoAttack, $01
000908AF EC07                       	smpsPSGAlterVol     $07
000908B1 8003                       	dc.b	nRst, $03
000908B3 ECF5                       	smpsPSGAlterVol     $F5
000908B5 9106                       	dc.b	nE1, $06
000908B7 EC04                       	smpsPSGAlterVol     $04
000908B9 E701                       	dc.b	smpsNoAttack, $01
000908BB EC07                       	smpsPSGAlterVol     $07
000908BD 8003                       	dc.b	nRst, $03
000908BF ECF5                       	smpsPSGAlterVol     $F5
000908C1 9207                       	dc.b	nF1, $07
000908C3 EC0B                       	smpsPSGAlterVol     $0B
000908C5 8006                       	dc.b	nRst, $06
000908C7 E100                       	smpsAlterNote       $00
000908C9 01                         	dc.b	$01
000908CA E103                       	smpsAlterNote       $03
000908CC 0101                       	dc.b	$01, $01
000908CE E1FD                       	smpsAlterNote       $FD
000908D0 01                         	dc.b	$01
000908D1 E1F9                       	smpsAlterNote       $F9
000908D3 01                         	dc.b	$01
000908D4 E1FA                       	smpsAlterNote       $FA
000908D6 01                         	dc.b	$01
000908D7 E100                       	smpsAlterNote       $00
000908D9 01                         	dc.b	$01
000908DA E104                       	smpsAlterNote       $04
000908DC 01                         	dc.b	$01
000908DD E1FD                       	smpsAlterNote       $FD
000908DF ECF5                       	smpsPSGAlterVol     $F5
000908E1 9203 9203                  	dc.b	nF1, $03, nF1, $03
000908E5 EC04                       	smpsPSGAlterVol     $04
000908E7 E701                       	dc.b	smpsNoAttack, $01
000908E9 EC07                       	smpsPSGAlterVol     $07
000908EB 8009                       	dc.b	nRst, $09
000908ED E100                       	smpsAlterNote       $00
000908EF 01                         	dc.b	$01
000908F0 E103                       	smpsAlterNote       $03
000908F2 0101                       	dc.b	$01, $01
000908F4 E1FD                       	smpsAlterNote       $FD
000908F6 01                         	dc.b	$01
000908F7 E1F9                       	smpsAlterNote       $F9
000908F9 01                         	dc.b	$01
000908FA E1FA                       	smpsAlterNote       $FA
000908FC 01                         	dc.b	$01
000908FD E100                       	smpsAlterNote       $00
000908FF 01                         	dc.b	$01
00090900 E104                       	smpsAlterNote       $04
00090902 01                         	dc.b	$01
00090903 E100                       	smpsAlterNote       $00
00090905 01                         	dc.b	$01
00090906 E1FD                       	smpsAlterNote       $FD
00090908 01                         	dc.b	$01
00090909 E1F9                       	smpsAlterNote       $F9
0009090B 01                         	dc.b	$01
0009090C E1FD                       	smpsAlterNote       $FD
0009090E 01                         	dc.b	$01
0009090F E103                       	smpsAlterNote       $03
00090911 01                         	dc.b	$01
00090912 E104                       	smpsAlterNote       $04
00090914 01                         	dc.b	$01
00090915 E100                       	smpsAlterNote       $00
00090917 01                         	dc.b	$01
00090918 E1FD                       	smpsAlterNote       $FD
0009091A ECF5                       	smpsPSGAlterVol     $F5
0009091C 9203 9106                  	dc.b	nF1, $03, nE1, $06
00090920 EC04                       	smpsPSGAlterVol     $04
00090922 E701                       	dc.b	smpsNoAttack, $01
00090924 EC07                       	smpsPSGAlterVol     $07
00090926 8006                       	dc.b	nRst, $06
00090928 E100                       	smpsAlterNote       $00
0009092A 01                         	dc.b	$01
0009092B E104                       	smpsAlterNote       $04
0009092D 01                         	dc.b	$01
0009092E E103                       	smpsAlterNote       $03
00090930 01                         	dc.b	$01
00090931 E1FD                       	smpsAlterNote       $FD
00090933 01                         	dc.b	$01
00090934 E1F9                       	smpsAlterNote       $F9
00090936 01                         	dc.b	$01
00090937 E1FD                       	smpsAlterNote       $FD
00090939 01                         	dc.b	$01
0009093A E100                       	smpsAlterNote       $00
0009093C 01                         	dc.b	$01
0009093D E104                       	smpsAlterNote       $04
0009093F 01                         	dc.b	$01
00090940 E1FD                       	smpsAlterNote       $FD
00090942 ECF5                       	smpsPSGAlterVol     $F5
00090944 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090948 E100                       	smpsAlterNote       $00
0009094A E701                       	dc.b	smpsNoAttack, $01
0009094C E104                       	smpsAlterNote       $04
0009094E E701                       	dc.b	smpsNoAttack, $01
00090950 E100                       	smpsAlterNote       $00
00090952 E701                       	dc.b	smpsNoAttack, $01
00090954 E1FD                       	smpsAlterNote       $FD
00090956 E701                       	dc.b	smpsNoAttack, $01
00090958 E1F9                       	smpsAlterNote       $F9
0009095A E701                       	dc.b	smpsNoAttack, $01
0009095C E1FD                       	smpsAlterNote       $FD
0009095E E701                       	dc.b	smpsNoAttack, $01
00090960 E103                       	smpsAlterNote       $03
00090962 E701                       	dc.b	smpsNoAttack, $01
00090964 E104                       	smpsAlterNote       $04
00090966 E701                       	dc.b	smpsNoAttack, $01
00090968 E100                       	smpsAlterNote       $00
0009096A E701                       	dc.b	smpsNoAttack, $01
0009096C E1FA                       	smpsAlterNote       $FA
0009096E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090972 E1FD                       	smpsAlterNote       $FD
00090974 E701                       	dc.b	smpsNoAttack, $01
00090976 E103                       	smpsAlterNote       $03
00090978 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009097C E100                       	smpsAlterNote       $00
0009097E E701                       	dc.b	smpsNoAttack, $01
00090980 E1FA                       	smpsAlterNote       $FA
00090982 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090986 E100                       	smpsAlterNote       $00
00090988 EC04                       	smpsPSGAlterVol     $04
0009098A E701                       	dc.b	smpsNoAttack, $01
0009098C EC07                       	smpsPSGAlterVol     $07
0009098E E104                       	smpsAlterNote       $04
00090990 8001                       	dc.b	nRst, $01
00090992 E103                       	smpsAlterNote       $03
00090994 01                         	dc.b	$01
00090995 E1FD                       	smpsAlterNote       $FD
00090997 01                         	dc.b	$01
00090998 E1F9                       	smpsAlterNote       $F9
0009099A 01                         	dc.b	$01
0009099B E1FD                       	smpsAlterNote       $FD
0009099D 01                         	dc.b	$01
0009099E E100                       	smpsAlterNote       $00
000909A0 01                         	dc.b	$01
000909A1 E104                       	smpsAlterNote       $04
000909A3 01                         	dc.b	$01
000909A4 E1FD                       	smpsAlterNote       $FD
000909A6 ECF5                       	smpsPSGAlterVol     $F5
000909A8 9106                       	dc.b	nE1, $06
000909AA EC04                       	smpsPSGAlterVol     $04
000909AC E701                       	dc.b	smpsNoAttack, $01
000909AE EC07                       	smpsPSGAlterVol     $07
000909B0 8003                       	dc.b	nRst, $03
000909B2 ECF5                       	smpsPSGAlterVol     $F5
000909B4 9106                       	dc.b	nE1, $06
000909B6 EC04                       	smpsPSGAlterVol     $04
000909B8 E701                       	dc.b	smpsNoAttack, $01
000909BA EC07                       	smpsPSGAlterVol     $07
000909BC 8006                       	dc.b	nRst, $06
000909BE E100                       	smpsAlterNote       $00
000909C0 01                         	dc.b	$01
000909C1 E104                       	smpsAlterNote       $04
000909C3 01                         	dc.b	$01
000909C4 E100                       	smpsAlterNote       $00
000909C6 01                         	dc.b	$01
000909C7 E1FD                       	smpsAlterNote       $FD
000909C9 01                         	dc.b	$01
000909CA ECF5                       	smpsPSGAlterVol     $F5
000909CC 9206                       	dc.b	nF1, $06
000909CE EC04                       	smpsPSGAlterVol     $04
000909D0 E701                       	dc.b	smpsNoAttack, $01
000909D2 EC07                       	smpsPSGAlterVol     $07
000909D4 8003                       	dc.b	nRst, $03
000909D6 ECF5                       	smpsPSGAlterVol     $F5
000909D8 9207                       	dc.b	nF1, $07
000909DA EC0B                       	smpsPSGAlterVol     $0B
000909DC 8007                       	dc.b	nRst, $07
000909DE E103                       	smpsAlterNote       $03
000909E0 0101                       	dc.b	$01, $01
000909E2 E1FD                       	smpsAlterNote       $FD
000909E4 01                         	dc.b	$01
000909E5 E1FA                       	smpsAlterNote       $FA
000909E7 01                         	dc.b	$01
000909E8 E1FD                       	smpsAlterNote       $FD
000909EA ECF5                       	smpsPSGAlterVol     $F5
000909EC 9106                       	dc.b	nE1, $06
000909EE EC0B                       	smpsPSGAlterVol     $0B
000909F0 8004                       	dc.b	nRst, $04
000909F2 ECF5                       	smpsPSGAlterVol     $F5
000909F4 9106                       	dc.b	nE1, $06
000909F6 EC04                       	smpsPSGAlterVol     $04
000909F8 E701                       	dc.b	smpsNoAttack, $01
000909FA EC07                       	smpsPSGAlterVol     $07
000909FC 8006                       	dc.b	nRst, $06
000909FE E100                       	smpsAlterNote       $00
00090A00 01                         	dc.b	$01
00090A01 E104                       	smpsAlterNote       $04
00090A03 01                         	dc.b	$01
00090A04 E100                       	smpsAlterNote       $00
00090A06 01                         	dc.b	$01
00090A07 E1FA                       	smpsAlterNote       $FA
00090A09 01                         	dc.b	$01
00090A0A E1FD                       	smpsAlterNote       $FD
00090A0C ECF5                       	smpsPSGAlterVol     $F5
00090A0E 9206                       	dc.b	nF1, $06
00090A10 EC04                       	smpsPSGAlterVol     $04
00090A12 E701                       	dc.b	smpsNoAttack, $01
00090A14 EC07                       	smpsPSGAlterVol     $07
00090A16 8003                       	dc.b	nRst, $03
00090A18 ECF5                       	smpsPSGAlterVol     $F5
00090A1A 9206                       	dc.b	nF1, $06
00090A1C EC04                       	smpsPSGAlterVol     $04
00090A1E E701                       	dc.b	smpsNoAttack, $01
00090A20 EC07                       	smpsPSGAlterVol     $07
00090A22 8006                       	dc.b	nRst, $06
00090A24 E100                       	smpsAlterNote       $00
00090A26 01                         	dc.b	$01
00090A27 E104                       	smpsAlterNote       $04
00090A29 01                         	dc.b	$01
00090A2A E103                       	smpsAlterNote       $03
00090A2C 01                         	dc.b	$01
00090A2D E1FD                       	smpsAlterNote       $FD
00090A2F 01                         	dc.b	$01
00090A30 ECF5                       	smpsPSGAlterVol     $F5
00090A32 9107                       	dc.b	nE1, $07
00090A34 EC0B                       	smpsPSGAlterVol     $0B
00090A36 8004                       	dc.b	nRst, $04
00090A38 ECF5                       	smpsPSGAlterVol     $F5
00090A3A 9106                       	dc.b	nE1, $06
00090A3C EC0B                       	smpsPSGAlterVol     $0B
00090A3E 8007                       	dc.b	nRst, $07
00090A40 E103                       	smpsAlterNote       $03
00090A42 0101                       	dc.b	$01, $01
00090A44 E100                       	smpsAlterNote       $00
00090A46 01                         	dc.b	$01
00090A47 E1FA                       	smpsAlterNote       $FA
00090A49 01                         	dc.b	$01
00090A4A E1FD                       	smpsAlterNote       $FD
00090A4C ECF5                       	smpsPSGAlterVol     $F5
00090A4E 9206                       	dc.b	nF1, $06
00090A50 EC04                       	smpsPSGAlterVol     $04
00090A52 E701                       	dc.b	smpsNoAttack, $01
00090A54 EC07                       	smpsPSGAlterVol     $07
00090A56 8003                       	dc.b	nRst, $03
00090A58 ECF5                       	smpsPSGAlterVol     $F5
00090A5A 9206                       	dc.b	nF1, $06
00090A5C EC04                       	smpsPSGAlterVol     $04
00090A5E E701                       	dc.b	smpsNoAttack, $01
00090A60 EC07                       	smpsPSGAlterVol     $07
00090A62 8006                       	dc.b	nRst, $06
00090A64 E100                       	smpsAlterNote       $00
00090A66 01                         	dc.b	$01
00090A67 E104                       	smpsAlterNote       $04
00090A69 01                         	dc.b	$01
00090A6A E100                       	smpsAlterNote       $00
00090A6C 01                         	dc.b	$01
00090A6D E1FD                       	smpsAlterNote       $FD
00090A6F 01                         	dc.b	$01
00090A70 ECF5                       	smpsPSGAlterVol     $F5
00090A72 9106                       	dc.b	nE1, $06
00090A74 EC04                       	smpsPSGAlterVol     $04
00090A76 E701                       	dc.b	smpsNoAttack, $01
00090A78 EC07                       	smpsPSGAlterVol     $07
00090A7A 8003                       	dc.b	nRst, $03
00090A7C ECF5                       	smpsPSGAlterVol     $F5
00090A7E 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090A82 EC04                       	smpsPSGAlterVol     $04
00090A84 E701                       	dc.b	smpsNoAttack, $01
00090A86 ECFC                       	smpsPSGAlterVol     $FC
00090A88 9103                       	dc.b	nE1, $03
00090A8A EC04                       	smpsPSGAlterVol     $04
00090A8C E701                       	dc.b	smpsNoAttack, $01
00090A8E ECFC                       	smpsPSGAlterVol     $FC
00090A90 9102                       	dc.b	nE1, $02
00090A92 EC04                       	smpsPSGAlterVol     $04
00090A94 E701                       	dc.b	smpsNoAttack, $01
00090A96 ECFC                       	smpsPSGAlterVol     $FC
00090A98 9103                       	dc.b	nE1, $03
00090A9A EC0B                       	smpsPSGAlterVol     $0B
00090A9C 800A                       	dc.b	nRst, $0A
00090A9E E100                       	smpsAlterNote       $00
00090AA0 01                         	dc.b	$01
00090AA1 E104                       	smpsAlterNote       $04
00090AA3 01                         	dc.b	$01
00090AA4 E100                       	smpsAlterNote       $00
00090AA6 01                         	dc.b	$01
00090AA7 E1FA                       	smpsAlterNote       $FA
00090AA9 01                         	dc.b	$01
00090AAA E1F9                       	smpsAlterNote       $F9
00090AAC 01                         	dc.b	$01
00090AAD E1FD                       	smpsAlterNote       $FD
00090AAF 01                         	dc.b	$01
00090AB0 E103                       	smpsAlterNote       $03
00090AB2 0101                       	dc.b	$01, $01
00090AB4 E100                       	smpsAlterNote       $00
00090AB6 01                         	dc.b	$01
00090AB7 E1FA                       	smpsAlterNote       $FA
00090AB9 0101                       	dc.b	$01, $01
00090ABB E1FD                       	smpsAlterNote       $FD
00090ABD ECF5                       	smpsPSGAlterVol     $F5
00090ABF 9206                       	dc.b	nF1, $06
00090AC1 EC04                       	smpsPSGAlterVol     $04
00090AC3 E704                       	dc.b	smpsNoAttack, $04
00090AC5 ECFC                       	smpsPSGAlterVol     $FC
00090AC7 9206                       	dc.b	nF1, $06
00090AC9 EC04                       	smpsPSGAlterVol     $04
00090ACB E701                       	dc.b	smpsNoAttack, $01
00090ACD EC07                       	smpsPSGAlterVol     $07
00090ACF 8006                       	dc.b	nRst, $06
00090AD1 E100                       	smpsAlterNote       $00
00090AD3 01                         	dc.b	$01
00090AD4 E104                       	smpsAlterNote       $04
00090AD6 01                         	dc.b	$01
00090AD7 E103                       	smpsAlterNote       $03
00090AD9 01                         	dc.b	$01
00090ADA E1FD                       	smpsAlterNote       $FD
00090ADC 01                         	dc.b	$01
00090ADD ECF5                       	smpsPSGAlterVol     $F5
00090ADF 9407                       	dc.b	nG1, $07
00090AE1 EC0B                       	smpsPSGAlterVol     $0B
00090AE3 8004                       	dc.b	nRst, $04
00090AE5 ECF5                       	smpsPSGAlterVol     $F5
00090AE7 9406                       	dc.b	nG1, $06
00090AE9 EC0B                       	smpsPSGAlterVol     $0B
00090AEB 8007                       	dc.b	nRst, $07
00090AED E103                       	smpsAlterNote       $03
00090AEF 0101                       	dc.b	$01, $01
00090AF1 E1FD                       	smpsAlterNote       $FD
00090AF3 01                         	dc.b	$01
00090AF4 E1F9                       	smpsAlterNote       $F9
00090AF6 01                         	dc.b	$01
00090AF7 E1FD                       	smpsAlterNote       $FD
00090AF9 ECF5                       	smpsPSGAlterVol     $F5
00090AFB 9206                       	dc.b	nF1, $06
00090AFD EC04                       	smpsPSGAlterVol     $04
00090AFF E701                       	dc.b	smpsNoAttack, $01
00090B01 EC07                       	smpsPSGAlterVol     $07
00090B03 8003                       	dc.b	nRst, $03
00090B05 ECF5                       	smpsPSGAlterVol     $F5
00090B07 9206                       	dc.b	nF1, $06
00090B09 EC04                       	smpsPSGAlterVol     $04
00090B0B E701                       	dc.b	smpsNoAttack, $01
00090B0D EC07                       	smpsPSGAlterVol     $07
00090B0F 8006                       	dc.b	nRst, $06
00090B11 E100                       	smpsAlterNote       $00
00090B13 01                         	dc.b	$01
00090B14 E104                       	smpsAlterNote       $04
00090B16 01                         	dc.b	$01
00090B17 E100                       	smpsAlterNote       $00
00090B19 01                         	dc.b	$01
00090B1A E1FA                       	smpsAlterNote       $FA
00090B1C 01                         	dc.b	$01
00090B1D E1FD                       	smpsAlterNote       $FD
00090B1F ECF5                       	smpsPSGAlterVol     $F5
00090B21 9206                       	dc.b	nF1, $06
00090B23 EC04                       	smpsPSGAlterVol     $04
00090B25 E701                       	dc.b	smpsNoAttack, $01
00090B27 EC07                       	smpsPSGAlterVol     $07
00090B29 8003                       	dc.b	nRst, $03
00090B2B ECF5                       	smpsPSGAlterVol     $F5
00090B2D 9107                       	dc.b	nE1, $07
00090B2F EC0B                       	smpsPSGAlterVol     $0B
00090B31 8006                       	dc.b	nRst, $06
00090B33 E100                       	smpsAlterNote       $00
00090B35 01                         	dc.b	$01
00090B36 E103                       	smpsAlterNote       $03
00090B38 0101                       	dc.b	$01, $01
00090B3A E1FD                       	smpsAlterNote       $FD
00090B3C 01                         	dc.b	$01
00090B3D ECF5                       	smpsPSGAlterVol     $F5
00090B3F 9207                       	dc.b	nF1, $07
00090B41 EC0B                       	smpsPSGAlterVol     $0B
00090B43 8004                       	dc.b	nRst, $04
00090B45 ECF5                       	smpsPSGAlterVol     $F5
00090B47 9206                       	dc.b	nF1, $06
00090B49 EC04                       	smpsPSGAlterVol     $04
00090B4B E701                       	dc.b	smpsNoAttack, $01
00090B4D EC07                       	smpsPSGAlterVol     $07
00090B4F 8006                       	dc.b	nRst, $06
00090B51 E103                       	smpsAlterNote       $03
00090B53 01                         	dc.b	$01
00090B54 E104                       	smpsAlterNote       $04
00090B56 01                         	dc.b	$01
00090B57 E100                       	smpsAlterNote       $00
00090B59 01                         	dc.b	$01
00090B5A E1FB                       	smpsAlterNote       $FB
00090B5C 01                         	dc.b	$01
00090B5D E1FD                       	smpsAlterNote       $FD
00090B5F ECF5                       	smpsPSGAlterVol     $F5
00090B61 9406                       	dc.b	nG1, $06
00090B63 EC04                       	smpsPSGAlterVol     $04
00090B65 E701                       	dc.b	smpsNoAttack, $01
00090B67 EC07                       	smpsPSGAlterVol     $07
00090B69 8003                       	dc.b	nRst, $03
00090B6B ECF5                       	smpsPSGAlterVol     $F5
00090B6D 9406                       	dc.b	nG1, $06
00090B6F EC04                       	smpsPSGAlterVol     $04
00090B71 E701                       	dc.b	smpsNoAttack, $01
00090B73 EC07                       	smpsPSGAlterVol     $07
00090B75 8006                       	dc.b	nRst, $06
00090B77 E100                       	smpsAlterNote       $00
00090B79 01                         	dc.b	$01
00090B7A E104                       	smpsAlterNote       $04
00090B7C 01                         	dc.b	$01
00090B7D E100                       	smpsAlterNote       $00
00090B7F 01                         	dc.b	$01
00090B80 E1FD                       	smpsAlterNote       $FD
00090B82 01                         	dc.b	$01
00090B83 ECF5                       	smpsPSGAlterVol     $F5
00090B85 9206                       	dc.b	nF1, $06
00090B87 EC04                       	smpsPSGAlterVol     $04
00090B89 E701                       	dc.b	smpsNoAttack, $01
00090B8B EC07                       	smpsPSGAlterVol     $07
00090B8D 8003                       	dc.b	nRst, $03
00090B8F ECF5                       	smpsPSGAlterVol     $F5
00090B91 9207                       	dc.b	nF1, $07
00090B93 EC0B                       	smpsPSGAlterVol     $0B
00090B95 8007                       	dc.b	nRst, $07
00090B97 E103                       	smpsAlterNote       $03
00090B99 0101                       	dc.b	$01, $01
00090B9B E1FD                       	smpsAlterNote       $FD
00090B9D 01                         	dc.b	$01
00090B9E E1FA                       	smpsAlterNote       $FA
00090BA0 01                         	dc.b	$01
00090BA1 E1FD                       	smpsAlterNote       $FD
00090BA3 ECF5                       	smpsPSGAlterVol     $F5
00090BA5 9206                       	dc.b	nF1, $06
00090BA7 EC0B                       	smpsPSGAlterVol     $0B
00090BA9 8004                       	dc.b	nRst, $04
00090BAB ECF5                       	smpsPSGAlterVol     $F5
00090BAD 9206                       	dc.b	nF1, $06
00090BAF EC04                       	smpsPSGAlterVol     $04
00090BB1 E701                       	dc.b	smpsNoAttack, $01
00090BB3 EC07                       	smpsPSGAlterVol     $07
00090BB5 8006                       	dc.b	nRst, $06
00090BB7 E100                       	smpsAlterNote       $00
00090BB9 01                         	dc.b	$01
00090BBA E104                       	smpsAlterNote       $04
00090BBC 01                         	dc.b	$01
00090BBD E100                       	smpsAlterNote       $00
00090BBF 01                         	dc.b	$01
00090BC0 E1FA                       	smpsAlterNote       $FA
00090BC2 01                         	dc.b	$01
00090BC3 E1FD                       	smpsAlterNote       $FD
00090BC5 ECF5                       	smpsPSGAlterVol     $F5
00090BC7 9206                       	dc.b	nF1, $06
00090BC9 EC04                       	smpsPSGAlterVol     $04
00090BCB E701                       	dc.b	smpsNoAttack, $01
00090BCD EC07                       	smpsPSGAlterVol     $07
00090BCF 8003                       	dc.b	nRst, $03
00090BD1 ECF5                       	smpsPSGAlterVol     $F5
00090BD3 9207                       	dc.b	nF1, $07
00090BD5 EC0B                       	smpsPSGAlterVol     $0B
00090BD7 8006                       	dc.b	nRst, $06
00090BD9 E100                       	smpsAlterNote       $00
00090BDB 01                         	dc.b	$01
00090BDC E103                       	smpsAlterNote       $03
00090BDE 0101                       	dc.b	$01, $01
00090BE0 E1FD                       	smpsAlterNote       $FD
00090BE2 01                         	dc.b	$01
00090BE3 ECF5                       	smpsPSGAlterVol     $F5
00090BE5 9207                       	dc.b	nF1, $07
00090BE7 EC0B                       	smpsPSGAlterVol     $0B
00090BE9 8004                       	dc.b	nRst, $04
00090BEB ECF5                       	smpsPSGAlterVol     $F5
00090BED 9206                       	dc.b	nF1, $06
00090BEF EC0B                       	smpsPSGAlterVol     $0B
00090BF1 8007                       	dc.b	nRst, $07
00090BF3 E103                       	smpsAlterNote       $03
00090BF5 0101                       	dc.b	$01, $01
00090BF7 E100                       	smpsAlterNote       $00
00090BF9 01                         	dc.b	$01
00090BFA E1FA                       	smpsAlterNote       $FA
00090BFC 01                         	dc.b	$01
00090BFD E1FD                       	smpsAlterNote       $FD
00090BFF ECF5                       	smpsPSGAlterVol     $F5
00090C01 9206                       	dc.b	nF1, $06
00090C03 EC04                       	smpsPSGAlterVol     $04
00090C05 E701                       	dc.b	smpsNoAttack, $01
00090C07 EC07                       	smpsPSGAlterVol     $07
00090C09 8003                       	dc.b	nRst, $03
00090C0B ECF5                       	smpsPSGAlterVol     $F5
00090C0D 9206                       	dc.b	nF1, $06
00090C0F EC04                       	smpsPSGAlterVol     $04
00090C11 E701                       	dc.b	smpsNoAttack, $01
00090C13 EC07                       	smpsPSGAlterVol     $07
00090C15 8006                       	dc.b	nRst, $06
00090C17 E100                       	smpsAlterNote       $00
00090C19 01                         	dc.b	$01
00090C1A E104                       	smpsAlterNote       $04
00090C1C 01                         	dc.b	$01
00090C1D E100                       	smpsAlterNote       $00
00090C1F 01                         	dc.b	$01
00090C20 E1FD                       	smpsAlterNote       $FD
00090C22 01                         	dc.b	$01
00090C23 ECF5                       	smpsPSGAlterVol     $F5
00090C25 9206                       	dc.b	nF1, $06
00090C27 EC04                       	smpsPSGAlterVol     $04
00090C29 E701                       	dc.b	smpsNoAttack, $01
00090C2B EC07                       	smpsPSGAlterVol     $07
00090C2D 8003                       	dc.b	nRst, $03
00090C2F ECF5                       	smpsPSGAlterVol     $F5
00090C31 9207                       	dc.b	nF1, $07
00090C33 EC0B                       	smpsPSGAlterVol     $0B
00090C35 8007                       	dc.b	nRst, $07
00090C37 E104                       	smpsAlterNote       $04
00090C39 0101                       	dc.b	$01, $01
00090C3B E1FB                       	smpsAlterNote       $FB
00090C3D 01                         	dc.b	$01
00090C3E E1F6                       	smpsAlterNote       $F6
00090C40 0101                       	dc.b	$01, $01
00090C42 E1FF                       	smpsAlterNote       $FF
00090C44 01                         	dc.b	$01
00090C45 E105                       	smpsAlterNote       $05
00090C47 01                         	dc.b	$01
00090C48 E104                       	smpsAlterNote       $04
00090C4A 01                         	dc.b	$01
00090C4B E1FB                       	smpsAlterNote       $FB
00090C4D 01                         	dc.b	$01
00090C4E E1F5                       	smpsAlterNote       $F5
00090C50 01                         	dc.b	$01
00090C51 E1FC                       	smpsAlterNote       $FC
00090C53 ECF5                       	smpsPSGAlterVol     $F5
00090C55 8B0E                       	dc.b	nBb0, $0E
00090C57 E102                       	smpsAlterNote       $02
00090C59 EC0B                       	smpsPSGAlterVol     $0B
00090C5B 8001                       	dc.b	nRst, $01
00090C5D E101                       	smpsAlterNote       $01
00090C5F 01                         	dc.b	$01
00090C60 E1FC                       	smpsAlterNote       $FC
00090C62 01                         	dc.b	$01
00090C63 E1F9                       	smpsAlterNote       $F9
00090C65 0101                       	dc.b	$01, $01
00090C67 E1FF                       	smpsAlterNote       $FF
00090C69 01                         	dc.b	$01
00090C6A E102                       	smpsAlterNote       $02
00090C6C 01                         	dc.b	$01
00090C6D E1FF                       	smpsAlterNote       $FF
00090C6F 01                         	dc.b	$01
00090C70 E1FC                       	smpsAlterNote       $FC
00090C72 01                         	dc.b	$01
00090C73 E1F8                       	smpsAlterNote       $F8
00090C75 01                         	dc.b	$01
00090C76 E1FC                       	smpsAlterNote       $FC
00090C78 01                         	dc.b	$01
00090C79 E101                       	smpsAlterNote       $01
00090C7B 01                         	dc.b	$01
00090C7C E102                       	smpsAlterNote       $02
00090C7E 01                         	dc.b	$01
00090C7F E1FF                       	smpsAlterNote       $FF
00090C81 01                         	dc.b	$01
00090C82 E1FB                       	smpsAlterNote       $FB
00090C84 ECF5                       	smpsPSGAlterVol     $F5
00090C86 8D0D                       	dc.b	nC1, $0D
00090C88 E101                       	smpsAlterNote       $01
00090C8A EC0B                       	smpsPSGAlterVol     $0B
00090C8C 8001                       	dc.b	nRst, $01
00090C8E E102                       	smpsAlterNote       $02
00090C90 01                         	dc.b	$01
00090C91 E1FF                       	smpsAlterNote       $FF
00090C93 01                         	dc.b	$01
00090C94 E1F9                       	smpsAlterNote       $F9
00090C96 0101                       	dc.b	$01, $01
00090C98 E1FC                       	smpsAlterNote       $FC
00090C9A 01                         	dc.b	$01
00090C9B E101                       	smpsAlterNote       $01
00090C9D 0101                       	dc.b	$01, $01
00090C9F E1FC                       	smpsAlterNote       $FC
00090CA1 01                         	dc.b	$01
00090CA2 E1F9                       	smpsAlterNote       $F9
00090CA4 0101                       	dc.b	$01, $01
00090CA6 E1FF                       	smpsAlterNote       $FF
00090CA8 01                         	dc.b	$01
00090CA9 E102                       	smpsAlterNote       $02
00090CAB 01                         	dc.b	$01
00090CAC E101                       	smpsAlterNote       $01
00090CAE 01                         	dc.b	$01
00090CAF E1FC                       	smpsAlterNote       $FC
00090CB1 ECF5                       	smpsPSGAlterVol     $F5
00090CB3 8F0D                       	dc.b	nD1, $0D
00090CB5 E1FF                       	smpsAlterNote       $FF
00090CB7 EC04                       	smpsPSGAlterVol     $04
00090CB9 E701                       	dc.b	smpsNoAttack, $01
00090CBB EC07                       	smpsPSGAlterVol     $07
00090CBD E103                       	smpsAlterNote       $03
00090CBF 8001                       	dc.b	nRst, $01
00090CC1 E102                       	smpsAlterNote       $02
00090CC3 01                         	dc.b	$01
00090CC4 E1FD                       	smpsAlterNote       $FD
00090CC6 01                         	dc.b	$01
00090CC7 E1F9                       	smpsAlterNote       $F9
00090CC9 01                         	dc.b	$01
00090CCA E1FD                       	smpsAlterNote       $FD
00090CCC 01                         	dc.b	$01
00090CCD E100                       	smpsAlterNote       $00
00090CCF 01                         	dc.b	$01
00090CD0 E103                       	smpsAlterNote       $03
00090CD2 01                         	dc.b	$01
00090CD3 E100                       	smpsAlterNote       $00
00090CD5 01                         	dc.b	$01
00090CD6 E1FA                       	smpsAlterNote       $FA
00090CD8 01                         	dc.b	$01
00090CD9 E1F9                       	smpsAlterNote       $F9
00090CDB 01                         	dc.b	$01
00090CDC E1FD                       	smpsAlterNote       $FD
00090CDE 01                         	dc.b	$01
00090CDF E102                       	smpsAlterNote       $02
00090CE1 0101                       	dc.b	$01, $01
00090CE3 E100                       	smpsAlterNote       $00
00090CE5 01                         	dc.b	$01
00090CE6 E1FD                       	smpsAlterNote       $FD
00090CE8 ECF5                       	smpsPSGAlterVol     $F5
00090CEA 910D                       	dc.b	nE1, $0D
00090CEC E103                       	smpsAlterNote       $03
00090CEE EC0B                       	smpsPSGAlterVol     $0B
00090CF0 8001 01                    	dc.b	nRst, $01, $01
00090CF3 E100                       	smpsAlterNote       $00
00090CF5 01                         	dc.b	$01
00090CF6 E1FA                       	smpsAlterNote       $FA
00090CF8 0101                       	dc.b	$01, $01
00090CFA E100                       	smpsAlterNote       $00
00090CFC 01                         	dc.b	$01
00090CFD E103                       	smpsAlterNote       $03
00090CFF 01                         	dc.b	$01
00090D00 E1FD                       	smpsAlterNote       $FD
00090D02 ECF5                       	smpsPSGAlterVol     $F5
00090D04 9206                       	dc.b	nF1, $06
00090D06 EC04                       	smpsPSGAlterVol     $04
00090D08 E701                       	dc.b	smpsNoAttack, $01
00090D0A EC07                       	smpsPSGAlterVol     $07
00090D0C 8003                       	dc.b	nRst, $03
00090D0E ECF5                       	smpsPSGAlterVol     $F5
00090D10 9207                       	dc.b	nF1, $07
00090D12 EC0B                       	smpsPSGAlterVol     $0B
00090D14 8006                       	dc.b	nRst, $06
00090D16 E100                       	smpsAlterNote       $00
00090D18 01                         	dc.b	$01
00090D19 E103                       	smpsAlterNote       $03
00090D1B 0101                       	dc.b	$01, $01
00090D1D E1FD                       	smpsAlterNote       $FD
00090D1F 01                         	dc.b	$01
00090D20 ECF5                       	smpsPSGAlterVol     $F5
00090D22 9407                       	dc.b	nG1, $07
00090D24 EC0B                       	smpsPSGAlterVol     $0B
00090D26 8004                       	dc.b	nRst, $04
00090D28 ECF5                       	smpsPSGAlterVol     $F5
00090D2A 9406                       	dc.b	nG1, $06
00090D2C EC04                       	smpsPSGAlterVol     $04
00090D2E E701                       	dc.b	smpsNoAttack, $01
00090D30 EC07                       	smpsPSGAlterVol     $07
00090D32 8006                       	dc.b	nRst, $06
00090D34 E103                       	smpsAlterNote       $03
00090D36 01                         	dc.b	$01
00090D37 E104                       	smpsAlterNote       $04
00090D39 01                         	dc.b	$01
00090D3A E100                       	smpsAlterNote       $00
00090D3C 01                         	dc.b	$01
00090D3D E1F9                       	smpsAlterNote       $F9
00090D3F 01                         	dc.b	$01
00090D40 E1FD                       	smpsAlterNote       $FD
00090D42 ECF5                       	smpsPSGAlterVol     $F5
00090D44 9206                       	dc.b	nF1, $06
00090D46 EC04                       	smpsPSGAlterVol     $04
00090D48 E701                       	dc.b	smpsNoAttack, $01
00090D4A EC07                       	smpsPSGAlterVol     $07
00090D4C 8003                       	dc.b	nRst, $03
00090D4E ECF5                       	smpsPSGAlterVol     $F5
00090D50 9206                       	dc.b	nF1, $06
00090D52 EC04                       	smpsPSGAlterVol     $04
00090D54 E701                       	dc.b	smpsNoAttack, $01
00090D56 EC07                       	smpsPSGAlterVol     $07
00090D58 8006                       	dc.b	nRst, $06
00090D5A E100                       	smpsAlterNote       $00
00090D5C 01                         	dc.b	$01
00090D5D E104                       	smpsAlterNote       $04
00090D5F 01                         	dc.b	$01
00090D60 E103                       	smpsAlterNote       $03
00090D62 01                         	dc.b	$01
00090D63 E1FD                       	smpsAlterNote       $FD
00090D65 01                         	dc.b	$01
00090D66 ECF5                       	smpsPSGAlterVol     $F5
00090D68 9407                       	dc.b	nG1, $07
00090D6A EC0B                       	smpsPSGAlterVol     $0B
00090D6C 8004                       	dc.b	nRst, $04
00090D6E ECF5                       	smpsPSGAlterVol     $F5
00090D70 9406                       	dc.b	nG1, $06
00090D72 EC0B                       	smpsPSGAlterVol     $0B
00090D74 8007                       	dc.b	nRst, $07
00090D76 E103                       	smpsAlterNote       $03
00090D78 0101                       	dc.b	$01, $01
00090D7A E100                       	smpsAlterNote       $00
00090D7C 01                         	dc.b	$01
00090D7D E1F9                       	smpsAlterNote       $F9
00090D7F 01                         	dc.b	$01
00090D80 E1FD                       	smpsAlterNote       $FD
00090D82 ECF5                       	smpsPSGAlterVol     $F5
00090D84 9206                       	dc.b	nF1, $06
00090D86 EC04                       	smpsPSGAlterVol     $04
00090D88 E701                       	dc.b	smpsNoAttack, $01
00090D8A EC07                       	smpsPSGAlterVol     $07
00090D8C 8003                       	dc.b	nRst, $03
00090D8E ECF5                       	smpsPSGAlterVol     $F5
00090D90 9206                       	dc.b	nF1, $06
00090D92 EC04                       	smpsPSGAlterVol     $04
00090D94 E701                       	dc.b	smpsNoAttack, $01
00090D96 EC07                       	smpsPSGAlterVol     $07
00090D98 8006                       	dc.b	nRst, $06
00090D9A E100                       	smpsAlterNote       $00
00090D9C 01                         	dc.b	$01
00090D9D E104                       	smpsAlterNote       $04
00090D9F 01                         	dc.b	$01
00090DA0 E100                       	smpsAlterNote       $00
00090DA2 01                         	dc.b	$01
00090DA3 E1FB                       	smpsAlterNote       $FB
00090DA5 01                         	dc.b	$01
00090DA6 E1FD                       	smpsAlterNote       $FD
00090DA8 ECF5                       	smpsPSGAlterVol     $F5
00090DAA 9406                       	dc.b	nG1, $06
00090DAC EC04                       	smpsPSGAlterVol     $04
00090DAE E701                       	dc.b	smpsNoAttack, $01
00090DB0 EC07                       	smpsPSGAlterVol     $07
00090DB2 8003                       	dc.b	nRst, $03
00090DB4 ECF5                       	smpsPSGAlterVol     $F5
00090DB6 9407                       	dc.b	nG1, $07
00090DB8 EC0B                       	smpsPSGAlterVol     $0B
00090DBA 8006                       	dc.b	nRst, $06
00090DBC E100                       	smpsAlterNote       $00
00090DBE 01                         	dc.b	$01
00090DBF E103                       	smpsAlterNote       $03
00090DC1 0101                       	dc.b	$01, $01
00090DC3 E1FD                       	smpsAlterNote       $FD
00090DC5 01                         	dc.b	$01
00090DC6 ECF5                       	smpsPSGAlterVol     $F5
00090DC8 9207                       	dc.b	nF1, $07
00090DCA EC0B                       	smpsPSGAlterVol     $0B
00090DCC 8004                       	dc.b	nRst, $04
00090DCE ECF5                       	smpsPSGAlterVol     $F5
00090DD0 9206                       	dc.b	nF1, $06
00090DD2 EC04                       	smpsPSGAlterVol     $04
00090DD4 E701                       	dc.b	smpsNoAttack, $01
00090DD6 ECFC                       	smpsPSGAlterVol     $FC
00090DD8 E1FC                       	smpsAlterNote       $FC
00090DDA 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00090DDE EC04                       	smpsPSGAlterVol     $04
00090DE0 E701                       	dc.b	smpsNoAttack, $01
00090DE2 ECFC                       	smpsPSGAlterVol     $FC
00090DE4 9003                       	dc.b	nEb1, $03
00090DE6 E1FD                       	smpsAlterNote       $FD
00090DE8 9403                       	dc.b	nG1, $03
00090DEA EC04                       	smpsPSGAlterVol     $04
00090DEC E701                       	dc.b	smpsNoAttack, $01
00090DEE E1FE                       	smpsAlterNote       $FE
00090DF0 ECFC                       	smpsPSGAlterVol     $FC
00090DF2 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00090DF6 EC04                       	smpsPSGAlterVol     $04
00090DF8 E701                       	dc.b	smpsNoAttack, $01
00090DFA EC07                       	smpsPSGAlterVol     $07
00090DFC 8009                       	dc.b	nRst, $09
00090DFE E100                       	smpsAlterNote       $00
00090E00 01                         	dc.b	$01
00090E01 F6F5 19                    	smpsJump            music84_Jump07
00090E04                            
00090E04                            ; PSG2 Data
00090E04                            music84_PSG2:
00090E04 E1FC                       	smpsAlterNote       $FC
00090E06 EC04                       	smpsPSGAlterVol     $04
00090E08 8F03                       	dc.b	nD1, $03
00090E0A E1FD                       	smpsAlterNote       $FD
00090E0C 9203                       	dc.b	nF1, $03
00090E0E EC04                       	smpsPSGAlterVol     $04
00090E10 E701                       	dc.b	smpsNoAttack, $01
00090E12 E1FE                       	smpsAlterNote       $FE
00090E14 ECFC                       	smpsPSGAlterVol     $FC
00090E16 9603                       	dc.b	nA1, $03
00090E18 E1FD                       	smpsAlterNote       $FD
00090E1A 9103                       	dc.b	nE1, $03
00090E1C EC04                       	smpsPSGAlterVol     $04
00090E1E E701                       	dc.b	smpsNoAttack, $01
00090E20 ECFC                       	smpsPSGAlterVol     $FC
00090E22 9403                       	dc.b	nG1, $03
00090E24 E1FE                       	smpsAlterNote       $FE
00090E26 9703                       	dc.b	nBb1, $03
00090E28 EC04                       	smpsPSGAlterVol     $04
00090E2A E701                       	dc.b	smpsNoAttack, $01
00090E2C E1FF                       	smpsAlterNote       $FF
00090E2E ECFC                       	smpsPSGAlterVol     $FC
00090E30 9B02                       	dc.b	nD2, $02
00090E32 EC04                       	smpsPSGAlterVol     $04
00090E34 E701                       	dc.b	smpsNoAttack, $01
00090E36 ECFC                       	smpsPSGAlterVol     $FC
00090E38 E1FE                       	smpsAlterNote       $FE
00090E3A 9A03                       	dc.b	nCs2, $03
00090E3C EC0B                       	smpsPSGAlterVol     $0B
00090E3E 800A                       	dc.b	nRst, $0A
00090E40 E102                       	smpsAlterNote       $02
00090E42 01                         	dc.b	$01
00090E43 E10A                       	smpsAlterNote       $0A
00090E45 01                         	dc.b	$01
00090E46 E102                       	smpsAlterNote       $02
00090E48 01                         	dc.b	$01
00090E49 E1FC                       	smpsAlterNote       $FC
00090E4B 01                         	dc.b	$01
00090E4C E10A                       	smpsAlterNote       $0A
00090E4E 01                         	dc.b	$01
00090E4F E1FC                       	smpsAlterNote       $FC
00090E51 01                         	dc.b	$01
00090E52 E108                       	smpsAlterNote       $08
00090E54 01                         	dc.b	$01
00090E55 E10A                       	smpsAlterNote       $0A
00090E57 01                         	dc.b	$01
00090E58 E102                       	smpsAlterNote       $02
00090E5A 01                         	dc.b	$01
00090E5B E1F7                       	smpsAlterNote       $F7
00090E5D 0101                       	dc.b	$01, $01
00090E5F E102                       	smpsAlterNote       $02
00090E61 01                         	dc.b	$01
00090E62 E108                       	smpsAlterNote       $08
00090E64 0101                       	dc.b	$01, $01
00090E66 E1FC                       	smpsAlterNote       $FC
00090E68 01                         	dc.b	$01
00090E69 E10A                       	smpsAlterNote       $0A
00090E6B 01                         	dc.b	$01
00090E6C E1F7                       	smpsAlterNote       $F7
00090E6E 01                         	dc.b	$01
00090E6F E102                       	smpsAlterNote       $02
00090E71 01                         	dc.b	$01
00090E72 E10A                       	smpsAlterNote       $0A
00090E74 01                         	dc.b	$01
00090E75 E102                       	smpsAlterNote       $02
00090E77 01                         	dc.b	$01
00090E78 E1FC                       	smpsAlterNote       $FC
00090E7A 01                         	dc.b	$01
00090E7B                            
00090E7B                            music84_Jump06:
00090E7B E10A                       	smpsAlterNote       $0A
00090E7D 8001                       	dc.b	nRst, $01
00090E7F E1FC                       	smpsAlterNote       $FC
00090E81 01                         	dc.b	$01
00090E82 E108                       	smpsAlterNote       $08
00090E84 01                         	dc.b	$01
00090E85 E10A                       	smpsAlterNote       $0A
00090E87 01                         	dc.b	$01
00090E88 E1FC                       	smpsAlterNote       $FC
00090E8A ECF5                       	smpsPSGAlterVol     $F5
00090E8C 8F06                       	dc.b	nD1, $06
00090E8E EC04                       	smpsPSGAlterVol     $04
00090E90 E701                       	dc.b	smpsNoAttack, $01
00090E92 EC07                       	smpsPSGAlterVol     $07
00090E94 8003                       	dc.b	nRst, $03
00090E96 ECF5                       	smpsPSGAlterVol     $F5
00090E98 8F06                       	dc.b	nD1, $06
00090E9A EC04                       	smpsPSGAlterVol     $04
00090E9C E701                       	dc.b	smpsNoAttack, $01
00090E9E EC07                       	smpsPSGAlterVol     $07
00090EA0 8006                       	dc.b	nRst, $06
00090EA2 E1FF                       	smpsAlterNote       $FF
00090EA4 01                         	dc.b	$01
00090EA5 E102                       	smpsAlterNote       $02
00090EA7 01                         	dc.b	$01
00090EA8 E1FF                       	smpsAlterNote       $FF
00090EAA 01                         	dc.b	$01
00090EAB E1F9                       	smpsAlterNote       $F9
00090EAD 01                         	dc.b	$01
00090EAE E1FC                       	smpsAlterNote       $FC
00090EB0 ECF5                       	smpsPSGAlterVol     $F5
00090EB2 9006                       	dc.b	nEb1, $06
00090EB4 EC04                       	smpsPSGAlterVol     $04
00090EB6 E701                       	dc.b	smpsNoAttack, $01
00090EB8 EC07                       	smpsPSGAlterVol     $07
00090EBA 8003                       	dc.b	nRst, $03
00090EBC ECF5                       	smpsPSGAlterVol     $F5
00090EBE 9007                       	dc.b	nEb1, $07
00090EC0 EC0B                       	smpsPSGAlterVol     $0B
00090EC2 8006                       	dc.b	nRst, $06
00090EC4 E1FF                       	smpsAlterNote       $FF
00090EC6 01                         	dc.b	$01
00090EC7 E103                       	smpsAlterNote       $03
00090EC9 0101                       	dc.b	$01, $01
00090ECB E1FC                       	smpsAlterNote       $FC
00090ECD 01                         	dc.b	$01
00090ECE ECF5                       	smpsPSGAlterVol     $F5
00090ED0 8F07                       	dc.b	nD1, $07
00090ED2 EC0B                       	smpsPSGAlterVol     $0B
00090ED4 8004                       	dc.b	nRst, $04
00090ED6 ECF5                       	smpsPSGAlterVol     $F5
00090ED8 8F06                       	dc.b	nD1, $06
00090EDA EC04                       	smpsPSGAlterVol     $04
00090EDC E701                       	dc.b	smpsNoAttack, $01
00090EDE EC07                       	smpsPSGAlterVol     $07
00090EE0 8006                       	dc.b	nRst, $06
00090EE2 E102                       	smpsAlterNote       $02
00090EE4 01                         	dc.b	$01
00090EE5 E103                       	smpsAlterNote       $03
00090EE7 01                         	dc.b	$01
00090EE8 E1FF                       	smpsAlterNote       $FF
00090EEA 01                         	dc.b	$01
00090EEB E1F9                       	smpsAlterNote       $F9
00090EED 01                         	dc.b	$01
00090EEE E1FC                       	smpsAlterNote       $FC
00090EF0 ECF5                       	smpsPSGAlterVol     $F5
00090EF2 8F06                       	dc.b	nD1, $06
00090EF4 EC04                       	smpsPSGAlterVol     $04
00090EF6 E701                       	dc.b	smpsNoAttack, $01
00090EF8 EC07                       	smpsPSGAlterVol     $07
00090EFA 8003                       	dc.b	nRst, $03
00090EFC ECF5                       	smpsPSGAlterVol     $F5
00090EFE 8F06                       	dc.b	nD1, $06
00090F00 EC04                       	smpsPSGAlterVol     $04
00090F02 E701                       	dc.b	smpsNoAttack, $01
00090F04 EC07                       	smpsPSGAlterVol     $07
00090F06 8006                       	dc.b	nRst, $06
00090F08 E1FF                       	smpsAlterNote       $FF
00090F0A 01                         	dc.b	$01
00090F0B E103                       	smpsAlterNote       $03
00090F0D 01                         	dc.b	$01
00090F0E E1FF                       	smpsAlterNote       $FF
00090F10 01                         	dc.b	$01
00090F11 E1FC                       	smpsAlterNote       $FC
00090F13 01                         	dc.b	$01
00090F14 ECF5                       	smpsPSGAlterVol     $F5
00090F16 8F06                       	dc.b	nD1, $06
00090F18 EC04                       	smpsPSGAlterVol     $04
00090F1A E701                       	dc.b	smpsNoAttack, $01
00090F1C EC07                       	smpsPSGAlterVol     $07
00090F1E 8003                       	dc.b	nRst, $03
00090F20 ECF5                       	smpsPSGAlterVol     $F5
00090F22 8F07                       	dc.b	nD1, $07
00090F24 EC0B                       	smpsPSGAlterVol     $0B
00090F26 8007                       	dc.b	nRst, $07
00090F28 E101                       	smpsAlterNote       $01
00090F2A 0101                       	dc.b	$01, $01
00090F2C E1FC                       	smpsAlterNote       $FC
00090F2E 01                         	dc.b	$01
00090F2F E1F9                       	smpsAlterNote       $F9
00090F31 01                         	dc.b	$01
00090F32 E1FC                       	smpsAlterNote       $FC
00090F34 ECF5                       	smpsPSGAlterVol     $F5
00090F36 9006                       	dc.b	nEb1, $06
00090F38 EC0B                       	smpsPSGAlterVol     $0B
00090F3A 8004                       	dc.b	nRst, $04
00090F3C ECF5                       	smpsPSGAlterVol     $F5
00090F3E 9006                       	dc.b	nEb1, $06
00090F40 EC04                       	smpsPSGAlterVol     $04
00090F42 E701                       	dc.b	smpsNoAttack, $01
00090F44 EC07                       	smpsPSGAlterVol     $07
00090F46 8006                       	dc.b	nRst, $06
00090F48 E100                       	smpsAlterNote       $00
00090F4A 01                         	dc.b	$01
00090F4B E102                       	smpsAlterNote       $02
00090F4D 01                         	dc.b	$01
00090F4E E100                       	smpsAlterNote       $00
00090F50 01                         	dc.b	$01
00090F51 E1FD                       	smpsAlterNote       $FD
00090F53 01                         	dc.b	$01
00090F54 E1FF                       	smpsAlterNote       $FF
00090F56 ECF5                       	smpsPSGAlterVol     $F5
00090F58 9B06                       	dc.b	nD2, $06
00090F5A EC04                       	smpsPSGAlterVol     $04
00090F5C E701                       	dc.b	smpsNoAttack, $01
00090F5E EC07                       	smpsPSGAlterVol     $07
00090F60 8003                       	dc.b	nRst, $03
00090F62 ECF5                       	smpsPSGAlterVol     $F5
00090F64 9B07                       	dc.b	nD2, $07
00090F66 EC0B                       	smpsPSGAlterVol     $0B
00090F68 8006                       	dc.b	nRst, $06
00090F6A E102                       	smpsAlterNote       $02
00090F6C 01                         	dc.b	$01
00090F6D E106                       	smpsAlterNote       $06
00090F6F 01                         	dc.b	$01
00090F70 E105                       	smpsAlterNote       $05
00090F72 01                         	dc.b	$01
00090F73 E1FF                       	smpsAlterNote       $FF
00090F75 01                         	dc.b	$01
00090F76 ECF5                       	smpsPSGAlterVol     $F5
00090F78 9B07                       	dc.b	nD2, $07
00090F7A EC0B                       	smpsPSGAlterVol     $0B
00090F7C 8004                       	dc.b	nRst, $04
00090F7E ECF5                       	smpsPSGAlterVol     $F5
00090F80 9B06                       	dc.b	nD2, $06
00090F82 EC0B                       	smpsPSGAlterVol     $0B
00090F84 8007                       	dc.b	nRst, $07
00090F86 E105                       	smpsAlterNote       $05
00090F88 0101                       	dc.b	$01, $01
00090F8A E102                       	smpsAlterNote       $02
00090F8C 01                         	dc.b	$01
00090F8D E1FC                       	smpsAlterNote       $FC
00090F8F 01                         	dc.b	$01
00090F90 E1FF                       	smpsAlterNote       $FF
00090F92 ECF5                       	smpsPSGAlterVol     $F5
00090F94 9B06                       	dc.b	nD2, $06
00090F96 EC04                       	smpsPSGAlterVol     $04
00090F98 E701                       	dc.b	smpsNoAttack, $01
00090F9A EC07                       	smpsPSGAlterVol     $07
00090F9C 8003                       	dc.b	nRst, $03
00090F9E ECF5                       	smpsPSGAlterVol     $F5
00090FA0 9B06                       	dc.b	nD2, $06
00090FA2 EC04                       	smpsPSGAlterVol     $04
00090FA4 E701                       	dc.b	smpsNoAttack, $01
00090FA6 EC07                       	smpsPSGAlterVol     $07
00090FA8 8006                       	dc.b	nRst, $06
00090FAA E102                       	smpsAlterNote       $02
00090FAC 01                         	dc.b	$01
00090FAD E106                       	smpsAlterNote       $06
00090FAF 01                         	dc.b	$01
00090FB0 E102                       	smpsAlterNote       $02
00090FB2 01                         	dc.b	$01
00090FB3 E1FF                       	smpsAlterNote       $FF
00090FB5 01                         	dc.b	$01
00090FB6 ECF5                       	smpsPSGAlterVol     $F5
00090FB8 9B06                       	dc.b	nD2, $06
00090FBA EC04                       	smpsPSGAlterVol     $04
00090FBC E701                       	dc.b	smpsNoAttack, $01
00090FBE EC07                       	smpsPSGAlterVol     $07
00090FC0 8003                       	dc.b	nRst, $03
00090FC2 ECF5                       	smpsPSGAlterVol     $F5
00090FC4 9B07                       	dc.b	nD2, $07
00090FC6 EC0B                       	smpsPSGAlterVol     $0B
00090FC8 8007                       	dc.b	nRst, $07
00090FCA E105                       	smpsAlterNote       $05
00090FCC 0101                       	dc.b	$01, $01
00090FCE E1FF                       	smpsAlterNote       $FF
00090FD0 01                         	dc.b	$01
00090FD1 E1FC                       	smpsAlterNote       $FC
00090FD3 01                         	dc.b	$01
00090FD4 E1FF                       	smpsAlterNote       $FF
00090FD6 ECF5                       	smpsPSGAlterVol     $F5
00090FD8 9B06                       	dc.b	nD2, $06
00090FDA EC0B                       	smpsPSGAlterVol     $0B
00090FDC 8004                       	dc.b	nRst, $04
00090FDE ECF5                       	smpsPSGAlterVol     $F5
00090FE0 9B06                       	dc.b	nD2, $06
00090FE2 EC04                       	smpsPSGAlterVol     $04
00090FE4 E701                       	dc.b	smpsNoAttack, $01
00090FE6 EC07                       	smpsPSGAlterVol     $07
00090FE8 8006                       	dc.b	nRst, $06
00090FEA E105                       	smpsAlterNote       $05
00090FEC 01                         	dc.b	$01
00090FED E106                       	smpsAlterNote       $06
00090FEF 01                         	dc.b	$01
00090FF0 E102                       	smpsAlterNote       $02
00090FF2 01                         	dc.b	$01
00090FF3 E1FC                       	smpsAlterNote       $FC
00090FF5 01                         	dc.b	$01
00090FF6 E1FF                       	smpsAlterNote       $FF
00090FF8 ECF5                       	smpsPSGAlterVol     $F5
00090FFA 9B06                       	dc.b	nD2, $06
00090FFC EC04                       	smpsPSGAlterVol     $04
00090FFE E701                       	dc.b	smpsNoAttack, $01
00091000 EC07                       	smpsPSGAlterVol     $07
00091002 8003                       	dc.b	nRst, $03
00091004 ECF5                       	smpsPSGAlterVol     $F5
00091006 9B06                       	dc.b	nD2, $06
00091008 EC04                       	smpsPSGAlterVol     $04
0009100A E701                       	dc.b	smpsNoAttack, $01
0009100C EC07                       	smpsPSGAlterVol     $07
0009100E 8006                       	dc.b	nRst, $06
00091010 E102                       	smpsAlterNote       $02
00091012 01                         	dc.b	$01
00091013 E106                       	smpsAlterNote       $06
00091015 01                         	dc.b	$01
00091016 E105                       	smpsAlterNote       $05
00091018 01                         	dc.b	$01
00091019 E1FF                       	smpsAlterNote       $FF
0009101B 01                         	dc.b	$01
0009101C ECF5                       	smpsPSGAlterVol     $F5
0009101E 9B07                       	dc.b	nD2, $07
00091020 EC0B                       	smpsPSGAlterVol     $0B
00091022 8004                       	dc.b	nRst, $04
00091024 ECF5                       	smpsPSGAlterVol     $F5
00091026 9B06                       	dc.b	nD2, $06
00091028 EC0B                       	smpsPSGAlterVol     $0B
0009102A 8007                       	dc.b	nRst, $07
0009102C E105                       	smpsAlterNote       $05
0009102E 0101                       	dc.b	$01, $01
00091030 E102                       	smpsAlterNote       $02
00091032 01                         	dc.b	$01
00091033 E1FC                       	smpsAlterNote       $FC
00091035 01                         	dc.b	$01
00091036 E1FF                       	smpsAlterNote       $FF
00091038 ECF5                       	smpsPSGAlterVol     $F5
0009103A 9B06                       	dc.b	nD2, $06
0009103C EC04                       	smpsPSGAlterVol     $04
0009103E E701                       	dc.b	smpsNoAttack, $01
00091040 EC07                       	smpsPSGAlterVol     $07
00091042 8003                       	dc.b	nRst, $03
00091044 ECF5                       	smpsPSGAlterVol     $F5
00091046 9B06                       	dc.b	nD2, $06
00091048 EC04                       	smpsPSGAlterVol     $04
0009104A E701                       	dc.b	smpsNoAttack, $01
0009104C EC07                       	smpsPSGAlterVol     $07
0009104E 8006                       	dc.b	nRst, $06
00091050 E102                       	smpsAlterNote       $02
00091052 01                         	dc.b	$01
00091053 E106                       	smpsAlterNote       $06
00091055 01                         	dc.b	$01
00091056 E102                       	smpsAlterNote       $02
00091058 01                         	dc.b	$01
00091059 E1FF                       	smpsAlterNote       $FF
0009105B 01                         	dc.b	$01
0009105C ECF5                       	smpsPSGAlterVol     $F5
0009105E 9B06                       	dc.b	nD2, $06
00091060 EC04                       	smpsPSGAlterVol     $04
00091062 E701                       	dc.b	smpsNoAttack, $01
00091064 EC07                       	smpsPSGAlterVol     $07
00091066 8003                       	dc.b	nRst, $03
00091068 ECF5                       	smpsPSGAlterVol     $F5
0009106A 9B07                       	dc.b	nD2, $07
0009106C E1FE                       	smpsAlterNote       $FE
0009106E 9706                       	dc.b	nBb1, $06
00091070 EC04                       	smpsPSGAlterVol     $04
00091072 E701                       	dc.b	smpsNoAttack, $01
00091074 ECFC                       	smpsPSGAlterVol     $FC
00091076 9703                       	dc.b	nBb1, $03
00091078 EC04                       	smpsPSGAlterVol     $04
0009107A E701                       	dc.b	smpsNoAttack, $01
0009107C ECFC                       	smpsPSGAlterVol     $FC
0009107E 9702                       	dc.b	nBb1, $02
00091080 EC04                       	smpsPSGAlterVol     $04
00091082 E701                       	dc.b	smpsNoAttack, $01
00091084 ECFC                       	smpsPSGAlterVol     $FC
00091086 9606                       	dc.b	nA1, $06
00091088 EC04                       	smpsPSGAlterVol     $04
0009108A E701                       	dc.b	smpsNoAttack, $01
0009108C EC07                       	smpsPSGAlterVol     $07
0009108E 8006                       	dc.b	nRst, $06
00091090 E101                       	smpsAlterNote       $01
00091092 01                         	dc.b	$01
00091093 E107                       	smpsAlterNote       $07
00091095 01                         	dc.b	$01
00091096 E101                       	smpsAlterNote       $01
00091098 01                         	dc.b	$01
00091099 E1F8                       	smpsAlterNote       $F8
0009109B 01                         	dc.b	$01
0009109C E1F7                       	smpsAlterNote       $F7
0009109E 01                         	dc.b	$01
0009109F E1FC                       	smpsAlterNote       $FC
000910A1 01                         	dc.b	$01
000910A2 E106                       	smpsAlterNote       $06
000910A4 01                         	dc.b	$01
000910A5 E107                       	smpsAlterNote       $07
000910A7 01                         	dc.b	$01
000910A8 E101                       	smpsAlterNote       $01
000910AA 01                         	dc.b	$01
000910AB E1F8                       	smpsAlterNote       $F8
000910AD 0101                       	dc.b	$01, $01
000910AF E1FC                       	smpsAlterNote       $FC
000910B1 ECF5                       	smpsPSGAlterVol     $F5
000910B3 8F06                       	dc.b	nD1, $06
000910B5 EC04                       	smpsPSGAlterVol     $04
000910B7 E701                       	dc.b	smpsNoAttack, $01
000910B9 EC07                       	smpsPSGAlterVol     $07
000910BB 8003                       	dc.b	nRst, $03
000910BD ECF5                       	smpsPSGAlterVol     $F5
000910BF 8F06                       	dc.b	nD1, $06
000910C1 EC04                       	smpsPSGAlterVol     $04
000910C3 E701                       	dc.b	smpsNoAttack, $01
000910C5 EC07                       	smpsPSGAlterVol     $07
000910C7 8006                       	dc.b	nRst, $06
000910C9 E1FF                       	smpsAlterNote       $FF
000910CB 01                         	dc.b	$01
000910CC E102                       	smpsAlterNote       $02
000910CE 01                         	dc.b	$01
000910CF E101                       	smpsAlterNote       $01
000910D1 01                         	dc.b	$01
000910D2 E1FC                       	smpsAlterNote       $FC
000910D4 01                         	dc.b	$01
000910D5 ECF5                       	smpsPSGAlterVol     $F5
000910D7 9007                       	dc.b	nEb1, $07
000910D9 EC0B                       	smpsPSGAlterVol     $0B
000910DB 8004                       	dc.b	nRst, $04
000910DD ECF5                       	smpsPSGAlterVol     $F5
000910DF 9006                       	dc.b	nEb1, $06
000910E1 EC0B                       	smpsPSGAlterVol     $0B
000910E3 8007                       	dc.b	nRst, $07
000910E5 E103                       	smpsAlterNote       $03
000910E7 0101                       	dc.b	$01, $01
000910E9 E1FC                       	smpsAlterNote       $FC
000910EB 01                         	dc.b	$01
000910EC E1F9                       	smpsAlterNote       $F9
000910EE 01                         	dc.b	$01
000910EF E1FC                       	smpsAlterNote       $FC
000910F1 ECF5                       	smpsPSGAlterVol     $F5
000910F3 8F06                       	dc.b	nD1, $06
000910F5 EC04                       	smpsPSGAlterVol     $04
000910F7 E701                       	dc.b	smpsNoAttack, $01
000910F9 EC07                       	smpsPSGAlterVol     $07
000910FB 8003                       	dc.b	nRst, $03
000910FD ECF5                       	smpsPSGAlterVol     $F5
000910FF 8F06                       	dc.b	nD1, $06
00091101 EC04                       	smpsPSGAlterVol     $04
00091103 E701                       	dc.b	smpsNoAttack, $01
00091105 EC07                       	smpsPSGAlterVol     $07
00091107 8006                       	dc.b	nRst, $06
00091109 E1FF                       	smpsAlterNote       $FF
0009110B 01                         	dc.b	$01
0009110C E103                       	smpsAlterNote       $03
0009110E 01                         	dc.b	$01
0009110F E1FF                       	smpsAlterNote       $FF
00091111 01                         	dc.b	$01
00091112 E1F9                       	smpsAlterNote       $F9
00091114 01                         	dc.b	$01
00091115 E1FC                       	smpsAlterNote       $FC
00091117 ECF5                       	smpsPSGAlterVol     $F5
00091119 8F06                       	dc.b	nD1, $06
0009111B EC04                       	smpsPSGAlterVol     $04
0009111D E701                       	dc.b	smpsNoAttack, $01
0009111F EC07                       	smpsPSGAlterVol     $07
00091121 8003                       	dc.b	nRst, $03
00091123 ECF5                       	smpsPSGAlterVol     $F5
00091125 8F07                       	dc.b	nD1, $07
00091127 EC0B                       	smpsPSGAlterVol     $0B
00091129 8006                       	dc.b	nRst, $06
0009112B E1FF                       	smpsAlterNote       $FF
0009112D 01                         	dc.b	$01
0009112E E102                       	smpsAlterNote       $02
00091130 0101                       	dc.b	$01, $01
00091132 E1FC                       	smpsAlterNote       $FC
00091134 01                         	dc.b	$01
00091135 ECF5                       	smpsPSGAlterVol     $F5
00091137 8F07                       	dc.b	nD1, $07
00091139 EC0B                       	smpsPSGAlterVol     $0B
0009113B 8004                       	dc.b	nRst, $04
0009113D ECF5                       	smpsPSGAlterVol     $F5
0009113F 8F06                       	dc.b	nD1, $06
00091141 EC04                       	smpsPSGAlterVol     $04
00091143 E701                       	dc.b	smpsNoAttack, $01
00091145 EC07                       	smpsPSGAlterVol     $07
00091147 8006                       	dc.b	nRst, $06
00091149 E101                       	smpsAlterNote       $01
0009114B 01                         	dc.b	$01
0009114C E102                       	smpsAlterNote       $02
0009114E 01                         	dc.b	$01
0009114F E1FF                       	smpsAlterNote       $FF
00091151 01                         	dc.b	$01
00091152 E1F9                       	smpsAlterNote       $F9
00091154 01                         	dc.b	$01
00091155 E1FC                       	smpsAlterNote       $FC
00091157 ECF5                       	smpsPSGAlterVol     $F5
00091159 9006                       	dc.b	nEb1, $06
0009115B EC04                       	smpsPSGAlterVol     $04
0009115D E701                       	dc.b	smpsNoAttack, $01
0009115F EC07                       	smpsPSGAlterVol     $07
00091161 8003                       	dc.b	nRst, $03
00091163 ECF5                       	smpsPSGAlterVol     $F5
00091165 9006                       	dc.b	nEb1, $06
00091167 EC04                       	smpsPSGAlterVol     $04
00091169 E701                       	dc.b	smpsNoAttack, $01
0009116B EC07                       	smpsPSGAlterVol     $07
0009116D 8006                       	dc.b	nRst, $06
0009116F E100                       	smpsAlterNote       $00
00091171 01                         	dc.b	$01
00091172 E102                       	smpsAlterNote       $02
00091174 01                         	dc.b	$01
00091175 E100                       	smpsAlterNote       $00
00091177 01                         	dc.b	$01
00091178 E1FF                       	smpsAlterNote       $FF
0009117A 01                         	dc.b	$01
0009117B ECF5                       	smpsPSGAlterVol     $F5
0009117D 9B06                       	dc.b	nD2, $06
0009117F EC04                       	smpsPSGAlterVol     $04
00091181 E701                       	dc.b	smpsNoAttack, $01
00091183 EC07                       	smpsPSGAlterVol     $07
00091185 8003                       	dc.b	nRst, $03
00091187 ECF5                       	smpsPSGAlterVol     $F5
00091189 9B07                       	dc.b	nD2, $07
0009118B EC0B                       	smpsPSGAlterVol     $0B
0009118D 8007                       	dc.b	nRst, $07
0009118F E105                       	smpsAlterNote       $05
00091191 0101                       	dc.b	$01, $01
00091193 E1FF                       	smpsAlterNote       $FF
00091195 01                         	dc.b	$01
00091196 E1FC                       	smpsAlterNote       $FC
00091198 01                         	dc.b	$01
00091199 E1FF                       	smpsAlterNote       $FF
0009119B ECF5                       	smpsPSGAlterVol     $F5
0009119D 9B06                       	dc.b	nD2, $06
0009119F EC0B                       	smpsPSGAlterVol     $0B
000911A1 8004                       	dc.b	nRst, $04
000911A3 ECF5                       	smpsPSGAlterVol     $F5
000911A5 9B06                       	dc.b	nD2, $06
000911A7 EC04                       	smpsPSGAlterVol     $04
000911A9 E701                       	dc.b	smpsNoAttack, $01
000911AB EC07                       	smpsPSGAlterVol     $07
000911AD 8006                       	dc.b	nRst, $06
000911AF E102                       	smpsAlterNote       $02
000911B1 01                         	dc.b	$01
000911B2 E106                       	smpsAlterNote       $06
000911B4 01                         	dc.b	$01
000911B5 E102                       	smpsAlterNote       $02
000911B7 01                         	dc.b	$01
000911B8 E1FC                       	smpsAlterNote       $FC
000911BA 01                         	dc.b	$01
000911BB E1FF                       	smpsAlterNote       $FF
000911BD ECF5                       	smpsPSGAlterVol     $F5
000911BF 9B06                       	dc.b	nD2, $06
000911C1 EC04                       	smpsPSGAlterVol     $04
000911C3 E701                       	dc.b	smpsNoAttack, $01
000911C5 EC07                       	smpsPSGAlterVol     $07
000911C7 8003                       	dc.b	nRst, $03
000911C9 ECF5                       	smpsPSGAlterVol     $F5
000911CB 9B07                       	dc.b	nD2, $07
000911CD EC0B                       	smpsPSGAlterVol     $0B
000911CF 8006                       	dc.b	nRst, $06
000911D1 E102                       	smpsAlterNote       $02
000911D3 01                         	dc.b	$01
000911D4 E105                       	smpsAlterNote       $05
000911D6 0101                       	dc.b	$01, $01
000911D8 E1FF                       	smpsAlterNote       $FF
000911DA 01                         	dc.b	$01
000911DB ECF5                       	smpsPSGAlterVol     $F5
000911DD 9B07                       	dc.b	nD2, $07
000911DF EC0B                       	smpsPSGAlterVol     $0B
000911E1 8004                       	dc.b	nRst, $04
000911E3 ECF5                       	smpsPSGAlterVol     $F5
000911E5 9B06                       	dc.b	nD2, $06
000911E7 EC0B                       	smpsPSGAlterVol     $0B
000911E9 8007                       	dc.b	nRst, $07
000911EB E105                       	smpsAlterNote       $05
000911ED 0101                       	dc.b	$01, $01
000911EF E102                       	smpsAlterNote       $02
000911F1 01                         	dc.b	$01
000911F2 E1FC                       	smpsAlterNote       $FC
000911F4 01                         	dc.b	$01
000911F5 E1FF                       	smpsAlterNote       $FF
000911F7 ECF5                       	smpsPSGAlterVol     $F5
000911F9 9B06                       	dc.b	nD2, $06
000911FB EC04                       	smpsPSGAlterVol     $04
000911FD E701                       	dc.b	smpsNoAttack, $01
000911FF EC07                       	smpsPSGAlterVol     $07
00091201 8003                       	dc.b	nRst, $03
00091203 ECF5                       	smpsPSGAlterVol     $F5
00091205 9B06                       	dc.b	nD2, $06
00091207 EC04                       	smpsPSGAlterVol     $04
00091209 E701                       	dc.b	smpsNoAttack, $01
0009120B EC07                       	smpsPSGAlterVol     $07
0009120D 8006                       	dc.b	nRst, $06
0009120F E102                       	smpsAlterNote       $02
00091211 01                         	dc.b	$01
00091212 E106                       	smpsAlterNote       $06
00091214 01                         	dc.b	$01
00091215 E102                       	smpsAlterNote       $02
00091217 01                         	dc.b	$01
00091218 E1FF                       	smpsAlterNote       $FF
0009121A 01                         	dc.b	$01
0009121B ECF5                       	smpsPSGAlterVol     $F5
0009121D 9B06                       	dc.b	nD2, $06
0009121F EC04                       	smpsPSGAlterVol     $04
00091221 E701                       	dc.b	smpsNoAttack, $01
00091223 EC07                       	smpsPSGAlterVol     $07
00091225 8003                       	dc.b	nRst, $03
00091227 ECF5                       	smpsPSGAlterVol     $F5
00091229 9B07                       	dc.b	nD2, $07
0009122B EC0B                       	smpsPSGAlterVol     $0B
0009122D 8007                       	dc.b	nRst, $07
0009122F E105                       	smpsAlterNote       $05
00091231 0101                       	dc.b	$01, $01
00091233 E1FF                       	smpsAlterNote       $FF
00091235 01                         	dc.b	$01
00091236 E1FC                       	smpsAlterNote       $FC
00091238 01                         	dc.b	$01
00091239 E1FF                       	smpsAlterNote       $FF
0009123B ECF5                       	smpsPSGAlterVol     $F5
0009123D 9B06                       	dc.b	nD2, $06
0009123F EC0B                       	smpsPSGAlterVol     $0B
00091241 8004                       	dc.b	nRst, $04
00091243 ECF5                       	smpsPSGAlterVol     $F5
00091245 9B06                       	dc.b	nD2, $06
00091247 EC04                       	smpsPSGAlterVol     $04
00091249 E701                       	dc.b	smpsNoAttack, $01
0009124B EC07                       	smpsPSGAlterVol     $07
0009124D 8006                       	dc.b	nRst, $06
0009124F E102                       	smpsAlterNote       $02
00091251 01                         	dc.b	$01
00091252 E106                       	smpsAlterNote       $06
00091254 01                         	dc.b	$01
00091255 E102                       	smpsAlterNote       $02
00091257 01                         	dc.b	$01
00091258 E1FC                       	smpsAlterNote       $FC
0009125A 01                         	dc.b	$01
0009125B E1FF                       	smpsAlterNote       $FF
0009125D ECF5                       	smpsPSGAlterVol     $F5
0009125F 9B06                       	dc.b	nD2, $06
00091261 EC04                       	smpsPSGAlterVol     $04
00091263 E701                       	dc.b	smpsNoAttack, $01
00091265 EC07                       	smpsPSGAlterVol     $07
00091267 8003                       	dc.b	nRst, $03
00091269 ECF5                       	smpsPSGAlterVol     $F5
0009126B 9B06                       	dc.b	nD2, $06
0009126D EC04                       	smpsPSGAlterVol     $04
0009126F E701                       	dc.b	smpsNoAttack, $01
00091271 EC07                       	smpsPSGAlterVol     $07
00091273 8006                       	dc.b	nRst, $06
00091275 E102                       	smpsAlterNote       $02
00091277 01                         	dc.b	$01
00091278 E106                       	smpsAlterNote       $06
0009127A 01                         	dc.b	$01
0009127B E105                       	smpsAlterNote       $05
0009127D 01                         	dc.b	$01
0009127E E1FF                       	smpsAlterNote       $FF
00091280 01                         	dc.b	$01
00091281 ECF5                       	smpsPSGAlterVol     $F5
00091283 9B07                       	dc.b	nD2, $07
00091285 EC0B                       	smpsPSGAlterVol     $0B
00091287 8004                       	dc.b	nRst, $04
00091289 ECF5                       	smpsPSGAlterVol     $F5
0009128B 9B06                       	dc.b	nD2, $06
0009128D EC0B                       	smpsPSGAlterVol     $0B
0009128F 8007                       	dc.b	nRst, $07
00091291 E105                       	smpsAlterNote       $05
00091293 0101                       	dc.b	$01, $01
00091295 E101                       	smpsAlterNote       $01
00091297 01                         	dc.b	$01
00091298 E1FB                       	smpsAlterNote       $FB
0009129A 01                         	dc.b	$01
0009129B E1FE                       	smpsAlterNote       $FE
0009129D ECF5                       	smpsPSGAlterVol     $F5
0009129F 9A06                       	dc.b	nCs2, $06
000912A1 EC04                       	smpsPSGAlterVol     $04
000912A3 E701                       	dc.b	smpsNoAttack, $01
000912A5 EC07                       	smpsPSGAlterVol     $07
000912A7 8003                       	dc.b	nRst, $03
000912A9 ECF5                       	smpsPSGAlterVol     $F5
000912AB 9A06                       	dc.b	nCs2, $06
000912AD EC04                       	smpsPSGAlterVol     $04
000912AF E701                       	dc.b	smpsNoAttack, $01
000912B1 EC07                       	smpsPSGAlterVol     $07
000912B3 8003                       	dc.b	nRst, $03
000912B5 E1FC                       	smpsAlterNote       $FC
000912B7 ECF5                       	smpsPSGAlterVol     $F5
000912B9 8F07                       	dc.b	nD1, $07
000912BB EC0B                       	smpsPSGAlterVol     $0B
000912BD 8006                       	dc.b	nRst, $06
000912BF E1FF                       	smpsAlterNote       $FF
000912C1 01                         	dc.b	$01
000912C2 E103                       	smpsAlterNote       $03
000912C4 01                         	dc.b	$01
000912C5 E102                       	smpsAlterNote       $02
000912C7 01                         	dc.b	$01
000912C8 E1FC                       	smpsAlterNote       $FC
000912CA 01                         	dc.b	$01
000912CB E1F8                       	smpsAlterNote       $F8
000912CD 01                         	dc.b	$01
000912CE E1FC                       	smpsAlterNote       $FC
000912D0 01                         	dc.b	$01
000912D1 E1FF                       	smpsAlterNote       $FF
000912D3 01                         	dc.b	$01
000912D4 E103                       	smpsAlterNote       $03
000912D6 01                         	dc.b	$01
000912D7 E1FC                       	smpsAlterNote       $FC
000912D9 ECF5                       	smpsPSGAlterVol     $F5
000912DB 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000912DF EC04                       	smpsPSGAlterVol     $04
000912E1 E701                       	dc.b	smpsNoAttack, $01
000912E3 EC07                       	smpsPSGAlterVol     $07
000912E5 8009                       	dc.b	nRst, $09
000912E7 E1FF                       	smpsAlterNote       $FF
000912E9 01                         	dc.b	$01
000912EA E103                       	smpsAlterNote       $03
000912EC 01                         	dc.b	$01
000912ED E102                       	smpsAlterNote       $02
000912EF 01                         	dc.b	$01
000912F0 E1FC                       	smpsAlterNote       $FC
000912F2 01                         	dc.b	$01
000912F3 E1F8                       	smpsAlterNote       $F8
000912F5 01                         	dc.b	$01
000912F6 E1FC                       	smpsAlterNote       $FC
000912F8 01                         	dc.b	$01
000912F9 E1FF                       	smpsAlterNote       $FF
000912FB 01                         	dc.b	$01
000912FC E103                       	smpsAlterNote       $03
000912FE 01                         	dc.b	$01
000912FF E1FF                       	smpsAlterNote       $FF
00091301 01                         	dc.b	$01
00091302 E1F9                       	smpsAlterNote       $F9
00091304 01                         	dc.b	$01
00091305 E1F8                       	smpsAlterNote       $F8
00091307 01                         	dc.b	$01
00091308 E1FC                       	smpsAlterNote       $FC
0009130A 01                         	dc.b	$01
0009130B E102                       	smpsAlterNote       $02
0009130D 0101                       	dc.b	$01, $01
0009130F E1FF                       	smpsAlterNote       $FF
00091311 01                         	dc.b	$01
00091312 E1FC                       	smpsAlterNote       $FC
00091314 ECF5                       	smpsPSGAlterVol     $F5
00091316 8F02                       	dc.b	nD1, $02
00091318 EC04                       	smpsPSGAlterVol     $04
0009131A E701                       	dc.b	smpsNoAttack, $01
0009131C ECFC                       	smpsPSGAlterVol     $FC
0009131E E1FB                       	smpsAlterNote       $FB
00091320 8D06                       	dc.b	nC1, $06
00091322 EC04                       	smpsPSGAlterVol     $04
00091324 E701                       	dc.b	smpsNoAttack, $01
00091326 EC07                       	smpsPSGAlterVol     $07
00091328 8006                       	dc.b	nRst, $06
0009132A E1FE                       	smpsAlterNote       $FE
0009132C 01                         	dc.b	$01
0009132D E102                       	smpsAlterNote       $02
0009132F 01                         	dc.b	$01
00091330 E1FE                       	smpsAlterNote       $FE
00091332 01                         	dc.b	$01
00091333 E1FB                       	smpsAlterNote       $FB
00091335 01                         	dc.b	$01
00091336 E1F7                       	smpsAlterNote       $F7
00091338 01                         	dc.b	$01
00091339 E1FB                       	smpsAlterNote       $FB
0009133B 01                         	dc.b	$01
0009133C E101                       	smpsAlterNote       $01
0009133E 01                         	dc.b	$01
0009133F E102                       	smpsAlterNote       $02
00091341 01                         	dc.b	$01
00091342 E1FB                       	smpsAlterNote       $FB
00091344 ECF5                       	smpsPSGAlterVol     $F5
00091346 8D02                       	dc.b	nC1, $02
00091348 EC04                       	smpsPSGAlterVol     $04
0009134A E701                       	dc.b	smpsNoAttack, $01
0009134C E1FC                       	smpsAlterNote       $FC
0009134E ECFC                       	smpsPSGAlterVol     $FC
00091350 8F0D                       	dc.b	nD1, $0D
00091352 E1FF                       	smpsAlterNote       $FF
00091354 E701                       	dc.b	smpsNoAttack, $01
00091356 E103                       	smpsAlterNote       $03
00091358 E701                       	dc.b	smpsNoAttack, $01
0009135A E1FF                       	smpsAlterNote       $FF
0009135C E701                       	dc.b	smpsNoAttack, $01
0009135E E1FC                       	smpsAlterNote       $FC
00091360 E701                       	dc.b	smpsNoAttack, $01
00091362 E1F8                       	smpsAlterNote       $F8
00091364 E701                       	dc.b	smpsNoAttack, $01
00091366 E1FC                       	smpsAlterNote       $FC
00091368 E701                       	dc.b	smpsNoAttack, $01
0009136A E102                       	smpsAlterNote       $02
0009136C E701                       	dc.b	smpsNoAttack, $01
0009136E E103                       	smpsAlterNote       $03
00091370 E701                       	dc.b	smpsNoAttack, $01
00091372 E1FF                       	smpsAlterNote       $FF
00091374 E701                       	dc.b	smpsNoAttack, $01
00091376 E1F9                       	smpsAlterNote       $F9
00091378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009137C E1FC                       	smpsAlterNote       $FC
0009137E E701                       	dc.b	smpsNoAttack, $01
00091380 E102                       	smpsAlterNote       $02
00091382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091386 E1FC                       	smpsAlterNote       $FC
00091388 E701                       	dc.b	smpsNoAttack, $01
0009138A E1F9                       	smpsAlterNote       $F9
0009138C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091390 E1FF                       	smpsAlterNote       $FF
00091392 EC04                       	smpsPSGAlterVol     $04
00091394 E701                       	dc.b	smpsNoAttack, $01
00091396 EC07                       	smpsPSGAlterVol     $07
00091398 E103                       	smpsAlterNote       $03
0009139A 8001                       	dc.b	nRst, $01
0009139C E102                       	smpsAlterNote       $02
0009139E 01                         	dc.b	$01
0009139F E1FB                       	smpsAlterNote       $FB
000913A1 01                         	dc.b	$01
000913A2 E1F7                       	smpsAlterNote       $F7
000913A4 01                         	dc.b	$01
000913A5 E1FB                       	smpsAlterNote       $FB
000913A7 01                         	dc.b	$01
000913A8 E102                       	smpsAlterNote       $02
000913AA 01                         	dc.b	$01
000913AB E103                       	smpsAlterNote       $03
000913AD 01                         	dc.b	$01
000913AE E1FB                       	smpsAlterNote       $FB
000913B0 ECF5                       	smpsPSGAlterVol     $F5
000913B2 8E06                       	dc.b	nCs1, $06
000913B4 EC04                       	smpsPSGAlterVol     $04
000913B6 E701                       	dc.b	smpsNoAttack, $01
000913B8 EC07                       	smpsPSGAlterVol     $07
000913BA 8003                       	dc.b	nRst, $03
000913BC ECF5                       	smpsPSGAlterVol     $F5
000913BE 8E06                       	dc.b	nCs1, $06
000913C0 EC04                       	smpsPSGAlterVol     $04
000913C2 E701                       	dc.b	smpsNoAttack, $01
000913C4 EC07                       	smpsPSGAlterVol     $07
000913C6 8006                       	dc.b	nRst, $06
000913C8 E1FE                       	smpsAlterNote       $FE
000913CA 01                         	dc.b	$01
000913CB E102                       	smpsAlterNote       $02
000913CD 01                         	dc.b	$01
000913CE E1FE                       	smpsAlterNote       $FE
000913D0 01                         	dc.b	$01
000913D1 E1F9                       	smpsAlterNote       $F9
000913D3 01                         	dc.b	$01
000913D4 E1FC                       	smpsAlterNote       $FC
000913D6 ECF5                       	smpsPSGAlterVol     $F5
000913D8 8F06                       	dc.b	nD1, $06
000913DA EC04                       	smpsPSGAlterVol     $04
000913DC E701                       	dc.b	smpsNoAttack, $01
000913DE EC07                       	smpsPSGAlterVol     $07
000913E0 8003                       	dc.b	nRst, $03
000913E2 ECF5                       	smpsPSGAlterVol     $F5
000913E4 8F07                       	dc.b	nD1, $07
000913E6 EC0B                       	smpsPSGAlterVol     $0B
000913E8 8006                       	dc.b	nRst, $06
000913EA E1FF                       	smpsAlterNote       $FF
000913EC 01                         	dc.b	$01
000913ED E102                       	smpsAlterNote       $02
000913EF 0101                       	dc.b	$01, $01
000913F1 E1FB                       	smpsAlterNote       $FB
000913F3 01                         	dc.b	$01
000913F4 ECF5                       	smpsPSGAlterVol     $F5
000913F6 8E07                       	dc.b	nCs1, $07
000913F8 EC0B                       	smpsPSGAlterVol     $0B
000913FA 8004                       	dc.b	nRst, $04
000913FC ECF5                       	smpsPSGAlterVol     $F5
000913FE 8E06                       	dc.b	nCs1, $06
00091400 EC04                       	smpsPSGAlterVol     $04
00091402 E701                       	dc.b	smpsNoAttack, $01
00091404 EC07                       	smpsPSGAlterVol     $07
00091406 8006                       	dc.b	nRst, $06
00091408 E101                       	smpsAlterNote       $01
0009140A 01                         	dc.b	$01
0009140B E102                       	smpsAlterNote       $02
0009140D 01                         	dc.b	$01
0009140E E1FE                       	smpsAlterNote       $FE
00091410 01                         	dc.b	$01
00091411 E1F8                       	smpsAlterNote       $F8
00091413 01                         	dc.b	$01
00091414 E1FB                       	smpsAlterNote       $FB
00091416 ECF5                       	smpsPSGAlterVol     $F5
00091418 8E06                       	dc.b	nCs1, $06
0009141A EC04                       	smpsPSGAlterVol     $04
0009141C E701                       	dc.b	smpsNoAttack, $01
0009141E EC07                       	smpsPSGAlterVol     $07
00091420 8003                       	dc.b	nRst, $03
00091422 ECF5                       	smpsPSGAlterVol     $F5
00091424 8E06                       	dc.b	nCs1, $06
00091426 EC04                       	smpsPSGAlterVol     $04
00091428 E701                       	dc.b	smpsNoAttack, $01
0009142A EC07                       	smpsPSGAlterVol     $07
0009142C 8004                       	dc.b	nRst, $04
0009142E E1FC                       	smpsAlterNote       $FC
00091430 ECF5                       	smpsPSGAlterVol     $F5
00091432 8F06                       	dc.b	nD1, $06
00091434 EC0B                       	smpsPSGAlterVol     $0B
00091436 8006                       	dc.b	nRst, $06
00091438 E1FF                       	smpsAlterNote       $FF
0009143A 01                         	dc.b	$01
0009143B E102                       	smpsAlterNote       $02
0009143D 0101                       	dc.b	$01, $01
0009143F E1FC                       	smpsAlterNote       $FC
00091441 01                         	dc.b	$01
00091442 E1F8                       	smpsAlterNote       $F8
00091444 01                         	dc.b	$01
00091445 E1F9                       	smpsAlterNote       $F9
00091447 01                         	dc.b	$01
00091448 E1FF                       	smpsAlterNote       $FF
0009144A 01                         	dc.b	$01
0009144B E103                       	smpsAlterNote       $03
0009144D 01                         	dc.b	$01
0009144E E1FC                       	smpsAlterNote       $FC
00091450 ECF5                       	smpsPSGAlterVol     $F5
00091452 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091456 EC04                       	smpsPSGAlterVol     $04
00091458 E701                       	dc.b	smpsNoAttack, $01
0009145A EC07                       	smpsPSGAlterVol     $07
0009145C 8009                       	dc.b	nRst, $09
0009145E E1FF                       	smpsAlterNote       $FF
00091460 01                         	dc.b	$01
00091461 E102                       	smpsAlterNote       $02
00091463 0101                       	dc.b	$01, $01
00091465 E1FC                       	smpsAlterNote       $FC
00091467 01                         	dc.b	$01
00091468 E1F8                       	smpsAlterNote       $F8
0009146A 01                         	dc.b	$01
0009146B E1F9                       	smpsAlterNote       $F9
0009146D 01                         	dc.b	$01
0009146E E1FF                       	smpsAlterNote       $FF
00091470 01                         	dc.b	$01
00091471 E103                       	smpsAlterNote       $03
00091473 01                         	dc.b	$01
00091474 E1FF                       	smpsAlterNote       $FF
00091476 01                         	dc.b	$01
00091477 E1FC                       	smpsAlterNote       $FC
00091479 01                         	dc.b	$01
0009147A E1F8                       	smpsAlterNote       $F8
0009147C 01                         	dc.b	$01
0009147D E1FC                       	smpsAlterNote       $FC
0009147F 01                         	dc.b	$01
00091480 E102                       	smpsAlterNote       $02
00091482 01                         	dc.b	$01
00091483 E103                       	smpsAlterNote       $03
00091485 01                         	dc.b	$01
00091486 E1FF                       	smpsAlterNote       $FF
00091488 01                         	dc.b	$01
00091489 E1FC                       	smpsAlterNote       $FC
0009148B ECF5                       	smpsPSGAlterVol     $F5
0009148D 8F03                       	dc.b	nD1, $03
0009148F E1FB                       	smpsAlterNote       $FB
00091491 8D06                       	dc.b	nC1, $06
00091493 EC04                       	smpsPSGAlterVol     $04
00091495 E701                       	dc.b	smpsNoAttack, $01
00091497 EC07                       	smpsPSGAlterVol     $07
00091499 8006                       	dc.b	nRst, $06
0009149B E1FE                       	smpsAlterNote       $FE
0009149D 01                         	dc.b	$01
0009149E E102                       	smpsAlterNote       $02
000914A0 01                         	dc.b	$01
000914A1 E101                       	smpsAlterNote       $01
000914A3 01                         	dc.b	$01
000914A4 E1FB                       	smpsAlterNote       $FB
000914A6 01                         	dc.b	$01
000914A7 E1F7                       	smpsAlterNote       $F7
000914A9 01                         	dc.b	$01
000914AA E1FB                       	smpsAlterNote       $FB
000914AC 01                         	dc.b	$01
000914AD E1FE                       	smpsAlterNote       $FE
000914AF 01                         	dc.b	$01
000914B0 E102                       	smpsAlterNote       $02
000914B2 01                         	dc.b	$01
000914B3 E1FB                       	smpsAlterNote       $FB
000914B5 ECF5                       	smpsPSGAlterVol     $F5
000914B7 8D03                       	dc.b	nC1, $03
000914B9 E1FC                       	smpsAlterNote       $FC
000914BB 8F0D                       	dc.b	nD1, $0D
000914BD E1FF                       	smpsAlterNote       $FF
000914BF E701                       	dc.b	smpsNoAttack, $01
000914C1 E103                       	smpsAlterNote       $03
000914C3 E701                       	dc.b	smpsNoAttack, $01
000914C5 E1FF                       	smpsAlterNote       $FF
000914C7 E701                       	dc.b	smpsNoAttack, $01
000914C9 E1FC                       	smpsAlterNote       $FC
000914CB E701                       	dc.b	smpsNoAttack, $01
000914CD E1F8                       	smpsAlterNote       $F8
000914CF E701                       	dc.b	smpsNoAttack, $01
000914D1 E1FC                       	smpsAlterNote       $FC
000914D3 E701                       	dc.b	smpsNoAttack, $01
000914D5 E102                       	smpsAlterNote       $02
000914D7 E701                       	dc.b	smpsNoAttack, $01
000914D9 E103                       	smpsAlterNote       $03
000914DB E701                       	dc.b	smpsNoAttack, $01
000914DD E1FF                       	smpsAlterNote       $FF
000914DF E701                       	dc.b	smpsNoAttack, $01
000914E1 E1F9                       	smpsAlterNote       $F9
000914E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914E7 E1FC                       	smpsAlterNote       $FC
000914E9 E701                       	dc.b	smpsNoAttack, $01
000914EB E102                       	smpsAlterNote       $02
000914ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914F1 E1FF                       	smpsAlterNote       $FF
000914F3 E701                       	dc.b	smpsNoAttack, $01
000914F5 E1F9                       	smpsAlterNote       $F9
000914F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914FB E1FF                       	smpsAlterNote       $FF
000914FD EC04                       	smpsPSGAlterVol     $04
000914FF E701                       	dc.b	smpsNoAttack, $01
00091501 EC07                       	smpsPSGAlterVol     $07
00091503 E103                       	smpsAlterNote       $03
00091505 8001                       	dc.b	nRst, $01
00091507 E102                       	smpsAlterNote       $02
00091509 01                         	dc.b	$01
0009150A E1FB                       	smpsAlterNote       $FB
0009150C 01                         	dc.b	$01
0009150D E1F7                       	smpsAlterNote       $F7
0009150F 01                         	dc.b	$01
00091510 E1FB                       	smpsAlterNote       $FB
00091512 01                         	dc.b	$01
00091513 E1FF                       	smpsAlterNote       $FF
00091515 01                         	dc.b	$01
00091516 E103                       	smpsAlterNote       $03
00091518 01                         	dc.b	$01
00091519 E1FB                       	smpsAlterNote       $FB
0009151B ECF5                       	smpsPSGAlterVol     $F5
0009151D 8E06                       	dc.b	nCs1, $06
0009151F EC04                       	smpsPSGAlterVol     $04
00091521 E701                       	dc.b	smpsNoAttack, $01
00091523 EC07                       	smpsPSGAlterVol     $07
00091525 8003                       	dc.b	nRst, $03
00091527 ECF5                       	smpsPSGAlterVol     $F5
00091529 8E06                       	dc.b	nCs1, $06
0009152B EC04                       	smpsPSGAlterVol     $04
0009152D E701                       	dc.b	smpsNoAttack, $01
0009152F EC07                       	smpsPSGAlterVol     $07
00091531 8006                       	dc.b	nRst, $06
00091533 E1FE                       	smpsAlterNote       $FE
00091535 01                         	dc.b	$01
00091536 E102                       	smpsAlterNote       $02
00091538 01                         	dc.b	$01
00091539 E1FE                       	smpsAlterNote       $FE
0009153B 01                         	dc.b	$01
0009153C E1FC                       	smpsAlterNote       $FC
0009153E 01                         	dc.b	$01
0009153F ECF5                       	smpsPSGAlterVol     $F5
00091541 8F06                       	dc.b	nD1, $06
00091543 EC04                       	smpsPSGAlterVol     $04
00091545 E701                       	dc.b	smpsNoAttack, $01
00091547 EC07                       	smpsPSGAlterVol     $07
00091549 8003                       	dc.b	nRst, $03
0009154B ECF5                       	smpsPSGAlterVol     $F5
0009154D 8F07                       	dc.b	nD1, $07
0009154F EC0B                       	smpsPSGAlterVol     $0B
00091551 8007                       	dc.b	nRst, $07
00091553 E102                       	smpsAlterNote       $02
00091555 0101                       	dc.b	$01, $01
00091557 E1FB                       	smpsAlterNote       $FB
00091559 01                         	dc.b	$01
0009155A E1F8                       	smpsAlterNote       $F8
0009155C 01                         	dc.b	$01
0009155D E1FB                       	smpsAlterNote       $FB
0009155F ECF5                       	smpsPSGAlterVol     $F5
00091561 8E06                       	dc.b	nCs1, $06
00091563 EC0B                       	smpsPSGAlterVol     $0B
00091565 8004                       	dc.b	nRst, $04
00091567 ECF5                       	smpsPSGAlterVol     $F5
00091569 8E06                       	dc.b	nCs1, $06
0009156B EC04                       	smpsPSGAlterVol     $04
0009156D E701                       	dc.b	smpsNoAttack, $01
0009156F EC07                       	smpsPSGAlterVol     $07
00091571 8006                       	dc.b	nRst, $06
00091573 E1FE                       	smpsAlterNote       $FE
00091575 01                         	dc.b	$01
00091576 E102                       	smpsAlterNote       $02
00091578 01                         	dc.b	$01
00091579 E1FE                       	smpsAlterNote       $FE
0009157B 01                         	dc.b	$01
0009157C E1F9                       	smpsAlterNote       $F9
0009157E 01                         	dc.b	$01
0009157F E1FC                       	smpsAlterNote       $FC
00091581 ECF5                       	smpsPSGAlterVol     $F5
00091583 8F06                       	dc.b	nD1, $06
00091585 EC04                       	smpsPSGAlterVol     $04
00091587 E701                       	dc.b	smpsNoAttack, $01
00091589 EC07                       	smpsPSGAlterVol     $07
0009158B 8003                       	dc.b	nRst, $03
0009158D ECF5                       	smpsPSGAlterVol     $F5
0009158F 8F06                       	dc.b	nD1, $06
00091591 EC04                       	smpsPSGAlterVol     $04
00091593 E701                       	dc.b	smpsNoAttack, $01
00091595 EC07                       	smpsPSGAlterVol     $07
00091597 8006                       	dc.b	nRst, $06
00091599 E1FF                       	smpsAlterNote       $FF
0009159B 01                         	dc.b	$01
0009159C E103                       	smpsAlterNote       $03
0009159E 01                         	dc.b	$01
0009159F E102                       	smpsAlterNote       $02
000915A1 01                         	dc.b	$01
000915A2 E1FB                       	smpsAlterNote       $FB
000915A4 01                         	dc.b	$01
000915A5 ECF5                       	smpsPSGAlterVol     $F5
000915A7 8E07                       	dc.b	nCs1, $07
000915A9 EC0B                       	smpsPSGAlterVol     $0B
000915AB 8004                       	dc.b	nRst, $04
000915AD ECF5                       	smpsPSGAlterVol     $F5
000915AF 8E06                       	dc.b	nCs1, $06
000915B1 EC0B                       	smpsPSGAlterVol     $0B
000915B3 8007                       	dc.b	nRst, $07
000915B5 E101                       	smpsAlterNote       $01
000915B7 0101                       	dc.b	$01, $01
000915B9 E1FE                       	smpsAlterNote       $FE
000915BB 01                         	dc.b	$01
000915BC E1F9                       	smpsAlterNote       $F9
000915BE 01                         	dc.b	$01
000915BF E1FC                       	smpsAlterNote       $FC
000915C1 ECF5                       	smpsPSGAlterVol     $F5
000915C3 8F06                       	dc.b	nD1, $06
000915C5 EC04                       	smpsPSGAlterVol     $04
000915C7 E701                       	dc.b	smpsNoAttack, $01
000915C9 EC07                       	smpsPSGAlterVol     $07
000915CB 8003                       	dc.b	nRst, $03
000915CD ECF5                       	smpsPSGAlterVol     $F5
000915CF 8F06                       	dc.b	nD1, $06
000915D1 EC04                       	smpsPSGAlterVol     $04
000915D3 E701                       	dc.b	smpsNoAttack, $01
000915D5 EC07                       	smpsPSGAlterVol     $07
000915D7 8006                       	dc.b	nRst, $06
000915D9 E1FF                       	smpsAlterNote       $FF
000915DB 01                         	dc.b	$01
000915DC E103                       	smpsAlterNote       $03
000915DE 01                         	dc.b	$01
000915DF E1FF                       	smpsAlterNote       $FF
000915E1 01                         	dc.b	$01
000915E2 E1FB                       	smpsAlterNote       $FB
000915E4 01                         	dc.b	$01
000915E5 ECF5                       	smpsPSGAlterVol     $F5
000915E7 8E06                       	dc.b	nCs1, $06
000915E9 EC04                       	smpsPSGAlterVol     $04
000915EB E701                       	dc.b	smpsNoAttack, $01
000915ED EC07                       	smpsPSGAlterVol     $07
000915EF 8003                       	dc.b	nRst, $03
000915F1 ECF5                       	smpsPSGAlterVol     $F5
000915F3 8E07                       	dc.b	nCs1, $07
000915F5 E1FF                       	smpsAlterNote       $FF
000915F7 9B06                       	dc.b	nD2, $06
000915F9 EC04                       	smpsPSGAlterVol     $04
000915FB E701                       	dc.b	smpsNoAttack, $01
000915FD ECFC                       	smpsPSGAlterVol     $FC
000915FF 9B03                       	dc.b	nD2, $03
00091601 EC04                       	smpsPSGAlterVol     $04
00091603 E701                       	dc.b	smpsNoAttack, $01
00091605 ECFC                       	smpsPSGAlterVol     $FC
00091607 9B02                       	dc.b	nD2, $02
00091609 EC04                       	smpsPSGAlterVol     $04
0009160B E701                       	dc.b	smpsNoAttack, $01
0009160D ECFC                       	smpsPSGAlterVol     $FC
0009160F E1FE                       	smpsAlterNote       $FE
00091611 9A03                       	dc.b	nCs2, $03
00091613 EC0B                       	smpsPSGAlterVol     $0B
00091615 800A                       	dc.b	nRst, $0A
00091617 E102                       	smpsAlterNote       $02
00091619 01                         	dc.b	$01
0009161A E10A                       	smpsAlterNote       $0A
0009161C 01                         	dc.b	$01
0009161D E102                       	smpsAlterNote       $02
0009161F 01                         	dc.b	$01
00091620 E1F7                       	smpsAlterNote       $F7
00091622 01                         	dc.b	$01
00091623 E10A                       	smpsAlterNote       $0A
00091625 01                         	dc.b	$01
00091626 E1FC                       	smpsAlterNote       $FC
00091628 01                         	dc.b	$01
00091629 E108                       	smpsAlterNote       $08
0009162B 0101                       	dc.b	$01, $01
0009162D E102                       	smpsAlterNote       $02
0009162F 01                         	dc.b	$01
00091630 E1F7                       	smpsAlterNote       $F7
00091632 0101                       	dc.b	$01, $01
00091634 E1FC                       	smpsAlterNote       $FC
00091636 ECF5                       	smpsPSGAlterVol     $F5
00091638 8F06                       	dc.b	nD1, $06
0009163A EC04                       	smpsPSGAlterVol     $04
0009163C E701                       	dc.b	smpsNoAttack, $01
0009163E EC07                       	smpsPSGAlterVol     $07
00091640 8003                       	dc.b	nRst, $03
00091642 ECF5                       	smpsPSGAlterVol     $F5
00091644 8F06                       	dc.b	nD1, $06
00091646 EC04                       	smpsPSGAlterVol     $04
00091648 E701                       	dc.b	smpsNoAttack, $01
0009164A EC07                       	smpsPSGAlterVol     $07
0009164C 8006                       	dc.b	nRst, $06
0009164E E1FF                       	smpsAlterNote       $FF
00091650 01                         	dc.b	$01
00091651 E102                       	smpsAlterNote       $02
00091653 01                         	dc.b	$01
00091654 E101                       	smpsAlterNote       $01
00091656 01                         	dc.b	$01
00091657 E1FC                       	smpsAlterNote       $FC
00091659 01                         	dc.b	$01
0009165A ECF5                       	smpsPSGAlterVol     $F5
0009165C 9007                       	dc.b	nEb1, $07
0009165E EC0B                       	smpsPSGAlterVol     $0B
00091660 8004                       	dc.b	nRst, $04
00091662 ECF5                       	smpsPSGAlterVol     $F5
00091664 9006                       	dc.b	nEb1, $06
00091666 EC0B                       	smpsPSGAlterVol     $0B
00091668 8007                       	dc.b	nRst, $07
0009166A E103                       	smpsAlterNote       $03
0009166C 0101                       	dc.b	$01, $01
0009166E E1FF                       	smpsAlterNote       $FF
00091670 01                         	dc.b	$01
00091671 E1F9                       	smpsAlterNote       $F9
00091673 01                         	dc.b	$01
00091674 E1FC                       	smpsAlterNote       $FC
00091676 ECF5                       	smpsPSGAlterVol     $F5
00091678 8F06                       	dc.b	nD1, $06
0009167A EC04                       	smpsPSGAlterVol     $04
0009167C E701                       	dc.b	smpsNoAttack, $01
0009167E EC07                       	smpsPSGAlterVol     $07
00091680 8003                       	dc.b	nRst, $03
00091682 ECF5                       	smpsPSGAlterVol     $F5
00091684 8F06                       	dc.b	nD1, $06
00091686 EC04                       	smpsPSGAlterVol     $04
00091688 E701                       	dc.b	smpsNoAttack, $01
0009168A EC07                       	smpsPSGAlterVol     $07
0009168C 8006                       	dc.b	nRst, $06
0009168E E1FF                       	smpsAlterNote       $FF
00091690 01                         	dc.b	$01
00091691 E103                       	smpsAlterNote       $03
00091693 01                         	dc.b	$01
00091694 E1FF                       	smpsAlterNote       $FF
00091696 01                         	dc.b	$01
00091697 E1F9                       	smpsAlterNote       $F9
00091699 01                         	dc.b	$01
0009169A E1FC                       	smpsAlterNote       $FC
0009169C ECF5                       	smpsPSGAlterVol     $F5
0009169E 8F06                       	dc.b	nD1, $06
000916A0 EC04                       	smpsPSGAlterVol     $04
000916A2 E701                       	dc.b	smpsNoAttack, $01
000916A4 EC07                       	smpsPSGAlterVol     $07
000916A6 8003                       	dc.b	nRst, $03
000916A8 ECF5                       	smpsPSGAlterVol     $F5
000916AA 8F07                       	dc.b	nD1, $07
000916AC EC0B                       	smpsPSGAlterVol     $0B
000916AE 8006                       	dc.b	nRst, $06
000916B0 E1FF                       	smpsAlterNote       $FF
000916B2 01                         	dc.b	$01
000916B3 E102                       	smpsAlterNote       $02
000916B5 0101                       	dc.b	$01, $01
000916B7 E1FC                       	smpsAlterNote       $FC
000916B9 01                         	dc.b	$01
000916BA ECF5                       	smpsPSGAlterVol     $F5
000916BC 8F07                       	dc.b	nD1, $07
000916BE EC0B                       	smpsPSGAlterVol     $0B
000916C0 8004                       	dc.b	nRst, $04
000916C2 ECF5                       	smpsPSGAlterVol     $F5
000916C4 8F06                       	dc.b	nD1, $06
000916C6 EC04                       	smpsPSGAlterVol     $04
000916C8 E701                       	dc.b	smpsNoAttack, $01
000916CA EC07                       	smpsPSGAlterVol     $07
000916CC 8006                       	dc.b	nRst, $06
000916CE E101                       	smpsAlterNote       $01
000916D0 01                         	dc.b	$01
000916D1 E102                       	smpsAlterNote       $02
000916D3 01                         	dc.b	$01
000916D4 E1FF                       	smpsAlterNote       $FF
000916D6 01                         	dc.b	$01
000916D7 E1F9                       	smpsAlterNote       $F9
000916D9 01                         	dc.b	$01
000916DA E1FC                       	smpsAlterNote       $FC
000916DC ECF5                       	smpsPSGAlterVol     $F5
000916DE 9006                       	dc.b	nEb1, $06
000916E0 EC04                       	smpsPSGAlterVol     $04
000916E2 E701                       	dc.b	smpsNoAttack, $01
000916E4 EC07                       	smpsPSGAlterVol     $07
000916E6 8003                       	dc.b	nRst, $03
000916E8 ECF5                       	smpsPSGAlterVol     $F5
000916EA 9006                       	dc.b	nEb1, $06
000916EC EC04                       	smpsPSGAlterVol     $04
000916EE E701                       	dc.b	smpsNoAttack, $01
000916F0 EC07                       	smpsPSGAlterVol     $07
000916F2 8006                       	dc.b	nRst, $06
000916F4 E100                       	smpsAlterNote       $00
000916F6 01                         	dc.b	$01
000916F7 E102                       	smpsAlterNote       $02
000916F9 01                         	dc.b	$01
000916FA E100                       	smpsAlterNote       $00
000916FC 01                         	dc.b	$01
000916FD E1FF                       	smpsAlterNote       $FF
000916FF 01                         	dc.b	$01
00091700 ECF5                       	smpsPSGAlterVol     $F5
00091702 9B06                       	dc.b	nD2, $06
00091704 EC04                       	smpsPSGAlterVol     $04
00091706 E701                       	dc.b	smpsNoAttack, $01
00091708 EC07                       	smpsPSGAlterVol     $07
0009170A 8003                       	dc.b	nRst, $03
0009170C ECF5                       	smpsPSGAlterVol     $F5
0009170E 9B07                       	dc.b	nD2, $07
00091710 EC0B                       	smpsPSGAlterVol     $0B
00091712 8007                       	dc.b	nRst, $07
00091714 E105                       	smpsAlterNote       $05
00091716 0101                       	dc.b	$01, $01
00091718 E1FF                       	smpsAlterNote       $FF
0009171A 01                         	dc.b	$01
0009171B E1FC                       	smpsAlterNote       $FC
0009171D 01                         	dc.b	$01
0009171E E1FF                       	smpsAlterNote       $FF
00091720 ECF5                       	smpsPSGAlterVol     $F5
00091722 9B06                       	dc.b	nD2, $06
00091724 EC0B                       	smpsPSGAlterVol     $0B
00091726 8004                       	dc.b	nRst, $04
00091728 ECF5                       	smpsPSGAlterVol     $F5
0009172A 9B06                       	dc.b	nD2, $06
0009172C EC04                       	smpsPSGAlterVol     $04
0009172E E701                       	dc.b	smpsNoAttack, $01
00091730 EC07                       	smpsPSGAlterVol     $07
00091732 8006                       	dc.b	nRst, $06
00091734 E102                       	smpsAlterNote       $02
00091736 01                         	dc.b	$01
00091737 E106                       	smpsAlterNote       $06
00091739 01                         	dc.b	$01
0009173A E102                       	smpsAlterNote       $02
0009173C 01                         	dc.b	$01
0009173D E1FC                       	smpsAlterNote       $FC
0009173F 01                         	dc.b	$01
00091740 E1FF                       	smpsAlterNote       $FF
00091742 ECF5                       	smpsPSGAlterVol     $F5
00091744 9B06                       	dc.b	nD2, $06
00091746 EC04                       	smpsPSGAlterVol     $04
00091748 E701                       	dc.b	smpsNoAttack, $01
0009174A EC07                       	smpsPSGAlterVol     $07
0009174C 8003                       	dc.b	nRst, $03
0009174E ECF5                       	smpsPSGAlterVol     $F5
00091750 9B07                       	dc.b	nD2, $07
00091752 EC0B                       	smpsPSGAlterVol     $0B
00091754 8006                       	dc.b	nRst, $06
00091756 E102                       	smpsAlterNote       $02
00091758 01                         	dc.b	$01
00091759 E105                       	smpsAlterNote       $05
0009175B 0101                       	dc.b	$01, $01
0009175D E1FF                       	smpsAlterNote       $FF
0009175F 01                         	dc.b	$01
00091760 ECF5                       	smpsPSGAlterVol     $F5
00091762 9B07                       	dc.b	nD2, $07
00091764 EC0B                       	smpsPSGAlterVol     $0B
00091766 8004                       	dc.b	nRst, $04
00091768 ECF5                       	smpsPSGAlterVol     $F5
0009176A 9B06                       	dc.b	nD2, $06
0009176C EC04                       	smpsPSGAlterVol     $04
0009176E E701                       	dc.b	smpsNoAttack, $01
00091770 EC07                       	smpsPSGAlterVol     $07
00091772 8006                       	dc.b	nRst, $06
00091774 E105                       	smpsAlterNote       $05
00091776 0101                       	dc.b	$01, $01
00091778 E102                       	smpsAlterNote       $02
0009177A 01                         	dc.b	$01
0009177B E1FC                       	smpsAlterNote       $FC
0009177D 01                         	dc.b	$01
0009177E E1FF                       	smpsAlterNote       $FF
00091780 ECF5                       	smpsPSGAlterVol     $F5
00091782 9B06                       	dc.b	nD2, $06
00091784 EC04                       	smpsPSGAlterVol     $04
00091786 E701                       	dc.b	smpsNoAttack, $01
00091788 EC07                       	smpsPSGAlterVol     $07
0009178A 8003                       	dc.b	nRst, $03
0009178C ECF5                       	smpsPSGAlterVol     $F5
0009178E 9B06                       	dc.b	nD2, $06
00091790 EC04                       	smpsPSGAlterVol     $04
00091792 E701                       	dc.b	smpsNoAttack, $01
00091794 EC07                       	smpsPSGAlterVol     $07
00091796 8006                       	dc.b	nRst, $06
00091798 E102                       	smpsAlterNote       $02
0009179A 01                         	dc.b	$01
0009179B E106                       	smpsAlterNote       $06
0009179D 01                         	dc.b	$01
0009179E E102                       	smpsAlterNote       $02
000917A0 01                         	dc.b	$01
000917A1 E1FF                       	smpsAlterNote       $FF
000917A3 01                         	dc.b	$01
000917A4 ECF5                       	smpsPSGAlterVol     $F5
000917A6 9B06                       	dc.b	nD2, $06
000917A8 EC04                       	smpsPSGAlterVol     $04
000917AA E701                       	dc.b	smpsNoAttack, $01
000917AC EC07                       	smpsPSGAlterVol     $07
000917AE 8003                       	dc.b	nRst, $03
000917B0 ECF5                       	smpsPSGAlterVol     $F5
000917B2 9B07                       	dc.b	nD2, $07
000917B4 EC0B                       	smpsPSGAlterVol     $0B
000917B6 8007                       	dc.b	nRst, $07
000917B8 E107                       	smpsAlterNote       $07
000917BA 0101                       	dc.b	$01, $01
000917BC E1FE                       	smpsAlterNote       $FE
000917BE 01                         	dc.b	$01
000917BF E1FA                       	smpsAlterNote       $FA
000917C1 0101                       	dc.b	$01, $01
000917C3 E103                       	smpsAlterNote       $03
000917C5 01                         	dc.b	$01
000917C6 E109                       	smpsAlterNote       $09
000917C8 01                         	dc.b	$01
000917C9 E107                       	smpsAlterNote       $07
000917CB 01                         	dc.b	$01
000917CC E1FE                       	smpsAlterNote       $FE
000917CE 01                         	dc.b	$01
000917CF E108                       	smpsAlterNote       $08
000917D1 01                         	dc.b	$01
000917D2 E1FD                       	smpsAlterNote       $FD
000917D4 ECF5                       	smpsPSGAlterVol     $F5
000917D6 940E                       	dc.b	nG1, $0E
000917D8 E103                       	smpsAlterNote       $03
000917DA EC0B                       	smpsPSGAlterVol     $0B
000917DC 8001 01                    	dc.b	nRst, $01, $01
000917DF E1FD                       	smpsAlterNote       $FD
000917E1 01                         	dc.b	$01
000917E2 E1FB                       	smpsAlterNote       $FB
000917E4 0101                       	dc.b	$01, $01
000917E6 E100                       	smpsAlterNote       $00
000917E8 01                         	dc.b	$01
000917E9 E103                       	smpsAlterNote       $03
000917EB 01                         	dc.b	$01
000917EC E100                       	smpsAlterNote       $00
000917EE 01                         	dc.b	$01
000917EF E1FD                       	smpsAlterNote       $FD
000917F1 01                         	dc.b	$01
000917F2 E1FA                       	smpsAlterNote       $FA
000917F4 01                         	dc.b	$01
000917F5 E1FD                       	smpsAlterNote       $FD
000917F7 01                         	dc.b	$01
000917F8 E103                       	smpsAlterNote       $03
000917FA 0101                       	dc.b	$01, $01
000917FC E100                       	smpsAlterNote       $00
000917FE 01                         	dc.b	$01
000917FF E1FE                       	smpsAlterNote       $FE
00091801 ECF5                       	smpsPSGAlterVol     $F5
00091803 960D                       	dc.b	nA1, $0D
00091805 E104                       	smpsAlterNote       $04
00091807 EC0B                       	smpsPSGAlterVol     $0B
00091809 8001 01                    	dc.b	nRst, $01, $01
0009180C E101                       	smpsAlterNote       $01
0009180E 01                         	dc.b	$01
0009180F E1FB                       	smpsAlterNote       $FB
00091811 0101                       	dc.b	$01, $01
00091813 E1FE                       	smpsAlterNote       $FE
00091815 01                         	dc.b	$01
00091816 E104                       	smpsAlterNote       $04
00091818 0101                       	dc.b	$01, $01
0009181A E1FE                       	smpsAlterNote       $FE
0009181C 01                         	dc.b	$01
0009181D E1FB                       	smpsAlterNote       $FB
0009181F 0101                       	dc.b	$01, $01
00091821 E101                       	smpsAlterNote       $01
00091823 01                         	dc.b	$01
00091824 E104                       	smpsAlterNote       $04
00091826 0101                       	dc.b	$01, $01
00091828 E1FE                       	smpsAlterNote       $FE
0009182A ECF5                       	smpsPSGAlterVol     $F5
0009182C 970D                       	dc.b	nBb1, $0D
0009182E E101                       	smpsAlterNote       $01
00091830 EC04                       	smpsPSGAlterVol     $04
00091832 E701                       	dc.b	smpsNoAttack, $01
00091834 EC07                       	smpsPSGAlterVol     $07
00091836 E104                       	smpsAlterNote       $04
00091838 8001                       	dc.b	nRst, $01
0009183A E103                       	smpsAlterNote       $03
0009183C 01                         	dc.b	$01
0009183D E1FE                       	smpsAlterNote       $FE
0009183F 01                         	dc.b	$01
00091840 E1FA                       	smpsAlterNote       $FA
00091842 01                         	dc.b	$01
00091843 E1FE                       	smpsAlterNote       $FE
00091845 01                         	dc.b	$01
00091846 E101                       	smpsAlterNote       $01
00091848 01                         	dc.b	$01
00091849 E104                       	smpsAlterNote       $04
0009184B 01                         	dc.b	$01
0009184C E101                       	smpsAlterNote       $01
0009184E 01                         	dc.b	$01
0009184F E1FB                       	smpsAlterNote       $FB
00091851 01                         	dc.b	$01
00091852 E1FA                       	smpsAlterNote       $FA
00091854 01                         	dc.b	$01
00091855 E1FE                       	smpsAlterNote       $FE
00091857 01                         	dc.b	$01
00091858 E103                       	smpsAlterNote       $03
0009185A 0101                       	dc.b	$01, $01
0009185C E101                       	smpsAlterNote       $01
0009185E 01                         	dc.b	$01
0009185F E1FE                       	smpsAlterNote       $FE
00091861 ECF5                       	smpsPSGAlterVol     $F5
00091863 990D                       	dc.b	nC2, $0D
00091865 E104                       	smpsAlterNote       $04
00091867 EC0B                       	smpsPSGAlterVol     $0B
00091869 8001 01                    	dc.b	nRst, $01, $01
0009186C E102                       	smpsAlterNote       $02
0009186E 01                         	dc.b	$01
0009186F E1FC                       	smpsAlterNote       $FC
00091871 0101                       	dc.b	$01, $01
00091873 E102                       	smpsAlterNote       $02
00091875 01                         	dc.b	$01
00091876 E104                       	smpsAlterNote       $04
00091878 01                         	dc.b	$01
00091879 E1FF                       	smpsAlterNote       $FF
0009187B ECF5                       	smpsPSGAlterVol     $F5
0009187D 9B06                       	dc.b	nD2, $06
0009187F EC04                       	smpsPSGAlterVol     $04
00091881 E701                       	dc.b	smpsNoAttack, $01
00091883 EC07                       	smpsPSGAlterVol     $07
00091885 8003                       	dc.b	nRst, $03
00091887 ECF5                       	smpsPSGAlterVol     $F5
00091889 9B07                       	dc.b	nD2, $07
0009188B EC0B                       	smpsPSGAlterVol     $0B
0009188D 8006                       	dc.b	nRst, $06
0009188F E101                       	smpsAlterNote       $01
00091891 01                         	dc.b	$01
00091892 E104                       	smpsAlterNote       $04
00091894 0101                       	dc.b	$01, $01
00091896 E1FE                       	smpsAlterNote       $FE
00091898 01                         	dc.b	$01
00091899 E1FC                       	smpsAlterNote       $FC
0009189B 01                         	dc.b	$01
0009189C E1FE                       	smpsAlterNote       $FE
0009189E ECF5                       	smpsPSGAlterVol     $F5
000918A0 9C06                       	dc.b	nEb2, $06
000918A2 EC0B                       	smpsPSGAlterVol     $0B
000918A4 8004                       	dc.b	nRst, $04
000918A6 ECF5                       	smpsPSGAlterVol     $F5
000918A8 9C06                       	dc.b	nEb2, $06
000918AA EC04                       	smpsPSGAlterVol     $04
000918AC E701                       	dc.b	smpsNoAttack, $01
000918AE EC07                       	smpsPSGAlterVol     $07
000918B0 8006                       	dc.b	nRst, $06
000918B2 E105                       	smpsAlterNote       $05
000918B4 01                         	dc.b	$01
000918B5 E106                       	smpsAlterNote       $06
000918B7 01                         	dc.b	$01
000918B8 E102                       	smpsAlterNote       $02
000918BA 01                         	dc.b	$01
000918BB E1FB                       	smpsAlterNote       $FB
000918BD 01                         	dc.b	$01
000918BE E1FF                       	smpsAlterNote       $FF
000918C0 ECF5                       	smpsPSGAlterVol     $F5
000918C2 9B06                       	dc.b	nD2, $06
000918C4 EC04                       	smpsPSGAlterVol     $04
000918C6 E701                       	dc.b	smpsNoAttack, $01
000918C8 EC07                       	smpsPSGAlterVol     $07
000918CA 8003                       	dc.b	nRst, $03
000918CC ECF5                       	smpsPSGAlterVol     $F5
000918CE 9B06                       	dc.b	nD2, $06
000918D0 EC04                       	smpsPSGAlterVol     $04
000918D2 E701                       	dc.b	smpsNoAttack, $01
000918D4 EC07                       	smpsPSGAlterVol     $07
000918D6 8006                       	dc.b	nRst, $06
000918D8 E101                       	smpsAlterNote       $01
000918DA 01                         	dc.b	$01
000918DB E105                       	smpsAlterNote       $05
000918DD 01                         	dc.b	$01
000918DE E104                       	smpsAlterNote       $04
000918E0 01                         	dc.b	$01
000918E1 E1FE                       	smpsAlterNote       $FE
000918E3 01                         	dc.b	$01
000918E4 ECF5                       	smpsPSGAlterVol     $F5
000918E6 9C07                       	dc.b	nEb2, $07
000918E8 EC0B                       	smpsPSGAlterVol     $0B
000918EA 8004                       	dc.b	nRst, $04
000918EC ECF5                       	smpsPSGAlterVol     $F5
000918EE 9C06                       	dc.b	nEb2, $06
000918F0 EC0B                       	smpsPSGAlterVol     $0B
000918F2 8007                       	dc.b	nRst, $07
000918F4 E105                       	smpsAlterNote       $05
000918F6 0101                       	dc.b	$01, $01
000918F8 E102                       	smpsAlterNote       $02
000918FA 01                         	dc.b	$01
000918FB E1FB                       	smpsAlterNote       $FB
000918FD 01                         	dc.b	$01
000918FE E1FF                       	smpsAlterNote       $FF
00091900 ECF5                       	smpsPSGAlterVol     $F5
00091902 9B06                       	dc.b	nD2, $06
00091904 EC04                       	smpsPSGAlterVol     $04
00091906 E701                       	dc.b	smpsNoAttack, $01
00091908 EC07                       	smpsPSGAlterVol     $07
0009190A 8003                       	dc.b	nRst, $03
0009190C ECF5                       	smpsPSGAlterVol     $F5
0009190E 9B06                       	dc.b	nD2, $06
00091910 EC04                       	smpsPSGAlterVol     $04
00091912 E701                       	dc.b	smpsNoAttack, $01
00091914 EC07                       	smpsPSGAlterVol     $07
00091916 8006                       	dc.b	nRst, $06
00091918 E101                       	smpsAlterNote       $01
0009191A 01                         	dc.b	$01
0009191B E105                       	smpsAlterNote       $05
0009191D 01                         	dc.b	$01
0009191E E101                       	smpsAlterNote       $01
00091920 01                         	dc.b	$01
00091921 E1FC                       	smpsAlterNote       $FC
00091923 01                         	dc.b	$01
00091924 E1FE                       	smpsAlterNote       $FE
00091926 ECF5                       	smpsPSGAlterVol     $F5
00091928 9C06                       	dc.b	nEb2, $06
0009192A EC04                       	smpsPSGAlterVol     $04
0009192C E701                       	dc.b	smpsNoAttack, $01
0009192E EC07                       	smpsPSGAlterVol     $07
00091930 8003                       	dc.b	nRst, $03
00091932 ECF5                       	smpsPSGAlterVol     $F5
00091934 9C07                       	dc.b	nEb2, $07
00091936 EC0B                       	smpsPSGAlterVol     $0B
00091938 8006                       	dc.b	nRst, $06
0009193A E102                       	smpsAlterNote       $02
0009193C 01                         	dc.b	$01
0009193D E105                       	smpsAlterNote       $05
0009193F 0101                       	dc.b	$01, $01
00091941 E1FF                       	smpsAlterNote       $FF
00091943 01                         	dc.b	$01
00091944 ECF5                       	smpsPSGAlterVol     $F5
00091946 9B07                       	dc.b	nD2, $07
00091948 EC0B                       	smpsPSGAlterVol     $0B
0009194A 8004                       	dc.b	nRst, $04
0009194C ECF5                       	smpsPSGAlterVol     $F5
0009194E 9B06                       	dc.b	nD2, $06
00091950 EC04                       	smpsPSGAlterVol     $04
00091952 E701                       	dc.b	smpsNoAttack, $01
00091954 EC07                       	smpsPSGAlterVol     $07
00091956 8002                       	dc.b	nRst, $02
00091958 E1FC                       	smpsAlterNote       $FC
0009195A ECF5                       	smpsPSGAlterVol     $F5
0009195C 9006                       	dc.b	nEb1, $06
0009195E EC04                       	smpsPSGAlterVol     $04
00091960 E701                       	dc.b	smpsNoAttack, $01
00091962 ECFC                       	smpsPSGAlterVol     $FC
00091964 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091968 EC04                       	smpsPSGAlterVol     $04
0009196A E701                       	dc.b	smpsNoAttack, $01
0009196C E1FD                       	smpsAlterNote       $FD
0009196E ECFC                       	smpsPSGAlterVol     $FC
00091970 9402                       	dc.b	nG1, $02
00091972 EC04                       	smpsPSGAlterVol     $04
00091974 E701                       	dc.b	smpsNoAttack, $01
00091976 E1FE                       	smpsAlterNote       $FE
00091978 ECFC                       	smpsPSGAlterVol     $FC
0009197A 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009197E EC04                       	smpsPSGAlterVol     $04
00091980 E701                       	dc.b	smpsNoAttack, $01
00091982 EC07                       	smpsPSGAlterVol     $07
00091984 8008                       	dc.b	nRst, $08
00091986 F6F4 F3                    	smpsJump            music84_Jump06
00091989                            
00091989                            ; PSG3 Data
00091989                            music84_PSG3:
00091989 F500                       	smpsPSGvoice        $00
0009198B E1FF                       	smpsAlterNote       $FF
0009198D EC0F                       	smpsPSGAlterVol     $0F
0009198F 803A                       	dc.b	nRst, $3A
00091991                            
00091991                            music84_Jump05:
00091991 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0009199D 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000919A7 F6FF E8                    	smpsJump            music84_Jump05
000919AA                            
000919AA                            ; DAC Data
000919AA                            music84_DAC:
000919AA E0C0                       	smpsPan             panCenter, $00
000919AC 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
000919B8 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
000919C4 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
000919D0 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000919DC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000919E8 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
000919F4 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091A00 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00091A0C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091A18 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00091A24 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091A30 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00091A3C 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091A48 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091A54 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00091A60 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00091A6C 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00091A78 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00091A84 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00091A90 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091A9C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091AA8 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091AB4 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00091AC0 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091ACC 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00091AD8 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00091AE4 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00091AF0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091AFC 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091B08 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091B14 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091B20 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091B2C 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00091B38 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00091B44 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00091B50 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091B5C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00091B68 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00091B74 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091B80 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00091B8C 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00091B98 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00091BA4 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091BB0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091BBC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091BC8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091BD4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091BE0 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00091BEC 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00091BF8 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00091C04 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00091C10 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00091C1C 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00091C28 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00091C34 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091C40 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00091C4C 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00091C58 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091C64 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091C70 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091C7C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00091C88 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00091C94 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00091CA0 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00091CAC 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00091CB8 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00091CC4 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00091CD0 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00091CDC 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00091CE8 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091CF4 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00091D00 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091D0C 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00091D18 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00091D24 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00091D30 E0C0                       	smpsPan             panCenter, $00
00091D32 F2                         	smpsStop
00091D33                            
00091D33                            music84_Voices:
00091D33                            ;	Voice $00
00091D33                            ;	$3D
00091D33                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00091D33                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00091D33                            	smpsVcAlgorithm     $05
00091D33                            	smpsVcFeedback      $07
00091D33                            	smpsVcUnusedBits    $00
00091D33                            	smpsVcDetune        $05, $04, $03, $04
00091D33                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091D33                            	smpsVcRateScale     $00, $00, $00, $00
00091D33                            	smpsVcAttackRate    $11, $11, $11, $11
00091D33                            	smpsVcAmpMod        $00, $00, $00, $00
00091D33                            	smpsVcDecayRate1    $00, $00, $00, $0A
00091D33                            	smpsVcDecayRate2    $00, $00, $00, $0B
00091D33                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091D33                            	smpsVcReleaseRate   $08, $08, $08, $07
00091D33 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00091D4C                            
00091D4C                            ;	Voice $01
00091D4C                            ;	$04
00091D4C                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00091D4C                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00091D4C                            	smpsVcAlgorithm     $04
00091D4C                            	smpsVcFeedback      $00
00091D4C                            	smpsVcUnusedBits    $00
00091D4C                            	smpsVcDetune        $04, $03, $04, $05
00091D4C                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00091D4C                            	smpsVcRateScale     $00, $01, $00, $01
00091D4C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00091D4C                            	smpsVcAmpMod        $00, $00, $00, $00
00091D4C                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00091D4C                            	smpsVcDecayRate2    $05, $00, $05, $00
00091D4C                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00091D4C                            	smpsVcReleaseRate   $06, $06, $06, $06
00091D4C 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00091D65                            
00091D65                            ;	Voice $02
00091D65                            ;	$30
00091D65                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00091D65                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00091D65                            	smpsVcAlgorithm     $00
00091D65                            	smpsVcFeedback      $06
00091D65                            	smpsVcUnusedBits    $00
00091D65                            	smpsVcDetune        $04, $02, $00, $06
00091D65                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00091D65                            	smpsVcRateScale     $00, $00, $00, $00
00091D65                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00091D65                            	smpsVcAmpMod        $00, $00, $00, $00
00091D65                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00091D65                            	smpsVcDecayRate2    $01, $01, $01, $01
00091D65                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00091D65                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00091D65 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00091D7E                            
00091D7E                            ;	Voice $03
00091D7E                            ;	$3A
00091D7E                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00091D7E                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00091D7E                            	smpsVcAlgorithm     $02
00091D7E                            	smpsVcFeedback      $07
00091D7E                            	smpsVcUnusedBits    $00
00091D7E                            	smpsVcDetune        $04, $06, $02, $00
00091D7E                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091D7E                            	smpsVcRateScale     $00, $00, $00, $00
00091D7E                            	smpsVcAttackRate    $18, $19, $14, $14
00091D7E                            	smpsVcAmpMod        $00, $00, $00, $00
00091D7E                            	smpsVcDecayRate1    $09, $0D, $09, $09
00091D7E                            	smpsVcDecayRate2    $00, $00, $00, $00
00091D7E                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00091D7E                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00091D7E 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00091D97                            
00091D97                            ;	Voice $04
00091D97                            ;	$3C
00091D97                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00091D97                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00091D97                            	smpsVcAlgorithm     $04
00091D97                            	smpsVcFeedback      $07
00091D97                            	smpsVcUnusedBits    $00
00091D97                            	smpsVcDetune        $07, $00, $00, $03
00091D97                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00091D97                            	smpsVcRateScale     $00, $00, $00, $00
00091D97                            	smpsVcAttackRate    $10, $1F, $10, $1F
00091D97                            	smpsVcAmpMod        $00, $00, $00, $00
00091D97                            	smpsVcDecayRate1    $00, $00, $00, $00
00091D97                            	smpsVcDecayRate2    $00, $00, $00, $00
00091D97                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091D97                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00091D97 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00091DB0                            
00091DB0                            ;	Voice $05
00091DB0                            ;	$38
00091DB0                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00091DB0                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00091DB0                            	smpsVcAlgorithm     $00
00091DB0                            	smpsVcFeedback      $07
00091DB0                            	smpsVcUnusedBits    $00
00091DB0                            	smpsVcDetune        $04, $06, $02, $00
00091DB0                            	smpsVcCoarseFreq    $01, $01, $01, $00
00091DB0                            	smpsVcRateScale     $00, $00, $00, $00
00091DB0                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00091DB0                            	smpsVcAmpMod        $00, $00, $00, $00
00091DB0                            	smpsVcDecayRate1    $00, $03, $00, $17
00091DB0                            	smpsVcDecayRate2    $00, $08, $08, $0B
00091DB0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00091DB0                            	smpsVcReleaseRate   $08, $05, $05, $05
00091DB0 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00091DC9                            
00091DC9                            
00091DCA 00                         		even
00091DCA                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00095FDA                            		even
00095FDA                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00099B32 00                         		even
00099B32                            Music87:	include	sound\music87.asm; Invincibility
00099B32                            triple_Header:
00099B32 =00000001                  smpsHeaderStartSong = 1
00099B32 0000                       	smpsHeaderVoice     triple_Voices
00099B34 0501                       	smpsHeaderChan      $05, $01
00099B36 0200                       	smpsHeaderTempo     $02, $00
00099B38                            
00099B3C 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00099B40 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00099B44 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00099B48 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00099B4C 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00099B52                            
00099B52                            ; DAC Data
00099B52                            triple_DAC:
00099B52 E0C0                       	smpsPan             panCenter, $00
00099B54 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00099B5A                            
00099B5A                            triple_Loop01:
00099B5A 8282 82                    	dc.b	dSnare, dSnare, dSnare
00099B5D                            
00099B5D                            triple_Loop00:
00099B5D 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00099B69 06                         	dc.b	$06
00099B6A F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00099B6F 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00099B7B 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00099B82 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00099B87 0303 1B                    	dc.b	$03, $03, $1B
00099B8A E0C0                       	smpsPan             panCenter, $00
00099B8C F6FF C4                    	smpsJump triple_DAC
00099B8F                            
00099B8F                            ; FM1 Data
00099B8F                            triple_FM1:
00099B8F E0C0                       	smpsPan             panCenter, $00
00099B93 8018                       	dc.b	nRst, $18
00099B95                            
00099B95                            triple_Loop0B:
00099B95 AC06 B8                    	dc.b	nG3, $06, nG4
00099B98 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00099B9D                            
00099B9D                            triple_Loop0C:
00099B9D A7B3                       	dc.b	nD3, nD4
00099B9F F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00099BA4                            
00099BA4                            triple_Loop0D:
00099BA4 A9B5                       	dc.b	nE3, nE4
00099BA6 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00099BAB A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00099BB3 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00099BB8 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00099BC4 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00099BD0 AD                         	dc.b	nAb3
00099BD1 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00099BD6 8018                       	dc.b	nRst, $18
00099BD8 E0C0                       	smpsPan             panCenter, $00
00099BDC F6FF B1                    	smpsJump triple_FM1
00099BDF                            
00099BDF                            ; FM2 Data
00099BDF                            triple_FM2:
00099BDF E0C0                       	smpsPan             panCenter, $00
00099BE3 8018                       	dc.b	nRst, $18
00099BE5                            
00099BE5                            triple_Loop07:
00099BE5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099BF1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099BFD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00099C02 8003                       	dc.b	nRst, $03
00099C04                            
00099C04                            triple_Loop08:
00099C04 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099C0A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00099C0F B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099C15                            
00099C15                            triple_Loop09:
00099C15 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099C21 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099C2D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00099C32 8003                       	dc.b	nRst, $03
00099C34                            
00099C34                            triple_Loop0A:
00099C34 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099C3A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00099C3F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099C45 E0C0                       	smpsPan             panCenter, $00
00099C49 F6FF 94                    	smpsJump triple_FM2
00099C4C                            
00099C4C                            ; FM3 Data
00099C4C                            triple_FM3:
00099C4C E0C0                       	smpsPan             panCenter, $00
00099C50 8018                       	dc.b	nRst, $18
00099C52                            
00099C52                            triple_Loop06:
00099C52 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00099C59 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00099C5E 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00099C6A BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00099C76 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00099C79 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00099C7E 8018                       	dc.b	nRst, $18
00099C80 E0C0                       	smpsPan             panCenter, $00
00099C84 F6FF C6                    	smpsJump triple_FM3
00099C87                            
00099C87                            ; FM4 Data
00099C87                            triple_FM4:
00099C87 E103                       	smpsAlterNote       $03
00099C8B E0C0                       	smpsPan             panCenter, $00
00099C8D 8018                       	dc.b	nRst, $18
00099C8F                            
00099C8F                            triple_Loop02:
00099C8F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099C9B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099CA7 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00099CAC 8003                       	dc.b	nRst, $03
00099CAE                            
00099CAE                            triple_Loop03:
00099CAE B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099CB4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00099CB9 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099CBF                            
00099CBF                            triple_Loop04:
00099CBF C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099CCB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099CD7 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00099CDC 8003                       	dc.b	nRst, $03
00099CDE                            
00099CDE                            triple_Loop05:
00099CDE B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099CE4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00099CE9 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099CEF E0C0                       	smpsPan             panCenter, $00
00099CF1 F6FF 94                    	smpsJump triple_FM4
00099CF4                            
00099CF4                            ; PSG1 Data
00099CF4                            triple_PSG1:
00099CF4 8018                       	dc.b	nRst, $18
00099CF6                            
00099CF6                            triple_Loop0E:
00099CF6 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D02 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D0E 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D1A 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099D1E F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00099D23 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D2F 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D3B 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D47 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099D4B                            
00099D4B                            triple_Loop0F:
00099D4B 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099D51 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00099D56 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00099D5C                            
00099D5C                            triple_Loop10:
00099D5C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D68 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D74 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D80 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099D84 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00099D89 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D95 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099DA1 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099DAD 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099DB1                            
00099DB1                            triple_Loop11:
00099DB1 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099DB7 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00099DBC 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00099DC2 F500                       	smpsPSGvoice        $00
00099DC4 F6FF 2E                    	smpsJump triple_PSG1
00099DC7                            
00099DC7                            triple_Voices:
00099DC7                            ;	Voice $00
00099DC7                            ;	$3A
00099DC7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00099DC7                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00099DC7                            	smpsVcAlgorithm     $02
00099DC7                            	smpsVcFeedback      $07
00099DC7                            	smpsVcUnusedBits    $00
00099DC7                            	smpsVcDetune        $00, $00, $00, $00
00099DC7                            	smpsVcCoarseFreq    $01, $01, $07, $01
00099DC7                            	smpsVcRateScale     $01, $02, $02, $02
00099DC7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00099DC7                            	smpsVcAmpMod        $00, $00, $00, $00
00099DC7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00099DC7                            	smpsVcDecayRate2    $00, $00, $00, $00
00099DC7                            	smpsVcDecayLevel    $00, $01, $0F, $01
00099DC7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099DC7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00099DE0                            
00099DE0                            ;	Voice $01
00099DE0                            ;	$20
00099DE0                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00099DE0                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00099DE0                            	smpsVcAlgorithm     $00
00099DE0                            	smpsVcFeedback      $04
00099DE0                            	smpsVcUnusedBits    $00
00099DE0                            	smpsVcDetune        $00, $00, $03, $07
00099DE0                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00099DE0                            	smpsVcRateScale     $03, $03, $03, $02
00099DE0                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00099DE0                            	smpsVcAmpMod        $00, $00, $00, $00
00099DE0                            	smpsVcDecayRate1    $04, $04, $0A, $10
00099DE0                            	smpsVcDecayRate2    $08, $08, $08, $0F
00099DE0                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00099DE0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099DE0 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099DE0 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099DFA 00                         		even
00099DFA                            Music88:	incbin	sound\music88.bin; Extra Life
00099EE8                            		even
00099EE8                            Music89:	incbin	sound\music89.bin; Special Stage
0009DDB0 00                         		even
0009DDB0                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009DF7A                            		even
0009DF7A                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E214                            		even
0009E214                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A10A8 00                         		even
000A10A8                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A12C4                            		even
000A12C4                            Music8E:	incbin	sound\fle.bin ;		Act Clear
000A1732 00                         		even
000A1732                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A1D72 00                         		even
000A1D72                            Music90:	incbin	sound\music90.bin ; Continue
000A210C 00                         		even
000A210C                            Music91:	incbin	sound\music91.bin ; Credits
000A33DA                            		even
000A33DA                            Music92:	incbin	sound\music92.bin ; Drowning
000A371C 00                         		even
000A371C                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A37EC                            		even
000A37EC                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A44C2 00                         		even
000A44C2                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A44FC 00                         		even
000A44FC                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A4536 00                         		even
000A4536                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A4570 00                         		even
000A4570                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A45AA 00                         		even
000A45AA                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A45E4 00                         		even
000A45E4                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A461E 00                         		even
000A461E                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A4658 00                         		even
000A4658                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A4692 00                         		even
000A4692                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A46CC 00                         		even
000A46CC                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A4BBC                            		even
000A4BBC                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A4BBC                            GentleBreeze_Header:
000A4BBC =00000001                  smpsHeaderStartSong = 1
000A4BBC 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A4BBE 0603                       	smpsHeaderChan      $06, $03
000A4BC0 0100                       	smpsHeaderTempo     $01, $00
000A4BC2                            
000A4BC6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A4BCA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A4BCE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A4BD2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A4BD6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A4BDA 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A4BE0 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A4BE6 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A4BEC                            
000A4BEC                            ; PSG3 Data
000A4BEC                            GentleBreeze_PSG3:
000A4BEC F2                         	smpsStop
000A4BED                            
000A4BED                            ; FM1 Data
000A4BED                            GentleBreeze_FM1:
000A4BEF E0C0                       	smpsPan             panCenter, $00
000A4BF1 E1FF                       	smpsAlterNote       $FF
000A4BF3 C410                       	dc.b	nG5, $10
000A4BF5 E60F                       	smpsAlterVol        $0F
000A4BF7 C4                         	dc.b	nG5
000A4BF8 E6F1                       	smpsAlterVol        $F1
000A4BFA E100                       	smpsAlterNote       $00
000A4BFC C2                         	dc.b	nF5
000A4BFD E60F                       	smpsAlterVol        $0F
000A4BFF 08                         	dc.b	$08
000A4C00 E6F1                       	smpsAlterVol        $F1
000A4C02 C010                       	dc.b	nEb5, $10
000A4C04 E60F                       	smpsAlterVol        $0F
000A4C06 C0                         	dc.b	nEb5
000A4C07 E6F1                       	smpsAlterVol        $F1
000A4C09 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4C0F E60F                       	smpsAlterVol        $0F
000A4C11 C9                         	dc.b	nC6
000A4C12 E6F1                       	smpsAlterVol        $F1
000A4C14 C5                         	dc.b	nAb5
000A4C15 E60F                       	smpsAlterVol        $0F
000A4C17 08                         	dc.b	$08
000A4C18 E6F1                       	smpsAlterVol        $F1
000A4C1A C010                       	dc.b	nEb5, $10
000A4C1C E60F                       	smpsAlterVol        $0F
000A4C1E C0                         	dc.b	nEb5
000A4C1F E6F1                       	smpsAlterVol        $F1
000A4C21 C208                       	dc.b	nF5, $08
000A4C23 E1FF                       	smpsAlterNote       $FF
000A4C25 C410                       	dc.b	nG5, $10
000A4C27 E100                       	smpsAlterNote       $00
000A4C29 C5C7                       	dc.b	nAb5, nBb5
000A4C2B E60F                       	smpsAlterVol        $0F
000A4C2D C7                         	dc.b	nBb5
000A4C2E E6F1                       	smpsAlterVol        $F1
000A4C30 C5                         	dc.b	nAb5
000A4C31 E60F                       	smpsAlterVol        $0F
000A4C33 08                         	dc.b	$08
000A4C34 E6F1                       	smpsAlterVol        $F1
000A4C36 E1FF                       	smpsAlterNote       $FF
000A4C38 C410                       	dc.b	nG5, $10
000A4C3A E60F                       	smpsAlterVol        $0F
000A4C3C C4                         	dc.b	nG5
000A4C3D E6F1                       	smpsAlterVol        $F1
000A4C3F C4                         	dc.b	nG5
000A4C40 E100                       	smpsAlterNote       $00
000A4C42 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4C47 E60F                       	smpsAlterVol        $0F
000A4C49 C2                         	dc.b	nF5
000A4C4A E6F1                       	smpsAlterVol        $F1
000A4C4C E1FF                       	smpsAlterNote       $FF
000A4C4E C4                         	dc.b	nG5
000A4C4F E60F                       	smpsAlterVol        $0F
000A4C51 08                         	dc.b	$08
000A4C52 E6F1                       	smpsAlterVol        $F1
000A4C54 10                         	dc.b	$10
000A4C55 E60F                       	smpsAlterVol        $0F
000A4C57 38                         	dc.b	$38
000A4C58 E6F1                       	smpsAlterVol        $F1
000A4C5A 10                         	dc.b	$10
000A4C5B E60F                       	smpsAlterVol        $0F
000A4C5D C4                         	dc.b	nG5
000A4C5E E6F1                       	smpsAlterVol        $F1
000A4C60 E100                       	smpsAlterNote       $00
000A4C62 C2                         	dc.b	nF5
000A4C63 E60F                       	smpsAlterVol        $0F
000A4C65 08                         	dc.b	$08
000A4C66 E6F1                       	smpsAlterVol        $F1
000A4C68 C010                       	dc.b	nEb5, $10
000A4C6A E60F                       	smpsAlterVol        $0F
000A4C6C C0                         	dc.b	nEb5
000A4C6D E6F1                       	smpsAlterVol        $F1
000A4C6F BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4C75 E60F                       	smpsAlterVol        $0F
000A4C77 C9                         	dc.b	nC6
000A4C78 E6F1                       	smpsAlterVol        $F1
000A4C7A C5                         	dc.b	nAb5
000A4C7B E60F                       	smpsAlterVol        $0F
000A4C7D 08                         	dc.b	$08
000A4C7E E6F1                       	smpsAlterVol        $F1
000A4C80 C010                       	dc.b	nEb5, $10
000A4C82 E60F                       	smpsAlterVol        $0F
000A4C84 C0                         	dc.b	nEb5
000A4C85 E6F1                       	smpsAlterVol        $F1
000A4C87 C208                       	dc.b	nF5, $08
000A4C89 E1FF                       	smpsAlterNote       $FF
000A4C8B C410                       	dc.b	nG5, $10
000A4C8D E100                       	smpsAlterNote       $00
000A4C8F C5C7                       	dc.b	nAb5, nBb5
000A4C91 E60F                       	smpsAlterVol        $0F
000A4C93 C7                         	dc.b	nBb5
000A4C94 E6F1                       	smpsAlterVol        $F1
000A4C96 C5                         	dc.b	nAb5
000A4C97 E60F                       	smpsAlterVol        $0F
000A4C99 08                         	dc.b	$08
000A4C9A E6F1                       	smpsAlterVol        $F1
000A4C9C E1FF                       	smpsAlterNote       $FF
000A4C9E C410                       	dc.b	nG5, $10
000A4CA0 E60F                       	smpsAlterVol        $0F
000A4CA2 C4                         	dc.b	nG5
000A4CA3 E6F1                       	smpsAlterVol        $F1
000A4CA5 C4                         	dc.b	nG5
000A4CA6 E100                       	smpsAlterNote       $00
000A4CA8 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4CAD E60F                       	smpsAlterVol        $0F
000A4CAF 28                         	dc.b	$28
000A4CB0 E6F1                       	smpsAlterVol        $F1
000A4CB2 C008 10                    	dc.b	nEb5, $08, $10
000A4CB5 E60F                       	smpsAlterVol        $0F
000A4CB7 21                         	dc.b	$21
000A4CB8                            
000A4CB8                            GentleBreeze_Loop12:
000A4CB8 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A4CBB F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A4CC0 E717                       	dc.b	smpsNoAttack, $17
000A4CC2 E6F1                       	smpsAlterVol        $F1
000A4CC4 E1FF                       	smpsAlterNote       $FF
000A4CC6 C410                       	dc.b	nG5, $10
000A4CC8 E60F                       	smpsAlterVol        $0F
000A4CCA C4                         	dc.b	nG5
000A4CCB E6F1                       	smpsAlterVol        $F1
000A4CCD E100                       	smpsAlterNote       $00
000A4CCF C2                         	dc.b	nF5
000A4CD0 E60F                       	smpsAlterVol        $0F
000A4CD2 08                         	dc.b	$08
000A4CD3 E6F1                       	smpsAlterVol        $F1
000A4CD5 C010                       	dc.b	nEb5, $10
000A4CD7 E60F                       	smpsAlterVol        $0F
000A4CD9 C0                         	dc.b	nEb5
000A4CDA E6F1                       	smpsAlterVol        $F1
000A4CDC BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4CE2 E60F                       	smpsAlterVol        $0F
000A4CE4 C9                         	dc.b	nC6
000A4CE5 E6F1                       	smpsAlterVol        $F1
000A4CE7 C5                         	dc.b	nAb5
000A4CE8 E60F                       	smpsAlterVol        $0F
000A4CEA 08                         	dc.b	$08
000A4CEB E6F1                       	smpsAlterVol        $F1
000A4CED C010                       	dc.b	nEb5, $10
000A4CEF E60F                       	smpsAlterVol        $0F
000A4CF1 C0                         	dc.b	nEb5
000A4CF2 E6F1                       	smpsAlterVol        $F1
000A4CF4 C208                       	dc.b	nF5, $08
000A4CF6 E1FF                       	smpsAlterNote       $FF
000A4CF8 C410                       	dc.b	nG5, $10
000A4CFA E100                       	smpsAlterNote       $00
000A4CFC C5C7                       	dc.b	nAb5, nBb5
000A4CFE E60F                       	smpsAlterVol        $0F
000A4D00 C7                         	dc.b	nBb5
000A4D01 E6F1                       	smpsAlterVol        $F1
000A4D03 C5                         	dc.b	nAb5
000A4D04 E60F                       	smpsAlterVol        $0F
000A4D06 08                         	dc.b	$08
000A4D07 E6F1                       	smpsAlterVol        $F1
000A4D09 E1FF                       	smpsAlterNote       $FF
000A4D0B C410                       	dc.b	nG5, $10
000A4D0D E60F                       	smpsAlterVol        $0F
000A4D0F C4                         	dc.b	nG5
000A4D10 E6F1                       	smpsAlterVol        $F1
000A4D12 C4                         	dc.b	nG5
000A4D13 E100                       	smpsAlterNote       $00
000A4D15 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4D1A E60F                       	smpsAlterVol        $0F
000A4D1C C2                         	dc.b	nF5
000A4D1D E6F1                       	smpsAlterVol        $F1
000A4D1F E1FF                       	smpsAlterNote       $FF
000A4D21 C4                         	dc.b	nG5
000A4D22 E60F                       	smpsAlterVol        $0F
000A4D24 08                         	dc.b	$08
000A4D25 E6F1                       	smpsAlterVol        $F1
000A4D27 10                         	dc.b	$10
000A4D28 E60F                       	smpsAlterVol        $0F
000A4D2A 38                         	dc.b	$38
000A4D2B E6F1                       	smpsAlterVol        $F1
000A4D2D 10                         	dc.b	$10
000A4D2E E60F                       	smpsAlterVol        $0F
000A4D30 C4                         	dc.b	nG5
000A4D31 E6F1                       	smpsAlterVol        $F1
000A4D33 E100                       	smpsAlterNote       $00
000A4D35 C2                         	dc.b	nF5
000A4D36 E60F                       	smpsAlterVol        $0F
000A4D38 08                         	dc.b	$08
000A4D39 E6F1                       	smpsAlterVol        $F1
000A4D3B C010                       	dc.b	nEb5, $10
000A4D3D E60F                       	smpsAlterVol        $0F
000A4D3F C0                         	dc.b	nEb5
000A4D40 E6F1                       	smpsAlterVol        $F1
000A4D42 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4D48 E60F                       	smpsAlterVol        $0F
000A4D4A C9                         	dc.b	nC6
000A4D4B E6F1                       	smpsAlterVol        $F1
000A4D4D C5                         	dc.b	nAb5
000A4D4E E60F                       	smpsAlterVol        $0F
000A4D50 08                         	dc.b	$08
000A4D51 E6F1                       	smpsAlterVol        $F1
000A4D53 C010                       	dc.b	nEb5, $10
000A4D55 E60F                       	smpsAlterVol        $0F
000A4D57 C0                         	dc.b	nEb5
000A4D58 E6F1                       	smpsAlterVol        $F1
000A4D5A C208                       	dc.b	nF5, $08
000A4D5C E1FF                       	smpsAlterNote       $FF
000A4D5E C410                       	dc.b	nG5, $10
000A4D60 E100                       	smpsAlterNote       $00
000A4D62 C5C7                       	dc.b	nAb5, nBb5
000A4D64 E60F                       	smpsAlterVol        $0F
000A4D66 C7                         	dc.b	nBb5
000A4D67 E6F1                       	smpsAlterVol        $F1
000A4D69 C5                         	dc.b	nAb5
000A4D6A E60F                       	smpsAlterVol        $0F
000A4D6C 08                         	dc.b	$08
000A4D6D E6F1                       	smpsAlterVol        $F1
000A4D6F E1FF                       	smpsAlterNote       $FF
000A4D71 C410                       	dc.b	nG5, $10
000A4D73 E60F                       	smpsAlterVol        $0F
000A4D75 C4                         	dc.b	nG5
000A4D76 E6F1                       	smpsAlterVol        $F1
000A4D78 C4                         	dc.b	nG5
000A4D79 E100                       	smpsAlterNote       $00
000A4D7B C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4D80 E60F                       	smpsAlterVol        $0F
000A4D82 28                         	dc.b	$28
000A4D83 E6F1                       	smpsAlterVol        $F1
000A4D85 C008 10                    	dc.b	nEb5, $08, $10
000A4D88 E60F                       	smpsAlterVol        $0F
000A4D8A 21                         	dc.b	$21
000A4D8B E0C0                       	smpsPan             panCenter, $00
000A4D8D F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A4D90                            
000A4D90                            ; FM2 Data
000A4D90                            GentleBreeze_FM2:
000A4D92 E60C                       	smpsAlterVol        $0C
000A4D94 E0C0                       	smpsPan             panCenter, $00
000A4D96 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A4DA2 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A4DAE 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A4DBA 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A4DC6 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A4DD2 A039                       	dc.b	nG2, $39
000A4DD4                            
000A4DD4                            GentleBreeze_Jump04:
000A4DD4 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A4DD7                            
000A4DD7                            GentleBreeze_Loop11:
000A4DD7 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A4DE3 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A4DEF 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A4DFB 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A4E07 A3                         	dc.b	nBb2
000A4E08 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A4E0D 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A4E19 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A4E25 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A4E31 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A4E3D 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A4E49 A039                       	dc.b	nG2, $39
000A4E4B E0C0                       	smpsPan             panCenter, $00
000A4E4D F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A4E50                            
000A4E50                            ; FM3 Data
000A4E50                            GentleBreeze_FM3:
000A4E52 E0C0                       	smpsPan             panCenter, $00
000A4E54 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A4E5C E616                       	smpsAlterVol        $16
000A4E5E F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A4E63                            
000A4E63                            GentleBreeze_Loop0F:
000A4E63 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A4E67 E1FF                       	smpsAlterNote       $FF
000A4E69 C4                         	dc.b	nG5
000A4E6A E100                       	smpsAlterNote       $00
000A4E6C C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4E71 E608                       	smpsAlterVol        $08
000A4E73 C080 08                    	dc.b	nEb5, nRst, $08
000A4E76 E6F8                       	smpsAlterVol        $F8
000A4E78 C7                         	dc.b	nBb5
000A4E79 E1FF                       	smpsAlterNote       $FF
000A4E7B C4                         	dc.b	nG5
000A4E7C E100                       	smpsAlterNote       $00
000A4E7E C0BB                       	dc.b	nEb5, nBb4
000A4E80 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A4E85 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A4E88 E1FF                       	smpsAlterNote       $FF
000A4E8A C4                         	dc.b	nG5
000A4E8B E100                       	smpsAlterNote       $00
000A4E8D C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4E92 E608                       	smpsAlterVol        $08
000A4E94 C080 08                    	dc.b	nEb5, nRst, $08
000A4E97 E6F8                       	smpsAlterVol        $F8
000A4E99 E1FF                       	smpsAlterNote       $FF
000A4E9B C4                         	dc.b	nG5
000A4E9C E100                       	smpsAlterNote       $00
000A4E9E C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A4EA5 E1FF                       	smpsAlterNote       $FF
000A4EA7 C4                         	dc.b	nG5
000A4EA8 E100                       	smpsAlterNote       $00
000A4EAA C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A4EAF E1FF                       	smpsAlterNote       $FF
000A4EB1 C4                         	dc.b	nG5
000A4EB2 E100                       	smpsAlterNote       $00
000A4EB4 C7                         	dc.b	nBb5
000A4EB5 E1FF                       	smpsAlterNote       $FF
000A4EB7 C4                         	dc.b	nG5
000A4EB8 E100                       	smpsAlterNote       $00
000A4EBA C2C0 01                    	dc.b	nF5, nEb5, $01
000A4EBD                            
000A4EBD                            GentleBreeze_Jump03:
000A4EBD E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A4EC4 E6FA                       	smpsAlterVol        $FA
000A4EC6 F4                         	smpsModOff
000A4EC7 E1FF                       	smpsAlterNote       $FF
000A4EC9 B850                       	dc.b	nG4, $50
000A4ECB E100                       	smpsAlterNote       $00
000A4ECD B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A4ED9 E1FF                       	smpsAlterNote       $FF
000A4EDB B810                       	dc.b	nG4, $10
000A4EDD E100                       	smpsAlterNote       $00
000A4EDF BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A4EE4 E1FF                       	smpsAlterNote       $FF
000A4EE6 B8                         	dc.b	nG4
000A4EE7 E100                       	smpsAlterNote       $00
000A4EE9 B610                       	dc.b	nF4, $10
000A4EEB E1FF                       	smpsAlterNote       $FF
000A4EED B850                       	dc.b	nG4, $50
000A4EEF E100                       	smpsAlterNote       $00
000A4EF1 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A4EF9 E1FF                       	smpsAlterNote       $FF
000A4EFB AC08                       	dc.b	nG3, $08
000A4EFD E100                       	smpsAlterNote       $00
000A4EFF AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A4F04 E1FF                       	smpsAlterNote       $FF
000A4F06 B850                       	dc.b	nG4, $50
000A4F08 E100                       	smpsAlterNote       $00
000A4F0A BB08                       	dc.b	nBb4, $08
000A4F0C E1FF                       	smpsAlterNote       $FF
000A4F0E B8                         	dc.b	nG4
000A4F0F E100                       	smpsAlterNote       $00
000A4F11 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A4F14 E1FF                       	smpsAlterNote       $FF
000A4F16 B810 08                    	dc.b	nG4, $10, $08
000A4F19 E100                       	smpsAlterNote       $00
000A4F1B B6                         	dc.b	nF4
000A4F1C E1FF                       	smpsAlterNote       $FF
000A4F1E B880                       	dc.b	nG4, nRst
000A4F20 E100                       	smpsAlterNote       $00
000A4F22 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A4F25 E1FF                       	smpsAlterNote       $FF
000A4F27 B810                       	dc.b	nG4, $10
000A4F29 E100                       	smpsAlterNote       $00
000A4F2B B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A4F32 E1FF                       	smpsAlterNote       $FF
000A4F34 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A4F42 E606                       	smpsAlterVol        $06
000A4F44 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A4F49 E100                       	smpsAlterNote       $00
000A4F4B                            
000A4F4B                            GentleBreeze_Loop10:
000A4F4B C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A4F4F E1FF                       	smpsAlterNote       $FF
000A4F51 C4                         	dc.b	nG5
000A4F52 E100                       	smpsAlterNote       $00
000A4F54 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4F59 E608                       	smpsAlterVol        $08
000A4F5B C080 08                    	dc.b	nEb5, nRst, $08
000A4F5E E6F8                       	smpsAlterVol        $F8
000A4F60 C7                         	dc.b	nBb5
000A4F61 E1FF                       	smpsAlterNote       $FF
000A4F63 C4                         	dc.b	nG5
000A4F64 E100                       	smpsAlterNote       $00
000A4F66 C0BB                       	dc.b	nEb5, nBb4
000A4F68 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A4F6D C0BD C9                    	dc.b	nEb5, nC5, nC6
000A4F70 E1FF                       	smpsAlterNote       $FF
000A4F72 C4                         	dc.b	nG5
000A4F73 E100                       	smpsAlterNote       $00
000A4F75 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4F7A E608                       	smpsAlterVol        $08
000A4F7C C080 08                    	dc.b	nEb5, nRst, $08
000A4F7F E6F8                       	smpsAlterVol        $F8
000A4F81 E1FF                       	smpsAlterNote       $FF
000A4F83 C4                         	dc.b	nG5
000A4F84 E100                       	smpsAlterNote       $00
000A4F86 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A4F8D E1FF                       	smpsAlterNote       $FF
000A4F8F C4                         	dc.b	nG5
000A4F90 E100                       	smpsAlterNote       $00
000A4F92 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A4F97 E1FF                       	smpsAlterNote       $FF
000A4F99 C4                         	dc.b	nG5
000A4F9A E100                       	smpsAlterNote       $00
000A4F9C C7                         	dc.b	nBb5
000A4F9D E1FF                       	smpsAlterNote       $FF
000A4F9F C4                         	dc.b	nG5
000A4FA0 E100                       	smpsAlterNote       $00
000A4FA2 C2C0 01                    	dc.b	nF5, nEb5, $01
000A4FA5 E0C0                       	smpsPan             panCenter, $00
000A4FA7 F1                         	smpsModOn
000A4FA8 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A4FAB                            
000A4FAB                            ; FM4 Data
000A4FAB                            GentleBreeze_FM4:
000A4FAD E0C0                       	smpsPan             panCenter, $00
000A4FAF 80                         	dc.b	nRst
000A4FB0                            
000A4FB0                            GentleBreeze_Loop0D:
000A4FB0 7F                         	dc.b	$7F
000A4FB1 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A4FB6 77                         	dc.b	$77
000A4FB9 E609                       	smpsAlterVol        $09
000A4FBB C001                       	dc.b	nEb5, $01
000A4FBD                            
000A4FBD                            GentleBreeze_Jump02:
000A4FBD E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A4FC2 E607                       	smpsAlterVol        $07
000A4FC4 E1FF                       	smpsAlterNote       $FF
000A4FC6 C450                       	dc.b	nG5, $50
000A4FC8 E100                       	smpsAlterNote       $00
000A4FCA C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A4FD6 E1FF                       	smpsAlterNote       $FF
000A4FD8 C410                       	dc.b	nG5, $10
000A4FDA E100                       	smpsAlterNote       $00
000A4FDC C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A4FE1 E1FF                       	smpsAlterNote       $FF
000A4FE3 C4                         	dc.b	nG5
000A4FE4 E100                       	smpsAlterNote       $00
000A4FE6 C210                       	dc.b	nF5, $10
000A4FE8 E1FF                       	smpsAlterNote       $FF
000A4FEA C450                       	dc.b	nG5, $50
000A4FEC E100                       	smpsAlterNote       $00
000A4FEE C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A4FF6 E1FF                       	smpsAlterNote       $FF
000A4FF8 B808                       	dc.b	nG4, $08
000A4FFA E100                       	smpsAlterNote       $00
000A4FFC BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A5001 E1FF                       	smpsAlterNote       $FF
000A5003 C450                       	dc.b	nG5, $50
000A5005 E100                       	smpsAlterNote       $00
000A5007 C708                       	dc.b	nBb5, $08
000A5009 E1FF                       	smpsAlterNote       $FF
000A500B C4                         	dc.b	nG5
000A500C E100                       	smpsAlterNote       $00
000A500E C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A5011 E1FF                       	smpsAlterNote       $FF
000A5013 C410 08                    	dc.b	nG5, $10, $08
000A5016 E100                       	smpsAlterNote       $00
000A5018 C2                         	dc.b	nF5
000A5019 E1FF                       	smpsAlterNote       $FF
000A501B C480                       	dc.b	nG5, nRst
000A501D E100                       	smpsAlterNote       $00
000A501F C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A5022 E1FF                       	smpsAlterNote       $FF
000A5024 C410                       	dc.b	nG5, $10
000A5026 E100                       	smpsAlterNote       $00
000A5028 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A502F E1FF                       	smpsAlterNote       $FF
000A5031 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A5039                            
000A5039                            GentleBreeze_Loop0E:
000A5039 7F                         	dc.b	$7F
000A503A F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A503F 77                         	dc.b	$77
000A5040 E100                       	smpsAlterNote       $00
000A5042 C001                       	dc.b	nEb5, $01
000A5044 E6F9                       	smpsAlterVol        $F9
000A5046 E0C0                       	smpsPan             panCenter, $00
000A5048 E100                       	smpsAlterNote       $00
000A504A F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A504D                            
000A504D                            ; FM5 Data
000A504D                            GentleBreeze_FM5:
000A504F E0C0                       	smpsPan             panCenter, $00
000A5051 A5                         	dc.b	nC3
000A5052                            
000A5052                            GentleBreeze_Loop06:
000A5052 10                         	dc.b	$10
000A5053 E607                       	smpsAlterVol        $07
000A5055 A5                         	dc.b	nC3
000A5056 E6F9                       	smpsAlterVol        $F9
000A5058 08                         	dc.b	$08
000A5059 E607                       	smpsAlterVol        $07
000A505B A5                         	dc.b	nC3
000A505C E608                       	smpsAlterVol        $08
000A505E A5                         	dc.b	nC3
000A505F E6F1                       	smpsAlterVol        $F1
000A5061 18                         	dc.b	$18
000A5062 E607                       	smpsAlterVol        $07
000A5064 10                         	dc.b	$10
000A5065 E608                       	smpsAlterVol        $08
000A5067 A5                         	dc.b	nC3
000A5068 E6F1                       	smpsAlterVol        $F1
000A506A A5                         	dc.b	nC3
000A506B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A5070 A5                         	dc.b	nC3
000A5071                            
000A5071                            GentleBreeze_Loop07:
000A5071 E607                       	smpsAlterVol        $07
000A5073 A5                         	dc.b	nC3
000A5074 E6F9                       	smpsAlterVol        $F9
000A5076 08                         	dc.b	$08
000A5077 E607                       	smpsAlterVol        $07
000A5079 A5                         	dc.b	nC3
000A507A E608                       	smpsAlterVol        $08
000A507C A5                         	dc.b	nC3
000A507D E6F1                       	smpsAlterVol        $F1
000A507F 10                         	dc.b	$10
000A5080 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A5085                            
000A5085                            GentleBreeze_Loop08:
000A5085 A5                         	dc.b	nC3
000A5086 E607                       	smpsAlterVol        $07
000A5088 A5                         	dc.b	nC3
000A5089 E6F9                       	smpsAlterVol        $F9
000A508B 08                         	dc.b	$08
000A508C E607                       	smpsAlterVol        $07
000A508E A5                         	dc.b	nC3
000A508F E608                       	smpsAlterVol        $08
000A5091 A5                         	dc.b	nC3
000A5092 E6F1                       	smpsAlterVol        $F1
000A5094 18                         	dc.b	$18
000A5095 E607                       	smpsAlterVol        $07
000A5097 10                         	dc.b	$10
000A5098 E608                       	smpsAlterVol        $08
000A509A A5                         	dc.b	nC3
000A509B E6F1                       	smpsAlterVol        $F1
000A509D A5                         	dc.b	nC3
000A509E F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A50A3 A5                         	dc.b	nC3
000A50A4 E607                       	smpsAlterVol        $07
000A50A6 A5                         	dc.b	nC3
000A50A7 E6F9                       	smpsAlterVol        $F9
000A50A9 08                         	dc.b	$08
000A50AA E607                       	smpsAlterVol        $07
000A50AC A5                         	dc.b	nC3
000A50AD E608                       	smpsAlterVol        $08
000A50AF A5                         	dc.b	nC3
000A50B0 E6F1                       	smpsAlterVol        $F1
000A50B2 10                         	dc.b	$10
000A50B3 E607                       	smpsAlterVol        $07
000A50B5 A5                         	dc.b	nC3
000A50B6 E6F9                       	smpsAlterVol        $F9
000A50B8 08                         	dc.b	$08
000A50B9 E607                       	smpsAlterVol        $07
000A50BB A5                         	dc.b	nC3
000A50BC E608                       	smpsAlterVol        $08
000A50BE A5                         	dc.b	nC3
000A50BF E6F1                       	smpsAlterVol        $F1
000A50C1 01                         	dc.b	$01
000A50C2                            
000A50C2                            GentleBreeze_Jump01:
000A50C2 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A50C5 E607                       	smpsAlterVol        $07
000A50C7                            
000A50C7                            GentleBreeze_Loop09:
000A50C7 10                         	dc.b	$10
000A50C8 E608                       	smpsAlterVol        $08
000A50CA A5                         	dc.b	nC3
000A50CB E6F1                       	smpsAlterVol        $F1
000A50CD 08                         	dc.b	$08
000A50CE E60F                       	smpsAlterVol        $0F
000A50D0 18                         	dc.b	$18
000A50D1 E6F8                       	smpsAlterVol        $F8
000A50D3 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A50D8 10                         	dc.b	$10
000A50D9 E608                       	smpsAlterVol        $08
000A50DB A5                         	dc.b	nC3
000A50DC E6F1                       	smpsAlterVol        $F1
000A50DE 08                         	dc.b	$08
000A50DF E60F                       	smpsAlterVol        $0F
000A50E1 18                         	dc.b	$18
000A50E2 E6F1                       	smpsAlterVol        $F1
000A50E4                            
000A50E4                            GentleBreeze_Loop0A:
000A50E4 10                         	dc.b	$10
000A50E5 E607                       	smpsAlterVol        $07
000A50E7 A5                         	dc.b	nC3
000A50E8 E6F9                       	smpsAlterVol        $F9
000A50EA 08                         	dc.b	$08
000A50EB E607                       	smpsAlterVol        $07
000A50ED A5                         	dc.b	nC3
000A50EE E608                       	smpsAlterVol        $08
000A50F0 A5                         	dc.b	nC3
000A50F1 E6F1                       	smpsAlterVol        $F1
000A50F3 18                         	dc.b	$18
000A50F4 E607                       	smpsAlterVol        $07
000A50F6 10                         	dc.b	$10
000A50F7 E608                       	smpsAlterVol        $08
000A50F9 A5                         	dc.b	nC3
000A50FA E6F1                       	smpsAlterVol        $F1
000A50FC A5                         	dc.b	nC3
000A50FD F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A5102 A5                         	dc.b	nC3
000A5103                            
000A5103                            GentleBreeze_Loop0B:
000A5103 E607                       	smpsAlterVol        $07
000A5105 A5                         	dc.b	nC3
000A5106 E6F9                       	smpsAlterVol        $F9
000A5108 08                         	dc.b	$08
000A5109 E607                       	smpsAlterVol        $07
000A510B A5                         	dc.b	nC3
000A510C E608                       	smpsAlterVol        $08
000A510E A5                         	dc.b	nC3
000A510F E6F1                       	smpsAlterVol        $F1
000A5111 10                         	dc.b	$10
000A5112 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A5117                            
000A5117                            GentleBreeze_Loop0C:
000A5117 A5                         	dc.b	nC3
000A5118 E607                       	smpsAlterVol        $07
000A511A A5                         	dc.b	nC3
000A511B E6F9                       	smpsAlterVol        $F9
000A511D 08                         	dc.b	$08
000A511E E607                       	smpsAlterVol        $07
000A5120 A5                         	dc.b	nC3
000A5121 E608                       	smpsAlterVol        $08
000A5123 A5                         	dc.b	nC3
000A5124 E6F1                       	smpsAlterVol        $F1
000A5126 18                         	dc.b	$18
000A5127 E607                       	smpsAlterVol        $07
000A5129 10                         	dc.b	$10
000A512A E608                       	smpsAlterVol        $08
000A512C A5                         	dc.b	nC3
000A512D E6F1                       	smpsAlterVol        $F1
000A512F A5                         	dc.b	nC3
000A5130 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A5135 A5                         	dc.b	nC3
000A5136 E607                       	smpsAlterVol        $07
000A5138 A5                         	dc.b	nC3
000A5139 E6F9                       	smpsAlterVol        $F9
000A513B 08                         	dc.b	$08
000A513C E607                       	smpsAlterVol        $07
000A513E A5                         	dc.b	nC3
000A513F E608                       	smpsAlterVol        $08
000A5141 A5                         	dc.b	nC3
000A5142 E6F1                       	smpsAlterVol        $F1
000A5144 10                         	dc.b	$10
000A5145 E607                       	smpsAlterVol        $07
000A5147 A5                         	dc.b	nC3
000A5148 E6F9                       	smpsAlterVol        $F9
000A514A 08                         	dc.b	$08
000A514B E607                       	smpsAlterVol        $07
000A514D A5                         	dc.b	nC3
000A514E E608                       	smpsAlterVol        $08
000A5150 A5                         	dc.b	nC3
000A5151 E6F1                       	smpsAlterVol        $F1
000A5153 01                         	dc.b	$01
000A5154 E0C0                       	smpsPan             panCenter, $00
000A5156 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A5159                            
000A5159                            ; DAC Data
000A5159                            GentleBreeze_DAC:
000A5159 81                         	dc.b	dKick
000A515A                            
000A515A                            GentleBreeze_Loop00:
000A515A 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A5160 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A5165 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A5170                            
000A5170                            GentleBreeze_Loop01:
000A5170 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A5176 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A517B 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A5185                            
000A5185                            GentleBreeze_Jump00:
000A5185 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A5189                            
000A5189                            GentleBreeze_Loop02:
000A5189 81                         	dc.b	dKick
000A518A                            
000A518A                            GentleBreeze_Loop03:
000A518A 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A5196 088A                       	dc.b	$08, dLowTimpani
000A5198 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A519D 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A51A9 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A51AE F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A51B3                            
000A51B3                            GentleBreeze_Loop04:
000A51B3 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A51B9 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A51BE 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A51C9                            
000A51C9                            GentleBreeze_Loop05:
000A51C9 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A51CF F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A51D4 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A51DE F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A51E1                            
000A51E1                            ; PSG 1 Data
000A51E1                            GentleBreeze_PSG1:
000A51E1 80                         	dc.b	nRst
000A51E2                            
000A51E2                            GentleBreeze_LoopPSG02:
000A51E2 7F                         	dc.b	$7F
000A51E3 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A51E8 08                         	dc.b	$08
000A51E9 EC04                       	smpsPSGAlterVol     $04
000A51EB                            
000A51EB                            GentleBreeze_JumpPSG01:
000A51EB A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A51F7 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A51FF                            
000A51FF                            GentleBreeze_LoopPSG03:
000A51FF 7F                         	dc.b	$7F
000A5200 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A5205 08A3 01                    	dc.b	$08, nBb2, $01
000A5208 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A520B                            
000A520B                            ; PSG2 Data
000A520B                            GentleBreeze_PSG2:
000A520B 80                         	dc.b	nRst
000A520C                            
000A520C                            GentleBreeze_LoopPSG00:
000A520C 7F                         	dc.b	$7F
000A520D F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A5212 08                         	dc.b	$08
000A5213 EC04                       	smpsPSGAlterVol     $04
000A5215                            
000A5215                            GentleBreeze_JumpPSG00:
000A5215 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A5221 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A5229                            
000A5229                            GentleBreeze_LoopPSG01:
000A5229 7F                         	dc.b	$7F
000A522A F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A522F 08A8 01                    	dc.b	$08, nEb3, $01
000A5232 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A5235                            
000A5235                            GentleBreeze_Voices:
000A5235                            ;	Voice $00
000A5235                            ;	$0C
000A5235                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A5235                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A5235                            	smpsVcAlgorithm     $04
000A5235                            	smpsVcFeedback      $01
000A5235                            	smpsVcUnusedBits    $00
000A5235                            	smpsVcDetune        $07, $02, $07, $02
000A5235                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A5235                            	smpsVcRateScale     $00, $00, $00, $00
000A5235                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5235                            	smpsVcAmpMod        $00, $00, $00, $00
000A5235                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A5235                            	smpsVcDecayRate2    $01, $00, $00, $00
000A5235                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A5235                            	smpsVcReleaseRate   $09, $01, $04, $03
000A5235 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A524E                            
000A524E                            ;	Voice $01
000A524E                            ;	$38
000A524E                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A524E                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A524E                            	smpsVcAlgorithm     $00
000A524E                            	smpsVcFeedback      $07
000A524E                            	smpsVcUnusedBits    $00
000A524E                            	smpsVcDetune        $03, $07, $01, $05
000A524E                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A524E                            	smpsVcRateScale     $00, $02, $00, $02
000A524E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A524E                            	smpsVcAmpMod        $00, $00, $00, $00
000A524E                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A524E                            	smpsVcDecayRate2    $00, $00, $10, $00
000A524E                            	smpsVcDecayLevel    $00, $00, $00, $00
000A524E                            	smpsVcReleaseRate   $08, $05, $05, $05
000A524E 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A5267                            
000A5267                            ;	Voice $02
000A5267                            ;	$00
000A5267                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A5267                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A5267                            	smpsVcAlgorithm     $00
000A5267                            	smpsVcFeedback      $00
000A5267                            	smpsVcUnusedBits    $00
000A5267                            	smpsVcDetune        $00, $00, $00, $00
000A5267                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A5267                            	smpsVcRateScale     $00, $00, $00, $00
000A5267                            	smpsVcAttackRate    $00, $00, $00, $00
000A5267                            	smpsVcAmpMod        $00, $00, $00, $00
000A5267                            	smpsVcDecayRate1    $00, $00, $00, $00
000A5267                            	smpsVcDecayRate2    $00, $00, $00, $00
000A5267                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A5267                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A5267 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5280                            
000A5280                            ;	Voice $03
000A5280                            ;	$36
000A5280                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A5280                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A5280                            	smpsVcAlgorithm     $06
000A5280                            	smpsVcFeedback      $06
000A5280                            	smpsVcUnusedBits    $00
000A5280                            	smpsVcDetune        $00, $00, $00, $00
000A5280                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A5280                            	smpsVcRateScale     $00, $00, $00, $00
000A5280                            	smpsVcAttackRate    $1F, $00, $18, $16
000A5280                            	smpsVcAmpMod        $00, $00, $00, $00
000A5280                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A5280                            	smpsVcDecayRate2    $00, $00, $12, $00
000A5280                            	smpsVcDecayLevel    $04, $04, $02, $00
000A5280                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A5280 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A5299                            
000A5299                            ;	Voice $04
000A5299                            ;	$07
000A5299                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A5299                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A5299                            	smpsVcAlgorithm     $07
000A5299                            	smpsVcFeedback      $00
000A5299                            	smpsVcUnusedBits    $00
000A5299                            	smpsVcDetune        $07, $06, $05, $00
000A5299                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A5299                            	smpsVcRateScale     $00, $01, $01, $01
000A5299                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A5299                            	smpsVcAmpMod        $00, $00, $00, $00
000A5299                            	smpsVcDecayRate1    $17, $17, $17, $17
000A5299                            	smpsVcDecayRate2    $00, $00, $00, $00
000A5299                            	smpsVcDecayLevel    $02, $02, $02, $02
000A5299                            	smpsVcReleaseRate   $06, $06, $06, $06
000A5299 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A52B2                            
000A52B2                            ;	Voice $05
000A52B2                            ;	$3C
000A52B2                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A52B2                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A52B2                            	smpsVcAlgorithm     $04
000A52B2                            	smpsVcFeedback      $07
000A52B2                            	smpsVcUnusedBits    $00
000A52B2                            	smpsVcDetune        $06, $06, $02, $02
000A52B2                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A52B2                            	smpsVcRateScale     $00, $00, $00, $00
000A52B2                            	smpsVcAttackRate    $0E, $14, $10, $13
000A52B2                            	smpsVcAmpMod        $00, $00, $00, $00
000A52B2                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A52B2                            	smpsVcDecayRate2    $04, $04, $04, $04
000A52B2                            	smpsVcDecayLevel    $02, $01, $01, $01
000A52B2                            	smpsVcReleaseRate   $07, $07, $07, $07
000A52B2 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A52CB                            
000A52CB                            
000A52CC 00                         		even
000A52CC                            ; ---------------------------------------------------------------------------
000A52CC                            ; Sound	effect pointers
000A52CC                            ; ---------------------------------------------------------------------------
000A52CC 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A52D8 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A52E4 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A52F0 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A52FC 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A5308 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A5314 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A5320 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A532C 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A5338 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A5344 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A5350 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A535C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A5368 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A5374 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A5380 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A538C 0000 0000                  SoundD0Index:	dc.l SoundD0
000A5390                            SoundA0:	include	sound\jump.asm
000A5390                            jump_Header:
000A5390 =00000001                  smpsHeaderStartSong = 1
000A5390 0000                       	smpsHeaderVoice     jump_Voices
000A5392 01                         	smpsHeaderTempoSFX  $01
000A5393 01                         	smpsHeaderChanSFX   $01
000A5394                            
000A53A0                            
000A53A0                            ; FM4 Data
000A53A0                            jump_FM4:
000A53A2 E000                       	smpsPan             panNone, $00
000A53A4 E607                       	smpsAlterVol        $07
000A53A6 E0C0                       	smpsPan             panCenter, $00
000A53A8 9903 B1                    	dc.b	nC2, $03, nC4
000A53AB E607                       	smpsAlterVol        $07
000A53AD E040                       	smpsPan             panRight, $00
000A53AF 99B1                       	dc.b	nC2, nC4
000A53B1 E60A                       	smpsAlterVol        $0A
000A53B3 E080                       	smpsPan             panLeft, $00
000A53B5 99B1                       	dc.b	nC2, nC4
000A53B7 E603                       	smpsAlterVol        $03
000A53B9 E0C0                       	smpsPan             panCenter, $00
000A53BB 99B1                       	dc.b	nC2, nC4
000A53BD E000                       	smpsPan             panNone, $00
000A53BF 803D                       	dc.b	nRst, $3D
000A53C1 F2                         	smpsStop
000A53C2                            
000A53C2                            ; PSG3 Data
000A53C2                            jump_PSG3:
000A53C2 F3E7                       	smpsPSGform         $E7
000A53C4 8056                       	dc.b	nRst, $56
000A53C6 F2                         	smpsStop
000A53C7                            
000A53C7                            jump_Voices:
000A53C7                            ;	Voice $00
000A53C7                            ;	$3C
000A53C7                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A53C7                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A53C7                            	smpsVcAlgorithm     $04
000A53C7                            	smpsVcFeedback      $07
000A53C7                            	smpsVcUnusedBits    $00
000A53C7                            	smpsVcDetune        $00, $00, $00, $00
000A53C7                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A53C7                            	smpsVcRateScale     $00, $00, $00, $00
000A53C7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A53C7                            	smpsVcAmpMod        $00, $00, $00, $00
000A53C7                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A53C7                            	smpsVcDecayRate2    $11, $00, $11, $00
000A53C7                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A53C7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A53C7 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A53E0                            
000A53E0                            
000A53E0                            		even
000A53E0                            SoundA1:	incbin	sound\soundA1.bin
000A540A                            		even
000A540A                            SoundA2:	incbin	sound\soundA2.bin
000A542A                            		even
000A542A                            SoundA3:	incbin	sound\soundA3.bin
000A545C                            		even
000A545C                            SoundA4:	incbin	sound\soundA4.bin
000A5492                            		even
000A5492                            SoundA5:	include	sound\fart.asm
000A5492                            Fart_Header:
000A5492 =00000001                  smpsHeaderStartSong = 1
000A5492 0000                       	smpsHeaderVoice     Fart_Voices
000A5494 01                         	smpsHeaderTempoSFX  $01
000A5495 04                         	smpsHeaderChanSFX   $04
000A5496                            
000A54AE                            
000A54AE                            Fart_FM3:
000A54B0 E607                       	smpsAlterVol        $07
000A54B2 E0C0                       	smpsPan             panCenter, $00
000A54B4 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A54B9 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A54BC E1FE                       	smpsAlterNote       $FE
000A54BE A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A54C1 E100                       	smpsAlterNote       $00
000A54C3 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A54C8 F2                         	smpsStop
000A54C9                            
000A54C9                            ; FM4 Data
000A54C9                            Fart_FM4:
000A54CB E0C0                       	smpsPan             panCenter, $00
000A54CD 8006                       	dc.b	nRst, $06
000A54D1 E616                       	smpsAlterVol        $16
000A54D3 E080                       	smpsPan             panLeft, $00
000A54D5 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A54DA A212                       	dc.b	nA2, $12
000A54DC E60A                       	smpsAlterVol        $0A
000A54DE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A54E1 E603                       	smpsAlterVol        $03
000A54E3 E7A2                       	dc.b	smpsNoAttack, nA2
000A54E5 E603                       	smpsAlterVol        $03
000A54E7 E7A2                       	dc.b	smpsNoAttack, nA2
000A54E9 E604                       	smpsAlterVol        $04
000A54EB E7A2                       	dc.b	smpsNoAttack, nA2
000A54ED E606                       	smpsAlterVol        $06
000A54EF E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A54F2 E610                       	smpsAlterVol        $10
000A54F4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A54F7 E610                       	smpsAlterVol        $10
000A54F9 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A54FE F2                         	smpsStop
000A54FF                            
000A54FF                            ; FM5 Data
000A54FF                            Fart_FM5:
000A5501 E0C0                       	smpsPan             panCenter, $00
000A5503 8009                       	dc.b	nRst, $09
000A5507 E616                       	smpsAlterVol        $16
000A5509 E040                       	smpsPan             panRight, $00
000A550B F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A5510 A215                       	dc.b	nA2, $15
000A5512 E60A                       	smpsAlterVol        $0A
000A5514 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A5517 E603                       	smpsAlterVol        $03
000A5519 E7A2                       	dc.b	smpsNoAttack, nA2
000A551B E603                       	smpsAlterVol        $03
000A551D E7A2                       	dc.b	smpsNoAttack, nA2
000A551F E604                       	smpsAlterVol        $04
000A5521 E7A2                       	dc.b	smpsNoAttack, nA2
000A5523 E606                       	smpsAlterVol        $06
000A5525 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A5528 E610                       	smpsAlterVol        $10
000A552A E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A552D E610                       	smpsAlterVol        $10
000A552F E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A5534 F2                         	smpsStop
000A5535                            
000A5535                            ; PSG3 Data
000A5535                            Fart_PSG3:
000A5535 F2                         	smpsStop
000A5536                            
000A5536                            ; FM Voices
000A5536                            Fart_Voices:
000A5536                            ;	Voice $00
000A5536                            ;	$39
000A5536                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A5536                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A5536                            	smpsVcAlgorithm     $01
000A5536                            	smpsVcFeedback      $07
000A5536                            	smpsVcUnusedBits    $00
000A5536                            	smpsVcDetune        $00, $07, $03, $07
000A5536                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A5536                            	smpsVcRateScale     $00, $03, $03, $03
000A5536                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5536                            	smpsVcAmpMod        $00, $00, $00, $00
000A5536                            	smpsVcDecayRate1    $00, $00, $00, $04
000A5536                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A5536                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A5536                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A5536 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A554F                            
000A554F                            ;	Voice $01
000A554F                            ;	$00
000A554F                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A554F                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A554F                            	smpsVcAlgorithm     $00
000A554F                            	smpsVcFeedback      $00
000A554F                            	smpsVcUnusedBits    $00
000A554F                            	smpsVcDetune        $00, $00, $00, $00
000A554F                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A554F                            	smpsVcRateScale     $00, $00, $00, $00
000A554F                            	smpsVcAttackRate    $00, $00, $00, $00
000A554F                            	smpsVcAmpMod        $00, $00, $00, $00
000A554F                            	smpsVcDecayRate1    $00, $00, $00, $00
000A554F                            	smpsVcDecayRate2    $00, $00, $00, $00
000A554F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A554F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A554F 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A554F 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5568                            		even
000A5568                            SoundA6:	incbin	sound\soundA6.bin
000A5598                            		even
000A5598                            SoundA7:	incbin	sound\soundA7.bin
000A55C8                            		even
000A55C8                            SoundA8:	incbin	sound\soundA8.bin
000A55FC                            		even
000A55FC                            SoundA9:	incbin	sound\soundA9.bin
000A560E                            		even
000A560E                            SoundAA:	incbin	sound\soundAA.bin
000A5650                            		even
000A5650                            SoundAB:	incbin	sound\soundAB.bin
000A5670                            		even
000A5670                            SoundAC:	incbin	sound\soundAC.bin
000A56A4                            		even
000A56A4                            SoundAD:	incbin	sound\soundAD.bin
000A56DA                            		even
000A56DA                            SoundAE:	incbin	sound\soundAE.bin
000A5724                            		even
000A5724                            SoundAF:	incbin	sound\soundAF.bin
000A5752                            		even
000A5752                            SoundB0:	incbin	sound\soundB0.bin
000A5784                            		even
000A5784                            SoundB1:	incbin	sound\soundB1.bin
000A57B0                            		even
000A57B0                            SoundB2:	incbin	sound\soundB2.bin
000A5800                            		even
000A5800                            SoundB3:	incbin	sound\soundB3.bin
000A584A                            		even
000A584A                            SoundB4:	include	sound\soundB4.asm
000A584A                            SndB4_Bumper_Header:
000A584A =00000001                  smpsHeaderStartSong = 1
000A584A 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A584C 01                         	smpsHeaderTempoSFX  $01
000A584D 03                         	smpsHeaderChanSFX   $03
000A584E                            
000A5860                            
000A5860                            ; FM5 Data
000A5860                            SndB4_Bumper_FM5:
000A5862 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A5865                            
000A5865                            ; FM4 Data
000A5865                            SndB4_Bumper_FM4:
000A5865 F2                         	smpsStop
000A5866                            
000A5866                            SndB4_Bumper_Jump00:
000A5866 A020                       	dc.b	nG2, $20
000A5868 F2                         	smpsStop
000A5869                            
000A5869                            ; FM3 Data
000A5869                            SndB4_Bumper_FM3:
000A5869 F2                         	smpsStop
000A586A                            
000A586A                            SndB4_Bumper_Voices:
000A586A                            ;	Voice $00
000A586A                            ;	$32
000A586A                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A586A                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A586A                            	smpsVcAlgorithm     $02
000A586A                            	smpsVcFeedback      $06
000A586A                            	smpsVcUnusedBits    $00
000A586A                            	smpsVcDetune        $07, $07, $02, $00
000A586A                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A586A                            	smpsVcRateScale     $00, $00, $00, $00
000A586A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A586A                            	smpsVcAmpMod        $00, $00, $00, $00
000A586A                            	smpsVcDecayRate1    $08, $00, $00, $09
000A586A                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A586A                            	smpsVcDecayLevel    $00, $00, $00, $00
000A586A                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A586A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A586A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A5884 00                         		even
000A5884                            SoundB5:	incbin	sound\soundB5.bin
000A58A2 00                         		even
000A58A2                            SoundB6:	incbin	sound\soundB6.bin
000A58C0                            		even
000A58C0                            SoundB7:	incbin	sound\soundB7.bin
000A58FC                            		even
000A58FC                            SoundB8:	incbin	sound\soundB8.bin
000A591A                            		even
000A591A                            SoundB9:	incbin	sound\soundB9.bin
000A597E                            		even
000A597E                            SoundBA:	incbin	sound\soundBA.bin
000A59A6                            		even
000A59A6                            SoundBB:	incbin	sound\soundBB.bin
000A59D2                            		even
000A59D2                            SoundBC:	incbin	sound\soundBC.bin
000A5A14                            		even
000A5A14                            SoundBD:	incbin	sound\soundBD.bin
000A5A68                            		even
000A5A68                            SoundBE:	incbin	sound\soundBE.bin
000A5AA2                            		even
000A5AA2                            SoundBF:	incbin	sound\soundBF.bin
000A5B14                            		even
000A5B14                            SoundC0:	incbin	sound\soundC0.bin
000A5B42                            		even
000A5B42                            SoundC1:	incbin	sound\soundC1.bin
000A5B9C                            		even
000A5B9C                            SoundC2:	incbin	sound\soundC2.bin
000A5BC6                            		even
000A5BC6                            SoundC3:	incbin	sound\soundC3.bin
000A5C40                            		even
000A5C40                            SoundC4:	incbin	sound\soundC4.bin
000A5D3E                            		even
000A5D3E                            SoundC5:	incbin	sound\soundC5.bin
000A5DA6                            		even
000A5DA6                            SoundC6:	incbin	sound\soundC6.bin
000A5DE8                            		even
000A5DE8                            SoundC7:	incbin	sound\soundC7.bin
000A5E16                            		even
000A5E16                            SoundC8:	incbin	sound\soundC8.bin
000A5E28                            		even
000A5E28                            SoundC9:	incbin	sound\soundC9.bin
000A5E56                            		even
000A5E56                            SoundCA:	incbin	sound\soundCA.bin
000A5E84                            		even
000A5E84                            SoundCB:	incbin	sound\soundCB.bin
000A5ED0                            		even
000A5ED0                            SoundCC:	incbin	sound\C9.ssf
000A5EFE                            		even
000A5EFE                            SoundCD:	incbin	sound\soundCD.bin
000A5F2A                            		even
000A5F2A                            SoundCE:	incbin	sound\soundCE.bin
000A5F48 00                         		even
000A5F48                            SoundCF:	incbin	sound\soundCF.bin
000A5F80                            		even
000A5F80                            SoundD0:	incbin	sound\soundD0.bin
000A5FBA                            		even
000A5FBA                            SegaPCM:	incbin	sound\segapcm.bin
000C0110                            SegaPCM_end:	even
000C0110                            
000C0110                            IdiotPCM:	incbin	sound\youare.bin
000CA1E2 00                         IdiotPCM_end:	even
000CA1E2                            
000CA1E2                            Minecraft:	include	minecraft\code\main.asm
000CA1E2                            ; Minecraft: Very Legacy Console Edition
000CA1E2                            ; Main file
000CA1E2                            
000CA1E2                            	include	minecraft\code\variables.asm
000CA1E2                            ; Minecraft: Very Legacy Console Edition
000CA1E2                            ; Variable Definitions
000CA1E2                            
000CA1E2 =00000040                  MAP_HEIGHT	equ	64
000CA1E2 =00000100                  MAP_WIDTH	equ	256
000CA1E2                            
000CA1E2                            		rsset	$FF0000
000CA1E2 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CA1E2 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CA1E2                            
000CA1E2                            		rsset	$FFFF8000
000CA1E2 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CA1E2                            
000CA1E2 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CA1E2 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CA1E2 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CA1E2 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CA1E2 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CA1E2                            
000CA1E2                            MC_Init:
000CA1E2 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000CA1E6 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000CA1EC                            
000CA1EC 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000CA1F0 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000CA1F4 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000CA1F8 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000CA1FC                            
000CA1FC                            
000CA1FC                            
000CA1FC 6000 FFFE                  		bra.w	*			; spin infinitely
000CA200                            
000CA200                            ; ===========================================================================
000CA200                            ; ---------------------------------------------------------------------------
000CA200                            ; Clear The Screen
000CA200                            ; ---------------------------------------------------------------------------
000CA200                            MC_ClearScreen:
000CA200 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000CA204                            
000CA204 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000CA20A 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000CA20E 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000CA214 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000CA21A                            
000CA21A 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000CA21C 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000CA21E                            
000CA21E 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000CA224 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000CA228 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000CA22E 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000CA234                            
000CA234 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000CA236 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000CA238                            
000CA238 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000CA23E 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000CA242 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000CA248 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000CA24E                            
000CA24E 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000CA250 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000CA252                            
000CA252 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000CA256 4E75                       		rts				; return
000CA258                            ; ---------------------------------------------------------------------------
000CA258                            
000CA258                            ; ===========================================================================
000CA258                            ; ---------------------------------------------------------------------------
000CA258                            ; Load The Palette
000CA258                            ; ---------------------------------------------------------------------------
000CA258                            MC_LoadPalette:
000CA258 44D6                       		move.w	(a6),ccr		; is v-blank active?
000CA25A 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000CA25C                            
000CA25C                            .updatePalette:
000CA25C 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000CA262                            		
000CA262 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000CA266 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000CA268 E288                       		lsr.l	#1,d0			; divide by two
000CA26A                            
000CA26A 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000CA26E 1200                       		move.b	d0,d1			; ^
000CA270 3C81                       		move.w	d1,(a6)			; ^
000CA272                            
000CA272 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000CA274 323C 9600                  		move.w	#$9600,d1		; ^
000CA278 1200                       		move.b	d0,d1			; ^
000CA27A 3C81                       		move.w	d1,(a6)			; ^
000CA27C                            
000CA27C E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000CA27E 323C 9700                  		move.w	#$9700,d1		; ^
000CA282 1200                       		move.b	d0,d1			; ^
000CA284 3C81                       		move.w	d1,(a6)			; ^
000CA286                            
000CA286 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000CA28C                            
000CA28C                            .waitForScan:
000CA28C                            	;	move.w	(a6),ccr		; is v-blank still active?
000CA28C                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000CA28C 4E75                       		rts				; return
000CA28E                            ; ---------------------------------------------------------------------------
000CA28E                            
000CA28E                            MC_Palette:
000CA28E 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000CA2AE 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000CA2CE 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CA2EE 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CA2EE 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CA30E                            ; end of 'ROM'
000CA30E                            EndOfRom:
000CA30E                            
000CA30E                            
