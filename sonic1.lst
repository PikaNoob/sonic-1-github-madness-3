00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 00A0                  		move.w	#$A0,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 0100                  		move.w	#$100,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002612                            Pal_LZ:		incbin	pallet\lz.bin
00002672                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F2                            Pal_MZ:		incbin	pallet\mz.bin
00002752                            Pal_SLZ:	incbin	pallet\slz.bin
000027B2                            Pal_SYZ:	incbin	pallet\syz.bin
00002812                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002872                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002952                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A32                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A52                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A72                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B32                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD2                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF2                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C12                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C32                            
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            
00002C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C32                            
00002C32                            
00002C32                            DelayProgram:				; XREF: PauseGame
00002C32 46FC 2300                  		move	#$2300,sr
00002C36                            
00002C36                            loc_29AC:
00002C36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C3A 66FA                       		bne.s	loc_29AC
00002C3C 4E75                       		rts	
00002C3E                            ; End of function DelayProgram
00002C3E                            
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            
00002C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3E                            
00002C3E                            
00002C3E                            RandomNumber:
00002C3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002C42 6600                       		bne.s	loc_29C0
00002C44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C4A                            
00002C4A                            loc_29C0:
00002C4A 2001                       		move.l	d1,d0
00002C4C E581                       		asl.l	#2,d1
00002C4E D280                       		add.l	d0,d1
00002C50 E781                       		asl.l	#3,d1
00002C52 D280                       		add.l	d0,d1
00002C54 3001                       		move.w	d1,d0
00002C56 4841                       		swap	d1
00002C58 D041                       		add.w	d1,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 4841                       		swap	d1
00002C5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C62 4E75                       		rts	
00002C64                            ; End of function RandomNumber
00002C64                            
00002C64                            
00002C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C64                            
00002C64                            
00002C64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C64 0240 00FF                  		andi.w	#$FF,d0
00002C68 D040                       		add.w	d0,d0
00002C6A 0640 0080                  		addi.w	#$80,d0
00002C6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C72 0440 0080                  		subi.w	#$80,d0
00002C76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C7A 4E75                       		rts	
00002C7C                            ; End of function CalcSine
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            
00002C7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EFC                            
00002EFC                            ; ===========================================================================
00002EFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F00 3200                       		move.w	d0,d1
00002F02 4841                       		swap	d1
00002F04 7000                       		moveq	#0,d0
00002F06 3200                       		move.w	d0,d1
00002F08 7407                       		moveq	#7,d2
00002F0A                            
00002F0A                            loc_2C80:
00002F0A E599                       		rol.l	#2,d1
00002F0C D040                       		add.w	d0,d0
00002F0E 5240                       		addq.w	#1,d0
00002F10 9240                       		sub.w	d0,d1
00002F12 6400                       		bcc.s	loc_2C9A
00002F14 D240                       		add.w	d0,d1
00002F16 5340                       		subq.w	#1,d0
00002F18 51CA FFF0                  		dbf	d2,loc_2C80
00002F1C E248                       		lsr.w	#1,d0
00002F1E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2C9A:
00002F24 5240                       		addq.w	#1,d0
00002F26 51CA FFE2                  		dbf	d2,loc_2C80
00002F2A E248                       		lsr.w	#1,d0
00002F2C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F30 4E75                       		rts	
00002F32                            
00002F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F32                            
00002F32                            
00002F32                            CalcAngle:
00002F32 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F36 7600                       		moveq	#0,d3
00002F38 7800                       		moveq	#0,d4
00002F3A 3601                       		move.w	d1,d3
00002F3C 3802                       		move.w	d2,d4
00002F3E 8843                       		or.w	d3,d4
00002F40 6700                       		beq.s	loc_2D04
00002F42 3802                       		move.w	d2,d4
00002F44 4A43                       		tst.w	d3
00002F46 6A00 0000                  		bpl.w	loc_2CC2
00002F4A 4443                       		neg.w	d3
00002F4C                            
00002F4C                            loc_2CC2:
00002F4C 4A44                       		tst.w	d4
00002F4E 6A00 0000                  		bpl.w	loc_2CCA
00002F52 4444                       		neg.w	d4
00002F54                            
00002F54                            loc_2CCA:
00002F54 B843                       		cmp.w	d3,d4
00002F56 6400 0000                  		bcc.w	loc_2CDC
00002F5A E18C                       		lsl.l	#8,d4
00002F5C 88C3                       		divu.w	d3,d4
00002F5E 7000                       		moveq	#0,d0
00002F60 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F64 6000                       		bra.s	loc_2CE6
00002F66                            ; ===========================================================================
00002F66                            
00002F66                            loc_2CDC:				; XREF: CalcAngle
00002F66 E18B                       		lsl.l	#8,d3
00002F68 86C4                       		divu.w	d4,d3
00002F6A 7040                       		moveq	#$40,d0
00002F6C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F70                            
00002F70                            loc_2CE6:
00002F70 4A41                       		tst.w	d1
00002F72 6A00 0000                  		bpl.w	loc_2CF2
00002F76 4440                       		neg.w	d0
00002F78 0640 0080                  		addi.w	#$80,d0
00002F7C                            
00002F7C                            loc_2CF2:
00002F7C 4A42                       		tst.w	d2
00002F7E 6A00 0000                  		bpl.w	loc_2CFE
00002F82 4440                       		neg.w	d0
00002F84 0640 0100                  		addi.w	#$100,d0
00002F88                            
00002F88                            loc_2CFE:
00002F88 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F8C 4E75                       		rts	
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            loc_2D04:				; XREF: CalcAngle
00002F8E 303C 0040                  		move.w	#$40,d0
00002F92 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F96 4E75                       		rts	
00002F98                            ; End of function CalcAngle
00002F98                            
00002F98                            ; ===========================================================================
00002F98                            
00002F98                            Angle_Data:	incbin	misc\angles.bin
0000309A                            
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Sega screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            SegaScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 E75E                  		bsr.w	ClearPLC
000030A6 6100 EF94                  		bsr.w	Pal_FadeFrom
000030AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B0 3CBC 8004                  		move.w	#$8004,(a6)
000030B4 3CBC 8230                  		move.w	#$8230,(a6)
000030B8 3CBC 8407                  		move.w	#$8407,(a6)
000030BC 3CBC 8700                  		move.w	#$8700,(a6)
000030C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C4 4238 F64E                  		clr.b	($FFFFF64E).w
000030C8 46FC 2700                  		move	#$2700,sr
000030CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D0 0200 00BF                  		andi.b	#$BF,d0
000030D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DA 6100 E40C                  		bsr.w	ClearScreen
000030DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EE 6100 E574                  		bsr.w	NemDec
000030F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FE 303C 0000                  		move.w	#0,d0
00003102 6100 E83E                  		bsr.w	EniDec
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 203C 6510 0003             		move.l	#$65100003,d0
00003112 7217                       		moveq	#$17,d1
00003114 7407                       		moveq	#7,d2
00003116 6100 E52C                  		bsr.w	ShowVDPGraphics
0000311A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003120 203C 4000 0003             		move.l	#$40000003,d0
00003126 7227                       		moveq	#$27,d1
00003128 741B                       		moveq	#$1B,d2
0000312A 6100 E518                  		bsr.w	ShowVDPGraphics
0000312E 7000                       		moveq	#0,d0
00003130 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003134 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000313A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003140 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003146 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000314C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003150 0000 0040                  		ori.b	#$40,d0
00003154 33C0 00C0 0004             		move.w	d0,($C00004).l
0000315A                            
0000315A                            Sega_WaitPallet:
0000315A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003160 6100 FAD0                  		bsr.w	DelayProgram
00003164 6100 F08E                  		bsr.w	PalCycle_Sega
00003168 66F0                       		bne.s	Sega_WaitPallet
0000316A                            
0000316A 103C 00E1                  		move.b	#$E1,d0
0000316E 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003172 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003178 6100 FAB8                  		bsr.w	DelayProgram
0000317C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003182                            
00003182                            Sega_WaitEnd:
00003182 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003188 6100 FAA8                  		bsr.w	DelayProgram
0000318C 4A78 F614                  		tst.w	($FFFFF614).w
00003190 6700                       		beq.s	Sega_GotoTitle
00003192 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003198 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000319A                            
0000319A                            Sega_GotoTitle:
0000319A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A0 4E75                       		rts	
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Title	screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            TitleScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 E656                  		bsr.w	ClearPLC
000031AE 6100 EE8C                  		bsr.w	Pal_FadeFrom
000031B2 46FC 2700                  		move	#$2700,sr
000031B6 6100 E3BE                  		bsr.w	SoundDriverLoad
000031BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C0 3CBC 8004                  		move.w	#$8004,(a6)
000031C4 3CBC 8230                  		move.w	#$8230,(a6)
000031C8 3CBC 8407                  		move.w	#$8407,(a6)
000031CC 3CBC 9001                  		move.w	#$9001,(a6)
000031D0 3CBC 9200                  		move.w	#$9200,(a6)
000031D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D8 3CBC 8720                  		move.w	#$8720,(a6)
000031DC 4238 F64E                  		clr.b	($FFFFF64E).w
000031E0 6100 E306                  		bsr.w	ClearScreen
000031E4 43F8 D000                  		lea	($FFFFD000).w,a1
000031E8 7000                       		moveq	#0,d0
000031EA 323C 07FF                  		move.w	#$7FF,d1
000031EE                            
000031EE                            Title_ClrObjRam:
000031EE 22C0                       		move.l	d0,(a1)+
000031F0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F4                            
000031F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FE 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003204 6100 E45E                  		bsr.w	NemDec
00003208 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003212 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003218 6100 E44A                  		bsr.w	NemDec
0000321C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003222 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003228 303C 0000                  		move.w	#0,d0
0000322C 6100 E714                  		bsr.w	EniDec
00003230 43F9 00FF 0000             		lea	($FF0000).l,a1
00003236 203C 4000 0003             		move.l	#$40000003,d0
0000323C 7227                       		moveq	#$27,d1
0000323E 741B                       		moveq	#$1B,d2
00003240 6100 E402                  		bsr.w	ShowVDPGraphics
00003244 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003248 7000                       		moveq	#0,d0
0000324A 323C 001F                  		move.w	#$1F,d1
0000324E                            
0000324E                            Title_ClrPallet:
0000324E 22C0                       		move.l	d0,(a1)+
00003250 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003254                            
00003254 7003                       		moveq	#3,d0		; load Sonic's pallet
00003256 6100 F08E                  		bsr.w	PalLoad1
0000325A 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003260 4EB9 0000 0000             		jsr	ObjectsLoad
00003266 4EB9 0000 0000             		jsr	BuildSprites
0000326C 6100 ED28                  		bsr.w	Pal_FadeTo
00003270 46FC 2700                  		move	#$2700,sr
00003274 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000327E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003284 6100 E3DE                  		bsr.w	NemDec
00003288 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003292 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003298 6100 E3CA                  		bsr.w	NemDec
0000329C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000032A6 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000032AC 6100 E3B6                  		bsr.w	NemDec
000032B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032B6 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000032BE 4BF9 0000 05F4             		lea	(Art_Text).l,a5
000032C4 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000032C8                            
000032C8                            Title_LoadText:
000032C8 2C9D                       		move.l	(a5)+,(a6)
000032CA 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000032CE                            
000032CE 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000032D4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000032DA 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000032E0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032E6 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032EC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032F2 6100 0000                  		bsr.w	LevelSizeLoad
000032F6 6100 0000                  		bsr.w	DeformBgLayer
000032FA 43F8 B000                  		lea	($FFFFB000).w,a1
000032FE 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003304 303C 0000                  		move.w	#0,d0
00003308 6100 E638                  		bsr.w	EniDec
0000330C 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003312 43F9 00FF 0000             		lea	($FF0000).l,a1
00003318 6100 E7A6                  		bsr.w	KosDec
0000331C 6100 0000                  		bsr.w	LevelLayoutLoad
00003320 6100 ED1A                  		bsr.w	Pal_FadeFrom
00003324 46FC 2700                  		move	#$2700,sr
00003328 6100 E1BE                  		bsr.w	ClearScreen
0000332C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003332 4DF9 00C0 0000             		lea	($C00000).l,a6
00003338 47F8 F708                  		lea	($FFFFF708).w,a3
0000333C 49F8 A440                  		lea	($FFFFA440).w,a4
00003340 343C 6000                  		move.w	#$6000,d2
00003344 6100 0000                  		bsr.w	LoadTilesFromStart2
00003348 43F9 00FF 0000             		lea	($FF0000).l,a1
0000334E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003354 303C 0000                  		move.w	#0,d0
00003358 6100 E5E8                  		bsr.w	EniDec
0000335C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003362 203C 4206 0003             		move.l	#$42060003,d0
00003368 7221                       		moveq	#$21,d1
0000336A 7415                       		moveq	#$15,d2
0000336C 6100 E2D6                  		bsr.w	ShowVDPGraphics
00003370 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000337A 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003380 6100 E2E2                  		bsr.w	NemDec
00003384 7001                       		moveq	#1,d0		; load title screen pallet
00003386 6100 EF5E                  		bsr.w	PalLoad1
0000338A 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000338E 6100 E230                  		bsr.w	PlaySound_Special
00003392 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003398 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000339E 43F8 D080                  		lea	($FFFFD080).w,a1
000033A2 7000                       		moveq	#0,d0
000033A4 323C 0007                  		move.w	#7,d1
000033A8                            
000033A8                            Title_ClrObjRam2:
000033A8 22C0                       		move.l	d0,(a1)+
000033AA 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000033AE                            
000033AE 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000033B4 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000033BA 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000033C0 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000033C6 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000033CC 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000033D2 4EB9 0000 0000             		jsr	ObjectsLoad
000033D8 6100 0000                  		bsr.w	DeformBgLayer
000033DC 4EB9 0000 0000             		jsr	BuildSprites
000033E2 7000                       		moveq	#0,d0
000033E4 6100 E3F0                  		bsr.w	LoadPLC2
000033E8 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033EE 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033F4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033F8 0000 0040                  		ori.b	#$40,d0
000033FC 33C0 00C0 0004             		move.w	d0,($C00004).l
00003402 6100 EB92                  		bsr.w	Pal_FadeTo
00003406                            
00003406                            loc_317C:
00003406 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000340C 6100 F824                  		bsr.w	DelayProgram
00003410 4EB9 0000 0000             		jsr	ObjectsLoad
00003416 6100 0000                  		bsr.w	DeformBgLayer
0000341A 4EB9 0000 0000             		jsr	BuildSprites
00003420 6100 E75E                  		bsr.w	PalCycle_Title
00003424 6100 E3EA                  		bsr.w	RunPLC_RAM
00003428 3038 D008                  		move.w	($FFFFD008).w,d0
0000342C 5440                       		addq.w	#2,d0
0000342E 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003432 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003436 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003438 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000343E 4E75                       		rts	
00003440                            ; ===========================================================================
00003440                            
00003440                            Title_ChkRegion:
00003440 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003444 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003446 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000344C 6000                       		bra.s	Title_EnterCheat
0000344E                            ; ===========================================================================
0000344E                            
0000344E                            Title_RegionJ:				; XREF: Title_ChkRegion
0000344E 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003454                            
00003454                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003454 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003458 D0C0                       		adda.w	d0,a0
0000345A 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000345E 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003462 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003464 6600                       		bne.s	loc_3210	; if not, branch
00003466 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000346A 4A00                       		tst.b	d0
0000346C 6600                       		bne.s	Title_CountC
0000346E 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003472 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003476 E249                       		lsr.w	#1,d1
00003478 0241 0003                  		andi.w	#3,d1
0000347C 6700                       		beq.s	Title_PlayRing
0000347E 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003482 6A00                       		bpl.s	Title_PlayRing
00003484 7201                       		moveq	#1,d1
00003486 1181 1001                  		move.b	d1,1(a0,d1.w)
0000348A                            
0000348A                            Title_PlayRing:
0000348A 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003490 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003494 6100 E12A                  		bsr.w	PlaySound_Special
00003498 6000                       		bra.s	Title_CountC
0000349A                            ; ===========================================================================
0000349A                            
0000349A                            loc_3210:				; XREF: Title_EnterCheat
0000349A 4A00                       		tst.b	d0
0000349C 6700                       		beq.s	Title_CountC
0000349E 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034A4 6700                       		beq.s	Title_CountC
000034A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034AC                            
000034AC                            Title_CountC:
000034AC 1038 F605                  		move.b	($FFFFF605).w,d0
000034B0 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000034B4 6700                       		beq.s	loc_3230	; if not, branch
000034B6 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000034BA                            
000034BA                            loc_3230:
000034BA 4A78 F614                  		tst.w	($FFFFF614).w
000034BE 6700 0000                  		beq.w	Demo
000034C2                            		; (temporary until we have an actual options screen)
000034C2 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000034C8 6700                       		beq.s	@notc
000034CA                            
000034CA 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
000034D0 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034D4 6100 E0EA                  		bsr.w	PlaySound_Special
000034D8                            	@notc:
000034D8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000034DE 6700 FF26                  		beq.w	loc_317C	; if not, branch
000034E2                            
000034E2                            Title_ChkLevSel:
000034E2 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000034E6 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034EA 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000034F0 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034F4                            		
000034F4                            		
000034F4 7002                       		moveq	#2,d0
000034F6 6100 EE0A                  		bsr.w	PalLoad2	; load level select pallet
000034FA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034FE 7000                       		moveq	#0,d0
00003500 323C 00DF                  		move.w	#$DF,d1
00003504                            
00003504                            Title_ClrScroll:
00003504 22C0                       		move.l	d0,(a1)+
00003506 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000350A                            
0000350A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000350E 46FC 2700                  		move	#$2700,sr
00003512 4DF9 00C0 0000             		lea	($C00000).l,a6
00003518 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003522 323C 03FF                  		move.w	#$3FF,d1
00003526                            
00003526                            Title_ClrVram:
00003526 2C80                       		move.l	d0,(a6)
00003528 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000352C                            
0000352C 6100 0000                  		bsr.w	LevSelTextLoad
00003530                            		
00003530                            		; sound test fix
00003530 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003534 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000353A 363C E65F                  		move.w	#$E680-$21,d3
0000353E 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003542 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003546 6000 0000                  		bra.w	LevelSelect
0000354A                            ; ---------------------------------------------------------------------------
0000354A                            ; Level	Select
0000354A                            ; ---------------------------------------------------------------------------
0000354A                            YouAreAnIdiot:
0000354A 6100 DF9C                  		bsr.w	ClearScreen
0000354E                            		
0000354E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003554 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003558                            		
00003558 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003562 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003568 6100 E0FA                  		bsr.w	NemDec
0000356C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003572 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003578 303C 0000                  		move.w	#0,d0
0000357C 6100 E3C4                  		bsr.w	EniDec
00003580 43F9 00FF 0000             		lea	($FF0000).l,a1
00003586 203C 4304 0003             		move.l	#$43040003,d0
0000358C 7223                       		moveq	#35,d1
0000358E 740D                       		moveq	#13,d2
00003590 6100 E0B2                  		bsr.w	ShowVDPGraphics
00003594 7014                       		moveq	#20,d0
00003596 6100 ED6A                  		bsr.w	PalLoad2	; load Sega logo pallet
0000359A                            		
0000359A 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
0000359E 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035A2                            	@wait:
000035A2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035A8 6100 F688                  		bsr.w	DelayProgram
000035AC 60F4                       		bra.s	@wait
000035AE                            LevelSelect:
000035AE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035B4 6100 F67C                  		bsr.w	DelayProgram
000035B8 6100 0000                  		bsr.w	LevSelControls
000035BC 6100 E252                  		bsr.w	RunPLC_RAM
000035C0 4AB8 F680                  		tst.l	($FFFFF680).w
000035C4 66E8                       		bne.s	LevelSelect
000035C6 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035CC 67E0                       		beq.s	LevelSelect	; if not, branch
000035CE 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035D2 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035D6 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
000035DA                            		
000035DA 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000035DE 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000035E0                            		
000035E0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035E4 0640 0080                  		addi.w	#$80,d0
000035E8 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035EC                            		
000035EC 4EB9 0000 0000             		jsr		ShowNow_Playing
000035F2 60BA                       		bra.s	LevelSelect
000035F4                            ; ===========================================================================
000035F4                            
000035F4                            LevSel_Ending:				; XREF: LevelSelect
000035F4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035FA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003600 4E75                       		rts	
00003602                            ; ===========================================================================
00003602                            
00003602                            LevSel_Credits:				; XREF: LevelSelect
00003602 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003608 103C 0091                  		move.b	#$91,d0
0000360C 6100 DFB2                  		bsr.w	PlaySound_Special ; play credits music
00003610 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003616 4E75                       		rts	
00003618                            ; ===========================================================================
00003618                            
00003618                            LevSel_Level_SS:			; XREF: LevelSelect
00003618 D040                       		add.w	d0,d0
0000361A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000361E 6B00 FF8E                  		bmi.w	LevelSelect
00003622 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003626 6600                       		bne.s	LevSel_Level	; if not, branch
00003628 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000362E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003632 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003638 7000                       		moveq	#0,d0
0000363A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000363E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003642 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003646 4E75                       		rts	
00003648                            ; ===========================================================================
00003648                            
00003648                            LevSel_Level:				; XREF: LevSel_Level_SS
00003648 0240 3FFF                  		andi.w	#$3FFF,d0
0000364C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003650                            
00003650                            PlayLevel:				; XREF: ROM:00003246j ...
00003650 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003656 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000365C 7000                       		moveq	#0,d0
0000365E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003662 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003666 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000366A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000366E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003672 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003676 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000367A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000367E 103C 00E0                  		move.b	#$E0,d0
00003682 6100 DF3C                  		bsr.w	PlaySound_Special ; fade out music
00003686 4E75                       		rts	
00003688                            ; ===========================================================================
00003688                            ; ---------------------------------------------------------------------------
00003688                            ; Level	select - level pointers
00003688                            ; ---------------------------------------------------------------------------
00003688                            LSelectPointers:
00003688                            		incbin	misc\ls_point.bin
000036B2                            		even
000036B2                            ; ---------------------------------------------------------------------------
000036B2                            ; Level	select codes
000036B2                            ; ---------------------------------------------------------------------------
000036B2                            LevelSelectCode_J:
000036B2                            		incbin	misc\ls_jcode.bin
000036B8                            		even
000036B8                            
000036B8                            LevelSelectCode_US:
000036B8                            		incbin	misc\ls_ucode.bin
000036BE                            		even
000036BE                            ; ===========================================================================
000036BE                            
000036BE                            ; ---------------------------------------------------------------------------
000036BE                            ; Demo mode
000036BE                            ; ---------------------------------------------------------------------------
000036BE                            
000036BE                            Demo:					; XREF: TitleScreen
000036BE 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000036C4                            
000036C4                            loc_33B6:				; XREF: loc_33E4
000036C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036CA 6100 F566                  		bsr.w	DelayProgram
000036CE 6100 0000                  		bsr.w	DeformBgLayer
000036D2 6100 E48C                  		bsr.w	PalCycle_Load
000036D6 6100 E138                  		bsr.w	RunPLC_RAM
000036DA 3038 D008                  		move.w	($FFFFD008).w,d0
000036DE 5440                       		addq.w	#2,d0
000036E0 31C0 D008                  		move.w	d0,($FFFFD008).w
000036E4 0C40 1C00                  		cmpi.w	#$1C00,d0
000036E8 6500                       		bcs.s	loc_33E4
000036EA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000036F0 4E75                       		rts	
000036F2                            ; ===========================================================================
000036F2                            
000036F2                            loc_33E4:				; XREF: Demo
000036F2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036F8 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036FC 4A78 F614                  		tst.w	($FFFFF614).w
00003700 6600 FFC2                  		bne.w	loc_33B6
00003704 103C 00E0                  		move.b	#$E0,d0
00003708 6100 DEB6                  		bsr.w	PlaySound_Special ; fade out music
0000370C 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003710 0240 0007                  		andi.w	#7,d0
00003714 D040                       		add.w	d0,d0
00003716 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000371A 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000371E 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003722 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003728 6500                       		bcs.s	loc_3422	; if yes, branch
0000372A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003730                            
00003730                            loc_3422:
00003730 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003736 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000373C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003740 6600                       		bne.s	Demo_Level	; if not, branch
00003742 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003748 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000374C 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003750                            
00003750                            Demo_Level:
00003750 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003756 7000                       		moveq	#0,d0
00003758 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000375C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003760 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003764 4E75                       		rts	
00003766                            ; ===========================================================================
00003766                            ; ---------------------------------------------------------------------------
00003766                            ; Levels used in demos
00003766                            ; ---------------------------------------------------------------------------
00003766                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000376E                            		even
0000376E                            
0000376E                            ; ---------------------------------------------------------------------------
0000376E                            ; Subroutine to	change what you're selecting in the level select
0000376E                            ; ---------------------------------------------------------------------------
0000376E                            
0000376E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000376E                            
0000376E                            
0000376E                            LevSelControls:				; XREF: LevelSelect
0000376E 1238 F605                  		move.b	($FFFFF605).w,d1
00003772 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003776 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003778 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000377C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000377E                            
0000377E                            LevSel_UpDown:
0000377E 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003784 1238 F604                  		move.b	($FFFFF604).w,d1
00003788 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000378C 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000378E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003792 0801 0000                  		btst	#0,d1		; is up	pressed?
00003796 6700                       		beq.s	LevSel_Down	; if not, branch
00003798 5346                       		subq.w	#1,d6		; move up 1 selection
0000379A 6400                       		bcc.s	LevSel_Down
0000379C 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
0000379E                            
0000379E                            LevSel_Down:
0000379E 0801 0001                  		btst	#1,d1		; is down pressed?
000037A2 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037A4 5246                       		addq.w	#1,d6		; move down 1 selection
000037A6 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037AA 6500                       		bcs.s	LevSel_Refresh
000037AC 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037AE 6000                       		bra.s	LevSel_Refresh
000037B0                            		
000037B0                            LevSel_GoLR:
000037B0 0801 0002                  		btst	#2,d1		; is left pressed?
000037B4 6700                       		beq.s	LevSel_GoRight	; if not, branch
000037B6 0446 0000                  		sub.w	#lsrow2size,d6
000037BA 64E2                       		bcc.s	LevSel_Down
000037BC 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000037C0 6000                       		bra.s	LevSel_Refresh
000037C2                            LevSel_GoRight:
000037C2 0646 0000                  		add.w	#lsrow1size,d6
000037C6 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037CA 6500                       		bcs.s	LevSel_Refresh
000037CC 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000037D0                            ; ===========================================================================
000037D0                            LevSel_Refresh:
000037D0 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037D4 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037D8 363C C65F                  		move.w	#$C680-$21,d3
000037DC 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000037E0 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037E4 4E75                       		rts	
000037E6                            		
000037E6                            LevSel_SndTest:				; XREF: LevSelControls
000037E6 1238 F605                  		move.b	($FFFFF605).w,d1
000037EA 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000037EE 6700                       		beq.s	LevSel_NoMove	; if not, branch
000037F0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
000037F6 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037F8                            		
000037F8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037FC 0801 0002                  		btst	#2,d1		; is left pressed?
00003800 6700                       		beq.s	LevSel_Right	; if not, branch
00003802 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003804 6400                       		bcc.s	LevSel_Right
00003806 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003808                            
00003808                            LevSel_Right:
00003808 0801 0003                  		btst	#3,d1		; is right pressed?
0000380C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000380E 5240                       		addq.w	#1,d0		; add 1	to sound test
00003810 0C40 0050                  		cmpi.w	#$50,d0
00003814 6500                       		bcs.s	LevSel_Refresh2
00003816 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003818                            
00003818                            LevSel_Refresh2:
00003818 363C C65F                  		move.w	#$C680-$21,d3
0000381C 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003820 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003824                            
00003824                            LevSel_NoMove:
00003824 4E75                       		rts	
00003826                            ; End of function LevSelControls
00003826                            
00003826                            ; ---------------------------------------------------------------------------
00003826                            ; Subroutine to load level select text
00003826                            ; ---------------------------------------------------------------------------
00003826                            
00003826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003826 =60860003                  lsscrpos = $60860003
00003826 =00240000                  lsoff = $240000
00003826 =64C00003                  lsstpos = lsscrpos+$43A0000
00003826                            
00003826                            LevSelTextLoad_loop:
00003826 2D44 0004                  		move.l	d4,4(a6)
0000382A 6100 0000                  		bsr.w	LevSel_ChgLine
0000382E 0684 0080 0000             		addi.l	#$800000,d4
00003834 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003838 4E75                       		rts
0000383A                            LevSelTextLoad:				; XREF: TitleScreen
0000383A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003840 4DF9 00C0 0000             		lea	($C00000).l,a6
00003846 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000384A 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003850                            		
00003850 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003854 61D0                       		bsr.s	LevSelTextLoad_loop
00003856                            		
00003856                            		
00003856 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
0000385C 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003860 61C4                       		bsr.s	LevSelTextLoad_loop
00003862 363C C65F                  		move.w	#$C680-$21,d3
00003866                            		
00003866                            LevSelHighlightCode:
00003866 4DF9 00C0 0000             		lea	($C00000).l,a6
0000386C 7000                       		moveq	#0,d0
0000386E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003872 3200                       		move.w	d0,d1
00003874 283C 6086 0003             		move.l	#lsscrpos,d4
0000387A                            		
0000387A 0C40 0000                  		cmpi.w	#lsrow1size,d0
0000387E 6D00                       		blt.s	@notsecond
00003880                            		
00003880 0440 0000                  		sub.w	#lsrow1size,d0
00003884 0684 0024 0000             		addi.l	#lsoff,d4
0000388A                            	@notsecond:
0000388A EF48                       		lsl.w	#7,d0
0000388C 4840                       		swap	d0
0000388E D880                       		add.l	d0,d4
00003890 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003896 E749                       		lsl.w	#3,d1
00003898 D241                       		add.w	d1,d1
0000389A D2C1                       		adda.w	d1,a1
0000389C 2D44 0004                  		move.l	d4,4(a6)
000038A0 6100 0000                  		bsr.w	LevSel_ChgLine
000038A4 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038AA 6700                       		beq.s	LevSelSndTest
000038AC 4E75                       		rts
000038AE                            
000038AE                            LevSelSndTest:
000038AE 0643 0030                  		add.w	#$30,d3
000038B2 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000038BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000038C0 0640 0080                  		addi.w	#$80,d0
000038C4 1400                       		move.b	d0,d2
000038C6 E808                       		lsr.b	#4,d0
000038C8 6100 0000                  		bsr.w	LevSel_ChgSnd
000038CC 1002                       		move.b	d2,d0
000038CE 6100 0000                  		bsr.w	LevSel_ChgSnd
000038D2 4E75                       		rts	
000038D4                            ; End of function LevSelTextLoad
000038D4                            
000038D4                            
000038D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038D4                            
000038D4                            
000038D4                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000038D4 0240 000F                  		andi.w	#$F,d0
000038D8 0C00 000A                  		cmpi.b	#$A,d0
000038DC 6500                       		bcs.s	loc_3580
000038DE 5E00                       		addi.b	#7,d0
000038E0                            
000038E0                            loc_3580:
000038E0 D043                       		add.w	d3,d0
000038E2 3C80                       		move.w	d0,(a6)
000038E4 4E75                       		rts	
000038E6                            ; End of function LevSel_ChgSnd
000038E6                            
000038E6                            
000038E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038E6                            
000038E6                            
000038E6                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000038E6 740F                       		moveq	#$10-1,d2		; number of characters per line
000038E8                            
000038E8                            @loop:
000038E8 7000                       		moveq	#0,d0
000038EA 1019                       		move.b	(a1)+,d0
000038EC 0C00 0020                  		cmpi.b	#$20,d0
000038F0 6E00                       		bgt.s	@draw
000038F2 3CBC 0000                  		move.w	#0,(a6)
000038F6 51CA FFF0                  		dbf	d2,@loop
000038FA 4E75                       		rts	
000038FC                            ; ===========================================================================
000038FC                            
000038FC                            @draw:				; XREF: LevSel_ChgLine
000038FC D043                       		add.w	d3,d0
000038FE 3C80                       		move.w	d0,(a6)
00003900 51CA FFE6                  		dbf	d2,@loop
00003904 4E75                       		rts	
00003906                            ; End of function LevSel_ChgLine
00003906                            		
00003906                            CStringSlop_draw:
00003906 D043                       		add.w	d3,d0
00003908 3C80                       		move.w	d0,(a6)
0000390A                            CStringSlop:				; XREF: LevSelTextLoad
0000390A 7000                       		moveq	#0,d0
0000390C 1019                       		move.b	(a1)+,d0
0000390E 0C00 0020                  		cmpi.b	#$20,d0
00003912 6EF2                       		bgt.s	CStringSlop_draw
00003914 4A00                       		tst.b	d0
00003916 6700                       		beq.s	@end
00003918 3CBC 0000                  		move.w	#0,(a6)
0000391C 60EC                       		bra.s	CStringSlop
0000391E                            	@end:
0000391E 4E75                       		rts
00003920                            ; End of function LevSel_ChgLine
00003920                            
00003920                            ; ===========================================================================
00003920                            ; ---------------------------------------------------------------------------
00003920                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003920                            ; ---------------------------------------------------------------------------
00003920                            LevelMenuText:	
00003920 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003930 2020 2020 2020 2020 2020+          dc.b    "               2"
00003940 2020 2020 2020 2020 2020+          dc.b    "               3"
00003950 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003960 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003970 2020 2020 2020 2020 2020+          dc.b    "               3"
00003980 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003990 2020 2020 2020 2020 2020+          dc.b    "               2"
000039A0 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B0 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
000039C0 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D0 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E0                            LMTSecondRow:
000039E0 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000039F0 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003A00 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A10 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003A20 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A30 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A40 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A50 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A60 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A70 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A80 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A90                            LMTSelectableEnd:
00003A90 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003AA0                            LMTEnd:
00003AA0                            
00003AA0                            
00003AA0 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003AA0 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003AA0 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003AA0                            ; just to not break these
00003AA0 =00000014                  lssndtest = lsrow2size+8
00003AA0 =00000015                  lswifi = lsrow2size+9
00003AA0                            
00003AA0 =6C820003                  nppos = $6C820003
00003AA0                            Now_Playing:
00003AA0 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003AB0                            		even
00003AB0                            NP_Track:
00003AB0 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003AB8                            		even
00003AB8                            NP_SFX:
00003AB8 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003AC0                            		even
00003AC0                            
00003AC0                            ShowNow_Playing:
00003AC0 1C00                       		move.b	d0,d6
00003AC2 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003AC6 43FA FFD8                  		lea	Now_Playing(pc),a1
00003ACA 4DF9 00C0 0000             		lea		($C00000).l,a6
00003AD0 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003AD8 6100 FE30                  		bsr.w	CStringSlop
00003ADC                            		
00003ADC 43FA FFD2                  		lea	NP_Track(pc),a1
00003AE0 0C06 00A0                  		cmpi.b	#$A0,d6
00003AE4 6D00                       		blt.s	@track
00003AE6                            		
00003AE6 43FA FFD0                  		lea	NP_SFX(pc),a1
00003AEA                            	@track:
00003AEA 6100 FE1E                  		bsr.w	CStringSlop
00003AEE                            		
00003AEE 0643 0030                  		add.w	#$30,d3
00003AF2 1006                       		move.b	d6,d0
00003AF4 1400                       		move.b	d0,d2
00003AF6 E808                       		lsr.b	#4,d0
00003AF8 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AFC 1002                       		move.b	d2,d0
00003AFE 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003B02 4E75                       		rts	
00003B04                            ; ---------------------------------------------------------------------------
00003B04                            ; Music	playlist
00003B04                            ; ---------------------------------------------------------------------------
00003B04                            MusicList1:	incbin	misc\muslist1.bin
00003B0C                            		even
00003B0C                            MusicList2:	incbin	misc\muslist2.bin
00003B12                            		even
00003B12                            MusicList3:	incbin	misc\muslist3.bin
00003B18                            		even
00003B18                            MusicList4:	incbin	misc\muslist4.bin
00003B1E                            		even
00003B1E                            ; ===========================================================================
00003B1E                            
00003B1E                            ; ---------------------------------------------------------------------------
00003B1E                            ; Level
00003B1E                            ; ---------------------------------------------------------------------------
00003B1E                            
00003B1E                            Level:					; XREF: GameModeArray
00003B1E 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003B24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B28 6B00                       		bmi.s	loc_37B6
00003B2A 103C 00E0                  		move.b	#$E0,d0
00003B2E 6100 DA90                  		bsr.w	PlaySound_Special ; fade out music
00003B32                            
00003B32                            loc_37B6:
00003B32 6100 DCCE                  		bsr.w	ClearPLC
00003B36 6100 E504                  		bsr.w	Pal_FadeFrom
00003B3A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B3E 6B00                       		bmi.s	Level_ClrRam
00003B40 46FC 2700                  		move	#$2700,sr
00003B44 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003B4E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003B54 6100 DB0E                  		bsr.w	NemDec
00003B58 46FC 2300                  		move	#$2300,sr
00003B5C 7000                       		moveq	#0,d0
00003B5E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B62 E948                       		lsl.w	#4,d0
00003B64 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B6A 45F2 0000                  		lea	(a2,d0.w),a2
00003B6E 7000                       		moveq	#0,d0
00003B70 1012                       		move.b	(a2),d0
00003B72 6700                       		beq.s	loc_37FC
00003B74 6100 DC2E                  		bsr.w	LoadPLC		; load level patterns
00003B78                            
00003B78                            loc_37FC:
00003B78 7001                       		moveq	#1,d0
00003B7A 6100 DC28                  		bsr.w	LoadPLC		; load standard	patterns
00003B7E                            
00003B7E                            Level_ClrRam:
00003B7E 43F8 D000                  		lea	($FFFFD000).w,a1
00003B82 7000                       		moveq	#0,d0
00003B84 323C 07FF                  		move.w	#$7FF,d1
00003B88                            
00003B88                            Level_ClrObjRam:
00003B88 22C0                       		move.l	d0,(a1)+
00003B8A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B8E                            
00003B8E 43F8 F628                  		lea	($FFFFF628).w,a1
00003B92 7000                       		moveq	#0,d0
00003B94 323C 0015                  		move.w	#$15,d1
00003B98                            
00003B98                            Level_ClrVars:
00003B98 22C0                       		move.l	d0,(a1)+
00003B9A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B9E                            
00003B9E 43F8 F700                  		lea	($FFFFF700).w,a1
00003BA2 7000                       		moveq	#0,d0
00003BA4 323C 003F                  		move.w	#$3F,d1
00003BA8                            
00003BA8                            Level_ClrVars2:
00003BA8 22C0                       		move.l	d0,(a1)+
00003BAA 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003BAE                            
00003BAE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003BB2 7000                       		moveq	#0,d0
00003BB4 323C 0047                  		move.w	#$47,d1
00003BB8                            
00003BB8                            Level_ClrVars3:
00003BB8 22C0                       		move.l	d0,(a1)+
00003BBA 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003BBE                            
00003BBE 46FC 2700                  		move	#$2700,sr
00003BC2 6100 D924                  		bsr.w	ClearScreen
00003BC6 4DF9 00C0 0004             		lea	($C00004).l,a6
00003BCC 3CBC 8B03                  		move.w	#$8B03,(a6)
00003BD0 3CBC 8230                  		move.w	#$8230,(a6)
00003BD4 3CBC 8407                  		move.w	#$8407,(a6)
00003BD8 3CBC 857C                  		move.w	#$857C,(a6)
00003BDC 3CBC 9001                  		move.w	#$9001,(a6)
00003BE0 3CBC 8004                  		move.w	#$8004,(a6)
00003BE4 3CBC 8720                  		move.w	#$8720,(a6)
00003BE8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003BEE 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003BF2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BF8 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BFA 3CBC 8014                  		move.w	#$8014,(a6)
00003BFE 7000                       		moveq	#0,d0
00003C00 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C04 D040                       		add.w	d0,d0
00003C06 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003C0C 3031 0000                  		move.w	(a1,d0.w),d0
00003C10 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003C14 31C0 F648                  		move.w	d0,($FFFFF648).w
00003C18 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003C1C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003C20 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003C24 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003C2A 6000 0000                  		bra.w	Level_LoadPal
00003C2E                            Player_Palette:
00003C2E                            		; normal, lz, sbz, blank
00003C2E 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003C36                            		
00003C36 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003C3E                            		; add more player palettes
00003C3E                            Level_LoadPal:
00003C3E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003C44 46FC 2300                  		move	#$2300,sr
00003C48                            
00003C48 7200                       		moveq	#0,d1
00003C4A 1238 FFE8                  		move.b	(v_character),d1
00003C4E D241                       		add.w	d1,d1
00003C50 D241                       		add.w	d1,d1
00003C52 D241                       		add.w	d1,d1
00003C54 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003C58                            		
00003C58 6100 E6A8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003C5C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C62 6600                       		bne.s	Level_GetBgm	; if not, branch
00003C64 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003C68 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003C6E 6600                       		bne.s	Level_WaterPal	; if not, branch
00003C70 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003C74                            
00003C74                            Level_WaterPal:
00003C74 6100 E6A4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003C78 4A38 FE30                  		tst.b	($FFFFFE30).w
00003C7C 6700                       		beq.s	Level_GetBgm
00003C7E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C84                            
00003C84                            ; NineKode begins here - How to play different songs on different acts
00003C84                             
00003C84                            Level_GetBgm:
00003C84 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C88 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C8C 7000                       		moveq	#0,d0
00003C8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C92                             
00003C92 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C98 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C9A 43F9 0000 3B04             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003CA0 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CA2                             
00003CA2                            Level_GetBgm2:
00003CA2 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003CA8 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003CAA 43F9 0000 3B0C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003CB0 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CB2                             
00003CB2                            Level_GetBgm3:
00003CB2 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003CB8 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003CBA 43F9 0000 3B12             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003CC0 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CC2                             
00003CC2                            Level_GetBgm4:
00003CC2 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003CC8 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003CCA 43F9 0000 3B18             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003CD0                             
00003CD0                            Level_PlayBgm:
00003CD0 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003CD4 6100 D8E4                  		bsr.w	PlaySound	; play music
00003CD8 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003CDE                             
00003CDE                            ; NineKode ends here
00003CDE                            
00003CDE                            Level_TtlCard:
00003CDE 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003CE4 6100 EF4C                  		bsr.w	DelayProgram
00003CE8 4EB9 0000 0000             		jsr	ObjectsLoad
00003CEE 4EB9 0000 0000             		jsr	BuildSprites
00003CF4 6100 DB1A                  		bsr.w	RunPLC_RAM
00003CF8 3038 D108                  		move.w	($FFFFD108).w,d0
00003CFC B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003D00 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003D02 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003D06 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003D08 4EB9 0000 0000             		jsr	Hud_Base
00003D0E                            
00003D0E                            loc_3946:
00003D0E 7003                       		moveq	#3,d0
00003D10 6100 E5D4                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003D14 6100 0000                  		bsr.w	LevelSizeLoad
00003D18 6100 0000                  		bsr.w	DeformBgLayer
00003D1C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003D22 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003D26 6100 0000                  		bsr.w	LoadTilesFromStart
00003D2A 4EB9 0000 0000             		jsr	FloorLog_Unk
00003D30 6100 0000                  		bsr.w	ColIndexLoad
00003D34 6100 0000                  		bsr.w	LZWaterEffects
00003D38 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003D3E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D42 6B00                       		bmi.s	Level_ChkDebug
00003D44 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003D4A                            
00003D4A                            Level_ChkDebug:
00003D4A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003D4E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D50 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003D56 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D58 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003D5E                            
00003D5E                            Level_ChkWater:
00003D5E 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003D64 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003D6A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D70 6600                       		bne.s	Level_LoadObj	; if not, branch
00003D72 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003D78 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D7E 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D84 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D8A                            
00003D8A                            Level_LoadObj:
00003D8A 4EB9 0000 0000             		jsr	ObjPosLoad
00003D90 4EB9 0000 0000             		jsr	ObjectsLoad
00003D96 4EB9 0000 0000             		jsr	BuildSprites
00003D9C 7000                       		moveq	#0,d0
00003D9E 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003DA2 6600                       		bne.s	loc_39E8	; if yes, branch
00003DA4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003DA8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003DAC 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003DB0                            
00003DB0                            loc_39E8:
00003DB0 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003DB4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003DB8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003DBC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003DC0                            		; move.b	d0,($FFFFFE2F).w
00003DC0 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003DC6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003DCA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003DCE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003DD2 6100 0000                  		bsr.w	OscillateNumInit
00003DD6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003DDC 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003DE2 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003DE8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003DEE 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003DF4 7000                       		moveq	#0,d0
00003DF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DFA E548                       		lsl.w	#2,d0
00003DFC 2271 0000                  		movea.l	(a1,d0.w),a1
00003E00 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003E04 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003E06 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003E0C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003E10 5340                       		subq.w	#1,d0
00003E12 E548                       		lsl.w	#2,d0
00003E14 2271 0000                  		movea.l	(a1,d0.w),a1
00003E18                            
00003E18                            Level_Demo:
00003E18 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003E1E 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003E22 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003E28 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E2C 6A00                       		bpl.s	Level_ChkWaterPal
00003E2E 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003E34 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003E3A 6600                       		bne.s	Level_ChkWaterPal
00003E3C 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003E42                            
00003E42                            Level_ChkWaterPal:
00003E42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003E48 6600                       		bne.s	Level_Delay	; if not, branch
00003E4A 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003E4C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003E52 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003E54 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003E56                            
00003E56                            Level_WaterPal2:
00003E56 6100 E4DE                  		bsr.w	PalLoad4_Water
00003E5A                            
00003E5A                            Level_Delay:
00003E5A 323C 0003                  		move.w	#3,d1
00003E5E                            
00003E5E                            Level_DelayLoop:
00003E5E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E64 6100 EDCC                  		bsr.w	DelayProgram
00003E68 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003E6C                            
00003E6C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003E72 6100 E128                  		bsr.w	Pal_FadeTo2
00003E76 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E7A 6B00                       		bmi.s	Level_ClrCardArt
00003E7C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E80 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E84 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E88 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E8C 6000                       		bra.s	Level_StartGame
00003E8E                            ; ===========================================================================
00003E8E                            
00003E8E                            Level_ClrCardArt:
00003E8E 7002                       		moveq	#2,d0
00003E90 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003E96 7000                       		moveq	#0,d0
00003E98 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E9C 0640 0015                  		addi.w	#$15,d0
00003EA0 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003EA6                            
00003EA6                            Level_StartGame:
00003EA6 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003EAC                            
00003EAC                            ; ---------------------------------------------------------------------------
00003EAC                            ; Main level loop (when	all title card and loading sequences are finished)
00003EAC                            ; ---------------------------------------------------------------------------
00003EAC                            
00003EAC                            Level_MainLoop:
00003EAC 6100 D71E                  		bsr.w	PauseGame
00003EB0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EB6 6100 ED7A                  		bsr.w	DelayProgram
00003EBA 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003EBE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EC2 6100 0000                  		bsr.w	LZWaterEffects
00003EC6 4EB9 0000 0000             		jsr	ObjectsLoad
00003ECC 4A78 FE08                  		tst.w	($FFFFFE08).w
00003ED0 6600                       		bne.s	loc_3B10
00003ED2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003ED8 6400                       		bcc.s	loc_3B14
00003EDA                            
00003EDA                            loc_3B10:
00003EDA 6100 0000                  		bsr.w	DeformBgLayer
00003EDE                            
00003EDE                            loc_3B14:
00003EDE 4EB9 0000 0000             		jsr	BuildSprites
00003EE4 4EB9 0000 0000             		jsr	ObjPosLoad
00003EEA 6100 DC74                  		bsr.w	PalCycle_Load
00003EEE 6100 D920                  		bsr.w	RunPLC_RAM
00003EF2 6100 0000                  		bsr.w	OscillateNumDo
00003EF6 6100 0000                  		bsr.w	ChangeRingFrame
00003EFA 6100 0000                  		bsr.w	SignpostArtLoad
00003EFE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F04 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003F06 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003F0A 6600 FC12                  		bne.w	Level		; if yes, branch
00003F0E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003F14 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003F18 4E75                       		rts	
00003F1A                            ; ===========================================================================
00003F1A                            
00003F1A                            Level_ChkDemo:				; XREF: Level_MainLoop
00003F1A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003F1E 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003F20 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003F24 6700                       		beq.s	Level_EndDemo	; if not, branch
00003F26 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F2C 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003F30 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F36 4E75                       		rts	
00003F38                            ; ===========================================================================
00003F38                            
00003F38                            Level_EndDemo:				; XREF: Level_ChkDemo
00003F38 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003F3E 6600                       		bne.s	loc_3B88	; if not, branch
00003F40 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F46 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F4A 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003F4C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003F52                            
00003F52                            loc_3B88:
00003F52 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003F58 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003F5E 4278 F794                  		clr.w	($FFFFF794).w
00003F62                            
00003F62                            loc_3B98:
00003F62 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F68 6100 ECC8                  		bsr.w	DelayProgram
00003F6C 6100 0000                  		bsr.w	MoveSonicInDemo
00003F70 4EB9 0000 0000             		jsr	ObjectsLoad
00003F76 4EB9 0000 0000             		jsr	BuildSprites
00003F7C 4EB9 0000 0000             		jsr	ObjPosLoad
00003F82 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F86 6A00                       		bpl.s	loc_3BC8
00003F88 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F8E 6100 E0CC                  		bsr.w	Pal_FadeOut
00003F92                            
00003F92                            loc_3BC8:
00003F92 4A78 F614                  		tst.w	($FFFFF614).w
00003F96 66CA                       		bne.s	loc_3B98
00003F98 4E75                       		rts	
00003F9A                            ; ===========================================================================
00003F9A                            ; ---------------------------------------------------------------------------
00003F9A                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F9A                            ; ---------------------------------------------------------------------------
00003F9A                            
00003F9A                            LZWaterEffects:				; XREF: Level
00003F9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003FA0 6600                       		bne.s	locret_3C28	; if not, branch
00003FA2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FA8 6400                       		bcc.s	LZMoveWater
00003FAA 6100 0000                  		bsr.w	LZWindTunnels
00003FAE 6100 0000                  		bsr.w	LZWaterSlides
00003FB2 6100 0000                  		bsr.w	LZDynamicWater
00003FB6                            
00003FB6                            LZMoveWater:
00003FB6 4238 F64E                  		clr.b	($FFFFF64E).w
00003FBA 7000                       		moveq	#0,d0
00003FBC 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003FC0 E248                       		lsr.w	#1,d0
00003FC2 D078 F648                  		add.w	($FFFFF648).w,d0
00003FC6 31C0 F646                  		move.w	d0,($FFFFF646).w
00003FCA 3038 F646                  		move.w	($FFFFF646).w,d0
00003FCE 9078 F704                  		sub.w	($FFFFF704).w,d0
00003FD2 6400                       		bcc.s	loc_3C1A
00003FD4 4A40                       		tst.w	d0
00003FD6 6A00                       		bpl.s	loc_3C1A
00003FD8 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003FDE 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003FE4                            
00003FE4                            loc_3C1A:
00003FE4 0C40 00DF                  		cmpi.w	#$DF,d0
00003FE8 6500                       		bcs.s	loc_3C24
00003FEA 303C 00DF                  		move.w	#$DF,d0
00003FEE                            
00003FEE                            loc_3C24:
00003FEE 11C0 F625                  		move.b	d0,($FFFFF625).w
00003FF2                            
00003FF2                            locret_3C28:
00003FF2 4E75                       		rts	
00003FF4                            ; ===========================================================================
00003FF4                            ; ---------------------------------------------------------------------------
00003FF4                            ; Labyrinth default water heights
00003FF4                            ; ---------------------------------------------------------------------------
00003FF4                            WaterHeight:	incbin	misc\lz_heigh.bin
00003FFC                            		even
00003FFC                            ; ===========================================================================
00003FFC                            
00003FFC                            ; ---------------------------------------------------------------------------
00003FFC                            ; Labyrinth dynamic water routines
00003FFC                            ; ---------------------------------------------------------------------------
00003FFC                            
00003FFC                            LZDynamicWater:				; XREF: LZWaterEffects
00003FFC 7000                       		moveq	#0,d0
00003FFE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004002 D040                       		add.w	d0,d0
00004004 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004008 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
0000400C 7200                       		moveq	#0,d1
0000400E 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004012 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004016 9078 F648                  		sub.w	($FFFFF648).w,d0
0000401A 6700                       		beq.s	locret_3C5A
0000401C 6400                       		bcc.s	loc_3C56
0000401E 4441                       		neg.w	d1
00004020                            
00004020                            loc_3C56:
00004020 D378 F648                  		add.w	d1,($FFFFF648).w
00004024                            
00004024                            locret_3C5A:
00004024 4E75                       		rts	
00004026                            ; ===========================================================================
00004026 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004028 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000402A 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000402C 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000402E                            ; ===========================================================================
0000402E                            
0000402E                            DynWater_LZ1:				; XREF: DynWater_Index
0000402E 3038 F700                  		move.w	($FFFFF700).w,d0
00004032 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004036 6600                       		bne.s	loc_3CD0
00004038 323C 00B8                  		move.w	#$B8,d1
0000403C 0C40 0600                  		cmpi.w	#$600,d0
00004040 6500                       		bcs.s	loc_3CB4
00004042 323C 0108                  		move.w	#$108,d1
00004046 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000404C 6500                       		bcs.s	loc_3CBA
0000404E 0C40 0C00                  		cmpi.w	#$C00,d0
00004052 6500                       		bcs.s	loc_3CB4
00004054 323C 0318                  		move.w	#$318,d1
00004058 0C40 1080                  		cmpi.w	#$1080,d0
0000405C 6500                       		bcs.s	loc_3CB4
0000405E 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004064 323C 05C8                  		move.w	#$5C8,d1
00004068 0C40 1380                  		cmpi.w	#$1380,d0
0000406C 6500                       		bcs.s	loc_3CB4
0000406E 323C 03A8                  		move.w	#$3A8,d1
00004072 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004076 6600                       		bne.s	loc_3CB4
00004078 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000407E                            
0000407E                            loc_3CB4:
0000407E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004082 4E75                       		rts	
00004084                            ; ===========================================================================
00004084                            
00004084                            loc_3CBA:				; XREF: DynWater_LZ1
00004084 0C40 0C80                  		cmpi.w	#$C80,d0
00004088 65F4                       		bcs.s	loc_3CB4
0000408A 323C 00E8                  		move.w	#$E8,d1
0000408E 0C40 1500                  		cmpi.w	#$1500,d0
00004092 65EA                       		bcs.s	loc_3CB4
00004094 323C 0108                  		move.w	#$108,d1
00004098 60E4                       		bra.s	loc_3CB4
0000409A                            ; ===========================================================================
0000409A                            
0000409A                            loc_3CD0:				; XREF: DynWater_LZ1
0000409A 5302                       		subq.b	#1,d2
0000409C 6600                       		bne.s	locret_3CF4
0000409E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000040A4 6400                       		bcc.s	locret_3CF4
000040A6 323C 03A8                  		move.w	#$3A8,d1
000040AA 0C40 1300                  		cmpi.w	#$1300,d0
000040AE 6500                       		bcs.s	loc_3CF0
000040B0 323C 0108                  		move.w	#$108,d1
000040B4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040BA                            
000040BA                            loc_3CF0:
000040BA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040BE                            
000040BE                            locret_3CF4:
000040BE 4E75                       		rts	
000040C0                            ; ===========================================================================
000040C0                            
000040C0                            DynWater_LZ2:				; XREF: DynWater_Index
000040C0 3038 F700                  		move.w	($FFFFF700).w,d0
000040C4 323C 0328                  		move.w	#$328,d1
000040C8 0C40 0500                  		cmpi.w	#$500,d0
000040CC 6500                       		bcs.s	loc_3D12
000040CE 323C 03C8                  		move.w	#$3C8,d1
000040D2 0C40 0B00                  		cmpi.w	#$B00,d0
000040D6 6500                       		bcs.s	loc_3D12
000040D8 323C 0428                  		move.w	#$428,d1
000040DC                            
000040DC                            loc_3D12:
000040DC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040E0 4E75                       		rts	
000040E2                            ; ===========================================================================
000040E2                            
000040E2                            DynWater_LZ3:				; XREF: DynWater_Index
000040E2 3038 F700                  		move.w	($FFFFF700).w,d0
000040E6 1438 F64D                  		move.b	($FFFFF64D).w,d2
000040EA 6600                       		bne.s	loc_3D5E
000040EC 323C 0900                  		move.w	#$900,d1
000040F0 0C40 0600                  		cmpi.w	#$600,d0
000040F4 6500                       		bcs.s	loc_3D54
000040F6 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000040FC 6500                       		bcs.s	loc_3D54
000040FE 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004104 6400                       		bcc.s	loc_3D54
00004106 323C 04C8                  		move.w	#$4C8,d1
0000410A 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004110 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004116 303C 00B7                  		move.w	#$B7,d0
0000411A 6100 D4A4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
0000411E                            
0000411E                            loc_3D54:
0000411E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004122 31C1 F648                  		move.w	d1,($FFFFF648).w
00004126 4E75                       		rts	
00004128                            ; ===========================================================================
00004128                            
00004128                            loc_3D5E:				; XREF: DynWater_LZ3
00004128 5302                       		subq.b	#1,d2
0000412A 6600                       		bne.s	loc_3DA8
0000412C 323C 04C8                  		move.w	#$4C8,d1
00004130 0C40 0770                  		cmpi.w	#$770,d0
00004134 6500                       		bcs.s	loc_3DA2
00004136 323C 0308                  		move.w	#$308,d1
0000413A 0C40 1400                  		cmpi.w	#$1400,d0
0000413E 6500                       		bcs.s	loc_3DA2
00004140 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004146 6700                       		beq.s	loc_3D8E
00004148 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000414E 6400                       		bcc.s	loc_3D8E
00004150 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004156 6400                       		bcc.s	loc_3DA2
00004158                            
00004158                            loc_3D8E:
00004158 323C 0508                  		move.w	#$508,d1
0000415C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004160 0C40 1770                  		cmpi.w	#$1770,d0
00004164 6500                       		bcs.s	loc_3DA2
00004166 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000416C                            
0000416C                            loc_3DA2:
0000416C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004170 4E75                       		rts	
00004172                            ; ===========================================================================
00004172                            
00004172                            loc_3DA8:
00004172 5302                       		subq.b	#1,d2
00004174 6600                       		bne.s	loc_3DD2
00004176 323C 0508                  		move.w	#$508,d1
0000417A 0C40 1860                  		cmpi.w	#$1860,d0
0000417E 6500                       		bcs.s	loc_3DCC
00004180 323C 0188                  		move.w	#$188,d1
00004184 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004188 6400                       		bcc.s	loc_3DC6
0000418A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000418E 6600                       		bne.s	loc_3DCC
00004190                            
00004190                            loc_3DC6:
00004190 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004196                            
00004196                            loc_3DCC:
00004196 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000419A 4E75                       		rts	
0000419C                            ; ===========================================================================
0000419C                            
0000419C                            loc_3DD2:
0000419C 5302                       		subq.b	#1,d2
0000419E 6600                       		bne.s	loc_3E0E
000041A0 323C 0188                  		move.w	#$188,d1
000041A4 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000041A8 6500                       		bcs.s	loc_3E04
000041AA 323C 0900                  		move.w	#$900,d1
000041AE 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000041B2 6500                       		bcs.s	loc_3E04
000041B4 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000041BA 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000041C0 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000041C6 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000041CC 4E75                       		rts	
000041CE                            ; ===========================================================================
000041CE                            
000041CE                            loc_3E04:
000041CE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041D2 31C1 F648                  		move.w	d1,($FFFFF648).w
000041D6 4E75                       		rts	
000041D8                            ; ===========================================================================
000041D8                            
000041D8                            loc_3E0E:
000041D8 0C40 1E00                  		cmpi.w	#$1E00,d0
000041DC 6500                       		bcs.s	locret_3E1A
000041DE 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000041E4                            
000041E4                            locret_3E1A:
000041E4 4E75                       		rts	
000041E6                            ; ===========================================================================
000041E6                            
000041E6                            DynWater_SBZ3:				; XREF: DynWater_Index
000041E6 323C 0228                  		move.w	#$228,d1
000041EA 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000041F0 6500                       		bcs.s	loc_3E2C
000041F2 323C 04C8                  		move.w	#$4C8,d1
000041F6                            
000041F6                            loc_3E2C:
000041F6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041FA 4E75                       		rts
000041FC                            
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            ; Labyrinth Zone "wind tunnels"	subroutine
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            
000041FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FC                            
000041FC                            
000041FC                            LZWindTunnels:				; XREF: LZWaterEffects
000041FC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004200 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004204 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000420A 7000                       		moveq	#0,d0
0000420C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004210 E748                       		lsl.w	#3,d0
00004212 D4C0                       		adda.w	d0,a2
00004214 7200                       		moveq	#0,d1
00004216 4A38 FE11                  		tst.b	($FFFFFE11).w
0000421A 6600                       		bne.s	loc_3E56
0000421C 7201                       		moveq	#1,d1
0000421E 514A                       		subq.w	#8,a2
00004220                            
00004220                            loc_3E56:
00004220 43F8 D000                  		lea	($FFFFD000).w,a1
00004224                            
00004224                            LZWind_Loop:
00004224 3029 0008                  		move.w	8(a1),d0
00004228 B052                       		cmp.w	(a2),d0
0000422A 6500 0000                  		bcs.w	loc_3EF4
0000422E B06A 0004                  		cmp.w	4(a2),d0
00004232 6400 0000                  		bcc.w	loc_3EF4
00004236 3429 000C                  		move.w	$C(a1),d2
0000423A B46A 0002                  		cmp.w	2(a2),d2
0000423E 6500                       		bcs.s	loc_3EF4
00004240 B46A 0006                  		cmp.w	6(a2),d2
00004244 6400                       		bcc.s	loc_3EF4
00004246 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000424A 0200 003F                  		andi.b	#$3F,d0
0000424E 6600                       		bne.s	loc_3E90
00004250 303C 00D0                  		move.w	#$D0,d0
00004254 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000425A                            
0000425A                            loc_3E90:
0000425A 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000425E 6600 0000                  		bne.w	locret_3F0A
00004262 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004268 6400                       		bcc.s	loc_3F06
0000426A 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004270 0440 0080                  		subi.w	#$80,d0
00004274 B052                       		cmp.w	(a2),d0
00004276 6400                       		bcc.s	LZWind_Move
00004278 7002                       		moveq	#2,d0
0000427A 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004280 6600                       		bne.s	loc_3EBA
00004282 4440                       		neg.w	d0
00004284                            
00004284                            loc_3EBA:
00004284 D169 000C                  		add.w	d0,$C(a1)
00004288                            
00004288                            LZWind_Move:
00004288 5869 0008                  		addq.w	#4,8(a1)
0000428C 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004292 337C 0000 0012             		move.w	#0,$12(a1)
00004298 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000429E 08E9 0001 0022             		bset	#1,$22(a1)
000042A4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000042AA 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000042AC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000042B0                            
000042B0                            LZWind_MoveDown:
000042B0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000042B6 6700                       		beq.s	locret_3EF2	; if not, branch
000042B8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000042BC                            
000042BC                            locret_3EF2:
000042BC 4E75                       		rts	
000042BE                            ; ===========================================================================
000042BE                            
000042BE                            loc_3EF4:				; XREF: LZWindTunnels
000042BE 504A                       		addq.w	#8,a2
000042C0 51C9 FF62                  		dbf	d1,LZWind_Loop
000042C4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000042C8 6700                       		beq.s	locret_3F0A
000042CA 137C 0000 001C             		move.b	#0,$1C(a1)
000042D0                            
000042D0                            loc_3F06:
000042D0 4238 F7C7                  		clr.b	($FFFFF7C7).w
000042D4                            
000042D4                            locret_3F0A:
000042D4 4E75                       		rts	
000042D6                            ; End of function LZWindTunnels
000042D6                            
000042D6                            ; ===========================================================================
000042D6 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000042DE 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000042F0 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000042FE                            					; XREF: LZWindTunnels
000042FE                            		even
000042FE                            
000042FE                            ; ---------------------------------------------------------------------------
000042FE                            ; Labyrinth Zone water slide subroutine
000042FE                            ; ---------------------------------------------------------------------------
000042FE                            
000042FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042FE                            
000042FE                            
000042FE                            LZWaterSlides:				; XREF: LZWaterEffects
000042FE 43F8 D000                  		lea	($FFFFD000).w,a1
00004302 0829 0001 0022             		btst	#1,$22(a1)
00004308 6600                       		bne.s	loc_3F6A
0000430A 3029 000C                  		move.w	$C(a1),d0
0000430E E248                       		lsr.w	#1,d0
00004310 0240 0380                  		andi.w	#$380,d0
00004314 1229 0008                  		move.b	8(a1),d1
00004318 0241 007F                  		andi.w	#$7F,d1
0000431C D041                       		add.w	d1,d0
0000431E 45F8 A400                  		lea	($FFFFA400).w,a2
00004322 1032 0000                  		move.b	(a2,d0.w),d0
00004326 45FA 0000                  		lea	byte_3FCF(pc),a2
0000432A 7206                       		moveq	#6,d1
0000432C                            
0000432C                            loc_3F62:
0000432C B022                       		cmp.b	-(a2),d0
0000432E 57C9 FFFC                  		dbeq	d1,loc_3F62
00004332 6700                       		beq.s	LZSlide_Move
00004334                            
00004334                            loc_3F6A:
00004334 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004338 6700                       		beq.s	locret_3F7A
0000433A 337C 0005 003E             		move.w	#5,$3E(a1)
00004340 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004344                            
00004344                            locret_3F7A:
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            LZSlide_Move:				; XREF: LZWaterSlides
00004346 0C41 0003                  		cmpi.w	#3,d1
0000434A 6400                       		bcc.s	loc_3F84
0000434C 4E71                       		nop	
0000434E                            
0000434E                            loc_3F84:
0000434E 08A9 0000 0022             		bclr	#0,$22(a1)
00004354 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004358 1340 0014                  		move.b	d0,$14(a1)
0000435C 6A00                       		bpl.s	loc_3F9A
0000435E 08E9 0000 0022             		bset	#0,$22(a1)
00004364                            
00004364                            loc_3F9A:
00004364 4229 0015                  		clr.b	$15(a1)
00004368 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000436E 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004374 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004378 0200 001F                  		andi.b	#$1F,d0
0000437C 6600                       		bne.s	locret_3FBE
0000437E 303C 00D0                  		move.w	#$D0,d0
00004382 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
00004388                            
00004388                            locret_3FBE:
00004388 4E75                       		rts	
0000438A                            ; End of function LZWaterSlides
0000438A                            
0000438A                            ; ===========================================================================
0000438A 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004399 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000439A                            		even
0000439A                            
0000439A                            ; ---------------------------------------------------------------------------
0000439A                            ; Subroutine to	move Sonic in demo mode
0000439A                            ; ---------------------------------------------------------------------------
0000439A                            
0000439A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000439A                            
0000439A                            
0000439A                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000439A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000439E 6600                       		bne.s	MoveDemo_On	; if yes, branch
000043A0 4E75                       		rts	
000043A2                            ; ===========================================================================
000043A2                            
000043A2                            ; This is an unused subroutine for recording a demo
000043A2                            
000043A2                            MoveDemo_Record:
000043A2 43F9 0008 0000             		lea	($80000).l,a1
000043A8 3038 F790                  		move.w	($FFFFF790).w,d0
000043AC D2C0                       		adda.w	d0,a1
000043AE 1038 F604                  		move.b	($FFFFF604).w,d0
000043B2 B011                       		cmp.b	(a1),d0
000043B4 6600                       		bne.s	loc_3FFA
000043B6 5229 0001                  		addq.b	#1,1(a1)
000043BA 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000043C0 6700                       		beq.s	loc_3FFA
000043C2 4E75                       		rts	
000043C4                            ; ===========================================================================
000043C4                            
000043C4                            loc_3FFA:				; XREF: MoveDemo_Record
000043C4 1340 0002                  		move.b	d0,2(a1)
000043C8 137C 0000 0003             		move.b	#0,3(a1)
000043CE 5478 F790                  		addq.w	#2,($FFFFF790).w
000043D2 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000043D8 4E75                       		rts	
000043DA                            ; ===========================================================================
000043DA                            
000043DA                            MoveDemo_On:				; XREF: MoveSonicInDemo
000043DA 4A38 F604                  		tst.b	($FFFFF604).w
000043DE 6A00                       		bpl.s	loc_4022
000043E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043E4 6B00                       		bmi.s	loc_4022
000043E6 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000043EC                            
000043EC                            loc_4022:
000043EC 43F9 0000 0000             		lea	(Demo_Index).l,a1
000043F2 7000                       		moveq	#0,d0
000043F4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000043F8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000043FE 6600                       		bne.s	loc_4038
00004400 7006                       		moveq	#6,d0
00004402                            
00004402                            loc_4038:
00004402 E548                       		lsl.w	#2,d0
00004404 2271 0000                  		movea.l	(a1,d0.w),a1
00004408 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000440C 6A00                       		bpl.s	loc_4056
0000440E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004414 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004418 5340                       		subq.w	#1,d0
0000441A E548                       		lsl.w	#2,d0
0000441C 2271 0000                  		movea.l	(a1,d0.w),a1
00004420                            
00004420                            loc_4056:
00004420 3038 F790                  		move.w	($FFFFF790).w,d0
00004424 D2C0                       		adda.w	d0,a1
00004426 1011                       		move.b	(a1),d0
00004428 41F8 F604                  		lea	($FFFFF604).w,a0
0000442C 1200                       		move.b	d0,d1
0000442E 1410                       		move.b	(a0),d2
00004430 B500                       		eor.b	d2,d0
00004432 10C1                       		move.b	d1,(a0)+
00004434 C001                       		and.b	d1,d0
00004436 10C0                       		move.b	d0,(a0)+
00004438 5338 F792                  		subq.b	#1,($FFFFF792).w
0000443C 6400                       		bcc.s	locret_407E
0000443E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004444 5478 F790                  		addq.w	#2,($FFFFF790).w
00004448                            
00004448                            locret_407E:
00004448 4E75                       		rts	
0000444A                            ; End of function MoveSonicInDemo
0000444A                            
0000444A                            ; ===========================================================================
0000444A                            ; ---------------------------------------------------------------------------
0000444A                            ; Demo sequence	pointers
0000444A                            ; ---------------------------------------------------------------------------
0000444A                            Demo_Index:
0000444A                            	include "_inc\Demo pointers for intro.asm"
0000444A                            ; ---------------------------------------------------------------------------
0000444A                            ; Demo sequence	pointers
0000444A                            ; ---------------------------------------------------------------------------
0000444A 0000 0000                  	dc.l Demo_GHZ
0000444E 0000 0000                  	dc.l Demo_GHZ
00004452 0000 0000                  	dc.l Demo_MZ
00004456 0000 0000                  	dc.l Demo_MZ
0000445A 0000 0000                  	dc.l Demo_SYZ
0000445E 0000 0000                  	dc.l Demo_SYZ
00004462 0000 0000                  	dc.l Demo_SS
00004466 0000 0000                  	dc.l Demo_SS
00004466 0000 0000                  	dc.l Demo_SS
0000446A                            
0000446A                            Demo_EndIndex:
0000446A                            	include "_inc\Demo pointers for ending.asm"
0000446A                            ; ---------------------------------------------------------------------------
0000446A                            ; Demo (ending) sequence pointers
0000446A                            ; ---------------------------------------------------------------------------
0000446A 0000 0000                  	dc.l Demo_EndGHZ1
0000446E 0000 0000                  	dc.l Demo_EndMZ
00004472 0000 0000                  	dc.l Demo_EndSYZ
00004476 0000 0000                  	dc.l Demo_EndLZ
0000447A 0000 0000                  	dc.l Demo_EndSLZ
0000447E 0000 0000                  	dc.l Demo_EndSBZ1
00004482 0000 0000                  	dc.l Demo_EndSBZ2
00004486 0000 0000                  	dc.l Demo_EndGHZ2
00004486 0000 0000                  	dc.l Demo_EndGHZ2
0000448A                            
0000448A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000449A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000044AA 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000044BA                            		even
000044BA                            
000044BA                            ; ---------------------------------------------------------------------------
000044BA                            ; Collision index loading subroutine
000044BA                            ; ---------------------------------------------------------------------------
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            ColIndexLoad:				; XREF: Level
000044BA 7000                       		moveq	#0,d0
000044BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044C0 E548                       		lsl.w	#2,d0
000044C2 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000044C8 4E75                       		rts	
000044CA                            ; End of function ColIndexLoad
000044CA                            
000044CA                            ; ===========================================================================
000044CA                            ; ---------------------------------------------------------------------------
000044CA                            ; Collision index pointers
000044CA                            ; ---------------------------------------------------------------------------
000044CA                            ColPointers:
000044CA                            	include "_inc\Collision index pointers.asm"
000044CA                            ; ---------------------------------------------------------------------------
000044CA                            ; Collision index pointers
000044CA                            ; ---------------------------------------------------------------------------
000044CA 0000 0000                  	dc.l Col_GHZ
000044CE 0000 0000                  	dc.l Col_LZ
000044D2 0000 0000                  	dc.l Col_MZ
000044D6 0000 0000                  	dc.l Col_SLZ
000044DA 0000 0000                  	dc.l Col_SYZ
000044DE 0000 0000                  	dc.l Col_SBZ
000044DE 0000 0000                  	dc.l Col_SBZ
000044E2                            
000044E2                            ; ---------------------------------------------------------------------------
000044E2                            ; Oscillating number subroutine
000044E2                            ; ---------------------------------------------------------------------------
000044E2                            
000044E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044E2                            
000044E2                            
000044E2                            OscillateNumInit:			; XREF: Level
000044E2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044E6 45F9 0000 0000             		lea	(Osc_Data).l,a2
000044EC 7220                       		moveq	#$20,d1
000044EE                            
000044EE                            Osc_Loop:
000044EE 32DA                       		move.w	(a2)+,(a1)+
000044F0 51C9 FFFC                  		dbf	d1,Osc_Loop
000044F4 4E75                       		rts	
000044F6                            ; End of function OscillateNumInit
000044F6                            
000044F6                            ; ===========================================================================
000044F6 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000044FA 0000 0080                  		dc.w 0,	$80
000044FE 0000 0080                  		dc.w 0,	$80
00004502 0000 0080                  		dc.w 0,	$80
00004506 0000 0080                  		dc.w 0,	$80
0000450A 0000 0080                  		dc.w 0,	$80
0000450E 0000 0080                  		dc.w 0,	$80
00004512 0000 0080                  		dc.w 0,	$80
00004516 0000 0080                  		dc.w 0,	$80
0000451A 0000 50F0                  		dc.w 0,	$50F0
0000451E 011E 2080                  		dc.w $11E, $2080
00004522 00B4 3080                  		dc.w $B4, $3080
00004526 010E 5080                  		dc.w $10E, $5080
0000452A 01C2 7080                  		dc.w $1C2, $7080
0000452E 0276 0080                  		dc.w $276, $80
00004532 0000 0080                  		dc.w 0,	$80
00004536 0000                       		dc.w 0
00004538                            		even
00004538                            
00004538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004538                            
00004538                            
00004538                            OscillateNumDo:				; XREF: Level
00004538 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000453E 6400                       		bcc.s	locret_41C4
00004540 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004544 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000454A 3619                       		move.w	(a1)+,d3
0000454C 720F                       		moveq	#$F,d1
0000454E                            
0000454E                            loc_4184:
0000454E 341A                       		move.w	(a2)+,d2
00004550 381A                       		move.w	(a2)+,d4
00004552 0303                       		btst	d1,d3
00004554 6600                       		bne.s	loc_41A4
00004556 3029 0002                  		move.w	2(a1),d0
0000455A D042                       		add.w	d2,d0
0000455C 3340 0002                  		move.w	d0,2(a1)
00004560 D151                       		add.w	d0,0(a1)
00004562 B811                       		cmp.b	0(a1),d4
00004564 6200                       		bhi.s	loc_41BA
00004566 03C3                       		bset	d1,d3
00004568 6000                       		bra.s	loc_41BA
0000456A                            ; ===========================================================================
0000456A                            
0000456A                            loc_41A4:				; XREF: OscillateNumDo
0000456A 3029 0002                  		move.w	2(a1),d0
0000456E 9042                       		sub.w	d2,d0
00004570 3340 0002                  		move.w	d0,2(a1)
00004574 D151                       		add.w	d0,0(a1)
00004576 B811                       		cmp.b	0(a1),d4
00004578 6300                       		bls.s	loc_41BA
0000457A 0383                       		bclr	d1,d3
0000457C                            
0000457C                            loc_41BA:
0000457C 5849                       		addq.w	#4,a1
0000457E 51C9 FFCE                  		dbf	d1,loc_4184
00004582 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004586                            
00004586                            locret_41C4:
00004586 4E75                       		rts	
00004588                            ; End of function OscillateNumDo
00004588                            
00004588                            ; ===========================================================================
00004588 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000458C 0002 0018                  		dc.w 2,	$18
00004590 0002 0020                  		dc.w 2,	$20
00004594 0002 0030                  		dc.w 2,	$30
00004598 0004 0020                  		dc.w 4,	$20
0000459C 0008 0008                  		dc.w 8,	8
000045A0 0008 0040                  		dc.w 8,	$40
000045A4 0004 0040                  		dc.w 4,	$40
000045A8 0002 0050                  		dc.w 2,	$50
000045AC 0002 0050                  		dc.w 2,	$50
000045B0 0002 0020                  		dc.w 2,	$20
000045B4 0003 0030                  		dc.w 3,	$30
000045B8 0005 0050                  		dc.w 5,	$50
000045BC 0007 0070                  		dc.w 7,	$70
000045C0 0002 0010                  		dc.w 2,	$10
000045C4 0002 0010                  		dc.w 2,	$10
000045C8                            		even
000045C8                            
000045C8                            ; ---------------------------------------------------------------------------
000045C8                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000045C8                            ; ---------------------------------------------------------------------------
000045C8                            
000045C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C8                            
000045C8                            
000045C8                            ChangeRingFrame:			; XREF: Level
000045C8 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000045CC 6A00                       		bpl.s	loc_421C
000045CE 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000045D4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000045D8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000045DE                            
000045DE                            loc_421C:
000045DE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000045E2 6A00                       		bpl.s	loc_4232
000045E4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000045EA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000045EE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000045F4                            
000045F4                            loc_4232:
000045F4 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000045F8 6A00                       		bpl.s	loc_4250
000045FA 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004600 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004604 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000460A 6500                       		bcs.s	loc_4250
0000460C 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004612                            
00004612                            loc_4250:
00004612 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004616 6700                       		beq.s	locret_4272
00004618 7000                       		moveq	#0,d0
0000461A 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000461E D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004622 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004626 EF58                       		rol.w	#7,d0
00004628 0240 0003                  		andi.w	#3,d0
0000462C 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004630 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004634                            
00004634                            locret_4272:
00004634 4E75                       		rts	
00004636                            ; End of function ChangeRingFrame
00004636                            
00004636                            ; ---------------------------------------------------------------------------
00004636                            ; End-of-act signpost pattern loading subroutine
00004636                            ; ---------------------------------------------------------------------------
00004636                            
00004636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004636                            
00004636                            
00004636                            SignpostArtLoad:			; XREF: Level
00004636 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000463A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000463E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004644 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004646 3038 F700                  		move.w	($FFFFF700).w,d0
0000464A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000464E 0441 0100                  		subi.w	#$100,d1
00004652 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004654 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004656 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000465A 6700                       		beq.s	Signpost_Exit
0000465C B278 F728                  		cmp.w	($FFFFF728).w,d1
00004660 6700                       		beq.s	Signpost_Exit
00004662 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004666 7012                       		moveq	#$12,d0
00004668 6000 D16C                  		bra.w	LoadPLC2	; load signpost	patterns
0000466C                            ; ===========================================================================
0000466C                            
0000466C                            Signpost_Exit:
0000466C 4E75                       		rts	
0000466E                            ; End of function SignpostArtLoad
0000466E                            
0000466E                            ; ===========================================================================
0000466E                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000046EE                            Demo_MZ:	incbin	demodata\i_mz.bin
0000481E                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000489E                            Demo_SS:	incbin	demodata\i_ss.bin
0000499E                            ; ===========================================================================
0000499E                            
0000499E                            ; ---------------------------------------------------------------------------
0000499E                            ; Special Stage
0000499E                            ; ---------------------------------------------------------------------------
0000499E                            
0000499E                            SpecialStage:				; XREF: GameModeArray
0000499E 303C 00CA                  		move.w	#$CA,d0
000049A2 6100 CC1C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000049A6 6100 D7BE                  		bsr.w	Pal_MakeFlash
000049AA 46FC 2700                  		move	#$2700,sr
000049AE 4DF9 00C0 0004             		lea	($C00004).l,a6
000049B4 3CBC 8B03                  		move.w	#$8B03,(a6)
000049B8 3CBC 8004                  		move.w	#$8004,(a6)
000049BC 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000049C2 3CBC 9011                  		move.w	#$9011,(a6)
000049C6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000049CA 0200 00BF                  		andi.b	#$BF,d0
000049CE 33C0 00C0 0004             		move.w	d0,($C00004).l
000049D4 6100 CB12                  		bsr.w	ClearScreen
000049D8 46FC 2300                  		move	#$2300,sr
000049DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000049E2 3ABC 8F01                  		move.w	#$8F01,(a5)
000049E6 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000049EC 3ABC 9780                  		move.w	#$9780,(a5)
000049F0 2ABC 5000 0081             		move.l	#$50000081,(a5)
000049F6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000049FE                            
000049FE                            loc_463C:
000049FE 3215                       		move.w	(a5),d1
00004A00 0801 0001                  		btst	#1,d1
00004A04 66F8                       		bne.s	loc_463C
00004A06 3ABC 8F02                  		move.w	#$8F02,(a5)
00004A0A 6100 0000                  		bsr.w	SS_BGLoad
00004A0E 7014                       		moveq	#$14,d0
00004A10 6100 CEFE                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004A14 43F8 D000                  		lea	($FFFFD000).w,a1
00004A18 7000                       		moveq	#0,d0
00004A1A 323C 07FF                  		move.w	#$7FF,d1
00004A1E                            
00004A1E                            SS_ClrObjRam:
00004A1E 22C0                       		move.l	d0,(a1)+
00004A20 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004A24                            
00004A24 43F8 F700                  		lea	($FFFFF700).w,a1
00004A28 7000                       		moveq	#0,d0
00004A2A 323C 003F                  		move.w	#$3F,d1
00004A2E                            
00004A2E                            SS_ClrRam:
00004A2E 22C0                       		move.l	d0,(a1)+
00004A30 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004A34                            
00004A34 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004A38 7000                       		moveq	#0,d0
00004A3A 323C 0027                  		move.w	#$27,d1
00004A3E                            
00004A3E                            SS_ClrRam2:
00004A3E 22C0                       		move.l	d0,(a1)+
00004A40 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004A44                            
00004A44 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004A48 7000                       		moveq	#0,d0
00004A4A 323C 007F                  		move.w	#$7F,d1
00004A4E                            
00004A4E                            SS_ClrNemRam:
00004A4E 22C0                       		move.l	d0,(a1)+
00004A50 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004A54                            
00004A54 4238 F64E                  		clr.b	($FFFFF64E).w
00004A58 4278 FE02                  		clr.w	($FFFFFE02).w
00004A5C 700A                       		moveq	#$A,d0
00004A5E 6100 D886                  		bsr.w	PalLoad1	; load special stage pallet
00004A62 4EB9 0000 0000             		jsr	SS_Load
00004A68 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004A70 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004A78 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A7E 6100 0000                  		bsr.w	PalCycle_SS
00004A82 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A86 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A8C 303C 0089                  		move.w	#$89,d0
00004A90 6100 CB28                  		bsr.w	PlaySound	; play special stage BG	music
00004A94 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A9A 43F9 0000 444A             		lea	(Demo_Index).l,a1
00004AA0 7006                       		moveq	#6,d0
00004AA2 E548                       		lsl.w	#2,d0
00004AA4 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004AAE 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AB2 4278 FE20                  		clr.w	($FFFFFE20).w
00004AB6 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004ABA 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004AC0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004AC6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004ACA 6700                       		beq.s	SS_NoDebug	; if not, branch
00004ACC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004AD2 6700                       		beq.s	SS_NoDebug	; if not, branch
00004AD4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004ADA                            
00004ADA                            SS_NoDebug:
00004ADA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004ADE 0000 0040                  		ori.b	#$40,d0
00004AE2 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AE8 6100 D5D0                  		bsr.w	Pal_MakeWhite
00004AEC                            
00004AEC                            ; ---------------------------------------------------------------------------
00004AEC                            ; Main Special Stage loop
00004AEC                            ; ---------------------------------------------------------------------------
00004AEC                            
00004AEC                            SS_MainLoop:
00004AEC 6100 CADE                  		bsr.w	PauseGame
00004AF0 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004AF6 6100 E13A                  		bsr.w	DelayProgram
00004AFA 6100 F89E                  		bsr.w	MoveSonicInDemo
00004AFE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B04 4EB9 0000 0000             		jsr	ObjectsLoad
00004B0A 4EB9 0000 0000             		jsr	BuildSprites
00004B10 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B16 6100 0000                  		bsr.w	SS_BGAnimate
00004B1A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B1E 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004B20 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004B24 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004B28                            
00004B28                            SS_ChkEnd:
00004B28 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004B2E 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004B32                            
00004B32 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B36 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004B3A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004B40 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004B46 6500                       		bcs.s	SS_End		; if not, branch
00004B48 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004B4C                            
00004B4C                            SS_End:
00004B4C 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004B52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004B58 4278 F794                  		clr.w	($FFFFF794).w
00004B5C                            
00004B5C                            SS_EndLoop:
00004B5C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004B62 6100 E0CE                  		bsr.w	DelayProgram
00004B66 6100 F832                  		bsr.w	MoveSonicInDemo
00004B6A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B70 4EB9 0000 0000             		jsr	ObjectsLoad
00004B76 4EB9 0000 0000             		jsr	BuildSprites
00004B7C 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B82 6100 0000                  		bsr.w	SS_BGAnimate
00004B86 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B8A 6A00                       		bpl.s	loc_47D4
00004B8C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B92 6100 D5F2                  		bsr.w	Pal_ToWhite
00004B96                            
00004B96                            loc_47D4:
00004B96 4A78 F614                  		tst.w	($FFFFF614).w
00004B9A 66C0                       		bne.s	SS_EndLoop
00004B9C                            
00004B9C 46FC 2700                  		move	#$2700,sr
00004BA0 4DF9 00C0 0004             		lea	($C00004).l,a6
00004BA6 3CBC 8230                  		move.w	#$8230,(a6)
00004BAA 3CBC 8407                  		move.w	#$8407,(a6)
00004BAE 3CBC 9001                  		move.w	#$9001,(a6)
00004BB2 6100 C934                  		bsr.w	ClearScreen
00004BB6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004BC0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004BC6 6100 CA9C                  		bsr.w	NemDec
00004BCA 4EB9 0000 0000             		jsr	Hud_Base
00004BD0 46FC 2300                  		move	#$2300,sr
00004BD4 7011                       		moveq	#$11,d0
00004BD6 6100 D72A                  		bsr.w	PalLoad2	; load results screen pallet
00004BDA 7000                       		moveq	#0,d0
00004BDC 6100 CBF8                  		bsr.w	LoadPLC2
00004BE0 701B                       		moveq	#$1B,d0
00004BE2 6100 CBC0                  		bsr.w	LoadPLC		; load results screen patterns
00004BE6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004BEC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004BF2 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004BF6 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004BFA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004BFE 303C 008E                  		move.w	#$8E,d0
00004C02 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004C08 43F8 D000                  		lea	($FFFFD000).w,a1
00004C0C 7000                       		moveq	#0,d0
00004C0E 323C 07FF                  		move.w	#$7FF,d1
00004C12                            
00004C12                            SS_EndClrObjRam:
00004C12 22C0                       		move.l	d0,(a1)+
00004C14 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004C18                            
00004C18 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004C1E                            
00004C1E                            SS_NormalExit:
00004C1E 6100 C9AC                  		bsr.w	PauseGame
00004C22 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004C28 6100 E008                  		bsr.w	DelayProgram
00004C2C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C32 4EB9 0000 0000             		jsr	BuildSprites
00004C38 6100 CBD6                  		bsr.w	RunPLC_RAM
00004C3C 4A78 FE02                  		tst.w	($FFFFFE02).w
00004C40 67DC                       		beq.s	SS_NormalExit
00004C42 4AB8 F680                  		tst.l	($FFFFF680).w
00004C46 66D6                       		bne.s	SS_NormalExit
00004C48 303C 00CA                  		move.w	#$CA,d0
00004C4C 6100 C972                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004C50 6100 D514                  		bsr.w	Pal_MakeFlash
00004C54 4E75                       		rts	
00004C56                            ; ===========================================================================
00004C56                            
00004C56                            SS_ToSegaScreen:
00004C56 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004C5C 4E75                       		rts
00004C5E                            
00004C5E                            ; ---------------------------------------------------------------------------
00004C5E                            ; Special stage	background loading subroutine
00004C5E                            ; ---------------------------------------------------------------------------
00004C5E                            
00004C5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C5E                            
00004C5E                            
00004C5E                            SS_BGLoad:				; XREF: SpecialStage
00004C5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C64 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004C6A 303C 4051                  		move.w	#$4051,d0
00004C6E 6100 CCD2                  		bsr.w	EniDec
00004C72 263C 5000 0001             		move.l	#$50000001,d3
00004C78 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C7E 7E06                       		moveq	#6,d7
00004C80                            
00004C80                            loc_48BE:
00004C80 2003                       		move.l	d3,d0
00004C82 7C03                       		moveq	#3,d6
00004C84 7800                       		moveq	#0,d4
00004C86 0C47 0003                  		cmpi.w	#3,d7
00004C8A 6400                       		bcc.s	loc_48CC
00004C8C 7801                       		moveq	#1,d4
00004C8E                            
00004C8E                            loc_48CC:
00004C8E 7A07                       		moveq	#7,d5
00004C90                            
00004C90                            loc_48CE:
00004C90 224A                       		movea.l	a2,a1
00004C92 0A04 0001                  		eori.b	#1,d4
00004C96 6600                       		bne.s	loc_48E2
00004C98 0C47 0006                  		cmpi.w	#6,d7
00004C9C 6600                       		bne.s	loc_48F2
00004C9E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CA4                            
00004CA4                            loc_48E2:
00004CA4 48E7 F800                  		movem.l	d0-d4,-(sp)
00004CA8 7207                       		moveq	#7,d1
00004CAA 7407                       		moveq	#7,d2
00004CAC 6100 C996                  		bsr.w	ShowVDPGraphics
00004CB0 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004CB4                            
00004CB4                            loc_48F2:
00004CB4 0680 0010 0000             		addi.l	#$100000,d0
00004CBA 51CD FFD4                  		dbf	d5,loc_48CE
00004CBE 0680 0380 0000             		addi.l	#$3800000,d0
00004CC4 0A04 0001                  		eori.b	#1,d4
00004CC8 51CE FFC4                  		dbf	d6,loc_48CC
00004CCC 0683 1000 0000             		addi.l	#$10000000,d3
00004CD2 6A00                       		bpl.s	loc_491C
00004CD4 4843                       		swap	d3
00004CD6 0683 0000 C000             		addi.l	#$C000,d3
00004CDC 4843                       		swap	d3
00004CDE                            
00004CDE                            loc_491C:
00004CDE D4FC 0080                  		adda.w	#$80,a2
00004CE2 51CF FF9C                  		dbf	d7,loc_48BE
00004CE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CEC 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004CF2 303C 4000                  		move.w	#$4000,d0
00004CF6 6100 CC4A                  		bsr.w	EniDec
00004CFA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D00 203C 4000 0003             		move.l	#$40000003,d0
00004D06 723F                       		moveq	#$3F,d1
00004D08 741F                       		moveq	#$1F,d2
00004D0A 6100 C938                  		bsr.w	ShowVDPGraphics
00004D0E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D14 203C 5000 0003             		move.l	#$50000003,d0
00004D1A 723F                       		moveq	#$3F,d1
00004D1C 743F                       		moveq	#$3F,d2
00004D1E 6100 C924                  		bsr.w	ShowVDPGraphics
00004D22 4E75                       		rts	
00004D24                            ; End of function SS_BGLoad
00004D24                            
00004D24                            ; ---------------------------------------------------------------------------
00004D24                            ; Pallet cycling routine - special stage
00004D24                            ; ---------------------------------------------------------------------------
00004D24                            
00004D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D24                            
00004D24                            
00004D24                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004D24 4A78 F63A                  		tst.w	($FFFFF63A).w
00004D28 6600                       		bne.s	locret_49E6
00004D2A 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004D2E 6A00                       		bpl.s	locret_49E6
00004D30 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D36 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004D3A 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004D3E 0240 001F                  		andi.w	#$1F,d0
00004D42 E548                       		lsl.w	#2,d0
00004D44 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004D4A D0C0                       		adda.w	d0,a0
00004D4C 1018                       		move.b	(a0)+,d0
00004D4E 6A00                       		bpl.s	loc_4992
00004D50 303C 01FF                  		move.w	#$1FF,d0
00004D54                            
00004D54                            loc_4992:
00004D54 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004D58 7000                       		moveq	#0,d0
00004D5A 1018                       		move.b	(a0)+,d0
00004D5C 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004D60 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004D66 43F1 0000                  		lea	(a1,d0.w),a1
00004D6A 303C 8200                  		move.w	#-$7E00,d0
00004D6E 1019                       		move.b	(a1)+,d0
00004D70 3C80                       		move.w	d0,(a6)
00004D72 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004D76 303C 8400                  		move.w	#-$7C00,d0
00004D7A 1018                       		move.b	(a0)+,d0
00004D7C 3C80                       		move.w	d0,(a6)
00004D7E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D88 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D90 7000                       		moveq	#0,d0
00004D92 1018                       		move.b	(a0)+,d0
00004D94 6B00                       		bmi.s	loc_49E8
00004D96 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D9C D2C0                       		adda.w	d0,a1
00004D9E 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004DA2 24D9                       		move.l	(a1)+,(a2)+
00004DA4 24D9                       		move.l	(a1)+,(a2)+
00004DA6 24D9                       		move.l	(a1)+,(a2)+
00004DA8                            
00004DA8                            locret_49E6:
00004DA8 4E75                       		rts	
00004DAA                            ; ===========================================================================
00004DAA                            
00004DAA                            loc_49E8:				; XREF: PalCycle_SS
00004DAA 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004DAE 0C40 008A                  		cmpi.w	#$8A,d0
00004DB2 6500                       		bcs.s	loc_49F4
00004DB4 5241                       		addq.w	#1,d1
00004DB6                            
00004DB6                            loc_49F4:
00004DB6 C2FC 002A                  		mulu.w	#$2A,d1
00004DBA 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004DC0 D2C1                       		adda.w	d1,a1
00004DC2 0240 007F                  		andi.w	#$7F,d0
00004DC6 0880 0000                  		bclr	#0,d0
00004DCA 6700                       		beq.s	loc_4A18
00004DCC 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004DD0 24D1                       		move.l	(a1),(a2)+
00004DD2 24E9 0004                  		move.l	4(a1),(a2)+
00004DD6 24E9 0008                  		move.l	8(a1),(a2)+
00004DDA                            
00004DDA                            loc_4A18:
00004DDA D2FC 000C                  		adda.w	#$C,a1
00004DDE 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004DE2 0C40 000A                  		cmpi.w	#$A,d0
00004DE6 6500                       		bcs.s	loc_4A2E
00004DE8 0440 000A                  		subi.w	#$A,d0
00004DEC 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004DF0                            
00004DF0                            loc_4A2E:
00004DF0 3200                       		move.w	d0,d1
00004DF2 D040                       		add.w	d0,d0
00004DF4 D041                       		add.w	d1,d0
00004DF6 D2C0                       		adda.w	d0,a1
00004DF8 24D9                       		move.l	(a1)+,(a2)+
00004DFA 34D9                       		move.w	(a1)+,(a2)+
00004DFC 4E75                       		rts	
00004DFE                            ; End of function PalCycle_SS
00004DFE                            
00004DFE                            ; ===========================================================================
00004DFE 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004E0E                            					; XREF: PalCycle_SS
00004E0E 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004E1E 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004E2E FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004E3E 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004E4E 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004E5E 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004E6E FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E7E                            		even
00004E7E 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E8C                            					; XREF: PalCycle_SS
00004E8C                            		even
00004E8C                            
00004E8C                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004ED4                            		even
00004ED4                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004FA6                            		even
00004FA6                            
00004FA6                            ; ---------------------------------------------------------------------------
00004FA6                            ; Subroutine to	make the special stage background animated
00004FA6                            ; ---------------------------------------------------------------------------
00004FA6                            
00004FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA6                            
00004FA6                            
00004FA6                            SS_BGAnimate:				; XREF: SpecialStage
00004FA6 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004FAA 6600                       		bne.s	loc_4BF6
00004FAC 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004FB2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FB8                            
00004FB8                            loc_4BF6:
00004FB8 0C40 0008                  		cmpi.w	#8,d0
00004FBC 6400                       		bcc.s	loc_4C4E
00004FBE 0C40 0006                  		cmpi.w	#6,d0
00004FC2 6600                       		bne.s	loc_4C10
00004FC4 5278 F718                  		addq.w	#1,($FFFFF718).w
00004FC8 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004FCC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FD2                            
00004FD2                            loc_4C10:
00004FD2 7000                       		moveq	#0,d0
00004FD4 3038 F708                  		move.w	($FFFFF708).w,d0
00004FD8 4440                       		neg.w	d0
00004FDA 4840                       		swap	d0
00004FDC 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004FE2 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004FE6 7609                       		moveq	#9,d3
00004FE8                            
00004FE8                            loc_4C26:
00004FE8 302B 0002                  		move.w	2(a3),d0
00004FEC 6100 DC76                  		bsr.w	CalcSine
00004FF0 7400                       		moveq	#0,d2
00004FF2 1419                       		move.b	(a1)+,d2
00004FF4 C1C2                       		muls.w	d2,d0
00004FF6 E080                       		asr.l	#8,d0
00004FF8 36C0                       		move.w	d0,(a3)+
00004FFA 1419                       		move.b	(a1)+,d2
00004FFC 4882                       		ext.w	d2
00004FFE D55B                       		add.w	d2,(a3)+
00005000 51CB FFE6                  		dbf	d3,loc_4C26
00005004 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005008 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000500E 6000                       		bra.s	loc_4C7E
00005010                            ; ===========================================================================
00005010                            
00005010                            loc_4C4E:				; XREF: SS_BGAnimate
00005010 0C40 000C                  		cmpi.w	#$C,d0
00005014 6600                       		bne.s	loc_4C74
00005016 5378 F718                  		subq.w	#1,($FFFFF718).w
0000501A 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000501E 243C 0001 8000             		move.l	#$18000,d2
00005024 7206                       		moveq	#6,d1
00005026                            
00005026                            loc_4C64:
00005026 2013                       		move.l	(a3),d0
00005028 9082                       		sub.l	d2,d0
0000502A 26C0                       		move.l	d0,(a3)+
0000502C 0482 0000 2000             		subi.l	#$2000,d2
00005032 51C9 FFF2                  		dbf	d1,loc_4C64
00005036                            
00005036                            loc_4C74:
00005036 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000503A 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005040                            
00005040                            loc_4C7E:
00005040 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005044 3038 F718                  		move.w	($FFFFF718).w,d0
00005048 4440                       		neg.w	d0
0000504A 4840                       		swap	d0
0000504C 7600                       		moveq	#0,d3
0000504E 161A                       		move.b	(a2)+,d3
00005050 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005054 4442                       		neg.w	d2
00005056 0242 00FF                  		andi.w	#$FF,d2
0000505A E54A                       		lsl.w	#2,d2
0000505C                            
0000505C                            loc_4C9A:
0000505C 301B                       		move.w	(a3)+,d0
0000505E 544B                       		addq.w	#2,a3
00005060 7200                       		moveq	#0,d1
00005062 121A                       		move.b	(a2)+,d1
00005064 5341                       		subq.w	#1,d1
00005066                            
00005066                            loc_4CA4:
00005066 2380 2000                  		move.l	d0,(a1,d2.w)
0000506A 5842                       		addq.w	#4,d2
0000506C 0242 03FC                  		andi.w	#$3FC,d2
00005070 51C9 FFF4                  		dbf	d1,loc_4CA4
00005074 51CB FFE6                  		dbf	d3,loc_4C9A
00005078 4E75                       		rts	
0000507A                            ; End of function SS_BGAnimate
0000507A                            
0000507A                            ; ===========================================================================
0000507A 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005086                            		even
00005086 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000508E                            		even
0000508E 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000050A2                            		even
000050A2                            					; XREF: SS_BGAnimate
000050A2                            ; ===========================================================================
000050A2                            
000050A2                            ; ---------------------------------------------------------------------------
000050A2                            ; Continue screen
000050A2                            ; ---------------------------------------------------------------------------
000050A2                            
000050A2                            ContinueScreen:				; XREF: GameModeArray
000050A2 6100 CF98                  		bsr.w	Pal_FadeFrom
000050A6 46FC 2700                  		move	#$2700,sr
000050AA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050AE 0200 00BF                  		andi.b	#$BF,d0
000050B2 33C0 00C0 0004             		move.w	d0,($C00004).l
000050B8 4DF9 00C0 0004             		lea	($C00004).l,a6
000050BE 3CBC 8004                  		move.w	#$8004,(a6)
000050C2 3CBC 8700                  		move.w	#$8700,(a6)
000050C6 6100 C420                  		bsr.w	ClearScreen
000050CA 43F8 D000                  		lea	($FFFFD000).w,a1
000050CE 7000                       		moveq	#0,d0
000050D0 323C 07FF                  		move.w	#$7FF,d1
000050D4                            
000050D4                            Cont_ClrObjRam:
000050D4 22C0                       		move.l	d0,(a1)+
000050D6 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000050DA                            
000050DA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000050E4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000050EA 6100 C578                  		bsr.w	NemDec
000050EE 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000050F8 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000050FE 6100 C564                  		bsr.w	NemDec
00005102 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000510C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005112 6100 C550                  		bsr.w	NemDec
00005116 720A                       		moveq	#10,d1
00005118 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000511E 7012                       		moveq	#$12,d0
00005120 6100 D1C4                  		bsr.w	PalLoad1	; load continue	screen pallet
00005124 103C 0090                  		move.b	#$90,d0
00005128 6100 C490                  		bsr.w	PlaySound	; play continue	music
0000512C 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005132 42B8 F700                  		clr.l	($FFFFF700).w
00005136 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000513E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005144 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000514A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005150 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005156 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000515C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005162 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005168 4EB9 0000 0000             		jsr	ObjectsLoad
0000516E 4EB9 0000 0000             		jsr	BuildSprites
00005174 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005178 0000 0040                  		ori.b	#$40,d0
0000517C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005182 6100 CE12                  		bsr.w	Pal_FadeTo
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Continue screen main loop
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Cont_MainLoop:
00005186 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000518C 6100 DAA4                  		bsr.w	DelayProgram
00005190 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005196 6400                       		bcc.s	loc_4DF2
00005198 46FC 2700                  		move	#$2700,sr
0000519C 3238 F614                  		move.w	($FFFFF614).w,d1
000051A0 82FC 003C                  		divu.w	#$3C,d1
000051A4 0281 0000 000F             		andi.l	#$F,d1
000051AA 4EB9 0000 0000             		jsr	ContScrCounter
000051B0 46FC 2300                  		move	#$2300,sr
000051B4                            
000051B4                            loc_4DF2:
000051B4 4EB9 0000 0000             		jsr	ObjectsLoad
000051BA 4EB9 0000 0000             		jsr	BuildSprites
000051C0 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000051C6 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000051C8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000051CE 64B6                       		bcc.s	Cont_MainLoop
000051D0 4A78 F614                  		tst.w	($FFFFF614).w
000051D4 6600 FFB0                  		bne.w	Cont_MainLoop
000051D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000051DE 4E75                       		rts	
000051E0                            ; ===========================================================================
000051E0                            
000051E0                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000051E0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051E6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000051EC 7000                       		moveq	#0,d0
000051EE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000051F2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000051F6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000051FA 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000051FE 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005202 4E75                       		rts	
00005204                            ; ===========================================================================
00005204                            
00005204                            ; ---------------------------------------------------------------------------
00005204                            ; Object 80 - Continue screen elements
00005204                            ; ---------------------------------------------------------------------------
00005204                            
00005204                            Obj80:					; XREF: Obj_Index
00005204 7000                       		moveq	#0,d0
00005206 1028 0024                  		move.b	$24(a0),d0
0000520A 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000520E 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005212                            ; ===========================================================================
00005212 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005214 0000                       		dc.w Obj80_Display-Obj80_Index
00005216 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005218 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000521A                            ; ===========================================================================
0000521A                            
0000521A                            Obj80_Main:				; XREF: Obj80_Index
0000521A 5428 0024                  		addq.b	#2,$24(a0)
0000521E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005226 317C 8500 0002             		move.w	#$8500,2(a0)
0000522C 117C 0000 0001             		move.b	#0,1(a0)
00005232 117C 003C 0019             		move.b	#$3C,$19(a0)
00005238 317C 0120 0008             		move.w	#$120,8(a0)
0000523E 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005244 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000524A                            
0000524A                            Obj80_Display:				; XREF: Obj80_Index
0000524A 4EF9 0000 0000             		jmp	DisplaySprite
00005250                            ; ===========================================================================
00005250                            Obj80_MiniSonicPos:
00005250 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005262 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000526E                            ; ===========================================================================
0000526E                            
0000526E                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000526E 2248                       		movea.l	a0,a1
00005270 45F9 0000 5250             		lea	(Obj80_MiniSonicPos).l,a2
00005276 7200                       		moveq	#0,d1
00005278 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000527C 5501                       		subq.b	#2,d1
0000527E 6400                       		bcc.s	loc_4EC4
00005280 4EF9 0000 0000             		jmp	DeleteObject
00005286                            ; ===========================================================================
00005286                            
00005286                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005286 7601                       		moveq	#1,d3
00005288 0C01 000E                  		cmpi.b	#$E,d1
0000528C 6500                       		bcs.s	loc_4ED0
0000528E 7600                       		moveq	#0,d3
00005290 720E                       		moveq	#$E,d1
00005292                            
00005292                            loc_4ED0:
00005292 1401                       		move.b	d1,d2
00005294 0202 0001                  		andi.b	#1,d2
00005298                            
00005298                            Obj80_MiniSonLoop:
00005298 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000529C 335A 0008                  		move.w	(a2)+,8(a1)
000052A0 4A02                       		tst.b	d2
000052A2 6700                       		beq.s	loc_4EEA
000052A4 0469 000A 0008             		subi.w	#$A,8(a1)
000052AA                            
000052AA                            loc_4EEA:
000052AA 337C 00D0 000A             		move.w	#$D0,$A(a1)
000052B0 137C 0006 001A             		move.b	#6,$1A(a1)
000052B6 137C 0006 0024             		move.b	#6,$24(a1)
000052BC 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000052C4 337C 8551 0002             		move.w	#$8551,2(a1)
000052CA 137C 0000 0001             		move.b	#0,1(a1)
000052D0 43E9 0040                  		lea	$40(a1),a1
000052D4 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000052D8 43E9 FFC0                  		lea	-$40(a1),a1
000052DC 1343 0028                  		move.b	d3,$28(a1)
000052E0                            
000052E0                            Obj80_ChkType:				; XREF: Obj80_Index
000052E0 4A28 0028                  		tst.b	$28(a0)
000052E4 6700                       		beq.s	loc_4F40
000052E6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052EC 6500                       		bcs.s	loc_4F40
000052EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000052F2 0200 0001                  		andi.b	#1,d0
000052F6 6600                       		bne.s	loc_4F40
000052F8 4A78 D010                  		tst.w	($FFFFD010).w
000052FC 6600                       		bne.s	Obj80_Delete
000052FE 4E75                       		rts	
00005300                            ; ===========================================================================
00005300                            
00005300                            loc_4F40:				; XREF: Obj80_ChkType
00005300 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005304 0200 000F                  		andi.b	#$F,d0
00005308 6600                       		bne.s	Obj80_Display2
0000530A 0868 0000 001A             		bchg	#0,$1A(a0)
00005310                            
00005310                            Obj80_Display2:
00005310 4EF9 0000 0000             		jmp	DisplaySprite
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj80_Delete:				; XREF: Obj80_ChkType
00005316 4EF9 0000 0000             		jmp	DeleteObject
0000531C                            ; ===========================================================================
0000531C                            
0000531C                            ; ---------------------------------------------------------------------------
0000531C                            ; Object 81 - Sonic on the continue screen
0000531C                            ; ---------------------------------------------------------------------------
0000531C                            
0000531C                            Obj81:					; XREF: Obj_Index
0000531C 7000                       		moveq	#0,d0
0000531E 1028 0024                  		move.b	$24(a0),d0
00005322 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005326 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000532A 4EF9 0000 0000             		jmp	DisplaySprite
00005330                            ; ===========================================================================
00005330 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005332 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005334 0000                       		dc.w Obj81_Animate-Obj81_Index
00005336 0000                       		dc.w Obj81_Run-Obj81_Index
00005338                            ; ===========================================================================
00005338                            
00005338                            Obj81_Main:				; XREF: Obj81_Index
00005338 5428 0024                  		addq.b	#2,$24(a0)
0000533C 317C 00A0 0008             		move.w	#$A0,8(a0)
00005342 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005348 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005350 317C 0780 0002             		move.w	#$780,2(a0)
00005356 117C 0004 0001             		move.b	#4,1(a0)
0000535C 117C 0002 0018             		move.b	#2,$18(a0)
00005362 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005368 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000536E                            
0000536E                            Obj81_ChkLand:				; XREF: Obj81_Index
0000536E 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005374 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005376 5428 0024                  		addq.b	#2,$24(a0)
0000537A 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000537E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005386 317C 8500 0002             		move.w	#$8500,2(a0)
0000538C 117C 0000 001C             		move.b	#0,$1C(a0)
00005392 6000                       		bra.s	Obj81_Animate
00005394                            ; ===========================================================================
00005394                            
00005394                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005394 4EB9 0000 0000             		jsr	SpeedToPos
0000539A 4EB9 0000 0000             		jsr	Sonic_Animate
000053A0 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000053A6                            ; ===========================================================================
000053A6                            
000053A6                            Obj81_Animate:				; XREF: Obj81_Index
000053A6 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000053AA 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000053AC 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000053B2 4EF9 0000 0000             		jmp	AnimateSprite
000053B8                            ; ===========================================================================
000053B8                            
000053B8                            Obj81_GetUp:				; XREF: Obj81_Animate
000053B8 5428 0024                  		addq.b	#2,$24(a0)
000053BC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000053C4 317C 0780 0002             		move.w	#$780,2(a0)
000053CA 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000053D0 4268 0014                  		clr.w	$14(a0)
000053D4 5168 000C                  		subq.w	#8,$C(a0)
000053D8 103C 00E0                  		move.b	#$E0,d0
000053DC 6100 C1E2                  		bsr.w	PlaySound_Special ; fade out music
000053E0                            
000053E0                            Obj81_Run:				; XREF: Obj81_Index
000053E0 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000053E6 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000053E8 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000053EE 6000                       		bra.s	Obj81_ShowRun
000053F0                            ; ===========================================================================
000053F0                            
000053F0                            Obj81_AddSpeed:				; XREF: Obj81_Run
000053F0 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000053F6                            
000053F6                            Obj81_ShowRun:				; XREF: Obj81_Run
000053F6 4EB9 0000 0000             		jsr	SpeedToPos
000053FC 4EB9 0000 0000             		jsr	Sonic_Animate
00005402 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005408                            ; ===========================================================================
00005408                            Ani_obj81:
00005408                            	include "_anim\obj81.asm"
00005408                            ; ---------------------------------------------------------------------------
00005408                            ; Animation script - Sonic on the continue screen
00005408                            ; ---------------------------------------------------------------------------
00005408 0000                       		dc.w byte_504A-Ani_obj81
0000540A 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005416 00                         		even
00005416 00                         		even
00005416                            
00005416                            ; ---------------------------------------------------------------------------
00005416                            ; Sprite mappings - Continue screen
00005416                            ; ---------------------------------------------------------------------------
00005416                            Map_obj80:
00005416                            	include "_maps\obj80.asm"
00005416                            ; ---------------------------------------------------------------------------
00005416                            ; Sprite mappings - Continue screen
00005416                            ; ---------------------------------------------------------------------------
00005416 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000541A 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000541E 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005422 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005426 0B                         byte_5066:	dc.b $B
00005427 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000542C F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005431 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005436 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000543B F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005440 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005445 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000544A F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000544F 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005454 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005459 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000545E 03                         byte_509E:	dc.b 3
0000545F 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005464 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005469 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000546E 03                         byte_50AE:	dc.b 3
0000546F 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005474 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005479 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000547E 03                         byte_50BE:	dc.b 3
0000547F 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005484 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005489 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000548E 02                         byte_50CE:	dc.b 2
0000548F 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005494 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005499 01                         byte_50D9:	dc.b 1
0000549A 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000549F 01                         byte_50DF:	dc.b 1
000054A0 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000054A6 00                         		even
000054A6 00                         		even
000054A6                            
000054A6                            ; ===========================================================================
000054A6                            ; ---------------------------------------------------------------------------
000054A6                            ; Ending sequence in Green Hill	Zone
000054A6                            ; ---------------------------------------------------------------------------
000054A6                            
000054A6                            EndingSequence:				; XREF: GameModeArray
000054A6 103C 00E4                  		move.b	#$E4,d0
000054AA 6100 C114                  		bsr.w	PlaySound_Special ; stop music
000054AE 6100 CB8C                  		bsr.w	Pal_FadeFrom
000054B2 43F8 D000                  		lea	($FFFFD000).w,a1
000054B6 7000                       		moveq	#0,d0
000054B8 323C 07FF                  		move.w	#$7FF,d1
000054BC                            
000054BC                            End_ClrObjRam:
000054BC 22C0                       		move.l	d0,(a1)+
000054BE 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000054C2                            
000054C2 43F8 F628                  		lea	($FFFFF628).w,a1
000054C6 7000                       		moveq	#0,d0
000054C8 323C 0015                  		move.w	#$15,d1
000054CC                            
000054CC                            End_ClrRam:
000054CC 22C0                       		move.l	d0,(a1)+
000054CE 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000054D2                            
000054D2 43F8 F700                  		lea	($FFFFF700).w,a1
000054D6 7000                       		moveq	#0,d0
000054D8 323C 003F                  		move.w	#$3F,d1
000054DC                            
000054DC                            End_ClrRam2:
000054DC 22C0                       		move.l	d0,(a1)+
000054DE 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000054E2                            
000054E2 43F8 FE60                  		lea	($FFFFFE60).w,a1
000054E6 7000                       		moveq	#0,d0
000054E8 323C 0047                  		move.w	#$47,d1
000054EC                            
000054EC                            End_ClrRam3:
000054EC 22C0                       		move.l	d0,(a1)+
000054EE 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000054F2                            
000054F2 46FC 2700                  		move	#$2700,sr
000054F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000054FA 0200 00BF                  		andi.b	#$BF,d0
000054FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005504 6100 BFE2                  		bsr.w	ClearScreen
00005508 4DF9 00C0 0004             		lea	($C00004).l,a6
0000550E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005512 3CBC 8230                  		move.w	#$8230,(a6)
00005516 3CBC 8407                  		move.w	#$8407,(a6)
0000551A 3CBC 857C                  		move.w	#$857C,(a6)
0000551E 3CBC 9001                  		move.w	#$9001,(a6)
00005522 3CBC 8004                  		move.w	#$8004,(a6)
00005526 3CBC 8720                  		move.w	#$8720,(a6)
0000552A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005530 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005534 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000553A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005540 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005546 6700                       		beq.s	End_LoadData	; if yes, branch
00005548 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000554E                            
0000554E                            End_LoadData:
0000554E 701C                       		moveq	#$1C,d0
00005550 6100 C3BE                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005554 4EB9 0000 0000             		jsr	Hud_Base
0000555A 6100 0000                  		bsr.w	LevelSizeLoad
0000555E 6100 0000                  		bsr.w	DeformBgLayer
00005562 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005568 6100 0000                  		bsr.w	MainLoadBlockLoad
0000556C 6100 0000                  		bsr.w	LoadTilesFromStart
00005570 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005578 46FC 2300                  		move	#$2300,sr
0000557C 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005582 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005586 6100 C538                  		bsr.w	KosDec
0000558A 7003                       		moveq	#3,d0
0000558C 6100 CD58                  		bsr.w	PalLoad1	; load Sonic's pallet
00005590 303C 008B                  		move.w	#$8B,d0
00005594 6100 C024                  		bsr.w	PlaySound	; play ending sequence music
00005598 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000559E 6700                       		beq.s	End_LoadSonic	; if not, branch
000055A0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000055A6                            
000055A6                            End_LoadSonic:
000055A6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000055AC 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000055B2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000055B8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000055BE 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000055C4 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000055CA 4EB9 0000 0000             		jsr	ObjPosLoad
000055D0 4EB9 0000 0000             		jsr	ObjectsLoad
000055D6 4EB9 0000 0000             		jsr	BuildSprites
000055DC 7000                       		moveq	#0,d0
000055DE 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000055E2 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000055E6 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000055EA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000055EE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000055F2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000055F6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000055FA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000055FE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005602 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005606 6100 EEDA                  		bsr.w	OscillateNumInit
0000560A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005610 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005616 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000561C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005622 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005628 6100 D608                  		bsr.w	DelayProgram
0000562C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005630 0000 0040                  		ori.b	#$40,d0
00005634 33C0 00C0 0004             		move.w	d0,($C00004).l
0000563A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005640 6100 C954                  		bsr.w	Pal_FadeTo
00005644                            
00005644                            ; ---------------------------------------------------------------------------
00005644                            ; Main ending sequence loop
00005644                            ; ---------------------------------------------------------------------------
00005644                            
00005644                            End_MainLoop:
00005644 6100 BF86                  		bsr.w	PauseGame
00005648 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000564E 6100 D5E2                  		bsr.w	DelayProgram
00005652 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005656 6100 0000                  		bsr.w	End_MoveSonic
0000565A 4EB9 0000 0000             		jsr	ObjectsLoad
00005660 6100 0000                  		bsr.w	DeformBgLayer
00005664 4EB9 0000 0000             		jsr	BuildSprites
0000566A 4EB9 0000 0000             		jsr	ObjPosLoad
00005670 6100 C4EE                  		bsr.w	PalCycle_Load
00005674 6100 EEC2                  		bsr.w	OscillateNumDo
00005678 6100 EF4E                  		bsr.w	ChangeRingFrame
0000567C 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005682 6700                       		beq.s	loc_52DA	; if yes, branch
00005684 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000568A 103C 0091                  		move.b	#$91,d0
0000568E 6100 BF30                  		bsr.w	PlaySound_Special ; play credits music
00005692 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005698 4E75                       		rts	
0000569A                            ; ===========================================================================
0000569A                            
0000569A                            loc_52DA:
0000569A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000569E 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000056A2                            
000056A2 4278 FE02                  		clr.w	($FFFFFE02).w
000056A6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056AC 4278 F794                  		clr.w	($FFFFF794).w
000056B0                            
000056B0                            End_AllEmlds:				; XREF: loc_5334
000056B0 6100 BF1A                  		bsr.w	PauseGame
000056B4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056BA 6100 D576                  		bsr.w	DelayProgram
000056BE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000056C2 6100 0000                  		bsr.w	End_MoveSonic
000056C6 4EB9 0000 0000             		jsr	ObjectsLoad
000056CC 6100 0000                  		bsr.w	DeformBgLayer
000056D0 4EB9 0000 0000             		jsr	BuildSprites
000056D6 4EB9 0000 0000             		jsr	ObjPosLoad
000056DC 6100 EE5A                  		bsr.w	OscillateNumDo
000056E0 6100 EEE6                  		bsr.w	ChangeRingFrame
000056E4 5378 F794                  		subq.w	#1,($FFFFF794).w
000056E8 6A00                       		bpl.s	loc_5334
000056EA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000056F0 6100 CA94                  		bsr.w	Pal_ToWhite
000056F4                            
000056F4                            loc_5334:
000056F4 4A78 FE02                  		tst.w	($FFFFFE02).w
000056F8 6700 FFB6                  		beq.w	End_AllEmlds
000056FC 4278 FE02                  		clr.w	($FFFFFE02).w
00005700 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005706 4BF9 00C0 0004             		lea	($C00004).l,a5
0000570C 4DF9 00C0 0000             		lea	($C00000).l,a6
00005712 47F8 F700                  		lea	($FFFFF700).w,a3
00005716 49F8 A400                  		lea	($FFFFA400).w,a4
0000571A 343C 4000                  		move.w	#$4000,d2
0000571E 6100 0000                  		bsr.w	LoadTilesFromStart2
00005722 7013                       		moveq	#$13,d0
00005724 6100 CBC0                  		bsr.w	PalLoad1	; load ending pallet
00005728 6100 C990                  		bsr.w	Pal_MakeWhite
0000572C 6000 FF16                  		bra.w	End_MainLoop
00005730                            
00005730                            ; ---------------------------------------------------------------------------
00005730                            ; Subroutine controlling Sonic on the ending sequence
00005730                            ; ---------------------------------------------------------------------------
00005730                            
00005730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005730                            
00005730                            
00005730                            End_MoveSonic:				; XREF: End_MainLoop
00005730 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005734 6600                       		bne.s	End_MoveSonic2
00005736 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000573C 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000573E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005742 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005748 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000574E 4E75                       		rts	
00005750                            ; ===========================================================================
00005750                            
00005750                            End_MoveSonic2:				; XREF: End_MoveSonic
00005750 5500                       		subq.b	#2,d0
00005752 6600                       		bne.s	End_MoveSonic3
00005754 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000575A 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000575C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005760 7000                       		moveq	#0,d0
00005762 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005766 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000576A 31C0 D014                  		move.w	d0,($FFFFD014).w
0000576E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005774 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000577A 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005780 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005786 4E75                       		rts	
00005788                            ; ===========================================================================
00005788                            
00005788                            End_MoveSonic3:				; XREF: End_MoveSonic
00005788 5500                       		subq.b	#2,d0
0000578A 6600                       		bne.s	End_MoveSonExit
0000578C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005790 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005796 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000579C 4278 D024                  		clr.w	($FFFFD024).w
000057A0                            
000057A0                            End_MoveSonExit:
000057A0 4E75                       		rts	
000057A2                            ; End of function End_MoveSonic
000057A2                            
000057A2                            ; ===========================================================================
000057A2                            ; ---------------------------------------------------------------------------
000057A2                            ; Object 87 - Sonic on ending sequence
000057A2                            ; ---------------------------------------------------------------------------
000057A2                            
000057A2                            Obj87:					; XREF: Obj_Index
000057A2 7000                       		moveq	#0,d0
000057A4 1028 0025                  		move.b	$25(a0),d0
000057A8 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000057AC 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000057B0 4EF9 0000 0000             		jmp	DisplaySprite
000057B6                            ; ===========================================================================
000057B6 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000057BA 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000057BE 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000057C2 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000057C6 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000057CA                            ; ===========================================================================
000057CA                            
000057CA                            Obj87_Main:				; XREF: Obj87_Index
000057CA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057D0 6700                       		beq.s	Obj87_Main2	; if yes, branch
000057D2 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000057D8 317C 00D8 0030             		move.w	#$D8,$30(a0)
000057DE 4E75                       		rts	
000057E0                            ; ===========================================================================
000057E0                            
000057E0                            Obj87_Main2:				; XREF: Obj87_Main
000057E0 5428 0025                  		addq.b	#2,$25(a0)
000057E4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000057EC 317C 03E1 0002             		move.w	#$3E1,2(a0)
000057F2 117C 0004 0001             		move.b	#4,1(a0)
000057F8 4228 0022                  		clr.b	$22(a0)
000057FC 117C 0002 0018             		move.b	#2,$18(a0)
00005802 117C 0000 001A             		move.b	#0,$1A(a0)
00005808 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000580E                            
0000580E                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000580E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005812 6600                       		bne.s	Obj87_Wait
00005814 5428 0025                  		addq.b	#2,$25(a0)
00005818 317C 0001 001C             		move.w	#1,$1C(a0)
0000581E 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005824                            
00005824                            Obj87_Wait:
00005824 4E75                       		rts	
00005826                            ; ===========================================================================
00005826                            
00005826                            Obj87_LookUp:				; XREF: Obj87_Index
00005826 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000582E 6600                       		bne.s	locret_5480
00005830 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005836 317C 005A 0030             		move.w	#$5A,$30(a0)
0000583C 5428 0025                  		addq.b	#2,$25(a0)
00005840                            
00005840                            locret_5480:
00005840 4E75                       		rts	
00005842                            ; ===========================================================================
00005842                            
00005842                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005842 5368 0030                  		subq.w	#1,$30(a0)
00005846 6600                       		bne.s	Obj87_Wait2
00005848 43F8 D400                  		lea	($FFFFD400).w,a1
0000584C 323C 00FF                  		move.w	#$FF,d1
00005850                            
00005850                            Obj87_ClrLoop:
00005850 4299                       		clr.l	(a1)+
00005852 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005856 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000585C 5428 0025                  		addq.b	#2,$25(a0)
00005860 117C 0001 001C             		move.b	#1,$1C(a0)
00005866 317C 003C 0030             		move.w	#$3C,$30(a0)
0000586C                            
0000586C                            Obj87_Wait2:
0000586C 4E75                       		rts	
0000586E                            ; ===========================================================================
0000586E                            
0000586E                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000586E 5368 0030                  		subq.w	#1,$30(a0)
00005872 6600                       		bne.s	Obj87_Wait3
00005874 5428 0025                  		addq.b	#2,$25(a0)
00005878 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000587E 117C 0002 001C             		move.b	#2,$1C(a0)
00005884 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000588A                            
0000588A                            Obj87_Wait3:
0000588A 4E75                       		rts	
0000588C                            ; ===========================================================================
0000588C                            
0000588C                            Obj87_Animate:				; XREF: Obj87_Index
0000588C 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005892 4EF9 0000 0000             		jmp	AnimateSprite
00005898                            ; ===========================================================================
00005898                            
00005898                            Obj87_Leap:				; XREF: Obj87_Index
00005898 5368 0030                  		subq.w	#1,$30(a0)
0000589C 6600                       		bne.s	Obj87_Wait4
0000589E 5428 0025                  		addq.b	#2,$25(a0)
000058A2 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058AA 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058B0 117C 0004 0001             		move.b	#4,1(a0)
000058B6 4228 0022                  		clr.b	$22(a0)
000058BA 117C 0002 0018             		move.b	#2,$18(a0)
000058C0 117C 0005 001A             		move.b	#5,$1A(a0)
000058C6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000058CC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000058D2 60B8                       		bra.s	Obj87_Animate
000058D4                            ; ===========================================================================
000058D4                            
000058D4                            Obj87_Wait4:				; XREF: Obj87_Leap
000058D4 4E75                       		rts	
000058D6                            ; ===========================================================================
000058D6                            Ani_obj87:
000058D6                            	include "_anim\obj87.asm"
000058D6                            ; ---------------------------------------------------------------------------
000058D6                            ; Animation script - Sonic on the ending sequence
000058D6                            ; ---------------------------------------------------------------------------
000058D6 0000                       		dc.w byte_551C-Ani_obj87
000058D8 0000                       		dc.w byte_552A-Ani_obj87
000058DA 0000                       		dc.w byte_5534-Ani_obj87
000058DC 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000058EA 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000058F4 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000058FC                            		even
000058FC                            		even
000058FC                            
000058FC                            ; ===========================================================================
000058FC                            ; ---------------------------------------------------------------------------
000058FC                            ; Object 88 - chaos emeralds on	the ending sequence
000058FC                            ; ---------------------------------------------------------------------------
000058FC                            
000058FC                            Obj88:					; XREF: Obj_Index
000058FC 7000                       		moveq	#0,d0
000058FE 1028 0024                  		move.b	$24(a0),d0
00005902 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005906 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000590A 4EF9 0000 0000             		jmp	DisplaySprite
00005910                            ; ===========================================================================
00005910 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005912 0000                       		dc.w Obj88_Move-Obj88_Index
00005914                            ; ===========================================================================
00005914                            
00005914                            Obj88_Main:				; XREF: Obj88_Index
00005914 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000591A 6700                       		beq.s	Obj88_Main2
0000591C 588F                       		addq.l	#4,sp
0000591E 4E75                       		rts	
00005920                            ; ===========================================================================
00005920                            
00005920                            Obj88_Main2:				; XREF: Obj88_Main
00005920 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005926 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000592C 2248                       		movea.l	a0,a1
0000592E 7600                       		moveq	#0,d3
00005930 7401                       		moveq	#1,d2
00005932 7205                       		moveq	#5,d1
00005934                            
00005934                            Obj88_MainLoop:
00005934 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005938 5429 0024                  		addq.b	#2,$24(a1)
0000593C 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005944 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000594A 137C 0004 0001             		move.b	#4,1(a1)
00005950 137C 0001 0018             		move.b	#1,$18(a1)
00005956 3368 0008 0038             		move.w	8(a0),$38(a1)
0000595C 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005962 1342 001C                  		move.b	d2,$1C(a1)
00005966 1342 001A                  		move.b	d2,$1A(a1)
0000596A 5202                       		addq.b	#1,d2
0000596C 1343 0026                  		move.b	d3,$26(a1)
00005970 0603 002A                  		addi.b	#$2A,d3
00005974 43E9 0040                  		lea	$40(a1),a1
00005978 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000597C                            
0000597C                            Obj88_Move:				; XREF: Obj88_Index
0000597C 3028 003E                  		move.w	$3E(a0),d0
00005980 D168 0026                  		add.w	d0,$26(a0)
00005984 1028 0026                  		move.b	$26(a0),d0
00005988 4EB9 0000 2C64             		jsr	(CalcSine).l
0000598E 7800                       		moveq	#0,d4
00005990 1828 003C                  		move.b	$3C(a0),d4
00005994 C3C4                       		muls.w	d4,d1
00005996 E081                       		asr.l	#8,d1
00005998 C1C4                       		muls.w	d4,d0
0000599A E080                       		asr.l	#8,d0
0000599C D268 0038                  		add.w	$38(a0),d1
000059A0 D068 003A                  		add.w	$3A(a0),d0
000059A4 3141 0008                  		move.w	d1,8(a0)
000059A8 3140 000C                  		move.w	d0,$C(a0)
000059AC 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000059B2 6700                       		beq.s	loc_55FA
000059B4 0668 0020 003C             		addi.w	#$20,$3C(a0)
000059BA                            
000059BA                            loc_55FA:
000059BA 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000059C0 6700                       		beq.s	loc_5608
000059C2 0668 0020 003E             		addi.w	#$20,$3E(a0)
000059C8                            
000059C8                            loc_5608:
000059C8 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000059CE 6700                       		beq.s	locret_5614
000059D0 5368 003A                  		subq.w	#1,$3A(a0)
000059D4                            
000059D4                            locret_5614:
000059D4 4E75                       		rts	
000059D6                            ; ===========================================================================
000059D6                            ; ---------------------------------------------------------------------------
000059D6                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000059D6                            ; ---------------------------------------------------------------------------
000059D6                            
000059D6                            Obj89:					; XREF: Obj_Index
000059D6 7000                       		moveq	#0,d0
000059D8 1028 0024                  		move.b	$24(a0),d0
000059DC 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000059E0 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000059E4                            ; ===========================================================================
000059E4 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000059E6 0000                       		dc.w Obj89_Move-Obj89_Index
000059E8 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000059EA                            ; ===========================================================================
000059EA                            
000059EA                            Obj89_Main:				; XREF: Obj89_Index
000059EA 5428 0024                  		addq.b	#2,$24(a0)
000059EE 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000059F4 317C 00D8 000A             		move.w	#$D8,$A(a0)
000059FA 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005A02 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005A08 117C 0000 0001             		move.b	#0,1(a0)
00005A0E 117C 0000 0018             		move.b	#0,$18(a0)
00005A14                            
00005A14                            Obj89_Move:				; XREF: Obj89_Index
00005A14 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005A1A 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005A1C 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005A22 4EB9 0000 0000             		jsr	DisplaySprite
00005A28                            ; ===========================================================================
00005A28                            
00005A28                            Obj89_Delay:				; XREF: Obj89_Move
00005A28 5428 0024                  		addq.b	#2,$24(a0)
00005A2C 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005A32                            
00005A32                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005A32 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A36 6A00                       		bpl.s	Obj89_Display
00005A38 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005A3E                            
00005A3E                            Obj89_Display:
00005A3E 4EB9 0000 0000             		jsr	DisplaySprite
00005A44                            ; ===========================================================================
00005A44                            ; ---------------------------------------------------------------------------
00005A44                            ; Sprite mappings - Sonic on the ending	sequence
00005A44                            ; ---------------------------------------------------------------------------
00005A44                            Map_obj87:
00005A44                            	include "_maps\obj87.asm"
00005A44                            ; ---------------------------------------------------------------------------
00005A44                            ; Sprite mappings - Sonic on the ending	sequence
00005A44                            ; ---------------------------------------------------------------------------
00005A44 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005A48 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005A4C 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005A50 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005A54 02                         byte_5690:	dc.b 2
00005A55 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005A5A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A5F 03                         byte_569B:	dc.b 3
00005A60 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005A65 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005A6A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A6F 02                         byte_56AB:	dc.b 2
00005A70 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005A75 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005A7A 02                         byte_56B6:	dc.b 2
00005A7B EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A80 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A85 02                         byte_56C1:	dc.b 2
00005A86 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A8B FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A90 03                         byte_56CC:	dc.b 3
00005A91 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A96 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A9B 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005AA0 07                         byte_56DC:	dc.b 7
00005AA1 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005AA6 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005AAB BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005AB0 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005AB5 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005ABA E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005ABF EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005AC4 18                         byte_5700:	dc.b $18
00005AC5 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005ACA 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005ACF 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005AD4 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005AD9 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005ADE 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005AE3 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005AE8 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005AED B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005AF2 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005AF7 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005AFC C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005B01 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005B06 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005B0B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005B10 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005B15 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005B1A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005B1F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005B24 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005B29 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005B2E E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005B33 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005B38 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005B3E 00                         		even
00005B3E 00                         		even
00005B3E                            
00005B3E                            ; ---------------------------------------------------------------------------
00005B3E                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B3E                            ; ---------------------------------------------------------------------------
00005B3E                            Map_obj88:
00005B3E                            	include "_maps\obj88.asm"
00005B3E                            ; ---------------------------------------------------------------------------
00005B3E                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B3E                            ; ---------------------------------------------------------------------------
00005B3E 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005B42 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005B46 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005B4A 0000                       		dc.w byte_57AC-Map_obj88
00005B4C 01                         byte_5788:	dc.b 1
00005B4D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005B52 01                         byte_578E:	dc.b 1
00005B53 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005B58 01                         byte_5794:	dc.b 1
00005B59 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005B5E 01                         byte_579A:	dc.b 1
00005B5F F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005B64 01                         byte_57A0:	dc.b 1
00005B65 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005B6A 01                         byte_57A6:	dc.b 1
00005B6B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005B70 01                         byte_57AC:	dc.b 1
00005B71 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005B76                            		even
00005B76                            		even
00005B76                            
00005B76                            ; ---------------------------------------------------------------------------
00005B76                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B76                            ; ---------------------------------------------------------------------------
00005B76                            Map_obj89:
00005B76                            	include "_maps\obj89.asm"
00005B76                            ; ---------------------------------------------------------------------------
00005B76                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B76                            ; ---------------------------------------------------------------------------
00005B76 0000                       		dc.w byte_57B4-Map_obj89
00005B78 03                         byte_57B4:	dc.b 3
00005B79 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B7E F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B83 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B88                            		even
00005B88                            		even
00005B88                            
00005B88                            ; ===========================================================================
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            ; Credits ending sequence
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            
00005B88                            Credits:				; XREF: GameModeArray
00005B88 6100 BC78                  		bsr.w	ClearPLC
00005B8C 6100 C4AE                  		bsr.w	Pal_FadeFrom
00005B90 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B96 3CBC 8004                  		move.w	#$8004,(a6)
00005B9A 3CBC 8230                  		move.w	#$8230,(a6)
00005B9E 3CBC 8407                  		move.w	#$8407,(a6)
00005BA2 3CBC 9001                  		move.w	#$9001,(a6)
00005BA6 3CBC 9200                  		move.w	#$9200,(a6)
00005BAA 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BAE 3CBC 8720                  		move.w	#$8720,(a6)
00005BB2 4238 F64E                  		clr.b	($FFFFF64E).w
00005BB6 6100 B930                  		bsr.w	ClearScreen
00005BBA 43F8 D000                  		lea	($FFFFD000).w,a1
00005BBE 7000                       		moveq	#0,d0
00005BC0 323C 07FF                  		move.w	#$7FF,d1
00005BC4                            
00005BC4                            Cred_ClrObjRam:
00005BC4 22C0                       		move.l	d0,(a1)+
00005BC6 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005BCA                            
00005BCA 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005BD4 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005BDA 6100 BA88                  		bsr.w	NemDec
00005BDE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005BE2 7000                       		moveq	#0,d0
00005BE4 323C 001F                  		move.w	#$1F,d1
00005BE8                            
00005BE8                            Cred_ClrPallet:
00005BE8 22C0                       		move.l	d0,(a1)+
00005BEA 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005BEE                            
00005BEE 7003                       		moveq	#3,d0
00005BF0 6100 C6F4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005BF4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005BFA 4EB9 0000 0000             		jsr	ObjectsLoad
00005C00 4EB9 0000 0000             		jsr	BuildSprites
00005C06 6100 0000                  		bsr.w	EndingDemoLoad
00005C0A 7000                       		moveq	#0,d0
00005C0C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005C10 E948                       		lsl.w	#4,d0
00005C12 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005C18 45F2 0000                  		lea	(a2,d0.w),a2
00005C1C 7000                       		moveq	#0,d0
00005C1E 1012                       		move.b	(a2),d0
00005C20 6700                       		beq.s	loc_5862
00005C22 6100 BB80                  		bsr.w	LoadPLC		; load level patterns
00005C26                            
00005C26                            loc_5862:
00005C26 7001                       		moveq	#1,d0
00005C28 6100 BB7A                  		bsr.w	LoadPLC		; load standard	level patterns
00005C2C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005C32 6100 C362                  		bsr.w	Pal_FadeTo
00005C36                            
00005C36                            Cred_WaitLoop:
00005C36 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005C3C 6100 CFF4                  		bsr.w	DelayProgram
00005C40 6100 BBCE                  		bsr.w	RunPLC_RAM
00005C44 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005C48 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005C4A 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005C4E 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005C50 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005C56 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005C5A 4E75                       		rts	
00005C5C                            
00005C5C                            ; ---------------------------------------------------------------------------
00005C5C                            ; Ending sequence demo loading subroutine
00005C5C                            ; ---------------------------------------------------------------------------
00005C5C                            
00005C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C5C                            
00005C5C                            
00005C5C                            EndingDemoLoad:				; XREF: Credits
00005C5C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005C60 0240 000F                  		andi.w	#$F,d0
00005C64 D040                       		add.w	d0,d0
00005C66 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005C6A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005C6E 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005C72 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005C78 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005C7A 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C80 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C86 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005C8C 7000                       		moveq	#0,d0
00005C8E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C92 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C96 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C9A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C9E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005CA4 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005CA6 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005CAC 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005CB0 303C 0008                  		move.w	#8,d0
00005CB4                            
00005CB4                            EndDemo_LampLoad:
00005CB4 24D9                       		move.l	(a1)+,(a2)+
00005CB6 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005CBA                            
00005CBA                            EndDemo_Exit:
00005CBA 4E75                       		rts	
00005CBC                            ; End of function EndingDemoLoad
00005CBC                            
00005CBC                            ; ===========================================================================
00005CBC                            ; ---------------------------------------------------------------------------
00005CBC                            ; Levels used in the end sequence demos
00005CBC                            ; ---------------------------------------------------------------------------
00005CBC                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005CCC                            
00005CCC                            ; ---------------------------------------------------------------------------
00005CCC                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005CCC                            ; ---------------------------------------------------------------------------
00005CCC                            EndDemo_LampVar:
00005CCC 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005CCE 0A00 062C 000D             		dc.w $A00, $62C, $D
00005CD4 0000 0000                  		dc.l 0
00005CD8 0000                       		dc.b 0,	0
00005CDA 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005CEE 0101                       		dc.b 1,	1
00005CF0                            ; ===========================================================================
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screens
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            
00005CF0                            TryAgainEnd:				; XREF: Credits
00005CF0 6100 BB10                  		bsr.w	ClearPLC
00005CF4 6100 C346                  		bsr.w	Pal_FadeFrom
00005CF8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CFE 3CBC 8004                  		move.w	#$8004,(a6)
00005D02 3CBC 8230                  		move.w	#$8230,(a6)
00005D06 3CBC 8407                  		move.w	#$8407,(a6)
00005D0A 3CBC 9001                  		move.w	#$9001,(a6)
00005D0E 3CBC 9200                  		move.w	#$9200,(a6)
00005D12 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D16 3CBC 8720                  		move.w	#$8720,(a6)
00005D1A 4238 F64E                  		clr.b	($FFFFF64E).w
00005D1E 6100 B7C8                  		bsr.w	ClearScreen
00005D22 43F8 D000                  		lea	($FFFFD000).w,a1
00005D26 7000                       		moveq	#0,d0
00005D28 323C 07FF                  		move.w	#$7FF,d1
00005D2C                            
00005D2C                            TryAg_ClrObjRam:
00005D2C 22C0                       		move.l	d0,(a1)+
00005D2E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005D32                            
00005D32 701D                       		moveq	#$1D,d0
00005D34 6100 BBDA                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005D38 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D3C 7000                       		moveq	#0,d0
00005D3E 323C 001F                  		move.w	#$1F,d1
00005D42                            
00005D42                            TryAg_ClrPallet:
00005D42 22C0                       		move.l	d0,(a1)+
00005D44 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005D48                            
00005D48 7013                       		moveq	#$13,d0
00005D4A 6100 C59A                  		bsr.w	PalLoad1	; load ending pallet
00005D4E 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005D52 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005D58 4EB9 0000 0000             		jsr	ObjectsLoad
00005D5E 4EB9 0000 0000             		jsr	BuildSprites
00005D64 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005D6A 6100 C22A                  		bsr.w	Pal_FadeTo
00005D6E                            
00005D6E                            ; ---------------------------------------------------------------------------
00005D6E                            ; "TRY AGAIN" and "END"	screen main loop
00005D6E                            ; ---------------------------------------------------------------------------
00005D6E                            TryAg_MainLoop:
00005D6E 6100 B85C                  		bsr.w	PauseGame
00005D72 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D78 6100 CEB8                  		bsr.w	DelayProgram
00005D7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005D82 4EB9 0000 0000             		jsr	BuildSprites
00005D88 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D8E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D90 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D94 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D96 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D9C 67D0                       		beq.s	TryAg_MainLoop
00005D9E                            
00005D9E                            TryAg_Exit:
00005D9E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005DA4 4E75                       		rts	
00005DA6                            
00005DA6                            ; ===========================================================================
00005DA6                            ; ---------------------------------------------------------------------------
00005DA6                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005DA6                            ; ---------------------------------------------------------------------------
00005DA6                            
00005DA6                            Obj8B:					; XREF: Obj_Index
00005DA6 7000                       		moveq	#0,d0
00005DA8 1028 0024                  		move.b	$24(a0),d0
00005DAC 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005DB0 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005DB4 4EF9 0000 0000             		jmp	DisplaySprite
00005DBA                            ; ===========================================================================
00005DBA 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005DBC 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005DBE 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005DC0 0000                       		dc.w loc_5A8E-Obj8B_Index
00005DC2                            ; ===========================================================================
00005DC2                            
00005DC2                            Obj8B_Main:				; XREF: Obj8B_Index
00005DC2 5428 0024                  		addq.b	#2,$24(a0)
00005DC6 317C 0120 0008             		move.w	#$120,8(a0)
00005DCC 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005DD2 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005DDA 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005DE0 117C 0000 0001             		move.b	#0,1(a0)
00005DE6 117C 0002 0018             		move.b	#2,$18(a0)
00005DEC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005DF2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005DF8 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005DFA 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005E00 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005E06 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005E0C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005E12                            
00005E12                            Obj8B_Animate:				; XREF: Obj8B_Index
00005E12 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005E18 4EF9 0000 0000             		jmp	AnimateSprite
00005E1E                            ; ===========================================================================
00005E1E                            
00005E1E                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005E1E 5428 0024                  		addq.b	#2,$24(a0)
00005E22 7002                       		moveq	#2,d0
00005E24 0828 0000 001C             		btst	#0,$1C(a0)
00005E2A 6700                       		beq.s	loc_5A6A
00005E2C 4440                       		neg.w	d0
00005E2E                            
00005E2E                            loc_5A6A:
00005E2E 43F8 D800                  		lea	($FFFFD800).w,a1
00005E32 7205                       		moveq	#5,d1
00005E34                            
00005E34                            loc_5A70:
00005E34 1340 003E                  		move.b	d0,$3E(a1)
00005E38 3400                       		move.w	d0,d2
00005E3A E742                       		asl.w	#3,d2
00005E3C D529 0026                  		add.b	d2,$26(a1)
00005E40 43E9 0040                  		lea	$40(a1),a1
00005E44 51C9 FFEE                  		dbf	d1,loc_5A70
00005E48 5228 001A                  		addq.b	#1,$1A(a0)
00005E4C 317C 0070 0030             		move.w	#112,$30(a0)
00005E52                            
00005E52                            loc_5A8E:				; XREF: Obj8B_Index
00005E52 5368 0030                  		subq.w	#1,$30(a0)
00005E56 6A00                       		bpl.s	locret_5AA0
00005E58 0868 0000 001C             		bchg	#0,$1C(a0)
00005E5E 117C 0002 0024             		move.b	#2,$24(a0)
00005E64                            
00005E64                            locret_5AA0:
00005E64 4E75                       		rts	
00005E66                            ; ===========================================================================
00005E66                            Ani_obj8B:
00005E66                            	include "_anim\obj8B.asm"
00005E66                            ; ---------------------------------------------------------------------------
00005E66                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005E66                            ; ---------------------------------------------------------------------------
00005E66 0000                       		dc.w byte_5AA8-Ani_obj8B
00005E68 0000                       		dc.w byte_5AAC-Ani_obj8B
00005E6A 0000                       		dc.w byte_5AB0-Ani_obj8B
00005E6C 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005E70 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005E74 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E86                            		even
00005E86                            		even
00005E86                            
00005E86                            ; ===========================================================================
00005E86                            ; ---------------------------------------------------------------------------
00005E86                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E86                            ; ---------------------------------------------------------------------------
00005E86                            
00005E86                            Obj8C:					; XREF: Obj_Index
00005E86 7000                       		moveq	#0,d0
00005E88 1028 0024                  		move.b	$24(a0),d0
00005E8C 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E90 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E94 4EF9 0000 0000             		jmp	DisplaySprite
00005E9A                            ; ===========================================================================
00005E9A 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E9C 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E9E                            ; ===========================================================================
00005E9E                            
00005E9E                            Obj8C_Main:				; XREF: Obj8C_Index
00005E9E 2248                       		movea.l	a0,a1
00005EA0 7400                       		moveq	#0,d2
00005EA2 7600                       		moveq	#0,d3
00005EA4 7205                       		moveq	#5,d1
00005EA6 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005EAA                            
00005EAA                            Obj8C_MakeEms:				; XREF: loc_5B42
00005EAA 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005EAE 5429 0024                  		addq.b	#2,$24(a1)
00005EB2 237C 0000 5B3E 0004        		move.l	#Map_obj88,4(a1)
00005EBA 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005EC0 137C 0000 0001             		move.b	#0,1(a1)
00005EC6 137C 0001 0018             		move.b	#1,$18(a1)
00005ECC 337C 0104 0008             		move.w	#$104,8(a1)
00005ED2 337C 0120 0038             		move.w	#$120,$38(a1)
00005ED8 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005EDE 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005EE4 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005EEA 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005EEE                            
00005EEE                            Obj8C_ChkEms:
00005EEE 7000                       		moveq	#0,d0
00005EF0 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005EF4 5340                       		subq.w	#1,d0
00005EF6 6500                       		bcs.s	loc_5B42
00005EF8                            
00005EF8                            Obj8C_ChkEmLoop:
00005EF8 B433 0000                  		cmp.b	(a3,d0.w),d2
00005EFC 6600                       		bne.s	loc_5B3E
00005EFE 5202                       		addq.b	#1,d2
00005F00 60EC                       		bra.s	Obj8C_ChkEms
00005F02                            ; ===========================================================================
00005F02                            
00005F02                            loc_5B3E:
00005F02 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005F06                            
00005F06                            loc_5B42:
00005F06 1342 001A                  		move.b	d2,$1A(a1)
00005F0A 5229 001A                  		addq.b	#1,$1A(a1)
00005F0E 5202                       		addq.b	#1,d2
00005F10 137C 0080 0026             		move.b	#$80,$26(a1)
00005F16 1343 001E                  		move.b	d3,$1E(a1)
00005F1A 1343 001F                  		move.b	d3,$1F(a1)
00005F1E 0643 000A                  		addi.w	#$A,d3
00005F22 43E9 0040                  		lea	$40(a1),a1
00005F26 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005F2A                            
00005F2A                            Obj8C_Move:				; XREF: Obj8C_Index
00005F2A 4A68 003E                  		tst.w	$3E(a0)
00005F2E 6700                       		beq.s	locret_5BBA
00005F30 4A28 001E                  		tst.b	$1E(a0)
00005F34 6700                       		beq.s	loc_5B78
00005F36 5328 001E                  		subq.b	#1,$1E(a0)
00005F3A 6600                       		bne.s	loc_5B80
00005F3C                            
00005F3C                            loc_5B78:
00005F3C 3028 003E                  		move.w	$3E(a0),d0
00005F40 D168 0026                  		add.w	d0,$26(a0)
00005F44                            
00005F44                            loc_5B80:
00005F44 1028 0026                  		move.b	$26(a0),d0
00005F48 6700                       		beq.s	loc_5B8C
00005F4A 0C00 0080                  		cmpi.b	#$80,d0
00005F4E 6600                       		bne.s	loc_5B96
00005F50                            
00005F50                            loc_5B8C:
00005F50 4268 003E                  		clr.w	$3E(a0)
00005F54 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005F5A                            
00005F5A                            loc_5B96:
00005F5A 4EB9 0000 2C64             		jsr	(CalcSine).l
00005F60 7800                       		moveq	#0,d4
00005F62 1828 003C                  		move.b	$3C(a0),d4
00005F66 C3C4                       		muls.w	d4,d1
00005F68 E081                       		asr.l	#8,d1
00005F6A C1C4                       		muls.w	d4,d0
00005F6C E080                       		asr.l	#8,d0
00005F6E D268 0038                  		add.w	$38(a0),d1
00005F72 D068 003A                  		add.w	$3A(a0),d0
00005F76 3141 0008                  		move.w	d1,8(a0)
00005F7A 3140 000A                  		move.w	d0,$A(a0)
00005F7E                            
00005F7E                            locret_5BBA:
00005F7E 4E75                       		rts	
00005F80                            ; ===========================================================================
00005F80                            ; ---------------------------------------------------------------------------
00005F80                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F80                            ; ---------------------------------------------------------------------------
00005F80                            Map_obj8B:
00005F80                            	include "_maps\obj8B.asm"
00005F80                            ; ---------------------------------------------------------------------------
00005F80                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F80                            ; ---------------------------------------------------------------------------
00005F80 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F84 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F88 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F8C 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F90 08                         byte_5BCC:	dc.b 8
00005F91 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F96 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F9B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005FA0 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005FA5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005FAA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005FAF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB9 08                         byte_5BF5:	dc.b 8
00005FBA E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005FBF F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005FC4 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005FC9 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005FCE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FD3 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FD8 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FDD 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FE2 08                         byte_5C1E:	dc.b 8
00005FE3 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005FE8 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005FED E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005FF2 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005FF7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005FFC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006001 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006006 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000600B 08                         byte_5C47:	dc.b 8
0000600C E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006011 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006016 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000601B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006020 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006025 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000602A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000602F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006034 0C                         byte_5C70:	dc.b $C
00006035 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000603A F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000603F 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006044 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006049 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000604E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006053 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006058 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000605D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006062 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006067 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000606C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006071 0A                         byte_5CAD:	dc.b $A
00006072 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006077 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000607C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006081 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006086 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000608B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006090 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006095 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000609A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000609F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000060A4 0A                         byte_5CE0:	dc.b $A
000060A5 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000060AA E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000060AF EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000060B4 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000060B9 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000060BE EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000060C3 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000060C8 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000060CD 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000060D2 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000060D7 0C                         byte_5D13:	dc.b $C
000060D8 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000060DD FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000060E2 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000060E7 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000060EC F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000060F1 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000060F6 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000060FB 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006100 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006105 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000610A 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000610F 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006114                            		even
00006114                            		even
00006114                            
00006114                            ; ---------------------------------------------------------------------------
00006114                            ; Ending sequence demos
00006114                            ; ---------------------------------------------------------------------------
00006114                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006142                            		even
00006142                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006182                            		even
00006182                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000061B2                            		even
000061B2                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000061E2                            		even
000061E2                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006202                            		even
00006202                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006222                            		even
00006222                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006252                            		even
00006252                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006282                            		even
00006282                            
00006282                            ; ---------------------------------------------------------------------------
00006282                            ; Subroutine to	load level boundaries and start	locations
00006282                            ; ---------------------------------------------------------------------------
00006282                            
00006282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006282                            
00006282                            
00006282                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006282 7000                       		moveq	#0,d0
00006284 11C0 F740                  		move.b	d0,($FFFFF740).w
00006288 11C0 F741                  		move.b	d0,($FFFFF741).w
0000628C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006290 11C0 F748                  		move.b	d0,($FFFFF748).w
00006294 11C0 F742                  		move.b	d0,($FFFFF742).w
00006298 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000629C ED08                       		lsl.b	#6,d0
0000629E E848                       		lsr.w	#4,d0
000062A0 3200                       		move.w	d0,d1
000062A2 D040                       		add.w	d0,d0
000062A4 D041                       		add.w	d1,d0
000062A6 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000062AA 3018                       		move.w	(a0)+,d0
000062AC 31C0 F730                  		move.w	d0,($FFFFF730).w
000062B0 2018                       		move.l	(a0)+,d0
000062B2 21C0 F728                  		move.l	d0,($FFFFF728).w
000062B6 21C0 F720                  		move.l	d0,($FFFFF720).w
000062BA 2018                       		move.l	(a0)+,d0
000062BC 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000062C0 21C0 F724                  		move.l	d0,($FFFFF724).w
000062C4 3038 F728                  		move.w	($FFFFF728).w,d0
000062C8 0640 0240                  		addi.w	#$240,d0
000062CC 31C0 F732                  		move.w	d0,($FFFFF732).w
000062D0 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000062D6 3018                       		move.w	(a0)+,d0
000062D8 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000062DC 6000 0000                  		bra.w	LevSz_ChkLamp
000062E0                            ; ===========================================================================
000062E0                            ; ---------------------------------------------------------------------------
000062E0                            ; Level size array and ending start location array
000062E0                            ; ---------------------------------------------------------------------------
000062E0                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006430                            		even
00006430                            
00006430                            EndingStLocArray:
00006430                            		incbin	misc\sloc_end.bin
00006450                            		even
00006450                            
00006450                            ; ===========================================================================
00006450                            
00006450                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006450 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006454 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006456 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000645C 3238 D008                  		move.w	($FFFFD008).w,d1
00006460 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006464 6000                       		bra.s	loc_60D0
00006466                            ; ===========================================================================
00006466                            
00006466                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006466 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000646A ED08                       		lsl.b	#6,d0
0000646C E848                       		lsr.w	#4,d0
0000646E 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006472 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006476 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006478 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000647C 5340                       		subq.w	#1,d0
0000647E E548                       		lsl.w	#2,d0
00006480 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006484                            
00006484                            LevSz_SonicPos:
00006484 7200                       		moveq	#0,d1
00006486 3219                       		move.w	(a1)+,d1
00006488 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000648C 7000                       		moveq	#0,d0
0000648E 3011                       		move.w	(a1),d0
00006490 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006494                            
00006494                            loc_60D0:				; XREF: LevSz_ChkLamp
00006494 0441 00A0                  		subi.w	#$A0,d1
00006498 6400                       		bcc.s	loc_60D8
0000649A 7200                       		moveq	#0,d1
0000649C                            
0000649C                            loc_60D8:
0000649C 3438 F72A                  		move.w	($FFFFF72A).w,d2
000064A0 B242                       		cmp.w	d2,d1
000064A2 6500                       		bcs.s	loc_60E2
000064A4 3202                       		move.w	d2,d1
000064A6                            
000064A6                            loc_60E2:
000064A6 31C1 F700                  		move.w	d1,($FFFFF700).w
000064AA 0440 0060                  		subi.w	#$60,d0
000064AE 6400                       		bcc.s	loc_60EE
000064B0 7000                       		moveq	#0,d0
000064B2                            
000064B2                            loc_60EE:
000064B2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000064B6 6D00                       		blt.s	loc_60F8
000064B8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000064BC                            
000064BC                            loc_60F8:
000064BC 31C0 F704                  		move.w	d0,($FFFFF704).w
000064C0 6100 0000                  		bsr.w	BgScrollSpeed
000064C4 7000                       		moveq	#0,d0
000064C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064CA E508                       		lsl.b	#2,d0
000064CC 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000064D2 6000 0000                  		bra.w	LevSz_Unk
000064D6                            ; ===========================================================================
000064D6                            ; ---------------------------------------------------------------------------
000064D6                            ; Sonic	start location array
000064D6                            ; ---------------------------------------------------------------------------
000064D6                            StartLocArray:	incbin	misc\sloc_lev.bin
00006546                            		even
00006546                            
00006546                            ; ---------------------------------------------------------------------------
00006546                            ; Which	256x256	tiles contain loops or roll-tunnels
00006546                            ; ---------------------------------------------------------------------------
00006546                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006546                            ; loop,	loop, tunnel, tunnel
00006546                            ; ---------------------------------------------------------------------------
00006546                            LoopTileNums:	incbin	misc\loopnums.bin
00006562                            		even
00006562                            
00006562                            ; ===========================================================================
00006562                            
00006562                            LevSz_Unk:				; XREF: LevelSizeLoad
00006562 7000                       		moveq	#0,d0
00006564 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006568 E748                       		lsl.w	#3,d0
0000656A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000656E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006572 24D9                       		move.l	(a1)+,(a2)+
00006574 24D9                       		move.l	(a1)+,(a2)+
00006576 4E75                       		rts	
00006578                            ; End of function LevelSizeLoad
00006578                            
00006578                            ; ===========================================================================
00006578 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006580 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006588 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006590 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006598 0800 0100 0100 0000        		dc.l $8000100, $1000000
000065A0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000065A8 0070 0100 0100 0100        		dc.l $700100, $1000100
000065B0                            
000065B0                            ; ---------------------------------------------------------------------------
000065B0                            ; Subroutine to	set scroll speed of some backgrounds
000065B0                            ; ---------------------------------------------------------------------------
000065B0                            
000065B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B0                            
000065B0                            
000065B0                            BgScrollSpeed:				; XREF: LevelSizeLoad
000065B0 4A38 FE30                  		tst.b	($FFFFFE30).w
000065B4 6600                       		bne.s	loc_6206
000065B6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065BA 31C0 F714                  		move.w	d0,($FFFFF714).w
000065BE 31C1 F708                  		move.w	d1,($FFFFF708).w
000065C2 31C1 F710                  		move.w	d1,($FFFFF710).w
000065C6 31C1 F718                  		move.w	d1,($FFFFF718).w
000065CA                            
000065CA                            loc_6206:
000065CA 7400                       		moveq	#0,d2
000065CC 1438 FE10                  		move.b	($FFFFFE10).w,d2
000065D0 D442                       		add.w	d2,d2
000065D2 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000065D6 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000065DA                            ; End of function BgScrollSpeed
000065DA                            
000065DA                            ; ===========================================================================
000065DA 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000065DE 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000065E2 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000065E6 0000                       		dc.w BgScroll_End-BgScroll_Index
000065E8                            ; ===========================================================================
000065E8                            
000065E8                            BgScroll_GHZ:				; XREF: BgScroll_Index
000065E8 6000 0000                  		bra.w	Deform_GHZ
000065EC                            ; ===========================================================================
000065EC                            
000065EC                            BgScroll_LZ:				; XREF: BgScroll_Index
000065EC E280                       		asr.l	#1,d0
000065EE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065F2 4E75                       		rts	
000065F4                            ; ===========================================================================
000065F4                            
000065F4                            BgScroll_MZ:				; XREF: BgScroll_Index
000065F4 4E75                       		rts	
000065F6                            ; ===========================================================================
000065F6                            
000065F6                            BgScroll_SLZ:				; XREF: BgScroll_Index
000065F6 E280                       		asr.l	#1,d0
000065F8 0640 00C0                  		addi.w	#$C0,d0
000065FC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006600 4E75                       		rts	
00006602                            ; ===========================================================================
00006602                            
00006602                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006602 E980                       		asl.l	#4,d0
00006604 2400                       		move.l	d0,d2
00006606 E380                       		asl.l	#1,d0
00006608 D082                       		add.l	d2,d0
0000660A E080                       		asr.l	#8,d0
0000660C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006610 31C0 F714                  		move.w	d0,($FFFFF714).w
00006614 4E75                       		rts	
00006616                            ; ===========================================================================
00006616                            
00006616                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006616 E980                       		asl.l	#4,d0
00006618 E380                       		asl.l	#1,d0
0000661A E080                       		asr.l	#8,d0
0000661C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006620 4E75                       		rts	
00006622                            ; ===========================================================================
00006622                            
00006622                            BgScroll_End:				; XREF: BgScroll_Index
00006622 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006628 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000662E 4E75                       		rts	
00006630                            ; ===========================================================================
00006630 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006636 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000663C 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006642 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006648 4E75                       		rts
0000664A                            
0000664A                            ; ---------------------------------------------------------------------------
0000664A                            ; Background layer deformation subroutines
0000664A                            ; ---------------------------------------------------------------------------
0000664A                            
0000664A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000664A                            
0000664A                            
0000664A                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000664A 4A38 F744                  		tst.b	($FFFFF744).w
0000664E 6700                       		beq.s	loc_628E
00006650 4E75                       		rts	
00006652                            ; ===========================================================================
00006652                            
00006652                            loc_628E:
00006652 4278 F754                  		clr.w	($FFFFF754).w
00006656 4278 F756                  		clr.w	($FFFFF756).w
0000665A 4278 F758                  		clr.w	($FFFFF758).w
0000665E 4278 F75A                  		clr.w	($FFFFF75A).w
00006662 6100 0000                  		bsr.w	ScrollHoriz
00006666 6100 0000                  		bsr.w	ScrollVertical
0000666A 6100 0000                  		bsr.w	DynScrResizeLoad
0000666E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006674 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000667A 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006680 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006686 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000668C 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006692 7000                       		moveq	#0,d0
00006694 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006698 D040                       		add.w	d0,d0
0000669A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000669E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000066A2                            ; End of function DeformBgLayer
000066A2                            
000066A2                            ; ===========================================================================
000066A2                            ; ---------------------------------------------------------------------------
000066A2                            ; Offset index for background layer deformation	code
000066A2                            ; ---------------------------------------------------------------------------
000066A2 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000066A6 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000066AA 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000066AE 0000                       		dc.w Deform_GHZ-Deform_Index
000066B0                            ; ---------------------------------------------------------------------------
000066B0                            ; Green	Hill Zone background layer deformation code
000066B0                            ; ---------------------------------------------------------------------------
000066B0                            
000066B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066B0                            
000066B0                            
000066B0                            Deform_GHZ:				; XREF: Deform_Index
000066B0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066B4 48C4                       		ext.l	d4
000066B6 EB84                       		asl.l	#5,d4
000066B8 2204                       		move.l	d4,d1
000066BA E384                       		asl.l	#1,d4
000066BC D881                       		add.l	d1,d4
000066BE 7A00                       		moveq	#0,d5
000066C0 6100 0000                  		bsr.w	ScrollBlock1
000066C4 6100 0000                  		bsr.w	ScrollBlock4
000066C8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066CC 3038 F704                  		move.w	($FFFFF704).w,d0
000066D0 0240 07FF                  		andi.w	#$7FF,d0
000066D4 EA48                       		lsr.w	#5,d0
000066D6 4440                       		neg.w	d0
000066D8 0640 0026                  		addi.w	#$26,d0
000066DC 31C0 F714                  		move.w	d0,($FFFFF714).w
000066E0 3800                       		move.w	d0,d4
000066E2 6100 0000                  		bsr.w	ScrollBlock3
000066E6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066EC 323C 006F                  		move.w	#$6F,d1
000066F0 9244                       		sub.w	d4,d1
000066F2 3038 F700                  		move.w	($FFFFF700).w,d0
000066F6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000066FC 6600                       		bne.s	loc_633C
000066FE 7000                       		moveq	#0,d0
00006700                            
00006700                            loc_633C:
00006700 4440                       		neg.w	d0
00006702 4840                       		swap	d0
00006704 3038 F708                  		move.w	($FFFFF708).w,d0
00006708 4440                       		neg.w	d0
0000670A                            
0000670A                            loc_6346:
0000670A 22C0                       		move.l	d0,(a1)+
0000670C 51C9 FFFC                  		dbf	d1,loc_6346
00006710 323C 0027                  		move.w	#$27,d1
00006714 3038 F710                  		move.w	($FFFFF710).w,d0
00006718 4440                       		neg.w	d0
0000671A                            
0000671A                            loc_6356:
0000671A 22C0                       		move.l	d0,(a1)+
0000671C 51C9 FFFC                  		dbf	d1,loc_6356
00006720 3038 F710                  		move.w	($FFFFF710).w,d0
00006724 0640 0000                  		addi.w	#0,d0
00006728 3438 F700                  		move.w	($FFFFF700).w,d2
0000672C 0642 FE00                  		addi.w	#-$200,d2
00006730 9440                       		sub.w	d0,d2
00006732 48C2                       		ext.l	d2
00006734 E182                       		asl.l	#8,d2
00006736 85FC 0068                  		divs.w	#$68,d2
0000673A 48C2                       		ext.l	d2
0000673C E182                       		asl.l	#8,d2
0000673E 7600                       		moveq	#0,d3
00006740 3600                       		move.w	d0,d3
00006742 323C 0047                  		move.w	#$47,d1
00006746 D244                       		add.w	d4,d1
00006748                            
00006748                            loc_6384:
00006748 3003                       		move.w	d3,d0
0000674A 4440                       		neg.w	d0
0000674C 22C0                       		move.l	d0,(a1)+
0000674E 4843                       		swap	d3
00006750 D682                       		add.l	d2,d3
00006752 4843                       		swap	d3
00006754 51C9 FFF2                  		dbf	d1,loc_6384
00006758 4E75                       		rts	
0000675A                            ; End of function Deform_GHZ
0000675A                            
0000675A                            ; ---------------------------------------------------------------------------
0000675A                            ; Labyrinth Zone background layer deformation code
0000675A                            ; ---------------------------------------------------------------------------
0000675A                            
0000675A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000675A                            
0000675A                            
0000675A                            Deform_LZ:				; XREF: Deform_Index
0000675A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000675E 48C4                       		ext.l	d4
00006760 EF84                       		asl.l	#7,d4
00006762 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006766 48C5                       		ext.l	d5
00006768 EF85                       		asl.l	#7,d5
0000676A 6100 0000                  		bsr.w	ScrollBlock1
0000676E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006774 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006778 323C 00DF                  		move.w	#$DF,d1
0000677C 3038 F700                  		move.w	($FFFFF700).w,d0
00006780 4440                       		neg.w	d0
00006782 4840                       		swap	d0
00006784 3038 F708                  		move.w	($FFFFF708).w,d0
00006788 4440                       		neg.w	d0
0000678A                            
0000678A                            loc_63C6:
0000678A 22C0                       		move.l	d0,(a1)+
0000678C 51C9 FFFC                  		dbf	d1,loc_63C6
00006790 3038 F646                  		move.w	($FFFFF646).w,d0
00006794 9078 F704                  		sub.w	($FFFFF704).w,d0
00006798 4E75                       		rts	
0000679A                            ; End of function Deform_LZ
0000679A                            
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            ; Marble Zone background layer deformation code
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            
0000679A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000679A                            
0000679A                            
0000679A                            Deform_MZ:				; XREF: Deform_Index
0000679A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000679E 48C4                       		ext.l	d4
000067A0 ED84                       		asl.l	#6,d4
000067A2 2204                       		move.l	d4,d1
000067A4 E384                       		asl.l	#1,d4
000067A6 D881                       		add.l	d1,d4
000067A8 7A00                       		moveq	#0,d5
000067AA 6100 0000                  		bsr.w	ScrollBlock1
000067AE 303C 0200                  		move.w	#$200,d0
000067B2 3238 F704                  		move.w	($FFFFF704).w,d1
000067B6 0441 01C8                  		subi.w	#$1C8,d1
000067BA 6500                       		bcs.s	loc_6402
000067BC 3401                       		move.w	d1,d2
000067BE D241                       		add.w	d1,d1
000067C0 D242                       		add.w	d2,d1
000067C2 E441                       		asr.w	#2,d1
000067C4 D041                       		add.w	d1,d0
000067C6                            
000067C6                            loc_6402:
000067C6 31C0 F714                  		move.w	d0,($FFFFF714).w
000067CA 6100 0000                  		bsr.w	ScrollBlock3
000067CE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067D4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067D8 323C 00DF                  		move.w	#$DF,d1
000067DC 3038 F700                  		move.w	($FFFFF700).w,d0
000067E0 4440                       		neg.w	d0
000067E2 4840                       		swap	d0
000067E4 3038 F708                  		move.w	($FFFFF708).w,d0
000067E8 4440                       		neg.w	d0
000067EA                            
000067EA                            loc_6426:
000067EA 22C0                       		move.l	d0,(a1)+
000067EC 51C9 FFFC                  		dbf	d1,loc_6426
000067F0 4E75                       		rts	
000067F2                            ; End of function Deform_MZ
000067F2                            
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            ; Star Light Zone background layer deformation code
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            
000067F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067F2                            
000067F2                            
000067F2                            Deform_SLZ:				; XREF: Deform_Index
000067F2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067F6 48C4                       		ext.l	d4
000067F8 EB84                       		asl.l	#5,d4
000067FA 2204                       		move.l	d4,d1
000067FC E384                       		asl.l	#1,d4
000067FE D881                       		add.l	d1,d4
00006800 7A00                       		moveq	#0,d5
00006802 6100 0000                  		bsr.w	ScrollBlock1
00006806 6100 0000                  		bsr.w	ScrollBlock3
0000680A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000680E                            	;	move.w	($FFFFF704).w,d0
0000680E                            	;	andi.w	#$7FF,d0
0000680E EA48                       		lsr.w	#5,d0
00006810 4440                       		neg.w	d0
00006812 0640 0026                  		addi.w	#$26,d0
00006816 31C0 F714                  		move.w	d0,($FFFFF714).w
0000681A 3800                       		move.w	d0,d4
0000681C                            	;	bsr.w	ScrollBlock3
0000681C 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006822 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006826                            
00006826 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000682A 4440                       		neg.w	d0			; negate (positive to negative)
0000682C 4840                       		swap	d0			; send to the left side of d0
0000682E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006832 45F8 A800                  		lea	($FFFFA800).w,a2
00006836 069A 0000 5000             		addi.l	#$5000,(a2)+
0000683C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006842 3038 A800                  		move.w	($FFFFA800).w,d0
00006846 4440                       		neg.w	d0			; negate (positive to negative)
00006848 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000684A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000684E                            slz_DeformLoop_1:
0000684E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006850 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006854                            
00006854 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006858 4440                       		neg.w	d0			; negate (positive to negative)
0000685A 4840                       		swap	d0			; send to the left side of d0
0000685C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006860 45F8 A800                  		lea	($FFFFA800).w,a2
00006864 069A 0000 5000             		addi.l	#$5000,(a2)+
0000686A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006870 3038 A800                  		move.w	($FFFFA800).w,d0
00006874 4440                       		neg.w	d0			; negate (positive to negative)
00006876 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006878 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000687C                            slz_DeformLoop_2:
0000687C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000687E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006882                            
00006882 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006886 4440                       		neg.w	d0			; negate (positive to negative)
00006888 4840                       		swap	d0			; send to the left side of d0
0000688A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000688E 45F8 A800                  		lea	($FFFFA800).w,a2
00006892 069A 0000 5000             		addi.l	#$5000,(a2)+
00006898 069A 0000 C000             		addi.l	#$C000,(a2)+
0000689E 3038 A800                  		move.w	($FFFFA800).w,d0
000068A2 4440                       		neg.w	d0			; negate (positive to negative)
000068A4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068A6 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068AA                            slz_DeformLoop_3:
000068AA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068AC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000068B0                            
000068B0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 4840                       		swap	d0			; send to the left side of d0
000068B8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068BC 45F8 A800                  		lea	($FFFFA800).w,a2
000068C0 069A 0000 5000             		addi.l	#$5000,(a2)+
000068C6 069A 0000 C000             		addi.l	#$C000,(a2)+
000068CC 3038 A800                  		move.w	($FFFFA800).w,d0
000068D0 4440                       		neg.w	d0			; negate (positive to negative)
000068D2 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068D4 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D8                            slz_DeformLoop_4:
000068D8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068DA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000068DE                            
000068DE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E2 4440                       		neg.w	d0			; negate (positive to negative)
000068E4 4840                       		swap	d0			; send to the left side of d0
000068E6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068EA 45F8 A800                  		lea	($FFFFA800).w,a2
000068EE 069A 0000 5000             		addi.l	#$5000,(a2)+
000068F4 069A 0000 C000             		addi.l	#$C000,(a2)+
000068FA 3038 A800                  		move.w	($FFFFA800).w,d0
000068FE 4440                       		neg.w	d0			; negate (positive to negative)
00006900 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006902 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006906                            slz_DeformLoop_5:
00006906 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006908 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000690C                            
0000690C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006910 4440                       		neg.w	d0			; negate (positive to negative)
00006912 4840                       		swap	d0			; send to the left side of d0
00006914 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006918 4440                       		neg.w	d0			; negate (positive to negative)
0000691A EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000691C 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006920                            slz_DeformLoop_6:
00006920 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006922 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006926                            
00006926 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692A 4440                       		neg.w	d0			; negate (positive to negative)
0000692C 4840                       		swap	d0			; send to the left side of d0
0000692E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006932 4440                       		neg.w	d0			; negate (positive to negative)
00006934 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006936 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693A                            slz_DeformLoop_7:
0000693A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000693C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006940                            
00006940 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006944 4440                       		neg.w	d0			; negate (positive to negative)
00006946 4840                       		swap	d0			; send to the left side of d0
00006948 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000694C 4440                       		neg.w	d0			; negate (positive to negative)
0000694E EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006950 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006954                            slz_DeformLoop_8:
00006954 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006956 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
0000695A                            
0000695A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000695E 4440                       		neg.w	d0			; negate (positive to negative)
00006960 4840                       		swap	d0			; send to the left side of d0
00006962 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006966 4440                       		neg.w	d0			; negate (positive to negative)
00006968 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000696A 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000696E                            slz_DeformLoop_9:
0000696E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006970 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006974                            
00006974 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006978 4440                       		neg.w	d0			; negate (positive to negative)
0000697A 4840                       		swap	d0			; send to the left side of d0
0000697C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006980 4440                       		neg.w	d0			; negate (positive to negative)
00006982 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006984 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006988                            slz_DeformLoop_10:
00006988 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000698A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
0000698E                            
0000698E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006992 4440                       		neg.w	d0			; negate (positive to negative)
00006994 4840                       		swap	d0			; send to the left side of d0
00006996 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000699A 4440                       		neg.w	d0			; negate (positive to negative)
0000699C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000699E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069A2                            slz_DeformLoop_11:
000069A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000069A8                            
000069A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069AC 4440                       		neg.w	d0			; negate (positive to negative)
000069AE 4840                       		swap	d0			; send to the left side of d0
000069B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B4 4440                       		neg.w	d0			; negate (positive to negative)
000069B6 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069B8 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069BC                            slz_DeformLoop_12:
000069BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000069C2                            
000069C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C6 4440                       		neg.w	d0			; negate (positive to negative)
000069C8 4840                       		swap	d0			; send to the left side of d0
000069CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069CE 4440                       		neg.w	d0			; negate (positive to negative)
000069D0 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069D2 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D6                            slz_DeformLoop_13:
000069D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000069DC 4E75                       		rts	
000069DE                            ; End of function Deform_SLZ
000069DE 4E75                       		rts	
000069E0                            ; End of function Deform_SLZ_2
000069E0                            
000069E0                            ; ---------------------------------------------------------------------------
000069E0                            ; Spring Yard Zone background layer deformation	code
000069E0                            ; ---------------------------------------------------------------------------
000069E0                            
000069E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069E0                            
000069E0                            
000069E0                            Deform_SYZ:				; XREF: Deform_Index
000069E0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069E4 48C4                       		ext.l	d4
000069E6 ED84                       		asl.l	#6,d4
000069E8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069EC 48C5                       		ext.l	d5
000069EE E985                       		asl.l	#4,d5
000069F0 2205                       		move.l	d5,d1
000069F2 E385                       		asl.l	#1,d5
000069F4 DA81                       		add.l	d1,d5
000069F6 6100 0000                  		bsr.w	ScrollBlock1
000069FA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A00 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A04 323C 00DF                  		move.w	#$DF,d1
00006A08 3038 F700                  		move.w	($FFFFF700).w,d0
00006A0C 4440                       		neg.w	d0
00006A0E 4840                       		swap	d0
00006A10 3038 F708                  		move.w	($FFFFF708).w,d0
00006A14 4440                       		neg.w	d0
00006A16                            
00006A16                            loc_653C:
00006A16 22C0                       		move.l	d0,(a1)+
00006A18 51C9 FFFC                  		dbf	d1,loc_653C
00006A1C 4E75                       		rts	
00006A1E                            ; End of function Deform_SYZ
00006A1E                            
00006A1E                            ; ---------------------------------------------------------------------------
00006A1E                            ; Scrap	Brain Zone background layer deformation	code
00006A1E                            ; ---------------------------------------------------------------------------
00006A1E                            
00006A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A1E                            
00006A1E                            
00006A1E                            Deform_SBZ:				; XREF: Deform_Index
00006A1E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A22 48C4                       		ext.l	d4
00006A24 ED84                       		asl.l	#6,d4
00006A26 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A2A 48C5                       		ext.l	d5
00006A2C E985                       		asl.l	#4,d5
00006A2E E385                       		asl.l	#1,d5
00006A30 6100 0000                  		bsr.w	ScrollBlock1
00006A34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A3A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A3E 323C 00DF                  		move.w	#$DF,d1
00006A42 3038 F700                  		move.w	($FFFFF700).w,d0
00006A46 4440                       		neg.w	d0
00006A48 4840                       		swap	d0
00006A4A 3038 F708                  		move.w	($FFFFF708).w,d0
00006A4E 4440                       		neg.w	d0
00006A50                            
00006A50                            loc_6576:
00006A50 22C0                       		move.l	d0,(a1)+
00006A52 51C9 FFFC                  		dbf	d1,loc_6576
00006A56 4E75                       		rts	
00006A58                            ; End of function Deform_SBZ
00006A58                            
00006A58                            ; ---------------------------------------------------------------------------
00006A58                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006A58                            ; ---------------------------------------------------------------------------
00006A58                            
00006A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A58                            
00006A58                            
00006A58                            ScrollHoriz:				; XREF: DeformBgLayer
00006A58 3838 F700                  		move.w	($FFFFF700).w,d4
00006A5C 6100                       		bsr.s	ScrollHoriz2
00006A5E 3038 F700                  		move.w	($FFFFF700).w,d0
00006A62 0240 0010                  		andi.w	#$10,d0
00006A66 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006A6A B300                       		eor.b	d1,d0
00006A6C 6600                       		bne.s	locret_65B0
00006A6E 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006A74 3038 F700                  		move.w	($FFFFF700).w,d0
00006A78 9044                       		sub.w	d4,d0
00006A7A 6A00                       		bpl.s	loc_65AA
00006A7C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A82 4E75                       		rts	
00006A84                            ; ===========================================================================
00006A84                            
00006A84                            loc_65AA:
00006A84 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A8A                            
00006A8A                            locret_65B0:
00006A8A 4E75                       		rts	
00006A8C                            ; End of function ScrollHoriz
00006A8C                            
00006A8C                            
00006A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A8C                            
00006A8C                            
00006A8C                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A8C 3038 D008                  		move.w	($FFFFD008).w,d0
00006A90 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A94 0440 0090                  		subi.w	#$90,d0
00006A98 6500                       		bcs.s	loc_65F6
00006A9A 0440 0010                  		subi.w	#$10,d0
00006A9E 6400                       		bcc.s	loc_65CC
00006AA0 4278 F73A                  		clr.w	($FFFFF73A).w
00006AA4 4E75                       		rts	
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_65CC:
00006AA6 0C40 0010                  		cmpi.w	#$10,d0
00006AAA 6500                       		bcs.s	loc_65D6
00006AAC 303C 0010                  		move.w	#$10,d0
00006AB0                            
00006AB0                            loc_65D6:
00006AB0 D078 F700                  		add.w	($FFFFF700).w,d0
00006AB4 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006AB8 6D00                       		blt.s	loc_65E4
00006ABA 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006ABE                            
00006ABE                            loc_65E4:
00006ABE 3200                       		move.w	d0,d1
00006AC0 9278 F700                  		sub.w	($FFFFF700).w,d1
00006AC4 E141                       		asl.w	#8,d1
00006AC6 31C0 F700                  		move.w	d0,($FFFFF700).w
00006ACA 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006ACE 4E75                       		rts	
00006AD0                            ; ===========================================================================
00006AD0                            
00006AD0                            loc_65F6:				; XREF: ScrollHoriz2
00006AD0 D078 F700                  		add.w	($FFFFF700).w,d0
00006AD4 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006AD8 6EE4                       		bgt.s	loc_65E4
00006ADA 3038 F728                  		move.w	($FFFFF728).w,d0
00006ADE 60DE                       		bra.s	loc_65E4
00006AE0                            ; End of function ScrollHoriz2
00006AE0                            
00006AE0                            ; ===========================================================================
00006AE0 4A40                       		tst.w	d0
00006AE2 6A00                       		bpl.s	loc_6610
00006AE4 303C FFFE                  		move.w	#-2,d0
00006AE8 60E6                       		bra.s	loc_65F6
00006AEA                            ; ===========================================================================
00006AEA                            
00006AEA                            loc_6610:
00006AEA 303C 0002                  		move.w	#2,d0
00006AEE 60B6                       		bra.s	loc_65CC
00006AF0                            
00006AF0                            ; ---------------------------------------------------------------------------
00006AF0                            ; Subroutine to	scroll the level vertically as Sonic moves
00006AF0                            ; ---------------------------------------------------------------------------
00006AF0                            
00006AF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF0                            
00006AF0                            
00006AF0                            ScrollVertical:				; XREF: DeformBgLayer
00006AF0 7200                       		moveq	#0,d1
00006AF2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AF6 9078 F704                  		sub.w	($FFFFF704).w,d0
00006AFA 0838 0002 D022             		btst	#2,($FFFFD022).w
00006B00 6700                       		beq.s	loc_662A
00006B02 5B40                       		subq.w	#5,d0
00006B04                            
00006B04                            loc_662A:
00006B04 0838 0001 D022             		btst	#1,($FFFFD022).w
00006B0A 6700                       		beq.s	loc_664A
00006B0C 0640 0020                  		addi.w	#$20,d0
00006B10 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B14 6500                       		bcs.s	loc_6696
00006B16 0440 0040                  		subi.w	#$40,d0
00006B1A 6400                       		bcc.s	loc_6696
00006B1C 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B20 6600                       		bne.s	loc_66A8
00006B22 6000                       		bra.s	loc_6656
00006B24                            ; ===========================================================================
00006B24                            
00006B24                            loc_664A:
00006B24 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B28 6600                       		bne.s	loc_665C
00006B2A 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B2E 6600                       		bne.s	loc_66A8
00006B30                            
00006B30                            loc_6656:
00006B30 4278 F73C                  		clr.w	($FFFFF73C).w
00006B34 4E75                       		rts	
00006B36                            ; ===========================================================================
00006B36                            
00006B36                            loc_665C:
00006B36 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006B3C 6600                       		bne.s	loc_6684
00006B3E 3238 D014                  		move.w	($FFFFD014).w,d1
00006B42 6A00                       		bpl.s	loc_666C
00006B44 4441                       		neg.w	d1
00006B46                            
00006B46                            loc_666C:
00006B46 0C41 0800                  		cmpi.w	#$800,d1
00006B4A 6400                       		bcc.s	loc_6696
00006B4C 323C 0600                  		move.w	#$600,d1
00006B50 0C40 0006                  		cmpi.w	#6,d0
00006B54 6E00                       		bgt.s	loc_66F6
00006B56 0C40 FFFA                  		cmpi.w	#-6,d0
00006B5A 6D00                       		blt.s	loc_66C0
00006B5C 6000                       		bra.s	loc_66AE
00006B5E                            ; ===========================================================================
00006B5E                            
00006B5E                            loc_6684:
00006B5E 323C 0200                  		move.w	#$200,d1
00006B62 0C40 0002                  		cmpi.w	#2,d0
00006B66 6E00                       		bgt.s	loc_66F6
00006B68 0C40 FFFE                  		cmpi.w	#-2,d0
00006B6C 6D00                       		blt.s	loc_66C0
00006B6E 6000                       		bra.s	loc_66AE
00006B70                            ; ===========================================================================
00006B70                            
00006B70                            loc_6696:
00006B70 323C 1000                  		move.w	#$1000,d1
00006B74 0C40 0010                  		cmpi.w	#$10,d0
00006B78 6E00                       		bgt.s	loc_66F6
00006B7A 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B7E 6D00                       		blt.s	loc_66C0
00006B80 6000                       		bra.s	loc_66AE
00006B82                            ; ===========================================================================
00006B82                            
00006B82                            loc_66A8:
00006B82 7000                       		moveq	#0,d0
00006B84 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B88                            
00006B88                            loc_66AE:
00006B88 7200                       		moveq	#0,d1
00006B8A 3200                       		move.w	d0,d1
00006B8C D278 F704                  		add.w	($FFFFF704).w,d1
00006B90 4A40                       		tst.w	d0
00006B92 6A00 0000                  		bpl.w	loc_6700
00006B96 6000 0000                  		bra.w	loc_66CC
00006B9A                            ; ===========================================================================
00006B9A                            
00006B9A                            loc_66C0:
00006B9A 4441                       		neg.w	d1
00006B9C 48C1                       		ext.l	d1
00006B9E E181                       		asl.l	#8,d1
00006BA0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BA4 4841                       		swap	d1
00006BA6                            
00006BA6                            loc_66CC:
00006BA6 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006BAA 6E00                       		bgt.s	loc_6724
00006BAC 0C41 FF00                  		cmpi.w	#-$100,d1
00006BB0 6E00                       		bgt.s	loc_66F0
00006BB2 0241 07FF                  		andi.w	#$7FF,d1
00006BB6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BBC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006BC2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BC8 6000                       		bra.s	loc_6724
00006BCA                            ; ===========================================================================
00006BCA                            
00006BCA                            loc_66F0:
00006BCA 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006BCE 6000                       		bra.s	loc_6724
00006BD0                            ; ===========================================================================
00006BD0                            
00006BD0                            loc_66F6:
00006BD0 48C1                       		ext.l	d1
00006BD2 E181                       		asl.l	#8,d1
00006BD4 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BD8 4841                       		swap	d1
00006BDA                            
00006BDA                            loc_6700:
00006BDA B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006BDE 6D00                       		blt.s	loc_6724
00006BE0 0441 0800                  		subi.w	#$800,d1
00006BE4 6500                       		bcs.s	loc_6720
00006BE6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BEC 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006BF2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BF8 6000                       		bra.s	loc_6724
00006BFA                            ; ===========================================================================
00006BFA                            
00006BFA                            loc_6720:
00006BFA 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006BFE                            
00006BFE                            loc_6724:
00006BFE 3838 F704                  		move.w	($FFFFF704).w,d4
00006C02 4841                       		swap	d1
00006C04 2601                       		move.l	d1,d3
00006C06 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006C0A E09B                       		ror.l	#8,d3
00006C0C 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006C10 21C1 F704                  		move.l	d1,($FFFFF704).w
00006C14 3038 F704                  		move.w	($FFFFF704).w,d0
00006C18 0240 0010                  		andi.w	#$10,d0
00006C1C 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006C20 B300                       		eor.b	d1,d0
00006C22 6600                       		bne.s	locret_6766
00006C24 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006C2A 3038 F704                  		move.w	($FFFFF704).w,d0
00006C2E 9044                       		sub.w	d4,d0
00006C30 6A00                       		bpl.s	loc_6760
00006C32 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006C38 4E75                       		rts	
00006C3A                            ; ===========================================================================
00006C3A                            
00006C3A                            loc_6760:
00006C3A 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006C40                            
00006C40                            locret_6766:
00006C40 4E75                       		rts	
00006C42                            ; End of function ScrollVertical
00006C42                            
00006C42                            
00006C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C42                            
00006C42                            
00006C42                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006C42 2438 F708                  		move.l	($FFFFF708).w,d2
00006C46 2002                       		move.l	d2,d0
00006C48 D084                       		add.l	d4,d0
00006C4A 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C4E 2200                       		move.l	d0,d1
00006C50 4841                       		swap	d1
00006C52 0241 0010                  		andi.w	#$10,d1
00006C56 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006C5A B701                       		eor.b	d3,d1
00006C5C 6600                       		bne.s	loc_679C
00006C5E 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006C64 9082                       		sub.l	d2,d0
00006C66 6A00                       		bpl.s	loc_6796
00006C68 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006C6E 6000                       		bra.s	loc_679C
00006C70                            ; ===========================================================================
00006C70                            
00006C70                            loc_6796:
00006C70 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006C76                            
00006C76                            loc_679C:
00006C76 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C7A 2003                       		move.l	d3,d0
00006C7C D085                       		add.l	d5,d0
00006C7E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C82 2200                       		move.l	d0,d1
00006C84 4841                       		swap	d1
00006C86 0241 0010                  		andi.w	#$10,d1
00006C8A 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C8E B501                       		eor.b	d2,d1
00006C90 6600                       		bne.s	locret_67D0
00006C92 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C98 9083                       		sub.l	d3,d0
00006C9A 6A00                       		bpl.s	loc_67CA
00006C9C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CA2 4E75                       		rts	
00006CA4                            ; ===========================================================================
00006CA4                            
00006CA4                            loc_67CA:
00006CA4 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CAA                            
00006CAA                            locret_67D0:
00006CAA 4E75                       		rts	
00006CAC                            ; End of function ScrollBlock1
00006CAC                            
00006CAC                            
00006CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CAC                            
00006CAC                            
00006CAC                            ScrollBlock2:				; XREF: Deform_SLZ
00006CAC 2438 F708                  		move.l	($FFFFF708).w,d2
00006CB0 2002                       		move.l	d2,d0
00006CB2 D084                       		add.l	d4,d0
00006CB4 21C0 F708                  		move.l	d0,($FFFFF708).w
00006CB8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006CBC 2003                       		move.l	d3,d0
00006CBE D085                       		add.l	d5,d0
00006CC0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006CC4 2200                       		move.l	d0,d1
00006CC6 4841                       		swap	d1
00006CC8 0241 0010                  		andi.w	#$10,d1
00006CCC 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006CD0 B501                       		eor.b	d2,d1
00006CD2 6600                       		bne.s	locret_6812
00006CD4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006CDA 9083                       		sub.l	d3,d0
00006CDC 6A00                       		bpl.s	loc_680C
00006CDE 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CE4 4E75                       		rts	
00006CE6                            ; ===========================================================================
00006CE6                            
00006CE6                            loc_680C:
00006CE6 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CEC                            
00006CEC                            locret_6812:
00006CEC 4E75                       		rts	
00006CEE                            ; End of function ScrollBlock2
00006CEE                            
00006CEE                            
00006CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CEE                            
00006CEE                            
00006CEE                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006CEE 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006CF2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CF6 3200                       		move.w	d0,d1
00006CF8 0241 0010                  		andi.w	#$10,d1
00006CFC 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D00 B501                       		eor.b	d2,d1
00006D02 6600                       		bne.s	locret_6842
00006D04 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D0A 9043                       		sub.w	d3,d0
00006D0C 6A00                       		bpl.s	loc_683C
00006D0E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D14 4E75                       		rts	
00006D16                            ; ===========================================================================
00006D16                            
00006D16                            loc_683C:
00006D16 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D1C                            
00006D1C                            locret_6842:
00006D1C 4E75                       		rts	
00006D1E                            ; End of function ScrollBlock3
00006D1E                            
00006D1E                            
00006D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D1E                            
00006D1E                            
00006D1E                            ScrollBlock4:				; XREF: Deform_GHZ
00006D1E 3438 F710                  		move.w	($FFFFF710).w,d2
00006D22 3638 F714                  		move.w	($FFFFF714).w,d3
00006D26 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006D2A 48C0                       		ext.l	d0
00006D2C EF80                       		asl.l	#7,d0
00006D2E D1B8 F710                  		add.l	d0,($FFFFF710).w
00006D32 3038 F710                  		move.w	($FFFFF710).w,d0
00006D36 0240 0010                  		andi.w	#$10,d0
00006D3A 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006D3E B300                       		eor.b	d1,d0
00006D40 6600                       		bne.s	locret_6884
00006D42 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006D48 3038 F710                  		move.w	($FFFFF710).w,d0
00006D4C 9042                       		sub.w	d2,d0
00006D4E 6A00                       		bpl.s	loc_687E
00006D50 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006D56 6000                       		bra.s	locret_6884
00006D58                            ; ===========================================================================
00006D58                            
00006D58                            loc_687E:
00006D58 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006D5E                            
00006D5E                            locret_6884:
00006D5E 4E75                       		rts	
00006D60                            ; End of function ScrollBlock4
00006D60                            
00006D60                            
00006D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D60                            
00006D60                            
00006D60                            sub_6886:				; XREF: loc_C44
00006D60 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D66 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D6C 45F8 F756                  		lea	($FFFFF756).w,a2
00006D70 47F8 F708                  		lea	($FFFFF708).w,a3
00006D74 49F8 A440                  		lea	($FFFFA440).w,a4
00006D78 343C 6000                  		move.w	#$6000,d2
00006D7C 6100 0000                  		bsr.w	sub_6954
00006D80 45F8 F758                  		lea	($FFFFF758).w,a2
00006D84 47F8 F710                  		lea	($FFFFF710).w,a3
00006D88 6000 0000                  		bra.w	sub_69F4
00006D8C                            ; End of function sub_6886
00006D8C                            
00006D8C                            ; ---------------------------------------------------------------------------
00006D8C                            ; Subroutine to	display	correct	tiles as you move
00006D8C                            ; ---------------------------------------------------------------------------
00006D8C                            
00006D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D8C                            
00006D8C                            
00006D8C                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D92 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D98 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D9C 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006DA0 49F8 A440                  		lea	($FFFFA440).w,a4
00006DA4 343C 6000                  		move.w	#$6000,d2
00006DA8 6100 0000                  		bsr.w	sub_6954
00006DAC 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006DB0 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006DB4 6100 0000                  		bsr.w	sub_69F4
00006DB8 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006DBC 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006DC0 49F8 A400                  		lea	($FFFFA400).w,a4
00006DC4 343C 4000                  		move.w	#$4000,d2
00006DC8 4A12                       		tst.b	(a2)
00006DCA 6700                       		beq.s	locret_6952
00006DCC 0892 0000                  		bclr	#0,(a2)
00006DD0 6700                       		beq.s	loc_6908
00006DD2 78F0                       		moveq	#-$10,d4
00006DD4 7AF0                       		moveq	#-$10,d5
00006DD6 6100 0000                  		bsr.w	sub_6C20
00006DDA 78F0                       		moveq	#-$10,d4
00006DDC 7AF0                       		moveq	#-$10,d5
00006DDE 6100 0000                  		bsr.w	sub_6AD8
00006DE2                            
00006DE2                            loc_6908:
00006DE2 0892 0001                  		bclr	#1,(a2)
00006DE6 6700                       		beq.s	loc_6922
00006DE8 383C 00E0                  		move.w	#$E0,d4
00006DEC 7AF0                       		moveq	#-$10,d5
00006DEE 6100 0000                  		bsr.w	sub_6C20
00006DF2 383C 00E0                  		move.w	#$E0,d4
00006DF6 7AF0                       		moveq	#-$10,d5
00006DF8 6100 0000                  		bsr.w	sub_6AD8
00006DFC                            
00006DFC                            loc_6922:
00006DFC 0892 0002                  		bclr	#2,(a2)
00006E00 6700                       		beq.s	loc_6938
00006E02 78F0                       		moveq	#-$10,d4
00006E04 7AF0                       		moveq	#-$10,d5
00006E06 6100 0000                  		bsr.w	sub_6C20
00006E0A 78F0                       		moveq	#-$10,d4
00006E0C 7AF0                       		moveq	#-$10,d5
00006E0E 6100 0000                  		bsr.w	sub_6B04
00006E12                            
00006E12                            loc_6938:
00006E12 0892 0003                  		bclr	#3,(a2)
00006E16 6700                       		beq.s	locret_6952
00006E18 78F0                       		moveq	#-$10,d4
00006E1A 3A3C 0140                  		move.w	#$140,d5
00006E1E 6100 0000                  		bsr.w	sub_6C20
00006E22 78F0                       		moveq	#-$10,d4
00006E24 3A3C 0140                  		move.w	#$140,d5
00006E28 6100 0000                  		bsr.w	sub_6B04
00006E2C                            
00006E2C                            locret_6952:
00006E2C 4E75                       		rts	
00006E2E                            ; End of function LoadTilesAsYouMove
00006E2E                            
00006E2E                            
00006E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E2E                            
00006E2E                            
00006E2E                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006E2E 4A12                       		tst.b	(a2)
00006E30 6700 0000                  		beq.w	locret_69F2
00006E34 0892 0000                  		bclr	#0,(a2)
00006E38 6700                       		beq.s	loc_6972
00006E3A 78F0                       		moveq	#-$10,d4
00006E3C 7AF0                       		moveq	#-$10,d5
00006E3E 6100 0000                  		bsr.w	sub_6C20
00006E42 78F0                       		moveq	#-$10,d4
00006E44 7AF0                       		moveq	#-$10,d5
00006E46 7C1F                       		moveq	#$1F,d6
00006E48 6100 0000                  		bsr.w	sub_6ADA
00006E4C                            
00006E4C                            loc_6972:
00006E4C 0892 0001                  		bclr	#1,(a2)
00006E50 6700                       		beq.s	loc_698E
00006E52 383C 00E0                  		move.w	#$E0,d4
00006E56 7AF0                       		moveq	#-$10,d5
00006E58 6100 0000                  		bsr.w	sub_6C20
00006E5C 383C 00E0                  		move.w	#$E0,d4
00006E60 7AF0                       		moveq	#-$10,d5
00006E62 7C1F                       		moveq	#$1F,d6
00006E64 6100 0000                  		bsr.w	sub_6ADA
00006E68                            
00006E68                            loc_698E:
00006E68 0892 0002                  		bclr	#2,(a2)
00006E6C 6700                       		beq.s	loc_69BE
00006E6E 78F0                       		moveq	#-$10,d4
00006E70 7AF0                       		moveq	#-$10,d5
00006E72 6100 0000                  		bsr.w	sub_6C20
00006E76 78F0                       		moveq	#-$10,d4
00006E78 7AF0                       		moveq	#-$10,d5
00006E7A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E7E 322B 0004                  		move.w	4(a3),d1
00006E82 0241 FFF0                  		andi.w	#-$10,d1
00006E86 9C41                       		sub.w	d1,d6
00006E88 6D00                       		blt.s	loc_69BE
00006E8A E84E                       		lsr.w	#4,d6
00006E8C 0C46 000F                  		cmpi.w	#$F,d6
00006E90 6500                       		bcs.s	loc_69BA
00006E92 7C0F                       		moveq	#$F,d6
00006E94                            
00006E94                            loc_69BA:
00006E94 6100 0000                  		bsr.w	sub_6B06
00006E98                            
00006E98                            loc_69BE:
00006E98 0892 0003                  		bclr	#3,(a2)
00006E9C 6700                       		beq.s	locret_69F2
00006E9E 78F0                       		moveq	#-$10,d4
00006EA0 3A3C 0140                  		move.w	#$140,d5
00006EA4 6100 0000                  		bsr.w	sub_6C20
00006EA8 78F0                       		moveq	#-$10,d4
00006EAA 3A3C 0140                  		move.w	#$140,d5
00006EAE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EB2 322B 0004                  		move.w	4(a3),d1
00006EB6 0241 FFF0                  		andi.w	#-$10,d1
00006EBA 9C41                       		sub.w	d1,d6
00006EBC 6D00                       		blt.s	locret_69F2
00006EBE E84E                       		lsr.w	#4,d6
00006EC0 0C46 000F                  		cmpi.w	#$F,d6
00006EC4 6500                       		bcs.s	loc_69EE
00006EC6 7C0F                       		moveq	#$F,d6
00006EC8                            
00006EC8                            loc_69EE:
00006EC8 6100 0000                  		bsr.w	sub_6B06
00006ECC                            
00006ECC                            locret_69F2:
00006ECC 4E75                       		rts	
00006ECE                            ; End of function sub_6954
00006ECE                            
00006ECE                            
00006ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ECE                            
00006ECE                            
00006ECE                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006ECE 4A12                       		tst.b	(a2)
00006ED0 6700 0000                  		beq.w	locret_6A80
00006ED4 0892 0002                  		bclr	#2,(a2)
00006ED8 6700                       		beq.s	loc_6A3E
00006EDA 0C53 0010                  		cmpi.w	#$10,(a3)
00006EDE 6500                       		bcs.s	loc_6A3E
00006EE0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EE4 322B 0004                  		move.w	4(a3),d1
00006EE8 0241 FFF0                  		andi.w	#-$10,d1
00006EEC 9841                       		sub.w	d1,d4
00006EEE 3F04                       		move.w	d4,-(sp)
00006EF0 7AF0                       		moveq	#-$10,d5
00006EF2 6100 0000                  		bsr.w	sub_6C20
00006EF6 381F                       		move.w	(sp)+,d4
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EFE 322B 0004                  		move.w	4(a3),d1
00006F02 0241 FFF0                  		andi.w	#-$10,d1
00006F06 9C41                       		sub.w	d1,d6
00006F08 6D00                       		blt.s	loc_6A3E
00006F0A E84E                       		lsr.w	#4,d6
00006F0C 0446 000E                  		subi.w	#$E,d6
00006F10 6400                       		bcc.s	loc_6A3E
00006F12 4446                       		neg.w	d6
00006F14 6100 0000                  		bsr.w	sub_6B06
00006F18                            
00006F18                            loc_6A3E:
00006F18 0892 0003                  		bclr	#3,(a2)
00006F1C 6700                       		beq.s	locret_6A80
00006F1E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F22 322B 0004                  		move.w	4(a3),d1
00006F26 0241 FFF0                  		andi.w	#-$10,d1
00006F2A 9841                       		sub.w	d1,d4
00006F2C 3F04                       		move.w	d4,-(sp)
00006F2E 3A3C 0140                  		move.w	#$140,d5
00006F32 6100 0000                  		bsr.w	sub_6C20
00006F36 381F                       		move.w	(sp)+,d4
00006F38 3A3C 0140                  		move.w	#$140,d5
00006F3C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F40 322B 0004                  		move.w	4(a3),d1
00006F44 0241 FFF0                  		andi.w	#-$10,d1
00006F48 9C41                       		sub.w	d1,d6
00006F4A 6D00                       		blt.s	locret_6A80
00006F4C E84E                       		lsr.w	#4,d6
00006F4E 0446 000E                  		subi.w	#$E,d6
00006F52 6400                       		bcc.s	locret_6A80
00006F54 4446                       		neg.w	d6
00006F56 6100 0000                  		bsr.w	sub_6B06
00006F5A                            
00006F5A                            locret_6A80:
00006F5A 4E75                       		rts	
00006F5C                            ; End of function sub_69F4
00006F5C                            
00006F5C                            ; ===========================================================================
00006F5C 4A12                       		tst.b	(a2)
00006F5E 6700                       		beq.s	locret_6AD6
00006F60 0892 0002                  		bclr	#2,(a2)
00006F64 6700                       		beq.s	loc_6AAC
00006F66 383C 00D0                  		move.w	#$D0,d4
00006F6A 322B 0004                  		move.w	4(a3),d1
00006F6E 0241 FFF0                  		andi.w	#-$10,d1
00006F72 9841                       		sub.w	d1,d4
00006F74 3F04                       		move.w	d4,-(sp)
00006F76 7AF0                       		moveq	#-$10,d5
00006F78 6100 0000                  		bsr.w	sub_6C3C
00006F7C 381F                       		move.w	(sp)+,d4
00006F7E 7AF0                       		moveq	#-$10,d5
00006F80 7C02                       		moveq	#2,d6
00006F82 6100 0000                  		bsr.w	sub_6B06
00006F86                            
00006F86                            loc_6AAC:
00006F86 0892 0003                  		bclr	#3,(a2)
00006F8A 6700                       		beq.s	locret_6AD6
00006F8C 383C 00D0                  		move.w	#$D0,d4
00006F90 322B 0004                  		move.w	4(a3),d1
00006F94 0241 FFF0                  		andi.w	#-$10,d1
00006F98 9841                       		sub.w	d1,d4
00006F9A 3F04                       		move.w	d4,-(sp)
00006F9C 3A3C 0140                  		move.w	#$140,d5
00006FA0 6100 0000                  		bsr.w	sub_6C3C
00006FA4 381F                       		move.w	(sp)+,d4
00006FA6 3A3C 0140                  		move.w	#$140,d5
00006FAA 7C02                       		moveq	#2,d6
00006FAC 6100 0000                  		bsr.w	sub_6B06
00006FB0                            
00006FB0                            locret_6AD6:
00006FB0 4E75                       		rts	
00006FB2                            
00006FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB2                            
00006FB2                            
00006FB2                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006FB2 7C15                       		moveq	#$15,d6
00006FB4                            ; End of function sub_6AD8
00006FB4                            
00006FB4                            
00006FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB4                            
00006FB4                            
00006FB4                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006FB4 2E3C 0080 0000             		move.l	#$800000,d7
00006FBA 2200                       		move.l	d0,d1
00006FBC                            
00006FBC                            loc_6AE2:
00006FBC 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FC0 6100 0000                  		bsr.w	sub_6BD6
00006FC4 2001                       		move.l	d1,d0
00006FC6 6100 0000                  		bsr.w	sub_6B32
00006FCA 5801                       		addq.b	#4,d1
00006FCC 0201 007F                  		andi.b	#$7F,d1
00006FD0 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006FD4 0645 0010                  		addi.w	#$10,d5
00006FD8 51CE FFE2                  		dbf	d6,loc_6AE2
00006FDC 4E75                       		rts	
00006FDE                            ; End of function sub_6ADA
00006FDE                            
00006FDE                            
00006FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FDE                            
00006FDE                            
00006FDE                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006FDE 7C0F                       		moveq	#$F,d6
00006FE0                            ; End of function sub_6B04
00006FE0                            
00006FE0                            
00006FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FE0                            
00006FE0                            
00006FE0                            sub_6B06:				; XREF: sub_6954
00006FE0 2E3C 0080 0000             		move.l	#$800000,d7
00006FE6 2200                       		move.l	d0,d1
00006FE8                            
00006FE8                            loc_6B0E:
00006FE8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FEC 6100 0000                  		bsr.w	sub_6BD6
00006FF0 2001                       		move.l	d1,d0
00006FF2 6100 0000                  		bsr.w	sub_6B32
00006FF6 0641 0100                  		addi.w	#$100,d1
00006FFA 0241 0FFF                  		andi.w	#$FFF,d1
00006FFE 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007002 0644 0010                  		addi.w	#$10,d4
00007006 51CE FFE0                  		dbf	d6,loc_6B0E
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B06
0000700C                            
0000700C                            
0000700C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000700C                            
0000700C                            
0000700C                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000700C 8042                       		or.w	d2,d0
0000700E 4840                       		swap	d0
00007010 0810 0004                  		btst	#4,(a0)
00007014 6600                       		bne.s	loc_6B6E
00007016 0810 0003                  		btst	#3,(a0)
0000701A 6600                       		bne.s	loc_6B4E
0000701C 2A80                       		move.l	d0,(a5)
0000701E 2C99                       		move.l	(a1)+,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 2C99                       		move.l	(a1)+,(a6)
00007026 4E75                       		rts	
00007028                            ; ===========================================================================
00007028                            
00007028                            loc_6B4E:
00007028 2A80                       		move.l	d0,(a5)
0000702A 2819                       		move.l	(a1)+,d4
0000702C 0A84 0800 0800             		eori.l	#$8000800,d4
00007032 4844                       		swap	d4
00007034 2C84                       		move.l	d4,(a6)
00007036 D087                       		add.l	d7,d0
00007038 2A80                       		move.l	d0,(a5)
0000703A 2819                       		move.l	(a1)+,d4
0000703C 0A84 0800 0800             		eori.l	#$8000800,d4
00007042 4844                       		swap	d4
00007044 2C84                       		move.l	d4,(a6)
00007046 4E75                       		rts	
00007048                            ; ===========================================================================
00007048                            
00007048                            loc_6B6E:
00007048 0810 0003                  		btst	#3,(a0)
0000704C 6600                       		bne.s	loc_6B90
0000704E 2A80                       		move.l	d0,(a5)
00007050 2A19                       		move.l	(a1)+,d5
00007052 2819                       		move.l	(a1)+,d4
00007054 0A84 1000 1000             		eori.l	#$10001000,d4
0000705A 2C84                       		move.l	d4,(a6)
0000705C D087                       		add.l	d7,d0
0000705E 2A80                       		move.l	d0,(a5)
00007060 0A85 1000 1000             		eori.l	#$10001000,d5
00007066 2C85                       		move.l	d5,(a6)
00007068 4E75                       		rts	
0000706A                            ; ===========================================================================
0000706A                            
0000706A                            loc_6B90:
0000706A 2A80                       		move.l	d0,(a5)
0000706C 2A19                       		move.l	(a1)+,d5
0000706E 2819                       		move.l	(a1)+,d4
00007070 0A84 1800 1800             		eori.l	#$18001800,d4
00007076 4844                       		swap	d4
00007078 2C84                       		move.l	d4,(a6)
0000707A D087                       		add.l	d7,d0
0000707C 2A80                       		move.l	d0,(a5)
0000707E 0A85 1800 1800             		eori.l	#$18001800,d5
00007084 4845                       		swap	d5
00007086 2C85                       		move.l	d5,(a6)
00007088 4E75                       		rts	
0000708A                            ; End of function sub_6B32
0000708A                            
0000708A                            ; ===========================================================================
0000708A 4E75                       		rts	
0000708C                            ; ===========================================================================
0000708C 2A80                       		move.l	d0,(a5)
0000708E 3A3C 2000                  		move.w	#$2000,d5
00007092 3819                       		move.w	(a1)+,d4
00007094 D845                       		add.w	d5,d4
00007096 3C84                       		move.w	d4,(a6)
00007098 3819                       		move.w	(a1)+,d4
0000709A D845                       		add.w	d5,d4
0000709C 3C84                       		move.w	d4,(a6)
0000709E D087                       		add.l	d7,d0
000070A0 2A80                       		move.l	d0,(a5)
000070A2 3819                       		move.w	(a1)+,d4
000070A4 D845                       		add.w	d5,d4
000070A6 3C84                       		move.w	d4,(a6)
000070A8 3819                       		move.w	(a1)+,d4
000070AA D845                       		add.w	d5,d4
000070AC 3C84                       		move.w	d4,(a6)
000070AE 4E75                       		rts	
000070B0                            
000070B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B0                            
000070B0                            
000070B0                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000070B0 43F8 B000                  		lea	($FFFFB000).w,a1
000070B4 D86B 0004                  		add.w	4(a3),d4
000070B8 DA53                       		add.w	(a3),d5
000070BA 3604                       		move.w	d4,d3
000070BC E24B                       		lsr.w	#1,d3
000070BE 0243 0380                  		andi.w	#$380,d3
000070C2 E64D                       		lsr.w	#3,d5
000070C4 3005                       		move.w	d5,d0
000070C6 EA48                       		lsr.w	#5,d0
000070C8 0240 007F                  		andi.w	#$7F,d0
000070CC D043                       		add.w	d3,d0
000070CE 76FF                       		moveq	#-1,d3
000070D0 1634 0000                  		move.b	(a4,d0.w),d3
000070D4 6700                       		beq.s	locret_6C1E
000070D6 5303                       		subq.b	#1,d3
000070D8 0243 007F                  		andi.w	#$7F,d3
000070DC EE5B                       		ror.w	#7,d3
000070DE D844                       		add.w	d4,d4
000070E0 0244 01E0                  		andi.w	#$1E0,d4
000070E4 0245 001E                  		andi.w	#$1E,d5
000070E8 D644                       		add.w	d4,d3
000070EA D645                       		add.w	d5,d3
000070EC 2043                       		movea.l	d3,a0
000070EE 3610                       		move.w	(a0),d3
000070F0 0243 03FF                  		andi.w	#$3FF,d3
000070F4 E74B                       		lsl.w	#3,d3
000070F6 D2C3                       		adda.w	d3,a1
000070F8                            
000070F8                            locret_6C1E:
000070F8 4E75                       		rts	
000070FA                            ; End of function sub_6BD6
000070FA                            
000070FA                            
000070FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FA                            
000070FA                            
000070FA                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000070FA D86B 0004                  		add.w	4(a3),d4
000070FE DA53                       		add.w	(a3),d5
00007100 0244 00F0                  		andi.w	#$F0,d4
00007104 0245 01F0                  		andi.w	#$1F0,d5
00007108 E94C                       		lsl.w	#4,d4
0000710A E44D                       		lsr.w	#2,d5
0000710C D845                       		add.w	d5,d4
0000710E 7003                       		moveq	#3,d0
00007110 4840                       		swap	d0
00007112 3004                       		move.w	d4,d0
00007114 4E75                       		rts	
00007116                            ; End of function sub_6C20
00007116                            
00007116                            
00007116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007116                            ; not used
00007116                            
00007116                            
00007116                            sub_6C3C:
00007116 D86B 0004                  		add.w	4(a3),d4
0000711A DA53                       		add.w	(a3),d5
0000711C 0244 00F0                  		andi.w	#$F0,d4
00007120 0245 01F0                  		andi.w	#$1F0,d5
00007124 E94C                       		lsl.w	#4,d4
00007126 E44D                       		lsr.w	#2,d5
00007128 D845                       		add.w	d5,d4
0000712A 7002                       		moveq	#2,d0
0000712C 4840                       		swap	d0
0000712E 3004                       		move.w	d4,d0
00007130 4E75                       		rts	
00007132                            ; End of function sub_6C3C
00007132                            
00007132                            ; ---------------------------------------------------------------------------
00007132                            ; Subroutine to	load tiles as soon as the level	appears
00007132                            ; ---------------------------------------------------------------------------
00007132                            
00007132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007132                            
00007132                            
00007132                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007132 4BF9 00C0 0004             		lea	($C00004).l,a5
00007138 4DF9 00C0 0000             		lea	($C00000).l,a6
0000713E 47F8 F700                  		lea	($FFFFF700).w,a3
00007142 49F8 A400                  		lea	($FFFFA400).w,a4
00007146 343C 4000                  		move.w	#$4000,d2
0000714A 6100                       		bsr.s	LoadTilesFromStart2
0000714C 47F8 F708                  		lea	($FFFFF708).w,a3
00007150 49F8 A440                  		lea	($FFFFA440).w,a4
00007154 343C 6000                  		move.w	#$6000,d2
00007158                            ; End of function LoadTilesFromStart
00007158                            
00007158                            
00007158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007158                            
00007158                            
00007158                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007158 78F0                       		moveq	#-$10,d4
0000715A 7C0F                       		moveq	#$F,d6
0000715C                            
0000715C                            loc_6C82:
0000715C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007160 7A00                       		moveq	#0,d5
00007162 3204                       		move.w	d4,d1
00007164 6100 FF94                  		bsr.w	sub_6C20
00007168 3801                       		move.w	d1,d4
0000716A 7A00                       		moveq	#0,d5
0000716C 7C1F                       		moveq	#$1F,d6
0000716E 6100 FE44                  		bsr.w	sub_6ADA
00007172 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007176 0644 0010                  		addi.w	#$10,d4
0000717A 51CE FFE0                  		dbf	d6,loc_6C82
0000717E 4E75                       		rts	
00007180                            ; End of function LoadTilesFromStart2
00007180                            
00007180                            ; ---------------------------------------------------------------------------
00007180                            ; Main Load Block loading subroutine
00007180                            ; ---------------------------------------------------------------------------
00007180                            
00007180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007180                            
00007180                            
00007180                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007180 7000                       		moveq	#0,d0
00007182 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007186 E948                       		lsl.w	#4,d0
00007188 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000718E 45F2 0000                  		lea	(a2,d0.w),a2
00007192 2F0A                       		move.l	a2,-(sp)
00007194 588A                       		addq.l	#4,a2
00007196 205A                       		movea.l	(a2)+,a0
00007198 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000719C 303C 0000                  		move.w	#0,d0
000071A0 6100 A7A0                  		bsr.w	EniDec
000071A4 205A                       		movea.l	(a2)+,a0
000071A6 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000071AC 6100 A912                  		bsr.w	KosDec
000071B0 6100 0000                  		bsr.w	LevelLayoutLoad
000071B4 301A                       		move.w	(a2)+,d0
000071B6 3012                       		move.w	(a2),d0
000071B8 0240 00FF                  		andi.w	#$FF,d0
000071BC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000071C2 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000071C4 700C                       		moveq	#$C,d0		; use SB3 pallet
000071C6                            
000071C6                            MLB_ChkSBZPal:
000071C6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000071CC 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000071CE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000071D4 6600                       		bne.s	MLB_NormalPal	; if not, branch
000071D6                            
000071D6                            MLB_UsePal0E:
000071D6 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000071D8                            
000071D8                            MLB_NormalPal:
000071D8 6100 B10C                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000071DC 245F                       		movea.l	(sp)+,a2
000071DE 584A                       		addq.w	#4,a2
000071E0 7000                       		moveq	#0,d0
000071E2 1012                       		move.b	(a2),d0
000071E4 6700                       		beq.s	locret_6D10
000071E6 6100 A5BC                  		bsr.w	LoadPLC		; load pattern load cues
000071EA                            
000071EA                            locret_6D10:
000071EA 4E75                       		rts	
000071EC                            ; End of function MainLoadBlockLoad
000071EC                            
000071EC                            ; ---------------------------------------------------------------------------
000071EC                            ; Level	layout loading subroutine
000071EC                            ; ---------------------------------------------------------------------------
000071EC                            
000071EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071EC                            
000071EC                            
000071EC                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000071EC 47F8 A400                  		lea	($FFFFA400).w,a3
000071F0 323C 01FF                  		move.w	#$1FF,d1
000071F4 7000                       		moveq	#0,d0
000071F6                            
000071F6                            LevLoad_ClrRam:
000071F6 26C0                       		move.l	d0,(a3)+
000071F8 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000071FC                            
000071FC 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007200 7200                       		moveq	#0,d1
00007202 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007206 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000720A 7202                       		moveq	#2,d1
0000720C                            ; End of function LevelLayoutLoad
0000720C                            
0000720C                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000720C                            
0000720C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000720C                            
0000720C                            
0000720C                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000720C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007210 ED08                       		lsl.b	#6,d0
00007212 EA48                       		lsr.w	#5,d0
00007214 3400                       		move.w	d0,d2
00007216 D040                       		add.w	d0,d0
00007218 D042                       		add.w	d2,d0
0000721A D041                       		add.w	d1,d0
0000721C 43F9 0000 0000             		lea	(Level_Index).l,a1
00007222 3031 0000                  		move.w	(a1,d0.w),d0
00007226 43F1 0000                  		lea	(a1,d0.w),a1
0000722A 7200                       		moveq	#0,d1
0000722C 3401                       		move.w	d1,d2
0000722E 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007230 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007232                            
00007232                            LevLoad_NumRows:
00007232 3001                       		move.w	d1,d0
00007234 204B                       		movea.l	a3,a0
00007236                            
00007236                            LevLoad_Row:
00007236 10D9                       		move.b	(a1)+,(a0)+
00007238 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000723C 47EB 0080                  		lea	$80(a3),a3	; do next row
00007240 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007244 4E75                       		rts	
00007246                            ; End of function LevelLayoutLoad2
00007246                            
00007246                            ; ---------------------------------------------------------------------------
00007246                            ; Dynamic screen resize	loading	subroutine
00007246                            ; ---------------------------------------------------------------------------
00007246                            
00007246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007246                            
00007246                            
00007246                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007246 7000                       		moveq	#0,d0
00007248 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000724C D040                       		add.w	d0,d0
0000724E 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007252 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007256 7202                       		moveq	#2,d1
00007258 3038 F726                  		move.w	($FFFFF726).w,d0
0000725C 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007260 6700                       		beq.s	locret_6DAA
00007262 6400                       		bcc.s	loc_6DAC
00007264 4441                       		neg.w	d1
00007266 3038 F704                  		move.w	($FFFFF704).w,d0
0000726A B078 F726                  		cmp.w	($FFFFF726).w,d0
0000726E 6300                       		bls.s	loc_6DA0
00007270 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007274 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000727A                            
0000727A                            loc_6DA0:
0000727A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000727E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007284                            
00007284                            locret_6DAA:
00007284 4E75                       		rts	
00007286                            ; ===========================================================================
00007286                            
00007286                            loc_6DAC:				; XREF: DynScrResizeLoad
00007286 3038 F704                  		move.w	($FFFFF704).w,d0
0000728A 5040                       		addq.w	#8,d0
0000728C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007290 6500                       		bcs.s	loc_6DC4
00007292 0838 0001 D022             		btst	#1,($FFFFD022).w
00007298 6700                       		beq.s	loc_6DC4
0000729A D241                       		add.w	d1,d1
0000729C D241                       		add.w	d1,d1
0000729E                            
0000729E                            loc_6DC4:
0000729E D378 F72E                  		add.w	d1,($FFFFF72E).w
000072A2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000072A8 4E75                       		rts	
000072AA                            ; End of function DynScrResizeLoad
000072AA                            
000072AA                            ; ===========================================================================
000072AA                            ; ---------------------------------------------------------------------------
000072AA                            ; Offset index for dynamic screen resizing
000072AA                            ; ---------------------------------------------------------------------------
000072AA 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000072AE 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000072B2 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000072B6 0000                       		dc.w Resize_Ending-Resize_Index
000072B8                            ; ===========================================================================
000072B8                            ; ---------------------------------------------------------------------------
000072B8                            ; Green	Hill Zone dynamic screen resizing
000072B8                            ; ---------------------------------------------------------------------------
000072B8                            
000072B8                            Resize_GHZ:				; XREF: Resize_Index
000072B8 7000                       		moveq	#0,d0
000072BA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072BE D040                       		add.w	d0,d0
000072C0 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000072C4 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000072C8                            ; ===========================================================================
000072C8 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000072CA 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000072CC 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000072CE                            ; ===========================================================================
000072CE                            
000072CE                            Resize_GHZ1:
000072CE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000072D4 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000072DA 6500                       		bcs.s	locret_6E08	; if not, branch
000072DC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000072E2                            
000072E2                            locret_6E08:
000072E2 4E75                       		rts	
000072E4                            ; ===========================================================================
000072E4                            
000072E4                            Resize_GHZ2:
000072E4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072EA 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000072F0 6500                       		bcs.s	locret_6E3A
000072F2 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000072F8 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000072FE 6500                       		bcs.s	locret_6E3A
00007300 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007306 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000730C 6500                       		bcs.s	locret_6E3A
0000730E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007314                            
00007314                            locret_6E3A:
00007314 4E75                       		rts	
00007316                            ; ===========================================================================
00007316                            
00007316                            Resize_GHZ3:
00007316 7000                       		moveq	#0,d0
00007318 1038 F742                  		move.b	($FFFFF742).w,d0
0000731C 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007320 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007324                            ; ===========================================================================
00007324 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007326 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007328 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            Resize_GHZ3main:
0000732A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007330 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007336 6500                       		bcs.s	locret_6E96
00007338 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000733E 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007344 6500                       		bcs.s	locret_6E96
00007346 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000734C 6500                       		bcs.s	loc_6E98
0000734E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007354 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000735A 6400                       		bcc.s	loc_6E8E
0000735C 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007362 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007368                            
00007368                            loc_6E8E:
00007368 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000736E 6400                       		bcc.s	loc_6E98
00007370                            
00007370                            locret_6E96:
00007370 4E75                       		rts	
00007372                            ; ===========================================================================
00007372                            
00007372                            loc_6E98:
00007372 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007378 5438 F742                  		addq.b	#2,($FFFFF742).w
0000737C 4E75                       		rts	
0000737E                            ; ===========================================================================
0000737E                            
0000737E                            Resize_GHZ3boss:
0000737E 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007384 6400                       		bcc.s	loc_6EB0
00007386 5538 F742                  		subq.b	#2,($FFFFF742).w
0000738A                            
0000738A                            loc_6EB0:
0000738A 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007390 6500                       		bcs.s	locret_6EE8
00007392 6100 0000                  		bsr.w	SingleObjLoad
00007396 6600                       		bne.s	loc_6ED0
00007398 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000739C 337C 2A60 0008             		move.w	#$2A60,8(a1)
000073A2 337C 0280 000C             		move.w	#$280,$C(a1)
000073A8                            
000073A8                            loc_6ED0:
000073A8 303C 008C                  		move.w	#$8C,d0
000073AC 6100 A20C                  		bsr.w	PlaySound	; play boss music
000073B0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000073BA 7011                       		moveq	#$11,d0
000073BC 6000 A3E6                  		bra.w	LoadPLC		; load boss patterns
000073C0                            ; ===========================================================================
000073C0                            
000073C0                            locret_6EE8:
000073C0 4E75                       		rts	
000073C2                            ; ===========================================================================
000073C2                            
000073C2                            Resize_GHZ3end:
000073C2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073C8 4E75                       		rts	
000073CA                            ; ===========================================================================
000073CA                            ; ---------------------------------------------------------------------------
000073CA                            ; Labyrinth Zone dynamic screen	resizing
000073CA                            ; ---------------------------------------------------------------------------
000073CA                            
000073CA                            Resize_LZ:				; XREF: Resize_Index
000073CA 7000                       		moveq	#0,d0
000073CC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073D0 D040                       		add.w	d0,d0
000073D2 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000073D6 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000073DA                            ; ===========================================================================
000073DA 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000073DC 0000                       		dc.w Resize_LZ12-Resize_LZx
000073DE 0000                       		dc.w Resize_LZ3-Resize_LZx
000073E0 0000                       		dc.w Resize_SBZ3-Resize_LZx
000073E2                            ; ===========================================================================
000073E2                            
000073E2                            Resize_LZ12:
000073E2 4E75                       		rts	
000073E4                            ; ===========================================================================
000073E4                            
000073E4                            Resize_LZ3:
000073E4 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000073E8 6700                       		beq.s	loc_6F28	; if not, branch
000073EA 43F8 A506                  		lea	($FFFFA506).w,a1
000073EE 0C11 0007                  		cmpi.b	#7,(a1)
000073F2 6700                       		beq.s	loc_6F28
000073F4 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000073F8 303C 00B7                  		move.w	#$B7,d0
000073FC 6100 A1C2                  		bsr.w	PlaySound_Special ; play rumbling sound
00007400                            
00007400                            loc_6F28:
00007400 4A38 F742                  		tst.b	($FFFFF742).w
00007404 6600                       		bne.s	locret_6F64
00007406 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000740C 6500                       		bcs.s	locret_6F62
0000740E 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007414 6400                       		bcc.s	locret_6F62
00007416 6100 0000                  		bsr.w	SingleObjLoad
0000741A 6600                       		bne.s	loc_6F4A
0000741C 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007420                            
00007420                            loc_6F4A:
00007420 303C 008C                  		move.w	#$8C,d0
00007424 6100 A194                  		bsr.w	PlaySound	; play boss music
00007428 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000742E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007432 7011                       		moveq	#$11,d0
00007434 6000 A36E                  		bra.w	LoadPLC		; load boss patterns
00007438                            ; ===========================================================================
00007438                            
00007438                            locret_6F62:
00007438 4E75                       		rts	
0000743A                            ; ===========================================================================
0000743A                            
0000743A                            locret_6F64:
0000743A 4E75                       		rts	
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            Resize_SBZ3:
0000743C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007442 6500                       		bcs.s	locret_6F8C
00007444 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000744A 6400                       		bcc.s	locret_6F8C	; if not, branch
0000744C 4238 FE30                  		clr.b	($FFFFFE30).w
00007450 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007456 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000745C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007462                            
00007462                            locret_6F8C:
00007462 4E75                       		rts	
00007464                            ; ===========================================================================
00007464                            ; ---------------------------------------------------------------------------
00007464                            ; Marble Zone dynamic screen resizing
00007464                            ; ---------------------------------------------------------------------------
00007464                            
00007464                            Resize_MZ:				; XREF: Resize_Index
00007464 7000                       		moveq	#0,d0
00007466 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000746A D040                       		add.w	d0,d0
0000746C 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007470 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007474                            ; ===========================================================================
00007474 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007476 0000                       		dc.w Resize_MZ2-Resize_MZx
00007478 0000                       		dc.w Resize_MZ3-Resize_MZx
0000747A                            ; ===========================================================================
0000747A                            
0000747A                            Resize_MZ1:
0000747A 7000                       		moveq	#0,d0
0000747C 1038 F742                  		move.b	($FFFFF742).w,d0
00007480 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007484 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007488                            ; ===========================================================================
00007488 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000748A 0000                       		dc.w loc_6FEA-off_6FB2
0000748C 0000                       		dc.w loc_702E-off_6FB2
0000748E 0000                       		dc.w loc_7050-off_6FB2
00007490                            ; ===========================================================================
00007490                            
00007490                            loc_6FBA:
00007490 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007496 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000749C 6500                       		bcs.s	locret_6FE8
0000749E 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000074A4 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000074AA 6500                       		bcs.s	locret_6FE8
000074AC 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074B2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074B8 6500                       		bcs.s	locret_6FE8
000074BA 5438 F742                  		addq.b	#2,($FFFFF742).w
000074BE                            
000074BE                            locret_6FE8:
000074BE 4E75                       		rts	
000074C0                            ; ===========================================================================
000074C0                            
000074C0                            loc_6FEA:
000074C0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074C6 6400                       		bcc.s	loc_6FF8
000074C8 5538 F742                  		subq.b	#2,($FFFFF742).w
000074CC 4E75                       		rts	
000074CE                            ; ===========================================================================
000074CE                            
000074CE                            loc_6FF8:
000074CE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074D4 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000074DA 6400                       		bcc.s	locret_702C
000074DC 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000074E2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074E8 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000074EE 6400                       		bcc.s	locret_702C
000074F0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074F6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000074FC 6500                       		bcs.s	locret_702C
000074FE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007502                            
00007502                            locret_702C:
00007502 4E75                       		rts	
00007504                            ; ===========================================================================
00007504                            
00007504                            loc_702E:
00007504 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000750A 6400                       		bcc.s	loc_703C
0000750C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007510 4E75                       		rts	
00007512                            ; ===========================================================================
00007512                            
00007512                            loc_703C:
00007512 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007518 6500                       		bcs.s	locret_704E
0000751A 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007520 5438 F742                  		addq.b	#2,($FFFFF742).w
00007524                            
00007524                            locret_704E:
00007524 4E75                       		rts	
00007526                            ; ===========================================================================
00007526                            
00007526                            loc_7050:
00007526 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000752C 6500                       		bcs.s	locret_7072
0000752E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007534 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000753A 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007540 6500                       		bcs.s	locret_7072
00007542 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007548                            
00007548                            locret_7072:
00007548 4E75                       		rts	
0000754A                            ; ===========================================================================
0000754A                            
0000754A                            Resize_MZ2:
0000754A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007550 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007556 6500                       		bcs.s	locret_7088
00007558 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000755E                            
0000755E                            locret_7088:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_MZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007570 0000                       		dc.w Resize_MZ3end-off_7098
00007572                            ; ===========================================================================
00007572                            
00007572                            Resize_MZ3boss:
00007572 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007578 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000757E 6500                       		bcs.s	locret_70E8
00007580 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007586 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000758C 6500                       		bcs.s	locret_70E8
0000758E 6100 0000                  		bsr.w	SingleObjLoad
00007592 6600                       		bne.s	loc_70D0
00007594 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007598 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000759E 337C 022C 000C             		move.w	#$22C,$C(a1)
000075A4                            
000075A4                            loc_70D0:
000075A4 303C 008C                  		move.w	#$8C,d0
000075A8 6100 A010                  		bsr.w	PlaySound	; play boss music
000075AC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075B6 7011                       		moveq	#$11,d0
000075B8 6000 A1EA                  		bra.w	LoadPLC		; load boss patterns
000075BC                            ; ===========================================================================
000075BC                            
000075BC                            locret_70E8:
000075BC 4E75                       		rts	
000075BE                            ; ===========================================================================
000075BE                            
000075BE                            Resize_MZ3end:
000075BE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075C4 4E75                       		rts	
000075C6                            ; ===========================================================================
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            ; Star Light Zone dynamic screen resizing
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            
000075C6                            Resize_SLZ:				; XREF: Resize_Index
000075C6 7000                       		moveq	#0,d0
000075C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075CC D040                       		add.w	d0,d0
000075CE 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000075D2 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000075D6                            ; ===========================================================================
000075D6 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000075D8 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000075DA 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            Resize_SLZ1:
000075DC 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000075E2 4E75                       		rts	
000075E4                            
000075E4                            Resize_SLZ2:
000075E4 4E75                       		rts	
000075E6                            ; ===========================================================================
000075E6                            
000075E6                            Resize_SLZ3:
000075E6 7000                       		moveq	#0,d0
000075E8 1038 F742                  		move.b	($FFFFF742).w,d0
000075EC 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000075F0 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000075F4                            ; ===========================================================================
000075F4 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000075F6 0000                       		dc.w Resize_SLZ3boss-off_7118
000075F8 0000                       		dc.w Resize_SLZ3end-off_7118
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SLZ3main:
000075FA 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007600 6500                       		bcs.s	locret_7130
00007602 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007608 5438 F742                  		addq.b	#2,($FFFFF742).w
0000760C                            
0000760C                            locret_7130:
0000760C 4E75                       		rts	
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SLZ3boss:
0000760E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007614 6500                       		bcs.s	locret_715C
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	loc_7144
0000761C 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007620                            
00007620                            loc_7144:
00007620 303C 008C                  		move.w	#$8C,d0
00007624 6100 9F94                  		bsr.w	PlaySound	; play boss music
00007628 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000762E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007632 7011                       		moveq	#$11,d0
00007634 6000 A16E                  		bra.w	LoadPLC		; load boss patterns
00007638                            ; ===========================================================================
00007638                            
00007638                            locret_715C:
00007638 4E75                       		rts	
0000763A                            ; ===========================================================================
0000763A                            
0000763A                            Resize_SLZ3end:
0000763A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007640 4E75                       		rts
00007642 4E75                       		rts
00007644                            ; ===========================================================================
00007644                            ; ---------------------------------------------------------------------------
00007644                            ; Spring Yard Zone dynamic screen resizing
00007644                            ; ---------------------------------------------------------------------------
00007644                            
00007644                            Resize_SYZ:				; XREF: Resize_Index
00007644 7000                       		moveq	#0,d0
00007646 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000764A D040                       		add.w	d0,d0
0000764C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007650 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007654                            ; ===========================================================================
00007654 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007656 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007658 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000765A                            ; ===========================================================================
0000765A                            
0000765A                            Resize_SYZ1:
0000765A 4E75                       		rts	
0000765C                            ; ===========================================================================
0000765C                            
0000765C                            Resize_SYZ2:
0000765C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007662 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007668 6500                       		bcs.s	locret_71A2
0000766A 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007670 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007676 6500                       		bcs.s	locret_71A2
00007678 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000767E                            
0000767E                            locret_71A2:
0000767E 4E75                       		rts	
00007680                            ; ===========================================================================
00007680                            
00007680                            Resize_SYZ3:
00007680 7000                       		moveq	#0,d0
00007682 1038 F742                  		move.b	($FFFFF742).w,d0
00007686 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000768A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000768E                            ; ===========================================================================
0000768E 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007690 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007692 0000                       		dc.w Resize_SYZ3end-off_71B2
00007694                            ; ===========================================================================
00007694                            
00007694                            Resize_SYZ3main:
00007694 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000769A 6500                       		bcs.s	locret_71CE
0000769C 6100 0000                  		bsr.w	SingleObjLoad
000076A0 6600                       		bne.s	locret_71CE
000076A2 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000076A6 5438 F742                  		addq.b	#2,($FFFFF742).w
000076AA                            
000076AA                            locret_71CE:
000076AA 4E75                       		rts	
000076AC                            ; ===========================================================================
000076AC                            
000076AC                            Resize_SYZ3boss:
000076AC 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000076B2 6500                       		bcs.s	locret_7200
000076B4 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000076BA 6100 0000                  		bsr.w	SingleObjLoad
000076BE 6600                       		bne.s	loc_71EC
000076C0 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000076C4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076C8                            
000076C8                            loc_71EC:
000076C8 303C 008C                  		move.w	#$8C,d0
000076CC 6100 9EEC                  		bsr.w	PlaySound	; play boss music
000076D0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076D6 7011                       		moveq	#$11,d0
000076D8 6000 A0CA                  		bra.w	LoadPLC		; load boss patterns
000076DC                            ; ===========================================================================
000076DC                            
000076DC                            locret_7200:
000076DC 4E75                       		rts	
000076DE                            ; ===========================================================================
000076DE                            
000076DE                            Resize_SYZ3end:
000076DE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076E4 4E75                       		rts	
000076E6                            ; ===========================================================================
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            ; Scrap	Brain Zone dynamic screen resizing
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            
000076E6                            Resize_SBZ:				; XREF: Resize_Index
000076E6 7000                       		moveq	#0,d0
000076E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076EC D040                       		add.w	d0,d0
000076EE 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000076F2 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000076F6                            ; ===========================================================================
000076F6 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000076F8 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000076FA 0000                       		dc.w Resize_FZ-Resize_SBZx
000076FC                            ; ===========================================================================
000076FC                            
000076FC                            Resize_SBZ1:
000076FC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007702 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007708 6500                       		bcs.s	locret_7242
0000770A 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007710 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007716 6500                       		bcs.s	locret_7242
00007718 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000771E                            
0000771E                            locret_7242:
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_SBZ2:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007730 0000                       		dc.w Resize_SBZ2boss-off_7252
00007732 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007734 0000                       		dc.w Resize_SBZ2end-off_7252
00007736                            ; ===========================================================================
00007736                            
00007736                            Resize_SBZ2main:
00007736 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000773C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007742 6500                       		bcs.s	locret_727A
00007744 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000774A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007750 6500                       		bcs.s	locret_727A
00007752 5438 F742                  		addq.b	#2,($FFFFF742).w
00007756                            
00007756                            locret_727A:
00007756 4E75                       		rts	
00007758                            ; ===========================================================================
00007758                            
00007758                            Resize_SBZ2boss:
00007758 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000775E 6500                       		bcs.s	locret_7298
00007760 6100 0000                  		bsr.w	SingleObjLoad
00007764 6600                       		bne.s	locret_7298
00007766 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000776A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000776E 701E                       		moveq	#$1E,d0
00007770 6000 A032                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007774                            ; ===========================================================================
00007774                            
00007774                            locret_7298:
00007774 4E75                       		rts	
00007776                            ; ===========================================================================
00007776                            
00007776                            Resize_SBZ2boss2:
00007776 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000777C 6500                       		bcs.s	loc_72B6
0000777E 6100 0000                  		bsr.w	SingleObjLoad
00007782 6600                       		bne.s	loc_72B0
00007784 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007788 5438 F742                  		addq.b	#2,($FFFFF742).w
0000778C                            
0000778C                            loc_72B0:
0000778C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007792                            
00007792                            loc_72B6:
00007792 6000                       		bra.s	loc_72C2
00007794                            ; ===========================================================================
00007794                            
00007794                            Resize_SBZ2end:
00007794 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000779A 6500                       		bcs.s	loc_72C2
0000779C 4E75                       		rts	
0000779E                            ; ===========================================================================
0000779E                            
0000779E                            loc_72C2:
0000779E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077A4 4E75                       		rts	
000077A6                            ; ===========================================================================
000077A6                            
000077A6                            Resize_FZ:
000077A6 7000                       		moveq	#0,d0
000077A8 1038 F742                  		move.b	($FFFFF742).w,d0
000077AC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000077B0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000077B4                            ; ===========================================================================
000077B4 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000077B8 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000077BC 0000                       		dc.w Resize_FZend2-off_72D8
000077BE                            ; ===========================================================================
000077BE                            
000077BE                            Resize_FZmain:
000077BE 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000077C4 6500                       		bcs.s	loc_72F4
000077C6 5438 F742                  		addq.b	#2,($FFFFF742).w
000077CA 701F                       		moveq	#$1F,d0
000077CC 6100 9FD6                  		bsr.w	LoadPLC		; load FZ boss patterns
000077D0                            
000077D0                            loc_72F4:
000077D0 60CC                       		bra.s	loc_72C2
000077D2                            ; ===========================================================================
000077D2                            
000077D2                            Resize_FZboss:
000077D2 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000077D8 6500                       		bcs.s	loc_7312
000077DA 6100 0000                  		bsr.w	SingleObjLoad
000077DE 6600                       		bne.s	loc_7312
000077E0 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000077E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000077E8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077EE                            
000077EE                            loc_7312:
000077EE 60AE                       		bra.s	loc_72C2
000077F0                            ; ===========================================================================
000077F0                            
000077F0                            Resize_FZend:
000077F0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000077F6 6500                       		bcs.s	loc_7320
000077F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000077FC                            
000077FC                            loc_7320:
000077FC 60A0                       		bra.s	loc_72C2
000077FE                            ; ===========================================================================
000077FE                            
000077FE                            locret_7322:
000077FE 4E75                       		rts	
00007800                            ; ===========================================================================
00007800                            
00007800                            Resize_FZend2:
00007800 609C                       		bra.s	loc_72C2
00007802                            ; ===========================================================================
00007802                            ; ---------------------------------------------------------------------------
00007802                            ; Ending sequence dynamic screen resizing (empty)
00007802                            ; ---------------------------------------------------------------------------
00007802                            
00007802                            Resize_Ending:				; XREF: Resize_Index
00007802 4E75                       		rts	
00007804                            ; ===========================================================================
00007804                            ; ---------------------------------------------------------------------------
00007804                            ; Object 11 - GHZ bridge
00007804                            ; ---------------------------------------------------------------------------
00007804                            
00007804                            Obj11:					; XREF: Obj_Index
00007804 7000                       		moveq	#0,d0
00007806 1028 0024                  		move.b	$24(a0),d0
0000780A 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000780E 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007812                            ; ===========================================================================
00007812 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007816 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000781A 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000781E                            ; ===========================================================================
0000781E                            
0000781E                            Obj11_Main:				; XREF: Obj11_Index
0000781E 5428 0024                  		addq.b	#2,$24(a0)
00007822 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000782A 317C 438E 0002             		move.w	#$438E,2(a0)
00007830 117C 0004 0001             		move.b	#4,1(a0)
00007836 117C 0003 0018             		move.b	#3,$18(a0)
0000783C 117C 0080 0019             		move.b	#$80,$19(a0)
00007842 3428 000C                  		move.w	$C(a0),d2
00007846 3628 0008                  		move.w	8(a0),d3
0000784A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000784C 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007850 7200                       		moveq	#0,d1
00007852 1212                       		move.b	(a2),d1		; copy a2 to d1
00007854 14FC 0000                  		move.b	#0,(a2)+
00007858 3001                       		move.w	d1,d0
0000785A E248                       		lsr.w	#1,d0
0000785C E948                       		lsl.w	#4,d0
0000785E 9640                       		sub.w	d0,d3
00007860 5501                       		subq.b	#2,d1
00007862 6500                       		bcs.s	Obj11_Action
00007864                            
00007864                            Obj11_MakeBdg:
00007864 6100 0000                  		bsr.w	SingleObjLoad
00007868 6600                       		bne.s	Obj11_Action
0000786A 5228 0028                  		addq.b	#1,$28(a0)
0000786E B668 0008                  		cmp.w	8(a0),d3
00007872 6600                       		bne.s	loc_73B8
00007874 0643 0010                  		addi.w	#$10,d3
00007878 3142 000C                  		move.w	d2,$C(a0)
0000787C 3142 003C                  		move.w	d2,$3C(a0)
00007880 3A08                       		move.w	a0,d5
00007882 0445 D000                  		subi.w	#-$3000,d5
00007886 EC4D                       		lsr.w	#6,d5
00007888 0245 007F                  		andi.w	#$7F,d5
0000788C 14C5                       		move.b	d5,(a2)+
0000788E 5228 0028                  		addq.b	#1,$28(a0)
00007892                            
00007892                            loc_73B8:				; XREF: ROM:00007398j
00007892 3A09                       		move.w	a1,d5
00007894 0445 D000                  		subi.w	#-$3000,d5
00007898 EC4D                       		lsr.w	#6,d5
0000789A 0245 007F                  		andi.w	#$7F,d5
0000789E 14C5                       		move.b	d5,(a2)+
000078A0 137C 000A 0024             		move.b	#$A,$24(a1)
000078A6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000078A8 3342 000C                  		move.w	d2,$C(a1)
000078AC 3342 003C                  		move.w	d2,$3C(a1)
000078B0 3343 0008                  		move.w	d3,8(a1)
000078B4 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000078BC 337C 438E 0002             		move.w	#$438E,2(a1)
000078C2 137C 0004 0001             		move.b	#4,1(a1)
000078C8 137C 0003 0018             		move.b	#3,$18(a1)
000078CE 137C 0008 0019             		move.b	#8,$19(a1)
000078D4 0643 0010                  		addi.w	#$10,d3
000078D8 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000078DC                            
000078DC                            Obj11_Action:				; XREF: Obj11_Index
000078DC 6100                       		bsr.s	Obj11_Solid
000078DE 4A28 003E                  		tst.b	$3E(a0)
000078E2 6700                       		beq.s	Obj11_Display
000078E4 5928 003E                  		subq.b	#4,$3E(a0)
000078E8 6100 0000                  		bsr.w	Obj11_Bend
000078EC                            
000078EC                            Obj11_Display:
000078EC 6100 0000                  		bsr.w	DisplaySprite
000078F0 6000 0000                  		bra.w	Obj11_ChkDel
000078F4                            
000078F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078F4                            
000078F4                            
000078F4                            Obj11_Solid:				; XREF: Obj11_Action
000078F4 7200                       		moveq	#0,d1
000078F6 1228 0028                  		move.b	$28(a0),d1
000078FA E749                       		lsl.w	#3,d1
000078FC 3401                       		move.w	d1,d2
000078FE 5041                       		addq.w	#8,d1
00007900 D442                       		add.w	d2,d2
00007902 43F8 D000                  		lea	($FFFFD000).w,a1
00007906 4A69 0012                  		tst.w	$12(a1)
0000790A 6B00 0000                  		bmi.w	locret_751E
0000790E 3029 0008                  		move.w	8(a1),d0
00007912 9068 0008                  		sub.w	8(a0),d0
00007916 D041                       		add.w	d1,d0
00007918 6B00 0000                  		bmi.w	locret_751E
0000791C B042                       		cmp.w	d2,d0
0000791E 6400 0000                  		bcc.w	locret_751E
00007922 6000                       		bra.s	Platform2
00007924                            ; End of function Obj11_Solid
00007924                            
00007924                            ; ---------------------------------------------------------------------------
00007924                            ; Platform subroutine
00007924                            ; ---------------------------------------------------------------------------
00007924                            
00007924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007924                            
00007924                            
00007924                            PlatformObject:
00007924 43F8 D000                  		lea	($FFFFD000).w,a1
00007928 4A69 0012                  		tst.w	$12(a1)
0000792C 6B00 0000                  		bmi.w	locret_751E
00007930 3029 0008                  		move.w	8(a1),d0
00007934 9068 0008                  		sub.w	8(a0),d0
00007938 D041                       		add.w	d1,d0
0000793A 6B00 0000                  		bmi.w	locret_751E
0000793E D241                       		add.w	d1,d1
00007940 B041                       		cmp.w	d1,d0
00007942 6400 0000                  		bcc.w	locret_751E
00007946                            
00007946                            Platform2:
00007946 3028 000C                  		move.w	$C(a0),d0
0000794A 5140                       		subq.w	#8,d0
0000794C                            
0000794C                            Platform3:
0000794C 3429 000C                  		move.w	$C(a1),d2
00007950 1229 0016                  		move.b	$16(a1),d1
00007954 4881                       		ext.w	d1
00007956 D242                       		add.w	d2,d1
00007958 5841                       		addq.w	#4,d1
0000795A 9041                       		sub.w	d1,d0
0000795C 6200 0000                  		bhi.w	locret_751E
00007960 0C40 FFF0                  		cmpi.w	#-$10,d0
00007964 6500 0000                  		bcs.w	locret_751E
00007968 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000796C 6B00 0000                  		bmi.w	locret_751E
00007970 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007976 6400 0000                  		bcc.w	locret_751E
0000797A D440                       		add.w	d0,d2
0000797C 5642                       		addq.w	#3,d2
0000797E 3342 000C                  		move.w	d2,$C(a1)
00007982 5428 0024                  		addq.b	#2,$24(a0)
00007986                            
00007986                            loc_74AE:
00007986 0829 0003 0022             		btst	#3,$22(a1)
0000798C 6700                       		beq.s	loc_74DC
0000798E 7000                       		moveq	#0,d0
00007990 1029 003D                  		move.b	$3D(a1),d0
00007994 ED48                       		lsl.w	#6,d0
00007996 0680 00FF D000             		addi.l	#$FFD000,d0
0000799C 2440                       		movea.l	d0,a2
0000799E 08AA 0003 0022             		bclr	#3,$22(a2)
000079A4 422A 0025                  		clr.b	$25(a2)
000079A8 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000079AE 6600                       		bne.s	loc_74DC
000079B0 552A 0024                  		subq.b	#2,$24(a2)
000079B4                            
000079B4                            loc_74DC:
000079B4 3008                       		move.w	a0,d0
000079B6 0440 D000                  		subi.w	#-$3000,d0
000079BA EC48                       		lsr.w	#6,d0
000079BC 0240 007F                  		andi.w	#$7F,d0
000079C0 1340 003D                  		move.b	d0,$3D(a1)
000079C4 137C 0000 0026             		move.b	#0,$26(a1)
000079CA 337C 0000 0012             		move.w	#0,$12(a1)
000079D0 3369 0010 0014             		move.w	$10(a1),$14(a1)
000079D6 0829 0001 0022             		btst	#1,$22(a1)
000079DC 6700                       		beq.s	loc_7512
000079DE 2F08                       		move.l	a0,-(sp)
000079E0 2049                       		movea.l	a1,a0
000079E2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000079E8 205F                       		movea.l	(sp)+,a0
000079EA                            
000079EA                            loc_7512:
000079EA 08E9 0003 0022             		bset	#3,$22(a1)
000079F0 08E8 0003 0022             		bset	#3,$22(a0)
000079F6                            
000079F6                            locret_751E:
000079F6 4E75                       		rts	
000079F8                            ; End of function PlatformObject
000079F8                            
000079F8                            ; ---------------------------------------------------------------------------
000079F8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000079F8                            ; ---------------------------------------------------------------------------
000079F8                            
000079F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F8                            
000079F8                            
000079F8                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000079F8 43F8 D000                  		lea	($FFFFD000).w,a1
000079FC 4A69 0012                  		tst.w	$12(a1)
00007A00 6B00 FFF4                  		bmi.w	locret_751E
00007A04 3029 0008                  		move.w	8(a1),d0
00007A08 9068 0008                  		sub.w	8(a0),d0
00007A0C D041                       		add.w	d1,d0
00007A0E 6BE6                       		bmi.s	locret_751E
00007A10 D241                       		add.w	d1,d1
00007A12 B041                       		cmp.w	d1,d0
00007A14 64E0                       		bcc.s	locret_751E
00007A16 0828 0000 0001             		btst	#0,1(a0)
00007A1C 6700                       		beq.s	loc_754A
00007A1E 4640                       		not.w	d0
00007A20 D041                       		add.w	d1,d0
00007A22                            
00007A22                            loc_754A:
00007A22 E248                       		lsr.w	#1,d0
00007A24 7600                       		moveq	#0,d3
00007A26 1632 0000                  		move.b	(a2,d0.w),d3
00007A2A 3028 000C                  		move.w	$C(a0),d0
00007A2E 9043                       		sub.w	d3,d0
00007A30 6000 FF1A                  		bra.w	Platform3
00007A34                            ; End of function SlopeObject
00007A34                            
00007A34                            
00007A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A34                            
00007A34                            
00007A34                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007A34 43F8 D000                  		lea	($FFFFD000).w,a1
00007A38 4A69 0012                  		tst.w	$12(a1)
00007A3C 6B00 FFB8                  		bmi.w	locret_751E
00007A40 3029 0008                  		move.w	8(a1),d0
00007A44 9068 0008                  		sub.w	8(a0),d0
00007A48 D041                       		add.w	d1,d0
00007A4A 6B00 FFAA                  		bmi.w	locret_751E
00007A4E D241                       		add.w	d1,d1
00007A50 B041                       		cmp.w	d1,d0
00007A52 6400 FFA2                  		bcc.w	locret_751E
00007A56 3028 000C                  		move.w	$C(a0),d0
00007A5A 9043                       		sub.w	d3,d0
00007A5C 6000 FEEE                  		bra.w	Platform3
00007A60                            ; End of function Obj15_Solid
00007A60                            
00007A60                            ; ===========================================================================
00007A60                            
00007A60                            Obj11_Action2:				; XREF: Obj11_Index
00007A60 6100                       		bsr.s	Obj11_WalkOff
00007A62 6100 0000                  		bsr.w	DisplaySprite
00007A66 6000 0000                  		bra.w	Obj11_ChkDel
00007A6A                            
00007A6A                            ; ---------------------------------------------------------------------------
00007A6A                            ; Subroutine allowing Sonic to walk off a bridge
00007A6A                            ; ---------------------------------------------------------------------------
00007A6A                            
00007A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A6A                            
00007A6A                            
00007A6A                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007A6A 7200                       		moveq	#0,d1
00007A6C 1228 0028                  		move.b	$28(a0),d1
00007A70 E749                       		lsl.w	#3,d1
00007A72 3401                       		move.w	d1,d2
00007A74 5041                       		addq.w	#8,d1
00007A76 6100                       		bsr.s	ExitPlatform2
00007A78 6400                       		bcc.s	locret_75BE
00007A7A E848                       		lsr.w	#4,d0
00007A7C 1140 003F                  		move.b	d0,$3F(a0)
00007A80 1028 003E                  		move.b	$3E(a0),d0
00007A84 0C00 0040                  		cmpi.b	#$40,d0
00007A88 6700                       		beq.s	loc_75B6
00007A8A 5828 003E                  		addq.b	#4,$3E(a0)
00007A8E                            
00007A8E                            loc_75B6:
00007A8E 6100 0000                  		bsr.w	Obj11_Bend
00007A92 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A96                            
00007A96                            locret_75BE:
00007A96 4E75                       		rts	
00007A98                            ; End of function Obj11_WalkOff
00007A98                            
00007A98                            ; ---------------------------------------------------------------------------
00007A98                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A98                            ; ---------------------------------------------------------------------------
00007A98                            
00007A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A98                            
00007A98                            
00007A98                            ExitPlatform:
00007A98 3401                       		move.w	d1,d2
00007A9A                            
00007A9A                            ExitPlatform2:
00007A9A D442                       		add.w	d2,d2
00007A9C 43F8 D000                  		lea	($FFFFD000).w,a1
00007AA0 0829 0001 0022             		btst	#1,$22(a1)
00007AA6 6600                       		bne.s	loc_75E0
00007AA8 3029 0008                  		move.w	8(a1),d0
00007AAC 9068 0008                  		sub.w	8(a0),d0
00007AB0 D041                       		add.w	d1,d0
00007AB2 6B00                       		bmi.s	loc_75E0
00007AB4 B042                       		cmp.w	d2,d0
00007AB6 6500                       		bcs.s	locret_75F2
00007AB8                            
00007AB8                            loc_75E0:
00007AB8 08A9 0003 0022             		bclr	#3,$22(a1)
00007ABE 117C 0002 0024             		move.b	#2,$24(a0)
00007AC4 08A8 0003 0022             		bclr	#3,$22(a0)
00007ACA                            
00007ACA                            locret_75F2:
00007ACA 4E75                       		rts	
00007ACC                            ; End of function ExitPlatform
00007ACC                            
00007ACC                            
00007ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ACC                            
00007ACC                            
00007ACC                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007ACC 7000                       		moveq	#0,d0
00007ACE 1028 003F                  		move.b	$3F(a0),d0
00007AD2 1030 0029                  		move.b	$29(a0,d0.w),d0
00007AD6 ED48                       		lsl.w	#6,d0
00007AD8 0680 00FF D000             		addi.l	#$FFD000,d0
00007ADE 2440                       		movea.l	d0,a2
00007AE0 43F8 D000                  		lea	($FFFFD000).w,a1
00007AE4 302A 000C                  		move.w	$C(a2),d0
00007AE8 5140                       		subq.w	#8,d0
00007AEA 7200                       		moveq	#0,d1
00007AEC 1229 0016                  		move.b	$16(a1),d1
00007AF0 9041                       		sub.w	d1,d0
00007AF2 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007AF6 4E75                       		rts	
00007AF8                            ; End of function Obj11_MoveSonic
00007AF8                            
00007AF8                            
00007AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AF8                            
00007AF8                            
00007AF8                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007AF8 1028 003E                  		move.b	$3E(a0),d0
00007AFC 6100 B166                  		bsr.w	CalcSine
00007B00 3800                       		move.w	d0,d4
00007B02 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007B08 7000                       		moveq	#0,d0
00007B0A 1028 0028                  		move.b	$28(a0),d0
00007B0E E948                       		lsl.w	#4,d0
00007B10 7600                       		moveq	#0,d3
00007B12 1628 003F                  		move.b	$3F(a0),d3
00007B16 3403                       		move.w	d3,d2
00007B18 D640                       		add.w	d0,d3
00007B1A 7A00                       		moveq	#0,d5
00007B1C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007B22 1A35 3000                  		move.b	(a5,d3.w),d5
00007B26 0243 000F                  		andi.w	#$F,d3
00007B2A E94B                       		lsl.w	#4,d3
00007B2C 47F4 3000                  		lea	(a4,d3.w),a3
00007B30 45E8 0029                  		lea	$29(a0),a2
00007B34                            
00007B34                            loc_765C:
00007B34 7000                       		moveq	#0,d0
00007B36 101A                       		move.b	(a2)+,d0
00007B38 ED48                       		lsl.w	#6,d0
00007B3A 0680 00FF D000             		addi.l	#$FFD000,d0
00007B40 2240                       		movea.l	d0,a1
00007B42 7000                       		moveq	#0,d0
00007B44 101B                       		move.b	(a3)+,d0
00007B46 5240                       		addq.w	#1,d0
00007B48 C0C5                       		mulu.w	d5,d0
00007B4A C0C4                       		mulu.w	d4,d0
00007B4C 4840                       		swap	d0
00007B4E D069 003C                  		add.w	$3C(a1),d0
00007B52 3340 000C                  		move.w	d0,$C(a1)
00007B56 51CA FFDC                  		dbf	d2,loc_765C
00007B5A 7000                       		moveq	#0,d0
00007B5C 1028 0028                  		move.b	$28(a0),d0
00007B60 7600                       		moveq	#0,d3
00007B62 1628 003F                  		move.b	$3F(a0),d3
00007B66 5203                       		addq.b	#1,d3
00007B68 9600                       		sub.b	d0,d3
00007B6A 4403                       		neg.b	d3
00007B6C 6B00                       		bmi.s	locret_76CA
00007B6E 3403                       		move.w	d3,d2
00007B70 E94B                       		lsl.w	#4,d3
00007B72 47F4 3000                  		lea	(a4,d3.w),a3
00007B76 D6C2                       		adda.w	d2,a3
00007B78 5342                       		subq.w	#1,d2
00007B7A 6500                       		bcs.s	locret_76CA
00007B7C                            
00007B7C                            loc_76A4:
00007B7C 7000                       		moveq	#0,d0
00007B7E 101A                       		move.b	(a2)+,d0
00007B80 ED48                       		lsl.w	#6,d0
00007B82 0680 00FF D000             		addi.l	#$FFD000,d0
00007B88 2240                       		movea.l	d0,a1
00007B8A 7000                       		moveq	#0,d0
00007B8C 1023                       		move.b	-(a3),d0
00007B8E 5240                       		addq.w	#1,d0
00007B90 C0C5                       		mulu.w	d5,d0
00007B92 C0C4                       		mulu.w	d4,d0
00007B94 4840                       		swap	d0
00007B96 D069 003C                  		add.w	$3C(a1),d0
00007B9A 3340 000C                  		move.w	d0,$C(a1)
00007B9E 51CA FFDC                  		dbf	d2,loc_76A4
00007BA2                            
00007BA2                            locret_76CA:
00007BA2 4E75                       		rts	
00007BA4                            ; End of function Obj11_Bend
00007BA4                            
00007BA4                            ; ===========================================================================
00007BA4                            ; ---------------------------------------------------------------------------
00007BA4                            ; GHZ bridge-bending data
00007BA4                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007BA4                            ; ---------------------------------------------------------------------------
00007BA4                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007CB4                            		even
00007CB4                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007DB4                            		even
00007DB4                            
00007DB4                            ; ===========================================================================
00007DB4                            
00007DB4                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007DB4 3028 0008                  		move.w	8(a0),d0
00007DB8 0240 FF80                  		andi.w	#$FF80,d0
00007DBC 3238 F700                  		move.w	($FFFFF700).w,d1
00007DC0 0441 0080                  		subi.w	#$80,d1
00007DC4 0241 FF80                  		andi.w	#$FF80,d1
00007DC8 9041                       		sub.w	d1,d0
00007DCA 0C40 0280                  		cmpi.w	#$280,d0
00007DCE 6200 0000                  		bhi.w	Obj11_DelAll
00007DD2 4E75                       		rts	
00007DD4                            ; ===========================================================================
00007DD4                            
00007DD4                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007DD4 7400                       		moveq	#0,d2
00007DD6 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007DDA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007DDC 5302                       		subq.b	#1,d2		; subtract 1
00007DDE 6500                       		bcs.s	Obj11_Delete
00007DE0                            
00007DE0                            Obj11_DelLoop:
00007DE0 7000                       		moveq	#0,d0
00007DE2 101A                       		move.b	(a2)+,d0
00007DE4 ED48                       		lsl.w	#6,d0
00007DE6 0680 00FF D000             		addi.l	#$FFD000,d0
00007DEC 2240                       		movea.l	d0,a1
00007DEE B048                       		cmp.w	a0,d0
00007DF0 6700                       		beq.s	loc_791E
00007DF2 6100 0000                  		bsr.w	DeleteObject2
00007DF6                            
00007DF6                            loc_791E:
00007DF6 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007DFA                            
00007DFA                            Obj11_Delete:
00007DFA 6100 0000                  		bsr.w	DeleteObject
00007DFE 4E75                       		rts	
00007E00                            ; ===========================================================================
00007E00                            
00007E00                            Obj11_Delete2:				; XREF: Obj11_Index
00007E00 6100 0000                  		bsr.w	DeleteObject
00007E04 4E75                       		rts	
00007E06                            ; ===========================================================================
00007E06                            
00007E06                            Obj11_Display2:				; XREF: Obj11_Index
00007E06 6100 0000                  		bsr.w	DisplaySprite
00007E0A 4E75                       		rts	
00007E0C                            ; ===========================================================================
00007E0C                            ; ---------------------------------------------------------------------------
00007E0C                            ; Sprite mappings - GHZ	bridge
00007E0C                            ; ---------------------------------------------------------------------------
00007E0C                            Map_obj11:
00007E0C                            	include "_maps\obj11.asm"
00007E0C                            ; ---------------------------------------------------------------------------
00007E0C                            ; Sprite mappings - GHZ	bridge
00007E0C                            ; ---------------------------------------------------------------------------
00007E0C 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007E10 0000                       		dc.w byte_794B-Map_obj11
00007E12 01                         byte_793A:	dc.b 1
00007E13 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007E18 02                         byte_7940:	dc.b 2
00007E19 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007E1E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007E23 01                         byte_794B:	dc.b 1
00007E24 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007E2A 00                         		even
00007E2A 00                         		even
00007E2A                            
00007E2A                            ; ===========================================================================
00007E2A                            ; ---------------------------------------------------------------------------
00007E2A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007E2A                            ;	    - spiked ball on a chain (SBZ)
00007E2A                            ; ---------------------------------------------------------------------------
00007E2A                            
00007E2A                            Obj15:					; XREF: Obj_Index
00007E2A 7000                       		moveq	#0,d0
00007E2C 1028 0024                  		move.b	$24(a0),d0
00007E30 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007E34 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007E38                            ; ===========================================================================
00007E38 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007E3C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007E40 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007E44 0000                       		dc.w Obj15_Action-Obj15_Index
00007E46                            ; ===========================================================================
00007E46                            
00007E46                            Obj15_Main:				; XREF: Obj15_Index
00007E46 5428 0024                  		addq.b	#2,$24(a0)
00007E4A 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007E52 317C 4380 0002             		move.w	#$4380,2(a0)
00007E58 117C 0004 0001             		move.b	#4,1(a0)
00007E5E 117C 0003 0018             		move.b	#3,$18(a0)
00007E64 117C 0018 0019             		move.b	#$18,$19(a0)
00007E6A 117C 0008 0016             		move.b	#8,$16(a0)
00007E70 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007E76 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007E7C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E82 6600                       		bne.s	Obj15_NotSLZ
00007E84 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E8C 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E92 117C 0020 0019             		move.b	#$20,$19(a0)
00007E98 117C 0010 0016             		move.b	#$10,$16(a0)
00007E9E 117C 0099 0020             		move.b	#$99,$20(a0)
00007EA4                            
00007EA4                            Obj15_NotSLZ:
00007EA4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007EAA 6600                       		bne.s	Obj15_SetLength
00007EAC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007EB4 317C 0391 0002             		move.w	#$391,2(a0)
00007EBA 117C 0018 0019             		move.b	#$18,$19(a0)
00007EC0 117C 0018 0016             		move.b	#$18,$16(a0)
00007EC6 117C 0086 0020             		move.b	#$86,$20(a0)
00007ECC 117C 000C 0024             		move.b	#$C,$24(a0)
00007ED2                            
00007ED2                            Obj15_SetLength:
00007ED2 1810                       		move.b	0(a0),d4
00007ED4 7200                       		moveq	#0,d1
00007ED6 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007EDA 1212                       		move.b	(a2),d1		; move a2 to d1
00007EDC 3F01                       		move.w	d1,-(sp)
00007EDE 0241 000F                  		andi.w	#$F,d1
00007EE2 14FC 0000                  		move.b	#0,(a2)+
00007EE6 3601                       		move.w	d1,d3
00007EE8 E94B                       		lsl.w	#4,d3
00007EEA 5003                       		addq.b	#8,d3
00007EEC 1143 003C                  		move.b	d3,$3C(a0)
00007EF0 5103                       		subq.b	#8,d3
00007EF2 4A28 001A                  		tst.b	$1A(a0)
00007EF6 6700                       		beq.s	Obj15_MakeChain
00007EF8 5003                       		addq.b	#8,d3
00007EFA 5341                       		subq.w	#1,d1
00007EFC                            
00007EFC                            Obj15_MakeChain:
00007EFC 6100 0000                  		bsr.w	SingleObjLoad
00007F00 6600                       		bne.s	loc_7A92
00007F02 5228 0028                  		addq.b	#1,$28(a0)
00007F06 3A09                       		move.w	a1,d5
00007F08 0445 D000                  		subi.w	#-$3000,d5
00007F0C EC4D                       		lsr.w	#6,d5
00007F0E 0245 007F                  		andi.w	#$7F,d5
00007F12 14C5                       		move.b	d5,(a2)+
00007F14 137C 000A 0024             		move.b	#$A,$24(a1)
00007F1A 1284                       		move.b	d4,0(a1)	; load swinging	object
00007F1C 2368 0004 0004             		move.l	4(a0),4(a1)
00007F22 3368 0002 0002             		move.w	2(a0),2(a1)
00007F28 08A9 0006 0002             		bclr	#6,2(a1)
00007F2E 137C 0004 0001             		move.b	#4,1(a1)
00007F34 137C 0004 0018             		move.b	#4,$18(a1)
00007F3A 137C 0008 0019             		move.b	#8,$19(a1)
00007F40 137C 0001 001A             		move.b	#1,$1A(a1)
00007F46 1343 003C                  		move.b	d3,$3C(a1)
00007F4A 0403 0010                  		subi.b	#$10,d3
00007F4E 6400                       		bcc.s	loc_7A8E
00007F50 137C 0002 001A             		move.b	#2,$1A(a1)
00007F56 137C 0003 0018             		move.b	#3,$18(a1)
00007F5C 08E9 0006 0002             		bset	#6,2(a1)
00007F62                            
00007F62                            loc_7A8E:
00007F62 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007F66                            
00007F66                            loc_7A92:
00007F66 3A08                       		move.w	a0,d5
00007F68 0445 D000                  		subi.w	#-$3000,d5
00007F6C EC4D                       		lsr.w	#6,d5
00007F6E 0245 007F                  		andi.w	#$7F,d5
00007F72 14C5                       		move.b	d5,(a2)+
00007F74 317C 4080 0026             		move.w	#$4080,$26(a0)
00007F7A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007F80 321F                       		move.w	(sp)+,d1
00007F82 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F86 6700                       		beq.s	loc_7AD4	; if not, branch
00007F88 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F90 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F96 117C 0001 001A             		move.b	#1,$1A(a0)
00007F9C 117C 0002 0018             		move.b	#2,$18(a0)
00007FA2 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007FA8                            
00007FA8                            loc_7AD4:
00007FA8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007FAE 6700                       		beq.s	Obj15_Action	; if yes, branch
00007FB0                            
00007FB0                            Obj15_SetSolid:				; XREF: Obj15_Index
00007FB0 7200                       		moveq	#0,d1
00007FB2 1228 0019                  		move.b	$19(a0),d1
00007FB6 7600                       		moveq	#0,d3
00007FB8 1628 0016                  		move.b	$16(a0),d3
00007FBC 6100 FA76                  		bsr.w	Obj15_Solid
00007FC0                            
00007FC0                            Obj15_Action:				; XREF: Obj15_Index
00007FC0 6100 0000                  		bsr.w	Obj15_Move
00007FC4 6100 0000                  		bsr.w	DisplaySprite
00007FC8 6000 0000                  		bra.w	Obj15_ChkDel
00007FCC                            ; ===========================================================================
00007FCC                            
00007FCC                            Obj15_Action2:				; XREF: Obj15_Index
00007FCC 7200                       		moveq	#0,d1
00007FCE 1228 0019                  		move.b	$19(a0),d1
00007FD2 6100 FAC4                  		bsr.w	ExitPlatform
00007FD6 3F28 0008                  		move.w	8(a0),-(sp)
00007FDA 6100 0000                  		bsr.w	Obj15_Move
00007FDE 341F                       		move.w	(sp)+,d2
00007FE0 7600                       		moveq	#0,d3
00007FE2 1628 0016                  		move.b	$16(a0),d3
00007FE6 5203                       		addq.b	#1,d3
00007FE8 6100 0000                  		bsr.w	MvSonicOnPtfm
00007FEC 6100 0000                  		bsr.w	DisplaySprite
00007FF0 6000 0000                  		bra.w	Obj15_ChkDel
00007FF4                            
00007FF4 4E75                       		rts
00007FF6                            
00007FF6                            ; ---------------------------------------------------------------------------
00007FF6                            ; Subroutine to	change Sonic's position with a platform
00007FF6                            ; ---------------------------------------------------------------------------
00007FF6                            
00007FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FF6                            
00007FF6                            
00007FF6                            MvSonicOnPtfm:
00007FF6 43F8 D000                  		lea	($FFFFD000).w,a1
00007FFA 3028 000C                  		move.w	$C(a0),d0
00007FFE 9043                       		sub.w	d3,d0
00008000 6000                       		bra.s	MvSonic2
00008002                            ; End of function MvSonicOnPtfm
00008002                            
00008002                            ; ---------------------------------------------------------------------------
00008002                            ; Subroutine to	change Sonic's position with a platform
00008002                            ; ---------------------------------------------------------------------------
00008002                            
00008002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008002                            
00008002                            
00008002                            MvSonicOnPtfm2:
00008002 43F8 D000                  		lea	($FFFFD000).w,a1
00008006 3028 000C                  		move.w	$C(a0),d0
0000800A 0440 0009                  		subi.w	#9,d0
0000800E                            
0000800E                            MvSonic2:
0000800E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008012 6B00                       		bmi.s	locret_7B62
00008014 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000801A 6400                       		bcc.s	locret_7B62
0000801C 4A78 FE08                  		tst.w	($FFFFFE08).w
00008020 6600                       		bne.s	locret_7B62
00008022 7200                       		moveq	#0,d1
00008024 1229 0016                  		move.b	$16(a1),d1
00008028 9041                       		sub.w	d1,d0
0000802A 3340 000C                  		move.w	d0,$C(a1)
0000802E 9468 0008                  		sub.w	8(a0),d2
00008032 9569 0008                  		sub.w	d2,8(a1)
00008036                            
00008036                            locret_7B62:
00008036 4E75                       		rts	
00008038                            ; End of function MvSonicOnPtfm2
00008038                            
00008038                            
00008038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008038                            
00008038                            
00008038                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008038 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000803C 323C 0080                  		move.w	#$80,d1
00008040 0828 0000 0022             		btst	#0,$22(a0)
00008046 6700                       		beq.s	loc_7B78
00008048 4440                       		neg.w	d0
0000804A D041                       		add.w	d1,d0
0000804C                            
0000804C                            loc_7B78:
0000804C 6000                       		bra.s	Obj15_Move2
0000804E                            ; End of function Obj15_Move
0000804E                            
0000804E                            
0000804E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000804E                            
0000804E                            
0000804E                            Obj48_Move:				; XREF: Obj48_Display2
0000804E 4A28 003D                  		tst.b	$3D(a0)
00008052 6600                       		bne.s	loc_7B9C
00008054 3028 003E                  		move.w	$3E(a0),d0
00008058 5040                       		addq.w	#8,d0
0000805A 3140 003E                  		move.w	d0,$3E(a0)
0000805E D168 0026                  		add.w	d0,$26(a0)
00008062 0C40 0200                  		cmpi.w	#$200,d0
00008066 6600                       		bne.s	loc_7BB6
00008068 117C 0001 003D             		move.b	#1,$3D(a0)
0000806E 6000                       		bra.s	loc_7BB6
00008070                            ; ===========================================================================
00008070                            
00008070                            loc_7B9C:
00008070 3028 003E                  		move.w	$3E(a0),d0
00008074 5140                       		subq.w	#8,d0
00008076 3140 003E                  		move.w	d0,$3E(a0)
0000807A D168 0026                  		add.w	d0,$26(a0)
0000807E 0C40 FE00                  		cmpi.w	#-$200,d0
00008082 6600                       		bne.s	loc_7BB6
00008084 117C 0000 003D             		move.b	#0,$3D(a0)
0000808A                            
0000808A                            loc_7BB6:
0000808A 1028 0026                  		move.b	$26(a0),d0
0000808E                            ; End of function Obj48_Move
0000808E                            
0000808E                            
0000808E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000808E                            
0000808E                            
0000808E                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000808E 6100 ABD4                  		bsr.w	CalcSine
00008092 3428 0038                  		move.w	$38(a0),d2
00008096 3628 003A                  		move.w	$3A(a0),d3
0000809A 45E8 0028                  		lea	$28(a0),a2
0000809E 7C00                       		moveq	#0,d6
000080A0 1C1A                       		move.b	(a2)+,d6
000080A2                            
000080A2                            loc_7BCE:
000080A2 7800                       		moveq	#0,d4
000080A4 181A                       		move.b	(a2)+,d4
000080A6 ED4C                       		lsl.w	#6,d4
000080A8 0684 00FF D000             		addi.l	#$FFD000,d4
000080AE 2244                       		movea.l	d4,a1
000080B0 7800                       		moveq	#0,d4
000080B2 1829 003C                  		move.b	$3C(a1),d4
000080B6 2A04                       		move.l	d4,d5
000080B8 C9C0                       		muls.w	d0,d4
000080BA E084                       		asr.l	#8,d4
000080BC CBC1                       		muls.w	d1,d5
000080BE E085                       		asr.l	#8,d5
000080C0 D842                       		add.w	d2,d4
000080C2 DA43                       		add.w	d3,d5
000080C4 3344 000C                  		move.w	d4,$C(a1)
000080C8 3345 0008                  		move.w	d5,8(a1)
000080CC 51CE FFD4                  		dbf	d6,loc_7BCE
000080D0 4E75                       		rts	
000080D2                            ; End of function Obj15_Move2
000080D2                            
000080D2                            ; ===========================================================================
000080D2                            
000080D2                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000080D2 3028 003A                  		move.w	$3A(a0),d0
000080D6 0240 FF80                  		andi.w	#$FF80,d0
000080DA 3238 F700                  		move.w	($FFFFF700).w,d1
000080DE 0441 0080                  		subi.w	#$80,d1
000080E2 0241 FF80                  		andi.w	#$FF80,d1
000080E6 9041                       		sub.w	d1,d0
000080E8 0C40 0280                  		cmpi.w	#$280,d0
000080EC 6200 0000                  		bhi.w	Obj15_DelAll
000080F0 4E75                       		rts	
000080F2                            ; ===========================================================================
000080F2                            
000080F2                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000080F2 7400                       		moveq	#0,d2
000080F4 45E8 0028                  		lea	$28(a0),a2
000080F8 141A                       		move.b	(a2)+,d2
000080FA                            
000080FA                            Obj15_DelLoop:
000080FA 7000                       		moveq	#0,d0
000080FC 101A                       		move.b	(a2)+,d0
000080FE ED48                       		lsl.w	#6,d0
00008100 0680 00FF D000             		addi.l	#$FFD000,d0
00008106 2240                       		movea.l	d0,a1
00008108 6100 0000                  		bsr.w	DeleteObject2
0000810C 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008110 4E75                       		rts	
00008112                            ; ===========================================================================
00008112                            
00008112                            Obj15_Delete:				; XREF: Obj15_Index
00008112 6100 0000                  		bsr.w	DeleteObject
00008116 4E75                       		rts	
00008118                            ; ===========================================================================
00008118                            
00008118                            Obj15_Display:				; XREF: Obj15_Index
00008118 6000 0000                  		bra.w	DisplaySprite
0000811C                            ; ===========================================================================
0000811C                            ; ---------------------------------------------------------------------------
0000811C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000811C                            ; ---------------------------------------------------------------------------
0000811C                            Map_obj15:
0000811C                            	include "_maps\obj15ghz.asm"
0000811C                            ; ---------------------------------------------------------------------------
0000811C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000811C                            ; ---------------------------------------------------------------------------
0000811C 0000                       		dc.w byte_7C4E-Map_obj15
0000811E 0000                       		dc.w byte_7C59-Map_obj15
00008120 0000                       		dc.w byte_7C5F-Map_obj15
00008122 02                         byte_7C4E:	dc.b 2
00008123 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008128 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000812D 01                         byte_7C59:	dc.b 1
0000812E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008133 01                         byte_7C5F:	dc.b 1
00008134 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000813A 00                         		even
0000813A 00                         		even
0000813A                            
0000813A                            ; ---------------------------------------------------------------------------
0000813A                            ; Sprite mappings - SLZ	swinging platforms
0000813A                            ; ---------------------------------------------------------------------------
0000813A                            Map_obj15a:
0000813A                            	include "_maps\obj15slz.asm"
0000813A                            ; ---------------------------------------------------------------------------
0000813A                            ; Sprite mappings - SLZ	swinging platforms
0000813A                            ; ---------------------------------------------------------------------------
0000813A 0000                       		dc.w byte_7C6C-Map_obj15a
0000813C 0000                       		dc.w byte_7C95-Map_obj15a
0000813E 0000                       		dc.w byte_7C9B-Map_obj15a
00008140 08                         byte_7C6C:	dc.b 8
00008141 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008146 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000814B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008150 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008155 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000815A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000815F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008164 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008169 01                         byte_7C95:	dc.b 1
0000816A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000816F 01                         byte_7C9B:	dc.b 1
00008170 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008176 00                         		even
00008176 00                         		even
00008176                            
00008176                            ; ===========================================================================
00008176                            ; ---------------------------------------------------------------------------
00008176                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008176                            ; ---------------------------------------------------------------------------
00008176                            
00008176                            Obj17:					; XREF: Obj_Index
00008176 7000                       		moveq	#0,d0
00008178 1028 0024                  		move.b	$24(a0),d0
0000817C 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008180 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008184                            ; ===========================================================================
00008184 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008186 0000                       		dc.w Obj17_Action-Obj17_Index
00008188 0000                       		dc.w Obj17_Action-Obj17_Index
0000818A 0000                       		dc.w Obj17_Delete-Obj17_Index
0000818C 0000                       		dc.w Obj17_Display-Obj17_Index
0000818E                            ; ===========================================================================
0000818E                            
0000818E                            Obj17_Main:				; XREF: Obj17_Index
0000818E 5428 0024                  		addq.b	#2,$24(a0)
00008192 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000819A 317C 4398 0002             		move.w	#$4398,2(a0)
000081A0 117C 0007 0022             		move.b	#7,$22(a0)
000081A6 117C 0004 0001             		move.b	#4,1(a0)
000081AC 117C 0003 0018             		move.b	#3,$18(a0)
000081B2 117C 0008 0019             		move.b	#8,$19(a0)
000081B8 3428 000C                  		move.w	$C(a0),d2
000081BC 3628 0008                  		move.w	8(a0),d3
000081C0 1810                       		move.b	0(a0),d4
000081C2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000081C6 7200                       		moveq	#0,d1
000081C8 1212                       		move.b	(a2),d1		; move a2 to d1
000081CA 14FC 0000                  		move.b	#0,(a2)+
000081CE 3001                       		move.w	d1,d0
000081D0 E248                       		lsr.w	#1,d0
000081D2 E948                       		lsl.w	#4,d0
000081D4 9640                       		sub.w	d0,d3
000081D6 5501                       		subq.b	#2,d1
000081D8 6500                       		bcs.s	Obj17_Action
000081DA 7C00                       		moveq	#0,d6
000081DC                            
000081DC                            Obj17_MakeHelix:
000081DC 6100 0000                  		bsr.w	SingleObjLoad
000081E0 6600                       		bne.s	Obj17_Action
000081E2 5228 0028                  		addq.b	#1,$28(a0)
000081E6 3A09                       		move.w	a1,d5
000081E8 0445 D000                  		subi.w	#$D000,d5
000081EC EC4D                       		lsr.w	#6,d5
000081EE 0245 007F                  		andi.w	#$7F,d5
000081F2 14C5                       		move.b	d5,(a2)+
000081F4 137C 0008 0024             		move.b	#8,$24(a1)
000081FA 1284                       		move.b	d4,0(a1)
000081FC 3342 000C                  		move.w	d2,$C(a1)
00008200 3343 0008                  		move.w	d3,8(a1)
00008204 2368 0004 0004             		move.l	4(a0),4(a1)
0000820A 337C 4398 0002             		move.w	#$4398,2(a1)
00008210 137C 0004 0001             		move.b	#4,1(a1)
00008216 137C 0003 0018             		move.b	#3,$18(a1)
0000821C 137C 0008 0019             		move.b	#8,$19(a1)
00008222 1346 003E                  		move.b	d6,$3E(a1)
00008226 5206                       		addq.b	#1,d6
00008228 0206 0007                  		andi.b	#7,d6
0000822C 0643 0010                  		addi.w	#$10,d3
00008230 B668 0008                  		cmp.w	8(a0),d3
00008234 6600                       		bne.s	loc_7D78
00008236 1146 003E                  		move.b	d6,$3E(a0)
0000823A 5206                       		addq.b	#1,d6
0000823C 0206 0007                  		andi.b	#7,d6
00008240 0643 0010                  		addi.w	#$10,d3
00008244 5228 0028                  		addq.b	#1,$28(a0)
00008248                            
00008248                            loc_7D78:
00008248 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000824C                            
0000824C                            Obj17_Action:				; XREF: Obj17_Index
0000824C 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008250 6100 0000                  		bsr.w	DisplaySprite
00008254 6000 0000                  		bra.w	Obj17_ChkDel
00008258                            
00008258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008258                            
00008258                            
00008258                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008258 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000825C 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008262 D028 003E                  		add.b	$3E(a0),d0
00008266 0200 0007                  		andi.b	#7,d0
0000826A 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000826E 6600                       		bne.s	locret_7DA6
00008270 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008276                            
00008276                            locret_7DA6:
00008276 4E75                       		rts	
00008278                            ; End of function Obj17_RotateSpikes
00008278                            
00008278                            ; ===========================================================================
00008278                            
00008278                            Obj17_ChkDel:				; XREF: Obj17_Action
00008278 3028 0008                  		move.w	8(a0),d0
0000827C 0240 FF80                  		andi.w	#$FF80,d0
00008280 3238 F700                  		move.w	($FFFFF700).w,d1
00008284 0441 0080                  		subi.w	#$80,d1
00008288 0241 FF80                  		andi.w	#$FF80,d1
0000828C 9041                       		sub.w	d1,d0
0000828E 0C40 0280                  		cmpi.w	#$280,d0
00008292 6200 0000                  		bhi.w	Obj17_DelAll
00008296 4E75                       		rts	
00008298                            ; ===========================================================================
00008298                            
00008298                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008298 7400                       		moveq	#0,d2
0000829A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000829E 141A                       		move.b	(a2)+,d2	; move a2 to d2
000082A0 5502                       		subq.b	#2,d2
000082A2 6500                       		bcs.s	Obj17_Delete
000082A4                            
000082A4                            Obj17_DelLoop:
000082A4 7000                       		moveq	#0,d0
000082A6 101A                       		move.b	(a2)+,d0
000082A8 ED48                       		lsl.w	#6,d0
000082AA 0680 00FF D000             		addi.l	#$FFD000,d0
000082B0 2240                       		movea.l	d0,a1
000082B2 6100 0000                  		bsr.w	DeleteObject2	; delete object
000082B6 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000082BA                            
000082BA                            Obj17_Delete:				; XREF: Obj17_Index
000082BA 6100 0000                  		bsr.w	DeleteObject
000082BE 4E75                       		rts	
000082C0                            ; ===========================================================================
000082C0                            
000082C0                            Obj17_Display:				; XREF: Obj17_Index
000082C0 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000082C4 6000 0000                  		bra.w	DisplaySprite
000082C8                            ; ===========================================================================
000082C8                            ; ---------------------------------------------------------------------------
000082C8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082C8                            ; ---------------------------------------------------------------------------
000082C8                            Map_obj17:
000082C8                            	include "_maps\obj17.asm"
000082C8                            ; ---------------------------------------------------------------------------
000082C8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082C8                            ; ---------------------------------------------------------------------------
000082C8 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000082CC 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000082D0 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000082D4 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000082D8 01                         byte_7E08:	dc.b 1
000082D9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000082DE 01                         byte_7E0E:	dc.b 1
000082DF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000082E4 01                         byte_7E14:	dc.b 1
000082E5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000082EA 01                         byte_7E1A:	dc.b 1
000082EB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000082F0 01                         byte_7E20:	dc.b 1
000082F1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000082F6 01                         byte_7E26:	dc.b 1
000082F7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000082FC 01                         byte_7E2C:	dc.b 1
000082FD F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008302                            		even
00008302                            		even
00008302                            
00008302                            ; ===========================================================================
00008302                            ; ---------------------------------------------------------------------------
00008302                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008302                            ; ---------------------------------------------------------------------------
00008302                            
00008302                            Obj18:					; XREF: Obj_Index
00008302 7000                       		moveq	#0,d0
00008304 1028 0024                  		move.b	$24(a0),d0
00008308 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000830C 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008310                            ; ===========================================================================
00008310 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008312 0000                       		dc.w Obj18_Solid-Obj18_Index
00008314 0000                       		dc.w Obj18_Action2-Obj18_Index
00008316 0000                       		dc.w Obj18_Delete-Obj18_Index
00008318 0000                       		dc.w Obj18_Action-Obj18_Index
0000831A                            ; ===========================================================================
0000831A                            
0000831A                            Obj18_Main:				; XREF: Obj18_Index
0000831A 5428 0024                  		addq.b	#2,$24(a0)
0000831E 317C 4000 0002             		move.w	#$4000,2(a0)
00008324 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000832C 117C 0020 0019             		move.b	#$20,$19(a0)
00008332 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008338 6600                       		bne.s	Obj18_NotSYZ
0000833A 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008342 117C 0020 0019             		move.b	#$20,$19(a0)
00008348                            
00008348                            Obj18_NotSYZ:
00008348 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000834E 6600                       		bne.s	Obj18_NotSLZ
00008350 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008358 117C 0020 0019             		move.b	#$20,$19(a0)
0000835E 317C 4000 0002             		move.w	#$4000,2(a0)
00008364 117C 0003 0028             		move.b	#3,$28(a0)
0000836A                            
0000836A                            Obj18_NotSLZ:
0000836A 117C 0004 0001             		move.b	#4,1(a0)
00008370 117C 0004 0018             		move.b	#4,$18(a0)
00008376 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000837C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008382 3168 0008 0032             		move.w	8(a0),$32(a0)
00008388 317C 0080 0026             		move.w	#$80,$26(a0)
0000838E 7200                       		moveq	#0,d1
00008390 1028 0028                  		move.b	$28(a0),d0
00008394 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008398 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000839A 5201                       		addq.b	#1,d1		; use frame #1
0000839C 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000083A2                            
000083A2                            Obj18_SetFrame:
000083A2 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000083A6                            
000083A6                            Obj18_Solid:				; XREF: Obj18_Index
000083A6 4A28 0038                  		tst.b	$38(a0)
000083AA 6700                       		beq.s	loc_7EE0
000083AC 5928 0038                  		subq.b	#4,$38(a0)
000083B0                            
000083B0                            loc_7EE0:
000083B0 7200                       		moveq	#0,d1
000083B2 1228 0019                  		move.b	$19(a0),d1
000083B6 6100 F56C                  		bsr.w	PlatformObject
000083BA                            
000083BA                            Obj18_Action:				; XREF: Obj18_Index
000083BA 6100 0000                  		bsr.w	Obj18_Move
000083BE 6100 0000                  		bsr.w	Obj18_Nudge
000083C2 6100 0000                  		bsr.w	DisplaySprite
000083C6 6000 0000                  		bra.w	Obj18_ChkDel
000083CA                            ; ===========================================================================
000083CA                            
000083CA                            Obj18_Action2:				; XREF: Obj18_Index
000083CA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000083D0 6700                       		beq.s	loc_7F06
000083D2 5828 0038                  		addq.b	#4,$38(a0)
000083D6                            
000083D6                            loc_7F06:
000083D6 7200                       		moveq	#0,d1
000083D8 1228 0019                  		move.b	$19(a0),d1
000083DC 6100 F6BA                  		bsr.w	ExitPlatform
000083E0 3F28 0008                  		move.w	8(a0),-(sp)
000083E4 6100 0000                  		bsr.w	Obj18_Move
000083E8 6100 0000                  		bsr.w	Obj18_Nudge
000083EC 341F                       		move.w	(sp)+,d2
000083EE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000083F2 6100 0000                  		bsr.w	DisplaySprite
000083F6 6000 0000                  		bra.w	Obj18_ChkDel
000083FA                            
000083FA 4E75                       		rts
000083FC                            
000083FC                            ; ---------------------------------------------------------------------------
000083FC                            ; Subroutine to	move platform slightly when you	stand on it
000083FC                            ; ---------------------------------------------------------------------------
000083FC                            
000083FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083FC                            
000083FC                            
000083FC                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000083FC 1028 0038                  		move.b	$38(a0),d0
00008400 6100 A862                  		bsr.w	CalcSine
00008404 323C 0400                  		move.w	#$400,d1
00008408 C1C1                       		muls.w	d1,d0
0000840A 4840                       		swap	d0
0000840C D068 002C                  		add.w	$2C(a0),d0
00008410 3140 000C                  		move.w	d0,$C(a0)
00008414 4E75                       		rts	
00008416                            ; End of function Obj18_Nudge
00008416                            
00008416                            ; ---------------------------------------------------------------------------
00008416                            ; Subroutine to	move platforms
00008416                            ; ---------------------------------------------------------------------------
00008416                            
00008416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008416                            
00008416                            
00008416                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008416 7000                       		moveq	#0,d0
00008418 1028 0028                  		move.b	$28(a0),d0
0000841C 0240 000F                  		andi.w	#$F,d0
00008420 D040                       		add.w	d0,d0
00008422 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008426 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000842A                            ; End of function Obj18_Move
0000842A                            
0000842A                            ; ===========================================================================
0000842A 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000842E 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008432 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008436 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000843A 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000843E 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008442 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_Type00:
00008444 4E75                       		rts			; platform 00 doesn't move
00008446                            ; ===========================================================================
00008446                            
00008446                            Obj18_Type05:
00008446 3028 0032                  		move.w	$32(a0),d0
0000844A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000844E 4401                       		neg.b	d1		; reverse platform-motion
00008450 0601 0040                  		addi.b	#$40,d1
00008454 6000                       		bra.s	Obj18_01_Move
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type01:
00008456 3028 0032                  		move.w	$32(a0),d0
0000845A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000845E 0401 0040                  		subi.b	#$40,d1
00008462                            
00008462                            Obj18_01_Move:
00008462 4881                       		ext.w	d1
00008464 D041                       		add.w	d1,d0
00008466 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000846A 6000 0000                  		bra.w	Obj18_ChgMotion
0000846E                            ; ===========================================================================
0000846E                            
0000846E                            Obj18_Type0C:
0000846E 3028 0034                  		move.w	$34(a0),d0
00008472 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008476 4401                       		neg.b	d1		; reverse platform-motion
00008478 0601 0030                  		addi.b	#$30,d1
0000847C 6000                       		bra.s	Obj18_02_Move
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            Obj18_Type0B:
0000847E 3028 0034                  		move.w	$34(a0),d0
00008482 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008486 0401 0030                  		subi.b	#$30,d1
0000848A 6000                       		bra.s	Obj18_02_Move
0000848C                            ; ===========================================================================
0000848C                            
0000848C                            Obj18_Type06:
0000848C 3028 0034                  		move.w	$34(a0),d0
00008490 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008494 4401                       		neg.b	d1		; reverse platform-motion
00008496 0601 0040                  		addi.b	#$40,d1
0000849A 6000                       		bra.s	Obj18_02_Move
0000849C                            ; ===========================================================================
0000849C                            
0000849C                            Obj18_Type02:
0000849C 3028 0034                  		move.w	$34(a0),d0
000084A0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000084A4 0401 0040                  		subi.b	#$40,d1
000084A8                            
000084A8                            Obj18_02_Move:
000084A8 4881                       		ext.w	d1
000084AA D041                       		add.w	d1,d0
000084AC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000084B0 6000 0000                  		bra.w	Obj18_ChgMotion
000084B4                            ; ===========================================================================
000084B4                            
000084B4                            Obj18_Type03:
000084B4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084B8 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000084BA 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000084C0 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000084C2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000084C8                            
000084C8                            Obj18_03_NoMove:
000084C8 4E75                       		rts	
000084CA                            ; ===========================================================================
000084CA                            
000084CA                            Obj18_03_Wait:
000084CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000084CE 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000084D0 317C 0020 003A             		move.w	#32,$3A(a0)
000084D6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000084DA 4E75                       		rts	
000084DC                            ; ===========================================================================
000084DC                            
000084DC                            Obj18_Type04:
000084DC 4A68 003A                  		tst.w	$3A(a0)
000084E0 6700                       		beq.s	loc_8048
000084E2 5368 003A                  		subq.w	#1,$3A(a0)
000084E6 6600                       		bne.s	loc_8048
000084E8 0828 0003 0022             		btst	#3,$22(a0)
000084EE 6700                       		beq.s	loc_8042
000084F0 08E9 0001 0022             		bset	#1,$22(a1)
000084F6 08A9 0003 0022             		bclr	#3,$22(a1)
000084FC 137C 0002 0024             		move.b	#2,$24(a1)
00008502 08A8 0003 0022             		bclr	#3,$22(a0)
00008508 4228 0025                  		clr.b	$25(a0)
0000850C 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008512                            
00008512                            loc_8042:
00008512 117C 0008 0024             		move.b	#8,$24(a0)
00008518                            
00008518                            loc_8048:
00008518 2628 002C                  		move.l	$2C(a0),d3
0000851C 3028 0012                  		move.w	$12(a0),d0
00008520 48C0                       		ext.l	d0
00008522 E180                       		asl.l	#8,d0
00008524 D680                       		add.l	d0,d3
00008526 2143 002C                  		move.l	d3,$2C(a0)
0000852A 0668 0038 0012             		addi.w	#$38,$12(a0)
00008530 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008534 0640 00E0                  		addi.w	#$E0,d0
00008538 B068 002C                  		cmp.w	$2C(a0),d0
0000853C 6400                       		bcc.s	locret_8074
0000853E 117C 0006 0024             		move.b	#6,$24(a0)
00008544                            
00008544                            locret_8074:
00008544 4E75                       		rts	
00008546                            ; ===========================================================================
00008546                            
00008546                            Obj18_Type07:
00008546 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000854A 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000854C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008550 7000                       		moveq	#0,d0
00008552 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008556 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008558 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000855C 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000855E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008564                            
00008564                            Obj18_07_NoMove:
00008564 4E75                       		rts	
00008566                            ; ===========================================================================
00008566                            
00008566                            Obj18_07_Wait:
00008566 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000856A 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000856C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008570 4E75                       		rts	
00008572                            ; ===========================================================================
00008572                            
00008572                            Obj18_Type08:
00008572 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008576 3028 0034                  		move.w	$34(a0),d0
0000857A 0440 0200                  		subi.w	#$200,d0
0000857E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008582 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008584 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008588                            
00008588                            Obj18_08_NoStop:
00008588 4E75                       		rts	
0000858A                            ; ===========================================================================
0000858A                            
0000858A                            Obj18_Type0A:
0000858A 3028 0034                  		move.w	$34(a0),d0
0000858E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008592 0401 0040                  		subi.b	#$40,d1
00008596 4881                       		ext.w	d1
00008598 E241                       		asr.w	#1,d1
0000859A D041                       		add.w	d1,d0
0000859C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000085A0                            
000085A0                            Obj18_ChgMotion:
000085A0 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000085A6 4E75                       		rts	
000085A8                            ; ===========================================================================
000085A8                            
000085A8                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000085A8 3028 0032                  		move.w	$32(a0),d0
000085AC 0240 FF80                  		andi.w	#$FF80,d0
000085B0 3238 F700                  		move.w	($FFFFF700).w,d1
000085B4 0441 0080                  		subi.w	#$80,d1
000085B8 0241 FF80                  		andi.w	#$FF80,d1
000085BC 9041                       		sub.w	d1,d0
000085BE 0C40 0280                  		cmpi.w	#$280,d0
000085C2 6200                       		bhi.s	Obj18_Delete
000085C4 4E75                       		rts	
000085C6                            ; ===========================================================================
000085C6                            
000085C6                            Obj18_Delete:				; XREF: Obj18_Index
000085C6 6000 0000                  		bra.w	DeleteObject
000085CA                            ; ===========================================================================
000085CA                            ; ---------------------------------------------------------------------------
000085CA                            ; Sprite mappings - unused
000085CA                            ; ---------------------------------------------------------------------------
000085CA                            Map_obj18x:
000085CA                            	include "_maps\obj18x.asm"
000085CA                            ; ---------------------------------------------------------------------------
000085CA                            ; Sprite mappings - unused
000085CA                            ; ---------------------------------------------------------------------------
000085CA 0000                       		dc.w byte_80FE-Map_obj18x
000085CC 0000                       		dc.w byte_8109-Map_obj18x
000085CE 02                         byte_80FE:	dc.b 2
000085CF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000085D4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000085D9 0A                         byte_8109:	dc.b $A
000085DA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000085DF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000085E4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000085E9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000085EE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000085F3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000085F8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000085FD 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008602 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008607 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000860C                            		even
0000860C                            		even
0000860C                            
0000860C                            ; ---------------------------------------------------------------------------
0000860C                            ; Sprite mappings - GHZ	platforms
0000860C                            ; ---------------------------------------------------------------------------
0000860C                            Map_obj18:
0000860C                            	include "_maps\obj18ghz.asm"
0000860C                            ; ---------------------------------------------------------------------------
0000860C                            ; Sprite mappings - GHZ	platforms
0000860C                            ; ---------------------------------------------------------------------------
0000860C 0000                       		dc.w byte_8140-Map_obj18
0000860E 0000                       		dc.w byte_8155-Map_obj18
00008610 04                         byte_8140:	dc.b 4
00008611 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008616 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000861B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008620 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008625 0A                         byte_8155:	dc.b $A
00008626 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000862B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008630 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008635 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000863A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000863F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008644 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008649 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000864E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008653 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008658                            		even
00008658                            		even
00008658                            
00008658                            ; ---------------------------------------------------------------------------
00008658                            ; Sprite mappings - SYZ	platforms
00008658                            ; ---------------------------------------------------------------------------
00008658                            Map_obj18a:
00008658                            	include "_maps\obj18syz.asm"
00008658                            ; ---------------------------------------------------------------------------
00008658                            ; Sprite mappings - SYZ	platforms
00008658                            ; ---------------------------------------------------------------------------
00008658 0000                       		dc.w byte_818A-Map_obj18a
0000865A 03                         byte_818A:	dc.b 3
0000865B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008660 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008665 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000866A                            		even
0000866A                            		even
0000866A                            
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            ; Sprite mappings - SLZ	platforms
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            Map_obj18b:
0000866A                            	include "_maps\obj18slz.asm"
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            ; Sprite mappings - SLZ	platforms
0000866A                            ; ---------------------------------------------------------------------------
0000866A 0000                       		dc.w byte_819C-Map_obj18b
0000866C 02                         byte_819C:	dc.b 2
0000866D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008672 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008678 00                         		even
00008678 00                         		even
00008678                            
00008678                            ; ===========================================================================
00008678                            ; ---------------------------------------------------------------------------
00008678                            ; Object 19 - blank
00008678                            ; ---------------------------------------------------------------------------
00008678                            
00008678                            Obj19:					; XREF: Obj_Index
00008678 4E75                       		rts	
0000867A                            ; ===========================================================================
0000867A                            ; ---------------------------------------------------------------------------
0000867A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000867A                            ; ---------------------------------------------------------------------------
0000867A                            Map_obj48:
0000867A                            	include "_maps\obj48.asm"
0000867A                            ; ---------------------------------------------------------------------------
0000867A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000867A                            ; ---------------------------------------------------------------------------
0000867A 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000867E 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008682 06                         byte_81B2:	dc.b 6
00008683 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008688 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000868D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008692 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008697 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000869C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000086A1 04                         byte_81D1:	dc.b 4
000086A2 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000086A7 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000086AC 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000086B1 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000086B6 04                         byte_81E6:	dc.b 4
000086B7 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000086BC E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000086C1 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000086C6 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000086CB 04                         byte_81FB:	dc.b 4
000086CC E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000086D1 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000086D6 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000086DB 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000086E0                            		even
000086E0                            		even
000086E0                            
000086E0                            ; ===========================================================================
000086E0                            ; ---------------------------------------------------------------------------
000086E0                            ; Object 1A - GHZ collapsing ledge
000086E0                            ; ---------------------------------------------------------------------------
000086E0                            
000086E0                            Obj1A:					; XREF: Obj_Index
000086E0 7000                       		moveq	#0,d0
000086E2 1028 0024                  		move.b	$24(a0),d0
000086E6 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000086EA 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000086EE                            ; ===========================================================================
000086EE 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000086F2 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000086F6 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000086FA                            ; ===========================================================================
000086FA                            
000086FA                            Obj1A_Main:				; XREF: Obj1A_Index
000086FA 5428 0024                  		addq.b	#2,$24(a0)
000086FE 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008706 317C 4000 0002             		move.w	#$4000,2(a0)
0000870C 0028 0004 0001             		ori.b	#4,1(a0)
00008712 117C 0004 0018             		move.b	#4,$18(a0)
00008718 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000871E 117C 0064 0019             		move.b	#$64,$19(a0)
00008724 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000872A 117C 0038 0016             		move.b	#$38,$16(a0)
00008730 08E8 0004 0001             		bset	#4,1(a0)
00008736                            
00008736                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008736 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000873A 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000873C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008740 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008744 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008748                            
00008748                            Obj1A_Slope:
00008748 323C 0030                  		move.w	#$30,d1
0000874C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008752 6100 F2A4                  		bsr.w	SlopeObject
00008756 6000 0000                  		bra.w	MarkObjGone
0000875A                            ; ===========================================================================
0000875A                            
0000875A                            Obj1A_Touch:				; XREF: Obj1A_Index
0000875A 4A28 0038                  		tst.b	$38(a0)
0000875E 6700 0000                  		beq.w	loc_847A
00008762 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008768 5328 0038                  		subq.b	#1,$38(a0)
0000876C                            
0000876C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000876C                            
0000876C                            
0000876C                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000876C 323C 0030                  		move.w	#$30,d1
00008770 6100 F326                  		bsr.w	ExitPlatform
00008774 323C 0030                  		move.w	#$30,d1
00008778 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000877E 3428 0008                  		move.w	8(a0),d2
00008782 6100 0000                  		bsr.w	SlopeObject2
00008786 6000 0000                  		bra.w	MarkObjGone
0000878A                            ; End of function Obj1A_WalkOff
0000878A                            
0000878A                            ; ===========================================================================
0000878A                            
0000878A                            Obj1A_Display:				; XREF: Obj1A_Index
0000878A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000878E 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008790 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008794 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008798 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000879C 6000 0000                  		bra.w	DisplaySprite
000087A0                            ; ===========================================================================
000087A0                            
000087A0                            loc_82D0:				; XREF: Obj1A_Display
000087A0 5328 0038                  		subq.b	#1,$38(a0)
000087A4 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000087A8 43F8 D000                  		lea	($FFFFD000).w,a1
000087AC 0829 0003 0022             		btst	#3,$22(a1)
000087B2 6700                       		beq.s	loc_82FC
000087B4 4A28 0038                  		tst.b	$38(a0)
000087B8 6600                       		bne.s	locret_8308
000087BA 08A9 0003 0022             		bclr	#3,$22(a1)
000087C0 08A9 0005 0022             		bclr	#5,$22(a1)
000087C6 137C 0001 001D             		move.b	#1,$1D(a1)
000087CC                            
000087CC                            loc_82FC:
000087CC 117C 0000 003A             		move.b	#0,$3A(a0)
000087D2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000087D8                            
000087D8                            locret_8308:
000087D8 4E75                       		rts	
000087DA                            ; ===========================================================================
000087DA                            
000087DA                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000087DA 6100 0000                  		bsr.w	ObjectFall
000087DE 6100 0000                  		bsr.w	DisplaySprite
000087E2 4A28 0001                  		tst.b	1(a0)
000087E6 6A00                       		bpl.s	Obj1A_Delete
000087E8 4E75                       		rts	
000087EA                            ; ===========================================================================
000087EA                            
000087EA                            Obj1A_Delete:				; XREF: Obj1A_Index
000087EA 6100 0000                  		bsr.w	DeleteObject
000087EE 4E75                       		rts	
000087F0                            ; ===========================================================================
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            
000087F0                            Obj53:					; XREF: Obj_Index
000087F0 7000                       		moveq	#0,d0
000087F2 1028 0024                  		move.b	$24(a0),d0
000087F6 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000087FA 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000087FE                            ; ===========================================================================
000087FE 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008802 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008806 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000880A                            ; ===========================================================================
0000880A                            
0000880A                            Obj53_Main:				; XREF: Obj53_Index
0000880A 5428 0024                  		addq.b	#2,$24(a0)
0000880E 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008816 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000881C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008822 6600                       		bne.s	Obj53_NotSLZ
00008824 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000882A 5428 001A                  		addq.b	#2,$1A(a0)
0000882E                            
0000882E                            Obj53_NotSLZ:
0000882E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008834 6600                       		bne.s	Obj53_NotSBZ
00008836 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000883C                            
0000883C                            Obj53_NotSBZ:
0000883C 0028 0004 0001             		ori.b	#4,1(a0)
00008842 117C 0004 0018             		move.b	#4,$18(a0)
00008848 117C 0007 0038             		move.b	#7,$38(a0)
0000884E 117C 0044 0019             		move.b	#$44,$19(a0)
00008854                            
00008854                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008854 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008858 6700                       		beq.s	Obj53_Solid	; if not, branch
0000885A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000885E 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008862 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008866                            
00008866                            Obj53_Solid:
00008866 323C 0020                  		move.w	#$20,d1
0000886A 6100 F0B8                  		bsr.w	PlatformObject
0000886E 4A28 0028                  		tst.b	$28(a0)
00008872 6A00                       		bpl.s	Obj53_MarkAsGone
00008874 0829 0003 0022             		btst	#3,$22(a1)
0000887A 6700                       		beq.s	Obj53_MarkAsGone
0000887C 08A8 0000 0001             		bclr	#0,1(a0)
00008882 3029 0008                  		move.w	8(a1),d0
00008886 9068 0008                  		sub.w	8(a0),d0
0000888A 6400                       		bcc.s	Obj53_MarkAsGone
0000888C 08E8 0000 0001             		bset	#0,1(a0)
00008892                            
00008892                            Obj53_MarkAsGone:
00008892 6000 0000                  		bra.w	MarkObjGone
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Touch:				; XREF: Obj53_Index
00008896 4A28 0038                  		tst.b	$38(a0)
0000889A 6700 0000                  		beq.w	loc_8458
0000889E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000088A4 5328 0038                  		subq.b	#1,$38(a0)
000088A8                            
000088A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088A8                            
000088A8                            
000088A8                            Obj53_WalkOff:				; XREF: Obj53_Index
000088A8 323C 0020                  		move.w	#$20,d1
000088AC 6100 F1EA                  		bsr.w	ExitPlatform
000088B0 3428 0008                  		move.w	8(a0),d2
000088B4 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000088B8 6000 0000                  		bra.w	MarkObjGone
000088BC                            ; End of function Obj53_WalkOff
000088BC                            
000088BC                            ; ===========================================================================
000088BC                            
000088BC                            Obj53_Display:				; XREF: Obj53_Index
000088BC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088C0 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000088C2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088C6 6600 0000                  		bne.w	loc_8402	; if yes, branch
000088CA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088CE 6000 0000                  		bra.w	DisplaySprite
000088D2                            ; ===========================================================================
000088D2                            
000088D2                            loc_8402:
000088D2 5328 0038                  		subq.b	#1,$38(a0)
000088D6 6100 FFD0                  		bsr.w	Obj53_WalkOff
000088DA 43F8 D000                  		lea	($FFFFD000).w,a1
000088DE 0829 0003 0022             		btst	#3,$22(a1)
000088E4 6700                       		beq.s	loc_842E
000088E6 4A28 0038                  		tst.b	$38(a0)
000088EA 6600                       		bne.s	locret_843A
000088EC 08A9 0003 0022             		bclr	#3,$22(a1)
000088F2 08A9 0005 0022             		bclr	#5,$22(a1)
000088F8 137C 0001 001D             		move.b	#1,$1D(a1)
000088FE                            
000088FE                            loc_842E:
000088FE 117C 0000 003A             		move.b	#0,$3A(a0)
00008904 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000890A                            
0000890A                            locret_843A:
0000890A 4E75                       		rts	
0000890C                            ; ===========================================================================
0000890C                            
0000890C                            Obj53_TimeZero:				; XREF: Obj53_Display
0000890C 6100 0000                  		bsr.w	ObjectFall
00008910 6100 0000                  		bsr.w	DisplaySprite
00008914 4A28 0001                  		tst.b	1(a0)
00008918 6A00                       		bpl.s	Obj53_Delete
0000891A 4E75                       		rts	
0000891C                            ; ===========================================================================
0000891C                            
0000891C                            Obj53_Delete:				; XREF: Obj53_Index
0000891C 6100 0000                  		bsr.w	DeleteObject
00008920 4E75                       		rts	
00008922                            ; ===========================================================================
00008922                            
00008922                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008922 117C 0000 003A             		move.b	#0,$3A(a0)
00008928                            
00008928                            loc_8458:				; XREF: Obj53_Touch
00008928 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000892E 0828 0000 0028             		btst	#0,$28(a0)
00008934 6700                       		beq.s	loc_846C
00008936 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000893C                            
0000893C                            loc_846C:
0000893C 7207                       		moveq	#7,d1
0000893E 5228 001A                  		addq.b	#1,$1A(a0)
00008942 6000                       		bra.s	loc_8486
00008944                            ; ===========================================================================
00008944                            
00008944                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008944 117C 0000 003A             		move.b	#0,$3A(a0)
0000894A                            
0000894A                            loc_847A:				; XREF: Obj1A_Touch
0000894A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008950 7218                       		moveq	#$18,d1
00008952 5428 001A                  		addq.b	#2,$1A(a0)
00008956                            
00008956                            loc_8486:				; XREF: Obj53_Collapse
00008956 7000                       		moveq	#0,d0
00008958 1028 001A                  		move.b	$1A(a0),d0
0000895C D040                       		add.w	d0,d0
0000895E 2668 0004                  		movea.l	4(a0),a3
00008962 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008966 524B                       		addq.w	#1,a3
00008968 08E8 0005 0001             		bset	#5,1(a0)
0000896E 1810                       		move.b	0(a0),d4
00008970 1A28 0001                  		move.b	1(a0),d5
00008974 2248                       		movea.l	a0,a1
00008976 6000                       		bra.s	loc_84B2
00008978                            ; ===========================================================================
00008978                            
00008978                            loc_84AA:
00008978 6100 0000                  		bsr.w	SingleObjLoad
0000897C 6600                       		bne.s	loc_84F2
0000897E 5A4B                       		addq.w	#5,a3
00008980                            
00008980                            loc_84B2:
00008980 137C 0006 0024             		move.b	#6,$24(a1)
00008986 1284                       		move.b	d4,0(a1)
00008988 234B 0004                  		move.l	a3,4(a1)
0000898C 1345 0001                  		move.b	d5,1(a1)
00008990 3368 0008 0008             		move.w	8(a0),8(a1)
00008996 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000899C 3368 0002 0002             		move.w	2(a0),2(a1)
000089A2 1368 0018 0018             		move.b	$18(a0),$18(a1)
000089A8 1368 0019 0019             		move.b	$19(a0),$19(a1)
000089AE 135C 0038                  		move.b	(a4)+,$38(a1)
000089B2 B3C8                       		cmpa.l	a0,a1
000089B4 6400                       		bcc.s	loc_84EE
000089B6 6100 0000                  		bsr.w	DisplaySprite2
000089BA                            
000089BA                            loc_84EE:
000089BA 51C9 FFBC                  		dbf	d1,loc_84AA
000089BE                            
000089BE                            loc_84F2:
000089BE 6100 0000                  		bsr.w	DisplaySprite
000089C2 303C 00B9                  		move.w	#$B9,d0
000089C6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000089CC                            ; ===========================================================================
000089CC                            ; ---------------------------------------------------------------------------
000089CC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000089CC                            ; ---------------------------------------------------------------------------
000089CC 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000089DC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000089E6 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000089EE 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000089F6                            
000089F6                            ; ---------------------------------------------------------------------------
000089F6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000089F6                            ; ---------------------------------------------------------------------------
000089F6                            
000089F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089F6                            
000089F6                            
000089F6                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000089F6 43F8 D000                  		lea	($FFFFD000).w,a1
000089FA 0829 0003 0022             		btst	#3,$22(a1)
00008A00 6700                       		beq.s	locret_856E
00008A02 3029 0008                  		move.w	8(a1),d0
00008A06 9068 0008                  		sub.w	8(a0),d0
00008A0A D041                       		add.w	d1,d0
00008A0C E248                       		lsr.w	#1,d0
00008A0E 0828 0000 0001             		btst	#0,1(a0)
00008A14 6700                       		beq.s	loc_854E
00008A16 4640                       		not.w	d0
00008A18 D041                       		add.w	d1,d0
00008A1A                            
00008A1A                            loc_854E:
00008A1A 7200                       		moveq	#0,d1
00008A1C 1232 0000                  		move.b	(a2,d0.w),d1
00008A20 3028 000C                  		move.w	$C(a0),d0
00008A24 9041                       		sub.w	d1,d0
00008A26 7200                       		moveq	#0,d1
00008A28 1229 0016                  		move.b	$16(a1),d1
00008A2C 9041                       		sub.w	d1,d0
00008A2E 3340 000C                  		move.w	d0,$C(a1)
00008A32 9468 0008                  		sub.w	8(a0),d2
00008A36 9569 0008                  		sub.w	d2,8(a1)
00008A3A                            
00008A3A                            locret_856E:
00008A3A 4E75                       		rts	
00008A3C                            ; End of function SlopeObject2
00008A3C                            
00008A3C                            ; ===========================================================================
00008A3C                            ; ---------------------------------------------------------------------------
00008A3C                            ; Collision data for GHZ collapsing ledge
00008A3C                            ; ---------------------------------------------------------------------------
00008A3C                            Obj1A_SlopeData:
00008A3C                            		incbin	misc\ghzledge.bin
00008A6C                            		even
00008A6C                            
00008A6C                            ; ---------------------------------------------------------------------------
00008A6C                            ; Sprite mappings - GHZ	collapsing ledge
00008A6C                            ; ---------------------------------------------------------------------------
00008A6C                            Map_obj1A:
00008A6C                            	include "_maps\obj1A.asm"
00008A6C                            ; ---------------------------------------------------------------------------
00008A6C                            ; Sprite mappings - GHZ	collapsing ledge
00008A6C                            ; ---------------------------------------------------------------------------
00008A6C 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008A70 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008A74 10                         byte_85A8:	dc.b $10
00008A75 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008A7A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A7F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A84 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A89 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A8E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A93 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A98 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A9D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AA2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AA7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008AAC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AB1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008AB6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008ABB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008AC0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008AC5 10                         byte_85F9:	dc.b $10
00008AC6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008ACB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008AD0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008AD5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008ADA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ADF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008AE4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008AE9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008AEE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AF3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008AF8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008AFD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B02 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008B07 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B0C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008B11 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B16 19                         byte_864A:	dc.b $19
00008B17 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008B1C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B21 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B26 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B2B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B30 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B35 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B3A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B3F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B44 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008B49 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B4E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B53 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B58 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B5D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B62 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008B67 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B6C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B71 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B76 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B7B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B80 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B85 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B8A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B8F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B94 19                         byte_86C8:	dc.b $19
00008B95 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B9A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B9F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008BA4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008BA9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008BAE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008BB3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008BB8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008BBD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BC2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008BC7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008BCC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008BD1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008BD6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008BDB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BE0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008BE5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008BEA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008BEF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008BF4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008BF9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008BFE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008C03 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008C08 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008C0D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C12                            		even
00008C12                            		even
00008C12                            
00008C12                            ; ---------------------------------------------------------------------------
00008C12                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C12                            ; ---------------------------------------------------------------------------
00008C12                            Map_obj53:
00008C12                            	include "_maps\obj53.asm"
00008C12                            ; ---------------------------------------------------------------------------
00008C12                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C12                            ; ---------------------------------------------------------------------------
00008C12 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008C16 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008C1A 04                         byte_874E:	dc.b 4
00008C1B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008C20 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008C25 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C2A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008C2F 08                         byte_8763:	dc.b 8
00008C30 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C35 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008C3A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C3F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008C44 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008C49 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008C4E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008C53 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008C58 04                         byte_878C:	dc.b 4
00008C59 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008C5E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008C63 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C68 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008C6D 08                         byte_87A1:	dc.b 8
00008C6E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C73 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008C78 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C7D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008C82 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C87 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C8C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C91 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C96                            		even
00008C96                            		even
00008C96                            
00008C96                            ; ===========================================================================
00008C96                            ; ---------------------------------------------------------------------------
00008C96                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C96                            ; ---------------------------------------------------------------------------
00008C96                            
00008C96                            Obj1C:					; XREF: Obj_Index
00008C96 7000                       		moveq	#0,d0
00008C98 1028 0024                  		move.b	$24(a0),d0
00008C9C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008CA0 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008CA4                            ; ===========================================================================
00008CA4 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008CA6 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008CA8                            ; ===========================================================================
00008CA8                            
00008CA8                            Obj1C_Main:				; XREF: Obj1C_Index
00008CA8 5428 0024                  		addq.b	#2,$24(a0)
00008CAC 7000                       		moveq	#0,d0
00008CAE 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008CB2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008CB6 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008CBA 2159 0004                  		move.l	(a1)+,4(a0)
00008CBE 3159 0002                  		move.w	(a1)+,2(a0)
00008CC2 0028 0004 0001             		ori.b	#4,1(a0)
00008CC8 1159 001A                  		move.b	(a1)+,$1A(a0)
00008CCC 1159 0019                  		move.b	(a1)+,$19(a0)
00008CD0 1159 0018                  		move.b	(a1)+,$18(a0)
00008CD4 1159 0020                  		move.b	(a1)+,$20(a0)
00008CD8                            
00008CD8                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008CD8 3028 0008                  		move.w	8(a0),d0
00008CDC 0240 FF80                  		andi.w	#$FF80,d0
00008CE0 3238 F700                  		move.w	($FFFFF700).w,d1
00008CE4 0441 0080                  		subi.w	#$80,d1
00008CE8 0241 FF80                  		andi.w	#$FF80,d1
00008CEC 9041                       		sub.w	d1,d0
00008CEE 0C40 0280                  		cmpi.w	#$280,d0
00008CF2 6200 0000                  		bhi.w	DeleteObject
00008CF6 6000 0000                  		bra.w	DisplaySprite
00008CFA                            ; ===========================================================================
00008CFA                            ; ---------------------------------------------------------------------------
00008CFA                            ; Variables for	object $1C are stored in an array
00008CFA                            ; ---------------------------------------------------------------------------
00008CFA 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008CFE 44D8                       		dc.w $44D8		; VRAM setting
00008D00 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008D04 0000 0000                  		dc.l Map_obj1C
00008D08 44D8                       		dc.w $44D8
00008D0A 0008 0200                  		dc.b 0,	8, 2, 0
00008D0E 0000 0000                  		dc.l Map_obj1C
00008D12 44D8                       		dc.w $44D8
00008D14 0008 0200                  		dc.b 0,	8, 2, 0
00008D18 0000 7E0C                  		dc.l Map_obj11
00008D1C 438E                       		dc.w $438E
00008D1E 0110 0100                  		dc.b 1,	$10, 1,	0
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            ; Sprite mappings - SLZ	lava thrower
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            Map_obj1C:
00008D22                            	include "_maps\obj1C.asm"
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            ; Sprite mappings - SLZ	lava thrower
00008D22                            ; ---------------------------------------------------------------------------
00008D22 0000                       		dc.w byte_8858-Map_obj1C
00008D24 01                         byte_8858:	dc.b 1
00008D25 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008D2A                            		even
00008D2A                            		even
00008D2A                            
00008D2A                            ; ===========================================================================
00008D2A                            ; ---------------------------------------------------------------------------
00008D2A                            ; Object 1D - switch that activates when Sonic touches it
00008D2A                            ; (this	is not used anywhere in	the game)
00008D2A                            ; ---------------------------------------------------------------------------
00008D2A                            
00008D2A                            Obj1D:					; XREF: Obj_Index
00008D2A 7000                       		moveq	#0,d0
00008D2C 1028 0024                  		move.b	$24(a0),d0
00008D30 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008D34 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008D38                            ; ===========================================================================
00008D38 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008D3A 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008D3C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008D3E                            ; ===========================================================================
00008D3E                            
00008D3E                            Obj1D_Main:				; XREF: Obj1D_Index
00008D3E 5428 0024                  		addq.b	#2,$24(a0)
00008D42 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008D4A 317C 4000 0002             		move.w	#$4000,2(a0)
00008D50 117C 0004 0001             		move.b	#4,1(a0)
00008D56 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008D5C 117C 0010 0019             		move.b	#$10,$19(a0)
00008D62 117C 0005 0018             		move.b	#5,$18(a0)
00008D68                            
00008D68                            Obj1D_Action:				; XREF: Obj1D_Index
00008D68 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008D6E 323C 0010                  		move.w	#$10,d1
00008D72 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008D76 6700                       		beq.s	Obj1D_ChkDel
00008D78 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008D7C 7001                       		moveq	#1,d0
00008D7E 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008D82                            
00008D82                            Obj1D_ChkDel:
00008D82 6100 0000                  		bsr.w	DisplaySprite
00008D86 3028 0008                  		move.w	8(a0),d0
00008D8A 0240 FF80                  		andi.w	#$FF80,d0
00008D8E 3238 F700                  		move.w	($FFFFF700).w,d1
00008D92 0441 0080                  		subi.w	#$80,d1
00008D96 0241 FF80                  		andi.w	#$FF80,d1
00008D9A 9041                       		sub.w	d1,d0
00008D9C 0C40 0280                  		cmpi.w	#$280,d0
00008DA0 6200 0000                  		bhi.w	Obj1D_Delete
00008DA4 4E75                       		rts	
00008DA6                            ; ===========================================================================
00008DA6                            
00008DA6                            Obj1D_Delete:				; XREF: Obj1D_Index
00008DA6 6100 0000                  		bsr.w	DeleteObject
00008DAA 4E75                       		rts	
00008DAC                            ; ---------------------------------------------------------------------------
00008DAC                            ; Subroutine to	check if Sonic touches the object
00008DAC                            ; ---------------------------------------------------------------------------
00008DAC                            
00008DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DAC                            
00008DAC                            
00008DAC                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008DAC 43F8 D000                  		lea	($FFFFD000).w,a1
00008DB0 3029 0008                  		move.w	8(a1),d0
00008DB4 9068 0008                  		sub.w	8(a0),d0
00008DB8 D041                       		add.w	d1,d0
00008DBA 6B00                       		bmi.s	loc_8918
00008DBC D241                       		add.w	d1,d1
00008DBE B041                       		cmp.w	d1,d0
00008DC0 6400                       		bcc.s	loc_8918
00008DC2 3429 000C                  		move.w	$C(a1),d2
00008DC6 1229 0016                  		move.b	$16(a1),d1
00008DCA 4881                       		ext.w	d1
00008DCC D242                       		add.w	d2,d1
00008DCE 3028 000C                  		move.w	$C(a0),d0
00008DD2 0440 0010                  		subi.w	#$10,d0
00008DD6 9041                       		sub.w	d1,d0
00008DD8 6200                       		bhi.s	loc_8918
00008DDA 0C40 FFF0                  		cmpi.w	#-$10,d0
00008DDE 6500                       		bcs.s	loc_8918
00008DE0 70FF                       		moveq	#-1,d0
00008DE2 4E75                       		rts	
00008DE4                            ; ===========================================================================
00008DE4                            
00008DE4                            loc_8918:
00008DE4 7000                       		moveq	#0,d0
00008DE6 4E75                       		rts	
00008DE8                            ; End of function Obj1D_ChkTouch
00008DE8                            
00008DE8                            ; ===========================================================================
00008DE8                            ; ---------------------------------------------------------------------------
00008DE8                            ; Sprite mappings - object 1D
00008DE8                            ; ---------------------------------------------------------------------------
00008DE8                            Map_obj1D:
00008DE8                            	include "_maps\obj1D.asm"
00008DE8                            ; ---------------------------------------------------------------------------
00008DE8                            ; Sprite mappings - object 1D
00008DE8                            ; ---------------------------------------------------------------------------
00008DE8 0000                       		dc.w byte_891E-Map_obj1D
00008DEA 04                         byte_891E:	dc.b 4
00008DEB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008DF0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008DF5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008DFA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008E00 00                         		even
00008E00 00                         		even
00008E00                            
00008E00                            ; ===========================================================================
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Object 2A - doors (SBZ)
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            
00008E00                            Obj2A:					; XREF: Obj_Index
00008E00 7000                       		moveq	#0,d0
00008E02 1028 0024                  		move.b	$24(a0),d0
00008E06 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008E0A 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008E0E                            ; ===========================================================================
00008E0E 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008E10 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008E12                            ; ===========================================================================
00008E12                            
00008E12                            Obj2A_Main:				; XREF: Obj2A_Index
00008E12 5428 0024                  		addq.b	#2,$24(a0)
00008E16 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008E1E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008E24 0028 0004 0001             		ori.b	#4,1(a0)
00008E2A 117C 0008 0019             		move.b	#8,$19(a0)
00008E30 117C 0004 0018             		move.b	#4,$18(a0)
00008E36                            
00008E36                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008E36 323C 0040                  		move.w	#$40,d1
00008E3A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008E3E 3038 D008                  		move.w	($FFFFD008).w,d0
00008E42 D041                       		add.w	d1,d0
00008E44 B068 0008                  		cmp.w	8(a0),d0
00008E48 6500                       		bcs.s	Obj2A_Animate
00008E4A 9041                       		sub.w	d1,d0
00008E4C 9041                       		sub.w	d1,d0
00008E4E B068 0008                  		cmp.w	8(a0),d0
00008E52 6400                       		bcc.s	Obj2A_Animate
00008E54 D041                       		add.w	d1,d0
00008E56 B068 0008                  		cmp.w	8(a0),d0
00008E5A 6400                       		bcc.s	loc_899A
00008E5C 0828 0000 0022             		btst	#0,$22(a0)
00008E62 6600                       		bne.s	Obj2A_Animate
00008E64 6000                       		bra.s	Obj2A_Open
00008E66                            ; ===========================================================================
00008E66                            
00008E66                            loc_899A:				; XREF: Obj2A_OpenShut
00008E66 0828 0000 0022             		btst	#0,$22(a0)
00008E6C 6700                       		beq.s	Obj2A_Animate
00008E6E                            
00008E6E                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008E6E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008E74                            
00008E74                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008E74 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008E7A 6100 0000                  		bsr.w	AnimateSprite
00008E7E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008E82 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008E84 323C 0011                  		move.w	#$11,d1
00008E88 343C 0020                  		move.w	#$20,d2
00008E8C 3602                       		move.w	d2,d3
00008E8E 5243                       		addq.w	#1,d3
00008E90 3828 0008                  		move.w	8(a0),d4
00008E94 6100 0000                  		bsr.w	SolidObject
00008E98                            
00008E98                            Obj2A_MarkAsUsed:
00008E98 6000 0000                  		bra.w	MarkObjGone
00008E9C                            ; ===========================================================================
00008E9C                            Ani_obj2A:
00008E9C                            	include "_anim\obj2A.asm"
00008E9C                            ; ---------------------------------------------------------------------------
00008E9C                            ; Animation script - doors (SBZ)
00008E9C                            ; ---------------------------------------------------------------------------
00008E9C 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E9E 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008EA0 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008EAC 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008EB8                            		even
00008EB8                            		even
00008EB8                            
00008EB8                            ; ---------------------------------------------------------------------------
00008EB8                            ; Sprite mappings - doors (SBZ)
00008EB8                            ; ---------------------------------------------------------------------------
00008EB8                            Map_obj2A:
00008EB8                            	include "_maps\obj2A.asm"
00008EB8                            ; ---------------------------------------------------------------------------
00008EB8                            ; Sprite mappings - doors (SBZ)
00008EB8                            ; ---------------------------------------------------------------------------
00008EB8 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008EBC 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008EC0 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008EC4 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008EC8 0000                       		dc.w byte_8A56-Map_obj2A
00008ECA 02                         byte_89FE:	dc.b 2
00008ECB E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008ED0 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008ED5 02                         byte_8A09:	dc.b 2
00008ED6 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008EDB 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008EE0 02                         byte_8A14:	dc.b 2
00008EE1 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008EE6 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008EEB 02                         byte_8A1F:	dc.b 2
00008EEC D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008EF1 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008EF6 02                         byte_8A2A:	dc.b 2
00008EF7 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008EFC 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008F01 02                         byte_8A35:	dc.b 2
00008F02 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008F07 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008F0C 02                         byte_8A40:	dc.b 2
00008F0D C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008F12 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008F17 02                         byte_8A4B:	dc.b 2
00008F18 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008F1D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008F22 02                         byte_8A56:	dc.b 2
00008F23 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008F28 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008F2E 00                         		even
00008F2E 00                         		even
00008F2E                            
00008F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F2E                            
00008F2E                            
00008F2E                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008F2E 6100 0000                  		bsr.w	Obj44_SolidWall2
00008F32 6700                       		beq.s	loc_8AA8
00008F34 6B00 0000                  		bmi.w	loc_8AC4
00008F38 4A40                       		tst.w	d0
00008F3A 6700 0000                  		beq.w	loc_8A92
00008F3E 6B00                       		bmi.s	loc_8A7C
00008F40 4A69 0010                  		tst.w	$10(a1)
00008F44 6B00                       		bmi.s	loc_8A92
00008F46 6000                       		bra.s	loc_8A82
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            loc_8A7C:
00008F48 4A69 0010                  		tst.w	$10(a1)
00008F4C 6A00                       		bpl.s	loc_8A92
00008F4E                            
00008F4E                            loc_8A82:
00008F4E 9169 0008                  		sub.w	d0,8(a1)
00008F52 337C 0000 0014             		move.w	#0,$14(a1)
00008F58 337C 0000 0010             		move.w	#0,$10(a1)
00008F5E                            
00008F5E                            loc_8A92:
00008F5E 0829 0001 0022             		btst	#1,$22(a1)
00008F64 6600                       		bne.s	loc_8AB6
00008F66 08E9 0005 0022             		bset	#5,$22(a1)
00008F6C 08E8 0005 0022             		bset	#5,$22(a0)
00008F72 4E75                       		rts	
00008F74                            ; ===========================================================================
00008F74                            
00008F74                            loc_8AA8:
00008F74 0828 0005 0022             		btst	#5,$22(a0)
00008F7A 6700                       		beq.s	locret_8AC2
00008F7C 337C 0001 001C             		move.w	#1,$1C(a1)
00008F82                            
00008F82                            loc_8AB6:
00008F82 08A8 0005 0022             		bclr	#5,$22(a0)
00008F88 08A9 0005 0022             		bclr	#5,$22(a1)
00008F8E                            
00008F8E                            locret_8AC2:
00008F8E 4E75                       		rts	
00008F90                            ; ===========================================================================
00008F90                            
00008F90                            loc_8AC4:
00008F90 4A69 0012                  		tst.w	$12(a1)
00008F94 6A00                       		bpl.s	locret_8AD8
00008F96 4A43                       		tst.w	d3
00008F98 6A00                       		bpl.s	locret_8AD8
00008F9A 9769 000C                  		sub.w	d3,$C(a1)
00008F9E 337C 0000 0012             		move.w	#0,$12(a1)
00008FA4                            
00008FA4                            locret_8AD8:
00008FA4 4E75                       		rts	
00008FA6                            ; End of function Obj44_SolidWall
00008FA6                            
00008FA6                            
00008FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA6                            
00008FA6                            
00008FA6                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008FA6 43F8 D000                  		lea	($FFFFD000).w,a1
00008FAA 3029 0008                  		move.w	8(a1),d0
00008FAE 9068 0008                  		sub.w	8(a0),d0
00008FB2 D041                       		add.w	d1,d0
00008FB4 6B00                       		bmi.s	loc_8B48
00008FB6 3601                       		move.w	d1,d3
00008FB8 D643                       		add.w	d3,d3
00008FBA B043                       		cmp.w	d3,d0
00008FBC 6200                       		bhi.s	loc_8B48
00008FBE 1629 0016                  		move.b	$16(a1),d3
00008FC2 4883                       		ext.w	d3
00008FC4 D443                       		add.w	d3,d2
00008FC6 3629 000C                  		move.w	$C(a1),d3
00008FCA 9668 000C                  		sub.w	$C(a0),d3
00008FCE D642                       		add.w	d2,d3
00008FD0 6B00                       		bmi.s	loc_8B48
00008FD2 3802                       		move.w	d2,d4
00008FD4 D844                       		add.w	d4,d4
00008FD6 B644                       		cmp.w	d4,d3
00008FD8 6400                       		bcc.s	loc_8B48
00008FDA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008FDE 6B00                       		bmi.s	loc_8B48
00008FE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008FE6 6400                       		bcc.s	loc_8B48
00008FE8 4A78 FE08                  		tst.w	($FFFFFE08).w
00008FEC 6600                       		bne.s	loc_8B48
00008FEE 3A00                       		move.w	d0,d5
00008FF0 B240                       		cmp.w	d0,d1
00008FF2 6400                       		bcc.s	loc_8B30
00008FF4 D241                       		add.w	d1,d1
00008FF6 9041                       		sub.w	d1,d0
00008FF8 3A00                       		move.w	d0,d5
00008FFA 4445                       		neg.w	d5
00008FFC                            
00008FFC                            loc_8B30:
00008FFC 3203                       		move.w	d3,d1
00008FFE B443                       		cmp.w	d3,d2
00009000 6400                       		bcc.s	loc_8B3C
00009002 9644                       		sub.w	d4,d3
00009004 3203                       		move.w	d3,d1
00009006 4441                       		neg.w	d1
00009008                            
00009008                            loc_8B3C:
00009008 BA41                       		cmp.w	d1,d5
0000900A 6200                       		bhi.s	loc_8B44
0000900C 7801                       		moveq	#1,d4
0000900E 4E75                       		rts	
00009010                            ; ===========================================================================
00009010                            
00009010                            loc_8B44:
00009010 78FF                       		moveq	#-1,d4
00009012 4E75                       		rts	
00009014                            ; ===========================================================================
00009014                            
00009014                            loc_8B48:
00009014 7800                       		moveq	#0,d4
00009016 4E75                       		rts	
00009018                            ; End of function Obj44_SolidWall2
00009018                            
00009018                            ; ===========================================================================
00009018                            ; ---------------------------------------------------------------------------
00009018                            ; Object 1E - Ball Hog enemy (SBZ)
00009018                            ; ---------------------------------------------------------------------------
00009018                            
00009018                            Obj1E:					; XREF: Obj_Index
00009018 7000                       		moveq	#0,d0
0000901A 1028 0024                  		move.b	$24(a0),d0
0000901E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009022 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009026                            ; ===========================================================================
00009026 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009028 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000902A                            ; ===========================================================================
0000902A                            
0000902A                            Obj1E_Main:				; XREF: Obj1E_Index
0000902A 117C 0013 0016             		move.b	#$13,$16(a0)
00009030 117C 0008 0017             		move.b	#8,$17(a0)
00009036 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000903E 317C 2302 0002             		move.w	#$2302,2(a0)
00009044 117C 0004 0001             		move.b	#4,1(a0)
0000904A 117C 0004 0018             		move.b	#4,$18(a0)
00009050 117C 0005 0020             		move.b	#5,$20(a0)
00009056 117C 000C 0019             		move.b	#$C,$19(a0)
0000905C 6100 0000                  		bsr.w	ObjectFall
00009060 4EB9 0000 0000             		jsr	ObjHitFloor
00009066 4A41                       		tst.w	d1
00009068 6A00                       		bpl.s	locret_8BAC
0000906A D368 000C                  		add.w	d1,$C(a0)
0000906E 317C 0000 0012             		move.w	#0,$12(a0)
00009074 5428 0024                  		addq.b	#2,$24(a0)
00009078                            
00009078                            locret_8BAC:
00009078 4E75                       		rts	
0000907A                            ; ===========================================================================
0000907A                            
0000907A                            Obj1E_Action:				; XREF: Obj1E_Index
0000907A 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009080 6100 0000                  		bsr.w	AnimateSprite
00009084 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000908A 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000908C 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009090 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009092 6000                       		bra.s	Obj1E_MarkAsGone
00009094                            ; ===========================================================================
00009094                            
00009094                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009094 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009098                            
00009098                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009098 6000 0000                  		bra.w	MarkObjGone
0000909C                            ; ===========================================================================
0000909C                            
0000909C                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000909C 117C 0001 0032             		move.b	#1,$32(a0)
000090A2 6100 0000                  		bsr.w	SingleObjLoad
000090A6 6600                       		bne.s	loc_8C1A
000090A8 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000090AC 3368 0008 0008             		move.w	8(a0),8(a1)
000090B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090B8 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000090BE 337C 0000 0012             		move.w	#0,$12(a1)
000090C4 70FC                       		moveq	#-4,d0
000090C6 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000090CC 6700                       		beq.s	loc_8C0A	; if not, branch
000090CE 4440                       		neg.w	d0
000090D0 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000090D4                            
000090D4                            loc_8C0A:
000090D4 D169 0008                  		add.w	d0,8(a1)
000090D8 0669 000C 000C             		addi.w	#$C,$C(a1)
000090DE 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000090E4                            
000090E4                            loc_8C1A:
000090E4 60B2                       		bra.s	Obj1E_MarkAsGone
000090E6                            ; ===========================================================================
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            
000090E6                            Obj20:					; XREF: Obj_Index
000090E6 7000                       		moveq	#0,d0
000090E8 1028 0024                  		move.b	$24(a0),d0
000090EC 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000090F0 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000090F4                            ; ===========================================================================
000090F4 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000090F6 0000                       		dc.w Obj20_Bounce-Obj20_Index
000090F8                            ; ===========================================================================
000090F8                            
000090F8                            Obj20_Main:				; XREF: Obj20_Index
000090F8 5428 0024                  		addq.b	#2,$24(a0)
000090FC 117C 0007 0016             		move.b	#7,$16(a0)
00009102 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000910A 317C 2302 0002             		move.w	#$2302,2(a0)
00009110 117C 0004 0001             		move.b	#4,1(a0)
00009116 117C 0003 0018             		move.b	#3,$18(a0)
0000911C 117C 0087 0020             		move.b	#$87,$20(a0)
00009122 117C 0008 0019             		move.b	#8,$19(a0)
00009128 7000                       		moveq	#0,d0
0000912A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000912E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009132 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009136 117C 0004 001A             		move.b	#4,$1A(a0)
0000913C                            
0000913C                            Obj20_Bounce:				; XREF: Obj20_Index
0000913C 4EB9 0000 0000             		jsr	ObjectFall
00009142 4A68 0012                  		tst.w	$12(a0)
00009146 6B00                       		bmi.s	Obj20_ChkExplode
00009148 4EB9 0000 0000             		jsr	ObjHitFloor
0000914E 4A41                       		tst.w	d1
00009150 6A00                       		bpl.s	Obj20_ChkExplode
00009152 D368 000C                  		add.w	d1,$C(a0)
00009156 317C FD00 0012             		move.w	#-$300,$12(a0)
0000915C 4A03                       		tst.b	d3
0000915E 6700                       		beq.s	Obj20_ChkExplode
00009160 6B00                       		bmi.s	loc_8CA4
00009162 4A68 0010                  		tst.w	$10(a0)
00009166 6A00                       		bpl.s	Obj20_ChkExplode
00009168 4468 0010                  		neg.w	$10(a0)
0000916C 6000                       		bra.s	Obj20_ChkExplode
0000916E                            ; ===========================================================================
0000916E                            
0000916E                            loc_8CA4:				; XREF: Obj20_Bounce
0000916E 4A68 0010                  		tst.w	$10(a0)
00009172 6B00                       		bmi.s	Obj20_ChkExplode
00009174 4468 0010                  		neg.w	$10(a0)
00009178                            
00009178                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009178 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000917C 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000917E 10BC 0024                  		move.b	#$24,0(a0)
00009182 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009186 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000918C 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009190                            ; ===========================================================================
00009190                            
00009190                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009190 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009194 6A00                       		bpl.s	Obj20_Display
00009196 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000919C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000091A2                            
000091A2                            Obj20_Display:
000091A2 6100 0000                  		bsr.w	DisplaySprite
000091A6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091AA 0640 00E0                  		addi.w	#$E0,d0
000091AE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000091B2 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000091B6 4E75                       		rts	
000091B8                            ; ===========================================================================
000091B8                            ; ---------------------------------------------------------------------------
000091B8                            ; Object 24 - explosion	from a destroyed monitor
000091B8                            ; ---------------------------------------------------------------------------
000091B8                            
000091B8                            Obj24:					; XREF: Obj_Index
000091B8 7000                       		moveq	#0,d0
000091BA 1028 0024                  		move.b	$24(a0),d0
000091BE 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000091C2 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000091C6                            ; ===========================================================================
000091C6 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000091C8 0000                       		dc.w Obj24_Animate-Obj24_Index
000091CA                            ; ===========================================================================
000091CA                            
000091CA                            Obj24_Main:				; XREF: Obj24_Index
000091CA 5428 0024                  		addq.b	#2,$24(a0)
000091CE 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000091D6 317C 041C 0002             		move.w	#$41C,2(a0)
000091DC 117C 0004 0001             		move.b	#4,1(a0)
000091E2 117C 0001 0018             		move.b	#1,$18(a0)
000091E8 117C 0000 0020             		move.b	#0,$20(a0)
000091EE 117C 000C 0019             		move.b	#$C,$19(a0)
000091F4 117C 0009 001E             		move.b	#9,$1E(a0)
000091FA 117C 0000 001A             		move.b	#0,$1A(a0)
00009200 303C 00A5                  		move.w	#$A5,d0
00009204 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
0000920A                            
0000920A                            Obj24_Animate:				; XREF: Obj24_Index
0000920A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000920E 6A00                       		bpl.s	Obj24_Display
00009210 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009216 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000921A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009220 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009224                            
00009224                            Obj24_Display:
00009224 6000 0000                  		bra.w	DisplaySprite
00009228                            ; ===========================================================================
00009228                            ; ---------------------------------------------------------------------------
00009228                            ; Object 27 - explosion	from a destroyed enemy
00009228                            ; ---------------------------------------------------------------------------
00009228                            
00009228                            Obj27:					; XREF: Obj_Index
00009228 7000                       		moveq	#0,d0
0000922A 1028 0024                  		move.b	$24(a0),d0
0000922E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009232 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009236                            ; ===========================================================================
00009236 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009238 0000                       		dc.w Obj27_Main-Obj27_Index
0000923A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000923C                            ; ===========================================================================
0000923C                            
0000923C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000923C 5428 0024                  		addq.b	#2,$24(a0)
00009240 6100 0000                  		bsr.w	SingleObjLoad
00009244 6600                       		bne.s	Obj27_Main
00009246 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000924A 3368 0008 0008             		move.w	8(a0),8(a1)
00009250 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009256 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000925C                            
0000925C                            Obj27_Main:				; XREF: Obj27_Index
0000925C 5428 0024                  		addq.b	#2,$24(a0)
00009260 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009268 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000926E 117C 0004 0001             		move.b	#4,1(a0)
00009274 117C 0001 0018             		move.b	#1,$18(a0)
0000927A 117C 0000 0020             		move.b	#0,$20(a0)
00009280 117C 000C 0019             		move.b	#$C,$19(a0)
00009286                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009286 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000928C 117C 0000 001A             		move.b	#0,$1A(a0)
00009292 303C 00C1                  		move.w	#$C1,d0
00009296 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000929C                            
0000929C 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000092A2 1028 0028                  		move.b	$28(a0),d0
000092A6 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000092AC 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000092B2                            
000092B2                            Obj27_Animate:				; XREF: Obj27_Index
000092B2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092B6 6A00                       		bpl.s	Obj27_Display
000092B8                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000092B8 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000092BE 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000092C2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000092C8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000092CC                            
000092CC                            Obj27_Display:
000092CC 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000092D2 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000092D8 6000 0000                  		bra.w	DisplaySprite
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            Obj27_ExplosionXYSpd:
000092DC                            		; dc.w	-$350, -$300	; Left
000092DC                            		; dc.w	-$200, -$450	; Near middle (left)
000092DC                            		; dc.w	0, -$500	; Middle
000092DC                            		; dc.w	$200, -$450	; Near middle (right)
000092DC                            		; dc.w	$350, -$300	; Right
000092DC                            
000092DC FEB0 FC00                  		dc.w	-$150, -$400	; Left
000092E0 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000092E4 0000 FA00                  		dc.w	0, -$600	; Middle
000092E8 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000092EC 0150 FC00                  		dc.w	$150, -$400	; Right
000092F0                            
000092F0 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
0000930A                            ; ---------------------------------------------------------------------------
0000930A                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000930A                            ; ---------------------------------------------------------------------------
0000930A                            
0000930A                            Obj3F:					; XREF: Obj_Index
0000930A 7000                       		moveq	#0,d0
0000930C 1028 0024                  		move.b	$24(a0),d0
00009310 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009314 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009318                            ; ===========================================================================
00009318 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000931A FF9A                       		dc.w Obj27_Animate-Obj3F_Index
0000931C                            ; ===========================================================================
0000931C                            
0000931C                            Obj3F_Main:				; XREF: Obj3F_Index
0000931C 5428 0024                  		addq.b	#2,$24(a0)
00009320 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009328 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000932E 117C 0004 0001             		move.b	#4,1(a0)
00009334 117C 0001 0018             		move.b	#1,$18(a0)
0000933A 117C 0000 0020             		move.b	#0,$20(a0)
00009340 117C 000C 0019             		move.b	#$C,$19(a0)
00009346 117C 0007 001E             		move.b	#7,$1E(a0)
0000934C 117C 0000 001A             		move.b	#0,$1A(a0)
00009352 303C 00C4                  		move.w	#$C4,d0
00009356 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000935C                            ; ===========================================================================
0000935C                            Ani_obj1E:
0000935C                            	include "_anim\obj1E.asm"
0000935C                            ; ---------------------------------------------------------------------------
0000935C                            ; Animation script - doors (SBZ)
0000935C                            ; ---------------------------------------------------------------------------
0000935C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000935E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009376 00                         		even
00009376 00                         		even
00009376                            
00009376                            ; ---------------------------------------------------------------------------
00009376                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009376                            ; ---------------------------------------------------------------------------
00009376                            Map_obj1E:
00009376                            	include "_maps\obj1E.asm"
00009376                            ; ---------------------------------------------------------------------------
00009376                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009376                            ; ---------------------------------------------------------------------------
00009376 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000937A 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000937E 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009382 02                         byte_8E6E:	dc.b 2
00009383 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009388 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000938D 02                         byte_8E79:	dc.b 2
0000938E EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009393 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009398 02                         byte_8E84:	dc.b 2
00009399 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000939E 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000093A3 02                         byte_8E8F:	dc.b 2
000093A4 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000093A9 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000093AE 01                         byte_8E9A:	dc.b 1
000093AF F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000093B4 01                         byte_8EA0:	dc.b 1
000093B5 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000093BA                            		even
000093BA                            		even
000093BA                            
000093BA                            ; ---------------------------------------------------------------------------
000093BA                            ; Sprite mappings - explosion
000093BA                            ; ---------------------------------------------------------------------------
000093BA                            Map_obj24:
000093BA                            	include "_maps\obj24.asm"
000093BA                            ; ---------------------------------------------------------------------------
000093BA                            ; Sprite mappings - explosion
000093BA                            ; ---------------------------------------------------------------------------
000093BA 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000093BE 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000093C2 01                         byte_8EAE:	dc.b 1
000093C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000093C8 01                         byte_8EB4:	dc.b 1
000093C9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000093CE 01                         byte_8EBA:	dc.b 1
000093CF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000093D4 01                         byte_8EC0:	dc.b 1
000093D5 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000093DA                            		even
000093DA                            		even
000093DA                            
000093DA                            ; ---------------------------------------------------------------------------
000093DA                            ; Sprite mappings - explosion
000093DA                            ; ---------------------------------------------------------------------------
000093DA 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000093DE 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000093E2 0000                       		dc.w byte_8EF7-Map_obj27
000093E4 01                         byte_8ED0:	dc.b 1
000093E5 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000093EA 01                         byte_8ED6:	dc.b 1
000093EB F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000093F0 01                         byte_8EDC:	dc.b 1
000093F1 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000093F6 04                         byte_8EE2:	dc.b 4
000093F7 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000093FC EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009401 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009406 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000940B 04                         byte_8EF7:	dc.b 4
0000940C EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009411 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009416 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000941B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009420                            		even
00009420                            ; ---------------------------------------------------------------------------
00009420                            ; Sprite mappings - explosion from when	a boss is destroyed
00009420                            ; ---------------------------------------------------------------------------
00009420 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009422 0000                       		dc.w byte_8F16-Map_obj3F
00009424 0000                       		dc.w byte_8F1C-Map_obj3F
00009426 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009428 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000942A 01                         byte_8F16:	dc.b 1
0000942B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009430 01                         byte_8F1C:	dc.b 1
00009431 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009436                            		even
00009436                            ; ===========================================================================
00009436                            ; ---------------------------------------------------------------------------
00009436                            ; Object 28 - animals
00009436                            ; ---------------------------------------------------------------------------
00009436                            
00009436                            Obj28:					; XREF: Obj_Index
00009436 7000                       		moveq	#0,d0
00009438 1028 0024                  		move.b	$24(a0),d0
0000943C 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009440 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009444                            ; ===========================================================================
00009444 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009448 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000944C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009450 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009454 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009458 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000945C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009460 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009464 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009468 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000946C 0000                       		dc.w loc_92D6-Obj28_Index
0000946E                            
0000946E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000947A                            
0000947A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000947E 0000 0000                  		dc.l Map_obj28
00009482 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009486 0000 0000                  		dc.l Map_obj28a		; mappings address
0000948A FE80 FD00                  		dc.w $FE80, $FD00
0000948E 0000 0000                  		dc.l Map_obj28
00009492 FEC0 FE80                  		dc.w $FEC0, $FE80
00009496 0000 0000                  		dc.l Map_obj28a
0000949A FE40 FD00                  		dc.w $FE40, $FD00
0000949E 0000 0000                  		dc.l Map_obj28b
000094A2 FD00 FC00                  		dc.w $FD00, $FC00
000094A6 0000 0000                  		dc.l Map_obj28a
000094AA FD80 FC80                  		dc.w $FD80, $FC80
000094AE 0000 0000                  		dc.l Map_obj28b
000094B2                            
000094B2 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000094C2 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000094D2 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000094DE                            
000094DE 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000094F2 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009506 0000 0000                  		dc.l Map_obj28b
0000950A                            
0000950A 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000951C 0565 05B3                  		dc.w $565, $5B3
00009520                            ; ===========================================================================
00009520                            
00009520                            Obj28_Ending:				; XREF: Obj28_Index
00009520 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009524 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009528 7000                       		moveq	#0,d0
0000952A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000952E D040                       		add.w	d0,d0		; multiply d0 by 2
00009530 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009534 0440 0014                  		subi.w	#$14,d0
00009538 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000953E D040                       		add.w	d0,d0
00009540 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009546 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000954A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009550 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009556 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000955C 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009562 117C 000C 0016             		move.b	#$C,$16(a0)
00009568 117C 0004 0001             		move.b	#4,1(a0)
0000956E 08E8 0000 0001             		bset	#0,1(a0)
00009574 117C 0006 0018             		move.b	#6,$18(a0)
0000957A 117C 0008 0019             		move.b	#8,$19(a0)
00009580 117C 0007 001E             		move.b	#7,$1E(a0)
00009586 6000 0000                  		bra.w	DisplaySprite
0000958A                            ; ===========================================================================
0000958A                            
0000958A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000958A 5428 0024                  		addq.b	#2,$24(a0)
0000958E 6100 96AE                  		bsr.w	RandomNumber
00009592 0240 0001                  		andi.w	#1,d0
00009596 7200                       		moveq	#0,d1
00009598 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000959C D241                       		add.w	d1,d1
0000959E D240                       		add.w	d0,d1
000095A0 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000095A4 1031 1000                  		move.b	(a1,d1.w),d0
000095A8 1140 0030                  		move.b	d0,$30(a0)
000095AC E748                       		lsl.w	#3,d0
000095AE 43FA FECA                  		lea	Obj28_Variables(pc),a1
000095B2 D2C0                       		adda.w	d0,a1
000095B4 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000095B8 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000095BC 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000095C0 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000095C6 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000095CC 6700                       		beq.s	loc_90C0	; if yes, branch
000095CE 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000095D4                            
000095D4                            loc_90C0:
000095D4 117C 000C 0016             		move.b	#$C,$16(a0)
000095DA 117C 0004 0001             		move.b	#4,1(a0)
000095E0 08E8 0000 0001             		bset	#0,1(a0)
000095E6 117C 0006 0018             		move.b	#6,$18(a0)
000095EC 117C 0008 0019             		move.b	#8,$19(a0)
000095F2 117C 0007 001E             		move.b	#7,$1E(a0)
000095F8 117C 0002 001A             		move.b	#2,$1A(a0)
000095FE 317C FC00 0012             		move.w	#-$400,$12(a0)
00009604 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009608 6600                       		bne.s	loc_911C
0000960A 6100 0000                  		bsr.w	SingleObjLoad
0000960E 6600                       		bne.s	Obj28_Display
00009610 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009614 3368 0008 0008             		move.w	8(a0),8(a1)
0000961A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009620 3028 003E                  		move.w	$3E(a0),d0
00009624 E248                       		lsr.w	#1,d0
00009626 1340 001A                  		move.b	d0,$1A(a1)
0000962A                            
0000962A                            Obj28_Display:
0000962A 6000 0000                  		bra.w	DisplaySprite
0000962E                            ; ===========================================================================
0000962E                            
0000962E                            loc_911C:
0000962E 117C 0012 0024             		move.b	#$12,$24(a0)
00009634 4268 0010                  		clr.w	$10(a0)
00009638 6000 0000                  		bra.w	DisplaySprite
0000963C                            ; ===========================================================================
0000963C                            
0000963C                            loc_912A:				; XREF: Obj28_Index
0000963C 4A28 0001                  		tst.b	1(a0)
00009640 6A00 0000                  		bpl.w	DeleteObject
00009644 6100 0000                  		bsr.w	ObjectFall
00009648 4A68 0012                  		tst.w	$12(a0)
0000964C 6B00                       		bmi.s	loc_9180
0000964E 4EB9 0000 0000             		jsr	ObjHitFloor
00009654 4A41                       		tst.w	d1
00009656 6A00                       		bpl.s	loc_9180
00009658 D368 000C                  		add.w	d1,$C(a0)
0000965C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009662 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009668 117C 0001 001A             		move.b	#1,$1A(a0)
0000966E 1028 0030                  		move.b	$30(a0),d0
00009672 D000                       		add.b	d0,d0
00009674 5800                       		addq.b	#4,d0
00009676 1140 0024                  		move.b	d0,$24(a0)
0000967A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000967E 6700                       		beq.s	loc_9180
00009680 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009686 6700                       		beq.s	loc_9180
00009688 4468 0010                  		neg.w	$10(a0)
0000968C 0868 0000 0001             		bchg	#0,1(a0)
00009692                            
00009692                            loc_9180:
00009692 6000 0000                  		bra.w	DisplaySprite
00009696                            ; ===========================================================================
00009696                            
00009696                            loc_9184:				; XREF: Obj28_Index
00009696 6100 0000                  		bsr.w	ObjectFall
0000969A 117C 0001 001A             		move.b	#1,$1A(a0)
000096A0 4A68 0012                  		tst.w	$12(a0)
000096A4 6B00                       		bmi.s	loc_91AE
000096A6 117C 0000 001A             		move.b	#0,$1A(a0)
000096AC 4EB9 0000 0000             		jsr	ObjHitFloor
000096B2 4A41                       		tst.w	d1
000096B4 6A00                       		bpl.s	loc_91AE
000096B6 D368 000C                  		add.w	d1,$C(a0)
000096BA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096C0                            
000096C0                            loc_91AE:
000096C0 4A28 0028                  		tst.b	$28(a0)
000096C4 6600                       		bne.s	loc_9224
000096C6 4A28 0001                  		tst.b	1(a0)
000096CA 6A00 0000                  		bpl.w	DeleteObject
000096CE 6000 0000                  		bra.w	DisplaySprite
000096D2                            ; ===========================================================================
000096D2                            
000096D2                            loc_91C0:				; XREF: Obj28_Index
000096D2 6100 0000                  		bsr.w	SpeedToPos
000096D6 0668 0018 0012             		addi.w	#$18,$12(a0)
000096DC 4A68 0012                  		tst.w	$12(a0)
000096E0 6B00                       		bmi.s	loc_91FC
000096E2 4EB9 0000 0000             		jsr	ObjHitFloor
000096E8 4A41                       		tst.w	d1
000096EA 6A00                       		bpl.s	loc_91FC
000096EC D368 000C                  		add.w	d1,$C(a0)
000096F0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096F6 4A28 0028                  		tst.b	$28(a0)
000096FA 6700                       		beq.s	loc_91FC
000096FC 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009702 6700                       		beq.s	loc_91FC
00009704 4468 0010                  		neg.w	$10(a0)
00009708 0868 0000 0001             		bchg	#0,1(a0)
0000970E                            
0000970E                            loc_91FC:
0000970E 5328 001E                  		subq.b	#1,$1E(a0)
00009712 6A00                       		bpl.s	loc_9212
00009714 117C 0001 001E             		move.b	#1,$1E(a0)
0000971A 5228 001A                  		addq.b	#1,$1A(a0)
0000971E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009724                            
00009724                            loc_9212:
00009724 4A28 0028                  		tst.b	$28(a0)
00009728 6600                       		bne.s	loc_9224
0000972A 4A28 0001                  		tst.b	1(a0)
0000972E 6A00 0000                  		bpl.w	DeleteObject
00009732 6000 0000                  		bra.w	DisplaySprite
00009736                            ; ===========================================================================
00009736                            
00009736                            loc_9224:				; XREF: Obj28_Index
00009736 3028 0008                  		move.w	8(a0),d0
0000973A 9078 D008                  		sub.w	($FFFFD008).w,d0
0000973E 6500                       		bcs.s	loc_923C
00009740 0440 0180                  		subi.w	#$180,d0
00009744 6A00                       		bpl.s	loc_923C
00009746 4A28 0001                  		tst.b	1(a0)
0000974A 6A00 0000                  		bpl.w	DeleteObject
0000974E                            
0000974E                            loc_923C:
0000974E 6000 0000                  		bra.w	DisplaySprite
00009752                            ; ===========================================================================
00009752                            
00009752                            loc_9240:				; XREF: Obj28_Index
00009752 4A28 0001                  		tst.b	1(a0)
00009756 6A00 0000                  		bpl.w	DeleteObject
0000975A 5368 0036                  		subq.w	#1,$36(a0)
0000975E 6600 0000                  		bne.w	loc_925C
00009762 117C 0002 0024             		move.b	#2,$24(a0)
00009768 117C 0003 0018             		move.b	#3,$18(a0)
0000976E                            
0000976E                            loc_925C:
0000976E 6000 0000                  		bra.w	DisplaySprite
00009772                            ; ===========================================================================
00009772                            
00009772                            loc_9260:				; XREF: Obj28_Index
00009772 6100 0000                  		bsr.w	sub_9404
00009776 6400                       		bcc.s	loc_927C
00009778 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000977E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009784 117C 000E 0024             		move.b	#$E,$24(a0)
0000978A 6000 FF46                  		bra.w	loc_91C0
0000978E                            ; ===========================================================================
0000978E                            
0000978E                            loc_927C:
0000978E 6000 FFA6                  		bra.w	loc_9224
00009792                            ; ===========================================================================
00009792                            
00009792                            loc_9280:				; XREF: Obj28_Index
00009792 6100 0000                  		bsr.w	sub_9404
00009796 6A00                       		bpl.s	loc_92B6
00009798 4268 0010                  		clr.w	$10(a0)
0000979C 4268 0032                  		clr.w	$32(a0)
000097A0 6100 0000                  		bsr.w	SpeedToPos
000097A4 0668 0018 0012             		addi.w	#$18,$12(a0)
000097AA 6100 0000                  		bsr.w	loc_93C4
000097AE 6100 0000                  		bsr.w	loc_93EC
000097B2 5328 001E                  		subq.b	#1,$1E(a0)
000097B6 6A00                       		bpl.s	loc_92B6
000097B8 117C 0001 001E             		move.b	#1,$1E(a0)
000097BE 5228 001A                  		addq.b	#1,$1A(a0)
000097C2 0228 0001 001A             		andi.b	#1,$1A(a0)
000097C8                            
000097C8                            loc_92B6:
000097C8 6000 FF6C                  		bra.w	loc_9224
000097CC                            ; ===========================================================================
000097CC                            
000097CC                            loc_92BA:				; XREF: Obj28_Index
000097CC 6100 0000                  		bsr.w	sub_9404
000097D0 6A00                       		bpl.s	loc_9310
000097D2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097D8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097DE 117C 0004 0024             		move.b	#4,$24(a0)
000097E4 6000 FEB0                  		bra.w	loc_9184
000097E8                            ; ===========================================================================
000097E8                            
000097E8                            loc_92D6:				; XREF: Obj28_Index
000097E8 6100 0000                  		bsr.w	ObjectFall
000097EC 117C 0001 001A             		move.b	#1,$1A(a0)
000097F2 4A68 0012                  		tst.w	$12(a0)
000097F6 6B00                       		bmi.s	loc_9310
000097F8 117C 0000 001A             		move.b	#0,$1A(a0)
000097FE 4EB9 0000 0000             		jsr	ObjHitFloor
00009804 4A41                       		tst.w	d1
00009806 6A00                       		bpl.s	loc_9310
00009808 4628 0029                  		not.b	$29(a0)
0000980C 6600                       		bne.s	loc_9306
0000980E 4468 0010                  		neg.w	$10(a0)
00009812 0868 0000 0001             		bchg	#0,1(a0)
00009818                            
00009818                            loc_9306:
00009818 D368 000C                  		add.w	d1,$C(a0)
0000981C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009822                            
00009822                            loc_9310:
00009822 6000 FF12                  		bra.w	loc_9224
00009826                            ; ===========================================================================
00009826                            
00009826                            loc_9314:				; XREF: Obj28_Index
00009826 6100 0000                  		bsr.w	sub_9404
0000982A 6A00                       		bpl.s	loc_932E
0000982C 4268 0010                  		clr.w	$10(a0)
00009830 4268 0032                  		clr.w	$32(a0)
00009834 6100 0000                  		bsr.w	ObjectFall
00009838 6100 0000                  		bsr.w	loc_93C4
0000983C 6100 0000                  		bsr.w	loc_93EC
00009840                            
00009840                            loc_932E:
00009840 6000 FEF4                  		bra.w	loc_9224
00009844                            ; ===========================================================================
00009844                            
00009844                            loc_9332:				; XREF: Obj28_Index
00009844 6100 0000                  		bsr.w	sub_9404
00009848 6A00                       		bpl.s	loc_936C
0000984A 6100 0000                  		bsr.w	ObjectFall
0000984E 117C 0001 001A             		move.b	#1,$1A(a0)
00009854 4A68 0012                  		tst.w	$12(a0)
00009858 6B00                       		bmi.s	loc_936C
0000985A 117C 0000 001A             		move.b	#0,$1A(a0)
00009860 4EB9 0000 0000             		jsr	ObjHitFloor
00009866 4A41                       		tst.w	d1
00009868 6A00                       		bpl.s	loc_936C
0000986A 4468 0010                  		neg.w	$10(a0)
0000986E 0868 0000 0001             		bchg	#0,1(a0)
00009874 D368 000C                  		add.w	d1,$C(a0)
00009878 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000987E                            
0000987E                            loc_936C:
0000987E 6000 FEB6                  		bra.w	loc_9224
00009882                            ; ===========================================================================
00009882                            
00009882                            loc_9370:				; XREF: Obj28_Index
00009882 6100 0000                  		bsr.w	sub_9404
00009886 6A00                       		bpl.s	loc_93C0
00009888 6100 0000                  		bsr.w	SpeedToPos
0000988C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009892 4A68 0012                  		tst.w	$12(a0)
00009896 6B00                       		bmi.s	loc_93AA
00009898 4EB9 0000 0000             		jsr	ObjHitFloor
0000989E 4A41                       		tst.w	d1
000098A0 6A00                       		bpl.s	loc_93AA
000098A2 4628 0029                  		not.b	$29(a0)
000098A6 6600                       		bne.s	loc_93A0
000098A8 4468 0010                  		neg.w	$10(a0)
000098AC 0868 0000 0001             		bchg	#0,1(a0)
000098B2                            
000098B2                            loc_93A0:
000098B2 D368 000C                  		add.w	d1,$C(a0)
000098B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098BC                            
000098BC                            loc_93AA:
000098BC 5328 001E                  		subq.b	#1,$1E(a0)
000098C0 6A00                       		bpl.s	loc_93C0
000098C2 117C 0001 001E             		move.b	#1,$1E(a0)
000098C8 5228 001A                  		addq.b	#1,$1A(a0)
000098CC 0228 0001 001A             		andi.b	#1,$1A(a0)
000098D2                            
000098D2                            loc_93C0:
000098D2 6000 FE62                  		bra.w	loc_9224
000098D6                            ; ===========================================================================
000098D6                            
000098D6                            loc_93C4:
000098D6 117C 0001 001A             		move.b	#1,$1A(a0)
000098DC 4A68 0012                  		tst.w	$12(a0)
000098E0 6B00                       		bmi.s	locret_93EA
000098E2 117C 0000 001A             		move.b	#0,$1A(a0)
000098E8 4EB9 0000 0000             		jsr	ObjHitFloor
000098EE 4A41                       		tst.w	d1
000098F0 6A00                       		bpl.s	locret_93EA
000098F2 D368 000C                  		add.w	d1,$C(a0)
000098F6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098FC                            
000098FC                            locret_93EA:
000098FC 4E75                       		rts	
000098FE                            ; ===========================================================================
000098FE                            
000098FE                            loc_93EC:
000098FE 08E8 0000 0001             		bset	#0,1(a0)
00009904 3028 0008                  		move.w	8(a0),d0
00009908 9078 D008                  		sub.w	($FFFFD008).w,d0
0000990C 6400                       		bcc.s	locret_9402
0000990E 08A8 0000 0001             		bclr	#0,1(a0)
00009914                            
00009914                            locret_9402:
00009914 4E75                       		rts	
00009916                            
00009916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009916                            
00009916                            
00009916                            sub_9404:
00009916 3038 D008                  		move.w	($FFFFD008).w,d0
0000991A 9068 0008                  		sub.w	8(a0),d0
0000991E 0440 00B8                  		subi.w	#$B8,d0
00009922 4E75                       		rts	
00009924                            ; End of function sub_9404
00009924                            
00009924                            ; ===========================================================================
00009924                            ; ---------------------------------------------------------------------------
00009924                            ; Object 29 - points that appear when you destroy something
00009924                            ; ---------------------------------------------------------------------------
00009924                            
00009924                            Obj29:					; XREF: Obj_Index
00009924 7000                       		moveq	#0,d0
00009926 1028 0024                  		move.b	$24(a0),d0
0000992A 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000992E 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009932 6000 0000                  		bra.w	DisplaySprite
00009936                            ; ===========================================================================
00009936 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009938 0000                       		dc.w Obj29_Slower-Obj29_Index
0000993A                            ; ===========================================================================
0000993A                            
0000993A                            Obj29_Main:				; XREF: Obj29_Index
0000993A 5428 0024                  		addq.b	#2,$24(a0)
0000993E 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009946 317C 2797 0002             		move.w	#$2797,2(a0)
0000994C 117C 0004 0001             		move.b	#4,1(a0)
00009952 117C 0001 0018             		move.b	#1,$18(a0)
00009958 117C 0008 0019             		move.b	#8,$19(a0)
0000995E 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009964                            
00009964                            Obj29_Slower:				; XREF: Obj29_Index
00009964 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009968 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000996C 6100 0000                  		bsr.w	SpeedToPos
00009970 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009976 4E75                       		rts	
00009978                            ; ===========================================================================
00009978                            ; ---------------------------------------------------------------------------
00009978                            ; Sprite mappings - animals
00009978                            ; ---------------------------------------------------------------------------
00009978                            Map_obj28:
00009978                            	include "_maps\obj28.asm"
00009978                            ; ---------------------------------------------------------------------------
00009978                            ; Sprite mappings - animals
00009978                            ; ---------------------------------------------------------------------------
00009978 0000                       		dc.w byte_9472-Map_obj28
0000997A 0000                       		dc.w byte_9478-Map_obj28
0000997C 0000                       		dc.w byte_946C-Map_obj28
0000997E 01                         byte_946C:	dc.b 1
0000997F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009984 01                         byte_9472:	dc.b 1
00009985 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000998A 01                         byte_9478:	dc.b 1
0000998B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009990                            		even
00009990                            		even
00009990                            
00009990                            Map_obj28a:
00009990                            	include "_maps\obj28a.asm"
00009990                            ; ---------------------------------------------------------------------------
00009990                            ; Sprite mappings - animals
00009990                            ; ---------------------------------------------------------------------------
00009990 0000                       		dc.w byte_948A-Map_obj28a
00009992 0000                       		dc.w byte_9490-Map_obj28a
00009994 0000                       		dc.w byte_9484-Map_obj28a
00009996 01                         byte_9484:	dc.b 1
00009997 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000999C 01                         byte_948A:	dc.b 1
0000999D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000099A2 01                         byte_9490:	dc.b 1
000099A3 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000099A8                            		even
000099A8                            		even
000099A8                            
000099A8                            Map_obj28b:
000099A8                            	include "_maps\obj28b.asm"
000099A8                            ; ---------------------------------------------------------------------------
000099A8                            ; Sprite mappings - animals
000099A8                            ; ---------------------------------------------------------------------------
000099A8 0000                       		dc.w byte_94A2-Map_obj28b
000099AA 0000                       		dc.w byte_94A8-Map_obj28b
000099AC 0000                       		dc.w byte_949C-Map_obj28b
000099AE 01                         byte_949C:	dc.b 1
000099AF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000099B4 01                         byte_94A2:	dc.b 1
000099B5 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
000099BA 01                         byte_94A8:	dc.b 1
000099BB FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
000099C0                            		even
000099C0                            		even
000099C0                            
000099C0                            ; ---------------------------------------------------------------------------
000099C0                            ; Sprite mappings - points that	appear when you	destroy	something
000099C0                            ; ---------------------------------------------------------------------------
000099C0                            Map_obj29:
000099C0                            	include "_maps\obj29.asm"
000099C0                            ; ---------------------------------------------------------------------------
000099C0                            ; Sprite mappings - points that	appear when you	destroy	something
000099C0                            ; ---------------------------------------------------------------------------
000099C0 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000099C4 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000099C8 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000099CC 0000                       		dc.w byte_94E5-Map_obj29
000099CE 01                         byte_94BC:	dc.b 1
000099CF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000099D4 01                         byte_94C2:	dc.b 1
000099D5 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000099DA 01                         byte_94C8:	dc.b 1
000099DB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000099E0 01                         byte_94CE:	dc.b 1
000099E1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000099E6 01                         byte_94D4:	dc.b 1
000099E7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000099EC 02                         byte_94DA:	dc.b 2
000099ED FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000099F2 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000099F7 02                         byte_94E5:	dc.b 2
000099F8 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000099FD FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009A02                            		even
00009A02                            		even
00009A02                            
00009A02                            ; ===========================================================================
00009A02                            ; ---------------------------------------------------------------------------
00009A02                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009A02                            ; ---------------------------------------------------------------------------
00009A02                            
00009A02                            Obj1F:					; XREF: Obj_Index
00009A02 7000                       		moveq	#0,d0
00009A04 1028 0024                  		move.b	$24(a0),d0
00009A08 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009A0C 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009A10                            ; ===========================================================================
00009A10 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009A12 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009A14 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009A16 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009A18 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009A1A                            ; ===========================================================================
00009A1A                            
00009A1A                            Obj1F_Main:				; XREF: Obj1F_Index
00009A1A 117C 0010 0016             		move.b	#$10,$16(a0)
00009A20 117C 0008 0017             		move.b	#8,$17(a0)
00009A26 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009A2E 317C 0400 0002             		move.w	#$400,2(a0)
00009A34 117C 0004 0001             		move.b	#4,1(a0)
00009A3A 117C 0003 0018             		move.b	#3,$18(a0)
00009A40 117C 0006 0020             		move.b	#6,$20(a0)
00009A46 117C 0015 0019             		move.b	#$15,$19(a0)
00009A4C 6100 0000                  		bsr.w	ObjectFall
00009A50 4EB9 0000 0000             		jsr	ObjHitFloor
00009A56 4A41                       		tst.w	d1
00009A58 6A00                       		bpl.s	locret_955A
00009A5A D368 000C                  		add.w	d1,$C(a0)
00009A5E 1143 0026                  		move.b	d3,$26(a0)
00009A62 317C 0000 0012             		move.w	#0,$12(a0)
00009A68 5428 0024                  		addq.b	#2,$24(a0)
00009A6C                            
00009A6C                            locret_955A:
00009A6C 4E75                       		rts	
00009A6E                            ; ===========================================================================
00009A6E                            
00009A6E                            Obj1F_Action:				; XREF: Obj1F_Index
00009A6E 7000                       		moveq	#0,d0
00009A70 1028 0025                  		move.b	$25(a0),d0
00009A74 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009A78 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009A7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009A82 6100 0000                  		bsr.w	AnimateSprite
00009A86 6000 0000                  		bra.w	MarkObjGone
00009A8A                            ; ===========================================================================
00009A8A 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A8C 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A8E                            ; ===========================================================================
00009A8E                            
00009A8E                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A8E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A92 6A00                       		bpl.s	locret_95B6
00009A94 4A28 0001                  		tst.b	1(a0)
00009A98 6A00                       		bpl.s	Obj1F_Move
00009A9A 0868 0001 0032             		bchg	#1,$32(a0)
00009AA0 6600                       		bne.s	Obj1F_MakeFire
00009AA2                            
00009AA2                            Obj1F_Move:
00009AA2 5428 0025                  		addq.b	#2,$25(a0)
00009AA6 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009AAC 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009AB2 6100 0000                  		bsr.w	Obj1F_SetAni
00009AB6 5600                       		addq.b	#3,d0
00009AB8 1140 001C                  		move.b	d0,$1C(a0)
00009ABC 0868 0000 0022             		bchg	#0,$22(a0)
00009AC2 6600                       		bne.s	locret_95B6
00009AC4 4468 0010                  		neg.w	$10(a0)		; change direction
00009AC8                            
00009AC8                            locret_95B6:
00009AC8 4E75                       		rts	
00009ACA                            ; ===========================================================================
00009ACA                            
00009ACA                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009ACA 317C 003B 0030             		move.w	#$3B,$30(a0)
00009AD0 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009AD6 6100 0000                  		bsr.w	SingleObjLoad
00009ADA 6600                       		bne.s	Obj1F_MakeFire2
00009ADC 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009AE0 137C 0006 0024             		move.b	#6,$24(a1)
00009AE6 3368 0008 0008             		move.w	8(a0),8(a1)
00009AEC 0469 0010 0008             		subi.w	#$10,8(a1)
00009AF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009AF8 337C FF00 0010             		move.w	#-$100,$10(a1)
00009AFE                            
00009AFE                            Obj1F_MakeFire2:
00009AFE 6100 0000                  		bsr.w	SingleObjLoad
00009B02 6600                       		bne.s	locret_9618
00009B04 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009B08 137C 0006 0024             		move.b	#6,$24(a1)
00009B0E 3368 0008 0008             		move.w	8(a0),8(a1)
00009B14 0669 0010 0008             		addi.w	#$10,8(a1)
00009B1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B20 337C 0100 0010             		move.w	#$100,$10(a1)
00009B26                            
00009B26                            locret_9618:
00009B26 4E75                       		rts	
00009B28                            ; ===========================================================================
00009B28                            
00009B28                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009B28 5368 0030                  		subq.w	#1,$30(a0)
00009B2C 6B00                       		bmi.s	loc_966E
00009B2E 6100 0000                  		bsr.w	SpeedToPos
00009B32 0868 0000 0032             		bchg	#0,$32(a0)
00009B38 6600                       		bne.s	loc_9654
00009B3A 3628 0008                  		move.w	8(a0),d3
00009B3E 0643 0010                  		addi.w	#$10,d3
00009B42 0828 0000 0022             		btst	#0,$22(a0)
00009B48 6700                       		beq.s	loc_9640
00009B4A 0443 0020                  		subi.w	#$20,d3
00009B4E                            
00009B4E                            loc_9640:
00009B4E 4EB9 0000 0000             		jsr	ObjHitFloor2
00009B54 0C41 FFF8                  		cmpi.w	#-8,d1
00009B58 6D00                       		blt.s	loc_966E
00009B5A 0C41 000C                  		cmpi.w	#$C,d1
00009B5E 6C00                       		bge.s	loc_966E
00009B60 4E75                       		rts	
00009B62                            ; ===========================================================================
00009B62                            
00009B62                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009B62 4EB9 0000 0000             		jsr	ObjHitFloor
00009B68 D368 000C                  		add.w	d1,$C(a0)
00009B6C 1143 0026                  		move.b	d3,$26(a0)
00009B70 6100 0000                  		bsr.w	Obj1F_SetAni
00009B74 5600                       		addq.b	#3,d0
00009B76 1140 001C                  		move.b	d0,$1C(a0)
00009B7A 4E75                       		rts	
00009B7C                            ; ===========================================================================
00009B7C                            
00009B7C                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009B7C 5528 0025                  		subq.b	#2,$25(a0)
00009B80 317C 003B 0030             		move.w	#59,$30(a0)
00009B86 317C 0000 0010             		move.w	#0,$10(a0)
00009B8C 6100 0000                  		bsr.w	Obj1F_SetAni
00009B90 1140 001C                  		move.b	d0,$1C(a0)
00009B94 4E75                       		rts	
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B96                            ; ---------------------------------------------------------------------------
00009B96                            
00009B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B96                            
00009B96                            
00009B96                            Obj1F_SetAni:				; XREF: loc_966E
00009B96 7000                       		moveq	#0,d0
00009B98 1628 0026                  		move.b	$26(a0),d3
00009B9C 6B00                       		bmi.s	loc_96A4
00009B9E 0C03 0006                  		cmpi.b	#6,d3
00009BA2 6500                       		bcs.s	locret_96A2
00009BA4 7001                       		moveq	#1,d0
00009BA6 0828 0000 0022             		btst	#0,$22(a0)
00009BAC 6600                       		bne.s	locret_96A2
00009BAE 7002                       		moveq	#2,d0
00009BB0                            
00009BB0                            locret_96A2:
00009BB0 4E75                       		rts	
00009BB2                            ; ===========================================================================
00009BB2                            
00009BB2                            loc_96A4:				; XREF: Obj1F_SetAni
00009BB2 0C03 00FA                  		cmpi.b	#-6,d3
00009BB6 6200                       		bhi.s	locret_96B6
00009BB8 7002                       		moveq	#2,d0
00009BBA 0828 0000 0022             		btst	#0,$22(a0)
00009BC0 6600                       		bne.s	locret_96B6
00009BC2 7001                       		moveq	#1,d0
00009BC4                            
00009BC4                            locret_96B6:
00009BC4 4E75                       		rts	
00009BC6                            ; End of function Obj1F_SetAni
00009BC6                            
00009BC6                            ; ===========================================================================
00009BC6                            
00009BC6                            Obj1F_Delete:				; XREF: Obj1F_Index
00009BC6 6100 0000                  		bsr.w	DeleteObject
00009BCA 4E75                       		rts	
00009BCC                            ; ===========================================================================
00009BCC                            ; ---------------------------------------------------------------------------
00009BCC                            ; Sub-object - missile that the	Crabmeat throws
00009BCC                            ; ---------------------------------------------------------------------------
00009BCC                            
00009BCC                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009BCC 5428 0024                  		addq.b	#2,$24(a0)
00009BD0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009BD8 317C 0400 0002             		move.w	#$400,2(a0)
00009BDE 117C 0004 0001             		move.b	#4,1(a0)
00009BE4 117C 0003 0018             		move.b	#3,$18(a0)
00009BEA 117C 0087 0020             		move.b	#$87,$20(a0)
00009BF0 117C 0008 0019             		move.b	#8,$19(a0)
00009BF6 317C FC00 0012             		move.w	#-$400,$12(a0)
00009BFC 117C 0007 001C             		move.b	#7,$1C(a0)
00009C02                            
00009C02                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009C02 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C08 6100 0000                  		bsr.w	AnimateSprite
00009C0C 6100 0000                  		bsr.w	ObjectFall
00009C10 6100 0000                  		bsr.w	DisplaySprite
00009C14 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C18 0640 00E0                  		addi.w	#$E0,d0
00009C1C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009C20 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009C22 4E75                       		rts	
00009C24                            ; ===========================================================================
00009C24                            
00009C24                            Obj1F_Delete2:
00009C24 6000 0000                  		bra.w	DeleteObject
00009C28                            ; ===========================================================================
00009C28                            Ani_obj1F:
00009C28                            	include "_anim\obj1F.asm"
00009C28                            ; ---------------------------------------------------------------------------
00009C28                            ; Animation script - Crabmeat enemy
00009C28                            ; ---------------------------------------------------------------------------
00009C28 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009C2E 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009C34 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009C38 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009C3C 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009C40 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009C44 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009C4A 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009C50 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009C56 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009C5A 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009C5E                            		even
00009C5E                            		even
00009C5E                            
00009C5E                            ; ---------------------------------------------------------------------------
00009C5E                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009C5E                            ; ---------------------------------------------------------------------------
00009C5E                            Map_obj1F:
00009C5E                            	include "_maps\obj1F.asm"
00009C5E                            Map_1514:
00009C5E 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009C60 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009C62 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009C64 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009C66 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009C68 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009C6A 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009C6C 03                         Map_1514_E: 	dc.b $3
00009C6D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C72 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C77 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C7C 03                         Map_1514_1E: 	dc.b $3
00009C7D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C82 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C87 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C8C 03                         Map_1514_2E: 	dc.b $3
00009C8D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C92 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C97 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C9C 03                         Map_1514_3E: 	dc.b $3
00009C9D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CA2 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CA7 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CAC 03                         Map_1514_4E: 	dc.b $3
00009CAD F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CB2 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CB7 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CBC 01                         Map_1514_5E: 	dc.b $1
00009CBD F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009CC2 01                         Map_1514_64: 	dc.b $1
00009CC3 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009CC8                            	even
00009CC8                            	even
00009CC8                            
00009CC8                            ; ===========================================================================
00009CC8                            ; ---------------------------------------------------------------------------
00009CC8                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009CC8                            ; ---------------------------------------------------------------------------
00009CC8                            
00009CC8                            Obj22:					; XREF: Obj_Index
00009CC8 7000                       		moveq	#0,d0
00009CCA 1028 0024                  		move.b	$24(a0),d0
00009CCE 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009CD2 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009CD6                            ; ===========================================================================
00009CD6 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009CD8 0000                       		dc.w Obj22_Action-Obj22_Index
00009CDA 0000                       		dc.w Obj22_Delete-Obj22_Index
00009CDC                            ; ===========================================================================
00009CDC                            
00009CDC                            Obj22_Main:				; XREF: Obj22_Index
00009CDC 5428 0024                  		addq.b	#2,$24(a0)
00009CE0 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009CE8 317C 0444 0002             		move.w	#$444,2(a0)
00009CEE 117C 0004 0001             		move.b	#4,1(a0)
00009CF4 117C 0003 0018             		move.b	#3,$18(a0)
00009CFA 117C 0008 0020             		move.b	#8,$20(a0)
00009D00 117C 0018 0019             		move.b	#$18,$19(a0)
00009D06                            
00009D06                            Obj22_Action:				; XREF: Obj22_Index
00009D06 7000                       		moveq	#0,d0
00009D08 1028 0025                  		move.b	$25(a0),d0
00009D0C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009D10 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009D14 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009D1A 6100 0000                  		bsr.w	AnimateSprite
00009D1E 6000 0000                  		bra.w	MarkObjGone
00009D22                            ; ===========================================================================
00009D22 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009D24 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009D26                            ; ===========================================================================
00009D26                            
00009D26                            Obj22_Move:				; XREF: Obj22_Index2
00009D26 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D2A 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009D2C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009D32 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009D34 5428 0025                  		addq.b	#2,$25(a0)
00009D38 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009D3E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009D44 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009D4A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D50 6600                       		bne.s	locret_986C	; if not, branch
00009D52 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009D56                            
00009D56                            locret_986C:
00009D56 4E75                       		rts	
00009D58                            ; ===========================================================================
00009D58                            
00009D58                            Obj22_Fire:				; XREF: Obj22_Move
00009D58 6100 0000                  		bsr.w	SingleObjLoad
00009D5C 6600                       		bne.s	locret_98D0
00009D5E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009D62 3368 0008 0008             		move.w	8(a0),8(a1)
00009D68 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D6E 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009D74 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009D7A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D80 303C 0018                  		move.w	#$18,d0
00009D84 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D8A 6600                       		bne.s	loc_98AA	; if not, branch
00009D8C 4440                       		neg.w	d0
00009D8E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D92                            
00009D92                            loc_98AA:
00009D92 D169 0008                  		add.w	d0,8(a1)
00009D96 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D9C 337C 000E 0032             		move.w	#$E,$32(a1)
00009DA2 2348 003C                  		move.l	a0,$3C(a1)
00009DA6 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009DAC 317C 003B 0032             		move.w	#$3B,$32(a0)
00009DB2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009DB8                            
00009DB8                            locret_98D0:
00009DB8 4E75                       		rts	
00009DBA                            ; ===========================================================================
00009DBA                            
00009DBA                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009DBA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009DBE 6B00                       		bmi.s	Obj22_ChgDir
00009DC0 6100 0000                  		bsr.w	SpeedToPos
00009DC4 4A28 0034                  		tst.b	$34(a0)
00009DC8 6600                       		bne.s	locret_992A
00009DCA 3038 D008                  		move.w	($FFFFD008).w,d0
00009DCE 9068 0008                  		sub.w	8(a0),d0
00009DD2 6A00                       		bpl.s	Obj22_SetNrSonic
00009DD4 4440                       		neg.w	d0
00009DD6                            
00009DD6                            Obj22_SetNrSonic:
00009DD6 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009DDA 6400                       		bcc.s	locret_992A	; if not, branch
00009DDC 4A28 0001                  		tst.b	1(a0)
00009DE0 6A00                       		bpl.s	locret_992A
00009DE2 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009DE8 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009DEE 6000                       		bra.s	Obj22_Stop
00009DF0                            ; ===========================================================================
00009DF0                            
00009DF0                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009DF0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009DF6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009DFC 317C 003B 0032             		move.w	#59,$32(a0)
00009E02                            
00009E02                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009E02 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009E06 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009E0C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009E12                            
00009E12                            locret_992A:
00009E12 4E75                       		rts	
00009E14                            ; ===========================================================================
00009E14                            
00009E14                            Obj22_Delete:				; XREF: Obj22_Index
00009E14 6100 0000                  		bsr.w	DeleteObject
00009E18 4E75                       		rts	
00009E1A                            ; ===========================================================================
00009E1A                            ; ---------------------------------------------------------------------------
00009E1A                            ; Object 23 - missile that Buzz	Bomber throws
00009E1A                            ; ---------------------------------------------------------------------------
00009E1A                            
00009E1A                            Obj23:					; XREF: Obj_Index
00009E1A 7000                       		moveq	#0,d0
00009E1C 1028 0024                  		move.b	$24(a0),d0
00009E20 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009E24 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009E28                            ; ===========================================================================
00009E28 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009E2A 0000                       		dc.w Obj23_Animate-Obj23_Index
00009E2C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009E2E 0000                       		dc.w Obj23_Delete-Obj23_Index
00009E30 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009E32                            ; ===========================================================================
00009E32                            
00009E32                            Obj23_Main:				; XREF: Obj23_Index
00009E32 5368 0032                  		subq.w	#1,$32(a0)
00009E36 6A00                       		bpl.s	Obj23_ChkCancel
00009E38 5428 0024                  		addq.b	#2,$24(a0)
00009E3C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009E44 317C 2444 0002             		move.w	#$2444,2(a0)
00009E4A 117C 0004 0001             		move.b	#4,1(a0)
00009E50 117C 0003 0018             		move.b	#3,$18(a0)
00009E56 117C 0008 0019             		move.b	#8,$19(a0)
00009E5C 0228 0003 0022             		andi.b	#3,$22(a0)
00009E62 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009E66 6700                       		beq.s	Obj23_Animate	; if not, branch
00009E68 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009E6E 117C 0087 0020             		move.b	#$87,$20(a0)
00009E74 117C 0001 001C             		move.b	#1,$1C(a0)
00009E7A 6000                       		bra.s	Obj23_Animate2
00009E7C                            ; ===========================================================================
00009E7C                            
00009E7C                            Obj23_Animate:				; XREF: Obj23_Index
00009E7C 6100                       		bsr.s	Obj23_ChkCancel
00009E7E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E84 6100 0000                  		bsr.w	AnimateSprite
00009E88 6000 0000                  		bra.w	DisplaySprite
00009E8C                            ; ---------------------------------------------------------------------------
00009E8C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E8C                            ; destroyed, and if it has, then cancel	the missile
00009E8C                            ; ---------------------------------------------------------------------------
00009E8C                            
00009E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E8C                            
00009E8C                            
00009E8C                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E8C 2268 003C                  		movea.l	$3C(a0),a1
00009E90 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E94 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E96 4E75                       		rts	
00009E98                            ; End of function Obj23_ChkCancel
00009E98                            
00009E98                            ; ===========================================================================
00009E98                            
00009E98                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E98 0828 0007 0022             		btst	#7,$22(a0)
00009E9E 6600                       		bne.s	Obj23_Explode
00009EA0 117C 0087 0020             		move.b	#$87,$20(a0)
00009EA6 117C 0001 001C             		move.b	#1,$1C(a0)
00009EAC 6100 0000                  		bsr.w	SpeedToPos
00009EB0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009EB6 6100 0000                  		bsr.w	AnimateSprite
00009EBA 6100 0000                  		bsr.w	DisplaySprite
00009EBE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EC2 0640 00E0                  		addi.w	#$E0,d0
00009EC6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009ECA 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009ECC 4E75                       		rts	
00009ECE                            ; ===========================================================================
00009ECE                            
00009ECE                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009ECE 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009ED2 117C 0000 0024             		move.b	#0,$24(a0)
00009ED8 6000 F2DE                  		bra.w	Obj24
00009EDC                            ; ===========================================================================
00009EDC                            
00009EDC                            Obj23_Delete:				; XREF: Obj23_Index
00009EDC 6100 0000                  		bsr.w	DeleteObject
00009EE0 4E75                       		rts	
00009EE2                            ; ===========================================================================
00009EE2                            
00009EE2                            Obj23_FromNewt:				; XREF: Obj23_Index
00009EE2 4A28 0001                  		tst.b	1(a0)
00009EE6 6AF4                       		bpl.s	Obj23_Delete
00009EE8 6100 0000                  		bsr.w	SpeedToPos
00009EEC                            
00009EEC                            Obj23_Animate2:				; XREF: Obj23_Main
00009EEC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009EF2 6100 0000                  		bsr.w	AnimateSprite
00009EF6 6100 0000                  		bsr.w	DisplaySprite
00009EFA 4E75                       		rts	
00009EFC                            ; ===========================================================================
00009EFC                            Ani_obj22:
00009EFC                            	include "_anim\obj22.asm"
00009EFC                            ; ---------------------------------------------------------------------------
00009EFC                            ; Animation script - Buzz Bomber enemy
00009EFC                            ; ---------------------------------------------------------------------------
00009EFC 0000                       		dc.w byte_9A1E-Ani_obj22
00009EFE 0000                       		dc.w byte_9A22-Ani_obj22
00009F00 0000                       		dc.w byte_9A26-Ani_obj22
00009F02 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009F06 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009F0A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009F0E                            		even
00009F0E                            		even
00009F0E                            
00009F0E                            Ani_obj23:
00009F0E                            	include "_anim\obj23.asm"
00009F0E                            ; ---------------------------------------------------------------------------
00009F0E                            ; Animation script - missile that Buzz Bomber throws
00009F0E                            ; ---------------------------------------------------------------------------
00009F0E 0000                       		dc.w byte_9A2E-Ani_obj23
00009F10 0000                       		dc.w byte_9A32-Ani_obj23
00009F12 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009F16 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009F1A                            		even
00009F1A                            		even
00009F1A                            
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            ; Sprite mappings - Buzz Bomber	enemy
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            Map_obj22:
00009F1A                            	include "_maps\obj22.asm"
00009F1A                            Map_e97a:
00009F1A 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009F1C 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009F1E 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009F20 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009F22 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009F24 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009F26 06                         Map_e97a_C: 	dc.b $6
00009F27 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F2C F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F31 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F36 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F3B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F40 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F45 06                         Map_e97a_2B: 	dc.b $6
00009F46 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F4B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F50 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F55 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F5A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F5F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F64 07                         Map_e97a_4A: 	dc.b $7
00009F65 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009F6A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F6F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F74 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F79 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F7E F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F83 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F88 07                         Map_e97a_6E: 	dc.b $7
00009F89 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F8E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F93 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F98 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F9D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009FA2 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009FA7 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009FAC 06                         Map_e97a_92: 	dc.b $6
00009FAD F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FB2 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FB7 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FBC 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FC1 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009FC6 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009FCB 04                         Map_e97a_B1: 	dc.b $4
00009FCC F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FD1 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FD6 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FDB 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FE0                            	even
00009FE0                            	even
00009FE0                            
00009FE0                            ; ---------------------------------------------------------------------------
00009FE0                            ; Sprite mappings - missile that Buzz Bomber throws
00009FE0                            ; ---------------------------------------------------------------------------
00009FE0                            Map_obj23:
00009FE0                            	include "_maps\obj23.asm"
00009FE0                            ; ---------------------------------------------------------------------------
00009FE0                            ; Sprite mappings - missile that Buzz Bomber throws
00009FE0                            ; ---------------------------------------------------------------------------
00009FE0 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009FE4 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009FE8 01                         byte_9B0E:	dc.b 1
00009FE9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009FEE 01                         byte_9B14:	dc.b 1
00009FEF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009FF4 01                         byte_9B1A:	dc.b 1
00009FF5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009FFA 01                         byte_9B20:	dc.b 1
00009FFB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A000                            		even
0000A000                            		even
0000A000                            
0000A000                            ; ===========================================================================
0000A000                            ; ---------------------------------------------------------------------------
0000A000                            ; Object 25 - rings
0000A000                            ; ---------------------------------------------------------------------------
0000A000                            
0000A000                            Obj25:					; XREF: Obj_Index
0000A000 7000                       		moveq	#0,d0
0000A002 1028 0024                  		move.b	$24(a0),d0
0000A006 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A00A 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A00E                            ; ===========================================================================
0000A00E 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A010 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A012 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A014 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A016 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A018                            ; ---------------------------------------------------------------------------
0000A018                            ; Distances between rings (format: horizontal, vertical)
0000A018                            ; ---------------------------------------------------------------------------
0000A018 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A01A 1800                       		dc.b $18, 0		; horizontal normal
0000A01C 2000                       		dc.b $20, 0		; horizontal wide
0000A01E 0010                       		dc.b 0,	$10		; vertical tight
0000A020 0018                       		dc.b 0,	$18		; vertical normal
0000A022 0020                       		dc.b 0,	$20		; vertical wide
0000A024 1010                       		dc.b $10, $10		; diagonal
0000A026 1818                       		dc.b $18, $18
0000A028 2020                       		dc.b $20, $20
0000A02A F010                       		dc.b $F0, $10
0000A02C E818                       		dc.b $E8, $18
0000A02E E020                       		dc.b $E0, $20
0000A030 1008                       		dc.b $10, 8
0000A032 1810                       		dc.b $18, $10
0000A034 F008                       		dc.b $F0, 8
0000A036 E810                       		dc.b $E8, $10
0000A038                            ; ===========================================================================
0000A038                            
0000A038                            Obj25_Main:				; XREF: Obj25_Index
0000A038 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A03C 7000                       		moveq	#0,d0
0000A03E 1028 0023                  		move.b	$23(a0),d0
0000A042 45F2 0002                  		lea	2(a2,d0.w),a2
0000A046 1812                       		move.b	(a2),d4
0000A048 1228 0028                  		move.b	$28(a0),d1
0000A04C 1001                       		move.b	d1,d0
0000A04E 0241 0007                  		andi.w	#7,d1
0000A052 0C41 0007                  		cmpi.w	#7,d1
0000A056 6600                       		bne.s	loc_9B80
0000A058 7206                       		moveq	#6,d1
0000A05A                            
0000A05A                            loc_9B80:
0000A05A 4841                       		swap	d1
0000A05C 323C 0000                  		move.w	#0,d1
0000A060 E808                       		lsr.b	#4,d0
0000A062 D040                       		add.w	d0,d0
0000A064 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A068 4885                       		ext.w	d5
0000A06A 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A06E 4886                       		ext.w	d6
0000A070 2248                       		movea.l	a0,a1
0000A072 3428 0008                  		move.w	8(a0),d2
0000A076 3628 000C                  		move.w	$C(a0),d3
0000A07A E20C                       		lsr.b	#1,d4
0000A07C 6500                       		bcs.s	loc_9C02
0000A07E 0892 0007                  		bclr	#7,(a2)
0000A082 6000                       		bra.s	loc_9BBA
0000A084                            ; ===========================================================================
0000A084                            
0000A084                            Obj25_MakeRings:
0000A084 4841                       		swap	d1
0000A086 E20C                       		lsr.b	#1,d4
0000A088 6500                       		bcs.s	loc_9C02
0000A08A 0892 0007                  		bclr	#7,(a2)
0000A08E 6100 0000                  		bsr.w	SingleObjLoad
0000A092 6600                       		bne.s	loc_9C0E
0000A094                            
0000A094                            loc_9BBA:				; XREF: Obj25_Main
0000A094 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A098 5429 0024                  		addq.b	#2,$24(a1)
0000A09C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A0A0 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A0A6 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A0AA 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A0B2 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A0B8 137C 0004 0001             		move.b	#4,1(a1)
0000A0BE 137C 0002 0018             		move.b	#2,$18(a1)
0000A0C4 137C 0047 0020             		move.b	#$47,$20(a1)
0000A0CA 137C 0008 0019             		move.b	#8,$19(a1)
0000A0D0 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A0D6 1341 0034                  		move.b	d1,$34(a1)
0000A0DA                            
0000A0DA                            loc_9C02:
0000A0DA 5241                       		addq.w	#1,d1
0000A0DC D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A0DE D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A0E0 4841                       		swap	d1
0000A0E2 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A0E6                            
0000A0E6                            loc_9C0E:
0000A0E6 0812 0000                  		btst	#0,(a2)
0000A0EA 6600 0000                  		bne.w	DeleteObject
0000A0EE                            
0000A0EE                            Obj25_Animate:				; XREF: Obj25_Index
0000A0EE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A0F4 6100 0000                  		bsr.w	DisplaySprite
0000A0F8 3028 0032                  		move.w	$32(a0),d0
0000A0FC 0240 FF80                  		andi.w	#$FF80,d0
0000A100 3238 F700                  		move.w	($FFFFF700).w,d1
0000A104 0441 0080                  		subi.w	#$80,d1
0000A108 0241 FF80                  		andi.w	#$FF80,d1
0000A10C 9041                       		sub.w	d1,d0
0000A10E 0C40 0280                  		cmpi.w	#$280,d0
0000A112 6200                       		bhi.s	Obj25_Delete
0000A114 4E75                       		rts	
0000A116                            ; ===========================================================================
0000A116                            
0000A116                            Obj25_Collect:				; XREF: Obj25_Index
0000A116 5428 0024                  		addq.b	#2,$24(a0)
0000A11A 117C 0000 0020             		move.b	#0,$20(a0)
0000A120 117C 0001 0018             		move.b	#1,$18(a0)
0000A126 6100 0000                  		bsr.w	CollectRing
0000A12A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A12E 7000                       		moveq	#0,d0
0000A130 1028 0023                  		move.b	$23(a0),d0
0000A134 1228 0034                  		move.b	$34(a0),d1
0000A138 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A13C                            
0000A13C                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A13C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A142 6100 0000                  		bsr.w	AnimateSprite
0000A146 6000 0000                  		bra.w	DisplaySprite
0000A14A                            ; ===========================================================================
0000A14A                            
0000A14A                            Obj25_Delete:				; XREF: Obj25_Index
0000A14A 6000 0000                  		bra.w	DeleteObject
0000A14E                            
0000A14E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A14E                            
0000A14E                            
0000A14E                            CollectRing:				; XREF: Obj25_Collect
0000A14E 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A152 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A158 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A15C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A162 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A164 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A16A 6700                       		beq.s	loc_9CA4
0000A16C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A172 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A174 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A17A 6600                       		bne.s	Obj25_PlaySnd
0000A17C                            
0000A17C                            loc_9CA4:
0000A17C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A180 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A184 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A188                            
0000A188                            Obj25_PlaySnd:
0000A188 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A18E                            ; End of function CollectRing
0000A18E                            
0000A18E                            ; ===========================================================================
0000A18E                            ; ---------------------------------------------------------------------------
0000A18E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A18E                            ; ---------------------------------------------------------------------------
0000A18E                            
0000A18E                            Obj37:					; XREF: Obj_Index
0000A18E 7000                       		moveq	#0,d0
0000A190 1028 0024                  		move.b	$24(a0),d0
0000A194 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A198 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A19C                            ; ===========================================================================
0000A19C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A19E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A1A0 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A1A2 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A1A4 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A1A6                            ; ===========================================================================
0000A1A6                            
0000A1A6                            Obj37_CountRings:			; XREF: Obj37_Index
0000A1A6 2248                       		movea.l	a0,a1
0000A1A8 7A00                       		moveq	#0,d5
0000A1AA 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A1AE 7020                       		moveq	#32,d0
0000A1B0 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A1B2 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A1B4 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A1B6                            
0000A1B6                            loc_9CDE:
0000A1B6 5345                       		subq.w	#1,d5
0000A1B8 383C 0288                  		move.w	#$288,d4
0000A1BC 6000                       		bra.s	Obj37_MakeRings
0000A1BE                            ; ===========================================================================
0000A1BE                            
0000A1BE                            Obj37_Loop:
0000A1BE 6100 0000                  		bsr.w	SingleObjLoad
0000A1C2 6600 0000                  		bne.w	Obj37_ResetCounter
0000A1C6                            
0000A1C6                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A1C6 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A1CA 5429 0024                  		addq.b	#2,$24(a1)
0000A1CE 137C 0008 0016             		move.b	#8,$16(a1)
0000A1D4 137C 0008 0017             		move.b	#8,$17(a1)
0000A1DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A1E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A1E6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A1EE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A1F4 137C 0004 0001             		move.b	#4,1(a1)
0000A1FA 137C 0003 0018             		move.b	#3,$18(a1)
0000A200 137C 0047 0020             		move.b	#$47,$20(a1)
0000A206 137C 0008 0019             		move.b	#8,$19(a1)
0000A20C 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A212 4A44                       		tst.w	d4
0000A214 6B00                       		bmi.s	loc_9D62
0000A216 3004                       		move.w	d4,d0
0000A218 6100 8A4A                  		bsr.w	CalcSine
0000A21C 3404                       		move.w	d4,d2
0000A21E E04A                       		lsr.w	#8,d2
0000A220 E560                       		asl.w	d2,d0
0000A222 E561                       		asl.w	d2,d1
0000A224 3400                       		move.w	d0,d2
0000A226 3601                       		move.w	d1,d3
0000A228 0604 0010                  		addi.b	#$10,d4
0000A22C 6400                       		bcc.s	loc_9D62
0000A22E 0444 0080                  		subi.w	#$80,d4
0000A232 6400                       		bcc.s	loc_9D62
0000A234 383C 0288                  		move.w	#$288,d4
0000A238                            
0000A238                            loc_9D62:
0000A238 3342 0010                  		move.w	d2,$10(a1)
0000A23C 3343 0012                  		move.w	d3,$12(a1)
0000A240 4442                       		neg.w	d2
0000A242 4444                       		neg.w	d4
0000A244 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A248                            
0000A248                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A248 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A24E 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A254 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A25A 303C 00C6                  		move.w	#$C6,d0
0000A25E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A264                            
0000A264                            Obj37_Bounce:				; XREF: Obj37_Index
0000A264 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A26A 6100 0000                  		bsr.w	SpeedToPos
0000A26E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A274 6B00                       		bmi.s	Obj37_ChkDel
0000A276 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A27A D007                       		add.b	d7,d0
0000A27C 0200 0003                  		andi.b	#3,d0
0000A280 6600                       		bne.s	Obj37_ChkDel
0000A282 4EB9 0000 0000             		jsr	ObjHitFloor
0000A288 4A41                       		tst.w	d1
0000A28A 6A00                       		bpl.s	Obj37_ChkDel
0000A28C D368 000C                  		add.w	d1,$C(a0)
0000A290 3028 0012                  		move.w	$12(a0),d0
0000A294 E440                       		asr.w	#2,d0
0000A296 9168 0012                  		sub.w	d0,$12(a0)
0000A29A 4468 0012                  		neg.w	$12(a0)
0000A29E                            
0000A29E                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A29E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A2A2 6700                       		beq.s	Obj37_Delete
0000A2A4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A2A8 0640 00E0                  		addi.w	#$E0,d0
0000A2AC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A2B0 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A2B2 6000 0000                  		bra.w	DisplaySprite
0000A2B6                            ; ===========================================================================
0000A2B6                            
0000A2B6                            Obj37_Collect:				; XREF: Obj37_Index
0000A2B6 5428 0024                  		addq.b	#2,$24(a0)
0000A2BA 117C 0000 0020             		move.b	#0,$20(a0)
0000A2C0 117C 0001 0018             		move.b	#1,$18(a0)
0000A2C6 6100 FE86                  		bsr.w	CollectRing
0000A2CA                            
0000A2CA                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A2CA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A2D0 6100 0000                  		bsr.w	AnimateSprite
0000A2D4 6000 0000                  		bra.w	DisplaySprite
0000A2D8                            ; ===========================================================================
0000A2D8                            
0000A2D8                            Obj37_Delete:				; XREF: Obj37_Index
0000A2D8 6000 0000                  		bra.w	DeleteObject
0000A2DC                            ; ===========================================================================
0000A2DC                            ; ---------------------------------------------------------------------------
0000A2DC                            ; Object 4B - giant ring for entry to special stage
0000A2DC                            ; ---------------------------------------------------------------------------
0000A2DC                            
0000A2DC                            Obj4B:					; XREF: Obj_Index
0000A2DC 7000                       		moveq	#0,d0
0000A2DE 1028 0024                  		move.b	$24(a0),d0
0000A2E2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A2E6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A2EA                            ; ===========================================================================
0000A2EA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A2EC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A2EE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A2F0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A2F2                            ; ===========================================================================
0000A2F2                            
0000A2F2                            Obj4B_Main:				; XREF: Obj4B_Index
0000A2F2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A2FA 317C 2400 0002             		move.w	#$2400,2(a0)
0000A300 0028 0004 0001             		ori.b	#4,1(a0)
0000A306 117C 0040 0019             		move.b	#$40,$19(a0)
0000A30C 4A28 0001                  		tst.b	1(a0)
0000A310 6A00                       		bpl.s	Obj4B_Animate
0000A312 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A318 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A31C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A322 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A324 4E75                       		rts	
0000A326                            ; ===========================================================================
0000A326                            
0000A326                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A326 5428 0024                  		addq.b	#2,$24(a0)
0000A32A 117C 0002 0018             		move.b	#2,$18(a0)
0000A330 117C 0052 0020             		move.b	#$52,$20(a0)
0000A336 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A33C                            
0000A33C                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A33C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A342 3028 0008                  		move.w	8(a0),d0
0000A346 0240 FF80                  		andi.w	#$FF80,d0
0000A34A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A34E 0441 0080                  		subi.w	#$80,d1
0000A352 0241 FF80                  		andi.w	#$FF80,d1
0000A356 9041                       		sub.w	d1,d0
0000A358 0C40 0280                  		cmpi.w	#$280,d0
0000A35C 6200 0000                  		bhi.w	DeleteObject
0000A360 6000 0000                  		bra.w	DisplaySprite
0000A364                            ; ===========================================================================
0000A364                            
0000A364                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A364 5528 0024                  		subq.b	#2,$24(a0)
0000A368 117C 0000 0020             		move.b	#0,$20(a0)
0000A36E 6100 0000                  		bsr.w	SingleObjLoad
0000A372 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A376 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A37A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A380 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A386 2348 003C                  		move.l	a0,$3C(a1)
0000A38A 3038 D008                  		move.w	($FFFFD008).w,d0
0000A38E B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A392 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A394 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A39A                            
0000A39A                            Obj4B_PlaySnd:
0000A39A 303C 00C3                  		move.w	#$C3,d0
0000A39E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A3A4 6096                       		bra.s	Obj4B_Animate
0000A3A6                            ; ===========================================================================
0000A3A6                            
0000A3A6                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A3A6 6000 0000                  		bra.w	DeleteObject
0000A3AA                            ; ===========================================================================
0000A3AA                            ; ---------------------------------------------------------------------------
0000A3AA                            ; Object 7C - flash effect when	you collect the	giant ring
0000A3AA                            ; ---------------------------------------------------------------------------
0000A3AA                            
0000A3AA                            Obj7C:					; XREF: Obj_Index
0000A3AA 7000                       		moveq	#0,d0
0000A3AC 1028 0024                  		move.b	$24(a0),d0
0000A3B0 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A3B4 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A3B8                            ; ===========================================================================
0000A3B8 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A3BA 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A3BC 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A3BE                            ; ===========================================================================
0000A3BE                            
0000A3BE                            Obj7C_Main:				; XREF: Obj7C_Index
0000A3BE 5428 0024                  		addq.b	#2,$24(a0)
0000A3C2 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A3CA 317C 2462 0002             		move.w	#$2462,2(a0)
0000A3D0 0028 0004 0001             		ori.b	#4,1(a0)
0000A3D6 117C 0000 0018             		move.b	#0,$18(a0)
0000A3DC 117C 0020 0019             		move.b	#$20,$19(a0)
0000A3E2 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A3E8                            
0000A3E8                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A3E8 6100                       		bsr.s	Obj7C_Collect
0000A3EA 3028 0008                  		move.w	8(a0),d0
0000A3EE 0240 FF80                  		andi.w	#$FF80,d0
0000A3F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A3F6 0441 0080                  		subi.w	#$80,d1
0000A3FA 0241 FF80                  		andi.w	#$FF80,d1
0000A3FE 9041                       		sub.w	d1,d0
0000A400 0C40 0280                  		cmpi.w	#$280,d0
0000A404 6200 0000                  		bhi.w	DeleteObject
0000A408 6000 0000                  		bra.w	DisplaySprite
0000A40C                            
0000A40C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A40C                            
0000A40C                            
0000A40C                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A40C 5328 001E                  		subq.b	#1,$1E(a0)
0000A410 6A00                       		bpl.s	locret_9F76
0000A412 117C 0001 001E             		move.b	#1,$1E(a0)
0000A418 5228 001A                  		addq.b	#1,$1A(a0)
0000A41C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A422 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A424 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A42A 6600                       		bne.s	locret_9F76	; if not, branch
0000A42C 2268 003C                  		movea.l	$3C(a0),a1
0000A430 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A436 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A43C 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A442 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A446 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A44A                            
0000A44A                            locret_9F76:
0000A44A 4E75                       		rts	
0000A44C                            ; ===========================================================================
0000A44C                            
0000A44C                            Obj7C_End:				; XREF: Obj7C_Collect
0000A44C 5428 0024                  		addq.b	#2,$24(a0)
0000A450 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A456 588F                       		addq.l	#4,sp
0000A458 4E75                       		rts	
0000A45A                            ; End of function Obj7C_Collect
0000A45A                            
0000A45A                            ; ===========================================================================
0000A45A                            
0000A45A                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A45A 6000 0000                  		bra.w	DeleteObject
0000A45E                            ; ===========================================================================
0000A45E                            Ani_obj25:
0000A45E                            	include "_anim\obj25.asm"
0000A45E                            ; ---------------------------------------------------------------------------
0000A45E                            ; Animation script - ring
0000A45E                            ; ---------------------------------------------------------------------------
0000A45E 0000                       		dc.w byte_9F8C-Ani_obj25
0000A460 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A466                            		even
0000A466                            		even
0000A466                            
0000A466                            ; ---------------------------------------------------------------------------
0000A466                            ; Sprite mappings - rings
0000A466                            ; ---------------------------------------------------------------------------
0000A466                            Map_obj25:
0000A466                            	include "_maps\obj25.asm"
0000A466                            ; ---------------------------------------------------------------------------
0000A466                            ; Sprite mappings - rings
0000A466                            ; ---------------------------------------------------------------------------
0000A466 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A46A 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A46E 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A472 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A476 01                         byte_9FA2:	dc.b 1
0000A477 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A47C 01                         byte_9FA8:	dc.b 1
0000A47D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A482 01                         byte_9FAE:	dc.b 1
0000A483 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A488 01                         byte_9FB4:	dc.b 1
0000A489 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A48E 01                         byte_9FBA:	dc.b 1
0000A48F F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A494 01                         byte_9FC0:	dc.b 1
0000A495 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A49A 01                         byte_9FC6:	dc.b 1
0000A49B F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A4A0 01                         byte_9FCC:	dc.b 1
0000A4A1 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A4A6                            		even
0000A4A6                            		even
0000A4A6                            
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            ; Sprite mappings - giant ring
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            Map_obj4B:
0000A4A6                            	include "_maps\obj4B.asm"
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            ; Sprite mappings - giant ring
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A4AA 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A4AE 0A                         byte_9FDA:	dc.b $A
0000A4AF E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A4B4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A4B9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A4BE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A4C3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A4C8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A4CD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A4D2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A4D7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A4DC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A4E1 08                         byte_A00D:	dc.b 8
0000A4E2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A4E7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A4EC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A4F1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A4F6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A4FB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A500 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A505 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A50A 04                         byte_A036:	dc.b 4
0000A50B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A510 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A515 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A51A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A51F 08                         byte_A04B:	dc.b 8
0000A520 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A525 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A52A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A52F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A534 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A539 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A53E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A543 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A548                            		even
0000A548                            		even
0000A548                            
0000A548                            ; ---------------------------------------------------------------------------
0000A548                            ; Sprite mappings - flash effect when you collect the giant ring
0000A548                            ; ---------------------------------------------------------------------------
0000A548                            Map_obj7C:
0000A548                            	include "_maps\obj7C.asm"
0000A548                            ; ---------------------------------------------------------------------------
0000A548                            ; Sprite mappings - flash effect when you collect the giant ring
0000A548                            ; ---------------------------------------------------------------------------
0000A548 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A54C 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A550 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A554 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A558 02                         byte_A084:	dc.b 2
0000A559 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A55E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A563 04                         byte_A08F:	dc.b 4
0000A564 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A569 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A56E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A573 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A578 04                         byte_A0A4:	dc.b 4
0000A579 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A57E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A583 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A588 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A58D 04                         byte_A0B9:	dc.b 4
0000A58E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A593 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A598 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A59D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A5A2 04                         byte_A0CE:	dc.b 4
0000A5A3 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A5A8 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A5AD 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A5B2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A5B7 04                         byte_A0E3:	dc.b 4
0000A5B8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A5BD E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A5C2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A5C7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A5CC 02                         byte_A0F8:	dc.b 2
0000A5CD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A5D2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A5D7 04                         byte_A103:	dc.b 4
0000A5D8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A5DD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A5E2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A5E7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A5EC                            		even
0000A5EC                            		even
0000A5EC                            
0000A5EC                            ; ===========================================================================
0000A5EC                            ; ---------------------------------------------------------------------------
0000A5EC                            ; Object 26 - monitors
0000A5EC                            ; ---------------------------------------------------------------------------
0000A5EC                            
0000A5EC                            Obj26:					; XREF: Obj_Index
0000A5EC 7000                       		moveq	#0,d0
0000A5EE 1028 0024                  		move.b	$24(a0),d0
0000A5F2 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A5F6 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A5FA                            ; ===========================================================================
0000A5FA 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A5FC 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A5FE 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A600 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A602 0000                       		dc.w Obj26_Display-Obj26_Index
0000A604                            ; ===========================================================================
0000A604                            
0000A604                            Obj26_Main:				; XREF: Obj26_Index
0000A604 5428 0024                  		addq.b	#2,$24(a0)
0000A608 117C 000E 0016             		move.b	#$E,$16(a0)
0000A60E 117C 000E 0017             		move.b	#$E,$17(a0)
0000A614 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A61C 317C 0680 0002             		move.w	#$680,2(a0)
0000A622 117C 0004 0001             		move.b	#4,1(a0)
0000A628 117C 0003 0018             		move.b	#3,$18(a0)
0000A62E 117C 000F 0019             		move.b	#$F,$19(a0)
0000A634 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A638 7000                       		moveq	#0,d0
0000A63A 1028 0023                  		move.b	$23(a0),d0
0000A63E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A644 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A64A 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A64C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A652 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A658 4E75                       		rts	
0000A65A                            ; ===========================================================================
0000A65A                            
0000A65A                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A65A 117C 0046 0020             		move.b	#$46,$20(a0)
0000A660 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A666                            
0000A666                            Obj26_Solid:				; XREF: Obj26_Index
0000A666 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A66A 6700                       		beq.s	loc_A1EC	; if not, branch
0000A66C 5500                       		subq.b	#2,d0
0000A66E 6600                       		bne.s	Obj26_Fall
0000A670 7200                       		moveq	#0,d1
0000A672 1228 0019                  		move.b	$19(a0),d1
0000A676 0641 000B                  		addi.w	#$B,d1
0000A67A 6100 D41C                  		bsr.w	ExitPlatform
0000A67E 0829 0003 0022             		btst	#3,$22(a1)
0000A684 6600 0000                  		bne.w	loc_A1BC
0000A688 4228 0025                  		clr.b	$25(a0)
0000A68C 6000 0000                  		bra.w	Obj26_Animate
0000A690                            ; ===========================================================================
0000A690                            
0000A690                            loc_A1BC:				; XREF: Obj26_Solid
0000A690 363C 0010                  		move.w	#$10,d3
0000A694 3428 0008                  		move.w	8(a0),d2
0000A698 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A69C 6000 0000                  		bra.w	Obj26_Animate
0000A6A0                            ; ===========================================================================
0000A6A0                            
0000A6A0                            Obj26_Fall:				; XREF: Obj26_Solid
0000A6A0 6100 0000                  		bsr.w	ObjectFall
0000A6A4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6AA 4A41                       		tst.w	d1
0000A6AC 6A00 0000                  		bpl.w	Obj26_Animate
0000A6B0 D368 000C                  		add.w	d1,$C(a0)
0000A6B4 4268 0012                  		clr.w	$12(a0)
0000A6B8 4228 0025                  		clr.b	$25(a0)
0000A6BC 6000 0000                  		bra.w	Obj26_Animate
0000A6C0                            ; ===========================================================================
0000A6C0                            
0000A6C0                            loc_A1EC:				; XREF: Obj26_Solid
0000A6C0 323C 001A                  		move.w	#$1A,d1
0000A6C4 343C 000F                  		move.w	#$F,d2
0000A6C8 6100 0000                  		bsr.w	Obj26_SolidSides
0000A6CC 6700 0000                  		beq.w	loc_A25C
0000A6D0 4A69 0012                  		tst.w	$12(a1)
0000A6D4 6B00                       		bmi.s	loc_A20A
0000A6D6 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A6DC 6700                       		beq.s	loc_A25C	; if yes, branch
0000A6DE                            
0000A6DE                            loc_A20A:
0000A6DE 4A41                       		tst.w	d1
0000A6E0 6A00                       		bpl.s	loc_A220
0000A6E2 9769 000C                  		sub.w	d3,$C(a1)
0000A6E6 6100 D29E                  		bsr.w	loc_74AE
0000A6EA 117C 0002 0025             		move.b	#2,$25(a0)
0000A6F0 6000 0000                  		bra.w	Obj26_Animate
0000A6F4                            ; ===========================================================================
0000A6F4                            
0000A6F4                            loc_A220:
0000A6F4 4A40                       		tst.w	d0
0000A6F6 6700 0000                  		beq.w	loc_A246
0000A6FA 6B00                       		bmi.s	loc_A230
0000A6FC 4A69 0010                  		tst.w	$10(a1)
0000A700 6B00                       		bmi.s	loc_A246
0000A702 6000                       		bra.s	loc_A236
0000A704                            ; ===========================================================================
0000A704                            
0000A704                            loc_A230:
0000A704 4A69 0010                  		tst.w	$10(a1)
0000A708 6A00                       		bpl.s	loc_A246
0000A70A                            
0000A70A                            loc_A236:
0000A70A 9169 0008                  		sub.w	d0,8(a1)
0000A70E 337C 0000 0014             		move.w	#0,$14(a1)
0000A714 337C 0000 0010             		move.w	#0,$10(a1)
0000A71A                            
0000A71A                            loc_A246:
0000A71A 0829 0001 0022             		btst	#1,$22(a1)
0000A720 6600                       		bne.s	loc_A26A
0000A722 08E9 0005 0022             		bset	#5,$22(a1)
0000A728 08E8 0005 0022             		bset	#5,$22(a0)
0000A72E 6000                       		bra.s	Obj26_Animate
0000A730                            ; ===========================================================================
0000A730                            
0000A730                            loc_A25C:
0000A730 0828 0005 0022             		btst	#5,$22(a0)
0000A736 6700                       		beq.s	Obj26_Animate
0000A738 337C 0001 001C             		move.w	#1,$1C(a1)
0000A73E                            
0000A73E                            loc_A26A:
0000A73E 08A8 0005 0022             		bclr	#5,$22(a0)
0000A744 08A9 0005 0022             		bclr	#5,$22(a1)
0000A74A                            
0000A74A                            Obj26_Animate:				; XREF: Obj26_Index
0000A74A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A750 6100 0000                  		bsr.w	AnimateSprite
0000A754                            
0000A754                            Obj26_Display:				; XREF: Obj26_Index
0000A754 6100 0000                  		bsr.w	DisplaySprite
0000A758 3028 0008                  		move.w	8(a0),d0
0000A75C 0240 FF80                  		andi.w	#$FF80,d0
0000A760 3238 F700                  		move.w	($FFFFF700).w,d1
0000A764 0441 0080                  		subi.w	#$80,d1
0000A768 0241 FF80                  		andi.w	#$FF80,d1
0000A76C 9041                       		sub.w	d1,d0
0000A76E 0C40 0280                  		cmpi.w	#$280,d0
0000A772 6200 0000                  		bhi.w	DeleteObject
0000A776 4E75                       		rts	
0000A778                            ; ===========================================================================
0000A778                            
0000A778                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A778 5428 0024                  		addq.b	#2,$24(a0)
0000A77C 117C 0000 0020             		move.b	#0,$20(a0)
0000A782 6100 0000                  		bsr.w	SingleObjLoad
0000A786 6600                       		bne.s	Obj26_Explode
0000A788 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A78C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A792 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A798 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A79E 7400                       		moveq	#0,d2	; GMZ
0000A7A0 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A7A2                            
0000A7A2                            Obj26_Explode:
0000A7A2 6100 0000                  		bsr.w	SingleObjLoad
0000A7A6 6600                       		bne.s	Obj26_SetBroken
0000A7A8 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A7AC 5429 0024                  		addq.b	#2,$24(a1)
0000A7B0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A7B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A7BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A7C0                            
0000A7C0                            Obj26_NextExplosion:
0000A7C0 5802                       		addq.b	#4,d2
0000A7C2 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A7C6                            
0000A7C6                            Obj26_SetBroken:
0000A7C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7CA 7000                       		moveq	#0,d0
0000A7CC 1028 0023                  		move.b	$23(a0),d0
0000A7D0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A7D6 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A7DC 6000 0000                  		bra.w	DisplaySprite
0000A7E0                            ; ===========================================================================
0000A7E0                            ; ---------------------------------------------------------------------------
0000A7E0                            ; Object 2E - contents of monitors
0000A7E0                            ; ---------------------------------------------------------------------------
0000A7E0                            
0000A7E0                            Obj2E:					; XREF: Obj_Index
0000A7E0 7000                       		moveq	#0,d0
0000A7E2 1028 0024                  		move.b	$24(a0),d0
0000A7E6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A7EA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A7EE 6000 0000                  		bra.w	DisplaySprite
0000A7F2                            ; ===========================================================================
0000A7F2 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A7F4 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A7F6 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A7F8                            ; ===========================================================================
0000A7F8                            
0000A7F8                            Obj2E_Main:				; XREF: Obj2E_Index
0000A7F8 5428 0024                  		addq.b	#2,$24(a0)
0000A7FC 317C 0680 0002             		move.w	#$680,2(a0)
0000A802 117C 0024 0001             		move.b	#$24,1(a0)
0000A808 117C 0003 0018             		move.b	#3,$18(a0)
0000A80E 117C 0008 0019             		move.b	#8,$19(a0)
0000A814 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A81A 7000                       		moveq	#0,d0
0000A81C 1028 001C                  		move.b	$1C(a0),d0
0000A820 5400                       		addq.b	#2,d0
0000A822 1140 001A                  		move.b	d0,$1A(a0)
0000A826 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A82C D000                       		add.b	d0,d0
0000A82E D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A832 5249                       		addq.w	#1,a1
0000A834 2149 0004                  		move.l	a1,4(a0)
0000A838                            
0000A838                            Obj2E_Move:				; XREF: Obj2E_Index
0000A838 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A83C 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A840 6100 0000                  		bsr.w	SpeedToPos
0000A844 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A84A 4E75                       		rts	
0000A84C                            ; ===========================================================================
0000A84C                            
0000A84C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A84C 5428 0024                  		addq.b	#2,$24(a0)
0000A850 317C 001D 001E             		move.w	#29,$1E(a0)
0000A856 1028 001C                  		move.b	$1C(a0),d0
0000A85A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A85E 6600                       		bne.s	Obj2E_ChkSonic
0000A860 4E75                       		rts			; Eggman monitor does nothing
0000A862                            ; ===========================================================================
0000A862                            
0000A862                            Obj2E_ChkSonic:
0000A862 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A866 6600                       		bne.s	Obj2E_ChkShoes
0000A868                            
0000A868                            ExtraLife:
0000A868 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A86C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A870 303C 0088                  		move.w	#$88,d0
0000A874 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000A87A                            ; ===========================================================================
0000A87A                            
0000A87A                            Obj2E_ChkShoes:
0000A87A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A87E 6600                       		bne.s	Obj2E_ChkShield
0000A880 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A886 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A88C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A892 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A898 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A89E 303C 00E2                  		move.w	#$E2,d0
0000A8A2 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000A8A8                            ; ===========================================================================
0000A8A8                            
0000A8A8                            Obj2E_ChkShield:
0000A8A8 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A8AC 6600                       		bne.s	Obj2E_ChkInvinc
0000A8AE 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A8B4 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A8BA 303C 00AF                  		move.w	#$AF,d0
0000A8BE 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000A8C4                            ; ===========================================================================
0000A8C4                            
0000A8C4                            Obj2E_ChkInvinc:
0000A8C4 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A8C8 6600                       		bne.s	Obj2E_ChkRings
0000A8CA 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A8D0 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A8D6 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A8DC 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A8E2 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A8E8 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A8EE 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A8F4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A8FA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A900 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A906 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A90A 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A90C 303C 0087                  		move.w	#$87,d0
0000A910 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000A916                            ; ===========================================================================
0000A916                            
0000A916                            Obj2E_NoMusic:
0000A916 4E75                       		rts	
0000A918                            ; ===========================================================================
0000A918                            
0000A918                            Obj2E_ChkRings:
0000A918 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A91C 6600                       		bne.s	Obj2E_ChkS
0000A91E 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A924 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A92A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A930 6500                       		bcs.s	Obj2E_RingSound
0000A932 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A938 6700 FF2E                  		beq.w	ExtraLife
0000A93C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A942 6500                       		bcs.s	Obj2E_RingSound
0000A944 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A94A 6700 FF1C                  		beq.w	ExtraLife
0000A94E                            
0000A94E                            Obj2E_RingSound:
0000A94E 303C 00B5                  		move.w	#$B5,d0
0000A952 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000A958                            ; ===========================================================================
0000A958                            
0000A958                            Obj2E_ChkS:
0000A958 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A95C 6600                       		bne.s	Obj2E_ChkEnd
0000A95E                            		; nop	
0000A95E 7201                       		moveq	#1,d1
0000A960 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A964                            
0000A964                            Obj2E_ChkEnd:
0000A964 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A966                            ; ===========================================================================
0000A966                            
0000A966                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A966 5368 001E                  		subq.w	#1,$1E(a0)
0000A96A 6B00 0000                  		bmi.w	DeleteObject
0000A96E 4E75                       		rts	
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            ; Subroutine to	make the sides of a monitor solid
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            
0000A970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A970                            
0000A970                            
0000A970                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A970 43F8 D000                  		lea	($FFFFD000).w,a1
0000A974 3029 0008                  		move.w	8(a1),d0
0000A978 9068 0008                  		sub.w	8(a0),d0
0000A97C D041                       		add.w	d1,d0
0000A97E 6B00                       		bmi.s	loc_A4E6
0000A980 3601                       		move.w	d1,d3
0000A982 D643                       		add.w	d3,d3
0000A984 B043                       		cmp.w	d3,d0
0000A986 6200                       		bhi.s	loc_A4E6
0000A988 1629 0016                  		move.b	$16(a1),d3
0000A98C 4883                       		ext.w	d3
0000A98E D443                       		add.w	d3,d2
0000A990 3629 000C                  		move.w	$C(a1),d3
0000A994 9668 000C                  		sub.w	$C(a0),d3
0000A998 D642                       		add.w	d2,d3
0000A99A 6B00                       		bmi.s	loc_A4E6
0000A99C D442                       		add.w	d2,d2
0000A99E B642                       		cmp.w	d2,d3
0000A9A0 6400                       		bcc.s	loc_A4E6
0000A9A2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A9A6 6B00                       		bmi.s	loc_A4E6
0000A9A8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A9AE 6400                       		bcc.s	loc_A4E6
0000A9B0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A9B4 6600                       		bne.s	loc_A4E6
0000A9B6 B240                       		cmp.w	d0,d1
0000A9B8 6400                       		bcc.s	loc_A4DC
0000A9BA D241                       		add.w	d1,d1
0000A9BC 9041                       		sub.w	d1,d0
0000A9BE                            
0000A9BE                            loc_A4DC:
0000A9BE 0C43 0010                  		cmpi.w	#$10,d3
0000A9C2 6500                       		bcs.s	loc_A4EA
0000A9C4                            
0000A9C4                            loc_A4E2:
0000A9C4 7201                       		moveq	#1,d1
0000A9C6 4E75                       		rts	
0000A9C8                            ; ===========================================================================
0000A9C8                            
0000A9C8                            loc_A4E6:
0000A9C8 7200                       		moveq	#0,d1
0000A9CA 4E75                       		rts	
0000A9CC                            ; ===========================================================================
0000A9CC                            
0000A9CC                            loc_A4EA:
0000A9CC 7200                       		moveq	#0,d1
0000A9CE 1228 0019                  		move.b	$19(a0),d1
0000A9D2 5841                       		addq.w	#4,d1
0000A9D4 3401                       		move.w	d1,d2
0000A9D6 D442                       		add.w	d2,d2
0000A9D8 D269 0008                  		add.w	8(a1),d1
0000A9DC 9268 0008                  		sub.w	8(a0),d1
0000A9E0 6BE2                       		bmi.s	loc_A4E2
0000A9E2 B242                       		cmp.w	d2,d1
0000A9E4 64DE                       		bcc.s	loc_A4E2
0000A9E6 72FF                       		moveq	#-1,d1
0000A9E8 4E75                       		rts	
0000A9EA                            ; End of function Obj26_SolidSides
0000A9EA                            
0000A9EA                            ; ===========================================================================
0000A9EA                            Ani_obj26:
0000A9EA                            	include "_anim\obj26.asm"
0000A9EA                            ; ---------------------------------------------------------------------------
0000A9EA                            ; Animation script - monitors
0000A9EA                            ; ---------------------------------------------------------------------------
0000A9EA 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A9F0 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A9F6 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A9FC 0000                       		dc.w byte_A582-Ani_obj26
0000A9FE 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AA04 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AA10 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AA1C 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AA28 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AA34 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AA40 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AA4C 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AA58 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AA64 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AA6C                            		even
0000AA6C                            		even
0000AA6C                            
0000AA6C                            ; ---------------------------------------------------------------------------
0000AA6C                            ; Sprite mappings - monitors
0000AA6C                            ; ---------------------------------------------------------------------------
0000AA6C                            Map_obj26:
0000AA6C                            	include "_maps\obj26.asm"
0000AA6C                            ; ================================================================================
0000AA6C                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AA6C                            ; ================================================================================
0000AA6C                            
0000AA6C                            DATAY1U343IF3L:
0000AA6C 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AA70 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AA74 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AA78 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AA7C 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA80 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA84 05                         DATAY1U343IF3L_0: dc.b $5
0000AA85 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA8A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA8F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA94 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA99 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA9E 06                         DATAY1U343IF3L_1: dc.b $6
0000AA9F F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AAA4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAA9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAAE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAB3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAB8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AABD 05                         DATAY1U343IF3L_2: dc.b $5
0000AABE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAC3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAC8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AACD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAD2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAD7 05                         DATAY1U343IF3L_3: dc.b $5
0000AAD8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AADD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAE2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAEC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAF1 06                         DATAY1U343IF3L_4: dc.b $6
0000AAF2 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AAF7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAFC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB01 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB06 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB0B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB10 06                         DATAY1U343IF3L_5: dc.b $6
0000AB11 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AB16 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB1B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB20 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB25 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB2A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB2F 06                         DATAY1U343IF3L_6: dc.b $6
0000AB30 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AB35 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB3A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB3F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB44 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB49 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB4E 06                         DATAY1U343IF3L_7: dc.b $6
0000AB4F F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AB54 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB59 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB5E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB63 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB68 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB6D 06                         DATAY1U343IF3L_8: dc.b $6
0000AB6E F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AB73 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB78 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB7D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB82 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB87 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB8C 06                         DATAY1U343IF3L_9: dc.b $6
0000AB8D F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB92 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB97 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB9C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABA1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABA6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABAB 05                         DATAY1U343IF3L_A: dc.b $5
0000ABAC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABB1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABB6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABBB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABC0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABC5 01                         DATAY1U343IF3L_B: dc.b $1
0000ABC6 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ABCC 00                         	even
0000ABCC 00                         	even
0000ABCC                            
0000ABCC                            ; ===========================================================================
0000ABCC                            ; ---------------------------------------------------------------------------
0000ABCC                            ; Object 0E - Sonic on the title screen
0000ABCC                            ; ---------------------------------------------------------------------------
0000ABCC                            
0000ABCC                            Obj0E:					; XREF: Obj_Index
0000ABCC 7000                       		moveq	#0,d0
0000ABCE 1028 0024                  		move.b	$24(a0),d0
0000ABD2 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ABD6 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ABDA                            ; ===========================================================================
0000ABDA 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ABDC 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ABDE 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ABE0 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ABE2                            ; ===========================================================================
0000ABE2                            
0000ABE2                            Obj0E_Main:				; XREF: Obj0E_Index
0000ABE2 5428 0024                  		addq.b	#2,$24(a0)
0000ABE6 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ABEC 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ABF2 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ABFA 317C 2300 0002             		move.w	#$2300,2(a0)
0000AC00 117C 0001 0018             		move.b	#1,$18(a0)
0000AC06 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AC0C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC12 6100 0000                  		bsr.w	AnimateSprite
0000AC16                            
0000AC16                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AC16 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AC1A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AC1C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AC20 6000 0000                  		bra.w	DisplaySprite
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AC24 4E75                       		rts	
0000AC26                            ; ===========================================================================
0000AC26                            
0000AC26                            Obj0E_Move:				; XREF: Obj0E_Index
0000AC26 5168 000A                  		subq.w	#8,$A(a0)
0000AC2A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AC30 6600                       		bne.s	Obj0E_Display
0000AC32 5428 0024                  		addq.b	#2,$24(a0)
0000AC36                            
0000AC36                            Obj0E_Display:
0000AC36 6000 0000                  		bra.w	DisplaySprite
0000AC3A                            ; ===========================================================================
0000AC3A 4E75                       		rts	
0000AC3C                            ; ===========================================================================
0000AC3C                            
0000AC3C                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AC3C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC42 6100 0000                  		bsr.w	AnimateSprite
0000AC46 6000 0000                  		bra.w	DisplaySprite
0000AC4A                            ; ===========================================================================
0000AC4A 4E75                       		rts	
0000AC4C                            ; ===========================================================================
0000AC4C                            ; ---------------------------------------------------------------------------
0000AC4C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AC4C                            ; ---------------------------------------------------------------------------
0000AC4C                            
0000AC4C                            Obj0F:					; XREF: Obj_Index
0000AC4C 7000                       		moveq	#0,d0
0000AC4E 1028 0024                  		move.b	$24(a0),d0
0000AC52 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AC56 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AC5A 6000 0000                  		bra.w	DisplaySprite
0000AC5E                            ; ===========================================================================
0000AC5E 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AC60 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AC62 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AC64                            ; ===========================================================================
0000AC64                            
0000AC64                            Obj0F_Main:				; XREF: Obj0F_Index
0000AC64 5428 0024                  		addq.b	#2,$24(a0)
0000AC68 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AC6E 317C 0130 000A             		move.w	#$130,$A(a0)
0000AC74 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AC7C 317C 0200 0002             		move.w	#$200,2(a0)
0000AC82 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC88 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC8A 5428 0024                  		addq.b	#2,$24(a0)
0000AC8E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC94 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC96 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC9C 317C 0170 0008             		move.w	#$170,8(a0)
0000ACA2 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000ACA8                            
0000ACA8                            locret_A6F8:				; XREF: Obj0F_Index
0000ACA8 4E75                       		rts	
0000ACAA                            ; ===========================================================================
0000ACAA                            
0000ACAA                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000ACAA 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000ACB0 6000 0000                  		bra.w	AnimateSprite
0000ACB4                            ; ===========================================================================
0000ACB4                            Ani_obj0E:
0000ACB4                            	include "_anim\obj0E.asm"
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            ; Animation script - Sonic on the title screen
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4 0000                       		dc.w byte_A706-Ani_obj0E
0000ACB6 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000ACC2                            		even
0000ACC2                            		even
0000ACC2                            
0000ACC2                            Ani_obj0F:
0000ACC2                            	include "_anim\obj0F.asm"
0000ACC2                            ; ---------------------------------------------------------------------------
0000ACC2                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000ACC2                            ; ---------------------------------------------------------------------------
0000ACC2 0000                       		dc.w byte_A714-Ani_obj0F
0000ACC4 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000ACC8                            		even
0000ACC8                            		even
0000ACC8                            
0000ACC8                            ; ---------------------------------------------------------------------------
0000ACC8                            ; Subroutine to	animate	a sprite using an animation script
0000ACC8                            ; ---------------------------------------------------------------------------
0000ACC8                            
0000ACC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACC8                            
0000ACC8                            
0000ACC8                            AnimateSprite:
0000ACC8 7000                       		moveq	#0,d0
0000ACCA 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000ACCE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000ACD2 6700                       		beq.s	Anim_Run	; if not, branch
0000ACD4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000ACD8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACDE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000ACE4                            
0000ACE4                            Anim_Run:
0000ACE4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000ACE8 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000ACEA D040                       		add.w	d0,d0
0000ACEC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000ACF0 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000ACF4 7200                       		moveq	#0,d1
0000ACF6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000ACFA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000ACFE 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AD00                            
0000AD00                            Anim_Next:
0000AD00 1200                       		move.b	d0,d1
0000AD02 0200 001F                  		andi.b	#$1F,d0
0000AD06 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AD0A 1028 0022                  		move.b	$22(a0),d0
0000AD0E E719                       		rol.b	#3,d1
0000AD10 B101                       		eor.b	d0,d1
0000AD12 0201 0003                  		andi.b	#3,d1
0000AD16 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AD1C 8328 0001                  		or.b	d1,1(a0)
0000AD20 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AD24                            
0000AD24                            Anim_Wait:
0000AD24 4E75                       		rts	
0000AD26                            ; ===========================================================================
0000AD26                            
0000AD26                            Anim_End_FF:
0000AD26 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AD28 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AD2A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AD30 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AD34 60CA                       		bra.s	Anim_Next
0000AD36                            ; ===========================================================================
0000AD36                            
0000AD36                            Anim_End_FE:
0000AD36 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AD38 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AD3A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AD3E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AD42 9200                       		sub.b	d0,d1
0000AD44 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AD48 60B6                       		bra.s	Anim_Next
0000AD4A                            ; ===========================================================================
0000AD4A                            
0000AD4A                            Anim_End_FD:
0000AD4A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AD4C 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AD4E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AD54                            
0000AD54                            Anim_End_FC:
0000AD54 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AD56 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AD58 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AD5C                            
0000AD5C                            Anim_End_FB:
0000AD5C 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AD5E 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AD60 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD66 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AD6A                            
0000AD6A                            Anim_End_FA:
0000AD6A 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AD6C 6600                       		bne.s	Anim_End	; if not, branch
0000AD6E 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AD72                            
0000AD72                            Anim_End:
0000AD72 4E75                       		rts	
0000AD74                            ; End of function AnimateSprite
0000AD74                            
0000AD74                            ; ===========================================================================
0000AD74                            ; ---------------------------------------------------------------------------
0000AD74                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD74                            ; ---------------------------------------------------------------------------
0000AD74                            Map_obj0F:
0000AD74                            	include "_maps\obj0F.asm"
0000AD74                            ; ---------------------------------------------------------------------------
0000AD74                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD74                            ; ---------------------------------------------------------------------------
0000AD74 0000                       		dc.w byte_A7CD-Map_obj0F
0000AD76 0000                       		dc.w byte_A7CC-Map_obj0F
0000AD78 0000                       		dc.w byte_A7EB-Map_obj0F
0000AD7A 0000                       		dc.w byte_A882-Map_obj0F
0000AD7C 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AD7D 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD82 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD87 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD8C 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD91 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD96 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD9B 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD9C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADAB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADB0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADB5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADBA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADBF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADC4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADC9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADCE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADDD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADE2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADE7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADEC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADF1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADF6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADFB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE00 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE05 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE0A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE0F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE14 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE19 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE1E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE23 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE28 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE2D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE32 01                         byte_A882:	dc.b 1			; "TM"
0000AE33 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AE38                            		even
0000AE38                            		even
0000AE38                            
0000AE38                            ; ---------------------------------------------------------------------------
0000AE38                            ; Sprite mappings - Sonic on the title screen
0000AE38                            ; ---------------------------------------------------------------------------
0000AE38                            Map_obj0E:
0000AE38                            	include "_maps\obj0E.asm"
0000AE38                            ; ================================================================================
0000AE38                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AE38                            ; ================================================================================
0000AE38                            
0000AE38                            DATAGKI0HYDQBXP:
0000AE38 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AE3C 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AE40 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AE44 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AE48 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AE49 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AE4E 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AE53 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AE58 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AE5D 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AE62 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AE67 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AE6C 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AE71 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AE72 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AE77 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AE7C 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AE81 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AE86 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AE8B 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AE90 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AE95 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AE9A 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AE9F 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AEA4 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AEA9 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AEAA F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AEAF F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AEB4 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AEB9 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AEBE 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AEC3 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AEC8 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AECD 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AED2 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AED7 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AEDC 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AEE1 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AEE2 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AEE7 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AEEC FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AEF1 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AEF6 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AEFB 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AF00 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AF05 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AF0A 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AF0F 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AF14 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AF15 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AF1A F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AF1F 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AF24 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AF29 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AF2E 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AF33 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AF38 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AF3D 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AF42 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AF47 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AF4C 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AF51 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AF56 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AF5B 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AF60 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AF65 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AF66 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AF6B EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AF70 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AF75 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AF7A EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF7F 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF84 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF89 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF8E 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF93 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF98 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF9D 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000AF9E EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000AFA3 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000AFA8 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AFAD EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AFB2 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AFB7 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AFBC EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AFC1 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AFC6 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AFCB EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AFD0 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AFD5 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AFDA EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000AFDF 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AFE4 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000AFE9 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000AFEA EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000AFEF 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000AFF4 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000AFF9 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000AFFE 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B003 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B008 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B00D 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B012 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B017 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B01C 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B021 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B026 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B02B 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B030 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B036 00                         	even
0000B036 00                         	even
0000B036                            
0000B036                            ; ===========================================================================
0000B036                            ; ---------------------------------------------------------------------------
0000B036                            ; Object 2B - Chopper enemy (GHZ)
0000B036                            ; ---------------------------------------------------------------------------
0000B036                            
0000B036                            Obj2B:					; XREF: Obj_Index
0000B036 7000                       		moveq	#0,d0
0000B038 1028 0024                  		move.b	$24(a0),d0
0000B03C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B040 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B044 6000 0000                  		bra.w	MarkObjGone
0000B048                            ; ===========================================================================
0000B048 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B04A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B04C                            ; ===========================================================================
0000B04C                            
0000B04C                            Obj2B_Main:				; XREF: Obj2B_Index
0000B04C 5428 0024                  		addq.b	#2,$24(a0)
0000B050 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B058 317C 047B 0002             		move.w	#$47B,2(a0)
0000B05E 117C 0004 0001             		move.b	#4,1(a0)
0000B064 117C 0004 0018             		move.b	#4,$18(a0)
0000B06A 117C 0009 0020             		move.b	#9,$20(a0)
0000B070 117C 0010 0019             		move.b	#$10,$19(a0)
0000B076 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B07C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B082                            
0000B082                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B082 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B088 6100 FC3E                  		bsr.w	AnimateSprite
0000B08C 6100 0000                  		bsr.w	SpeedToPos
0000B090 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B096 3028 0030                  		move.w	$30(a0),d0
0000B09A B068 000C                  		cmp.w	$C(a0),d0
0000B09E 6400                       		bcc.s	Obj2B_ChgAni
0000B0A0 3140 000C                  		move.w	d0,$C(a0)
0000B0A4 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B0AA                            
0000B0AA                            Obj2B_ChgAni:
0000B0AA 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B0B0 0440 00C0                  		subi.w	#$C0,d0
0000B0B4 B068 000C                  		cmp.w	$C(a0),d0
0000B0B8 6400                       		bcc.s	locret_ABB6
0000B0BA 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B0C0 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B0C4 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B0C6 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B0CC                            
0000B0CC                            locret_ABB6:
0000B0CC 4E75                       		rts	
0000B0CE                            ; ===========================================================================
0000B0CE                            Ani_obj2B:
0000B0CE                            	include "_anim\obj2B.asm"
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE                            ; Animation script - Chopper enemy
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B0D0 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B0D2 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B0D4 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B0D8 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B0DC 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B0E0 00                         		even
0000B0E0 00                         		even
0000B0E0                            
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0                            Map_obj2B:
0000B0E0                            	include "_maps\obj2B.asm"
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0 0000                       		dc.w byte_ABCE-Map_obj2B
0000B0E2 0000                       		dc.w byte_ABD4-Map_obj2B
0000B0E4 01                         byte_ABCE:	dc.b 1
0000B0E5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B0EA 01                         byte_ABD4:	dc.b 1
0000B0EB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0F0                            		even
0000B0F0                            		even
0000B0F0                            
0000B0F0                            ; ===========================================================================
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0                            ; Object 2C - Jaws enemy (LZ)
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0                            
0000B0F0                            Obj2C:					; XREF: Obj_Index
0000B0F0 7000                       		moveq	#0,d0
0000B0F2 1028 0024                  		move.b	$24(a0),d0
0000B0F6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0FA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0FE                            ; ===========================================================================
0000B0FE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B100 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B102                            ; ===========================================================================
0000B102                            
0000B102                            Obj2C_Main:				; XREF: Obj2C_Index
0000B102 5428 0024                  		addq.b	#2,$24(a0)
0000B106 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B10E 317C 2486 0002             		move.w	#$2486,2(a0)
0000B114 0028 0004 0001             		ori.b	#4,1(a0)
0000B11A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B120 117C 0004 0018             		move.b	#4,$18(a0)
0000B126 117C 0010 0019             		move.b	#$10,$19(a0)
0000B12C 7000                       		moveq	#0,d0
0000B12E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B132 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B134 5340                       		subq.w	#1,d0
0000B136 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B13A 3140 0032                  		move.w	d0,$32(a0)
0000B13E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B144 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B14A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B14C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B150                            
0000B150                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B150 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B154 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B156 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B15C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B160 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B166 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B16C                            
0000B16C                            Obj2C_Animate:
0000B16C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B172 6100 FB54                  		bsr.w	AnimateSprite
0000B176 6100 0000                  		bsr.w	SpeedToPos
0000B17A 6000 0000                  		bra.w	MarkObjGone
0000B17E                            ; ===========================================================================
0000B17E                            Ani_obj2C:
0000B17E                            	include "_anim\obj2C.asm"
0000B17E                            ; ---------------------------------------------------------------------------
0000B17E                            ; Animation script - Jaws enemy
0000B17E                            ; ---------------------------------------------------------------------------
0000B17E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B180 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B186                            		even
0000B186                            		even
0000B186                            
0000B186                            ; ---------------------------------------------------------------------------
0000B186                            ; Sprite mappings - Jaws enemy (LZ)
0000B186                            ; ---------------------------------------------------------------------------
0000B186                            Map_obj2C:
0000B186                            	include "_maps\obj2C.asm"
0000B186                            ; ---------------------------------------------------------------------------
0000B186                            ; Sprite mappings - Jaws enemy (LZ)
0000B186                            ; ---------------------------------------------------------------------------
0000B186 0000                       		dc.w byte_AC78-Map_obj2C
0000B188 0000                       		dc.w byte_AC83-Map_obj2C
0000B18A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B18C 0000                       		dc.w byte_AC99-Map_obj2C
0000B18E 02                         byte_AC78:	dc.b 2
0000B18F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B194 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B199 02                         byte_AC83:	dc.b 2
0000B19A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B19F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B1A4 02                         byte_AC8E:	dc.b 2
0000B1A5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B1AA F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B1AF 02                         byte_AC99:	dc.b 2
0000B1B0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1B5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B1BA                            		even
0000B1BA                            		even
0000B1BA                            
0000B1BA                            ; ===========================================================================
0000B1BA                            ; ---------------------------------------------------------------------------
0000B1BA                            ; Object 2D - Burrobot enemy (LZ)
0000B1BA                            ; ---------------------------------------------------------------------------
0000B1BA                            
0000B1BA                            Obj2D:					; XREF: Obj_Index
0000B1BA 7000                       		moveq	#0,d0
0000B1BC 1028 0024                  		move.b	$24(a0),d0
0000B1C0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B1C4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B1C8                            ; ===========================================================================
0000B1C8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B1CA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B1CC                            ; ===========================================================================
0000B1CC                            
0000B1CC                            Obj2D_Main:				; XREF: Obj2D_Index
0000B1CC 5428 0024                  		addq.b	#2,$24(a0)
0000B1D0 117C 0013 0016             		move.b	#$13,$16(a0)
0000B1D6 117C 0008 0017             		move.b	#8,$17(a0)
0000B1DC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B1E4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B1EA 0028 0004 0001             		ori.b	#4,1(a0)
0000B1F0 117C 0004 0018             		move.b	#4,$18(a0)
0000B1F6 117C 0005 0020             		move.b	#5,$20(a0)
0000B1FC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B202 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B206 117C 0002 001C             		move.b	#2,$1C(a0)
0000B20C                            
0000B20C                            Obj2D_Action:				; XREF: Obj2D_Index
0000B20C 7000                       		moveq	#0,d0
0000B20E 1028 0025                  		move.b	$25(a0),d0
0000B212 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B216 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B21A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B220 6100 FAA6                  		bsr.w	AnimateSprite
0000B224 6000 0000                  		bra.w	MarkObjGone
0000B228                            ; ===========================================================================
0000B228 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B22A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B22C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B22E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B230                            ; ===========================================================================
0000B230                            
0000B230                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B230 5368 0030                  		subq.w	#1,$30(a0)
0000B234 6A00                       		bpl.s	locret_AD42
0000B236 5428 0025                  		addq.b	#2,$25(a0)
0000B23A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B240 317C 0080 0010             		move.w	#$80,$10(a0)
0000B246 117C 0001 001C             		move.b	#1,$1C(a0)
0000B24C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B252 6700                       		beq.s	locret_AD42
0000B254 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B258                            
0000B258                            locret_AD42:
0000B258 4E75                       		rts	
0000B25A                            ; ===========================================================================
0000B25A                            
0000B25A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B25A 5368 0030                  		subq.w	#1,$30(a0)
0000B25E 6B00                       		bmi.s	loc_AD84
0000B260 6100 0000                  		bsr.w	SpeedToPos
0000B264 0868 0000 0032             		bchg	#0,$32(a0)
0000B26A 6600                       		bne.s	loc_AD78
0000B26C 3628 0008                  		move.w	8(a0),d3
0000B270 0643 000C                  		addi.w	#$C,d3
0000B274 0828 0000 0022             		btst	#0,$22(a0)
0000B27A 6600                       		bne.s	loc_AD6A
0000B27C 0443 0018                  		subi.w	#$18,d3
0000B280                            
0000B280                            loc_AD6A:
0000B280 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B286 0C41 000C                  		cmpi.w	#$C,d1
0000B28A 6C00                       		bge.s	loc_AD84
0000B28C 4E75                       		rts	
0000B28E                            ; ===========================================================================
0000B28E                            
0000B28E                            loc_AD78:				; XREF: Obj2D_Move
0000B28E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B294 D368 000C                  		add.w	d1,$C(a0)
0000B298 4E75                       		rts	
0000B29A                            ; ===========================================================================
0000B29A                            
0000B29A                            loc_AD84:				; XREF: Obj2D_Move
0000B29A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B2A0 6700                       		beq.s	loc_ADA4
0000B2A2 5528 0025                  		subq.b	#2,$25(a0)
0000B2A6 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B2AC 317C 0000 0010             		move.w	#0,$10(a0)
0000B2B2 117C 0000 001C             		move.b	#0,$1C(a0)
0000B2B8 4E75                       		rts	
0000B2BA                            ; ===========================================================================
0000B2BA                            
0000B2BA                            loc_ADA4:
0000B2BA 5428 0025                  		addq.b	#2,$25(a0)
0000B2BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2C4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B2CA 4E75                       		rts	
0000B2CC                            ; ===========================================================================
0000B2CC                            
0000B2CC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B2CC 6100 0000                  		bsr.w	SpeedToPos
0000B2D0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B2D6 6B00                       		bmi.s	locret_ADF0
0000B2D8 117C 0003 001C             		move.b	#3,$1C(a0)
0000B2DE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2E4 4A41                       		tst.w	d1
0000B2E6 6A00                       		bpl.s	locret_ADF0
0000B2E8 D368 000C                  		add.w	d1,$C(a0)
0000B2EC 317C 0000 0012             		move.w	#0,$12(a0)
0000B2F2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2F8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2FE 5528 0025                  		subq.b	#2,$25(a0)
0000B302 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B306                            
0000B306                            locret_ADF0:
0000B306 4E75                       		rts	
0000B308                            ; ===========================================================================
0000B308                            
0000B308                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B308 343C 0060                  		move.w	#$60,d2
0000B30C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B310 6400                       		bcc.s	locret_AE20
0000B312 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B316 9068 000C                  		sub.w	$C(a0),d0
0000B31A 6400                       		bcc.s	locret_AE20
0000B31C 0C40 FF80                  		cmpi.w	#-$80,d0
0000B320 6500                       		bcs.s	locret_AE20
0000B322 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B326 6600                       		bne.s	locret_AE20
0000B328 5528 0025                  		subq.b	#2,$25(a0)
0000B32C 3141 0010                  		move.w	d1,$10(a0)
0000B330 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B336                            
0000B336                            locret_AE20:
0000B336 4E75                       		rts	
0000B338                            
0000B338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B338                            
0000B338                            
0000B338                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B338 323C 0080                  		move.w	#$80,d1
0000B33C 08E8 0000 0022             		bset	#0,$22(a0)
0000B342 3038 D008                  		move.w	($FFFFD008).w,d0
0000B346 9068 0008                  		sub.w	8(a0),d0
0000B34A 6400                       		bcc.s	loc_AE40
0000B34C 4440                       		neg.w	d0
0000B34E 4441                       		neg.w	d1
0000B350 08A8 0000 0022             		bclr	#0,$22(a0)
0000B356                            
0000B356                            loc_AE40:
0000B356 B042                       		cmp.w	d2,d0
0000B358 4E75                       		rts	
0000B35A                            ; End of function Obj2D_ChkSonic2
0000B35A                            
0000B35A                            ; ===========================================================================
0000B35A                            Ani_obj2D:
0000B35A                            	include "_anim\obj2D.asm"
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            ; Animation script - Burrobot enemy but craig
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B35C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B35E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B360 0000                       		dc.w byte_AE58-Ani_obj2D
0000B362 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B365 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B369 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B377 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B37A                            		even
0000B37A                            		even
0000B37A                            
0000B37A                            ; ---------------------------------------------------------------------------
0000B37A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B37A                            ; ---------------------------------------------------------------------------
0000B37A                            Map_obj2D:
0000B37A                            	include "_maps\obj2D.asm"
0000B37A                            Map_e3a3:
0000B37A 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B37C 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B37E 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B380 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B382 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B384 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B386 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B388 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B38A 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B38C 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B38E 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B390 02                         Map_e3a3_16: 	dc.b $2
0000B391 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B396 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B39B 02                         Map_e3a3_21: 	dc.b $2
0000B39C EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B3A1 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B3A6 02                         Map_e3a3_2C: 	dc.b $2
0000B3A7 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B3AC 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B3B1 02                         Map_e3a3_37: 	dc.b $2
0000B3B2 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B3B7 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B3BC 02                         Map_e3a3_42: 	dc.b $2
0000B3BD EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B3C2 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B3C7 02                         Map_e3a3_4D: 	dc.b $2
0000B3C8 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B3CD FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B3D2 02                         Map_e3a3_58: 	dc.b $2
0000B3D3 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B3D8 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B3DD 02                         Map_e3a3_63: 	dc.b $2
0000B3DE EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B3E3 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B3E8 02                         Map_e3a3_6E: 	dc.b $2
0000B3E9 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B3EE FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B3F3 02                         Map_e3a3_79: 	dc.b $2
0000B3F4 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B3F9 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B3FE 02                         Map_e3a3_84: 	dc.b $2
0000B3FF EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B404 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B40A 00                         	even
0000B40A 00                         	even
0000B40A                            
0000B40A                            ; ===========================================================================
0000B40A                            ; ---------------------------------------------------------------------------
0000B40A                            ; Object 2F - large moving platforms (MZ)
0000B40A                            ; ---------------------------------------------------------------------------
0000B40A                            
0000B40A                            Obj2F:					; XREF: Obj_Index
0000B40A 7000                       		moveq	#0,d0
0000B40C 1028 0024                  		move.b	$24(a0),d0
0000B410 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B414 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B418                            ; ===========================================================================
0000B418 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B41A 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B41C                            
0000B41C 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B41E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B420 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B422 0140                       		dc.b 1,	$40
0000B424 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B426 0220                       		dc.b 2,	$20
0000B428                            ; ===========================================================================
0000B428                            
0000B428                            Obj2F_Main:				; XREF: Obj2F_Index
0000B428 5428 0024                  		addq.b	#2,$24(a0)
0000B42C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B434 317C C000 0002             		move.w	#$C000,2(a0)
0000B43A 117C 0004 0001             		move.b	#4,1(a0)
0000B440 117C 0005 0018             		move.b	#5,$18(a0)
0000B446 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B44C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B452 7000                       		moveq	#0,d0
0000B454 1028 0028                  		move.b	$28(a0),d0
0000B458 E448                       		lsr.w	#2,d0
0000B45A 0240 001C                  		andi.w	#$1C,d0
0000B45E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B462 3019                       		move.w	(a1)+,d0
0000B464 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B468 214A 0030                  		move.l	a2,$30(a0)
0000B46C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B470 1151 0019                  		move.b	(a1),$19(a0)
0000B474 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B47A 117C 0040 0016             		move.b	#$40,$16(a0)
0000B480 08E8 0004 0001             		bset	#4,1(a0)
0000B486                            
0000B486                            Obj2F_Action:				; XREF: Obj2F_Index
0000B486 6100 0000                  		bsr.w	Obj2F_Types
0000B48A 4A28 0025                  		tst.b	$25(a0)
0000B48E 6700                       		beq.s	Obj2F_Solid
0000B490 7200                       		moveq	#0,d1
0000B492 1228 0019                  		move.b	$19(a0),d1
0000B496 0641 000B                  		addi.w	#$B,d1
0000B49A 6100 C5FC                  		bsr.w	ExitPlatform
0000B49E 0829 0003 0022             		btst	#3,$22(a1)
0000B4A4 6600 0000                  		bne.w	Obj2F_Slope
0000B4A8 4228 0025                  		clr.b	$25(a0)
0000B4AC 6000                       		bra.s	Obj2F_Display
0000B4AE                            ; ===========================================================================
0000B4AE                            
0000B4AE                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B4AE 7200                       		moveq	#0,d1
0000B4B0 1228 0019                  		move.b	$19(a0),d1
0000B4B4 0641 000B                  		addi.w	#$B,d1
0000B4B8 2468 0030                  		movea.l	$30(a0),a2
0000B4BC 3428 0008                  		move.w	8(a0),d2
0000B4C0 6100 D534                  		bsr.w	SlopeObject2
0000B4C4 6000                       		bra.s	Obj2F_Display
0000B4C6                            ; ===========================================================================
0000B4C6                            
0000B4C6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B4C6 7200                       		moveq	#0,d1
0000B4C8 1228 0019                  		move.b	$19(a0),d1
0000B4CC 0641 000B                  		addi.w	#$B,d1
0000B4D0 343C 0020                  		move.w	#$20,d2
0000B4D4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B4DA 6600                       		bne.s	loc_AF8E
0000B4DC 343C 0030                  		move.w	#$30,d2
0000B4E0                            
0000B4E0                            loc_AF8E:
0000B4E0 2468 0030                  		movea.l	$30(a0),a2
0000B4E4 6100 0000                  		bsr.w	SolidObject2F
0000B4E8                            
0000B4E8                            Obj2F_Display:				; XREF: Obj2F_Action
0000B4E8 6100 0000                  		bsr.w	DisplaySprite
0000B4EC 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4F0                            
0000B4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4F0                            
0000B4F0                            
0000B4F0                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4F0 7000                       		moveq	#0,d0
0000B4F2 1028 0028                  		move.b	$28(a0),d0
0000B4F6 0240 0007                  		andi.w	#7,d0
0000B4FA D040                       		add.w	d0,d0
0000B4FC 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B500 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B504                            ; End of function Obj2F_Types
0000B504                            
0000B504                            ; ===========================================================================
0000B504 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B506 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B508 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B50A 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B50C 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B50E 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B510                            ; ===========================================================================
0000B510                            
0000B510                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B510 4E75                       		rts			; type 00 platform doesn't move
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B512 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B516 323C 0020                  		move.w	#$20,d1
0000B51A 6000                       		bra.s	Obj2F_Move
0000B51C                            ; ===========================================================================
0000B51C                            
0000B51C                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B51C 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B520 323C 0030                  		move.w	#$30,d1
0000B524 6000                       		bra.s	Obj2F_Move
0000B526                            ; ===========================================================================
0000B526                            
0000B526                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B526 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B52A 323C 0040                  		move.w	#$40,d1
0000B52E 6000                       		bra.s	Obj2F_Move
0000B530                            ; ===========================================================================
0000B530                            
0000B530                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B530 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B534 323C 0060                  		move.w	#$60,d1
0000B538                            
0000B538                            Obj2F_Move:
0000B538 0828 0003 0028             		btst	#3,$28(a0)
0000B53E 6700                       		beq.s	loc_AFF2
0000B540 4440                       		neg.w	d0
0000B542 D041                       		add.w	d1,d0
0000B544                            
0000B544                            loc_AFF2:
0000B544 3228 002C                  		move.w	$2C(a0),d1
0000B548 9240                       		sub.w	d0,d1
0000B54A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B54E 4E75                       		rts	
0000B550                            ; ===========================================================================
0000B550                            
0000B550                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B550 1028 0034                  		move.b	$34(a0),d0
0000B554 4A28 0025                  		tst.b	$25(a0)
0000B558 6600                       		bne.s	loc_B010
0000B55A 5500                       		subq.b	#2,d0
0000B55C 6400                       		bcc.s	loc_B01C
0000B55E 7000                       		moveq	#0,d0
0000B560 6000                       		bra.s	loc_B01C
0000B562                            ; ===========================================================================
0000B562                            
0000B562                            loc_B010:
0000B562 5800                       		addq.b	#4,d0
0000B564 0C00 0040                  		cmpi.b	#$40,d0
0000B568 6500                       		bcs.s	loc_B01C
0000B56A 103C 0040                  		move.b	#$40,d0
0000B56E                            
0000B56E                            loc_B01C:
0000B56E 1140 0034                  		move.b	d0,$34(a0)
0000B572 4EB9 0000 2C64             		jsr	(CalcSine).l
0000B578 E848                       		lsr.w	#4,d0
0000B57A 3200                       		move.w	d0,d1
0000B57C D068 002C                  		add.w	$2C(a0),d0
0000B580 3140 000C                  		move.w	d0,$C(a0)
0000B584 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B58A 6600                       		bne.s	loc_B07A
0000B58C 4A28 0035                  		tst.b	$35(a0)
0000B590 6600                       		bne.s	loc_B07A
0000B592 117C 0001 0035             		move.b	#1,$35(a0)
0000B598 6100 0000                  		bsr.w	SingleObjLoad2
0000B59C 6600                       		bne.s	loc_B07A
0000B59E 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B5A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B5A8 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B5AE 5069 002C                  		addq.w	#8,$2C(a1)
0000B5B2 5769 002C                  		subq.w	#3,$2C(a1)
0000B5B6 0469 0040 0008             		subi.w	#$40,8(a1)
0000B5BC 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B5C2 2348 0038                  		move.l	a0,$38(a1)
0000B5C6 2448                       		movea.l	a0,a2
0000B5C8 6100                       		bsr.s	sub_B09C
0000B5CA                            
0000B5CA                            loc_B07A:
0000B5CA 7400                       		moveq	#0,d2
0000B5CC 45E8 0036                  		lea	$36(a0),a2
0000B5D0 141A                       		move.b	(a2)+,d2
0000B5D2 5302                       		subq.b	#1,d2
0000B5D4 6500                       		bcs.s	locret_B09A
0000B5D6                            
0000B5D6                            loc_B086:
0000B5D6 7000                       		moveq	#0,d0
0000B5D8 101A                       		move.b	(a2)+,d0
0000B5DA ED48                       		lsl.w	#6,d0
0000B5DC 0640 D000                  		addi.w	#-$3000,d0
0000B5E0 3240                       		movea.w	d0,a1
0000B5E2 3341 003C                  		move.w	d1,$3C(a1)
0000B5E6 51CA FFEE                  		dbf	d2,loc_B086
0000B5EA                            
0000B5EA                            locret_B09A:
0000B5EA 4E75                       		rts	
0000B5EC                            
0000B5EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5EC                            
0000B5EC                            
0000B5EC                            sub_B09C:
0000B5EC 45EA 0036                  		lea	$36(a2),a2
0000B5F0 7000                       		moveq	#0,d0
0000B5F2 1012                       		move.b	(a2),d0
0000B5F4 5212                       		addq.b	#1,(a2)
0000B5F6 45F2 0001                  		lea	1(a2,d0.w),a2
0000B5FA 3009                       		move.w	a1,d0
0000B5FC 0440 D000                  		subi.w	#-$3000,d0
0000B600 EC48                       		lsr.w	#6,d0
0000B602 0240 007F                  		andi.w	#$7F,d0
0000B606 1480                       		move.b	d0,(a2)
0000B608 4E75                       		rts	
0000B60A                            ; End of function sub_B09C
0000B60A                            
0000B60A                            ; ===========================================================================
0000B60A                            
0000B60A                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B60A 4A28 0035                  		tst.b	$35(a0)
0000B60E 6700                       		beq.s	loc_B0C6
0000B610 4A28 0001                  		tst.b	1(a0)
0000B614 6A00                       		bpl.s	Obj2F_DelFlames
0000B616                            
0000B616                            loc_B0C6:
0000B616 3028 002A                  		move.w	$2A(a0),d0
0000B61A 0240 FF80                  		andi.w	#$FF80,d0
0000B61E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B622 0441 0080                  		subi.w	#$80,d1
0000B626 0241 FF80                  		andi.w	#$FF80,d1
0000B62A 9041                       		sub.w	d1,d0
0000B62C 0C40 0280                  		cmpi.w	#$280,d0
0000B630 6200 0000                  		bhi.w	DeleteObject
0000B634 4E75                       		rts	
0000B636                            ; ===========================================================================
0000B636                            
0000B636                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B636 7400                       		moveq	#0,d2
0000B638                            
0000B638                            loc_B0E8:
0000B638 45E8 0036                  		lea	$36(a0),a2
0000B63C 1412                       		move.b	(a2),d2
0000B63E 421A                       		clr.b	(a2)+
0000B640 5302                       		subq.b	#1,d2
0000B642 6500                       		bcs.s	locret_B116
0000B644                            
0000B644                            loc_B0F4:
0000B644 7000                       		moveq	#0,d0
0000B646 1012                       		move.b	(a2),d0
0000B648 421A                       		clr.b	(a2)+
0000B64A ED48                       		lsl.w	#6,d0
0000B64C 0640 D000                  		addi.w	#-$3000,d0
0000B650 3240                       		movea.w	d0,a1
0000B652 6100 0000                  		bsr.w	DeleteObject2
0000B656 51CA FFEC                  		dbf	d2,loc_B0F4
0000B65A 117C 0000 0035             		move.b	#0,$35(a0)
0000B660 117C 0000 0034             		move.b	#0,$34(a0)
0000B666                            
0000B666                            locret_B116:
0000B666 4E75                       		rts	
0000B668                            ; ===========================================================================
0000B668                            ; ---------------------------------------------------------------------------
0000B668                            ; Collision data for large moving platforms (MZ)
0000B668                            ; ---------------------------------------------------------------------------
0000B668                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B6B4                            		even
0000B6B4                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B6E0                            		even
0000B6E0                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B72C                            		even
0000B72C                            ; ===========================================================================
0000B72C                            ; ---------------------------------------------------------------------------
0000B72C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B72C                            ; (appears when	you walk on sinking platforms)
0000B72C                            ; ---------------------------------------------------------------------------
0000B72C                            
0000B72C                            Obj35:					; XREF: Obj_Index
0000B72C 7000                       		moveq	#0,d0
0000B72E 1028 0024                  		move.b	$24(a0),d0
0000B732 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B736 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B73A                            ; ===========================================================================
0000B73A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B73C 0000                       		dc.w loc_B238-Obj35_Index
0000B73E 0000                       		dc.w Obj35_Move-Obj35_Index
0000B740                            ; ===========================================================================
0000B740                            
0000B740                            Obj35_Main:				; XREF: Obj35_Index
0000B740 5428 0024                  		addq.b	#2,$24(a0)
0000B744 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B74C 317C 0345 0002             		move.w	#$345,2(a0)
0000B752 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B758 117C 0004 0001             		move.b	#4,1(a0)
0000B75E 117C 0001 0018             		move.b	#1,$18(a0)
0000B764 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B76A 117C 0008 0019             		move.b	#8,$19(a0)
0000B770 303C 00C8                  		move.w	#$C8,d0
0000B774 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B77A 4A28 0028                  		tst.b	$28(a0)
0000B77E 6700                       		beq.s	loc_B238
0000B780 5428 0024                  		addq.b	#2,$24(a0)
0000B784 6000 0000                  		bra.w	Obj35_Move
0000B788                            ; ===========================================================================
0000B788                            
0000B788                            loc_B238:				; XREF: Obj35_Index
0000B788 2268 0030                  		movea.l	$30(a0),a1
0000B78C 3228 0008                  		move.w	8(a0),d1
0000B790 9268 002A                  		sub.w	$2A(a0),d1
0000B794 0641 000C                  		addi.w	#$C,d1
0000B798 3001                       		move.w	d1,d0
0000B79A E248                       		lsr.w	#1,d0
0000B79C 1031 0000                  		move.b	(a1,d0.w),d0
0000B7A0 4440                       		neg.w	d0
0000B7A2 D068 002C                  		add.w	$2C(a0),d0
0000B7A6 3400                       		move.w	d0,d2
0000B7A8 D068 003C                  		add.w	$3C(a0),d0
0000B7AC 3140 000C                  		move.w	d0,$C(a0)
0000B7B0 0C41 0084                  		cmpi.w	#$84,d1
0000B7B4 6400                       		bcc.s	loc_B2B0
0000B7B6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B7BE 0C41 0080                  		cmpi.w	#$80,d1
0000B7C2 6400                       		bcc.s	loc_B2B0
0000B7C4 2028 0008                  		move.l	8(a0),d0
0000B7C8 0680 0008 0000             		addi.l	#$80000,d0
0000B7CE 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B7D4 6600                       		bne.s	loc_B2B0
0000B7D6 6100 0000                  		bsr.w	SingleObjLoad2
0000B7DA 6600                       		bne.s	loc_B2B0
0000B7DC 12BC 0035                  		move.b	#$35,0(a1)
0000B7E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7E6 3342 002C                  		move.w	d2,$2C(a1)
0000B7EA 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7F0 137C 0001 0028             		move.b	#1,$28(a1)
0000B7F6 2468 0038                  		movea.l	$38(a0),a2
0000B7FA 6100 FDF0                  		bsr.w	sub_B09C
0000B7FE                            
0000B7FE                            loc_B2B0:
0000B7FE 6000                       		bra.s	Obj35_Animate
0000B800                            ; ===========================================================================
0000B800                            
0000B800                            Obj35_Move:				; XREF: Obj35_Index
0000B800 3028 002C                  		move.w	$2C(a0),d0
0000B804 D068 003C                  		add.w	$3C(a0),d0
0000B808 3140 000C                  		move.w	d0,$C(a0)
0000B80C                            
0000B80C                            Obj35_Animate:				; XREF: loc_B238
0000B80C 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B812 6100 F4B4                  		bsr.w	AnimateSprite
0000B816 6000 0000                  		bra.w	DisplaySprite
0000B81A                            ; ===========================================================================
0000B81A                            Ani_obj35:
0000B81A                            	include "_anim\obj35.asm"
0000B81A                            ; ---------------------------------------------------------------------------
0000B81A                            ; Animation script - fireball that sits on the	floor (MZ)
0000B81A                            ; ---------------------------------------------------------------------------
0000B81A 0000                       		dc.w byte_B2CE-Ani_obj35
0000B81C 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B822                            		even
0000B822                            		even
0000B822                            
0000B822                            ; ---------------------------------------------------------------------------
0000B822                            ; Sprite mappings - large moving platforms (MZ)
0000B822                            ; ---------------------------------------------------------------------------
0000B822                            Map_obj2F:
0000B822                            	include "_maps\obj2F.asm"
0000B822                            ; ---------------------------------------------------------------------------
0000B822                            ; Sprite mappings - large moving platforms (MZ)
0000B822                            ; ---------------------------------------------------------------------------
0000B822 0000                       		dc.w byte_B2DA-Map_obj2F
0000B824 0000                       		dc.w byte_B31C-Map_obj2F
0000B826 0000                       		dc.w byte_B34F-Map_obj2F
0000B828 0D                         byte_B2DA:	dc.b $D
0000B829 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B82E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B833 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B838 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B83D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B842 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B847 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B84C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B851 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B856 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B85B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B860 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B865 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B86A 0A                         byte_B31C:	dc.b $A
0000B86B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B870 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B875 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B87A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B87F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B884 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B889 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B88E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B893 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B898 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B89D 06                         byte_B34F:	dc.b 6
0000B89E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B8A3 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B8A8 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B8AD D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B8B2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B8B7 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B8BC                            		even
0000B8BC                            		even
0000B8BC                            
0000B8BC                            ; ---------------------------------------------------------------------------
0000B8BC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B8BC                            ; ---------------------------------------------------------------------------
0000B8BC                            Map_obj14:
0000B8BC                            	include "_maps\obj14.asm"
0000B8BC                            ; --------------------------------------------------------------------------------
0000B8BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B8BC                            ; --------------------------------------------------------------------------------
0000B8BC                            
0000B8BC                            SME_C6wT7:	
0000B8BC 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000B8C0 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000B8C4 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000B8C8 01                         SME_C6wT7_C:	dc.b 1	
0000B8C9 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B8CE 01                         SME_C6wT7_12:	dc.b 1	
0000B8CF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B8D4 02                         SME_C6wT7_18:	dc.b 2	
0000B8D5 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000B8DA E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000B8DF 01                         SME_C6wT7_23:	dc.b 1	
0000B8E0 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B8E5 01                         SME_C6wT7_29:	dc.b 1	
0000B8E6 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B8EB 01                         SME_C6wT7_2F:	dc.b 1	
0000B8EC F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000B8F2 00                         		even
0000B8F2 00                         		even
0000B8F2                            
0000B8F2                            ; ===========================================================================
0000B8F2                            ; ---------------------------------------------------------------------------
0000B8F2                            ; Object 30 - large green glassy blocks	(MZ)
0000B8F2                            ; ---------------------------------------------------------------------------
0000B8F2                            
0000B8F2                            Obj30:					; XREF: Obj_Index
0000B8F2 7000                       		moveq	#0,d0
0000B8F4 1028 0024                  		move.b	$24(a0),d0
0000B8F8 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B8FC 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B900 3028 0008                  		move.w	8(a0),d0
0000B904 0240 FF80                  		andi.w	#$FF80,d0
0000B908 3238 F700                  		move.w	($FFFFF700).w,d1
0000B90C 0441 0080                  		subi.w	#$80,d1
0000B910 0241 FF80                  		andi.w	#$FF80,d1
0000B914 9041                       		sub.w	d1,d0
0000B916 0C40 0280                  		cmpi.w	#$280,d0
0000B91A 6200 0000                  		bhi.w	Obj30_Delete
0000B91E 6000 0000                  		bra.w	DisplaySprite
0000B922                            ; ===========================================================================
0000B922                            
0000B922                            Obj30_Delete:
0000B922 6000 0000                  		bra.w	DeleteObject
0000B926                            ; ===========================================================================
0000B926 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B928 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B92A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B92C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B92E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B930                            
0000B930 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B933 0400 01                    		dc.b 4,	0, 1
0000B936 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B939 0800 01                    		dc.b 8,	0, 1
0000B93C                            ; ===========================================================================
0000B93C                            
0000B93C                            Obj30_Main:				; XREF: Obj30_Index
0000B93C 45F9 0000 B930             		lea	(Obj30_Vars1).l,a2
0000B942 7201                       		moveq	#1,d1
0000B944 117C 0048 0016             		move.b	#$48,$16(a0)
0000B94A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B950 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B952 45F9 0000 B936             		lea	(Obj30_Vars2).l,a2
0000B958 7201                       		moveq	#1,d1
0000B95A 117C 0038 0016             		move.b	#$38,$16(a0)
0000B960                            
0000B960                            loc_B40C:
0000B960 2248                       		movea.l	a0,a1
0000B962 6000                       		bra.s	Obj30_Load	; load main object
0000B964                            ; ===========================================================================
0000B964                            
0000B964                            Obj30_Loop:
0000B964 6100 0000                  		bsr.w	SingleObjLoad2
0000B968 6600                       		bne.s	loc_B480
0000B96A                            
0000B96A                            Obj30_Load:				; XREF: Obj30_Main
0000B96A 135A 0024                  		move.b	(a2)+,$24(a1)
0000B96E 12BC 0030                  		move.b	#$30,0(a1)
0000B972 3368 0008 0008             		move.w	8(a0),8(a1)
0000B978 101A                       		move.b	(a2)+,d0
0000B97A 4880                       		ext.w	d0
0000B97C D068 000C                  		add.w	$C(a0),d0
0000B980 3340 000C                  		move.w	d0,$C(a1)
0000B984 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B98C 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B992 137C 0004 0001             		move.b	#4,1(a1)
0000B998 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B99E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9A4 137C 0020 0019             		move.b	#$20,$19(a1)
0000B9AA 137C 0004 0018             		move.b	#4,$18(a1)
0000B9B0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B9B4 2348 003C                  		move.l	a0,$3C(a1)
0000B9B8 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B9BC                            
0000B9BC 137C 0010 0019             		move.b	#$10,$19(a1)
0000B9C2 137C 0003 0018             		move.b	#3,$18(a1)
0000B9C8 5029 0028                  		addq.b	#8,$28(a1)
0000B9CC 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B9D2                            
0000B9D2                            loc_B480:
0000B9D2 317C 0090 0032             		move.w	#$90,$32(a0)
0000B9D8 08E8 0004 0001             		bset	#4,1(a0)
0000B9DE                            
0000B9DE                            Obj30_Block012:				; XREF: Obj30_Index
0000B9DE 6100 0000                  		bsr.w	Obj30_Types
0000B9E2 323C 002B                  		move.w	#$2B,d1
0000B9E6 343C 0048                  		move.w	#$48,d2
0000B9EA 363C 0049                  		move.w	#$49,d3
0000B9EE 3828 0008                  		move.w	8(a0),d4
0000B9F2 6000 0000                  		bra.w	SolidObject
0000B9F6                            ; ===========================================================================
0000B9F6                            
0000B9F6                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9F6 2268 003C                  		movea.l	$3C(a0),a1
0000B9FA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BA00 6000 0000                  		bra.w	Obj30_Types
0000BA04                            ; ===========================================================================
0000BA04                            
0000BA04                            Obj30_Block34:				; XREF: Obj30_Index
0000BA04 6100 0000                  		bsr.w	Obj30_Types
0000BA08 323C 002B                  		move.w	#$2B,d1
0000BA0C 343C 0038                  		move.w	#$38,d2
0000BA10 363C 0039                  		move.w	#$39,d3
0000BA14 3828 0008                  		move.w	8(a0),d4
0000BA18 6000 0000                  		bra.w	SolidObject
0000BA1C                            ; ===========================================================================
0000BA1C                            
0000BA1C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BA1C 2268 003C                  		movea.l	$3C(a0),a1
0000BA20 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BA26 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BA2C 6000 0002                  		bra.w	*+4
0000BA30                            
0000BA30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA30                            
0000BA30                            
0000BA30                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BA30 7000                       		moveq	#0,d0
0000BA32 1028 0028                  		move.b	$28(a0),d0
0000BA36 0240 0007                  		andi.w	#7,d0
0000BA3A D040                       		add.w	d0,d0
0000BA3C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BA40 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BA44                            ; End of function Obj30_Types
0000BA44                            
0000BA44                            ; ===========================================================================
0000BA44 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BA46 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BA48 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BA4A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BA4C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BA4E                            ; ===========================================================================
0000BA4E                            
0000BA4E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BA4E 4E75                       		rts	
0000BA50                            ; ===========================================================================
0000BA50                            
0000BA50                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BA50 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA54 323C 0040                  		move.w	#$40,d1
0000BA58 6000                       		bra.s	loc_B514
0000BA5A                            ; ===========================================================================
0000BA5A                            
0000BA5A                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA5A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA5E 323C 0040                  		move.w	#$40,d1
0000BA62 4440                       		neg.w	d0
0000BA64 D041                       		add.w	d1,d0
0000BA66                            
0000BA66                            loc_B514:				; XREF: Obj30_Type01
0000BA66 0828 0003 0028             		btst	#3,$28(a0)
0000BA6C 6700                       		beq.s	loc_B526
0000BA6E 4440                       		neg.w	d0
0000BA70 D041                       		add.w	d1,d0
0000BA72 E208                       		lsr.b	#1,d0
0000BA74 0640 0020                  		addi.w	#$20,d0
0000BA78                            
0000BA78                            loc_B526:
0000BA78 6000 0000                  		bra.w	loc_B5EE
0000BA7C                            ; ===========================================================================
0000BA7C                            
0000BA7C                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA7C 0828 0003 0028             		btst	#3,$28(a0)
0000BA82 6700                       		beq.s	loc_B53E
0000BA84 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA88 0440 0010                  		subi.w	#$10,d0
0000BA8C 6000 0000                  		bra.w	loc_B5EE
0000BA90                            ; ===========================================================================
0000BA90                            
0000BA90                            loc_B53E:
0000BA90 0828 0003 0022             		btst	#3,$22(a0)
0000BA96 6600                       		bne.s	loc_B54E
0000BA98 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA9E 6000                       		bra.s	loc_B582
0000BAA0                            ; ===========================================================================
0000BAA0                            
0000BAA0                            loc_B54E:
0000BAA0 4A28 0034                  		tst.b	$34(a0)
0000BAA4 6600                       		bne.s	loc_B582
0000BAA6 117C 0001 0034             		move.b	#1,$34(a0)
0000BAAC 08E8 0000 0035             		bset	#0,$35(a0)
0000BAB2 6700                       		beq.s	loc_B582
0000BAB4 08E8 0007 0034             		bset	#7,$34(a0)
0000BABA 317C 0010 0036             		move.w	#$10,$36(a0)
0000BAC0 117C 000A 0038             		move.b	#$A,$38(a0)
0000BAC6 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BACC 6600                       		bne.s	loc_B582
0000BACE 317C 0040 0036             		move.w	#$40,$36(a0)
0000BAD4                            
0000BAD4                            loc_B582:
0000BAD4 4A28 0034                  		tst.b	$34(a0)
0000BAD8 6A00                       		bpl.s	loc_B5AA
0000BADA 4A28 0038                  		tst.b	$38(a0)
0000BADE 6700                       		beq.s	loc_B594
0000BAE0 5328 0038                  		subq.b	#1,$38(a0)
0000BAE4 6600                       		bne.s	loc_B5AA
0000BAE6                            
0000BAE6                            loc_B594:
0000BAE6 4A68 0032                  		tst.w	$32(a0)
0000BAEA 6700                       		beq.s	loc_B5A4
0000BAEC 5368 0032                  		subq.w	#1,$32(a0)
0000BAF0 5368 0036                  		subq.w	#1,$36(a0)
0000BAF4 6600                       		bne.s	loc_B5AA
0000BAF6                            
0000BAF6                            loc_B5A4:
0000BAF6 08A8 0007 0034             		bclr	#7,$34(a0)
0000BAFC                            
0000BAFC                            loc_B5AA:
0000BAFC 3028 0032                  		move.w	$32(a0),d0
0000BB00 6000                       		bra.s	loc_B5EE
0000BB02                            ; ===========================================================================
0000BB02                            
0000BB02                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BB02 0828 0003 0028             		btst	#3,$28(a0)
0000BB08 6700                       		beq.s	Obj30_ChkSwitch
0000BB0A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB0E 0440 0010                  		subi.w	#$10,d0
0000BB12 6000                       		bra.s	loc_B5EE
0000BB14                            ; ===========================================================================
0000BB14                            
0000BB14                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BB14 4A28 0034                  		tst.b	$34(a0)
0000BB18 6600                       		bne.s	loc_B5E0
0000BB1A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BB1E 7000                       		moveq	#0,d0
0000BB20 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BB24 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BB26 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BB2A 6700                       		beq.s	loc_B5EA	; if not, branch
0000BB2C 117C 0001 0034             		move.b	#1,$34(a0)
0000BB32                            
0000BB32                            loc_B5E0:
0000BB32 4A68 0032                  		tst.w	$32(a0)
0000BB36 6700                       		beq.s	loc_B5EA
0000BB38 5568 0032                  		subq.w	#2,$32(a0)
0000BB3C                            
0000BB3C                            loc_B5EA:
0000BB3C 3028 0032                  		move.w	$32(a0),d0
0000BB40                            
0000BB40                            loc_B5EE:
0000BB40 3228 0030                  		move.w	$30(a0),d1
0000BB44 9240                       		sub.w	d0,d1
0000BB46 3141 000C                  		move.w	d1,$C(a0)
0000BB4A 4E75                       		rts	
0000BB4C                            ; ===========================================================================
0000BB4C                            ; ---------------------------------------------------------------------------
0000BB4C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB4C                            ; ---------------------------------------------------------------------------
0000BB4C                            Map_obj30:
0000BB4C                            	include "_maps\obj30.asm"
0000BB4C                            ; ---------------------------------------------------------------------------
0000BB4C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB4C                            ; ---------------------------------------------------------------------------
0000BB4C 0000                       		dc.w byte_B600-Map_obj30
0000BB4E 0000                       		dc.w byte_B63D-Map_obj30
0000BB50 0000                       		dc.w byte_B648-Map_obj30
0000BB52 0C                         byte_B600:	dc.b $C
0000BB53 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB58 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB5D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB62 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB67 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB6C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB71 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB76 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB7B 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB80 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB85 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB8A 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB8F 02                         byte_B63D:	dc.b 2
0000BB90 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB95 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB9A 0A                         byte_B648:	dc.b $A
0000BB9B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BBA0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BBA5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BBAA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BBAF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BBB4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BBB9 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BBBE 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BBC3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BBC8 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BBCE 00                         		even
0000BBCE 00                         		even
0000BBCE                            
0000BBCE                            ; ===========================================================================
0000BBCE                            ; ---------------------------------------------------------------------------
0000BBCE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BBCE                            ; ---------------------------------------------------------------------------
0000BBCE                            
0000BBCE                            Obj31:					; XREF: Obj_Index
0000BBCE 7000                       		moveq	#0,d0
0000BBD0 1028 0024                  		move.b	$24(a0),d0
0000BBD4 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BBD8 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BBDC                            ; ===========================================================================
0000BBDC 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BBDE 0000                       		dc.w loc_B798-Obj31_Index
0000BBE0 0000                       		dc.w loc_B7FE-Obj31_Index
0000BBE2 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BBE4 0000                       		dc.w loc_B7E2-Obj31_Index
0000BBE6                            
0000BBE6 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BBE8 0100                       		dc.b 1,	0
0000BBEA                            
0000BBEA 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BBED 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BBF0 08CC 03                    		dc.b 8,	$CC, 3
0000BBF3 06F0 02                    		dc.b 6,	$F0, 2
0000BBF6                            
0000BBF6 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BBFA 5000 7800                  		dc.w $5000, $7800
0000BBFE 3800 5800                  		dc.w $3800, $5800
0000BC02 B800                       		dc.w $B800
0000BC04                            ; ===========================================================================
0000BC04                            
0000BC04                            Obj31_Main:				; XREF: Obj31_Index
0000BC04 7000                       		moveq	#0,d0
0000BC06 1028 0028                  		move.b	$28(a0),d0
0000BC0A 6A00                       		bpl.s	loc_B6CE
0000BC0C 0240 007F                  		andi.w	#$7F,d0
0000BC10 D040                       		add.w	d0,d0
0000BC12 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BC16 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BC1A 101A                       		move.b	(a2)+,d0
0000BC1C 1140 0028                  		move.b	d0,$28(a0)
0000BC20                            
0000BC20                            loc_B6CE:
0000BC20 0200 000F                  		andi.b	#$F,d0
0000BC24 D040                       		add.w	d0,d0
0000BC26 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BC2A 4A40                       		tst.w	d0
0000BC2C 6600                       		bne.s	loc_B6E0
0000BC2E 3142 0032                  		move.w	d2,$32(a0)
0000BC32                            
0000BC32                            loc_B6E0:
0000BC32 45F9 0000 BBEA             		lea	(Obj31_Var).l,a2
0000BC38 2248                       		movea.l	a0,a1
0000BC3A 7203                       		moveq	#3,d1
0000BC3C 6000                       		bra.s	Obj31_MakeStomper
0000BC3E                            ; ===========================================================================
0000BC3E                            
0000BC3E                            Obj31_Loop:
0000BC3E 6100 0000                  		bsr.w	SingleObjLoad2
0000BC42 6600 0000                  		bne.w	Obj31_SetSize
0000BC46                            
0000BC46                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BC46 135A 0024                  		move.b	(a2)+,$24(a1)
0000BC4A 12BC 0031                  		move.b	#$31,0(a1)
0000BC4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BC54 101A                       		move.b	(a2)+,d0
0000BC56 4880                       		ext.w	d0
0000BC58 D068 000C                  		add.w	$C(a0),d0
0000BC5C 3340 000C                  		move.w	d0,$C(a1)
0000BC60 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC68 337C 0300 0002             		move.w	#$300,2(a1)
0000BC6E 137C 0004 0001             		move.b	#4,1(a1)
0000BC74 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC7A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC80 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC86 3342 0034                  		move.w	d2,$34(a1)
0000BC8A 137C 0004 0018             		move.b	#4,$18(a1)
0000BC90 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC94 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC9A 6600                       		bne.s	loc_B76A
0000BC9C 5341                       		subq.w	#1,d1
0000BC9E 1028 0028                  		move.b	$28(a0),d0
0000BCA2 0240 00F0                  		andi.w	#$F0,d0
0000BCA6 0C40 0020                  		cmpi.w	#$20,d0
0000BCAA 679A                       		beq.s	Obj31_MakeStomper
0000BCAC 137C 0038 0019             		move.b	#$38,$19(a1)
0000BCB2 137C 0090 0020             		move.b	#$90,$20(a1)
0000BCB8 5241                       		addq.w	#1,d1
0000BCBA                            
0000BCBA                            loc_B76A:
0000BCBA 2348 003C                  		move.l	a0,$3C(a1)
0000BCBE 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BCC2                            
0000BCC2 137C 0003 0018             		move.b	#3,$18(a1)
0000BCC8                            
0000BCC8                            Obj31_SetSize:
0000BCC8 7000                       		moveq	#0,d0
0000BCCA 1028 0028                  		move.b	$28(a0),d0
0000BCCE E648                       		lsr.w	#3,d0
0000BCD0 0200 000E                  		andi.b	#$E,d0
0000BCD4 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BCD8 115A 0019                  		move.b	(a2)+,$19(a0)
0000BCDC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BCE0 6000                       		bra.s	loc_B798
0000BCE2                            ; ===========================================================================
0000BCE2 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BCE4 3009                       		dc.b $30, 9
0000BCE6 100A                       		dc.b $10, $A
0000BCE8                            ; ===========================================================================
0000BCE8                            
0000BCE8                            loc_B798:				; XREF: Obj31_Index
0000BCE8 6100 0000                  		bsr.w	Obj31_Types
0000BCEC 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BCF2 7200                       		moveq	#0,d1
0000BCF4 1228 0019                  		move.b	$19(a0),d1
0000BCF8 0641 000B                  		addi.w	#$B,d1
0000BCFC 343C 000C                  		move.w	#$C,d2
0000BD00 363C 000D                  		move.w	#$D,d3
0000BD04 3828 0008                  		move.w	8(a0),d4
0000BD08 6100 0000                  		bsr.w	SolidObject
0000BD0C 0828 0003 0022             		btst	#3,$22(a0)
0000BD12 6700                       		beq.s	Obj31_Display
0000BD14 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD1A 6400                       		bcc.s	Obj31_Display
0000BD1C 2448                       		movea.l	a0,a2
0000BD1E 41F8 D000                  		lea	($FFFFD000).w,a0
0000BD22 4EB9 0000 0000             		jsr	KillSonic
0000BD28 204A                       		movea.l	a2,a0
0000BD2A                            
0000BD2A                            Obj31_Display:
0000BD2A 6100 0000                  		bsr.w	DisplaySprite
0000BD2E 6000 0000                  		bra.w	Obj31_ChkDel
0000BD32                            ; ===========================================================================
0000BD32                            
0000BD32                            loc_B7E2:				; XREF: Obj31_Index
0000BD32 117C 0080 0016             		move.b	#$80,$16(a0)
0000BD38 08E8 0004 0001             		bset	#4,1(a0)
0000BD3E 2268 003C                  		movea.l	$3C(a0),a1
0000BD42 1029 0032                  		move.b	$32(a1),d0
0000BD46 EA08                       		lsr.b	#5,d0
0000BD48 5600                       		addq.b	#3,d0
0000BD4A 1140 001A                  		move.b	d0,$1A(a0)
0000BD4E                            
0000BD4E                            loc_B7FE:				; XREF: Obj31_Index
0000BD4E 2268 003C                  		movea.l	$3C(a0),a1
0000BD52 7000                       		moveq	#0,d0
0000BD54 1029 0032                  		move.b	$32(a1),d0
0000BD58 D068 0030                  		add.w	$30(a0),d0
0000BD5C 3140 000C                  		move.w	d0,$C(a0)
0000BD60                            
0000BD60                            Obj31_Display2:				; XREF: Obj31_Index
0000BD60 6100 0000                  		bsr.w	DisplaySprite
0000BD64                            
0000BD64                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD64 3028 0008                  		move.w	8(a0),d0
0000BD68 0240 FF80                  		andi.w	#$FF80,d0
0000BD6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD70 0441 0080                  		subi.w	#$80,d1
0000BD74 0241 FF80                  		andi.w	#$FF80,d1
0000BD78 9041                       		sub.w	d1,d0
0000BD7A 0C40 0280                  		cmpi.w	#$280,d0
0000BD7E 6200 0000                  		bhi.w	DeleteObject
0000BD82 4E75                       		rts	
0000BD84                            ; ===========================================================================
0000BD84                            
0000BD84                            Obj31_Types:				; XREF: loc_B798
0000BD84 1028 0028                  		move.b	$28(a0),d0
0000BD88 0240 000F                  		andi.w	#$F,d0
0000BD8C D040                       		add.w	d0,d0
0000BD8E 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD92 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD96                            ; ===========================================================================
0000BD96 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD98 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD9A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD9C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD9E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDA0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BDA2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDA4                            ; ===========================================================================
0000BDA4                            
0000BDA4                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BDA4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BDA8 7000                       		moveq	#0,d0
0000BDAA 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BDAE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BDB2 6700                       		beq.s	loc_B8A8	; if not, branch
0000BDB4 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BDB8 6A00                       		bpl.s	loc_B872
0000BDBA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BDC0 6700                       		beq.s	loc_B8A0
0000BDC2                            
0000BDC2                            loc_B872:
0000BDC2 4A68 0032                  		tst.w	$32(a0)
0000BDC6 6700                       		beq.s	loc_B8A0
0000BDC8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDCC 0200 000F                  		andi.b	#$F,d0
0000BDD0 6600                       		bne.s	loc_B892
0000BDD2 4A28 0001                  		tst.b	1(a0)
0000BDD6 6A00                       		bpl.s	loc_B892
0000BDD8 303C 00C7                  		move.w	#$C7,d0
0000BDDC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDE2                            
0000BDE2                            loc_B892:
0000BDE2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDE8 6400                       		bcc.s	Obj31_Restart
0000BDEA 317C 0000 0032             		move.w	#0,$32(a0)
0000BDF0                            
0000BDF0                            loc_B8A0:
0000BDF0 317C 0000 0012             		move.w	#0,$12(a0)
0000BDF6 6000                       		bra.s	Obj31_Restart
0000BDF8                            ; ===========================================================================
0000BDF8                            
0000BDF8                            loc_B8A8:				; XREF: Obj31_Type00
0000BDF8 3228 0034                  		move.w	$34(a0),d1
0000BDFC B268 0032                  		cmp.w	$32(a0),d1
0000BE00 6700                       		beq.s	Obj31_Restart
0000BE02 3028 0012                  		move.w	$12(a0),d0
0000BE06 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE0C D168 0032                  		add.w	d0,$32(a0)
0000BE10 B268 0032                  		cmp.w	$32(a0),d1
0000BE14 6200                       		bhi.s	Obj31_Restart
0000BE16 3141 0032                  		move.w	d1,$32(a0)
0000BE1A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE20 4A28 0001                  		tst.b	1(a0)
0000BE24 6A00                       		bpl.s	Obj31_Restart
0000BE26 303C 00BD                  		move.w	#$BD,d0
0000BE2A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE30                            
0000BE30                            Obj31_Restart:
0000BE30 7000                       		moveq	#0,d0
0000BE32 1028 0032                  		move.b	$32(a0),d0
0000BE36 D068 0030                  		add.w	$30(a0),d0
0000BE3A 3140 000C                  		move.w	d0,$C(a0)
0000BE3E 4E75                       		rts	
0000BE40                            ; ===========================================================================
0000BE40                            
0000BE40                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BE40 4A68 0036                  		tst.w	$36(a0)
0000BE44 6700                       		beq.s	loc_B938
0000BE46 4A68 0038                  		tst.w	$38(a0)
0000BE4A 6700                       		beq.s	loc_B902
0000BE4C 5368 0038                  		subq.w	#1,$38(a0)
0000BE50 6000                       		bra.s	loc_B97C
0000BE52                            ; ===========================================================================
0000BE52                            
0000BE52                            loc_B902:
0000BE52 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE56 0200 000F                  		andi.b	#$F,d0
0000BE5A 6600                       		bne.s	loc_B91C
0000BE5C 4A28 0001                  		tst.b	1(a0)
0000BE60 6A00                       		bpl.s	loc_B91C
0000BE62 303C 00C7                  		move.w	#$C7,d0
0000BE66 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE6C                            
0000BE6C                            loc_B91C:
0000BE6C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE72 6400                       		bcc.s	loc_B97C
0000BE74 317C 0000 0032             		move.w	#0,$32(a0)
0000BE7A 317C 0000 0012             		move.w	#0,$12(a0)
0000BE80 317C 0000 0036             		move.w	#0,$36(a0)
0000BE86 6000                       		bra.s	loc_B97C
0000BE88                            ; ===========================================================================
0000BE88                            
0000BE88                            loc_B938:				; XREF: Obj31_Type01
0000BE88 3228 0034                  		move.w	$34(a0),d1
0000BE8C B268 0032                  		cmp.w	$32(a0),d1
0000BE90 6700                       		beq.s	loc_B97C
0000BE92 3028 0012                  		move.w	$12(a0),d0
0000BE96 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE9C D168 0032                  		add.w	d0,$32(a0)
0000BEA0 B268 0032                  		cmp.w	$32(a0),d1
0000BEA4 6200                       		bhi.s	loc_B97C
0000BEA6 3141 0032                  		move.w	d1,$32(a0)
0000BEAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BEB0 317C 0001 0036             		move.w	#1,$36(a0)
0000BEB6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BEBC 4A28 0001                  		tst.b	1(a0)
0000BEC0 6A00                       		bpl.s	loc_B97C
0000BEC2 303C 00BD                  		move.w	#$BD,d0
0000BEC6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BECC                            
0000BECC                            loc_B97C:
0000BECC 6000 FF62                  		bra.w	Obj31_Restart
0000BED0                            ; ===========================================================================
0000BED0                            
0000BED0                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BED0 3038 D008                  		move.w	($FFFFD008).w,d0
0000BED4 9068 0008                  		sub.w	8(a0),d0
0000BED8 6400                       		bcc.s	loc_B98C
0000BEDA 4440                       		neg.w	d0
0000BEDC                            
0000BEDC                            loc_B98C:
0000BEDC 0C40 0090                  		cmpi.w	#$90,d0
0000BEE0 6400                       		bcc.s	loc_B996
0000BEE2 5228 0028                  		addq.b	#1,$28(a0)
0000BEE6                            
0000BEE6                            loc_B996:
0000BEE6 6000 FF48                  		bra.w	Obj31_Restart
0000BEEA                            ; ===========================================================================
0000BEEA                            ; ---------------------------------------------------------------------------
0000BEEA                            ; Object 45 - spiked metal block from beta version (MZ)
0000BEEA                            ; ---------------------------------------------------------------------------
0000BEEA                            
0000BEEA                            Obj45:					; XREF: Obj_Index
0000BEEA 7000                       		moveq	#0,d0
0000BEEC 1028 0024                  		move.b	$24(a0),d0
0000BEF0 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BEF4 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEF8                            ; ===========================================================================
0000BEF8 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BEFA 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BEFC 0000                       		dc.w loc_BA8E-Obj45_Index
0000BEFE 0000                       		dc.w Obj45_Display-Obj45_Index
0000BF00 0000                       		dc.w loc_BA7A-Obj45_Index
0000BF02                            
0000BF02 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BF05 04E4 01                    		dc.b	4, $E4,	  1
0000BF08 0834 03                    		dc.b	8, $34,	  3
0000BF0B 0628 02                    		dc.b	6, $28,	  2
0000BF0E                            
0000BF0E 3800                       word_B9BE:	dc.w $3800
0000BF10 A000                       		dc.w -$6000
0000BF12 5000                       		dc.w $5000
0000BF14                            ; ===========================================================================
0000BF14                            
0000BF14                            Obj45_Main:				; XREF: Obj45_Index
0000BF14 7000                       		moveq	#0,d0
0000BF16 1028 0028                  		move.b	$28(a0),d0
0000BF1A D040                       		add.w	d0,d0
0000BF1C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BF20 45F9 0000 BF02             		lea	(Obj45_Var).l,a2
0000BF26 2248                       		movea.l	a0,a1
0000BF28 7203                       		moveq	#3,d1
0000BF2A 6000                       		bra.s	Obj45_Load
0000BF2C                            ; ===========================================================================
0000BF2C                            
0000BF2C                            Obj45_Loop:
0000BF2C 6100 0000                  		bsr.w	SingleObjLoad2
0000BF30 6600                       		bne.s	loc_BA52
0000BF32                            
0000BF32                            Obj45_Load:				; XREF: Obj45_Main
0000BF32 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF36 12BC 0045                  		move.b	#$45,0(a1)
0000BF3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BF40 101A                       		move.b	(a2)+,d0
0000BF42 4880                       		ext.w	d0
0000BF44 D068 0008                  		add.w	8(a0),d0
0000BF48 3340 0008                  		move.w	d0,8(a1)
0000BF4C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BF54 337C 0300 0002             		move.w	#$300,2(a1)
0000BF5A 137C 0004 0001             		move.b	#4,1(a1)
0000BF60 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF66 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF6C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF72 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF78 3342 0034                  		move.w	d2,$34(a1)
0000BF7C 137C 0004 0018             		move.b	#4,$18(a1)
0000BF82 0C12 0001                  		cmpi.b	#1,(a2)
0000BF86 6600                       		bne.s	loc_BA40
0000BF88 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF8E                            
0000BF8E                            loc_BA40:
0000BF8E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF92 2348 003C                  		move.l	a0,$3C(a1)
0000BF96 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF9A                            
0000BF9A 137C 0003 0018             		move.b	#3,$18(a1)
0000BFA0                            
0000BFA0                            loc_BA52:
0000BFA0 117C 0010 0019             		move.b	#$10,$19(a0)
0000BFA6                            
0000BFA6                            Obj45_Solid:				; XREF: Obj45_Index
0000BFA6 3F28 0008                  		move.w	8(a0),-(sp)
0000BFAA 6100 0000                  		bsr.w	Obj45_Move
0000BFAE 323C 0017                  		move.w	#$17,d1
0000BFB2 343C 0020                  		move.w	#$20,d2
0000BFB6 363C 0020                  		move.w	#$20,d3
0000BFBA 381F                       		move.w	(sp)+,d4
0000BFBC 6100 0000                  		bsr.w	SolidObject
0000BFC0 6100 0000                  		bsr.w	DisplaySprite
0000BFC4 6000 0000                  		bra.w	Obj45_ChkDel
0000BFC8                            ; ===========================================================================
0000BFC8                            
0000BFC8                            loc_BA7A:				; XREF: Obj45_Index
0000BFC8 2268 003C                  		movea.l	$3C(a0),a1
0000BFCC 1029 0032                  		move.b	$32(a1),d0
0000BFD0 0600 0010                  		addi.b	#$10,d0
0000BFD4 EA08                       		lsr.b	#5,d0
0000BFD6 5600                       		addq.b	#3,d0
0000BFD8 1140 001A                  		move.b	d0,$1A(a0)
0000BFDC                            
0000BFDC                            loc_BA8E:				; XREF: Obj45_Index
0000BFDC 2268 003C                  		movea.l	$3C(a0),a1
0000BFE0 7000                       		moveq	#0,d0
0000BFE2 1029 0032                  		move.b	$32(a1),d0
0000BFE6 4440                       		neg.w	d0
0000BFE8 D068 0030                  		add.w	$30(a0),d0
0000BFEC 3140 0008                  		move.w	d0,8(a0)
0000BFF0                            
0000BFF0                            Obj45_Display:				; XREF: Obj45_Index
0000BFF0 6100 0000                  		bsr.w	DisplaySprite
0000BFF4                            
0000BFF4                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BFF4 3028 003A                  		move.w	$3A(a0),d0
0000BFF8 0240 FF80                  		andi.w	#$FF80,d0
0000BFFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C000 0441 0080                  		subi.w	#$80,d1
0000C004 0241 FF80                  		andi.w	#$FF80,d1
0000C008 9041                       		sub.w	d1,d0
0000C00A 0C40 0280                  		cmpi.w	#$280,d0
0000C00E 6200 0000                  		bhi.w	DeleteObject
0000C012 4E75                       		rts	
0000C014                            
0000C014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C014                            
0000C014                            
0000C014                            Obj45_Move:				; XREF: Obj45_Solid
0000C014 7000                       		moveq	#0,d0
0000C016 1028 0028                  		move.b	$28(a0),d0
0000C01A D040                       		add.w	d0,d0
0000C01C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C020 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C024                            ; End of function Obj45_Move
0000C024                            
0000C024                            ; ===========================================================================
0000C024 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C026 0000                       		dc.w loc_BADA-off_BAD6
0000C028                            ; ===========================================================================
0000C028                            
0000C028                            loc_BADA:				; XREF: off_BAD6
0000C028 4A68 0036                  		tst.w	$36(a0)
0000C02C 6700                       		beq.s	loc_BB08
0000C02E 4A68 0038                  		tst.w	$38(a0)
0000C032 6700                       		beq.s	loc_BAEC
0000C034 5368 0038                  		subq.w	#1,$38(a0)
0000C038 6000                       		bra.s	loc_BB3C
0000C03A                            ; ===========================================================================
0000C03A                            
0000C03A                            loc_BAEC:
0000C03A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C040 6400                       		bcc.s	loc_BB3C
0000C042 317C 0000 0032             		move.w	#0,$32(a0)
0000C048 317C 0000 0010             		move.w	#0,$10(a0)
0000C04E 317C 0000 0036             		move.w	#0,$36(a0)
0000C054 6000                       		bra.s	loc_BB3C
0000C056                            ; ===========================================================================
0000C056                            
0000C056                            loc_BB08:				; XREF: loc_BADA
0000C056 3228 0034                  		move.w	$34(a0),d1
0000C05A B268 0032                  		cmp.w	$32(a0),d1
0000C05E 6700                       		beq.s	loc_BB3C
0000C060 3028 0010                  		move.w	$10(a0),d0
0000C064 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C06A D168 0032                  		add.w	d0,$32(a0)
0000C06E B268 0032                  		cmp.w	$32(a0),d1
0000C072 6200                       		bhi.s	loc_BB3C
0000C074 3141 0032                  		move.w	d1,$32(a0)
0000C078 317C 0000 0010             		move.w	#0,$10(a0)
0000C07E 317C 0001 0036             		move.w	#1,$36(a0)
0000C084 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C08A                            
0000C08A                            loc_BB3C:
0000C08A 7000                       		moveq	#0,d0
0000C08C 1028 0032                  		move.b	$32(a0),d0
0000C090 4440                       		neg.w	d0
0000C092 D068 0030                  		add.w	$30(a0),d0
0000C096 3140 0008                  		move.w	d0,8(a0)
0000C09A 4E75                       		rts	
0000C09C                            ; ===========================================================================
0000C09C                            ; ---------------------------------------------------------------------------
0000C09C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C09C                            ; ---------------------------------------------------------------------------
0000C09C                            Map_obj31:
0000C09C                            	include "_maps\obj31.asm"
0000C09C                            ; ---------------------------------------------------------------------------
0000C09C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C09C                            ; ---------------------------------------------------------------------------
0000C09C 0000                       		dc.w byte_BB64-Map_obj31
0000C09E 0000                       		dc.w byte_BB7E-Map_obj31
0000C0A0 0000                       		dc.w byte_BB98-Map_obj31
0000C0A2 0000                       		dc.w byte_BB9E-Map_obj31
0000C0A4 0000                       		dc.w byte_BBA9-Map_obj31
0000C0A6 0000                       		dc.w byte_BBBE-Map_obj31
0000C0A8 0000                       		dc.w byte_BBDD-Map_obj31
0000C0AA 0000                       		dc.w byte_BC06-Map_obj31
0000C0AC 0000                       		dc.w byte_BC06-Map_obj31
0000C0AE 0000                       		dc.w byte_BC39-Map_obj31
0000C0B0 0000                       		dc.w byte_BC53-Map_obj31
0000C0B2 05                         byte_BB64:	dc.b 5
0000C0B3 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C0B8 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C0BD EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C0C2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C0C7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C0CC 05                         byte_BB7E:	dc.b 5
0000C0CD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C0D2 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C0D7 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C0DC F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C0E1 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C0E6 01                         byte_BB98:	dc.b 1
0000C0E7 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C0EC 02                         byte_BB9E:	dc.b 2
0000C0ED 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0F7 04                         byte_BBA9:	dc.b 4
0000C0F8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0FD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C102 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C107 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C10C 06                         byte_BBBE:	dc.b 6
0000C10D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C112 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C117 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C11C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C121 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C126 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C12B 08                         byte_BBDD:	dc.b 8
0000C12C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C131 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C136 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C13B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C140 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C145 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C14A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C14F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C154 0A                         byte_BC06:	dc.b $A
0000C155 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C15A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C15F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C164 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C169 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C16E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C173 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C178 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C17D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C182 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C187 05                         byte_BC39:	dc.b 5
0000C188 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C18D F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C192 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C197 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C19C EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C1A1 01                         byte_BC53:	dc.b 1
0000C1A2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C1A8 00                         		even
0000C1A8 00                         		even
0000C1A8                            
0000C1A8                            ; ---------------------------------------------------------------------------
0000C1A8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C1A8                            ; ---------------------------------------------------------------------------
0000C1A8                            Map_obj45:
0000C1A8                            	include "_maps\obj45.asm"
0000C1A8                            ; ---------------------------------------------------------------------------
0000C1A8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C1A8                            ; ---------------------------------------------------------------------------
0000C1A8 0000                       		dc.w byte_BC6C-Map_obj45
0000C1AA 0000                       		dc.w byte_BC7C-Map_obj45
0000C1AC 0000                       		dc.w byte_BC8C-Map_obj45
0000C1AE 0000                       		dc.w byte_BC92-Map_obj45
0000C1B0 0000                       		dc.w byte_BC9D-Map_obj45
0000C1B2 0000                       		dc.w byte_BCB2-Map_obj45
0000C1B4 0000                       		dc.w byte_BCD1-Map_obj45
0000C1B6 0000                       		dc.w byte_BCFA-Map_obj45
0000C1B8 0000                       		dc.w byte_BCFA-Map_obj45
0000C1BA 03                         byte_BC6C:	dc.b 3
0000C1BB E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C1C0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C1C5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C1CA 03                         byte_BC7C:	dc.b 3
0000C1CB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C1D0 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C1D5 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C1DA 01                         byte_BC8C:	dc.b 1
0000C1DB F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C1E0 02                         byte_BC92:	dc.b 2
0000C1E1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1E6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1EB 04                         byte_BC9D:	dc.b 4
0000C1EC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1F1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1F6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1FB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C200 06                         byte_BCB2:	dc.b 6
0000C201 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C206 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C20B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C210 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C215 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C21A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C21F 08                         byte_BCD1:	dc.b 8
0000C220 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C225 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C22A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C22F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C234 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C239 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C23E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C243 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C248 08                         byte_BCFA:	dc.b 8
0000C249 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C24E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C253 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C258 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C25D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C262 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C267 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C26C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C271 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C276 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C27C 00                         		even
0000C27C 00                         		even
0000C27C                            
0000C27C                            ; ===========================================================================
0000C27C                            ; ---------------------------------------------------------------------------
0000C27C                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C27C                            ; ---------------------------------------------------------------------------
0000C27C                            
0000C27C                            Obj32:					; XREF: Obj_Index
0000C27C 7000                       		moveq	#0,d0
0000C27E 1028 0024                  		move.b	$24(a0),d0
0000C282 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C286 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C28A                            ; ===========================================================================
0000C28A 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C28C 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C28E                            ; ===========================================================================
0000C28E                            
0000C28E                            Obj32_Main:				; XREF: Obj32_Index
0000C28E 5428 0024                  		addq.b	#2,$24(a0)
0000C292 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C29A 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C2A0 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C2A6 6700                       		beq.s	loc_BD60
0000C2A8 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C2AE                            
0000C2AE                            loc_BD60:
0000C2AE 117C 0004 0001             		move.b	#4,1(a0)
0000C2B4 117C 0010 0019             		move.b	#$10,$19(a0)
0000C2BA 117C 0004 0018             		move.b	#4,$18(a0)
0000C2C0 5668 000C                  		addq.w	#3,$C(a0)
0000C2C4                            
0000C2C4                            Obj32_Pressed:				; XREF: Obj32_Index
0000C2C4 4A28 0001                  		tst.b	1(a0)
0000C2C8 6A00                       		bpl.s	Obj32_Display
0000C2CA 323C 001B                  		move.w	#$1B,d1
0000C2CE 343C 0005                  		move.w	#5,d2
0000C2D2 363C 0005                  		move.w	#5,d3
0000C2D6 3828 0008                  		move.w	8(a0),d4
0000C2DA 6100 0000                  		bsr.w	SolidObject
0000C2DE 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C2E4 1028 0028                  		move.b	$28(a0),d0
0000C2E8 0240 000F                  		andi.w	#$F,d0
0000C2EC 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C2F0 47F3 0000                  		lea	(a3,d0.w),a3
0000C2F4 7600                       		moveq	#0,d3
0000C2F6 0828 0006 0028             		btst	#6,$28(a0)
0000C2FC 6700                       		beq.s	loc_BDB2
0000C2FE 7607                       		moveq	#7,d3
0000C300                            
0000C300                            loc_BDB2:
0000C300 4A28 0028                  		tst.b	$28(a0)
0000C304 6A00                       		bpl.s	loc_BDBE
0000C306 6100 0000                  		bsr.w	Obj32_MZBlock
0000C30A 6600                       		bne.s	loc_BDC8
0000C30C                            
0000C30C                            loc_BDBE:
0000C30C 4A28 0025                  		tst.b	$25(a0)
0000C310 6600                       		bne.s	loc_BDC8
0000C312 0793                       		bclr	d3,(a3)
0000C314 6000                       		bra.s	loc_BDDE
0000C316                            ; ===========================================================================
0000C316                            
0000C316                            loc_BDC8:
0000C316 4A13                       		tst.b	(a3)
0000C318 6600                       		bne.s	loc_BDD6
0000C31A 303C 00CD                  		move.w	#$CD,d0
0000C31E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C324                            
0000C324                            loc_BDD6:
0000C324 07D3                       		bset	d3,(a3)
0000C326 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C32C                            
0000C32C                            loc_BDDE:
0000C32C 0828 0005 0028             		btst	#5,$28(a0)
0000C332 6700                       		beq.s	Obj32_Display
0000C334 5328 001E                  		subq.b	#1,$1E(a0)
0000C338 6A00                       		bpl.s	Obj32_Display
0000C33A 117C 0007 001E             		move.b	#7,$1E(a0)
0000C340 0868 0001 001A             		bchg	#1,$1A(a0)
0000C346                            
0000C346                            Obj32_Display:
0000C346 6100 0000                  		bsr.w	DisplaySprite
0000C34A 3028 0008                  		move.w	8(a0),d0
0000C34E 0240 FF80                  		andi.w	#$FF80,d0
0000C352 3238 F700                  		move.w	($FFFFF700).w,d1
0000C356 0441 0080                  		subi.w	#$80,d1
0000C35A 0241 FF80                  		andi.w	#$FF80,d1
0000C35E 9041                       		sub.w	d1,d0
0000C360 0C40 0280                  		cmpi.w	#$280,d0
0000C364 6200 0000                  		bhi.w	Obj32_Delete
0000C368 4E75                       		rts	
0000C36A                            ; ===========================================================================
0000C36A                            
0000C36A                            Obj32_Delete:
0000C36A 6100 0000                  		bsr.w	DeleteObject
0000C36E 4E75                       		rts	
0000C370                            
0000C370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C370                            
0000C370                            
0000C370                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C370 3F03                       		move.w	d3,-(sp)
0000C372 3428 0008                  		move.w	8(a0),d2
0000C376 3628 000C                  		move.w	$C(a0),d3
0000C37A 0442 0010                  		subi.w	#$10,d2
0000C37E 5143                       		subq.w	#8,d3
0000C380 383C 0020                  		move.w	#$20,d4
0000C384 3A3C 0010                  		move.w	#$10,d5
0000C388 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C38C 3C3C 005F                  		move.w	#$5F,d6
0000C390                            
0000C390                            Obj32_MZLoop:
0000C390 4A29 0001                  		tst.b	1(a1)
0000C394 6A00                       		bpl.s	loc_BE4E
0000C396 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C39A 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C39C                            
0000C39C                            loc_BE4E:
0000C39C 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C3A0 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C3A4                            
0000C3A4 361F                       		move.w	(sp)+,d3
0000C3A6 7000                       		moveq	#0,d0
0000C3A8                            
0000C3A8                            locret_BE5A:
0000C3A8 4E75                       		rts	
0000C3AA                            ; ===========================================================================
0000C3AA 1010                       Obj32_MZData:	dc.b $10, $10
0000C3AC                            ; ===========================================================================
0000C3AC                            
0000C3AC                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C3AC 7001                       		moveq	#1,d0
0000C3AE 0240 003F                  		andi.w	#$3F,d0
0000C3B2 D040                       		add.w	d0,d0
0000C3B4 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C3B8 121A                       		move.b	(a2)+,d1
0000C3BA 4881                       		ext.w	d1
0000C3BC 3029 0008                  		move.w	8(a1),d0
0000C3C0 9041                       		sub.w	d1,d0
0000C3C2 9042                       		sub.w	d2,d0
0000C3C4 6400                       		bcc.s	loc_BE80
0000C3C6 D241                       		add.w	d1,d1
0000C3C8 D041                       		add.w	d1,d0
0000C3CA 6500                       		bcs.s	loc_BE84
0000C3CC 60CE                       		bra.s	loc_BE4E
0000C3CE                            ; ===========================================================================
0000C3CE                            
0000C3CE                            loc_BE80:
0000C3CE B044                       		cmp.w	d4,d0
0000C3D0 62CA                       		bhi.s	loc_BE4E
0000C3D2                            
0000C3D2                            loc_BE84:
0000C3D2 121A                       		move.b	(a2)+,d1
0000C3D4 4881                       		ext.w	d1
0000C3D6 3029 000C                  		move.w	$C(a1),d0
0000C3DA 9041                       		sub.w	d1,d0
0000C3DC 9043                       		sub.w	d3,d0
0000C3DE 6400                       		bcc.s	loc_BE9A
0000C3E0 D241                       		add.w	d1,d1
0000C3E2 D041                       		add.w	d1,d0
0000C3E4 6500                       		bcs.s	loc_BE9E
0000C3E6 60B4                       		bra.s	loc_BE4E
0000C3E8                            ; ===========================================================================
0000C3E8                            
0000C3E8                            loc_BE9A:
0000C3E8 B045                       		cmp.w	d5,d0
0000C3EA 62B0                       		bhi.s	loc_BE4E
0000C3EC                            
0000C3EC                            loc_BE9E:
0000C3EC 361F                       		move.w	(sp)+,d3
0000C3EE 7001                       		moveq	#1,d0
0000C3F0 4E75                       		rts	
0000C3F2                            ; End of function Obj32_MZBlock
0000C3F2                            
0000C3F2                            ; ===========================================================================
0000C3F2                            ; ---------------------------------------------------------------------------
0000C3F2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3F2                            ; ---------------------------------------------------------------------------
0000C3F2                            Map_obj32:
0000C3F2                            	include "_maps\obj32.asm"
0000C3F2                            ; ---------------------------------------------------------------------------
0000C3F2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3F2                            ; ---------------------------------------------------------------------------
0000C3F2 0000                       		dc.w byte_BEAC-Map_obj32
0000C3F4 0000                       		dc.w byte_BEB7-Map_obj32
0000C3F6 0000                       		dc.w byte_BEC2-Map_obj32
0000C3F8 0000                       		dc.w byte_BEB7-Map_obj32
0000C3FA 02                         byte_BEAC:	dc.b 2
0000C3FB F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C400 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C405 02                         byte_BEB7:	dc.b 2
0000C406 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C40B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C410 02                         byte_BEC2:	dc.b 2
0000C411 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C416 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C41B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C420                            		even
0000C420                            		even
0000C420                            
0000C420                            ; ===========================================================================
0000C420                            ; ---------------------------------------------------------------------------
0000C420                            ; Object 33 - pushable blocks (MZ, LZ)
0000C420                            ; ---------------------------------------------------------------------------
0000C420                            
0000C420                            Obj33:					; XREF: Obj_Index
0000C420 7000                       		moveq	#0,d0
0000C422 1028 0024                  		move.b	$24(a0),d0
0000C426 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C42A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C42E                            ; ===========================================================================
0000C42E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C430 0000                       		dc.w loc_BF6E-Obj33_Index
0000C432 0000                       		dc.w loc_C02C-Obj33_Index
0000C434                            
0000C434 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C436 4001                       		dc.b $40, 1
0000C438                            ; ===========================================================================
0000C438                            
0000C438                            Obj33_Main:				; XREF: Obj33_Index
0000C438 5428 0024                  		addq.b	#2,$24(a0)
0000C43C 117C 000F 0016             		move.b	#$F,$16(a0)
0000C442 117C 000F 0017             		move.b	#$F,$17(a0)
0000C448 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C450 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C456 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C45C 6600                       		bne.s	loc_BF16
0000C45E 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C464                            
0000C464                            loc_BF16:
0000C464 117C 0004 0001             		move.b	#4,1(a0)
0000C46A 117C 0003 0018             		move.b	#3,$18(a0)
0000C470 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C476 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C47C 7000                       		moveq	#0,d0
0000C47E 1028 0028                  		move.b	$28(a0),d0
0000C482 D040                       		add.w	d0,d0
0000C484 0240 000E                  		andi.w	#$E,d0
0000C488 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C48C 115A 0019                  		move.b	(a2)+,$19(a0)
0000C490 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C494 4A28 0028                  		tst.b	$28(a0)
0000C498 6700                       		beq.s	Obj33_ChkGone
0000C49A 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C4A0                            
0000C4A0                            Obj33_ChkGone:
0000C4A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4A4 7000                       		moveq	#0,d0
0000C4A6 1028 0023                  		move.b	$23(a0),d0
0000C4AA 6700                       		beq.s	loc_BF6E
0000C4AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C4B2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C4B8 6600 0000                  		bne.w	DeleteObject
0000C4BC                            
0000C4BC                            loc_BF6E:				; XREF: Obj33_Index
0000C4BC 4A28 0032                  		tst.b	$32(a0)
0000C4C0 6600 0000                  		bne.w	loc_C046
0000C4C4 7200                       		moveq	#0,d1
0000C4C6 1228 0019                  		move.b	$19(a0),d1
0000C4CA 0641 000B                  		addi.w	#$B,d1
0000C4CE 343C 0010                  		move.w	#$10,d2
0000C4D2 363C 0011                  		move.w	#$11,d3
0000C4D6 3828 0008                  		move.w	8(a0),d4
0000C4DA 6100 0000                  		bsr.w	loc_C186
0000C4DE 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C4E4 6600                       		bne.s	loc_BFC6	; if not, branch
0000C4E6 08A8 0007 0028             		bclr	#7,$28(a0)
0000C4EC 3028 0008                  		move.w	8(a0),d0
0000C4F0 0C40 0A20                  		cmpi.w	#$A20,d0
0000C4F4 6500                       		bcs.s	loc_BFC6
0000C4F6 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C4FA 6400                       		bcc.s	loc_BFC6
0000C4FC 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C500 0440 001C                  		subi.w	#$1C,d0
0000C504 3140 000C                  		move.w	d0,$C(a0)
0000C508 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C50E 08E8 0007 0028             		bset	#7,$28(a0)
0000C514                            
0000C514                            loc_BFC6:
0000C514 3028 0008                  		move.w	8(a0),d0
0000C518 0240 FF80                  		andi.w	#$FF80,d0
0000C51C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C520 0441 0080                  		subi.w	#$80,d1
0000C524 0241 FF80                  		andi.w	#$FF80,d1
0000C528 9041                       		sub.w	d1,d0
0000C52A 0C40 0280                  		cmpi.w	#$280,d0
0000C52E 6200                       		bhi.s	loc_BFE6
0000C530 6000 0000                  		bra.w	DisplaySprite
0000C534                            ; ===========================================================================
0000C534                            
0000C534                            loc_BFE6:
0000C534 3028 0034                  		move.w	$34(a0),d0
0000C538 0240 FF80                  		andi.w	#$FF80,d0
0000C53C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C540 0441 0080                  		subi.w	#$80,d1
0000C544 0241 FF80                  		andi.w	#$FF80,d1
0000C548 9041                       		sub.w	d1,d0
0000C54A 0C40 0280                  		cmpi.w	#$280,d0
0000C54E 6200                       		bhi.s	loc_C016
0000C550 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C556 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C55C 117C 0004 0024             		move.b	#4,$24(a0)
0000C562 6000                       		bra.s	loc_C02C
0000C564                            ; ===========================================================================
0000C564                            
0000C564                            loc_C016:
0000C564 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C568 7000                       		moveq	#0,d0
0000C56A 1028 0023                  		move.b	$23(a0),d0
0000C56E 6700                       		beq.s	loc_C028
0000C570 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C576                            
0000C576                            loc_C028:
0000C576 6000 0000                  		bra.w	DeleteObject
0000C57A                            ; ===========================================================================
0000C57A                            
0000C57A                            loc_C02C:				; XREF: Obj33_Index
0000C57A 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C57E 6700                       		beq.s	locret_C044
0000C580 117C 0002 0024             		move.b	#2,$24(a0)
0000C586 4228 0032                  		clr.b	$32(a0)
0000C58A 4268 0010                  		clr.w	$10(a0)
0000C58E 4268 0012                  		clr.w	$12(a0)
0000C592                            
0000C592                            locret_C044:
0000C592 4E75                       		rts	
0000C594                            ; ===========================================================================
0000C594                            
0000C594                            loc_C046:				; XREF: loc_BF6E
0000C594 3F28 0008                  		move.w	8(a0),-(sp)
0000C598 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C59E 6400                       		bcc.s	loc_C056
0000C5A0 6100 0000                  		bsr.w	SpeedToPos
0000C5A4                            
0000C5A4                            loc_C056:
0000C5A4 0828 0001 0022             		btst	#1,$22(a0)
0000C5AA 6700                       		beq.s	loc_C0A0
0000C5AC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C5B2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C5B8 4A41                       		tst.w	d1
0000C5BA 6A00 0000                  		bpl.w	loc_C09E
0000C5BE D368 000C                  		add.w	d1,$C(a0)
0000C5C2 4268 0012                  		clr.w	$12(a0)
0000C5C6 08A8 0001 0022             		bclr	#1,$22(a0)
0000C5CC 3011                       		move.w	(a1),d0
0000C5CE 0240 03FF                  		andi.w	#$3FF,d0
0000C5D2 0C40 016A                  		cmpi.w	#$16A,d0
0000C5D6 6500                       		bcs.s	loc_C09E
0000C5D8 3028 0030                  		move.w	$30(a0),d0
0000C5DC E640                       		asr.w	#3,d0
0000C5DE 3140 0010                  		move.w	d0,$10(a0)
0000C5E2 117C 0001 0032             		move.b	#1,$32(a0)
0000C5E8 4268 000E                  		clr.w	$E(a0)
0000C5EC                            
0000C5EC                            loc_C09E:
0000C5EC 6000                       		bra.s	loc_C0E6
0000C5EE                            ; ===========================================================================
0000C5EE                            
0000C5EE                            loc_C0A0:
0000C5EE 4A68 0010                  		tst.w	$10(a0)
0000C5F2 6700 0000                  		beq.w	loc_C0D6
0000C5F6 6B00                       		bmi.s	loc_C0BC
0000C5F8 7600                       		moveq	#0,d3
0000C5FA 1628 0019                  		move.b	$19(a0),d3
0000C5FE 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C604 4A41                       		tst.w	d1		; has block touched a wall?
0000C606 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C608 6000                       		bra.s	loc_C0E6
0000C60A                            ; ===========================================================================
0000C60A                            
0000C60A                            loc_C0BC:
0000C60A 7600                       		moveq	#0,d3
0000C60C 1628 0019                  		move.b	$19(a0),d3
0000C610 4643                       		not.w	d3
0000C612 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C618 4A41                       		tst.w	d1		; has block touched a wall?
0000C61A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C61C 6000                       		bra.s	loc_C0E6
0000C61E                            ; ===========================================================================
0000C61E                            
0000C61E                            Obj33_StopPush:
0000C61E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C622 6000                       		bra.s	loc_C0E6
0000C624                            ; ===========================================================================
0000C624                            
0000C624                            loc_C0D6:
0000C624 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C62C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C632 6400                       		bcc.s	loc_C104
0000C634                            
0000C634                            loc_C0E6:
0000C634 7200                       		moveq	#0,d1
0000C636 1228 0019                  		move.b	$19(a0),d1
0000C63A 0641 000B                  		addi.w	#$B,d1
0000C63E 343C 0010                  		move.w	#$10,d2
0000C642 363C 0011                  		move.w	#$11,d3
0000C646 381F                       		move.w	(sp)+,d4
0000C648 6100 0000                  		bsr.w	loc_C186
0000C64C 6100                       		bsr.s	Obj33_ChkLava
0000C64E 6000 FEC4                  		bra.w	loc_BFC6
0000C652                            ; ===========================================================================
0000C652                            
0000C652                            loc_C104:
0000C652 381F                       		move.w	(sp)+,d4
0000C654 43F8 D000                  		lea	($FFFFD000).w,a1
0000C658 08A9 0003 0022             		bclr	#3,$22(a1)
0000C65E 08A8 0003 0022             		bclr	#3,$22(a0)
0000C664 6000 FECE                  		bra.w	loc_BFE6
0000C668                            ; ===========================================================================
0000C668                            
0000C668                            Obj33_ChkLava:
0000C668 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C66E 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C670 343C FFE0                  		move.w	#-$20,d2
0000C674 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C67A 6700                       		beq.s	Obj33_LoadLava
0000C67C 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C682 6700                       		beq.s	Obj33_LoadLava
0000C684 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C68A 6700                       		beq.s	Obj33_LoadLava
0000C68C 4E75                       		rts	
0000C68E                            ; ===========================================================================
0000C68E                            
0000C68E                            Obj33_ChkLava2:
0000C68E 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C694 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C696 343C 0020                  		move.w	#$20,d2
0000C69A 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C6A0 6700                       		beq.s	Obj33_LoadLava
0000C6A2 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C6A8 6700                       		beq.s	Obj33_LoadLava
0000C6AA                            
0000C6AA                            Obj33_NoLava:
0000C6AA 4E75                       		rts	
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            Obj33_LoadLava:
0000C6AC 6100 0000                  		bsr.w	SingleObjLoad
0000C6B0 6600                       		bne.s	locret_C184
0000C6B2 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C6B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6BC D569 0008                  		add.w	d2,8(a1)
0000C6C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C6C6 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C6CC 2348 003C                  		move.l	a0,$3C(a1)
0000C6D0                            
0000C6D0                            locret_C184:
0000C6D0 4E75                       		rts	
0000C6D2                            ; ===========================================================================
0000C6D2                            
0000C6D2                            loc_C186:				; XREF: loc_BF6E
0000C6D2 1028 0025                  		move.b	$25(a0),d0
0000C6D6 6700 0000                  		beq.w	loc_C218
0000C6DA 5500                       		subq.b	#2,d0
0000C6DC 6600                       		bne.s	loc_C1AA
0000C6DE 6100 B3B8                  		bsr.w	ExitPlatform
0000C6E2 0829 0003 0022             		btst	#3,$22(a1)
0000C6E8 6600                       		bne.s	loc_C1A4
0000C6EA 4228 0025                  		clr.b	$25(a0)
0000C6EE 4E75                       		rts	
0000C6F0                            ; ===========================================================================
0000C6F0                            
0000C6F0                            loc_C1A4:
0000C6F0 3404                       		move.w	d4,d2
0000C6F2 6000 B902                  		bra.w	MvSonicOnPtfm
0000C6F6                            ; ===========================================================================
0000C6F6                            
0000C6F6                            loc_C1AA:
0000C6F6 5500                       		subq.b	#2,d0
0000C6F8 6600                       		bne.s	loc_C1F2
0000C6FA 6100 0000                  		bsr.w	SpeedToPos
0000C6FE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C704 4EB9 0000 0000             		jsr	ObjHitFloor
0000C70A 4A41                       		tst.w	d1
0000C70C 6A00 0000                  		bpl.w	locret_C1F0
0000C710 D368 000C                  		add.w	d1,$C(a0)
0000C714 4268 0012                  		clr.w	$12(a0)
0000C718 4228 0025                  		clr.b	$25(a0)
0000C71C 3011                       		move.w	(a1),d0
0000C71E 0240 03FF                  		andi.w	#$3FF,d0
0000C722 0C40 016A                  		cmpi.w	#$16A,d0
0000C726 6500                       		bcs.s	locret_C1F0
0000C728 3028 0030                  		move.w	$30(a0),d0
0000C72C E640                       		asr.w	#3,d0
0000C72E 3140 0010                  		move.w	d0,$10(a0)
0000C732 117C 0001 0032             		move.b	#1,$32(a0)
0000C738 4268 000E                  		clr.w	$E(a0)
0000C73C                            
0000C73C                            locret_C1F0:
0000C73C 4E75                       		rts	
0000C73E                            ; ===========================================================================
0000C73E                            
0000C73E                            loc_C1F2:
0000C73E 6100 0000                  		bsr.w	SpeedToPos
0000C742 3028 0008                  		move.w	8(a0),d0
0000C746 0240 000C                  		andi.w	#$C,d0
0000C74A 6600 0000                  		bne.w	locret_C2E4
0000C74E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C754 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C75A 4268 0010                  		clr.w	$10(a0)
0000C75E 5528 0025                  		subq.b	#2,$25(a0)
0000C762 4E75                       		rts	
0000C764                            ; ===========================================================================
0000C764                            
0000C764                            loc_C218:
0000C764 6100 0000                  		bsr.w	loc_FAC8
0000C768 4A44                       		tst.w	d4
0000C76A 6700 0000                  		beq.w	locret_C2E4
0000C76E 6B00 0000                  		bmi.w	locret_C2E4
0000C772 4A28 0032                  		tst.b	$32(a0)
0000C776 6700                       		beq.s	loc_C230
0000C778 6000 0000                  		bra.w	locret_C2E4
0000C77C                            ; ===========================================================================
0000C77C                            
0000C77C                            loc_C230:
0000C77C 4A40                       		tst.w	d0
0000C77E 6700 0000                  		beq.w	locret_C2E4
0000C782 6B00                       		bmi.s	loc_C268
0000C784 0829 0000 0022             		btst	#0,$22(a1)
0000C78A 6600 0000                  		bne.w	locret_C2E4
0000C78E 3F00                       		move.w	d0,-(sp)
0000C790 7600                       		moveq	#0,d3
0000C792 1628 0019                  		move.b	$19(a0),d3
0000C796 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C79C 301F                       		move.w	(sp)+,d0
0000C79E 4A41                       		tst.w	d1
0000C7A0 6B00 0000                  		bmi.w	locret_C2E4
0000C7A4 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C7AC 7001                       		moveq	#1,d0
0000C7AE 323C 0040                  		move.w	#$40,d1
0000C7B2 6000                       		bra.s	loc_C294
0000C7B4                            ; ===========================================================================
0000C7B4                            
0000C7B4                            loc_C268:
0000C7B4 0829 0000 0022             		btst	#0,$22(a1)
0000C7BA 6700                       		beq.s	locret_C2E4
0000C7BC 3F00                       		move.w	d0,-(sp)
0000C7BE 7600                       		moveq	#0,d3
0000C7C0 1628 0019                  		move.b	$19(a0),d3
0000C7C4 4643                       		not.w	d3
0000C7C6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C7CC 301F                       		move.w	(sp)+,d0
0000C7CE 4A41                       		tst.w	d1
0000C7D0 6B00                       		bmi.s	locret_C2E4
0000C7D2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C7DA 70FF                       		moveq	#-1,d0
0000C7DC 323C FFC0                  		move.w	#-$40,d1
0000C7E0                            
0000C7E0                            loc_C294:
0000C7E0 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7E4 D169 0008                  		add.w	d0,8(a1)
0000C7E8 3341 0014                  		move.w	d1,$14(a1)
0000C7EC 337C 0000 0010             		move.w	#0,$10(a1)
0000C7F2 3F00                       		move.w	d0,-(sp)
0000C7F4 303C 00A7                  		move.w	#$A7,d0
0000C7F8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C7FE 301F                       		move.w	(sp)+,d0
0000C800 4A28 0028                  		tst.b	$28(a0)
0000C804 6B00                       		bmi.s	locret_C2E4
0000C806 3F00                       		move.w	d0,-(sp)
0000C808 4EB9 0000 0000             		jsr	ObjHitFloor
0000C80E 301F                       		move.w	(sp)+,d0
0000C810 0C41 0004                  		cmpi.w	#4,d1
0000C814 6F00                       		ble.s	loc_C2E0
0000C816 317C 0400 0010             		move.w	#$400,$10(a0)
0000C81C 4A40                       		tst.w	d0
0000C81E 6A00                       		bpl.s	loc_C2D8
0000C820 4468 0010                  		neg.w	$10(a0)
0000C824                            
0000C824                            loc_C2D8:
0000C824 117C 0006 0025             		move.b	#6,$25(a0)
0000C82A 6000                       		bra.s	locret_C2E4
0000C82C                            ; ===========================================================================
0000C82C                            
0000C82C                            loc_C2E0:
0000C82C D368 000C                  		add.w	d1,$C(a0)
0000C830                            
0000C830                            locret_C2E4:
0000C830 4E75                       		rts	
0000C832                            ; ===========================================================================
0000C832                            ; ---------------------------------------------------------------------------
0000C832                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C832                            ; ---------------------------------------------------------------------------
0000C832                            Map_obj33:
0000C832                            	include "_maps\obj33.asm"
0000C832                            ; ---------------------------------------------------------------------------
0000C832                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C832                            ; ---------------------------------------------------------------------------
0000C832 0000                       		dc.w byte_C2EA-Map_obj33
0000C834 0000                       		dc.w byte_C2F0-Map_obj33
0000C836 01                         byte_C2EA:	dc.b 1
0000C837 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C83C 04                         byte_C2F0:	dc.b 4
0000C83D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C842 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C847 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C84C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C852 00                         		even
0000C852 00                         		even
0000C852                            
0000C852                            ; ===========================================================================
0000C852                            ; ---------------------------------------------------------------------------
0000C852                            ; Object 34 - zone title cards
0000C852                            ; ---------------------------------------------------------------------------
0000C852                            
0000C852                            Obj34:					; XREF: Obj_Index
0000C852 7000                       		moveq	#0,d0
0000C854 1028 0024                  		move.b	$24(a0),d0
0000C858 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C85C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C860                            ; ===========================================================================
0000C860 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C862 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C864 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C866 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C868                            ; ===========================================================================
0000C868                            
0000C868                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C868 2248                       		movea.l	a0,a1
0000C86A 7000                       		moveq	#0,d0
0000C86C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C870 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C876 6600                       		bne.s	Obj34_CheckFZ
0000C878 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C87A                            
0000C87A                            Obj34_CheckFZ:
0000C87A 3400                       		move.w	d0,d2
0000C87C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C882 6600                       		bne.s	Obj34_LoadConfig
0000C884 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C886 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C888                            
0000C888                            Obj34_LoadConfig:
0000C888 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C88E E948                       		lsl.w	#4,d0
0000C890 D6C0                       		adda.w	d0,a3
0000C892 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C898 7203                       		moveq	#3,d1
0000C89A                            
0000C89A                            Obj34_Loop:
0000C89A 12BC 0034                  		move.b	#$34,0(a1)
0000C89E 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C8A2 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C8A6 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C8AA 335A 000A                  		move.w	(a2)+,$A(a1)
0000C8AE 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8B2 101A                       		move.b	(a2)+,d0
0000C8B4 6600                       		bne.s	Obj34_ActNumber
0000C8B6 1002                       		move.b	d2,d0
0000C8B8                            
0000C8B8                            Obj34_ActNumber:
0000C8B8 0C00 0007                  		cmpi.b	#7,d0
0000C8BC 6600                       		bne.s	Obj34_MakeSprite
0000C8BE D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C8C2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C8C8 6600                       		bne.s	Obj34_MakeSprite
0000C8CA 5300                       		subq.b	#1,d0
0000C8CC                            
0000C8CC                            Obj34_MakeSprite:
0000C8CC 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C8D0 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C8D8 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8DE 137C 0078 0019             		move.b	#$78,$19(a1)
0000C8E4 137C 0000 0001             		move.b	#0,1(a1)
0000C8EA 137C 0000 0018             		move.b	#0,$18(a1)
0000C8F0 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8F6 43E9 0040                  		lea	$40(a1),a1	; next object
0000C8FA 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C8FE                            
0000C8FE                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C8FE 7210                       		moveq	#$10,d1		; set horizontal speed
0000C900 3028 0030                  		move.w	$30(a0),d0
0000C904 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C908 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C90A 6C00                       		bge.s	Obj34_Move
0000C90C 4441                       		neg.w	d1
0000C90E                            
0000C90E                            Obj34_Move:
0000C90E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C912                            
0000C912                            loc_C3C8:
0000C912 3028 0008                  		move.w	8(a0),d0
0000C916 6B00                       		bmi.s	locret_C3D8
0000C918 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C91C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C91E 6000 0000                  		bra.w	DisplaySprite
0000C922                            ; ===========================================================================
0000C922                            
0000C922                            locret_C3D8:
0000C922 4E75                       		rts	
0000C924                            ; ===========================================================================
0000C924                            
0000C924                            Obj34_Wait:				; XREF: Obj34_Index
0000C924 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C928 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C92A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C92E 6000 0000                  		bra.w	DisplaySprite
0000C932                            ; ===========================================================================
0000C932                            
0000C932                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C932 4A28 0001                  		tst.b	1(a0)
0000C936 6A00                       		bpl.s	Obj34_ChangeArt
0000C938 7220                       		moveq	#$20,d1
0000C93A 3028 0032                  		move.w	$32(a0),d0
0000C93E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C942 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C944 6C00                       		bge.s	Obj34_Move2
0000C946 4441                       		neg.w	d1
0000C948                            
0000C948                            Obj34_Move2:
0000C948 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C94C 3028 0008                  		move.w	8(a0),d0
0000C950 6B00                       		bmi.s	locret_C412
0000C952 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C956 6400                       		bcc.s	locret_C412	; if yes, branch
0000C958 6000 0000                  		bra.w	DisplaySprite
0000C95C                            ; ===========================================================================
0000C95C                            
0000C95C                            locret_C412:
0000C95C 4E75                       		rts	
0000C95E                            ; ===========================================================================
0000C95E                            
0000C95E                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C95E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C964 6600                       		bne.s	Obj34_Delete
0000C966 7002                       		moveq	#2,d0
0000C968 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000C96E 7000                       		moveq	#0,d0
0000C970 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C974 0640 0015                  		addi.w	#$15,d0
0000C978 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000C97E                            
0000C97E                            Obj34_Delete:
0000C97E 6000 0000                  		bra.w	DeleteObject
0000C982                            ; ===========================================================================
0000C982 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C984 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C986 00E4                       		dc.w $E4
0000C988 0206                       		dc.b 2,	6
0000C98A 00EA                       		dc.w $EA
0000C98C 0207                       		dc.b 2,	7
0000C98E 00E0                       		dc.w $E0
0000C990 020A                       		dc.b 2,	$A
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            ; Title	card configuration data
0000C992                            ; Format:
0000C992                            ; 4 bytes per item (YYYY XXXX)
0000C992                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C992                            ; ---------------------------------------------------------------------------
0000C992 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C9A2 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C9B2 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C9C2 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C9D2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C9E2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C9F2 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CA02                            ; ===========================================================================
0000CA02                            ; ---------------------------------------------------------------------------
0000CA02                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CA02                            ; ---------------------------------------------------------------------------
0000CA02                            
0000CA02                            Obj39:					; XREF: Obj_Index
0000CA02 7000                       		moveq	#0,d0
0000CA04 1028 0024                  		move.b	$24(a0),d0
0000CA08 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CA0C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CA10                            ; ===========================================================================
0000CA10 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CA12 0000                       		dc.w loc_C50C-Obj39_Index
0000CA14 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CA16                            ; ===========================================================================
0000CA16                            
0000CA16                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CA16 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA1A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CA1C 4E75                       		rts	
0000CA1E                            ; ===========================================================================
0000CA1E                            
0000CA1E                            Obj39_Main:
0000CA1E 5428 0024                  		addq.b	#2,$24(a0)
0000CA22 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CA28 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CA2E 6700                       		beq.s	loc_C4EC	; if not, branch
0000CA30 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CA36                            
0000CA36                            loc_C4EC:
0000CA36 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CA3C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CA44 317C 855E 0002             		move.w	#$855E,2(a0)
0000CA4A 117C 0000 0001             		move.b	#0,1(a0)
0000CA50 117C 0000 0018             		move.b	#0,$18(a0)
0000CA56                            
0000CA56                            loc_C50C:				; XREF: Obj39_Index
0000CA56 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA58 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA5E 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA60 6500                       		bcs.s	Obj39_Move
0000CA62 4441                       		neg.w	d1
0000CA64                            
0000CA64                            Obj39_Move:
0000CA64 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA68 6000 0000                  		bra.w	DisplaySprite
0000CA6C                            ; ===========================================================================
0000CA6C                            
0000CA6C                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA6C 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA72 5428 0024                  		addq.b	#2,$24(a0)
0000CA76 4E75                       		rts	
0000CA78                            ; ===========================================================================
0000CA78                            
0000CA78                            Obj39_Wait:				; XREF: Obj39_Index
0000CA78 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA7C 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA80 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA82 0828 0000 001A             		btst	#0,$1A(a0)
0000CA88 6600                       		bne.s	Obj39_Display
0000CA8A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA8E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA90 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA94 6000 0000                  		bra.w	DisplaySprite
0000CA98                            ; ===========================================================================
0000CA98                            
0000CA98                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA98 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA9C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA9E 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CAA4 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CAA8 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CAAA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CAB0 6000                       		bra.s	Obj39_Display
0000CAB2                            ; ===========================================================================
0000CAB2                            
0000CAB2                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CAB2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CAB8                            
0000CAB8                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CAB8 6000 0000                  		bra.w	DisplaySprite
0000CABC                            ; ===========================================================================
0000CABC                            ; ---------------------------------------------------------------------------
0000CABC                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CABC                            ; ---------------------------------------------------------------------------
0000CABC                            
0000CABC                            Obj3A:					; XREF: Obj_Index
0000CABC 7000                       		moveq	#0,d0
0000CABE 1028 0024                  		move.b	$24(a0),d0
0000CAC2 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CAC6 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CACA                            ; ===========================================================================
0000CACA 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CACC 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CACE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAD0 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CAD2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAD4 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CAD6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAD8 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CADA 0000                       		dc.w loc_C766-Obj3A_Index
0000CADC                            ; ===========================================================================
0000CADC                            
0000CADC                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CADC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CAE0 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CAE2 4E75                       		rts	
0000CAE4                            ; ===========================================================================
0000CAE4                            
0000CAE4                            Obj3A_Main:
0000CAE4 2248                       		movea.l	a0,a1
0000CAE6 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CAEC 7206                       		moveq	#6,d1
0000CAEE                            
0000CAEE                            Obj3A_Loop:
0000CAEE 12BC 003A                  		move.b	#$3A,0(a1)
0000CAF2 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAF6 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CAFA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CAFE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CB02 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB06 101A                       		move.b	(a2)+,d0
0000CB08 0C00 0006                  		cmpi.b	#6,d0
0000CB0C 6600                       		bne.s	loc_C5CA
0000CB0E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CB12                            
0000CB12                            loc_C5CA:
0000CB12 1340 001A                  		move.b	d0,$1A(a1)
0000CB16 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CB1E 337C 8580 0002             		move.w	#$8580,2(a1)
0000CB24 137C 0000 0001             		move.b	#0,1(a1)
0000CB2A 43E9 0040                  		lea	$40(a1),a1
0000CB2E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CB32                            
0000CB32                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CB32 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB34 3028 0030                  		move.w	$30(a0),d0
0000CB38 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CB3C 6700                       		beq.s	loc_C61A	; if yes, branch
0000CB3E 6C00                       		bge.s	Obj3A_Move
0000CB40 4441                       		neg.w	d1
0000CB42                            
0000CB42                            Obj3A_Move:
0000CB42 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB46                            
0000CB46                            loc_C5FE:				; XREF: loc_C61A
0000CB46 3028 0008                  		move.w	8(a0),d0
0000CB4A 6B00                       		bmi.s	locret_C60E
0000CB4C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB50 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CB52 6000 0000                  		bra.w	DisplaySprite
0000CB56                            ; ===========================================================================
0000CB56                            
0000CB56                            locret_C60E:
0000CB56 4E75                       		rts	
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            loc_C610:				; XREF: loc_C61A
0000CB58 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB5E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB62                            ; ===========================================================================
0000CB62                            
0000CB62                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB62 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB68 67EE                       		beq.s	loc_C610
0000CB6A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB70 66D4                       		bne.s	loc_C5FE
0000CB72 5428 0024                  		addq.b	#2,$24(a0)
0000CB76 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB7C                            
0000CB7C                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB7C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB80 6600                       		bne.s	Obj3A_Display
0000CB82 5428 0024                  		addq.b	#2,$24(a0)
0000CB86                            
0000CB86                            Obj3A_Display:
0000CB86 6000 0000                  		bra.w	DisplaySprite
0000CB8A                            ; ===========================================================================
0000CB8A                            
0000CB8A                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB8A 6100 0000                  		bsr.w	DisplaySprite
0000CB8E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB94 7000                       		moveq	#0,d0
0000CB96 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB9A 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB9C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CBA0 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CBA6                            
0000CBA6                            Obj3A_RingBonus:
0000CBA6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CBAA 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CBAC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CBB0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CBB6                            
0000CBB6                            Obj3A_ChkBonus:
0000CBB6 4A40                       		tst.w	d0		; is there any bonus?
0000CBB8 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CBBA 303C 00C5                  		move.w	#$C5,d0
0000CBBE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CBC4 5428 0024                  		addq.b	#2,$24(a0)
0000CBC8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CBCE 6600                       		bne.s	Obj3A_SetDelay
0000CBD0 5828 0024                  		addq.b	#4,$24(a0)
0000CBD4                            
0000CBD4                            Obj3A_SetDelay:
0000CBD4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CBDA                            
0000CBDA                            locret_C692:
0000CBDA 4E75                       		rts	
0000CBDC                            ; ===========================================================================
0000CBDC                            
0000CBDC                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CBDC 4EB9 0000 0000             		jsr	AddPoints
0000CBE2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBE6 0200 0003                  		andi.b	#3,d0
0000CBEA 66EE                       		bne.s	locret_C692
0000CBEC 303C 00CD                  		move.w	#$CD,d0
0000CBF0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBF6                            ; ===========================================================================
0000CBF6                            
0000CBF6                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBFA 0240 0007                  		andi.w	#7,d0
0000CBFE E748                       		lsl.w	#3,d0
0000CC00 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CC04 0241 0003                  		andi.w	#3,d1
0000CC08 D241                       		add.w	d1,d1
0000CC0A D041                       		add.w	d1,d0
0000CC0C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CC10 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CC14 4A40                       		tst.w	d0
0000CC16 6600                       		bne.s	Obj3A_ChkSS
0000CC18 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CC1E 6000                       		bra.s	Obj3A_Display2
0000CC20                            ; ===========================================================================
0000CC20                            
0000CC20                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CC20 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CC24 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CC28 6700                       		beq.s	loc_C6EA	; if not, branch
0000CC2A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CC30 6000                       		bra.s	Obj3A_Display2
0000CC32                            ; ===========================================================================
0000CC32                            
0000CC32                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CC32 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC38                            
0000CC38                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CC38 6000 0000                  		bra.w	DisplaySprite
0000CC3C                            ; ===========================================================================
0000CC3C                            ; ---------------------------------------------------------------------------
0000CC3C                            ; Level	order array
0000CC3C                            ; ---------------------------------------------------------------------------
0000CC3C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC6C                            		even
0000CC6C                            ; ===========================================================================
0000CC6C                            
0000CC6C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC6C 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC6E 3028 0032                  		move.w	$32(a0),d0
0000CC72 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC76 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC78 6C00                       		bge.s	Obj3A_Move2
0000CC7A 4441                       		neg.w	d1
0000CC7C                            
0000CC7C                            Obj3A_Move2:
0000CC7C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC80 3028 0008                  		move.w	8(a0),d0
0000CC84 6B00                       		bmi.s	locret_C748
0000CC86 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC8A 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC8C 6000 0000                  		bra.w	DisplaySprite
0000CC90                            ; ===========================================================================
0000CC90                            
0000CC90                            locret_C748:
0000CC90 4E75                       		rts	
0000CC92                            ; ===========================================================================
0000CC92                            
0000CC92                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC92 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC98 6600 0000                  		bne.w	DeleteObject
0000CC9C 5428 0024                  		addq.b	#2,$24(a0)
0000CCA0 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CCA4 303C 008D                  		move.w	#$8D,d0
0000CCA8 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CCAE                            ; ===========================================================================
0000CCAE                            
0000CCAE                            loc_C766:				; XREF: Obj3A_Index
0000CCAE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CCB2 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CCB8 6700 0000                  		beq.w	DeleteObject
0000CCBC 4E75                       		rts	
0000CCBE                            ; ===========================================================================
0000CCBE 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CCC4 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CCC6 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CCCC 0201                       		dc.b 2,	1
0000CCCE 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CCD4 0206                       		dc.b 2,	6
0000CCD6 0520 0120 00EC             		dc.w $520, $120, $EC
0000CCDC 0202                       		dc.b 2,	2
0000CCDE 0540 0120 00FC             		dc.w $540, $120, $FC
0000CCE4 0203                       		dc.b 2,	3
0000CCE6 0560 0120 010C             		dc.w $560, $120, $10C
0000CCEC 0204                       		dc.b 2,	4
0000CCEE 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CCF4 0205                       		dc.b 2,	5
0000CCF6                            ; ===========================================================================
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6                            ; Object 7E - special stage results screen
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6                            
0000CCF6                            Obj7E:					; XREF: Obj_Index
0000CCF6 7000                       		moveq	#0,d0
0000CCF8 1028 0024                  		move.b	$24(a0),d0
0000CCFC 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CD00 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CD04                            ; ===========================================================================
0000CD04 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CD06 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CD08 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD0A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CD0C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD0E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD10 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD12 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CD14 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD16 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD18 0000                       		dc.w loc_C91A-Obj7E_Index
0000CD1A                            ; ===========================================================================
0000CD1A                            
0000CD1A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CD1A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD1E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CD20 4E75                       		rts	
0000CD22                            ; ===========================================================================
0000CD22                            
0000CD22                            Obj7E_Main:
0000CD22 2248                       		movea.l	a0,a1
0000CD24 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CD2A 7203                       		moveq	#3,d1
0000CD2C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CD32 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CD34 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CD36                            
0000CD36                            Obj7E_Loop:
0000CD36 12BC 007E                  		move.b	#$7E,0(a1)
0000CD3A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CD3E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD42 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD46 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD4A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD4E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD56 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD5C 137C 0000 0001             		move.b	#0,1(a1)
0000CD62 43E9 0040                  		lea	$40(a1),a1
0000CD66 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD6A                            
0000CD6A 7007                       		moveq	#7,d0
0000CD6C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD70 6700                       		beq.s	loc_C842
0000CD72 7000                       		moveq	#0,d0
0000CD74 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD78 6600                       		bne.s	loc_C842	; if not, branch
0000CD7A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD7C 317C 0018 0008             		move.w	#$18,8(a0)
0000CD82 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD88                            
0000CD88                            loc_C842:
0000CD88 1140 001A                  		move.b	d0,$1A(a0)
0000CD8C                            
0000CD8C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD8C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD8E 3028 0030                  		move.w	$30(a0),d0
0000CD92 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD96 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD98 6C00                       		bge.s	Obj7E_Move
0000CD9A 4441                       		neg.w	d1
0000CD9C                            
0000CD9C                            Obj7E_Move:
0000CD9C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDA0                            
0000CDA0                            loc_C85A:				; XREF: loc_C86C
0000CDA0 3028 0008                  		move.w	8(a0),d0
0000CDA4 6B00                       		bmi.s	locret_C86A
0000CDA6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDAA 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CDAC 6000 0000                  		bra.w	DisplaySprite
0000CDB0                            ; ===========================================================================
0000CDB0                            
0000CDB0                            locret_C86A:
0000CDB0 4E75                       		rts	
0000CDB2                            ; ===========================================================================
0000CDB2                            
0000CDB2                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CDB2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CDB8 66E6                       		bne.s	loc_C85A
0000CDBA 5428 0024                  		addq.b	#2,$24(a0)
0000CDBE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDC4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CDCA                            
0000CDCA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CDCA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDCE 6600                       		bne.s	Obj7E_Display
0000CDD0 5428 0024                  		addq.b	#2,$24(a0)
0000CDD4                            
0000CDD4                            Obj7E_Display:
0000CDD4 6000 0000                  		bra.w	DisplaySprite
0000CDD8                            ; ===========================================================================
0000CDD8                            
0000CDD8                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CDD8 6100 0000                  		bsr.w	DisplaySprite
0000CDDC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CDE2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDE6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CDE8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDEE 700A                       		moveq	#10,d0		; add 10 to score
0000CDF0 4EB9 0000 0000             		jsr	AddPoints
0000CDF6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDFA 0200 0003                  		andi.b	#3,d0
0000CDFE 6600                       		bne.s	locret_C8EA
0000CE00 303C 00CD                  		move.w	#$CD,d0
0000CE04 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE0A                            ; ===========================================================================
0000CE0A                            
0000CE0A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CE0A 303C 00C5                  		move.w	#$C5,d0
0000CE0E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CE14 5428 0024                  		addq.b	#2,$24(a0)
0000CE18 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE1E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CE24 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CE26 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CE2C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CE30                            
0000CE30                            locret_C8EA:
0000CE30 4E75                       		rts	
0000CE32                            ; ===========================================================================
0000CE32                            
0000CE32                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CE32 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE38 6000 0000                  		bra.w	DisplaySprite
0000CE3C                            ; ===========================================================================
0000CE3C                            
0000CE3C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CE3C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CE42 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CE48 303C 00BF                  		move.w	#$BF,d0
0000CE4C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000CE52 5428 0024                  		addq.b	#2,$24(a0)
0000CE56 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE5C 6000 0000                  		bra.w	DisplaySprite
0000CE60                            ; ===========================================================================
0000CE60                            
0000CE60                            loc_C91A:				; XREF: Obj7E_Index
0000CE60 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE64 0200 000F                  		andi.b	#$F,d0
0000CE68 6600                       		bne.s	Obj7E_Display2
0000CE6A 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE70                            
0000CE70                            Obj7E_Display2:
0000CE70 6000 0000                  		bra.w	DisplaySprite
0000CE74                            ; ===========================================================================
0000CE74 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE7A 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE7C 0320 0120 0118             		dc.w $320, $120, $118
0000CE82 0201                       		dc.b 2,	1
0000CE84 0360 0120 0128             		dc.w $360, $120, $128
0000CE8A 0202                       		dc.b 2,	2
0000CE8C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE92 0203                       		dc.b 2,	3
0000CE94 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE9A 0206                       		dc.b 2,	6
0000CE9C                            ; ===========================================================================
0000CE9C                            ; ---------------------------------------------------------------------------
0000CE9C                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE9C                            ; ---------------------------------------------------------------------------
0000CE9C                            
0000CE9C                            Obj7F:					; XREF: Obj_Index
0000CE9C 7000                       		moveq	#0,d0
0000CE9E 1028 0024                  		move.b	$24(a0),d0
0000CEA2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CEA6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CEAA                            ; ===========================================================================
0000CEAA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CEAC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CEAE                            
0000CEAE                            ; ---------------------------------------------------------------------------
0000CEAE                            ; X-axis positions for chaos emeralds
0000CEAE                            ; ---------------------------------------------------------------------------
0000CEAE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CEBA                            ; ===========================================================================
0000CEBA                            
0000CEBA                            Obj7F_Main:				; XREF: Obj7F_Index
0000CEBA 2248                       		movea.l	a0,a1
0000CEBC 45F9 0000 CEAE             		lea	(Obj7F_PosData).l,a2
0000CEC2 7400                       		moveq	#0,d2
0000CEC4 7200                       		moveq	#0,d1
0000CEC6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CECA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CECC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CED0                            
0000CED0                            Obj7F_Loop:
0000CED0 12BC 007F                  		move.b	#$7F,0(a1)
0000CED4 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CED8 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CEDE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CEE2 1633 2000                  		move.b	(a3,d2.w),d3
0000CEE6 1343 001A                  		move.b	d3,$1A(a1)
0000CEEA 1343 001C                  		move.b	d3,$1C(a1)
0000CEEE 5202                       		addq.b	#1,d2
0000CEF0 5429 0024                  		addq.b	#2,$24(a1)
0000CEF4 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CEFC 337C 8541 0002             		move.w	#$8541,2(a1)
0000CF02 137C 0000 0001             		move.b	#0,1(a1)
0000CF08 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF0C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CF10                            
0000CF10                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CF10 1028 001A                  		move.b	$1A(a0),d0
0000CF14 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CF1A 0C00 0006                  		cmpi.b	#6,d0
0000CF1E 6600                       		bne.s	Obj7F_Display
0000CF20 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CF26                            
0000CF26                            Obj7F_Display:
0000CF26 6000 0000                  		bra.w	DisplaySprite
0000CF2A                            ; ===========================================================================
0000CF2A                            ; ---------------------------------------------------------------------------
0000CF2A                            ; Sprite mappings - zone title cards
0000CF2A                            ; ---------------------------------------------------------------------------
0000CF2A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CF2C 0000                       		dc.w byte_CA2C-Map_obj34
0000CF2E 0000                       		dc.w byte_CA5A-Map_obj34
0000CF30 0000                       		dc.w byte_CA7A-Map_obj34
0000CF32 0000                       		dc.w byte_CAA8-Map_obj34
0000CF34 0000                       		dc.w byte_CADC-Map_obj34
0000CF36 0000                       		dc.w byte_CB10-Map_obj34
0000CF38 0000                       		dc.w byte_CB26-Map_obj34
0000CF3A 0000                       		dc.w byte_CB31-Map_obj34
0000CF3C 0000                       		dc.w byte_CB3C-Map_obj34
0000CF3E 0000                       		dc.w byte_CB47-Map_obj34
0000CF40 0000                       		dc.w byte_CB8A-Map_obj34
0000CF42 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CF43 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CF48 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CF4D F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CF52 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF57 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF5C F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF61 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF66 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF6B F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF70 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF75 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF7A F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF7F 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF80 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF85 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF8A F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF8F F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF94 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF99 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF9E F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CFA3 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CFA8 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CFAD F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CFB2 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CFB7 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CFBC F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CFC1 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CFC6 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CFCB F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CFD0 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CFD5 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CFDA F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CFDF F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CFE4 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CFE9 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CFEE 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CFEF F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CFF4 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFF9 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CFFE F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D003 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D008 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D009 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D00E F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D013 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D018 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D01D F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D022 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D027 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D02C F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D031 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D036 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D03B F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D040 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D045 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D04A F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D04F F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D054 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D059 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D05E 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D05F F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D064 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D069 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D06E F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D073 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D078 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D07D F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D082 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D087 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D08C F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D091 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D096 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D09B F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D0A0 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D0A5 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D0AA F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D0AF F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D0B4 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D0B9 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D0BE F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D0C3 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D0C8 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D0C9 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D0CE F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D0D3 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D0D8 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D0DD F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D0E2 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D0E7 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D0EC 04                         byte_CB10:	dc.b 4			; ZONE
0000D0ED F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D0F2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0F7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D0FC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D101 00                         		dc.b 0
0000D102 02                         byte_CB26:	dc.b 2			; ACT 1
0000D103 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D108 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D10D 02                         byte_CB31:	dc.b 2			; ACT 2
0000D10E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D113 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D118 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D119 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D11E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D123 0D                         byte_CB47:	dc.b $D			; Oval
0000D124 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D129 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D12E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D133 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D138 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D13D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D142 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D147 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D14C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D151 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D156 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D15B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D160 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D165 00                         		dc.b 0
0000D166 05                         byte_CB8A:	dc.b 5			; FINAL
0000D167 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D16C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D171 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D176 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D17B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D180                            		even
0000D180                            ; ---------------------------------------------------------------------------
0000D180                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D180                            ; ---------------------------------------------------------------------------
0000D180                            Map_obj39:
0000D180                            	include "_maps\obj39.asm"
0000D180                            ; ---------------------------------------------------------------------------
0000D180                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D180                            ; ---------------------------------------------------------------------------
0000D180 0000                       		dc.w byte_CBAC-Map_obj39
0000D182 0000                       		dc.w byte_CBB7-Map_obj39
0000D184 0000                       		dc.w byte_CBC2-Map_obj39
0000D186 0000                       		dc.w byte_CBCD-Map_obj39
0000D188 02                         byte_CBAC:	dc.b 2
0000D189 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D18E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D193 02                         byte_CBB7:	dc.b 2
0000D194 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D199 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D19E 02                         byte_CBC2:	dc.b 2
0000D19F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D1A4 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D1A9 02                         byte_CBCD:	dc.b 2
0000D1AA F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D1AF F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D1B4                            		even
0000D1B4                            		even
0000D1B4                            
0000D1B4                            ; ---------------------------------------------------------------------------
0000D1B4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D1B4                            ; ---------------------------------------------------------------------------
0000D1B4 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D1B6 0000                       		dc.w byte_CC13-Map_obj3A
0000D1B8 0000                       		dc.w byte_CC32-Map_obj3A
0000D1BA 0000                       		dc.w byte_CC51-Map_obj3A
0000D1BC 0000                       		dc.w byte_CC75-Map_obj3A
0000D1BE FF6F                       		dc.w byte_CB47-Map_obj3A
0000D1C0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D1C2 FF59                       		dc.w byte_CB31-Map_obj3A
0000D1C4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D1C6 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D1C7 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D1CC F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D1D1 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D1D6 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D1DB F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D1E0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D1E5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D1EA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D1EF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D1F4 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1F9 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D1FE F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D203 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D208 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D20D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D212 06                         byte_CC13:	dc.b 6			; PASSED
0000D213 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D218 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D21D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D222 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D227 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D22C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D231 06                         byte_CC32:	dc.b 6			; SCORE
0000D232 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D237 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D23C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D241 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D246 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D24B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D250 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D251 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D256 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D25B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D260 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D265 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D26A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D26F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D274 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D275 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D27A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D27F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D284 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D289 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D28E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D293 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D298                            		even
0000D298                            ; ---------------------------------------------------------------------------
0000D298                            ; Sprite mappings - special stage results screen
0000D298                            ; ---------------------------------------------------------------------------
0000D298 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D29A 0000                       		dc.w byte_CCEE-Map_obj7E
0000D29C 0000                       		dc.w byte_CD0D-Map_obj7E
0000D29E FE8B                       		dc.w byte_CB47-Map_obj7E
0000D2A0 0000                       		dc.w byte_CD31-Map_obj7E
0000D2A2 0000                       		dc.w byte_CD46-Map_obj7E
0000D2A4 0000                       		dc.w byte_CD5B-Map_obj7E
0000D2A6 0000                       		dc.w byte_CD6B-Map_obj7E
0000D2A8 0000                       		dc.w byte_CDA8-Map_obj7E
0000D2AA 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D2AB F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D2B0 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D2B5 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D2BA F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D2BF F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D2C4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D2C9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D2CE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2D3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D2D8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D2DD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D2E2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D2E7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D2EC 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D2ED F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2F2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2F7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2FC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D301 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D306 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D30B 07                         byte_CD0D:	dc.b 7
0000D30C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D311 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D316 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D31B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D320 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D325 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D32A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D32F 04                         byte_CD31:	dc.b 4
0000D330 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D335 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D33A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D33F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D344 04                         byte_CD46:	dc.b 4
0000D345 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D34A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D34F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D354 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D359 03                         byte_CD5B:	dc.b 3
0000D35A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D35F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D364 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D369 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D36A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D36F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D374 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D379 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D37E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D383 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D388 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D38D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D392 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D397 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D39C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D3A1 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D3A6 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D3A7 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D3AC F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D3B1 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D3B6 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D3BB F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D3C0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D3C5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D3CA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D3CF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D3D4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D3D9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D3DE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D3E3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D3E8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D3ED F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D3F2                            		even
0000D3F2                            ; ---------------------------------------------------------------------------
0000D3F2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3F2                            ; ---------------------------------------------------------------------------
0000D3F2                            Map_obj7F:
0000D3F2                            	include "_maps\obj7F.asm"
0000D3F2                            ; ---------------------------------------------------------------------------
0000D3F2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3F2                            ; ---------------------------------------------------------------------------
0000D3F2 0000                       		dc.w byte_CE02-Map_obj7F
0000D3F4 0000                       		dc.w byte_CE08-Map_obj7F
0000D3F6 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3F8 0000                       		dc.w byte_CE14-Map_obj7F
0000D3FA 0000                       		dc.w byte_CE1A-Map_obj7F
0000D3FC 0000                       		dc.w byte_CE20-Map_obj7F
0000D3FE 0000                       		dc.w byte_CE26-Map_obj7F
0000D400 01                         byte_CE02:	dc.b 1
0000D401 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D406 01                         byte_CE08:	dc.b 1
0000D407 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D40C 01                         byte_CE0E:	dc.b 1
0000D40D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D412 01                         byte_CE14:	dc.b 1
0000D413 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D418 01                         byte_CE1A:	dc.b 1
0000D419 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D41E 01                         byte_CE20:	dc.b 1
0000D41F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D424 00                         byte_CE26:	dc.b 0			; Blank frame
0000D426 00                         		even
0000D426 00                         		even
0000D426                            
0000D426                            ; ===========================================================================
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            ; Object 36 - spikes
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            
0000D426                            Obj36:					; XREF: Obj_Index
0000D426 7000                       		moveq	#0,d0
0000D428 1028 0024                  		move.b	$24(a0),d0
0000D42C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D430 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D434                            ; ===========================================================================
0000D434 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D436 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D438                            
0000D438 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D43A 0110                       		dc.b 1,	$10
0000D43C 0204                       		dc.b 2,	4
0000D43E 031C                       		dc.b 3,	$1C
0000D440 0440                       		dc.b 4,	$40
0000D442 0510                       		dc.b 5,	$10
0000D444                            ; ===========================================================================
0000D444                            
0000D444                            Obj36_Main:				; XREF: Obj36_Index
0000D444 5428 0024                  		addq.b	#2,$24(a0)
0000D448 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D450 317C 051B 0002             		move.w	#$51B,2(a0)
0000D456 0028 0004 0001             		ori.b	#4,1(a0)
0000D45C 117C 0004 0018             		move.b	#4,$18(a0)
0000D462 1028 0028                  		move.b	$28(a0),d0
0000D466 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D46C 0240 00F0                  		andi.w	#$F0,d0
0000D470 43F9 0000 D438             		lea	(Obj36_Var).l,a1
0000D476 E648                       		lsr.w	#3,d0
0000D478 D2C0                       		adda.w	d0,a1
0000D47A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D47E 1159 0019                  		move.b	(a1)+,$19(a0)
0000D482 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D488 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D48E                            
0000D48E                            Obj36_Solid:				; XREF: Obj36_Index
0000D48E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D492 343C 0004                  		move.w	#4,d2
0000D496 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D49C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D49E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D4A4 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D4A6 343C 0014                  		move.w	#$14,d2
0000D4AA                            
0000D4AA                            ; Spikes types $1x and $5x face	sideways
0000D4AA                            
0000D4AA                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D4AA 323C 001B                  		move.w	#$1B,d1
0000D4AE 3602                       		move.w	d2,d3
0000D4B0 5243                       		addq.w	#1,d3
0000D4B2 3828 0008                  		move.w	8(a0),d4
0000D4B6 6100 0000                  		bsr.w	SolidObject
0000D4BA 0828 0003 0022             		btst	#3,$22(a0)
0000D4C0 6600                       		bne.s	Obj36_Display
0000D4C2 0C44 0001                  		cmpi.w	#1,d4
0000D4C6 6700                       		beq.s	Obj36_Hurt
0000D4C8 6000                       		bra.s	Obj36_Display
0000D4CA                            ; ===========================================================================
0000D4CA                            
0000D4CA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D4CA                            
0000D4CA                            Obj36_Upright:				; XREF: Obj36_Solid
0000D4CA 7200                       		moveq	#0,d1
0000D4CC 1228 0019                  		move.b	$19(a0),d1
0000D4D0 0641 000B                  		addi.w	#$B,d1
0000D4D4 343C 0010                  		move.w	#$10,d2
0000D4D8 363C 0011                  		move.w	#$11,d3
0000D4DC 3828 0008                  		move.w	8(a0),d4
0000D4E0 6100 0000                  		bsr.w	SolidObject
0000D4E4 0828 0003 0022             		btst	#3,$22(a0)
0000D4EA 6600                       		bne.s	Obj36_Hurt
0000D4EC 4A44                       		tst.w	d4
0000D4EE 6A00                       		bpl.s	Obj36_Display
0000D4F0                            
0000D4F0                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D4F0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D4F4 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4F6 2F08                       		move.l	a0,-(sp)
0000D4F8 2448                       		movea.l	a0,a2
0000D4FA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D4FE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D504 6400                       		bcc.s	loc_CF20
0000D506 2628 000C                  		move.l	$C(a0),d3
0000D50A 3028 0012                  		move.w	$12(a0),d0
0000D50E 48C0                       		ext.l	d0
0000D510 E180                       		asl.l	#8,d0
0000D512 9680                       		sub.l	d0,d3
0000D514 2143 000C                  		move.l	d3,$C(a0)
0000D518 4EB9 0000 0000             		jsr	HurtSonic
0000D51E                            
0000D51E                            loc_CF20:
0000D51E 205F                       		movea.l	(sp)+,a0
0000D520                            
0000D520                            Obj36_Display:
0000D520 6100 0000                  		bsr.w	DisplaySprite
0000D524 3028 0030                  		move.w	$30(a0),d0
0000D528 0240 FF80                  		andi.w	#$FF80,d0
0000D52C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D530 0441 0080                  		subi.w	#$80,d1
0000D534 0241 FF80                  		andi.w	#$FF80,d1
0000D538 9041                       		sub.w	d1,d0
0000D53A 0C40 0280                  		cmpi.w	#$280,d0
0000D53E 6200 0000                  		bhi.w	DeleteObject
0000D542 4E75                       		rts	
0000D544                            ; ===========================================================================
0000D544                            
0000D544                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D544 7000                       		moveq	#0,d0
0000D546 1028 0028                  		move.b	$28(a0),d0
0000D54A D040                       		add.w	d0,d0
0000D54C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D550 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D554                            ; ===========================================================================
0000D554 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D556 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D558 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D55A                            ; ===========================================================================
0000D55A                            
0000D55A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D55A 4E75                       		rts			; don't move the object
0000D55C                            ; ===========================================================================
0000D55C                            
0000D55C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D55C 6100 0000                  		bsr.w	Obj36_Wait
0000D560 7000                       		moveq	#0,d0
0000D562 1028 0034                  		move.b	$34(a0),d0
0000D566 D068 0032                  		add.w	$32(a0),d0
0000D56A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D56E 4E75                       		rts	
0000D570                            ; ===========================================================================
0000D570                            
0000D570                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D570 6100 0000                  		bsr.w	Obj36_Wait
0000D574 7000                       		moveq	#0,d0
0000D576 1028 0034                  		move.b	$34(a0),d0
0000D57A D068 0030                  		add.w	$30(a0),d0
0000D57E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D582 4E75                       		rts	
0000D584                            ; ===========================================================================
0000D584                            
0000D584                            Obj36_Wait:
0000D584 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D588 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D58A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D58E 6600                       		bne.s	locret_CFE6
0000D590 4A28 0001                  		tst.b	1(a0)
0000D594 6A00                       		bpl.s	locret_CFE6
0000D596 303C 00B6                  		move.w	#$B6,d0
0000D59A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D5A0 6000                       		bra.s	locret_CFE6
0000D5A2                            ; ===========================================================================
0000D5A2                            
0000D5A2                            loc_CFA4:
0000D5A2 4A68 0036                  		tst.w	$36(a0)
0000D5A6 6700                       		beq.s	loc_CFC6
0000D5A8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D5AE 6400                       		bcc.s	locret_CFE6
0000D5B0 317C 0000 0034             		move.w	#0,$34(a0)
0000D5B6 317C 0000 0036             		move.w	#0,$36(a0)
0000D5BC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5C2 6000                       		bra.s	locret_CFE6
0000D5C4                            ; ===========================================================================
0000D5C4                            
0000D5C4                            loc_CFC6:
0000D5C4 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D5CA 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D5D0 6500                       		bcs.s	locret_CFE6
0000D5D2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D5D8 317C 0001 0036             		move.w	#1,$36(a0)
0000D5DE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5E4                            
0000D5E4                            locret_CFE6:
0000D5E4 4E75                       		rts	
0000D5E6                            ; ===========================================================================
0000D5E6                            ; ---------------------------------------------------------------------------
0000D5E6                            ; Sprite mappings - spikes
0000D5E6                            ; ---------------------------------------------------------------------------
0000D5E6                            Map_obj36:
0000D5E6                            	include "_maps\obj36.asm"
0000D5E6                            ; ---------------------------------------------------------------------------
0000D5E6                            ; Sprite mappings - spikes
0000D5E6                            ; ---------------------------------------------------------------------------
0000D5E6 0000                       		dc.w byte_CFF4-Map_obj36
0000D5E8 0000                       		dc.w byte_D004-Map_obj36
0000D5EA 0000                       		dc.w byte_D014-Map_obj36
0000D5EC 0000                       		dc.w byte_D01A-Map_obj36
0000D5EE 0000                       		dc.w byte_D02A-Map_obj36
0000D5F0 0000                       		dc.w byte_D049-Map_obj36
0000D5F2 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D5F3 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5F8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5FD F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D602 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D603 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D608 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D60D 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D612 01                         byte_D014:	dc.b 1			; 1 spike
0000D613 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D618 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D619 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D61E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D623 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D628 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D629 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D62E F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D633 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D638 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D63D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D642 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D647 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D648 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D64E 00                         		even
0000D64E 00                         		even
0000D64E                            
0000D64E                            ; ===========================================================================
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            ; Object 3B - purple rock (GHZ)
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            
0000D64E                            Obj3B:					; XREF: Obj_Index
0000D64E 7000                       		moveq	#0,d0
0000D650 1028 0024                  		move.b	$24(a0),d0
0000D654 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D658 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D65C                            ; ===========================================================================
0000D65C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D65E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D660                            ; ===========================================================================
0000D660                            
0000D660                            Obj3B_Main:				; XREF: Obj3B_Index
0000D660 5428 0024                  		addq.b	#2,$24(a0)
0000D664 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D66C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D672 117C 0004 0001             		move.b	#4,1(a0)
0000D678 117C 0013 0019             		move.b	#$13,$19(a0)
0000D67E 117C 0004 0018             		move.b	#4,$18(a0)
0000D684                            
0000D684                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D684 323C 001B                  		move.w	#$1B,d1
0000D688 343C 0010                  		move.w	#$10,d2
0000D68C 363C 0010                  		move.w	#$10,d3
0000D690 3828 0008                  		move.w	8(a0),d4
0000D694 6100 0000                  		bsr.w	SolidObject
0000D698 6100 0000                  		bsr.w	DisplaySprite
0000D69C 3028 0008                  		move.w	8(a0),d0
0000D6A0 0240 FF80                  		andi.w	#$FF80,d0
0000D6A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6A8 0441 0080                  		subi.w	#$80,d1
0000D6AC 0241 FF80                  		andi.w	#$FF80,d1
0000D6B0 9041                       		sub.w	d1,d0
0000D6B2 0C40 0280                  		cmpi.w	#$280,d0
0000D6B6 6200 0000                  		bhi.w	DeleteObject
0000D6BA 4E75                       		rts	
0000D6BC                            ; ===========================================================================
0000D6BC                            ; ---------------------------------------------------------------------------
0000D6BC                            ; Object 49 - waterfall	sound effect (GHZ)
0000D6BC                            ; ---------------------------------------------------------------------------
0000D6BC                            
0000D6BC                            Obj49:					; XREF: Obj_Index
0000D6BC 7000                       		moveq	#0,d0
0000D6BE 1028 0024                  		move.b	$24(a0),d0
0000D6C2 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D6C6 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D6CA                            ; ===========================================================================
0000D6CA 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D6CC 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D6CE                            ; ===========================================================================
0000D6CE                            
0000D6CE                            Obj49_Main:				; XREF: Obj49_Index
0000D6CE 5428 0024                  		addq.b	#2,$24(a0)
0000D6D2 117C 0004 0001             		move.b	#4,1(a0)
0000D6D8                            
0000D6D8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D6D8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6DC 0200 003F                  		andi.b	#$3F,d0
0000D6E0 6600                       		bne.s	Obj49_ChkDel
0000D6E2 303C 00D0                  		move.w	#$D0,d0
0000D6E6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D6EC                            
0000D6EC                            Obj49_ChkDel:
0000D6EC 3028 0008                  		move.w	8(a0),d0
0000D6F0 0240 FF80                  		andi.w	#$FF80,d0
0000D6F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6F8 0441 0080                  		subi.w	#$80,d1
0000D6FC 0241 FF80                  		andi.w	#$FF80,d1
0000D700 9041                       		sub.w	d1,d0
0000D702 0C40 0280                  		cmpi.w	#$280,d0
0000D706 6200 0000                  		bhi.w	DeleteObject
0000D70A 4E75                       		rts	
0000D70C                            ; ===========================================================================
0000D70C                            ; ---------------------------------------------------------------------------
0000D70C                            ; Sprite mappings - purple rock	(GHZ)
0000D70C                            ; ---------------------------------------------------------------------------
0000D70C                            Map_obj3B:
0000D70C                            	include "_maps\obj3B.asm"
0000D70C                            ; ---------------------------------------------------------------------------
0000D70C                            ; Sprite mappings - purple rock	(GHZ)
0000D70C                            ; ---------------------------------------------------------------------------
0000D70C 0000                       		dc.w byte_D110-Map_obj3B
0000D70E 02                         byte_D110:	dc.b 2
0000D70F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D714 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D71A 00                         		even
0000D71A 00                         		even
0000D71A                            
0000D71A                            ; ===========================================================================
0000D71A                            ; ---------------------------------------------------------------------------
0000D71A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D71A                            ; ---------------------------------------------------------------------------
0000D71A                            
0000D71A                            Obj3C:					; XREF: Obj_Index
0000D71A 7000                       		moveq	#0,d0
0000D71C 1028 0024                  		move.b	$24(a0),d0
0000D720 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D724 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D728 6000 0000                  		bra.w	MarkObjGone
0000D72C                            ; ===========================================================================
0000D72C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D72E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D730 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D732                            ; ===========================================================================
0000D732                            
0000D732                            Obj3C_Main:				; XREF: Obj3C_Index
0000D732 5428 0024                  		addq.b	#2,$24(a0)
0000D736 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D73E 317C 450F 0002             		move.w	#$450F,2(a0)
0000D744 117C 0004 0001             		move.b	#4,1(a0)
0000D74A 117C 0010 0019             		move.b	#$10,$19(a0)
0000D750 117C 0004 0018             		move.b	#4,$18(a0)
0000D756 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D75C                            
0000D75C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D75C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D762 323C 001B                  		move.w	#$1B,d1
0000D766 343C 0020                  		move.w	#$20,d2
0000D76A 363C 0020                  		move.w	#$20,d3
0000D76E 3828 0008                  		move.w	8(a0),d4
0000D772 6100 0000                  		bsr.w	SolidObject
0000D776 0828 0005 0022             		btst	#5,$22(a0)
0000D77C 6600                       		bne.s	Obj3C_ChkRoll
0000D77E                            
0000D77E                            locret_D180:
0000D77E 4E75                       		rts	
0000D780                            ; ===========================================================================
0000D780                            
0000D780                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D780 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D786 66F6                       		bne.s	locret_D180	; if not, branch
0000D788 3028 0030                  		move.w	$30(a0),d0
0000D78C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D78E 4440                       		neg.w	d0
0000D790                            
0000D790                            Obj3C_ChkSpeed:
0000D790 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D794 65E8                       		bcs.s	locret_D180	; if not, branch
0000D796 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D79C 5869 0008                  		addq.w	#4,8(a1)
0000D7A0 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D7A6 3028 0008                  		move.w	8(a0),d0
0000D7AA B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D7AE 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D7B0 5169 0008                  		subq.w	#8,8(a1)
0000D7B4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D7BA                            
0000D7BA                            Obj3C_Smash:
0000D7BA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D7C0 08A8 0005 0022             		bclr	#5,$22(a0)
0000D7C6 08A9 0005 0022             		bclr	#5,$22(a1)
0000D7CC 7207                       		moveq	#7,d1		; load 8 fragments
0000D7CE 343C 0070                  		move.w	#$70,d2
0000D7D2 6100                       		bsr.s	SmashObject
0000D7D4                            
0000D7D4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D7D4 6100 0000                  		bsr.w	SpeedToPos
0000D7D8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D7DE 6100 0000                  		bsr.w	DisplaySprite
0000D7E2 4A28 0001                  		tst.b	1(a0)
0000D7E6 6A00 0000                  		bpl.w	DeleteObject
0000D7EA 4E75                       		rts	
0000D7EC                            
0000D7EC                            ; ---------------------------------------------------------------------------
0000D7EC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D7EC                            ; ---------------------------------------------------------------------------
0000D7EC                            
0000D7EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7EC                            
0000D7EC                            
0000D7EC                            SmashObject:				; XREF: Obj3C_Smash
0000D7EC 7000                       		moveq	#0,d0
0000D7EE 1028 001A                  		move.b	$1A(a0),d0
0000D7F2 D040                       		add.w	d0,d0
0000D7F4 2668 0004                  		movea.l	4(a0),a3
0000D7F8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D7FC 524B                       		addq.w	#1,a3
0000D7FE 08E8 0005 0001             		bset	#5,1(a0)
0000D804 1810                       		move.b	0(a0),d4
0000D806 1A28 0001                  		move.b	1(a0),d5
0000D80A 2248                       		movea.l	a0,a1
0000D80C 6000                       		bra.s	Smash_LoadFrag
0000D80E                            ; ===========================================================================
0000D80E                            
0000D80E                            Smash_Loop:
0000D80E 6100 0000                  		bsr.w	SingleObjLoad
0000D812 6600                       		bne.s	Smash_PlaySnd
0000D814 5A4B                       		addq.w	#5,a3
0000D816                            
0000D816                            Smash_LoadFrag:				; XREF: SmashObject
0000D816 137C 0004 0024             		move.b	#4,$24(a1)
0000D81C 1284                       		move.b	d4,0(a1)
0000D81E 234B 0004                  		move.l	a3,4(a1)
0000D822 1345 0001                  		move.b	d5,1(a1)
0000D826 3368 0008 0008             		move.w	8(a0),8(a1)
0000D82C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D832 3368 0002 0002             		move.w	2(a0),2(a1)
0000D838 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D83E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D844 335C 0010                  		move.w	(a4)+,$10(a1)
0000D848 335C 0012                  		move.w	(a4)+,$12(a1)
0000D84C B3C8                       		cmpa.l	a0,a1
0000D84E 6400                       		bcc.s	loc_D268
0000D850 2F08                       		move.l	a0,-(sp)
0000D852 2049                       		movea.l	a1,a0
0000D854 6100 0000                  		bsr.w	SpeedToPos
0000D858 D568 0012                  		add.w	d2,$12(a0)
0000D85C 205F                       		movea.l	(sp)+,a0
0000D85E 6100 0000                  		bsr.w	DisplaySprite2
0000D862                            
0000D862                            loc_D268:
0000D862 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D866                            
0000D866                            Smash_PlaySnd:
0000D866 303C 00CB                  		move.w	#$CB,d0
0000D86A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D870                            ; End of function SmashObject
0000D870                            
0000D870                            ; ===========================================================================
0000D870                            ; Smashed block	fragment speeds
0000D870                            ;
0000D870 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D874 0600 FF00                  		dc.w $600, $FF00
0000D878 0600 0100                  		dc.w $600, $100
0000D87C 0400 0500                  		dc.w $400, $500
0000D880 0600 FA00                  		dc.w $600, $FA00
0000D884 0800 FE00                  		dc.w $800, $FE00
0000D888 0800 0200                  		dc.w $800, $200
0000D88C 0600 0600                  		dc.w $600, $600
0000D890                            
0000D890 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D894 F800 FE00                  		dc.w $F800, $FE00
0000D898 F800 0200                  		dc.w $F800, $200
0000D89C FA00 0600                  		dc.w $FA00, $600
0000D8A0 FC00 FB00                  		dc.w $FC00, $FB00
0000D8A4 FA00 FF00                  		dc.w $FA00, $FF00
0000D8A8 FA00 0100                  		dc.w $FA00, $100
0000D8AC FC00 0500                  		dc.w $FC00, $500
0000D8B0                            ; ---------------------------------------------------------------------------
0000D8B0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D8B0                            ; ---------------------------------------------------------------------------
0000D8B0                            Map_obj3C:
0000D8B0                            	include "_maps\obj3C.asm"
0000D8B0                            ; ---------------------------------------------------------------------------
0000D8B0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D8B0                            ; ---------------------------------------------------------------------------
0000D8B0 0000                       		dc.w byte_D2BC-Map_obj3C
0000D8B2 0000                       		dc.w byte_D2E5-Map_obj3C
0000D8B4 0000                       		dc.w byte_D30E-Map_obj3C
0000D8B6 08                         byte_D2BC:	dc.b 8
0000D8B7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D8BC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D8C1 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D8C6 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D8CB E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8D0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8D5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8DA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8DF 08                         byte_D2E5:	dc.b 8
0000D8E0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8E5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8EA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8EF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8F4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8F9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8FE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D903 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D908 08                         byte_D30E:	dc.b 8
0000D909 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D90E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D913 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D918 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D91D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D922 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D927 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D92C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D932 00                         		even
0000D932 00                         		even
0000D932                            
0000D932                            ; ---------------------------------------------------------------------------
0000D932                            ; Object code loading subroutine
0000D932                            ; ---------------------------------------------------------------------------
0000D932                            
0000D932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D932                            
0000D932                            
0000D932                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D932 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D936 7E7F                       		moveq	#$7F,d7
0000D938 7000                       		moveq	#0,d0
0000D93A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D940 6400                       		bcc.s	loc_D362
0000D942                            
0000D942                            loc_D348:
0000D942 1010                       		move.b	(a0),d0		; load object number from RAM
0000D944 6700                       		beq.s	loc_D358
0000D946 D040                       		add.w	d0,d0
0000D948 D040                       		add.w	d0,d0
0000D94A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D94E 4E91                       		jsr	(a1)		; run the object's code
0000D950 7000                       		moveq	#0,d0
0000D952                            
0000D952                            loc_D358:
0000D952 41E8 0040                  		lea	$40(a0),a0	; next object
0000D956 51CF FFEA                  		dbf	d7,loc_D348
0000D95A 4E75                       		rts	
0000D95C                            ; ===========================================================================
0000D95C                            
0000D95C                            loc_D362:
0000D95C 7E1F                       		moveq	#$1F,d7
0000D95E 61E2                       		bsr.s	loc_D348
0000D960 7E5F                       		moveq	#$5F,d7
0000D962                            
0000D962                            loc_D368:
0000D962 7000                       		moveq	#0,d0
0000D964 1010                       		move.b	(a0),d0
0000D966 6700                       		beq.s	loc_D378
0000D968 4A28 0001                  		tst.b	1(a0)
0000D96C 6A00                       		bpl.s	loc_D378
0000D96E 6100 0000                  		bsr.w	DisplaySprite
0000D972                            
0000D972                            loc_D378:
0000D972 41E8 0040                  		lea	$40(a0),a0
0000D976                            
0000D976                            loc_D37C:
0000D976 51CF FFEA                  		dbf	d7,loc_D368
0000D97A 4E75                       		rts	
0000D97C                            ; End of function ObjectsLoad
0000D97C                            
0000D97C                            ; ===========================================================================
0000D97C                            ; ---------------------------------------------------------------------------
0000D97C                            ; Object pointers
0000D97C                            ; ---------------------------------------------------------------------------
0000D97C                            Obj_Index:
0000D97C                            	include "_inc\Object pointers.asm"
0000D97C                            ; ---------------------------------------------------------------------------
0000D97C                            ; Object pointers
0000D97C                            ; ---------------------------------------------------------------------------
0000D97C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D98C 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D99C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D9AC 0000 0000 0000 ABCC 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D9BC 0000 7804 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D9CC 0000 7E2A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D9DC 0000 8678 0000 86E0 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D9EC 0000 8D2A 0000 9018 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D9FC 0000 0000 0000 9CC8 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DA0C 0000 A000 0000 A5EC 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DA1C 0000 9924 0000 8E00 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DA2C 0000 B1BA 0000 A7E0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DA3C 0000 BBCE 0000 C27C 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DA4C 0000 B72C 0000 D426 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA5C 0000 CA02 0000 CABC 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA6C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA7C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA8C 0000 BEEA 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA9C 0000 D6BC 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DAAC 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DABC 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DACC 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DADC 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DAEC 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DAFC 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DB0C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DB1C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DB2C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DB3C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DB4C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB5C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB6C 0000 0000 0000 CCF6 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB7C 0000 531C 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB8C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB9C 0000 59D6 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB9C 0000 59D6 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DBAC                            
0000DBAC                            ; ---------------------------------------------------------------------------
0000DBAC                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DBAC                            ; ---------------------------------------------------------------------------
0000DBAC                            
0000DBAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBAC                            
0000DBAC                            
0000DBAC                            ObjectFall:
0000DBAC 2428 0008                  		move.l	8(a0),d2
0000DBB0 2628 000C                  		move.l	$C(a0),d3
0000DBB4 3028 0010                  		move.w	$10(a0),d0
0000DBB8 48C0                       		ext.l	d0
0000DBBA E180                       		asl.l	#8,d0
0000DBBC D480                       		add.l	d0,d2
0000DBBE 3028 0012                  		move.w	$12(a0),d0
0000DBC2 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DBC8 48C0                       		ext.l	d0
0000DBCA E180                       		asl.l	#8,d0
0000DBCC D680                       		add.l	d0,d3
0000DBCE 2142 0008                  		move.l	d2,8(a0)
0000DBD2 2143 000C                  		move.l	d3,$C(a0)
0000DBD6 4E75                       		rts	
0000DBD8                            ; End of function ObjectFall
0000DBD8                            
0000DBD8                            ; ---------------------------------------------------------------------------
0000DBD8                            ; Subroutine translating object	speed to update	object position
0000DBD8                            ; ---------------------------------------------------------------------------
0000DBD8                            
0000DBD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBD8                            
0000DBD8                            
0000DBD8                            SpeedToPos:
0000DBD8 2428 0008                  		move.l	8(a0),d2
0000DBDC 2628 000C                  		move.l	$C(a0),d3
0000DBE0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DBE4 48C0                       		ext.l	d0
0000DBE6 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DBE8 D480                       		add.l	d0,d2		; add to x-axis	position
0000DBEA 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DBEE 48C0                       		ext.l	d0
0000DBF0 E180                       		asl.l	#8,d0		; multiply by $100
0000DBF2 D680                       		add.l	d0,d3		; add to y-axis	position
0000DBF4 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBF8 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DBFC 4E75                       		rts	
0000DBFE                            ; End of function SpeedToPos
0000DBFE                            
0000DBFE                            ; ---------------------------------------------------------------------------
0000DBFE                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DBFE                            ; ---------------------------------------------------------------------------
0000DBFE                            
0000DBFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBFE                            
0000DBFE                            
0000DBFE                            DisplaySprite:
0000DBFE 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DC02 3028 0018                  		move.w	$18(a0),d0
0000DC06 E248                       		lsr.w	#1,d0
0000DC08 0240 0380                  		andi.w	#$380,d0
0000DC0C D2C0                       		adda.w	d0,a1
0000DC0E 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DC12 6400                       		bcc.s	locret_D620
0000DC14 5451                       		addq.w	#2,(a1)
0000DC16 D2D1                       		adda.w	(a1),a1
0000DC18 3288                       		move.w	a0,(a1)
0000DC1A                            
0000DC1A                            locret_D620:
0000DC1A 4E75                       		rts	
0000DC1C                            ; End of function DisplaySprite
0000DC1C                            
0000DC1C                            ; ---------------------------------------------------------------------------
0000DC1C                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DC1C                            ; ---------------------------------------------------------------------------
0000DC1C                            
0000DC1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC1C                            
0000DC1C                            
0000DC1C                            DisplaySprite2:
0000DC1C 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DC20 3029 0018                  		move.w	$18(a1),d0
0000DC24 E248                       		lsr.w	#1,d0
0000DC26 0240 0380                  		andi.w	#$380,d0
0000DC2A D4C0                       		adda.w	d0,a2
0000DC2C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DC30 6400                       		bcc.s	locret_D63E
0000DC32 5452                       		addq.w	#2,(a2)
0000DC34 D4D2                       		adda.w	(a2),a2
0000DC36 3489                       		move.w	a1,(a2)
0000DC38                            
0000DC38                            locret_D63E:
0000DC38 4E75                       		rts	
0000DC3A                            ; End of function DisplaySprite2
0000DC3A                            
0000DC3A                            ; ---------------------------------------------------------------------------
0000DC3A                            ; Subroutine to	delete an object
0000DC3A                            ; ---------------------------------------------------------------------------
0000DC3A                            
0000DC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC3A                            
0000DC3A                            
0000DC3A                            DeleteObject:
0000DC3A 2248                       		movea.l	a0,a1
0000DC3C                            
0000DC3C                            DeleteObject2:
0000DC3C 7200                       		moveq	#0,d1
0000DC3E 700F                       		moveq	#$F,d0
0000DC40                            
0000DC40                            loc_D646:
0000DC40 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DC42 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DC46 4E75                       		rts	
0000DC48                            ; End of function DeleteObject
0000DC48                            
0000DC48                            ; ===========================================================================
0000DC48 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DC4C 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DC50 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DC54 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC58                            ; ---------------------------------------------------------------------------
0000DC58                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC58                            ; ---------------------------------------------------------------------------
0000DC58                            
0000DC58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC58                            
0000DC58                            
0000DC58                            BuildSprites:				; XREF: TitleScreen; et al
0000DC58 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC5C 7A00                       		moveq	#0,d5
0000DC5E 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC62 7E07                       		moveq	#7,d7
0000DC64                            
0000DC64                            loc_D66A:
0000DC64 4A54                       		tst.w	(a4)
0000DC66 6700 0000                  		beq.w	loc_D72E
0000DC6A 7C02                       		moveq	#2,d6
0000DC6C                            
0000DC6C                            loc_D672:
0000DC6C 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC70 4A10                       		tst.b	(a0)
0000DC72 6700 0000                  		beq.w	loc_D726
0000DC76 08A8 0007 0001             		bclr	#7,1(a0)
0000DC7C 1028 0001                  		move.b	1(a0),d0
0000DC80 1800                       		move.b	d0,d4
0000DC82 0240 000C                  		andi.w	#$C,d0
0000DC86 6700                       		beq.s	loc_D6DE
0000DC88 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC8C 7000                       		moveq	#0,d0
0000DC8E 1028 0019                  		move.b	$19(a0),d0
0000DC92 3628 0008                  		move.w	8(a0),d3
0000DC96 9651                       		sub.w	(a1),d3
0000DC98 3203                       		move.w	d3,d1
0000DC9A D240                       		add.w	d0,d1
0000DC9C 6B00 0000                  		bmi.w	loc_D726
0000DCA0 3203                       		move.w	d3,d1
0000DCA2 9240                       		sub.w	d0,d1
0000DCA4 0C41 0140                  		cmpi.w	#$140,d1
0000DCA8 6C00                       		bge.s	loc_D726
0000DCAA 0643 0080                  		addi.w	#$80,d3
0000DCAE 0804 0004                  		btst	#4,d4
0000DCB2 6700                       		beq.s	loc_D6E8
0000DCB4 7000                       		moveq	#0,d0
0000DCB6 1028 0016                  		move.b	$16(a0),d0
0000DCBA 3428 000C                  		move.w	$C(a0),d2
0000DCBE 9469 0004                  		sub.w	4(a1),d2
0000DCC2 3202                       		move.w	d2,d1
0000DCC4 D240                       		add.w	d0,d1
0000DCC6 6B00                       		bmi.s	loc_D726
0000DCC8 3202                       		move.w	d2,d1
0000DCCA 9240                       		sub.w	d0,d1
0000DCCC 0C41 00E0                  		cmpi.w	#$E0,d1
0000DCD0 6C00                       		bge.s	loc_D726
0000DCD2 0642 0080                  		addi.w	#$80,d2
0000DCD6 6000                       		bra.s	loc_D700
0000DCD8                            ; ===========================================================================
0000DCD8                            
0000DCD8                            loc_D6DE:
0000DCD8 3428 000A                  		move.w	$A(a0),d2
0000DCDC 3628 0008                  		move.w	8(a0),d3
0000DCE0 6000                       		bra.s	loc_D700
0000DCE2                            ; ===========================================================================
0000DCE2                            
0000DCE2                            loc_D6E8:
0000DCE2 3428 000C                  		move.w	$C(a0),d2
0000DCE6 9469 0004                  		sub.w	4(a1),d2
0000DCEA 0642 0080                  		addi.w	#$80,d2
0000DCEE 0C42 0060                  		cmpi.w	#$60,d2
0000DCF2 6500                       		bcs.s	loc_D726
0000DCF4 0C42 0180                  		cmpi.w	#$180,d2
0000DCF8 6400                       		bcc.s	loc_D726
0000DCFA                            
0000DCFA                            loc_D700:
0000DCFA 2268 0004                  		movea.l	4(a0),a1
0000DCFE 7200                       		moveq	#0,d1
0000DD00 0804 0005                  		btst	#5,d4
0000DD04 6600                       		bne.s	loc_D71C
0000DD06 1228 001A                  		move.b	$1A(a0),d1
0000DD0A D201                       		add.b	d1,d1
0000DD0C D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DD10 1219                       		move.b	(a1)+,d1
0000DD12 5301                       		subq.b	#1,d1
0000DD14 6B00                       		bmi.s	loc_D720
0000DD16                            
0000DD16                            loc_D71C:
0000DD16 6100 0000                  		bsr.w	sub_D750
0000DD1A                            
0000DD1A                            loc_D720:
0000DD1A 08E8 0007 0001             		bset	#7,1(a0)
0000DD20                            
0000DD20                            loc_D726:
0000DD20 5446                       		addq.w	#2,d6
0000DD22 5554                       		subq.w	#2,(a4)
0000DD24 6600 FF46                  		bne.w	loc_D672
0000DD28                            
0000DD28                            loc_D72E:
0000DD28 49EC 0080                  		lea	$80(a4),a4
0000DD2C 51CF FF36                  		dbf	d7,loc_D66A
0000DD30 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DD34 0C05 0050                  		cmpi.b	#$50,d5
0000DD38 6700                       		beq.s	loc_D748
0000DD3A 24BC 0000 0000             		move.l	#0,(a2)
0000DD40 4E75                       		rts	
0000DD42                            ; ===========================================================================
0000DD42                            
0000DD42                            loc_D748:
0000DD42 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DD48 4E75                       		rts	
0000DD4A                            ; End of function BuildSprites
0000DD4A                            
0000DD4A                            
0000DD4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD4A                            
0000DD4A                            
0000DD4A                            sub_D750:				; XREF: BuildSprites
0000DD4A 3668 0002                  		movea.w	2(a0),a3
0000DD4E 0804 0000                  		btst	#0,d4
0000DD52 6600                       		bne.s	loc_D796
0000DD54 0804 0001                  		btst	#1,d4
0000DD58 6600 0000                  		bne.w	loc_D7E4
0000DD5C                            ; End of function sub_D750
0000DD5C                            
0000DD5C                            
0000DD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD5C                            
0000DD5C                            
0000DD5C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD5C 0C05 0050                  		cmpi.b	#$50,d5
0000DD60 6700                       		beq.s	locret_D794
0000DD62 1019                       		move.b	(a1)+,d0
0000DD64 4880                       		ext.w	d0
0000DD66 D042                       		add.w	d2,d0
0000DD68 34C0                       		move.w	d0,(a2)+
0000DD6A 14D9                       		move.b	(a1)+,(a2)+
0000DD6C 5205                       		addq.b	#1,d5
0000DD6E 14C5                       		move.b	d5,(a2)+
0000DD70 1019                       		move.b	(a1)+,d0
0000DD72 E148                       		lsl.w	#8,d0
0000DD74 1019                       		move.b	(a1)+,d0
0000DD76 D04B                       		add.w	a3,d0
0000DD78 34C0                       		move.w	d0,(a2)+
0000DD7A 1019                       		move.b	(a1)+,d0
0000DD7C 4880                       		ext.w	d0
0000DD7E D043                       		add.w	d3,d0
0000DD80 0240 01FF                  		andi.w	#$1FF,d0
0000DD84 6600                       		bne.s	loc_D78E
0000DD86 5240                       		addq.w	#1,d0
0000DD88                            
0000DD88                            loc_D78E:
0000DD88 34C0                       		move.w	d0,(a2)+
0000DD8A 51C9 FFD0                  		dbf	d1,sub_D762
0000DD8E                            
0000DD8E                            locret_D794:
0000DD8E 4E75                       		rts	
0000DD90                            ; End of function sub_D762
0000DD90                            
0000DD90                            ; ===========================================================================
0000DD90                            
0000DD90                            loc_D796:
0000DD90 0804 0001                  		btst	#1,d4
0000DD94 6600 0000                  		bne.w	loc_D82A
0000DD98                            
0000DD98                            loc_D79E:
0000DD98 0C05 0050                  		cmpi.b	#$50,d5
0000DD9C 6700                       		beq.s	locret_D7E2
0000DD9E 1019                       		move.b	(a1)+,d0
0000DDA0 4880                       		ext.w	d0
0000DDA2 D042                       		add.w	d2,d0
0000DDA4 34C0                       		move.w	d0,(a2)+
0000DDA6 1819                       		move.b	(a1)+,d4
0000DDA8 14C4                       		move.b	d4,(a2)+
0000DDAA 5205                       		addq.b	#1,d5
0000DDAC 14C5                       		move.b	d5,(a2)+
0000DDAE 1019                       		move.b	(a1)+,d0
0000DDB0 E148                       		lsl.w	#8,d0
0000DDB2 1019                       		move.b	(a1)+,d0
0000DDB4 D04B                       		add.w	a3,d0
0000DDB6 0A40 0800                  		eori.w	#$800,d0
0000DDBA 34C0                       		move.w	d0,(a2)+
0000DDBC 1019                       		move.b	(a1)+,d0
0000DDBE 4880                       		ext.w	d0
0000DDC0 4440                       		neg.w	d0
0000DDC2 D804                       		add.b	d4,d4
0000DDC4 0244 0018                  		andi.w	#$18,d4
0000DDC8 5044                       		addq.w	#8,d4
0000DDCA 9044                       		sub.w	d4,d0
0000DDCC D043                       		add.w	d3,d0
0000DDCE 0240 01FF                  		andi.w	#$1FF,d0
0000DDD2 6600                       		bne.s	loc_D7DC
0000DDD4 5240                       		addq.w	#1,d0
0000DDD6                            
0000DDD6                            loc_D7DC:
0000DDD6 34C0                       		move.w	d0,(a2)+
0000DDD8 51C9 FFBE                  		dbf	d1,loc_D79E
0000DDDC                            
0000DDDC                            locret_D7E2:
0000DDDC 4E75                       		rts	
0000DDDE                            ; ===========================================================================
0000DDDE                            
0000DDDE                            loc_D7E4:				; XREF: sub_D750
0000DDDE 0C05 0050                  		cmpi.b	#$50,d5
0000DDE2 6700                       		beq.s	locret_D828
0000DDE4 1019                       		move.b	(a1)+,d0
0000DDE6 1811                       		move.b	(a1),d4
0000DDE8 4880                       		ext.w	d0
0000DDEA 4440                       		neg.w	d0
0000DDEC E70C                       		lsl.b	#3,d4
0000DDEE 0244 0018                  		andi.w	#$18,d4
0000DDF2 5044                       		addq.w	#8,d4
0000DDF4 9044                       		sub.w	d4,d0
0000DDF6 D042                       		add.w	d2,d0
0000DDF8 34C0                       		move.w	d0,(a2)+
0000DDFA 14D9                       		move.b	(a1)+,(a2)+
0000DDFC 5205                       		addq.b	#1,d5
0000DDFE 14C5                       		move.b	d5,(a2)+
0000DE00 1019                       		move.b	(a1)+,d0
0000DE02 E148                       		lsl.w	#8,d0
0000DE04 1019                       		move.b	(a1)+,d0
0000DE06 D04B                       		add.w	a3,d0
0000DE08 0A40 1000                  		eori.w	#$1000,d0
0000DE0C 34C0                       		move.w	d0,(a2)+
0000DE0E 1019                       		move.b	(a1)+,d0
0000DE10 4880                       		ext.w	d0
0000DE12 D043                       		add.w	d3,d0
0000DE14 0240 01FF                  		andi.w	#$1FF,d0
0000DE18 6600                       		bne.s	loc_D822
0000DE1A 5240                       		addq.w	#1,d0
0000DE1C                            
0000DE1C                            loc_D822:
0000DE1C 34C0                       		move.w	d0,(a2)+
0000DE1E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DE22                            
0000DE22                            locret_D828:
0000DE22 4E75                       		rts	
0000DE24                            ; ===========================================================================
0000DE24                            
0000DE24                            loc_D82A:
0000DE24 0C05 0050                  		cmpi.b	#$50,d5
0000DE28 6700                       		beq.s	locret_D87C
0000DE2A 1019                       		move.b	(a1)+,d0
0000DE2C 1811                       		move.b	(a1),d4
0000DE2E 4880                       		ext.w	d0
0000DE30 4440                       		neg.w	d0
0000DE32 E70C                       		lsl.b	#3,d4
0000DE34 0244 0018                  		andi.w	#$18,d4
0000DE38 5044                       		addq.w	#8,d4
0000DE3A 9044                       		sub.w	d4,d0
0000DE3C D042                       		add.w	d2,d0
0000DE3E 34C0                       		move.w	d0,(a2)+
0000DE40 1819                       		move.b	(a1)+,d4
0000DE42 14C4                       		move.b	d4,(a2)+
0000DE44 5205                       		addq.b	#1,d5
0000DE46 14C5                       		move.b	d5,(a2)+
0000DE48 1019                       		move.b	(a1)+,d0
0000DE4A E148                       		lsl.w	#8,d0
0000DE4C 1019                       		move.b	(a1)+,d0
0000DE4E D04B                       		add.w	a3,d0
0000DE50 0A40 1800                  		eori.w	#$1800,d0
0000DE54 34C0                       		move.w	d0,(a2)+
0000DE56 1019                       		move.b	(a1)+,d0
0000DE58 4880                       		ext.w	d0
0000DE5A 4440                       		neg.w	d0
0000DE5C D804                       		add.b	d4,d4
0000DE5E 0244 0018                  		andi.w	#$18,d4
0000DE62 5044                       		addq.w	#8,d4
0000DE64 9044                       		sub.w	d4,d0
0000DE66 D043                       		add.w	d3,d0
0000DE68 0240 01FF                  		andi.w	#$1FF,d0
0000DE6C 6600                       		bne.s	loc_D876
0000DE6E 5240                       		addq.w	#1,d0
0000DE70                            
0000DE70                            loc_D876:
0000DE70 34C0                       		move.w	d0,(a2)+
0000DE72 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE76                            
0000DE76                            locret_D87C:
0000DE76 4E75                       		rts	
0000DE78                            ; ---------------------------------------------------------------------------
0000DE78                            ; Subroutine to	check if an object is on the screen
0000DE78                            ; ---------------------------------------------------------------------------
0000DE78                            
0000DE78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE78                            
0000DE78                            
0000DE78                            ChkObjOnScreen:
0000DE78 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE7C 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE80 6B00                       		bmi.s	NotOnScreen
0000DE82 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE86 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE88                            
0000DE88 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE8C 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE90 6B00                       		bmi.s	NotOnScreen
0000DE92 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE96 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE98                            
0000DE98 7000                       		moveq	#0,d0		; set flag to 0
0000DE9A 4E75                       		rts	
0000DE9C                            ; ===========================================================================
0000DE9C                            
0000DE9C                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE9C 7001                       		moveq	#1,d0		; set flag to 1
0000DE9E 4E75                       		rts	
0000DEA0                            ; End of function ChkObjOnScreen
0000DEA0                            
0000DEA0                            
0000DEA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA0                            
0000DEA0                            
0000DEA0                            ChkObjOnScreen2:
0000DEA0 7200                       		moveq	#0,d1
0000DEA2 1228 0019                  		move.b	$19(a0),d1
0000DEA6 3028 0008                  		move.w	8(a0),d0
0000DEAA 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DEAE D041                       		add.w	d1,d0
0000DEB0 6B00                       		bmi.s	NotOnScreen2
0000DEB2 D241                       		add.w	d1,d1
0000DEB4 9041                       		sub.w	d1,d0
0000DEB6 0C40 0140                  		cmpi.w	#320,d0
0000DEBA 6C00                       		bge.s	NotOnScreen2
0000DEBC                            
0000DEBC 3228 000C                  		move.w	$C(a0),d1
0000DEC0 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DEC4 6B00                       		bmi.s	NotOnScreen2
0000DEC6 0C41 00E0                  		cmpi.w	#224,d1
0000DECA 6C00                       		bge.s	NotOnScreen2
0000DECC                            
0000DECC 7000                       		moveq	#0,d0
0000DECE 4E75                       		rts	
0000DED0                            ; ===========================================================================
0000DED0                            
0000DED0                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DED0 7001                       		moveq	#1,d0
0000DED2 4E75                       		rts	
0000DED4                            ; End of function ChkObjOnScreen2
0000DED4                            
0000DED4                            ; ---------------------------------------------------------------------------
0000DED4                            ; Subroutine to	load a level's objects
0000DED4                            ; ---------------------------------------------------------------------------
0000DED4                            
0000DED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DED4                            
0000DED4                            
0000DED4                            ObjPosLoad:				; XREF: Level; et al
0000DED4 7000                       		moveq	#0,d0
0000DED6 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DEDA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DEDE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DEE2                            ; End of function ObjPosLoad
0000DEE2                            
0000DEE2                            ; ===========================================================================
0000DEE2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DEE4 0000                       		dc.w OPL_Next-OPL_Index
0000DEE6                            ; ===========================================================================
0000DEE6                            
0000DEE6                            OPL_Main:				; XREF: OPL_Index
0000DEE6 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DEEA 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DEEE ED08                       		lsl.b	#6,d0
0000DEF0 E848                       		lsr.w	#4,d0
0000DEF2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEF8 2248                       		movea.l	a0,a1
0000DEFA D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DEFE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF02 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF06 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DF0A 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DF0E 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DF12 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF16 34FC 0101                  		move.w	#$101,(a2)+
0000DF1A 303C 005E                  		move.w	#$5E,d0
0000DF1E                            
0000DF1E                            OPL_ClrList:
0000DF1E 429A                       		clr.l	(a2)+
0000DF20 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DF24                            
0000DF24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF28 7400                       		moveq	#0,d2
0000DF2A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF2E 0446 0080                  		subi.w	#$80,d6
0000DF32 6400                       		bcc.s	loc_D93C
0000DF34 7C00                       		moveq	#0,d6
0000DF36                            
0000DF36                            loc_D93C:
0000DF36 0246 FF80                  		andi.w	#$FF80,d6
0000DF3A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF3E                            
0000DF3E                            loc_D944:
0000DF3E BC50                       		cmp.w	(a0),d6
0000DF40 6300                       		bls.s	loc_D956
0000DF42 4A28 0004                  		tst.b	4(a0)
0000DF46 6A00                       		bpl.s	loc_D952
0000DF48 1412                       		move.b	(a2),d2
0000DF4A 5212                       		addq.b	#1,(a2)
0000DF4C                            
0000DF4C                            loc_D952:
0000DF4C 5C48                       		addq.w	#6,a0
0000DF4E 60EE                       		bra.s	loc_D944
0000DF50                            ; ===========================================================================
0000DF50                            
0000DF50                            loc_D956:
0000DF50 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF54 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF58 0446 0080                  		subi.w	#$80,d6
0000DF5C 6500                       		bcs.s	loc_D976
0000DF5E                            
0000DF5E                            loc_D964:
0000DF5E BC50                       		cmp.w	(a0),d6
0000DF60 6300                       		bls.s	loc_D976
0000DF62 4A28 0004                  		tst.b	4(a0)
0000DF66 6A00                       		bpl.s	loc_D972
0000DF68 522A 0001                  		addq.b	#1,1(a2)
0000DF6C                            
0000DF6C                            loc_D972:
0000DF6C 5C48                       		addq.w	#6,a0
0000DF6E 60EE                       		bra.s	loc_D964
0000DF70                            ; ===========================================================================
0000DF70                            
0000DF70                            loc_D976:
0000DF70 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF74 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF7A                            
0000DF7A                            OPL_Next:				; XREF: OPL_Index
0000DF7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF7E 7400                       		moveq	#0,d2
0000DF80 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF84 0246 FF80                  		andi.w	#$FF80,d6
0000DF88 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF8C 6700 0000                  		beq.w	locret_DA3A
0000DF90 6C00                       		bge.s	loc_D9F6
0000DF92 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF96 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF9A 0446 0080                  		subi.w	#$80,d6
0000DF9E 6500                       		bcs.s	loc_D9D2
0000DFA0                            
0000DFA0                            loc_D9A6:
0000DFA0 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFA4 6C00                       		bge.s	loc_D9D2
0000DFA6 5D48                       		subq.w	#6,a0
0000DFA8 4A28 0004                  		tst.b	4(a0)
0000DFAC 6A00                       		bpl.s	loc_D9BC
0000DFAE 532A 0001                  		subq.b	#1,1(a2)
0000DFB2 142A 0001                  		move.b	1(a2),d2
0000DFB6                            
0000DFB6                            loc_D9BC:
0000DFB6 6100 0000                  		bsr.w	loc_DA3C
0000DFBA 6600                       		bne.s	loc_D9C6
0000DFBC 5D48                       		subq.w	#6,a0
0000DFBE 60E0                       		bra.s	loc_D9A6
0000DFC0                            ; ===========================================================================
0000DFC0                            
0000DFC0                            loc_D9C6:
0000DFC0 4A28 0004                  		tst.b	4(a0)
0000DFC4 6A00                       		bpl.s	loc_D9D0
0000DFC6 522A 0001                  		addq.b	#1,1(a2)
0000DFCA                            
0000DFCA                            loc_D9D0:
0000DFCA 5C48                       		addq.w	#6,a0
0000DFCC                            
0000DFCC                            loc_D9D2:
0000DFCC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFD0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFD4 0646 0300                  		addi.w	#$300,d6
0000DFD8                            
0000DFD8                            loc_D9DE:
0000DFD8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFDC 6E00                       		bgt.s	loc_D9F0
0000DFDE 4A28 FFFE                  		tst.b	-2(a0)
0000DFE2 6A00                       		bpl.s	loc_D9EC
0000DFE4 5312                       		subq.b	#1,(a2)
0000DFE6                            
0000DFE6                            loc_D9EC:
0000DFE6 5D48                       		subq.w	#6,a0
0000DFE8 60EE                       		bra.s	loc_D9DE
0000DFEA                            ; ===========================================================================
0000DFEA                            
0000DFEA                            loc_D9F0:
0000DFEA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFEE 4E75                       		rts	
0000DFF0                            ; ===========================================================================
0000DFF0                            
0000DFF0                            loc_D9F6:
0000DFF0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DFF4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFF8 0646 0280                  		addi.w	#$280,d6
0000DFFC                            
0000DFFC                            loc_DA02:
0000DFFC BC50                       		cmp.w	(a0),d6
0000DFFE 6300                       		bls.s	loc_DA16
0000E000 4A28 0004                  		tst.b	4(a0)
0000E004 6A00                       		bpl.s	loc_DA10
0000E006 1412                       		move.b	(a2),d2
0000E008 5212                       		addq.b	#1,(a2)
0000E00A                            
0000E00A                            loc_DA10:
0000E00A 6100 0000                  		bsr.w	loc_DA3C
0000E00E 67EC                       		beq.s	loc_DA02
0000E010                            
0000E010                            loc_DA16:
0000E010 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E014 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E018 0446 0300                  		subi.w	#$300,d6
0000E01C 6500                       		bcs.s	loc_DA36
0000E01E                            
0000E01E                            loc_DA24:
0000E01E BC50                       		cmp.w	(a0),d6
0000E020 6300                       		bls.s	loc_DA36
0000E022 4A28 0004                  		tst.b	4(a0)
0000E026 6A00                       		bpl.s	loc_DA32
0000E028 522A 0001                  		addq.b	#1,1(a2)
0000E02C                            
0000E02C                            loc_DA32:
0000E02C 5C48                       		addq.w	#6,a0
0000E02E 60EE                       		bra.s	loc_DA24
0000E030                            ; ===========================================================================
0000E030                            
0000E030                            loc_DA36:
0000E030 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E034                            
0000E034                            locret_DA3A:
0000E034 4E75                       		rts	
0000E036                            ; ===========================================================================
0000E036                            
0000E036                            loc_DA3C:
0000E036 4A28 0004                  		tst.b	4(a0)
0000E03A 6A00                       		bpl.s	OPL_MakeItem
0000E03C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E042 6700                       		beq.s	OPL_MakeItem
0000E044 5C48                       		addq.w	#6,a0
0000E046 7000                       		moveq	#0,d0
0000E048 4E75                       		rts	
0000E04A                            ; ===========================================================================
0000E04A                            
0000E04A                            OPL_MakeItem:
0000E04A 6100 0000                  		bsr.w	SingleObjLoad
0000E04E 6600                       		bne.s	locret_DA8A
0000E050 3358 0008                  		move.w	(a0)+,8(a1)
0000E054 3018                       		move.w	(a0)+,d0
0000E056 3200                       		move.w	d0,d1
0000E058 0240 0FFF                  		andi.w	#$FFF,d0
0000E05C 3340 000C                  		move.w	d0,$C(a1)
0000E060 E559                       		rol.w	#2,d1
0000E062 0201 0003                  		andi.b	#3,d1
0000E066 1341 0001                  		move.b	d1,1(a1)
0000E06A 1341 0022                  		move.b	d1,$22(a1)
0000E06E 1018                       		move.b	(a0)+,d0
0000E070 6A00                       		bpl.s	loc_DA80
0000E072 0200 007F                  		andi.b	#$7F,d0
0000E076 1342 0023                  		move.b	d2,$23(a1)
0000E07A                            
0000E07A                            loc_DA80:
0000E07A 1280                       		move.b	d0,0(a1)
0000E07C 1358 0028                  		move.b	(a0)+,$28(a1)
0000E080 7000                       		moveq	#0,d0
0000E082                            
0000E082                            locret_DA8A:
0000E082 4E75                       		rts	
0000E084                            ; ---------------------------------------------------------------------------
0000E084                            ; Single object	loading	subroutine
0000E084                            ; ---------------------------------------------------------------------------
0000E084                            
0000E084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E084                            
0000E084                            
0000E084                            SingleObjLoad:
0000E084 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E088 303C 005F                  		move.w	#$5F,d0
0000E08C                            
0000E08C                            loc_DA94:
0000E08C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E08E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E090 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E094 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E098                            
0000E098                            locret_DAA0:
0000E098 4E75                       		rts	
0000E09A                            ; End of function SingleObjLoad
0000E09A                            
0000E09A                            
0000E09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E09A                            
0000E09A                            
0000E09A                            SingleObjLoad2:
0000E09A 2248                       		movea.l	a0,a1
0000E09C 303C F000                  		move.w	#-$1000,d0
0000E0A0 9048                       		sub.w	a0,d0
0000E0A2 EC48                       		lsr.w	#6,d0
0000E0A4 5340                       		subq.w	#1,d0
0000E0A6 6500                       		bcs.s	locret_DABC
0000E0A8                            
0000E0A8                            loc_DAB0:
0000E0A8 4A11                       		tst.b	(a1)
0000E0AA 6700                       		beq.s	locret_DABC
0000E0AC 43E9 0040                  		lea	$40(a1),a1
0000E0B0 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E0B4                            
0000E0B4                            locret_DABC:
0000E0B4 4E75                       		rts	
0000E0B6                            ; End of function SingleObjLoad2
0000E0B6                            
0000E0B6                            ; ===========================================================================
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            ; Object 41 - springs
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            
0000E0B6                            Obj41:					; XREF: Obj_Index
0000E0B6 7000                       		moveq	#0,d0
0000E0B8 1028 0024                  		move.b	$24(a0),d0
0000E0BC 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E0C0 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E0C4 6100 FB38                  		bsr.w	DisplaySprite
0000E0C8 3028 0008                  		move.w	8(a0),d0
0000E0CC 0240 FF80                  		andi.w	#$FF80,d0
0000E0D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E0D4 0441 0080                  		subi.w	#$80,d1
0000E0D8 0241 FF80                  		andi.w	#$FF80,d1
0000E0DC 9041                       		sub.w	d1,d0
0000E0DE 0C40 0280                  		cmpi.w	#$280,d0
0000E0E2 6200 FB56                  		bhi.w	DeleteObject
0000E0E6 4E75                       		rts	
0000E0E8                            ; ===========================================================================
0000E0E8 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E0EA 0000                       		dc.w Obj41_Up-Obj41_Index
0000E0EC 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E0EE 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E0F0 0000                       		dc.w Obj41_LR-Obj41_Index
0000E0F2 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E0F4 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0F6 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0F8 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E0FA 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E0FC                            
0000E0FC F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E0FE F600                       		dc.w -$A00		; power	of yellow spring
0000E100                            ; ===========================================================================
0000E100                            
0000E100                            Obj41_Main:				; XREF: Obj41_Index
0000E100 5428 0024                  		addq.b	#2,$24(a0)
0000E104 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E10C 317C 0523 0002             		move.w	#$523,2(a0)
0000E112 0028 0004 0001             		ori.b	#4,1(a0)
0000E118 117C 0010 0019             		move.b	#$10,$19(a0)
0000E11E 117C 0004 0018             		move.b	#4,$18(a0)
0000E124 1028 0028                  		move.b	$28(a0),d0
0000E128 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E12C 6700                       		beq.s	loc_DB54	; if not, branch
0000E12E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E134 117C 0001 001C             		move.b	#1,$1C(a0)
0000E13A 117C 0003 001A             		move.b	#3,$1A(a0)
0000E140 317C 0533 0002             		move.w	#$533,2(a0)
0000E146 117C 0008 0019             		move.b	#8,$19(a0)
0000E14C                            
0000E14C                            loc_DB54:
0000E14C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E150 6700                       		beq.s	loc_DB66	; if not, branch
0000E152 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E158 08E8 0001 0022             		bset	#1,$22(a0)
0000E15E                            
0000E15E                            loc_DB66:
0000E15E 0800 0001                  		btst	#1,d0
0000E162 6700                       		beq.s	loc_DB72
0000E164 08E8 0005 0002             		bset	#5,2(a0)
0000E16A                            
0000E16A                            loc_DB72:
0000E16A 0240 000F                  		andi.w	#$F,d0
0000E16E 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E174 4E75                       		rts	
0000E176                            ; ===========================================================================
0000E176                            
0000E176                            Obj41_Up:				; XREF: Obj41_Index
0000E176 323C 001B                  		move.w	#$1B,d1
0000E17A 343C 0008                  		move.w	#8,d2
0000E17E 363C 0010                  		move.w	#$10,d3
0000E182 3828 0008                  		move.w	8(a0),d4
0000E186 6100 0000                  		bsr.w	SolidObject
0000E18A 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E18E 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E190 4E75                       		rts	
0000E192                            ; ===========================================================================
0000E192                            
0000E192                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E192 5428 0024                  		addq.b	#2,$24(a0)
0000E196 5069 000C                  		addq.w	#8,$C(a1)
0000E19A 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E1A0 08E9 0001 0022             		bset	#1,$22(a1)
0000E1A6 08A9 0003 0022             		bclr	#3,$22(a1)
0000E1AC 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E1B2 137C 0002 0024             		move.b	#2,$24(a1)
0000E1B8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E1BE 4228 0025                  		clr.b	$25(a0)
0000E1C2 303C 00CC                  		move.w	#$CC,d0
0000E1C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1CC                            
0000E1CC                            Obj41_AniUp:				; XREF: Obj41_Index
0000E1CC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1D2 6000 CAF4                  		bra.w	AnimateSprite
0000E1D6                            ; ===========================================================================
0000E1D6                            
0000E1D6                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E1D6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E1DC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E1E0 4E75                       		rts	
0000E1E2                            ; ===========================================================================
0000E1E2                            
0000E1E2                            Obj41_LR:				; XREF: Obj41_Index
0000E1E2 323C 0013                  		move.w	#$13,d1
0000E1E6 343C 000E                  		move.w	#$E,d2
0000E1EA 363C 000F                  		move.w	#$F,d3
0000E1EE 3828 0008                  		move.w	8(a0),d4
0000E1F2 6100 0000                  		bsr.w	SolidObject
0000E1F6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1FC 6600                       		bne.s	loc_DC0C
0000E1FE 117C 0008 0024             		move.b	#8,$24(a0)
0000E204                            
0000E204                            loc_DC0C:
0000E204 0828 0005 0022             		btst	#5,$22(a0)
0000E20A 6600                       		bne.s	Obj41_BounceLR
0000E20C 4E75                       		rts	
0000E20E                            ; ===========================================================================
0000E20E                            
0000E20E                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E20E 5428 0024                  		addq.b	#2,$24(a0)
0000E212 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E218 5069 0008                  		addq.w	#8,8(a1)
0000E21C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E222 6600                       		bne.s	loc_DC36	; if yes, branch
0000E224 0469 0010 0008             		subi.w	#$10,8(a1)
0000E22A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E22E                            
0000E22E                            loc_DC36:
0000E22E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E234 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E23A 0869 0000 0022             		bchg	#0,$22(a1)
0000E240 0829 0002 0022             		btst	#2,$22(a1)
0000E246 6600                       		bne.s	loc_DC56
0000E248 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E24E                            
0000E24E                            loc_DC56:
0000E24E 08A8 0005 0022             		bclr	#5,$22(a0)
0000E254 08A9 0005 0022             		bclr	#5,$22(a1)
0000E25A 303C 00CC                  		move.w	#$CC,d0
0000E25E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E264                            
0000E264                            Obj41_AniLR:				; XREF: Obj41_Index
0000E264 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E26A 6000 CA5C                  		bra.w	AnimateSprite
0000E26E                            ; ===========================================================================
0000E26E                            
0000E26E                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E26E 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E274 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E278 4E75                       		rts	
0000E27A                            ; ===========================================================================
0000E27A                            
0000E27A                            Obj41_Dwn:				; XREF: Obj41_Index
0000E27A 323C 001B                  		move.w	#$1B,d1
0000E27E 343C 0008                  		move.w	#8,d2
0000E282 363C 0010                  		move.w	#$10,d3
0000E286 3828 0008                  		move.w	8(a0),d4
0000E28A 6100 0000                  		bsr.w	SolidObject
0000E28E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E294 6600                       		bne.s	loc_DCA4
0000E296 117C 000E 0024             		move.b	#$E,$24(a0)
0000E29C                            
0000E29C                            loc_DCA4:
0000E29C 4A28 0025                  		tst.b	$25(a0)
0000E2A0 6600                       		bne.s	locret_DCAE
0000E2A2 4A44                       		tst.w	d4
0000E2A4 6B00                       		bmi.s	Obj41_BounceDwn
0000E2A6                            
0000E2A6                            locret_DCAE:
0000E2A6 4E75                       		rts	
0000E2A8                            ; ===========================================================================
0000E2A8                            
0000E2A8                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E2A8 5428 0024                  		addq.b	#2,$24(a0)
0000E2AC 5169 000C                  		subq.w	#8,$C(a1)
0000E2B0 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E2B6 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E2BA 08E9 0001 0022             		bset	#1,$22(a1)
0000E2C0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E2C6 137C 0002 0024             		move.b	#2,$24(a1)
0000E2CC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E2D2 4228 0025                  		clr.b	$25(a0)
0000E2D6 303C 00CC                  		move.w	#$CC,d0
0000E2DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E2E0                            
0000E2E0                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E2E0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E2E6 6000 C9E0                  		bra.w	AnimateSprite
0000E2EA                            ; ===========================================================================
0000E2EA                            
0000E2EA                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E2EA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E2F0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E2F4 4E75                       		rts	
0000E2F6                            ; ===========================================================================
0000E2F6                            Ani_obj41:
0000E2F6                            	include "_anim\obj41.asm"
0000E2F6                            ; ---------------------------------------------------------------------------
0000E2F6                            ; Animation script - springs
0000E2F6                            ; ---------------------------------------------------------------------------
0000E2F6 0000                       		dc.w byte_DD02-Ani_obj41
0000E2F8 0000                       		dc.w byte_DD0E-Ani_obj41
0000E2FA 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E306 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E312                            		even
0000E312                            		even
0000E312                            
0000E312                            ; ---------------------------------------------------------------------------
0000E312                            ; Sprite mappings - springs
0000E312                            ; ---------------------------------------------------------------------------
0000E312                            Map_obj41:
0000E312                            	include "_maps\obj41.asm"
0000E312                            ; ---------------------------------------------------------------------------
0000E312                            ; Sprite mappings - springs
0000E312                            ; ---------------------------------------------------------------------------
0000E312 0000                       		dc.w byte_DD26-Map_obj41
0000E314 0000                       		dc.w byte_DD31-Map_obj41
0000E316 0000                       		dc.w byte_DD37-Map_obj41
0000E318 0000                       		dc.w byte_DD47-Map_obj41
0000E31A 0000                       		dc.w byte_DD4D-Map_obj41
0000E31C 0000                       		dc.w byte_DD53-Map_obj41
0000E31E 02                         byte_DD26:	dc.b 2
0000E31F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E324 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E329 01                         byte_DD31:	dc.b 1
0000E32A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E32F 03                         byte_DD37:	dc.b 3
0000E330 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E335 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E33A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E33F 01                         byte_DD47:	dc.b 1
0000E340 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E345 01                         byte_DD4D:	dc.b 1
0000E346 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E34B 04                         byte_DD53:	dc.b 4
0000E34C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E351 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E356 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E35B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E360                            		even
0000E360                            		even
0000E360                            
0000E360                            ; ===========================================================================
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            ; Object 42 - Newtron enemy (GHZ)
0000E360                            ; ---------------------------------------------------------------------------
0000E360                            
0000E360                            Obj42:					; XREF: Obj_Index
0000E360 7000                       		moveq	#0,d0
0000E362 1028 0024                  		move.b	$24(a0),d0
0000E366 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E36A 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E36E                            ; ===========================================================================
0000E36E 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E370 0000                       		dc.w Obj42_Action-Obj42_Index
0000E372 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E374                            ; ===========================================================================
0000E374                            
0000E374                            Obj42_Main:				; XREF: Obj42_Index
0000E374 5428 0024                  		addq.b	#2,$24(a0)
0000E378 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E380 317C 049B 0002             		move.w	#$49B,2(a0)
0000E386 117C 0004 0001             		move.b	#4,1(a0)
0000E38C 117C 0004 0018             		move.b	#4,$18(a0)
0000E392 117C 0014 0019             		move.b	#$14,$19(a0)
0000E398 117C 0010 0016             		move.b	#$10,$16(a0)
0000E39E 117C 0008 0017             		move.b	#8,$17(a0)
0000E3A4                            
0000E3A4                            Obj42_Action:				; XREF: Obj42_Index
0000E3A4 7000                       		moveq	#0,d0
0000E3A6 1028 0025                  		move.b	$25(a0),d0
0000E3AA 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E3AE 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E3B2 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E3B8 6100 C90E                  		bsr.w	AnimateSprite
0000E3BC 6000 0000                  		bra.w	MarkObjGone
0000E3C0                            ; ===========================================================================
0000E3C0 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E3C2 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E3C4 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E3C6 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E3C8 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E3CA                            ; ===========================================================================
0000E3CA                            
0000E3CA                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E3CA 08E8 0000 0022             		bset	#0,$22(a0)
0000E3D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3D4 9068 0008                  		sub.w	8(a0),d0
0000E3D8 6400                       		bcc.s	loc_DDEA
0000E3DA 4440                       		neg.w	d0
0000E3DC 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3E2                            
0000E3E2                            loc_DDEA:
0000E3E2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E3E6 6400                       		bcc.s	locret_DE12	; if not, branch
0000E3E8 5428 0025                  		addq.b	#2,$25(a0)
0000E3EC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3F2 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3F6 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3F8 317C 249B 0002             		move.w	#$249B,2(a0)
0000E3FE 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E404 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E40A                            
0000E40A                            locret_DE12:
0000E40A 4E75                       		rts	
0000E40C                            ; ===========================================================================
0000E40C                            
0000E40C                            Obj42_Type00:				; XREF: Obj42_Index2
0000E40C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E412 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E414 08E8 0000 0022             		bset	#0,$22(a0)
0000E41A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E41E 9068 0008                  		sub.w	8(a0),d0
0000E422 6400                       		bcc.s	locret_DE32
0000E424 08A8 0000 0022             		bclr	#0,$22(a0)
0000E42A                            
0000E42A                            locret_DE32:
0000E42A 4E75                       		rts	
0000E42C                            ; ===========================================================================
0000E42C                            
0000E42C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E42C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E432 6600                       		bne.s	loc_DE42
0000E434 117C 000C 0020             		move.b	#$C,$20(a0)
0000E43A                            
0000E43A                            loc_DE42:
0000E43A 6100 F770                  		bsr.w	ObjectFall
0000E43E 6100 0000                  		bsr.w	ObjHitFloor
0000E442 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E444 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E446 D368 000C                  		add.w	d1,$C(a0)
0000E44A 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E450 5428 0025                  		addq.b	#2,$25(a0)
0000E454 117C 0002 001C             		move.b	#2,$1C(a0)
0000E45A 0828 0005 0002             		btst	#5,2(a0)
0000E460 6700                       		beq.s	Obj42_Move
0000E462 5228 001C                  		addq.b	#1,$1C(a0)
0000E466                            
0000E466                            Obj42_Move:
0000E466 117C 000D 0020             		move.b	#$D,$20(a0)
0000E46C 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E472 0828 0000 0022             		btst	#0,$22(a0)
0000E478 6600                       		bne.s	locret_DE86
0000E47A 4468 0010                  		neg.w	$10(a0)
0000E47E                            
0000E47E                            locret_DE86:
0000E47E 4E75                       		rts	
0000E480                            ; ===========================================================================
0000E480                            
0000E480                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E480 6100 F756                  		bsr.w	SpeedToPos
0000E484 6100 0000                  		bsr.w	ObjHitFloor
0000E488 0C41 FFF8                  		cmpi.w	#-8,d1
0000E48C 6D00                       		blt.s	loc_DEA2
0000E48E 0C41 000C                  		cmpi.w	#$C,d1
0000E492 6C00                       		bge.s	loc_DEA2
0000E494 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E498 4E75                       		rts	
0000E49A                            ; ===========================================================================
0000E49A                            
0000E49A                            loc_DEA2:
0000E49A 5428 0025                  		addq.b	#2,$25(a0)
0000E49E 4E75                       		rts	
0000E4A0                            ; ===========================================================================
0000E4A0                            
0000E4A0                            Obj42_Speed:				; XREF: Obj42_Index2
0000E4A0 6100 F736                  		bsr.w	SpeedToPos
0000E4A4 4E75                       		rts	
0000E4A6                            ; ===========================================================================
0000E4A6                            
0000E4A6                            Obj42_Type01:				; XREF: Obj42_Index2
0000E4A6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E4AC 6600                       		bne.s	Obj42_FireMissile
0000E4AE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E4B4                            
0000E4B4                            Obj42_FireMissile:
0000E4B4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E4BA 6600                       		bne.s	locret_DF14
0000E4BC 4A28 0032                  		tst.b	$32(a0)
0000E4C0 6600                       		bne.s	locret_DF14
0000E4C2 117C 0001 0032             		move.b	#1,$32(a0)
0000E4C8 6100 FBBA                  		bsr.w	SingleObjLoad
0000E4CC 6600                       		bne.s	locret_DF14
0000E4CE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E4D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E4D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E4DE 5169 000C                  		subq.w	#8,$C(a1)
0000E4E2 337C 0200 0010             		move.w	#$200,$10(a1)
0000E4E8 303C 0014                  		move.w	#$14,d0
0000E4EC 0828 0000 0022             		btst	#0,$22(a0)
0000E4F2 6600                       		bne.s	loc_DF04
0000E4F4 4440                       		neg.w	d0
0000E4F6 4469 0010                  		neg.w	$10(a1)
0000E4FA                            
0000E4FA                            loc_DF04:
0000E4FA D169 0008                  		add.w	d0,8(a1)
0000E4FE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E504 137C 0001 0028             		move.b	#1,$28(a1)
0000E50A                            
0000E50A                            locret_DF14:
0000E50A 4E75                       		rts	
0000E50C                            ; ===========================================================================
0000E50C                            
0000E50C                            Obj42_Delete:				; XREF: Obj42_Index
0000E50C 6000 F72C                  		bra.w	DeleteObject
0000E510                            ; ===========================================================================
0000E510                            Ani_obj42:
0000E510                            	include "_anim\obj42.asm"
0000E510                            ; ---------------------------------------------------------------------------
0000E510                            ; Animation script - Newtron enemy
0000E510                            ; ---------------------------------------------------------------------------
0000E510 0000                       		dc.w byte_DF24-Ani_obj42
0000E512 0000                       		dc.w byte_DF28-Ani_obj42
0000E514 0000                       		dc.w byte_DF30-Ani_obj42
0000E516 0000                       		dc.w byte_DF34-Ani_obj42
0000E518 0000                       		dc.w byte_DF38-Ani_obj42
0000E51A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E51E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E526 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E52A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E52E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E538                            		even
0000E538                            		even
0000E538                            
0000E538                            ; ---------------------------------------------------------------------------
0000E538                            ; Sprite mappings - Newtron enemy (GHZ)
0000E538                            ; ---------------------------------------------------------------------------
0000E538                            Map_obj42:
0000E538                            	include "_maps\obj42.asm"
0000E538                            ; ---------------------------------------------------------------------------
0000E538                            ; Sprite mappings - Newtron enemy (GHZ)
0000E538                            ; ---------------------------------------------------------------------------
0000E538 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E53C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E540 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E544 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E548 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E54C 0000                       		dc.w byte_DFF8-Map_obj42
0000E54E 03                         byte_DF58:	dc.b 3
0000E54F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E554 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E559 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E55E 03                         byte_DF68:	dc.b 3
0000E55F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E564 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E569 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E56E 03                         byte_DF78:	dc.b 3
0000E56F EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E574 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E579 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E57E 04                         byte_DF88:	dc.b 4
0000E57F EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E584 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E589 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E58E 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E593 03                         byte_DF9D:	dc.b 3
0000E594 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E599 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E59E 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E5A3 02                         byte_DFAD:	dc.b 2
0000E5A4 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5A9 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5AE 03                         byte_DFB8:	dc.b 3
0000E5AF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5B4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5B9 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E5BE 03                         byte_DFC8:	dc.b 3
0000E5BF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5C4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5C9 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E5CE 03                         byte_DFD8:	dc.b 3
0000E5CF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5D4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5D9 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E5DE 03                         byte_DFE8:	dc.b 3
0000E5DF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5E4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5E9 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E5EE 00                         byte_DFF8:	dc.b 0
0000E5F0 00                         		even
0000E5F0 00                         		even
0000E5F0                            
0000E5F0                            ; ===========================================================================
0000E5F0                            ; ---------------------------------------------------------------------------
0000E5F0                            ; Object 43 - Roller enemy (SYZ)
0000E5F0                            ; ---------------------------------------------------------------------------
0000E5F0                            
0000E5F0                            Obj43:					; XREF: Obj_Index
0000E5F0 7000                       		moveq	#0,d0
0000E5F2 1028 0024                  		move.b	$24(a0),d0
0000E5F6 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E5FA 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E5FE                            ; ===========================================================================
0000E5FE 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E600 0000                       		dc.w Obj43_Action-Obj43_Index
0000E602                            ; ===========================================================================
0000E602                            
0000E602                            Obj43_Main:				; XREF: Obj43_Index
0000E602 117C 000E 0016             		move.b	#$E,$16(a0)
0000E608 117C 0008 0017             		move.b	#8,$17(a0)
0000E60E 6100 F59C                  		bsr.w	ObjectFall
0000E612 6100 0000                  		bsr.w	ObjHitFloor
0000E616 4A41                       		tst.w	d1
0000E618 6A00                       		bpl.s	locret_E052
0000E61A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E61E 317C 0000 0012             		move.w	#0,$12(a0)
0000E624 5428 0024                  		addq.b	#2,$24(a0)
0000E628 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E630 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E636 117C 0004 0001             		move.b	#4,1(a0)
0000E63C 117C 0004 0018             		move.b	#4,$18(a0)
0000E642 117C 0010 0019             		move.b	#$10,$19(a0)
0000E648                            
0000E648                            locret_E052:
0000E648 4E75                       		rts	
0000E64A                            ; ===========================================================================
0000E64A                            
0000E64A                            Obj43_Action:				; XREF: Obj43_Index
0000E64A 7000                       		moveq	#0,d0
0000E64C 1028 0025                  		move.b	$25(a0),d0
0000E650 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E654 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E658 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E65E 6100 C668                  		bsr.w	AnimateSprite
0000E662 3028 0008                  		move.w	8(a0),d0
0000E666 0240 FF80                  		andi.w	#$FF80,d0
0000E66A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E66E 0441 0080                  		subi.w	#$80,d1
0000E672 0241 FF80                  		andi.w	#$FF80,d1
0000E676 9041                       		sub.w	d1,d0
0000E678 0C40 0280                  		cmpi.w	#$280,d0
0000E67C 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E680 6000 F57C                  		bra.w	DisplaySprite
0000E684                            ; ===========================================================================
0000E684                            
0000E684                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E684 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E688 7000                       		moveq	#0,d0
0000E68A 1028 0023                  		move.b	$23(a0),d0
0000E68E 6700                       		beq.s	Obj43_Delete
0000E690 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E696                            
0000E696                            Obj43_Delete:
0000E696 6000 F5A2                  		bra.w	DeleteObject
0000E69A                            ; ===========================================================================
0000E69A 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E69C 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E69E 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E6A0 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E6A2                            ; ===========================================================================
0000E6A2                            
0000E6A2                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E6A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6A6 0440 0100                  		subi.w	#$100,d0
0000E6AA 6500                       		bcs.s	loc_E0D2
0000E6AC 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E6B0 6500                       		bcs.s	loc_E0D2
0000E6B2 5828 0025                  		addq.b	#4,$25(a0)
0000E6B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6BC 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E6C2 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E6C8                            
0000E6C8                            loc_E0D2:
0000E6C8 588F                       		addq.l	#4,sp
0000E6CA 4E75                       		rts	
0000E6CC                            ; ===========================================================================
0000E6CC                            
0000E6CC                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E6CC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E6D2 6700                       		beq.s	loc_E0F8
0000E6D4 5368 0030                  		subq.w	#1,$30(a0)
0000E6D8 6A00                       		bpl.s	locret_E0F6
0000E6DA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E6E0 317C 0700 0010             		move.w	#$700,$10(a0)
0000E6E6 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E6EC                            
0000E6EC                            locret_E0F6:
0000E6EC 4E75                       		rts	
0000E6EE                            ; ===========================================================================
0000E6EE                            
0000E6EE                            loc_E0F8:
0000E6EE 5428 0025                  		addq.b	#2,$25(a0)
0000E6F2 4E75                       		rts	
0000E6F4                            ; ===========================================================================
0000E6F4                            
0000E6F4                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E6F4 6100 0000                  		bsr.w	Obj43_Stop
0000E6F8 6100 F4DE                  		bsr.w	SpeedToPos
0000E6FC 6100 0000                  		bsr.w	ObjHitFloor
0000E700 0C41 FFF8                  		cmpi.w	#-8,d1
0000E704 6D00                       		blt.s	Obj43_Jump
0000E706 0C41 000C                  		cmpi.w	#$C,d1
0000E70A 6C00                       		bge.s	Obj43_Jump
0000E70C D368 000C                  		add.w	d1,$C(a0)
0000E710 4E75                       		rts	
0000E712                            ; ===========================================================================
0000E712                            
0000E712                            Obj43_Jump:
0000E712 5428 0025                  		addq.b	#2,$25(a0)
0000E716 08E8 0000 0032             		bset	#0,$32(a0)
0000E71C 6700                       		beq.s	locret_E12E
0000E71E 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E724                            
0000E724                            locret_E12E:
0000E724 4E75                       		rts	
0000E726                            ; ===========================================================================
0000E726                            
0000E726                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E726 6100 F484                  		bsr.w	ObjectFall
0000E72A 4A68 0012                  		tst.w	$12(a0)
0000E72E 6B00                       		bmi.s	locret_E150
0000E730 6100 0000                  		bsr.w	ObjHitFloor
0000E734 4A41                       		tst.w	d1
0000E736 6A00                       		bpl.s	locret_E150
0000E738 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E73C 5528 0025                  		subq.b	#2,$25(a0)
0000E740 317C 0000 0012             		move.w	#0,$12(a0)
0000E746                            
0000E746                            locret_E150:
0000E746 4E75                       		rts	
0000E748                            
0000E748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E748                            
0000E748                            
0000E748                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E748 4A28 0032                  		tst.b	$32(a0)
0000E74C 6B00                       		bmi.s	locret_E188
0000E74E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E752 0440 0030                  		subi.w	#$30,d0
0000E756 9068 0008                  		sub.w	8(a0),d0
0000E75A 6400                       		bcc.s	locret_E188
0000E75C 117C 0000 001C             		move.b	#0,$1C(a0)
0000E762 117C 000E 0020             		move.b	#$E,$20(a0)
0000E768 4268 0010                  		clr.w	$10(a0)
0000E76C 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E772 117C 0002 0025             		move.b	#2,$25(a0)
0000E778 08E8 0007 0032             		bset	#7,$32(a0)
0000E77E                            
0000E77E                            locret_E188:
0000E77E 4E75                       		rts	
0000E780                            ; End of function Obj43_Stop
0000E780                            
0000E780                            ; ===========================================================================
0000E780                            Ani_obj43:
0000E780                            	include "_anim\obj43.asm"
0000E780                            ; ---------------------------------------------------------------------------
0000E780                            ; Animation script - Roller enemy
0000E780                            ; ---------------------------------------------------------------------------
0000E780 0000                       		dc.w byte_E190-Ani_obj43
0000E782 0000                       		dc.w byte_E196-Ani_obj43
0000E784 0000                       		dc.w byte_E19C-Ani_obj43
0000E786 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E78C 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E792 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E798 00                         		even
0000E798 00                         		even
0000E798                            
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            ; Sprite mappings - Roller enemy (SYZ)
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            Map_obj43:
0000E798                            	include "_maps\obj43.asm"
0000E798                            Map_61da:
0000E798 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E79A 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E79C 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E79E 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E7A0 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E7A2 02                         Map_61da_A: 	dc.b $2
0000E7A3 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E7A8 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E7AD 02                         Map_61da_15: 	dc.b $2
0000E7AE E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E7B3 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E7B8 01                         Map_61da_20: 	dc.b $1
0000E7B9 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E7BE 01                         Map_61da_26: 	dc.b $1
0000E7BF F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E7C4 01                         Map_61da_2C: 	dc.b $1
0000E7C5 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E7CA                            	even
0000E7CA                            	even
0000E7CA                            
0000E7CA                            ; ===========================================================================
0000E7CA                            ; ---------------------------------------------------------------------------
0000E7CA                            ; Object 44 - walls (GHZ)
0000E7CA                            ; ---------------------------------------------------------------------------
0000E7CA                            
0000E7CA                            Obj44:					; XREF: Obj_Index
0000E7CA 7000                       		moveq	#0,d0
0000E7CC 1028 0024                  		move.b	$24(a0),d0
0000E7D0 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E7D4 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E7D8                            ; ===========================================================================
0000E7D8 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E7DA 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E7DC 0000                       		dc.w Obj44_Display-Obj44_Index
0000E7DE                            ; ===========================================================================
0000E7DE                            
0000E7DE                            Obj44_Main:				; XREF: Obj44_Index
0000E7DE 5428 0024                  		addq.b	#2,$24(a0)
0000E7E2 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E7EA 317C 434C 0002             		move.w	#$434C,2(a0)
0000E7F0 0028 0004 0001             		ori.b	#4,1(a0)
0000E7F6 117C 0008 0019             		move.b	#8,$19(a0)
0000E7FC 117C 0006 0018             		move.b	#6,$18(a0)
0000E802 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E808 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E80E 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E810 5428 0024                  		addq.b	#2,$24(a0)
0000E814 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E816                            ; ===========================================================================
0000E816                            
0000E816                            Obj44_Solid:				; XREF: Obj44_Index
0000E816 323C 0013                  		move.w	#$13,d1
0000E81A 343C 0028                  		move.w	#$28,d2
0000E81E 6100 A70E                  		bsr.w	Obj44_SolidWall
0000E822                            
0000E822                            Obj44_Display:				; XREF: Obj44_Index
0000E822 6100 F3DA                  		bsr.w	DisplaySprite
0000E826 3028 0008                  		move.w	8(a0),d0
0000E82A 0240 FF80                  		andi.w	#$FF80,d0
0000E82E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E832 0441 0080                  		subi.w	#$80,d1
0000E836 0241 FF80                  		andi.w	#$FF80,d1
0000E83A 9041                       		sub.w	d1,d0
0000E83C 0C40 0280                  		cmpi.w	#$280,d0
0000E840 6200 F3F8                  		bhi.w	DeleteObject
0000E844 4E75                       		rts	
0000E846                            ; ===========================================================================
0000E846                            ; ---------------------------------------------------------------------------
0000E846                            ; Sprite mappings - walls (GHZ)
0000E846                            ; ---------------------------------------------------------------------------
0000E846                            Map_obj44:
0000E846                            	include "_maps\obj44.asm"
0000E846                            ; ---------------------------------------------------------------------------
0000E846                            ; Sprite mappings - walls (GHZ)
0000E846                            ; ---------------------------------------------------------------------------
0000E846 0000                       		dc.w byte_E256-Map_obj44
0000E848 0000                       		dc.w byte_E26B-Map_obj44
0000E84A 0000                       		dc.w byte_E280-Map_obj44
0000E84C 04                         byte_E256:	dc.b 4
0000E84D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E852 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E857 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E85C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E861 04                         byte_E26B:	dc.b 4
0000E862 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E867 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E86C 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E871 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E876 04                         byte_E280:	dc.b 4
0000E877 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E87C F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E881 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E886 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E88C 00                         		even
0000E88C 00                         		even
0000E88C                            
0000E88C                            ; ===========================================================================
0000E88C                            ; ---------------------------------------------------------------------------
0000E88C                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E88C                            ; ---------------------------------------------------------------------------
0000E88C                            
0000E88C                            Obj13:					; XREF: Obj_Index
0000E88C 7000                       		moveq	#0,d0
0000E88E 1028 0024                  		move.b	$24(a0),d0
0000E892 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E896 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E89A 6000 0000                  		bra.w	Obj14_ChkDel
0000E89E                            ; ===========================================================================
0000E89E 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E8A0 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E8A2                            ; ---------------------------------------------------------------------------
0000E8A2                            ;
0000E8A2                            ; Lava ball production rates
0000E8A2                            ;
0000E8A2 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E8A8                            ; ===========================================================================
0000E8A8                            
0000E8A8                            Obj13_Main:				; XREF: Obj13_Index
0000E8A8 5428 0024                  		addq.b	#2,$24(a0)
0000E8AC 1028 0028                  		move.b	$28(a0),d0
0000E8B0 E848                       		lsr.w	#4,d0
0000E8B2 0240 000F                  		andi.w	#$F,d0
0000E8B6 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E8BC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E8C2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E8C8                            
0000E8C8                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E8C8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E8CC 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E8CE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E8D4 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E8D8 6600                       		bne.s	locret_E302
0000E8DA 6100 F7A8                  		bsr.w	SingleObjLoad
0000E8DE 6600                       		bne.s	locret_E302
0000E8E0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E8E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8F0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8F6                            
0000E8F6                            locret_E302:
0000E8F6 4E75                       		rts	
0000E8F8                            ; ===========================================================================
0000E8F8                            ; ---------------------------------------------------------------------------
0000E8F8                            ; Object 14 - lava balls (MZ, SLZ)
0000E8F8                            ; ---------------------------------------------------------------------------
0000E8F8                            
0000E8F8                            Obj14:					; XREF: Obj_Index
0000E8F8 7000                       		moveq	#0,d0
0000E8FA 1028 0024                  		move.b	$24(a0),d0
0000E8FE 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E902 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E906 6000 F2F6                  		bra.w	DisplaySprite
0000E90A                            ; ===========================================================================
0000E90A 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E90C 0000                       		dc.w Obj14_Action-Obj14_Index
0000E90E 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E910                            
0000E910 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E91A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E922                            ; ===========================================================================
0000E922                            
0000E922                            Obj14_Main:				; XREF: Obj14_Index
0000E922 5428 0024                  		addq.b	#2,$24(a0)
0000E926 117C 0008 0016             		move.b	#8,$16(a0)
0000E92C 117C 0008 0017             		move.b	#8,$17(a0)
0000E932 217C 0000 B8BC 0004        		move.l	#Map_obj14,4(a0)
0000E93A 317C 0345 0002             		move.w	#$345,2(a0)
0000E940 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E946 6600                       		bne.s	loc_E35A
0000E948 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E94E                            
0000E94E                            loc_E35A:
0000E94E 117C 0004 0001             		move.b	#4,1(a0)
0000E954 117C 0003 0018             		move.b	#3,$18(a0)
0000E95A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E960 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E966 4A28 0029                  		tst.b	$29(a0)
0000E96A 6700                       		beq.s	Obj14_SetSpeed
0000E96C 5428 0018                  		addq.b	#2,$18(a0)
0000E970                            
0000E970                            Obj14_SetSpeed:
0000E970 7000                       		moveq	#0,d0
0000E972 1028 0028                  		move.b	$28(a0),d0
0000E976 D040                       		add.w	d0,d0
0000E978 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E97E 117C 0008 0019             		move.b	#8,$19(a0)
0000E984 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E98A 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E98C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E992 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E998 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E99E 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E9A4                            
0000E9A4                            Obj14_PlaySnd:
0000E9A4 303C 00AE                  		move.w	#$AE,d0
0000E9A8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E9AE                            
0000E9AE                            Obj14_Action:				; XREF: Obj14_Index
0000E9AE 7000                       		moveq	#0,d0
0000E9B0 1028 0028                  		move.b	$28(a0),d0
0000E9B4 D040                       		add.w	d0,d0
0000E9B6 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E9BA 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E9BE 6100 F218                  		bsr.w	SpeedToPos
0000E9C2 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E9C8 6100 C2FE                  		bsr.w	AnimateSprite
0000E9CC                            
0000E9CC                            Obj14_ChkDel:				; XREF: Obj13
0000E9CC 3028 0008                  		move.w	8(a0),d0
0000E9D0 0240 FF80                  		andi.w	#$FF80,d0
0000E9D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9D8 0441 0080                  		subi.w	#$80,d1
0000E9DC 0241 FF80                  		andi.w	#$FF80,d1
0000E9E0 9041                       		sub.w	d1,d0
0000E9E2 0C40 0280                  		cmpi.w	#$280,d0
0000E9E6 6200 F252                  		bhi.w	DeleteObject
0000E9EA 4E75                       		rts	
0000E9EC                            ; ===========================================================================
0000E9EC 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9F0 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9F4 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9F8 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E9FC 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E9FE                            ; ===========================================================================
0000E9FE                            ; lavaball types 00-03 fly up and fall back down
0000E9FE                            
0000E9FE                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E9FE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EA04 3028 0030                  		move.w	$30(a0),d0
0000EA08 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EA0C 6400                       		bcc.s	loc_E41E	; if not, branch
0000EA0E 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EA12                            
0000EA12                            loc_E41E:
0000EA12 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA18 4A68 0012                  		tst.w	$12(a0)
0000EA1C 6A00                       		bpl.s	locret_E430
0000EA1E 08E8 0001 0022             		bset	#1,$22(a0)
0000EA24                            
0000EA24                            locret_E430:
0000EA24 4E75                       		rts	
0000EA26                            ; ===========================================================================
0000EA26                            ; lavaball type	04 flies up until it hits the ceiling
0000EA26                            
0000EA26                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EA26 08E8 0001 0022             		bset	#1,$22(a0)
0000EA2C 6100 0000                  		bsr.w	ObjHitCeiling
0000EA30 4A41                       		tst.w	d1
0000EA32 6A00                       		bpl.s	locret_E452
0000EA34 117C 0008 0028             		move.b	#8,$28(a0)
0000EA3A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA40 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EA46                            
0000EA46                            locret_E452:
0000EA46 4E75                       		rts	
0000EA48                            ; ===========================================================================
0000EA48                            ; lavaball type	05 falls down until it hits the	floor
0000EA48                            
0000EA48                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EA48 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA4E 6100 0000                  		bsr.w	ObjHitFloor
0000EA52 4A41                       		tst.w	d1
0000EA54 6A00                       		bpl.s	locret_E474
0000EA56 117C 0008 0028             		move.b	#8,$28(a0)
0000EA5C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA62 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA68                            
0000EA68                            locret_E474:
0000EA68 4E75                       		rts	
0000EA6A                            ; ===========================================================================
0000EA6A                            ; lavaball types 06-07 move sideways
0000EA6A                            
0000EA6A                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA6A 08E8 0000 0022             		bset	#0,$22(a0)
0000EA70 76F8                       		moveq	#-8,d3
0000EA72 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA76 4A41                       		tst.w	d1
0000EA78 6A00                       		bpl.s	locret_E498
0000EA7A 117C 0008 0028             		move.b	#8,$28(a0)
0000EA80 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA86 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA8C                            
0000EA8C                            locret_E498:
0000EA8C 4E75                       		rts	
0000EA8E                            ; ===========================================================================
0000EA8E                            
0000EA8E                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA8E 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA94 7608                       		moveq	#8,d3
0000EA96 6100 0000                  		bsr.w	ObjHitWallRight
0000EA9A 4A41                       		tst.w	d1
0000EA9C 6A00                       		bpl.s	locret_E4BC
0000EA9E 117C 0008 0028             		move.b	#8,$28(a0)
0000EAA4 117C 0003 001C             		move.b	#3,$1C(a0)
0000EAAA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EAB0                            
0000EAB0                            locret_E4BC:
0000EAB0 4E75                       		rts	
0000EAB2                            ; ===========================================================================
0000EAB2                            
0000EAB2                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EAB2 4E75                       		rts	
0000EAB4                            ; ===========================================================================
0000EAB4                            
0000EAB4                            Obj14_Delete:				; XREF: Obj14_Index
0000EAB4 6000 F184                  		bra.w	DeleteObject
0000EAB8                            ; ===========================================================================
0000EAB8                            Ani_obj14:
0000EAB8                            	include "_anim\obj14.asm"
0000EAB8                            ; ---------------------------------------------------------------------------
0000EAB8                            ; Animation script - lava balls
0000EAB8                            ; ---------------------------------------------------------------------------
0000EAB8 0000                       		dc.w byte_E4CC-Ani_obj14
0000EABA 0000                       		dc.w byte_E4D2-Ani_obj14
0000EABC 0000                       		dc.w byte_E4D6-Ani_obj14
0000EABE 0000                       		dc.w byte_E4DC-Ani_obj14
0000EAC0 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EAC6 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EACA 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EAD0 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EAD4                            		even
0000EAD4                            		even
0000EAD4                            
0000EAD4                            ; ===========================================================================
0000EAD4                            ; ---------------------------------------------------------------------------
0000EAD4                            ; Object 6D - flame thrower (SBZ)
0000EAD4                            ; ---------------------------------------------------------------------------
0000EAD4                            
0000EAD4                            Obj6D:					; XREF: Obj_Index
0000EAD4 7000                       		moveq	#0,d0
0000EAD6 1028 0024                  		move.b	$24(a0),d0
0000EADA 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EADE 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EAE2                            ; ===========================================================================
0000EAE2 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EAE4 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EAE6                            ; ===========================================================================
0000EAE6                            
0000EAE6                            Obj6D_Main:				; XREF: Obj6D_Index
0000EAE6 5428 0024                  		addq.b	#2,$24(a0)
0000EAEA 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EAF2 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAF8 0028 0004 0001             		ori.b	#4,1(a0)
0000EAFE 117C 0001 0018             		move.b	#1,$18(a0)
0000EB04 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB0A 117C 000C 0019             		move.b	#$C,$19(a0)
0000EB10 1028 0028                  		move.b	$28(a0),d0
0000EB14 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EB18 D040                       		add.w	d0,d0		; multiply by 2
0000EB1A 3140 0030                  		move.w	d0,$30(a0)
0000EB1E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EB22 1028 0028                  		move.b	$28(a0),d0
0000EB26 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EB2A EB48                       		lsl.w	#5,d0		; multiply by $20
0000EB2C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EB30 117C 000A 0036             		move.b	#$A,$36(a0)
0000EB36 0828 0001 0022             		btst	#1,$22(a0)
0000EB3C 6700                       		beq.s	Obj6D_Action
0000EB3E 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB44 117C 0015 0036             		move.b	#$15,$36(a0)
0000EB4A                            
0000EB4A                            Obj6D_Action:				; XREF: Obj6D_Index
0000EB4A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EB4E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EB50 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB56 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB5C 6700                       		beq.s	loc_E57A
0000EB5E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB64 303C 00B3                  		move.w	#$B3,d0
0000EB68 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB6E                            
0000EB6E                            loc_E57A:
0000EB6E 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB74 6100 C152                  		bsr.w	AnimateSprite
0000EB78 117C 0000 0020             		move.b	#0,$20(a0)
0000EB7E 1028 0036                  		move.b	$36(a0),d0
0000EB82 B028 001A                  		cmp.b	$1A(a0),d0
0000EB86 6600                       		bne.s	Obj6D_ChkDel
0000EB88 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB8E                            
0000EB8E                            Obj6D_ChkDel:
0000EB8E 3028 0008                  		move.w	8(a0),d0
0000EB92 0240 FF80                  		andi.w	#$FF80,d0
0000EB96 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB9A 0441 0080                  		subi.w	#$80,d1
0000EB9E 0241 FF80                  		andi.w	#$FF80,d1
0000EBA2 9041                       		sub.w	d1,d0
0000EBA4 0C40 0280                  		cmpi.w	#$280,d0
0000EBA8 6200 F090                  		bhi.w	DeleteObject
0000EBAC 6000 F050                  		bra.w	DisplaySprite
0000EBB0                            ; ===========================================================================
0000EBB0                            Ani_obj6D:
0000EBB0                            	include "_anim\obj6D.asm"
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0                            ; Animation script - flamethrower (SBZ)
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EBB2 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EBB4 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EBB6 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EBB8 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EBC6 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EBD0 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EBDE 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EBE8                            		even
0000EBE8                            		even
0000EBE8                            
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            ; Sprite mappings - flame thrower (SBZ)
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            Map_obj6D:
0000EBE8                            	include "_maps\obj6D.asm"
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            ; Sprite mappings - flame thrower (SBZ)
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EBEC 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EBF0 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EBF4 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBF8 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EBFC 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EC00 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EC04 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EC08 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EC0C 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EC10 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EC14 01                         byte_E620:	dc.b 1
0000EC15 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC1A 02                         byte_E626:	dc.b 2
0000EC1B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC20 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC25 02                         byte_E631:	dc.b 2
0000EC26 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC2B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC30 03                         byte_E63C:	dc.b 3
0000EC31 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC36 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC3B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC40 03                         byte_E64C:	dc.b 3
0000EC41 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC46 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC4B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC50 04                         byte_E65C:	dc.b 4
0000EC51 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC56 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC5B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC60 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC65 04                         byte_E671:	dc.b 4
0000EC66 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC6B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC70 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC75 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC7A 05                         byte_E686:	dc.b 5
0000EC7B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC80 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC85 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC8A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC8F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC94 05                         byte_E6A0:	dc.b 5
0000EC95 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC9A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC9F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECA4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECA9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECAE 06                         byte_E6BA:	dc.b 6
0000ECAF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ECB4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ECB9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECBE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ECC3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECC8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECCD 06                         byte_E6D9:	dc.b 6
0000ECCE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ECD3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECD8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ECDD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECE2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECE7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECEC 01                         byte_E6F8:	dc.b 1
0000ECED 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF2 02                         byte_E6FE:	dc.b 2
0000ECF3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECFD 02                         byte_E709:	dc.b 2
0000ECFE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED03 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED08 03                         byte_E714:	dc.b 3
0000ED09 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED0E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED13 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED18 03                         byte_E724:	dc.b 3
0000ED19 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED1E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED23 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED28 04                         byte_E734:	dc.b 4
0000ED29 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED2E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED33 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED38 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED3D 04                         byte_E749:	dc.b 4
0000ED3E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED43 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED48 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED4D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED52 05                         byte_E75E:	dc.b 5
0000ED53 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED58 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED5D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED62 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED67 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED6C 05                         byte_E778:	dc.b 5
0000ED6D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED72 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED77 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED7C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED81 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED86 06                         byte_E792:	dc.b 6
0000ED87 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED8C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED91 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED96 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED9B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDA5 06                         byte_E7B1:	dc.b 6
0000EDA6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EDAB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDB0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EDB5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDBA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDBF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDC4                            		even
0000EDC4                            		even
0000EDC4                            
0000EDC4                            ; ===========================================================================
0000EDC4                            ; ---------------------------------------------------------------------------
0000EDC4                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EDC4                            ; ---------------------------------------------------------------------------
0000EDC4                            
0000EDC4                            Obj46:					; XREF: Obj_Index
0000EDC4 7000                       		moveq	#0,d0
0000EDC6 1028 0024                  		move.b	$24(a0),d0
0000EDCA 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EDCE 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EDD2                            ; ===========================================================================
0000EDD2 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EDD4 0000                       		dc.w Obj46_Action-Obj46_Index
0000EDD6                            ; ===========================================================================
0000EDD6                            
0000EDD6                            Obj46_Main:				; XREF: Obj46_Index
0000EDD6 5428 0024                  		addq.b	#2,$24(a0)
0000EDDA 117C 000F 0016             		move.b	#$F,$16(a0)
0000EDE0 117C 000F 0017             		move.b	#$F,$17(a0)
0000EDE6 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EDEE 317C 4000 0002             		move.w	#$4000,2(a0)
0000EDF4 117C 0004 0001             		move.b	#4,1(a0)
0000EDFA 117C 0003 0018             		move.b	#3,$18(a0)
0000EE00 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE06 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE0C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EE12                            
0000EE12                            Obj46_Action:				; XREF: Obj46_Index
0000EE12 4A28 0001                  		tst.b	1(a0)
0000EE16 6A00                       		bpl.s	Obj46_ChkDel
0000EE18 7000                       		moveq	#0,d0
0000EE1A 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EE1E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EE22 D040                       		add.w	d0,d0
0000EE24 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EE28 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EE2C 323C 001B                  		move.w	#$1B,d1
0000EE30 343C 0010                  		move.w	#$10,d2
0000EE34 363C 0011                  		move.w	#$11,d3
0000EE38 3828 0008                  		move.w	8(a0),d4
0000EE3C 6100 0000                  		bsr.w	SolidObject
0000EE40                            
0000EE40                            Obj46_ChkDel:
0000EE40 6100 EDBC                  		bsr.w	DisplaySprite
0000EE44 3028 0008                  		move.w	8(a0),d0
0000EE48 0240 FF80                  		andi.w	#$FF80,d0
0000EE4C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE50 0441 0080                  		subi.w	#$80,d1
0000EE54 0241 FF80                  		andi.w	#$FF80,d1
0000EE58 9041                       		sub.w	d1,d0
0000EE5A 0C40 0280                  		cmpi.w	#$280,d0
0000EE5E 6200 EDDA                  		bhi.w	DeleteObject
0000EE62 4E75                       		rts	
0000EE64                            ; ===========================================================================
0000EE64 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE66 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE68 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE6A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE6C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE6E                            ; ===========================================================================
0000EE6E                            
0000EE6E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE6E 4E75                       		rts	
0000EE70                            ; ===========================================================================
0000EE70                            
0000EE70                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE70 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE74 9068 0008                  		sub.w	8(a0),d0
0000EE78 6400                       		bcc.s	loc_E888
0000EE7A 4440                       		neg.w	d0
0000EE7C                            
0000EE7C                            loc_E888:
0000EE7C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE80 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE82 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE88                            
0000EE88                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE88 7000                       		moveq	#0,d0
0000EE8A 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE8E 0828 0003 0028             		btst	#3,$28(a0)
0000EE94 6700                       		beq.s	loc_E8A8
0000EE96 4440                       		neg.w	d0
0000EE98 0640 0010                  		addi.w	#$10,d0
0000EE9C                            
0000EE9C                            loc_E8A8:
0000EE9C 3228 0030                  		move.w	$30(a0),d1
0000EEA0 9240                       		sub.w	d0,d1
0000EEA2 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EEA6 4E75                       		rts	
0000EEA8                            ; ===========================================================================
0000EEA8                            
0000EEA8                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EEA8 6100 ED2E                  		bsr.w	SpeedToPos
0000EEAC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EEB2 6100 0000                  		bsr.w	ObjHitFloor
0000EEB6 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EEB8 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EEBC D368 000C                  		add.w	d1,$C(a0)
0000EEC0 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EEC4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EECA 117C 0004 0028             		move.b	#4,$28(a0)
0000EED0 3011                       		move.w	(a1),d0
0000EED2 0240 03FF                  		andi.w	#$3FF,d0
0000EED6 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EEDA 6400                       		bcc.s	locret_E8EE
0000EEDC 117C 0000 0028             		move.b	#0,$28(a0)
0000EEE2                            
0000EEE2                            locret_E8EE:
0000EEE2 4E75                       		rts	
0000EEE4                            ; ===========================================================================
0000EEE4                            
0000EEE4                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EEE4 7000                       		moveq	#0,d0
0000EEE6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EEEA E648                       		lsr.w	#3,d0
0000EEEC 3228 0030                  		move.w	$30(a0),d1
0000EEF0 9240                       		sub.w	d0,d1
0000EEF2 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEF6 4E75                       		rts	
0000EEF8                            ; ===========================================================================
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8                            Map_obj46:
0000EEF8                            	include "_maps\obj46.asm"
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEF8                            ; ---------------------------------------------------------------------------
0000EEF8 0000                       		dc.w byte_E906-Map_obj46
0000EEFA 01                         byte_E906:	dc.b 1
0000EEFB F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EF00                            		even
0000EF00                            		even
0000EF00                            
0000EF00                            ; ===========================================================================
0000EF00                            ; ---------------------------------------------------------------------------
0000EF00                            ; Object 12 - lamp (SYZ)
0000EF00                            ; ---------------------------------------------------------------------------
0000EF00                            
0000EF00                            Obj12:					; XREF: Obj_Index
0000EF00 7000                       		moveq	#0,d0
0000EF02 1028 0024                  		move.b	$24(a0),d0
0000EF06 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EF0A 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EF0E                            ; ===========================================================================
0000EF0E 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EF10 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EF12                            ; ===========================================================================
0000EF12                            
0000EF12                            Obj12_Main:				; XREF: Obj12_Index
0000EF12 5428 0024                  		addq.b	#2,$24(a0)
0000EF16 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EF1E 317C 0000 0002             		move.w	#0,2(a0)
0000EF24 117C 0004 0001             		move.b	#4,1(a0)
0000EF2A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF30 117C 0006 0018             		move.b	#6,$18(a0)
0000EF36                            
0000EF36                            Obj12_Animate:				; XREF: Obj12_Index
0000EF36 5328 001E                  		subq.b	#1,$1E(a0)
0000EF3A 6A00                       		bpl.s	Obj12_ChkDel
0000EF3C 117C 0007 001E             		move.b	#7,$1E(a0)
0000EF42 5228 001A                  		addq.b	#1,$1A(a0)
0000EF46 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EF4C 6500                       		bcs.s	Obj12_ChkDel
0000EF4E 117C 0000 001A             		move.b	#0,$1A(a0)
0000EF54                            
0000EF54                            Obj12_ChkDel:
0000EF54 3028 0008                  		move.w	8(a0),d0
0000EF58 0240 FF80                  		andi.w	#$FF80,d0
0000EF5C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF60 0441 0080                  		subi.w	#$80,d1
0000EF64 0241 FF80                  		andi.w	#$FF80,d1
0000EF68 9041                       		sub.w	d1,d0
0000EF6A 0C40 0280                  		cmpi.w	#$280,d0
0000EF6E 6200 ECCA                  		bhi.w	DeleteObject
0000EF72 6000 EC8A                  		bra.w	DisplaySprite
0000EF76                            ; ===========================================================================
0000EF76                            ; ---------------------------------------------------------------------------
0000EF76                            ; Sprite mappings - lamp (SYZ)
0000EF76                            ; ---------------------------------------------------------------------------
0000EF76                            Map_obj12:
0000EF76                            	include "_maps\obj12.asm"
0000EF76                            ; ---------------------------------------------------------------------------
0000EF76                            ; Sprite mappings - lamp (SYZ)
0000EF76                            ; ---------------------------------------------------------------------------
0000EF76 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF7A 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF7E 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF82 02                         byte_E98E:	dc.b 2
0000EF83 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF88 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF8D 02                         byte_E999:	dc.b 2
0000EF8E F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF93 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF98 02                         byte_E9A4:	dc.b 2
0000EF99 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF9E 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EFA3 02                         byte_E9AF:	dc.b 2
0000EFA4 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EFA9 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EFAE 02                         byte_E9BA:	dc.b 2
0000EFAF F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EFB4 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EFB9 02                         byte_E9C5:	dc.b 2
0000EFBA F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EFBF 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EFC4                            		even
0000EFC4                            		even
0000EFC4                            
0000EFC4                            ; ===========================================================================
0000EFC4                            ; ---------------------------------------------------------------------------
0000EFC4                            ; Object 47 - pinball bumper (SYZ)
0000EFC4                            ; ---------------------------------------------------------------------------
0000EFC4                            
0000EFC4                            Obj47:					; XREF: Obj_Index
0000EFC4 7000                       		moveq	#0,d0
0000EFC6 1028 0024                  		move.b	$24(a0),d0
0000EFCA 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EFCE 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EFD2                            ; ===========================================================================
0000EFD2 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EFD4 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EFD6                            ; ===========================================================================
0000EFD6                            
0000EFD6                            Obj47_Main:				; XREF: Obj47_Index
0000EFD6 5428 0024                  		addq.b	#2,$24(a0)
0000EFDA 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EFE2 317C 0380 0002             		move.w	#$380,2(a0)
0000EFE8 117C 0004 0001             		move.b	#4,1(a0)
0000EFEE 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFF4 117C 0001 0018             		move.b	#1,$18(a0)
0000EFFA 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F000                            
0000F000                            Obj47_Hit:				; XREF: Obj47_Index
0000F000 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F004 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F008 4228 0021                  		clr.b	$21(a0)
0000F00C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F010 3228 0008                  		move.w	8(a0),d1
0000F014 3428 000C                  		move.w	$C(a0),d2
0000F018 9269 0008                  		sub.w	8(a1),d1
0000F01C 9469 000C                  		sub.w	$C(a1),d2
0000F020 4EB9 0000 2F32             		jsr	(CalcAngle).l
0000F026 4EB9 0000 2C64             		jsr	(CalcSine).l
0000F02C C3FC F900                  		muls.w	#-$700,d1
0000F030 E081                       		asr.l	#8,d1
0000F032 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F036 C1FC F900                  		muls.w	#-$700,d0
0000F03A E080                       		asr.l	#8,d0
0000F03C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F040 08E9 0001 0022             		bset	#1,$22(a1)
0000F046 08A9 0004 0022             		bclr	#4,$22(a1)
0000F04C 08A9 0005 0022             		bclr	#5,$22(a1)
0000F052 4229 003C                  		clr.b	$3C(a1)
0000F056 117C 0001 001C             		move.b	#1,$1C(a0)
0000F05C 303C 00B4                  		move.w	#$B4,d0
0000F060 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F066 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F06A 7000                       		moveq	#0,d0
0000F06C 1028 0023                  		move.b	$23(a0),d0
0000F070 6700                       		beq.s	Obj47_Score
0000F072 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F078 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F07A 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F07E                            
0000F07E                            Obj47_Score:
0000F07E 7001                       		moveq	#1,d0
0000F080 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F086 6100 EFFC                  		bsr.w	SingleObjLoad
0000F08A 6600                       		bne.s	Obj47_Display
0000F08C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F090 3368 0008 0008             		move.w	8(a0),8(a1)
0000F096 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F09C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F0A2                            
0000F0A2                            Obj47_Display:
0000F0A2 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F0A8 6100 BC1E                  		bsr.w	AnimateSprite
0000F0AC 3028 0008                  		move.w	8(a0),d0
0000F0B0 0240 FF80                  		andi.w	#$FF80,d0
0000F0B4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0B8 0441 0080                  		subi.w	#$80,d1
0000F0BC 0241 FF80                  		andi.w	#$FF80,d1
0000F0C0 9041                       		sub.w	d1,d0
0000F0C2 0C40 0280                  		cmpi.w	#$280,d0
0000F0C6 6200                       		bhi.s	Obj47_ChkHit
0000F0C8 6000 EB34                  		bra.w	DisplaySprite
0000F0CC                            ; ===========================================================================
0000F0CC                            
0000F0CC                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F0CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F0D0 7000                       		moveq	#0,d0
0000F0D2 1028 0023                  		move.b	$23(a0),d0
0000F0D6 6700                       		beq.s	Obj47_Delete
0000F0D8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F0DE                            
0000F0DE                            Obj47_Delete:
0000F0DE 6000 EB5A                  		bra.w	DeleteObject
0000F0E2                            ; ===========================================================================
0000F0E2                            Ani_obj47:
0000F0E2                            	include "_anim\obj47.asm"
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            ; Animation script - flamethrower (SBZ)
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2 0000                       		dc.w byte_EAF4-Ani_obj47
0000F0E4 0000                       		dc.w byte_EAF8-Ani_obj47
0000F0E6 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F0EA 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F0F2                            		even
0000F0F2                            		even
0000F0F2                            
0000F0F2                            ; ---------------------------------------------------------------------------
0000F0F2                            ; Sprite mappings - pinball bumper (SYZ)
0000F0F2                            ; ---------------------------------------------------------------------------
0000F0F2                            Map_obj47:
0000F0F2                            	include "_maps\obj47.asm"
0000F0F2                            ; ---------------------------------------------------------------------------
0000F0F2                            ; Sprite mappings - pinball bumper (SYZ)
0000F0F2                            ; ---------------------------------------------------------------------------
0000F0F2 0000                       		dc.w byte_EB06-Map_obj47
0000F0F4 0000                       		dc.w byte_EB11-Map_obj47
0000F0F6 0000                       		dc.w byte_EB1C-Map_obj47
0000F0F8 02                         byte_EB06:	dc.b 2
0000F0F9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F0FE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F103 02                         byte_EB11:	dc.b 2
0000F104 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F109 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F10E 02                         byte_EB1C:	dc.b 2
0000F10F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F114 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F11A 00                         		even
0000F11A 00                         		even
0000F11A                            
0000F11A                            ; ===========================================================================
0000F11A                            ; ---------------------------------------------------------------------------
0000F11A                            ; Object 0D - signpost at the end of a level
0000F11A                            ; ---------------------------------------------------------------------------
0000F11A                            
0000F11A                            Obj0D:					; XREF: Obj_Index
0000F11A 7000                       		moveq	#0,d0
0000F11C 1028 0024                  		move.b	$24(a0),d0
0000F120 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F124 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F128 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F12E 6100 BB98                  		bsr.w	AnimateSprite
0000F132 6100 EACA                  		bsr.w	DisplaySprite
0000F136 3028 0008                  		move.w	8(a0),d0
0000F13A 0240 FF80                  		andi.w	#$FF80,d0
0000F13E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F142 0441 0080                  		subi.w	#$80,d1
0000F146 0241 FF80                  		andi.w	#$FF80,d1
0000F14A 9041                       		sub.w	d1,d0
0000F14C 0C40 0280                  		cmpi.w	#$280,d0
0000F150 6200 EAE8                  		bhi.w	DeleteObject
0000F154 4E75                       		rts	
0000F156                            ; ===========================================================================
0000F156 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F158 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F15A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F15C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F15E 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F160                            ; ===========================================================================
0000F160                            
0000F160                            Obj0D_Main:				; XREF: Obj0D_Index
0000F160 5428 0024                  		addq.b	#2,$24(a0)
0000F164 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F16C 317C 0680 0002             		move.w	#$680,2(a0)
0000F172 117C 0004 0001             		move.b	#4,1(a0)
0000F178 117C 0018 0019             		move.b	#$18,$19(a0)
0000F17E 117C 0004 0018             		move.b	#4,$18(a0)
0000F184                            
0000F184                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F184 3038 D008                  		move.w	($FFFFD008).w,d0
0000F188 9068 0008                  		sub.w	8(a0),d0
0000F18C 6500                       		bcs.s	locret_EBBA
0000F18E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F192 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F194 303C 00CF                  		move.w	#$CF,d0
0000F198 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F19E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F1A2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F1A8 5428 0024                  		addq.b	#2,$24(a0)
0000F1AC                            
0000F1AC                            locret_EBBA:
0000F1AC 4E75                       		rts	
0000F1AE                            ; ===========================================================================
0000F1AE                            
0000F1AE                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F1AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F1B2 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F1B4 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F1BA 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F1BE 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F1C4 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F1C6 5428 0024                  		addq.b	#2,$24(a0)
0000F1CA                            
0000F1CA                            Obj0D_Sparkle:
0000F1CA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F1CE 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F1D0 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F1D6 7000                       		moveq	#0,d0
0000F1D8 1028 0034                  		move.b	$34(a0),d0
0000F1DC 5428 0034                  		addq.b	#2,$34(a0)
0000F1E0 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F1E6 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F1EA 6100 EE98                  		bsr.w	SingleObjLoad
0000F1EE 6600                       		bne.s	locret_EC42
0000F1F0 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F1F4 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F1FA 101A                       		move.b	(a2)+,d0
0000F1FC 4880                       		ext.w	d0
0000F1FE D068 0008                  		add.w	8(a0),d0
0000F202 3340 0008                  		move.w	d0,8(a1)
0000F206 101A                       		move.b	(a2)+,d0
0000F208 4880                       		ext.w	d0
0000F20A D068 000C                  		add.w	$C(a0),d0
0000F20E 3340 000C                  		move.w	d0,$C(a1)
0000F212 237C 0000 A466 0004        		move.l	#Map_obj25,4(a1)
0000F21A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F220 137C 0004 0001             		move.b	#4,1(a1)
0000F226 137C 0002 0018             		move.b	#2,$18(a1)
0000F22C 137C 0008 0019             		move.b	#8,$19(a1)
0000F232                            
0000F232                            locret_EC42:
0000F232 4E75                       		rts	
0000F234                            ; ===========================================================================
0000F234 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F236 0808                       		dc.b	8,   8
0000F238 F000                       		dc.b -$10,   0
0000F23A 18F8                       		dc.b  $18,  -8
0000F23C 00F8                       		dc.b	0,  -8
0000F23E 1000                       		dc.b  $10,   0
0000F240 E808                       		dc.b -$18,   8
0000F242 1810                       		dc.b  $18, $10
0000F244                            ; ===========================================================================
0000F244                            
0000F244                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F244 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F248 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F24C 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F252 6600                       		bne.s	loc_EC70
0000F254 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F25A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F260 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F262 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F268 6000                       		bra.s	loc_EC70
0000F26A                            
0000F26A                            Obj0D_MoveLeft:
0000F26A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F270                            
0000F270                            loc_EC70:
0000F270 4A38 D000                  		tst.b	($FFFFD000).w
0000F274 6700                       		beq.s	loc_EC86
0000F276 3038 D008                  		move.w	($FFFFD008).w,d0
0000F27A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F27E 0641 0128                  		addi.w	#$128,d1
0000F282 B041                       		cmp.w	d1,d0
0000F284 6500                       		bcs.s	locret_ECEE
0000F286                            
0000F286                            loc_EC86:
0000F286 5428 0024                  		addq.b	#2,$24(a0)
0000F28A                            
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            ; Subroutine to	set up bonuses at the end of an	act
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            
0000F28A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F28A                            
0000F28A                            
0000F28A                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F28A 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F28E 6600                       		bne.s	locret_ECEE
0000F290 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F296 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F29A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F29E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F2A4 7010                       		moveq	#$10,d0
0000F2A6 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F2AC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F2B2 7000                       		moveq	#0,d0
0000F2B4 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F2B8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F2BC 7200                       		moveq	#0,d1
0000F2BE 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F2C2 D041                       		add.w	d1,d0		; add up your time
0000F2C4 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F2C8 7214                       		moveq	#$14,d1
0000F2CA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F2CC 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F2CE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F2D0                            
0000F2D0                            loc_ECD0:
0000F2D0 D040                       		add.w	d0,d0
0000F2D2 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F2D8 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F2DC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F2E0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F2E4 303C 008E                  		move.w	#$8E,d0
0000F2E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F2EE                            
0000F2EE                            locret_ECEE:
0000F2EE 4E75                       		rts	
0000F2F0                            ; End of function GotThroughAct
0000F2F0                            
0000F2F0                            ; ===========================================================================
0000F2F0 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F304 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F31A                            ; ===========================================================================
0000F31A                            
0000F31A                            locret_ED1A:				; XREF: Obj0D_Index
0000F31A 4E75                       		rts	
0000F31C                            ; ===========================================================================
0000F31C                            Ani_obj0D:
0000F31C                            	include "_anim\obj0D.asm"
0000F31C                            ; ---------------------------------------------------------------------------
0000F31C                            ; Animation script - signpost
0000F31C                            ; ---------------------------------------------------------------------------
0000F31C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F31E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F320 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F322 0000                       		dc.w byte_ED34-Ani_obj0D
0000F324 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F328 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F32E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F334 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F338 00                         		even
0000F338 00                         		even
0000F338                            
0000F338                            ; ---------------------------------------------------------------------------
0000F338                            ; Sprite mappings - signpost
0000F338                            ; ---------------------------------------------------------------------------
0000F338                            Map_obj0D:
0000F338                            	include "_maps\obj0D.asm"
0000F338                            ; ---------------------------------------------------------------------------
0000F338                            ; Sprite mappings - signpost
0000F338                            ; ---------------------------------------------------------------------------
0000F338 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F33C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F340 0000                       		dc.w byte_ED73-Map_obj0D
0000F342 03                         byte_ED42:	dc.b 3
0000F343 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F348 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F34D 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F352 02                         byte_ED52:	dc.b 2
0000F353 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F358 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F35D 02                         byte_ED5D:	dc.b 2
0000F35E F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F363 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F368 02                         byte_ED68:	dc.b 2
0000F369 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F36E 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F373 03                         byte_ED73:	dc.b 3
0000F374 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F379 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F37E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F384 00                         		even
0000F384 00                         		even
0000F384                            
0000F384                            ; ===========================================================================
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            
0000F384                            Obj4C:					; XREF: Obj_Index
0000F384 7000                       		moveq	#0,d0
0000F386 1028 0024                  		move.b	$24(a0),d0
0000F38A 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F38E 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F392 6000 0000                  		bra.w	Obj4D_ChkDel
0000F396                            ; ===========================================================================
0000F396 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F398 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F39A 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F39C 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F39E 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F3A0 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F3A2                            ; ===========================================================================
0000F3A2                            
0000F3A2                            Obj4C_Main:				; XREF: Obj4C_Index
0000F3A2 5428 0024                  		addq.b	#2,$24(a0)
0000F3A6 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F3AE 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F3B4 117C 0004 0001             		move.b	#4,1(a0)
0000F3BA 117C 0001 0018             		move.b	#1,$18(a0)
0000F3C0 117C 0038 0019             		move.b	#$38,$19(a0)
0000F3C6 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F3CC                            
0000F3CC                            loc_EDCC:				; XREF: Obj4C_Index
0000F3CC 5368 0032                  		subq.w	#1,$32(a0)
0000F3D0 6A00                       		bpl.s	locret_EDF0
0000F3D2 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F3D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F3DC 3228 000C                  		move.w	$C(a0),d1
0000F3E0 B041                       		cmp.w	d1,d0
0000F3E2 6400                       		bcc.s	locret_EDF0
0000F3E4 0441 0170                  		subi.w	#$170,d1
0000F3E8 B041                       		cmp.w	d1,d0
0000F3EA 6500                       		bcs.s	locret_EDF0
0000F3EC 5428 0024                  		addq.b	#2,$24(a0)
0000F3F0                            
0000F3F0                            locret_EDF0:
0000F3F0 4E75                       		rts	
0000F3F2                            ; ===========================================================================
0000F3F2                            
0000F3F2                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F3F2 5428 0024                  		addq.b	#2,$24(a0)
0000F3F6 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F3FA 6600                       		bne.s	loc_EE18
0000F3FC 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F400 3368 0008 0008             		move.w	8(a0),8(a1)
0000F406 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F40C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F412 2348 003C                  		move.l	a0,$3C(a1)
0000F416                            
0000F416                            loc_EE18:
0000F416 117C 0001 001C             		move.b	#1,$1C(a0)
0000F41C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F420 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F422 117C 0004 001C             		move.b	#4,$1C(a0)
0000F428 6000                       		bra.s	Obj4C_Display
0000F42A                            ; ===========================================================================
0000F42A                            
0000F42A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F42A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F42E 08E9 0001 0022             		bset	#1,$22(a1)
0000F434 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F43A 6000                       		bra.s	Obj4C_Display
0000F43C                            ; ===========================================================================
0000F43C                            
0000F43C                            loc_EE3E:				; XREF: Obj4C_Index
0000F43C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F440 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F442 5428 0024                  		addq.b	#2,$24(a0)
0000F446 4E75                       		rts	
0000F448                            ; ===========================================================================
0000F448                            
0000F448                            Obj4C_Display:				; XREF: Obj4C_Index
0000F448 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F44E 6100 B878                  		bsr.w	AnimateSprite
0000F452 6100 E7AA                  		bsr.w	DisplaySprite
0000F456 4E75                       		rts	
0000F458                            ; ===========================================================================
0000F458                            
0000F458                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F458 117C 0000 001C             		move.b	#0,$1C(a0)
0000F45E 117C 0002 0024             		move.b	#2,$24(a0)
0000F464 4A28 0028                  		tst.b	$28(a0)
0000F468 6700 E7D0                  		beq.w	DeleteObject
0000F46C 4E75                       		rts	
0000F46E                            ; ===========================================================================
0000F46E                            ; ---------------------------------------------------------------------------
0000F46E                            ; Object 4D - lava geyser / lavafall (MZ)
0000F46E                            ; ---------------------------------------------------------------------------
0000F46E                            
0000F46E                            Obj4D:					; XREF: Obj_Index
0000F46E 7000                       		moveq	#0,d0
0000F470 1028 0024                  		move.b	$24(a0),d0
0000F474 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F478 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F47C 6000 E780                  		bra.w	DisplaySprite
0000F480                            ; ===========================================================================
0000F480 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F482 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F484 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F486 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F488                            
0000F488 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F48C                            ; ===========================================================================
0000F48C                            
0000F48C                            Obj4D_Main:				; XREF: Obj4D_Index
0000F48C 5428 0024                  		addq.b	#2,$24(a0)
0000F490 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F496 4A28 0028                  		tst.b	$28(a0)
0000F49A 6700                       		beq.s	loc_EEA4
0000F49C 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F4A2                            
0000F4A2                            loc_EEA4:
0000F4A2 7000                       		moveq	#0,d0
0000F4A4 1028 0028                  		move.b	$28(a0),d0
0000F4A8 D040                       		add.w	d0,d0
0000F4AA 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F4B0 2248                       		movea.l	a0,a1
0000F4B2 7201                       		moveq	#1,d1
0000F4B4 6100                       		bsr.s	Obj4D_MakeLava
0000F4B6 6000                       		bra.s	loc_EF10
0000F4B8                            ; ===========================================================================
0000F4B8                            
0000F4B8                            Obj4D_Loop:
0000F4B8 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F4BC 6600                       		bne.s	loc_EF0A
0000F4BE                            
0000F4BE                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F4BE 12BC 004D                  		move.b	#$4D,0(a1)
0000F4C2 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F4CA 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F4D0 137C 0004 0001             		move.b	#4,1(a1)
0000F4D6 137C 0020 0019             		move.b	#$20,$19(a1)
0000F4DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4E8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4EE 137C 0001 0018             		move.b	#1,$18(a1)
0000F4F4 137C 0005 001C             		move.b	#5,$1C(a1)
0000F4FA 4A28 0028                  		tst.b	$28(a0)
0000F4FE 6700                       		beq.s	loc_EF0A
0000F500 137C 0002 001C             		move.b	#2,$1C(a1)
0000F506                            
0000F506                            loc_EF0A:
0000F506 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F50A 4E75                       		rts	
0000F50C                            ; ===========================================================================
0000F50C                            
0000F50C                            loc_EF10:				; XREF: Obj4D_Main
0000F50C 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F512 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F518 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F51E 137C 0093 0020             		move.b	#$93,$20(a1)
0000F524 137C 0080 0016             		move.b	#$80,$16(a1)
0000F52A 08E9 0004 0001             		bset	#4,1(a1)
0000F530 5829 0024                  		addq.b	#4,$24(a1)
0000F534 2348 003C                  		move.l	a0,$3C(a1)
0000F538 4A28 0028                  		tst.b	$28(a0)
0000F53C 6700                       		beq.s	Obj4D_PlaySnd
0000F53E 7200                       		moveq	#0,d1
0000F540 6100 FF76                  		bsr.w	Obj4D_Loop
0000F544 5429 0024                  		addq.b	#2,$24(a1)
0000F548 08E9 0004 0002             		bset	#4,2(a1)
0000F54E 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F554 137C 0000 0018             		move.b	#0,$18(a1)
0000F55A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F560 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F566 117C 0000 0028             		move.b	#0,$28(a0)
0000F56C                            
0000F56C                            Obj4D_PlaySnd:
0000F56C 303C 00C8                  		move.w	#$C8,d0
0000F570 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F576                            
0000F576                            Obj4D_Action:				; XREF: Obj4D_Index
0000F576 7000                       		moveq	#0,d0
0000F578 1028 0028                  		move.b	$28(a0),d0
0000F57C D040                       		add.w	d0,d0
0000F57E 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F582 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F586 6100 E650                  		bsr.w	SpeedToPos
0000F58A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F590 6100 B736                  		bsr.w	AnimateSprite
0000F594                            
0000F594                            Obj4D_ChkDel:				; XREF: Obj4C
0000F594 3028 0008                  		move.w	8(a0),d0
0000F598 0240 FF80                  		andi.w	#$FF80,d0
0000F59C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5A0 0441 0080                  		subi.w	#$80,d1
0000F5A4 0241 FF80                  		andi.w	#$FF80,d1
0000F5A8 9041                       		sub.w	d1,d0
0000F5AA 0C40 0280                  		cmpi.w	#$280,d0
0000F5AE 6200 E68A                  		bhi.w	DeleteObject
0000F5B2 4E75                       		rts	
0000F5B4                            ; ===========================================================================
0000F5B4 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F5B6 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F5B8                            ; ===========================================================================
0000F5B8                            
0000F5B8                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F5B8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5BE 3028 0030                  		move.w	$30(a0),d0
0000F5C2 B068 000C                  		cmp.w	$C(a0),d0
0000F5C6 6400                       		bcc.s	locret_EFDA
0000F5C8 5828 0024                  		addq.b	#4,$24(a0)
0000F5CC 2268 003C                  		movea.l	$3C(a0),a1
0000F5D0 137C 0003 001C             		move.b	#3,$1C(a1)
0000F5D6                            
0000F5D6                            locret_EFDA:
0000F5D6 4E75                       		rts	
0000F5D8                            ; ===========================================================================
0000F5D8                            
0000F5D8                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F5D8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5DE 3028 0030                  		move.w	$30(a0),d0
0000F5E2 B068 000C                  		cmp.w	$C(a0),d0
0000F5E6 6400                       		bcc.s	locret_EFFA
0000F5E8 5828 0024                  		addq.b	#4,$24(a0)
0000F5EC 2268 003C                  		movea.l	$3C(a0),a1
0000F5F0 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5F6                            
0000F5F6                            locret_EFFA:
0000F5F6 4E75                       		rts	
0000F5F8                            ; ===========================================================================
0000F5F8                            
0000F5F8                            loc_EFFC:				; XREF: Obj4D_Index
0000F5F8 2268 003C                  		movea.l	$3C(a0),a1
0000F5FC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F602 6700 0000                  		beq.w	Obj4D_Delete
0000F606 3029 000C                  		move.w	$C(a1),d0
0000F60A 0640 0060                  		addi.w	#$60,d0
0000F60E 3140 000C                  		move.w	d0,$C(a0)
0000F612 9068 0030                  		sub.w	$30(a0),d0
0000F616 4440                       		neg.w	d0
0000F618 7208                       		moveq	#8,d1
0000F61A 0C40 0040                  		cmpi.w	#$40,d0
0000F61E 6C00                       		bge.s	loc_F026
0000F620 720B                       		moveq	#$B,d1
0000F622                            
0000F622                            loc_F026:
0000F622 0C40 0080                  		cmpi.w	#$80,d0
0000F626 6F00                       		ble.s	loc_F02E
0000F628 720E                       		moveq	#$E,d1
0000F62A                            
0000F62A                            loc_F02E:
0000F62A 5328 001E                  		subq.b	#1,$1E(a0)
0000F62E 6A00                       		bpl.s	loc_F04C
0000F630 117C 0007 001E             		move.b	#7,$1E(a0)
0000F636 5228 001B                  		addq.b	#1,$1B(a0)
0000F63A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F640 6500                       		bcs.s	loc_F04C
0000F642 117C 0000 001B             		move.b	#0,$1B(a0)
0000F648                            
0000F648                            loc_F04C:
0000F648 1028 001B                  		move.b	$1B(a0),d0
0000F64C D001                       		add.b	d1,d0
0000F64E 1140 001A                  		move.b	d0,$1A(a0)
0000F652 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F656                            ; ===========================================================================
0000F656                            
0000F656                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F656 6000 E5E2                  		bra.w	DeleteObject
0000F65A                            ; ===========================================================================
0000F65A                            ; ---------------------------------------------------------------------------
0000F65A                            ; Object 4E - advancing	wall of	lava (MZ)
0000F65A                            ; ---------------------------------------------------------------------------
0000F65A                            
0000F65A                            Obj4E:					; XREF: Obj_Index
0000F65A 7000                       		moveq	#0,d0
0000F65C 1028 0024                  		move.b	$24(a0),d0
0000F660 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F664 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F668                            ; ===========================================================================
0000F668 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F66A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F66C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F66E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F670 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F672                            ; ===========================================================================
0000F672                            
0000F672                            Obj4E_Main:				; XREF: Obj4E_Index
0000F672 5828 0024                  		addq.b	#4,$24(a0)
0000F676 2248                       		movea.l	a0,a1
0000F678 7201                       		moveq	#1,d1
0000F67A 6000                       		bra.s	Obj4E_Main2
0000F67C                            ; ===========================================================================
0000F67C                            
0000F67C                            Obj4E_Loop:
0000F67C 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F680 6600                       		bne.s	loc_F0C8
0000F682                            
0000F682                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F682 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F686 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F68E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F694 137C 0004 0001             		move.b	#4,1(a1)
0000F69A 137C 0050 0019             		move.b	#$50,$19(a1)
0000F6A0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6AC 137C 0001 0018             		move.b	#1,$18(a1)
0000F6B2 137C 0000 001C             		move.b	#0,$1C(a1)
0000F6B8 137C 0094 0020             		move.b	#$94,$20(a1)
0000F6BE 2348 003C                  		move.l	a0,$3C(a1)
0000F6C2                            
0000F6C2                            loc_F0C8:
0000F6C2 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F6C6                            
0000F6C6 5C29 0024                  		addq.b	#6,$24(a1)
0000F6CA 137C 0004 001A             		move.b	#4,$1A(a1)
0000F6D0                            
0000F6D0                            Obj4E_Action:				; XREF: Obj4E_Index
0000F6D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6D4 9068 0008                  		sub.w	8(a0),d0
0000F6D8 6400                       		bcc.s	Obj4E_ChkSonic
0000F6DA 4440                       		neg.w	d0
0000F6DC                            
0000F6DC                            Obj4E_ChkSonic:
0000F6DC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F6E0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F6E6 9068 000C                  		sub.w	$C(a0),d0
0000F6EA 6400                       		bcc.s	loc_F0F4
0000F6EC 4440                       		neg.w	d0
0000F6EE                            
0000F6EE                            loc_F0F4:
0000F6EE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F6F2 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6F4 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F6FA 6000                       		bra.s	Obj4E_Solid
0000F6FC                            ; ===========================================================================
0000F6FC                            
0000F6FC                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F6FC 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F700 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F702 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F708 5528 0024                  		subq.b	#2,$24(a0)
0000F70C                            
0000F70C                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F70C 323C 002B                  		move.w	#$2B,d1
0000F710 343C 0018                  		move.w	#$18,d2
0000F714 3602                       		move.w	d2,d3
0000F716 5243                       		addq.w	#1,d3
0000F718 3828 0008                  		move.w	8(a0),d4
0000F71C 1028 0024                  		move.b	$24(a0),d0
0000F720 3F00                       		move.w	d0,-(sp)
0000F722 6100 0000                  		bsr.w	SolidObject
0000F726 301F                       		move.w	(sp)+,d0
0000F728 1140 0024                  		move.b	d0,$24(a0)
0000F72C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F732 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F734 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F738 4228 0036                  		clr.b	$36(a0)
0000F73C                            
0000F73C                            Obj4E_Animate:
0000F73C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F742 6100 B584                  		bsr.w	AnimateSprite
0000F746 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F74C 6400                       		bcc.s	Obj4E_ChkDel
0000F74E 6100 E488                  		bsr.w	SpeedToPos
0000F752                            
0000F752                            Obj4E_ChkDel:
0000F752 6100 E4AA                  		bsr.w	DisplaySprite
0000F756 4A28 0036                  		tst.b	$36(a0)
0000F75A 6600                       		bne.s	locret_F17E
0000F75C 3028 0008                  		move.w	8(a0),d0
0000F760 0240 FF80                  		andi.w	#$FF80,d0
0000F764 3238 F700                  		move.w	($FFFFF700).w,d1
0000F768 0441 0080                  		subi.w	#$80,d1
0000F76C 0241 FF80                  		andi.w	#$FF80,d1
0000F770 9041                       		sub.w	d1,d0
0000F772 0C40 0280                  		cmpi.w	#$280,d0
0000F776 6200                       		bhi.s	Obj4E_ChkGone
0000F778                            
0000F778                            locret_F17E:
0000F778 4E75                       		rts	
0000F77A                            ; ===========================================================================
0000F77A                            
0000F77A                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F77A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F77E 7000                       		moveq	#0,d0
0000F780 1028 0023                  		move.b	$23(a0),d0
0000F784 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F78A 117C 0008 0024             		move.b	#8,$24(a0)
0000F790 4E75                       		rts	
0000F792                            ; ===========================================================================
0000F792                            
0000F792                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F792 2268 003C                  		movea.l	$3C(a0),a1
0000F796 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F79C 6700                       		beq.s	Obj4E_Delete
0000F79E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F7A4 0468 0080 0008             		subi.w	#$80,8(a0)
0000F7AA 6000 E452                  		bra.w	DisplaySprite
0000F7AE                            ; ===========================================================================
0000F7AE                            
0000F7AE                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F7AE 6000 E48A                  		bra.w	DeleteObject
0000F7B2                            ; ===========================================================================
0000F7B2                            ; ---------------------------------------------------------------------------
0000F7B2                            ; Object 54 - invisible	lava tag (MZ)
0000F7B2                            ; ---------------------------------------------------------------------------
0000F7B2                            
0000F7B2                            Obj54:					; XREF: Obj_Index
0000F7B2 7000                       		moveq	#0,d0
0000F7B4 1028 0024                  		move.b	$24(a0),d0
0000F7B8 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F7BC 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F7C0                            ; ===========================================================================
0000F7C0 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F7C2 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F7C4                            
0000F7C4 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F7C8                            ; ===========================================================================
0000F7C8                            
0000F7C8                            Obj54_Main:				; XREF: Obj54_Index
0000F7C8 5428 0024                  		addq.b	#2,$24(a0)
0000F7CC 7000                       		moveq	#0,d0
0000F7CE 1028 0028                  		move.b	$28(a0),d0
0000F7D2 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F7D8 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F7E0 117C 0084 0001             		move.b	#$84,1(a0)
0000F7E6                            
0000F7E6                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F7E6 3028 0008                  		move.w	8(a0),d0
0000F7EA 0240 FF80                  		andi.w	#$FF80,d0
0000F7EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7F2 0441 0080                  		subi.w	#$80,d1
0000F7F6 0241 FF80                  		andi.w	#$FF80,d1
0000F7FA 9041                       		sub.w	d1,d0
0000F7FC 6B00 E43C                  		bmi.w	DeleteObject
0000F800 0C40 0280                  		cmpi.w	#$280,d0
0000F804 6200 E434                  		bhi.w	DeleteObject
0000F808 4E75                       		rts	
0000F80A                            ; ===========================================================================
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            ; Sprite mappings - invisible lava tag (MZ)
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            Map_obj54:
0000F80A                            	include "_maps\obj54.asm"
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            ; Sprite mappings - invisible lava tag (MZ)
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A 0000                       		dc.w byte_F212-Map_obj54
0000F80C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F80E 00                         		even
0000F80E 00                         		even
0000F80E                            
0000F80E                            Ani_obj4C:
0000F80E                            	include "_anim\obj4C.asm"
0000F80E                            ; ---------------------------------------------------------------------------
0000F80E                            ; Animation script - geyser of lava (MZ)
0000F80E                            ; ---------------------------------------------------------------------------
0000F80E 0000                       		dc.w byte_F220-Ani_obj4C
0000F810 0000                       		dc.w byte_F22A-Ani_obj4C
0000F812 0000                       		dc.w byte_F22E-Ani_obj4C
0000F814 0000                       		dc.w byte_F232-Ani_obj4C
0000F816 0000                       		dc.w byte_F23A-Ani_obj4C
0000F818 0000                       		dc.w byte_F23E-Ani_obj4C
0000F81A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F824 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F828 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F82C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F834 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F838 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F83C                            		even
0000F83C                            		even
0000F83C                            
0000F83C                            Ani_obj4E:
0000F83C                            	include "_anim\obj4E.asm"
0000F83C                            ; ---------------------------------------------------------------------------
0000F83C                            ; Animation script - advancing wall of lava (MZ)
0000F83C                            ; ---------------------------------------------------------------------------
0000F83C 0000                       		dc.w byte_F244-Ani_obj4E
0000F83E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F844                            		even
0000F844                            		even
0000F844                            
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            Map_obj4C:
0000F844                            	include "_maps\obj4C.asm"
0000F844                            ; ---------------------------------------------------------------------------
0000F844                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F844                            ; ---------------------------------------------------------------------------
0000F844 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F848 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F84C 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F850 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F854 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F858 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F85C 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F860 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F864 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F868 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F86C 02                         byte_F272:	dc.b 2
0000F86D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F872 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F877 02                         byte_F27D:	dc.b 2
0000F878 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F87D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F882 04                         byte_F288:	dc.b 4
0000F883 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F888 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F88D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F892 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F897 04                         byte_F29D:	dc.b 4
0000F898 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F89D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F8A2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8A7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8AC 06                         byte_F2B2:	dc.b 6
0000F8AD EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F8B2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F8B7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F8BC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F8C1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F8C6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F8CB 06                         byte_F2D1:	dc.b 6
0000F8CC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F8D1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F8D6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8DB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8E0 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F8E5 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F8EA 02                         byte_F2F0:	dc.b 2
0000F8EB E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F8F0 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F8F5 02                         byte_F2FB:	dc.b 2
0000F8F6 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F8FB E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F900 0A                         byte_F306:	dc.b $A
0000F901 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F906 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F90B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F910 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F915 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F91A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F91F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F924 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F929 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F92E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F933 0A                         byte_F339:	dc.b $A
0000F934 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F939 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F93E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F943 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F948 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F94D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F952 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F957 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F95C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F961 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F966 0A                         byte_F36C:	dc.b $A
0000F967 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F96C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F971 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F976 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F97B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F980 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F985 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F98A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F98F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F994 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F999 06                         byte_F39F:	dc.b 6
0000F99A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F99F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9A4 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9A9 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9AE D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9B3 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9B8 06                         byte_F3BE:	dc.b 6
0000F9B9 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9BE 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9C3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9C8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9CD D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9D2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9D7 06                         byte_F3DD:	dc.b 6
0000F9D8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F9DD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F9E2 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F9E7 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F9EC D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F9F1 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9F6 10                         byte_F3FC:	dc.b $10
0000F9F7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9FC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA01 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA06 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA0B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA10 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA15 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA1A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA1F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA24 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FA29 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FA2E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FA33 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FA38 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FA3D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FA42 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FA47 10                         byte_F44D:	dc.b $10
0000FA48 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA4D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA52 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA57 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA5C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA61 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA66 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA6B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA70 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA75 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA7A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA7F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA84 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA89 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA8E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA93 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA98 10                         byte_F49E:	dc.b $10
0000FA99 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA9E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAA3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAA8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FAAD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAB2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAB7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FABC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FAC1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FAC6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FACB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FAD0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FAD5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FADA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FADF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FAE4 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FAE9 06                         byte_F4EF:	dc.b 6
0000FAEA E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FAEF E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FAF4 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAF9 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FAFE D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FB03 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FB08 06                         byte_F50E:	dc.b 6
0000FB09 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FB0E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FB13 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FB18 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FB1D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FB22 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FB27 00                         byte_F52D:	dc.b 0
0000FB28                            		even
0000FB28                            		even
0000FB28                            
0000FB28                            ; ---------------------------------------------------------------------------
0000FB28                            ; Sprite mappings - advancing wall of lava (MZ)
0000FB28                            ; ---------------------------------------------------------------------------
0000FB28                            Map_obj4E:
0000FB28                            	include "_maps\obj4E.asm"
0000FB28                            ; ---------------------------------------------------------------------------
0000FB28                            ; Sprite mappings - advancing wall of lava (MZ)
0000FB28                            ; ---------------------------------------------------------------------------
0000FB28 0000                       		dc.w byte_F538-Map_obj4E
0000FB2A 0000                       		dc.w byte_F566-Map_obj4E
0000FB2C 0000                       		dc.w byte_F594-Map_obj4E
0000FB2E 0000                       		dc.w byte_F5C2-Map_obj4E
0000FB30 0000                       		dc.w byte_F5F0-Map_obj4E
0000FB32 09                         byte_F538:	dc.b 9
0000FB33 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FB38 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB3D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB42 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB47 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB4C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB51 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB56 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB5B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB60 09                         byte_F566:	dc.b 9
0000FB61 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB66 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB6B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB70 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB75 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB7A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB7F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB84 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB89 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB8E 09                         byte_F594:	dc.b 9
0000FB8F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB94 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB99 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB9E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBA3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBA8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBAD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBB2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBB7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBBC 09                         byte_F5C2:	dc.b 9
0000FBBD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FBC2 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FBC7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBCC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBD1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBD6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBDB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBE0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBE5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBEA 08                         byte_F5F0:	dc.b 8
0000FBEB E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FBF0 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBF5 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBFA 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBFF E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC04 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC09 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC0E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC14 00                         		even
0000FC14 00                         		even
0000FC14                            
0000FC14                            ; ===========================================================================
0000FC14                            ; ---------------------------------------------------------------------------
0000FC14                            ; Object 40 - Moto Bug enemy (GHZ)
0000FC14                            ; ---------------------------------------------------------------------------
0000FC14                            
0000FC14                            Obj40:					; XREF: Obj_Index
0000FC14 7000                       		moveq	#0,d0
0000FC16 1028 0024                  		move.b	$24(a0),d0
0000FC1A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FC1E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FC22                            ; ===========================================================================
0000FC22 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FC24 0000                       		dc.w Obj40_Action-Obj40_Index
0000FC26 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FC28 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FC2A                            ; ===========================================================================
0000FC2A                            
0000FC2A                            Obj40_Main:				; XREF: Obj40_Index
0000FC2A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FC32 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FC38 117C 0004 0001             		move.b	#4,1(a0)
0000FC3E 117C 0004 0018             		move.b	#4,$18(a0)
0000FC44 117C 0014 0019             		move.b	#$14,$19(a0)
0000FC4A 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FC4E 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FC50 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC56 117C 0008 0017             		move.b	#8,$17(a0)
0000FC5C 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC62 6100 DF48                  		bsr.w	ObjectFall
0000FC66 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC6C 4A41                       		tst.w	d1
0000FC6E 6A00                       		bpl.s	locret_F68A
0000FC70 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC74 317C 0000 0012             		move.w	#0,$12(a0)
0000FC7A 5428 0024                  		addq.b	#2,$24(a0)
0000FC7E 0868 0000 0022             		bchg	#0,$22(a0)
0000FC84                            
0000FC84                            locret_F68A:
0000FC84 4E75                       		rts	
0000FC86                            ; ===========================================================================
0000FC86                            
0000FC86                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC86 5828 0024                  		addq.b	#4,$24(a0)
0000FC8A 6000 0000                  		bra.w	Obj40_Animate
0000FC8E                            ; ===========================================================================
0000FC8E                            
0000FC8E                            Obj40_Action:				; XREF: Obj40_Index
0000FC8E 7000                       		moveq	#0,d0
0000FC90 1028 0025                  		move.b	$25(a0),d0
0000FC94 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC98 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC9C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FCA2 6100 B024                  		bsr.w	AnimateSprite
0000FCA6                            
0000FCA6                            ; ---------------------------------------------------------------------------
0000FCA6                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FCA6                            ; ---------------------------------------------------------------------------
0000FCA6                            
0000FCA6                            MarkObjGone:
0000FCA6 3028 0008                  		move.w	8(a0),d0
0000FCAA 0240 FF80                  		andi.w	#$FF80,d0
0000FCAE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCB2 0441 0080                  		subi.w	#$80,d1
0000FCB6 0241 FF80                  		andi.w	#$FF80,d1
0000FCBA 9041                       		sub.w	d1,d0
0000FCBC 0C40 0280                  		cmpi.w	#$280,d0
0000FCC0 6200 0000                  		bhi.w	Mark_ChkGone
0000FCC4 6000 DF38                  		bra.w	DisplaySprite
0000FCC8                            ; ===========================================================================
0000FCC8                            
0000FCC8                            Mark_ChkGone:
0000FCC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCCC 7000                       		moveq	#0,d0
0000FCCE 1028 0023                  		move.b	$23(a0),d0
0000FCD2 6700                       		beq.s	Mark_Delete
0000FCD4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCDA                            
0000FCDA                            Mark_Delete:
0000FCDA 6000 DF5E                  		bra.w	DeleteObject
0000FCDE                            
0000FCDE                            ; ===========================================================================
0000FCDE 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FCE0 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FCE2                            ; ===========================================================================
0000FCE2                            
0000FCE2                            Obj40_Move:				; XREF: Obj40_Index2
0000FCE2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FCE6 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FCE8 5428 0025                  		addq.b	#2,$25(a0)
0000FCEC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FCF2 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCF8 0868 0000 0022             		bchg	#0,$22(a0)
0000FCFE 6600                       		bne.s	locret_F70A
0000FD00 4468 0010                  		neg.w	$10(a0)		; change direction
0000FD04                            
0000FD04                            locret_F70A:
0000FD04 4E75                       		rts	
0000FD06                            ; ===========================================================================
0000FD06                            
0000FD06                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FD06 6100 DED0                  		bsr.w	SpeedToPos
0000FD0A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FD10 0C41 FFF8                  		cmpi.w	#-8,d1
0000FD14 6D00                       		blt.s	Obj40_Pause
0000FD16 0C41 000C                  		cmpi.w	#$C,d1
0000FD1A 6C00                       		bge.s	Obj40_Pause
0000FD1C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FD20 5328 0033                  		subq.b	#1,$33(a0)
0000FD24 6A00                       		bpl.s	locret_F756
0000FD26 117C 000F 0033             		move.b	#$F,$33(a0)
0000FD2C 6100 E356                  		bsr.w	SingleObjLoad
0000FD30 6600                       		bne.s	locret_F756
0000FD32 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FD36 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD3C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD42 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FD48 137C 0002 001C             		move.b	#2,$1C(a1)
0000FD4E                            
0000FD4E                            locret_F756:
0000FD4E 4E75                       		rts	
0000FD50                            ; ===========================================================================
0000FD50                            
0000FD50                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FD50 5528 0025                  		subq.b	#2,$25(a0)
0000FD54 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD5A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD60 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD66 4E75                       		rts	
0000FD68                            ; ===========================================================================
0000FD68                            
0000FD68                            Obj40_Animate:				; XREF: Obj40_Index
0000FD68 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD6E 6100 AF58                  		bsr.w	AnimateSprite
0000FD72 6000 DE8A                  		bra.w	DisplaySprite
0000FD76                            ; ===========================================================================
0000FD76                            
0000FD76                            Obj40_Delete:				; XREF: Obj40_Index
0000FD76 6000 DEC2                  		bra.w	DeleteObject
0000FD7A                            ; ===========================================================================
0000FD7A                            Ani_obj40:
0000FD7A                            	include "_anim\obj40.asm"
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A                            ; Animation script - Motobug enemy
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A 0000                       		dc.w byte_F788-Ani_obj40
0000FD7C 0000                       		dc.w byte_F78C-Ani_obj40
0000FD7E 0000                       		dc.w byte_F792-Ani_obj40
0000FD80 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD84 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD8A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD98                            		even
0000FD98                            		even
0000FD98                            
0000FD98                            ; ---------------------------------------------------------------------------
0000FD98                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD98                            ; ---------------------------------------------------------------------------
0000FD98                            Map_obj40:
0000FD98                            	include "_maps\obj40.asm"
0000FD98                            Map_cedc:
0000FD98 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD9A 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD9C 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD9E 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FDA0 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FDA2 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FDA4 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FDA6 04                         Map_cedc_E: 	dc.b $4
0000FDA7 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDAC 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FDB1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDB6 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FDBB 04                         Map_cedc_23: 	dc.b $4
0000FDBC F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FDC1 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FDC6 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FDCB 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FDD0 05                         Map_cedc_38: 	dc.b $5
0000FDD1 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDD6 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FDDB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDE0 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FDE5 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FDEA 01                         Map_cedc_52: 	dc.b $1
0000FDEB FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FDF0 01                         Map_cedc_58: 	dc.b $1
0000FDF1 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDF6 01                         Map_cedc_5E: 	dc.b $1
0000FDF7 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FDFC 00                         Map_cedc_64: 	dc.b $0
0000FDFE 00                         	even
0000FDFE 00                         	even
0000FDFE                            
0000FDFE                            ; ===========================================================================
0000FDFE                            ; ---------------------------------------------------------------------------
0000FDFE                            ; Object 4F - blank
0000FDFE                            ; ---------------------------------------------------------------------------
0000FDFE                            
0000FDFE                            Obj4F:					; XREF: Obj_Index
0000FDFE 4E75                       		rts	
0000FE00                            
0000FE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE00                            
0000FE00                            
0000FE00                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FE00 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FE04 D047                       		add.w	d7,d0
0000FE06 0240 0003                  		andi.w	#3,d0
0000FE0A 6600                       		bne.s	loc_F836
0000FE0C 7600                       		moveq	#0,d3
0000FE0E 1628 0019                  		move.b	$19(a0),d3
0000FE12 4A68 0010                  		tst.w	$10(a0)
0000FE16 6B00                       		bmi.s	loc_F82C
0000FE18 6100 0000                  		bsr.w	ObjHitWallRight
0000FE1C 4A41                       		tst.w	d1
0000FE1E 6A00                       		bpl.s	loc_F836
0000FE20                            
0000FE20                            loc_F828:
0000FE20 7001                       		moveq	#1,d0
0000FE22 4E75                       		rts	
0000FE24                            ; ===========================================================================
0000FE24                            
0000FE24                            loc_F82C:
0000FE24 4643                       		not.w	d3
0000FE26 6100 0000                  		bsr.w	ObjHitWallLeft
0000FE2A 4A41                       		tst.w	d1
0000FE2C 6BF2                       		bmi.s	loc_F828
0000FE2E                            
0000FE2E                            loc_F836:
0000FE2E 7000                       		moveq	#0,d0
0000FE30 4E75                       		rts	
0000FE32                            ; End of function Obj50_ChkWall
0000FE32                            
0000FE32                            ; ===========================================================================
0000FE32                            ; ---------------------------------------------------------------------------
0000FE32                            ; Object 50 - Yadrin enemy (SYZ)
0000FE32                            ; ---------------------------------------------------------------------------
0000FE32                            
0000FE32                            Obj50:					; XREF: Obj_Index
0000FE32 7000                       		moveq	#0,d0
0000FE34 1028 0024                  		move.b	$24(a0),d0
0000FE38 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FE3C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FE40                            ; ===========================================================================
0000FE40 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FE42 0000                       		dc.w Obj50_Action-Obj50_Index
0000FE44                            ; ===========================================================================
0000FE44                            
0000FE44                            Obj50_Main:				; XREF: Obj50_Index
0000FE44 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FE4C 317C 247B 0002             		move.w	#$247B,2(a0)
0000FE52 117C 0004 0001             		move.b	#4,1(a0)
0000FE58 117C 0004 0018             		move.b	#4,$18(a0)
0000FE5E 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE64 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE6A 117C 0008 0017             		move.b	#8,$17(a0)
0000FE70 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE76 6100 DD34                  		bsr.w	ObjectFall
0000FE7A 6100 0000                  		bsr.w	ObjHitFloor
0000FE7E 4A41                       		tst.w	d1
0000FE80 6A00                       		bpl.s	locret_F89E
0000FE82 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE86 317C 0000 0012             		move.w	#0,$12(a0)
0000FE8C 5428 0024                  		addq.b	#2,$24(a0)
0000FE90 0868 0000 0022             		bchg	#0,$22(a0)
0000FE96                            
0000FE96                            locret_F89E:
0000FE96 4E75                       		rts	
0000FE98                            ; ===========================================================================
0000FE98                            
0000FE98                            Obj50_Action:				; XREF: Obj50_Index
0000FE98 7000                       		moveq	#0,d0
0000FE9A 1028 0025                  		move.b	$25(a0),d0
0000FE9E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FEA2 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FEA6 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FEAC 6100 AE1A                  		bsr.w	AnimateSprite
0000FEB0 6000 FDF4                  		bra.w	MarkObjGone
0000FEB4                            ; ===========================================================================
0000FEB4 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FEB6 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FEB8                            ; ===========================================================================
0000FEB8                            
0000FEB8                            Obj50_Move:				; XREF: Obj50_Index2
0000FEB8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEBC 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FEBE 5428 0025                  		addq.b	#2,$25(a0)
0000FEC2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FEC8 117C 0001 001C             		move.b	#1,$1C(a0)
0000FECE 0868 0000 0022             		bchg	#0,$22(a0)
0000FED4 6600                       		bne.s	locret_F8E2
0000FED6 4468 0010                  		neg.w	$10(a0)		; change direction
0000FEDA                            
0000FEDA                            locret_F8E2:
0000FEDA 4E75                       		rts	
0000FEDC                            ; ===========================================================================
0000FEDC                            
0000FEDC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FEDC 6100 DCFA                  		bsr.w	SpeedToPos
0000FEE0 6100 0000                  		bsr.w	ObjHitFloor
0000FEE4 0C41 FFF8                  		cmpi.w	#-8,d1
0000FEE8 6D00                       		blt.s	Obj50_Pause
0000FEEA 0C41 000C                  		cmpi.w	#$C,d1
0000FEEE 6C00                       		bge.s	Obj50_Pause
0000FEF0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FEF4 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEF8 6600                       		bne.s	Obj50_Pause
0000FEFA 4E75                       		rts	
0000FEFC                            ; ===========================================================================
0000FEFC                            
0000FEFC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FEFC 5528 0025                  		subq.b	#2,$25(a0)
0000FF00 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF06 317C 0000 0010             		move.w	#0,$10(a0)
0000FF0C 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF12 4E75                       		rts	
0000FF14                            ; ===========================================================================
0000FF14                            Ani_obj50:
0000FF14                            	include "_anim\obj50.asm"
0000FF14                            ; ---------------------------------------------------------------------------
0000FF14                            ; Animation script - Yadrin enemy
0000FF14                            ; ---------------------------------------------------------------------------
0000FF14 0000                       		dc.w byte_F920-Ani_obj50
0000FF16 0000                       		dc.w byte_F924-Ani_obj50
0000FF18 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FF1C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FF26                            		even
0000FF26                            		even
0000FF26                            
0000FF26                            ; ---------------------------------------------------------------------------
0000FF26                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FF26                            ; ---------------------------------------------------------------------------
0000FF26                            Map_obj50:
0000FF26                            	include "_maps\obj50.asm"
0000FF26                            Map_ff24:
0000FF26 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0000FF28 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0000FF2A 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0000FF2C 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0000FF2E 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0000FF30 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0000FF32 05                         Map_ff24_C: 	dc.b $5
0000FF33 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0000FF38 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0000FF3D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FF42 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FF47 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0000FF4C 05                         Map_ff24_26: 	dc.b $5
0000FF4D F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0000FF52 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0000FF57 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FF5C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FF61 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0000FF66 05                         Map_ff24_40: 	dc.b $5
0000FF67 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0000FF6C 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0000FF71 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FF76 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FF7B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0000FF80 05                         Map_ff24_5A: 	dc.b $5
0000FF81 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0000FF86 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0000FF8B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FF90 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FF95 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0000FF9A 05                         Map_ff24_74: 	dc.b $5
0000FF9B F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0000FFA0 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0000FFA5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FFAA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FFAF 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0000FFB4 05                         Map_ff24_8E: 	dc.b $5
0000FFB5 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0000FFBA 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0000FFBF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0000FFC4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0000FFC9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0000FFCE                            	even
0000FFCE                            	even
0000FFCE                            
0000FFCE                            ; ---------------------------------------------------------------------------
0000FFCE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FFCE                            ;
0000FFCE                            ; variables:
0000FFCE                            ; d1 = width
0000FFCE                            ; d2 = height /	2 (when	jumping)
0000FFCE                            ; d3 = height /	2 (when	walking)
0000FFCE                            ; d4 = x-axis position
0000FFCE                            ; ---------------------------------------------------------------------------
0000FFCE                            
0000FFCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFCE                            
0000FFCE                            
0000FFCE                            SolidObject:
0000FFCE 4A28 0025                  		tst.b	$25(a0)
0000FFD2 6700 0000                  		beq.w	loc_FAC8
0000FFD6 3401                       		move.w	d1,d2
0000FFD8 D442                       		add.w	d2,d2
0000FFDA 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFDE 0829 0001 0022             		btst	#1,$22(a1)
0000FFE4 6600                       		bne.s	loc_F9FE
0000FFE6 3029 0008                  		move.w	8(a1),d0
0000FFEA 9068 0008                  		sub.w	8(a0),d0
0000FFEE D041                       		add.w	d1,d0
0000FFF0 6B00                       		bmi.s	loc_F9FE
0000FFF2 B042                       		cmp.w	d2,d0
0000FFF4 6500                       		bcs.s	loc_FA12
0000FFF6                            
0000FFF6                            loc_F9FE:
0000FFF6 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFFC 08A8 0003 0022             		bclr	#3,$22(a0)
00010002 4228 0025                  		clr.b	$25(a0)
00010006 7800                       		moveq	#0,d4
00010008 4E75                       		rts	
0001000A                            ; ===========================================================================
0001000A                            
0001000A                            loc_FA12:
0001000A 3404                       		move.w	d4,d2
0001000C                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0001000C 7800                       		moveq	#0,d4
0001000E 4E75                       		rts	
00010010                            ; ===========================================================================
00010010                            
00010010                            SolidObject71:				; XREF: Obj71_Solid
00010010 4A28 0025                  		tst.b	$25(a0)
00010014 6700 0000                  		beq.w	loc_FAD0
00010018 3401                       		move.w	d1,d2
0001001A D442                       		add.w	d2,d2
0001001C 43F8 D000                  		lea	($FFFFD000).w,a1
00010020 0829 0001 0022             		btst	#1,$22(a1)
00010026 6600                       		bne.s	loc_FA44
00010028 3029 0008                  		move.w	8(a1),d0
0001002C 9068 0008                  		sub.w	8(a0),d0
00010030 D041                       		add.w	d1,d0
00010032 6B00                       		bmi.s	loc_FA44
00010034 B042                       		cmp.w	d2,d0
00010036 6500                       		bcs.s	loc_FA58
00010038                            
00010038                            loc_FA44:
00010038 08A9 0003 0022             		bclr	#3,$22(a1)
0001003E 08A8 0003 0022             		bclr	#3,$22(a0)
00010044 4228 0025                  		clr.b	$25(a0)
00010048 7800                       		moveq	#0,d4
0001004A 4E75                       		rts	
0001004C                            ; ===========================================================================
0001004C                            
0001004C                            loc_FA58:
0001004C 3404                       		move.w	d4,d2
0001004E                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001004E 7800                       		moveq	#0,d4
00010050 4E75                       		rts	
00010052                            ; ===========================================================================
00010052                            
00010052                            SolidObject2F:				; XREF: Obj2F_Solid
00010052 43F8 D000                  		lea	($FFFFD000).w,a1
00010056 4A28 0001                  		tst.b	1(a0)
0001005A 6A00 0000                  		bpl.w	loc_FB92
0001005E 3029 0008                  		move.w	8(a1),d0
00010062 9068 0008                  		sub.w	8(a0),d0
00010066 D041                       		add.w	d1,d0
00010068 6B00 0000                  		bmi.w	loc_FB92
0001006C 3601                       		move.w	d1,d3
0001006E D643                       		add.w	d3,d3
00010070 B043                       		cmp.w	d3,d0
00010072 6200 0000                  		bhi.w	loc_FB92
00010076 3A00                       		move.w	d0,d5
00010078 0828 0000 0001             		btst	#0,1(a0)
0001007E 6700                       		beq.s	loc_FA94
00010080 4645                       		not.w	d5
00010082 DA43                       		add.w	d3,d5
00010084                            
00010084                            loc_FA94:
00010084 E24D                       		lsr.w	#1,d5
00010086 7600                       		moveq	#0,d3
00010088 1632 5000                  		move.b	(a2,d5.w),d3
0001008C 9612                       		sub.b	(a2),d3
0001008E 3A28 000C                  		move.w	$C(a0),d5
00010092 9A43                       		sub.w	d3,d5
00010094 1629 0016                  		move.b	$16(a1),d3
00010098 4883                       		ext.w	d3
0001009A D443                       		add.w	d3,d2
0001009C 3629 000C                  		move.w	$C(a1),d3
000100A0 9645                       		sub.w	d5,d3
000100A2 5843                       		addq.w	#4,d3
000100A4 D642                       		add.w	d2,d3
000100A6 6B00 0000                  		bmi.w	loc_FB92
000100AA 3802                       		move.w	d2,d4
000100AC D844                       		add.w	d4,d4
000100AE B644                       		cmp.w	d4,d3
000100B0 6400 0000                  		bcc.w	loc_FB92
000100B4 6000 0000                  		bra.w	loc_FB0E
000100B8                            ; ===========================================================================
000100B8                            
000100B8                            loc_FAC8:
000100B8 4A28 0001                  		tst.b	1(a0)
000100BC 6A00 0000                  		bpl.w	loc_FB92
000100C0                            
000100C0                            loc_FAD0:
000100C0 43F8 D000                  		lea	($FFFFD000).w,a1
000100C4 3029 0008                  		move.w	8(a1),d0
000100C8 9068 0008                  		sub.w	8(a0),d0
000100CC D041                       		add.w	d1,d0
000100CE 6B00 0000                  		bmi.w	loc_FB92
000100D2 3601                       		move.w	d1,d3
000100D4 D643                       		add.w	d3,d3
000100D6 B043                       		cmp.w	d3,d0
000100D8 6200 0000                  		bhi.w	loc_FB92
000100DC 1629 0016                  		move.b	$16(a1),d3
000100E0 4883                       		ext.w	d3
000100E2 D443                       		add.w	d3,d2
000100E4 3629 000C                  		move.w	$C(a1),d3
000100E8 9668 000C                  		sub.w	$C(a0),d3
000100EC 5843                       		addq.w	#4,d3
000100EE D642                       		add.w	d2,d3
000100F0 6B00 0000                  		bmi.w	loc_FB92
000100F4 3802                       		move.w	d2,d4
000100F6 D844                       		add.w	d4,d4
000100F8 B644                       		cmp.w	d4,d3
000100FA 6400 0000                  		bcc.w	loc_FB92
000100FE                            
000100FE                            loc_FB0E:
000100FE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010102 6B00 0000                  		bmi.w	loc_FB92
00010106 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001010C 6400 0000                  		bcc.w	loc_FB92
00010110 4A78 FE08                  		tst.w	($FFFFFE08).w
00010114 6600 0000                  		bne.w	loc_FBAC
00010118 3A00                       		move.w	d0,d5
0001011A B240                       		cmp.w	d0,d1
0001011C 6400                       		bcc.s	loc_FB36
0001011E D241                       		add.w	d1,d1
00010120 9041                       		sub.w	d1,d0
00010122 3A00                       		move.w	d0,d5
00010124 4445                       		neg.w	d5
00010126                            
00010126                            loc_FB36:
00010126 3203                       		move.w	d3,d1
00010128 B443                       		cmp.w	d3,d2
0001012A 6400                       		bcc.s	loc_FB44
0001012C 5943                       		subq.w	#4,d3
0001012E 9644                       		sub.w	d4,d3
00010130 3203                       		move.w	d3,d1
00010132 4441                       		neg.w	d1
00010134                            
00010134                            loc_FB44:
00010134 BA41                       		cmp.w	d1,d5
00010136 6200 0000                  		bhi.w	loc_FBB0
0001013A 0C41 0004                  		cmpi.w	#4,d1
0001013E 6300                       		bls.s	loc_FB8C
00010140 4A40                       		tst.w	d0
00010142 6700                       		beq.s	loc_FB70
00010144 6B00                       		bmi.s	loc_FB5E
00010146 4A69 0010                  		tst.w	$10(a1)
0001014A 6B00                       		bmi.s	loc_FB70
0001014C 6000                       		bra.s	loc_FB64
0001014E                            ; ===========================================================================
0001014E                            
0001014E                            loc_FB5E:
0001014E 4A69 0010                  		tst.w	$10(a1)
00010152 6A00                       		bpl.s	loc_FB70
00010154                            
00010154                            loc_FB64:
00010154 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001015A 337C 0000 0010             		move.w	#0,$10(a1)
00010160                            
00010160                            loc_FB70:
00010160 9169 0008                  		sub.w	d0,8(a1)
00010164 0829 0001 0022             		btst	#1,$22(a1)
0001016A 6600                       		bne.s	loc_FB8C
0001016C 08E9 0005 0022             		bset	#5,$22(a1)
00010172 08E8 0005 0022             		bset	#5,$22(a0)
00010178 7801                       		moveq	#1,d4
0001017A 4E75                       		rts	
0001017C                            ; ===========================================================================
0001017C                            
0001017C                            loc_FB8C:
0001017C 6100                       		bsr.s	loc_FBA0
0001017E 7801                       		moveq	#1,d4
00010180 4E75                       		rts	
00010182                            ; ===========================================================================
00010182                            
00010182                            loc_FB92:
00010182 0828 0005 0022             		btst	#5,$22(a0)
00010188 6700                       		beq.s	loc_FBAC
0001018A 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010190                            
00010190                            loc_FBA0:
00010190 08A8 0005 0022             		bclr	#5,$22(a0)
00010196 08A9 0005 0022             		bclr	#5,$22(a1)
0001019C                            
0001019C                            loc_FBAC:
0001019C 7800                       		moveq	#0,d4
0001019E 4E75                       		rts	
000101A0                            ; ===========================================================================
000101A0                            
000101A0                            loc_FBB0:
000101A0 4A43                       		tst.w	d3
000101A2 6B00                       		bmi.s	loc_FBBC
000101A4 0C43 0010                  		cmpi.w	#$10,d3
000101A8 6500                       		bcs.s	loc_FBEE
000101AA 60D6                       		bra.s	loc_FB92
000101AC                            ; ===========================================================================
000101AC                            
000101AC                            loc_FBBC:
000101AC 4A69 0012                  		tst.w	$12(a1)
000101B0 6700                       		beq.s	loc_FBD6
000101B2 6A00                       		bpl.s	loc_FBD2
000101B4 4A43                       		tst.w	d3
000101B6 6A00                       		bpl.s	loc_FBD2
000101B8 9769 000C                  		sub.w	d3,$C(a1)
000101BC 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000101C2                            
000101C2                            loc_FBD2:
000101C2 78FF                       		moveq	#-1,d4
000101C4 4E75                       		rts	
000101C6                            ; ===========================================================================
000101C6                            
000101C6                            loc_FBD6:
000101C6 0829 0001 0022             		btst	#1,$22(a1)
000101CC 66F4                       		bne.s	loc_FBD2
000101CE 2F08                       		move.l	a0,-(sp)
000101D0 2049                       		movea.l	a1,a0
000101D2 4EB9 0000 0000             		jsr	KillSonic
000101D8 205F                       		movea.l	(sp)+,a0
000101DA 78FF                       		moveq	#-1,d4
000101DC 4E75                       		rts	
000101DE                            ; ===========================================================================
000101DE                            
000101DE                            loc_FBEE:
000101DE 5943                       		subq.w	#4,d3
000101E0 7200                       		moveq	#0,d1
000101E2 1228 0019                  		move.b	$19(a0),d1
000101E6 3401                       		move.w	d1,d2
000101E8 D442                       		add.w	d2,d2
000101EA D269 0008                  		add.w	8(a1),d1
000101EE 9268 0008                  		sub.w	8(a0),d1
000101F2 6B00                       		bmi.s	loc_FC28
000101F4 B242                       		cmp.w	d2,d1
000101F6 6400                       		bcc.s	loc_FC28
000101F8 4A69 0012                  		tst.w	$12(a1)
000101FC 6B00                       		bmi.s	loc_FC28
000101FE 9769 000C                  		sub.w	d3,$C(a1)
00010202 5369 000C                  		subq.w	#1,$C(a1)
00010206 6100                       		bsr.s	sub_FC2C
00010208 117C 0002 0025             		move.b	#2,$25(a0)
0001020E 08E8 0003 0022             		bset	#3,$22(a0)
00010214 78FF                       		moveq	#-1,d4
00010216 4E75                       		rts	
00010218                            ; ===========================================================================
00010218                            
00010218                            loc_FC28:
00010218 7800                       		moveq	#0,d4
0001021A 4E75                       		rts	
0001021C                            ; End of function SolidObject
0001021C                            
0001021C                            
0001021C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001021C                            
0001021C                            
0001021C                            sub_FC2C:				; XREF: SolidObject
0001021C 0829 0003 0022             		btst	#3,$22(a1)
00010222 6700                       		beq.s	loc_FC4E
00010224 7000                       		moveq	#0,d0
00010226 1029 003D                  		move.b	$3D(a1),d0
0001022A ED48                       		lsl.w	#6,d0
0001022C 0680 00FF D000             		addi.l	#$FFD000,d0
00010232 2440                       		movea.l	d0,a2
00010234 08AA 0003 0022             		bclr	#3,$22(a2)
0001023A 422A 0025                  		clr.b	$25(a2)
0001023E                            
0001023E                            loc_FC4E:
0001023E 3008                       		move.w	a0,d0
00010240 0440 D000                  		subi.w	#-$3000,d0
00010244 EC48                       		lsr.w	#6,d0
00010246 0240 007F                  		andi.w	#$7F,d0
0001024A 1340 003D                  		move.b	d0,$3D(a1)
0001024E 137C 0000 0026             		move.b	#0,$26(a1)
00010254 337C 0000 0012             		move.w	#0,$12(a1)
0001025A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010260 0829 0001 0022             		btst	#1,$22(a1)
00010266 6700                       		beq.s	loc_FC84
00010268 2F08                       		move.l	a0,-(sp)
0001026A 2049                       		movea.l	a1,a0
0001026C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010272 205F                       		movea.l	(sp)+,a0
00010274                            
00010274                            loc_FC84:
00010274 08E9 0003 0022             		bset	#3,$22(a1)
0001027A 08E8 0003 0022             		bset	#3,$22(a0)
00010280 4E75                       		rts	
00010282                            ; End of function sub_FC2C
00010282                            
00010282                            ; ===========================================================================
00010282                            ; ---------------------------------------------------------------------------
00010282                            ; Object 51 - smashable	green block (MZ)
00010282                            ; ---------------------------------------------------------------------------
00010282                            
00010282                            Obj51:					; XREF: Obj_Index
00010282 7000                       		moveq	#0,d0
00010284 1028 0024                  		move.b	$24(a0),d0
00010288 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001028C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010290 6000 FA14                  		bra.w	MarkObjGone
00010294                            ; ===========================================================================
00010294 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010296 0000                       		dc.w Obj51_Solid-Obj51_Index
00010298 0000                       		dc.w Obj51_Display-Obj51_Index
0001029A                            ; ===========================================================================
0001029A                            
0001029A                            Obj51_Main:				; XREF: Obj51_Index
0001029A 5428 0024                  		addq.b	#2,$24(a0)
0001029E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000102A6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000102AC 117C 0004 0001             		move.b	#4,1(a0)
000102B2 117C 0010 0019             		move.b	#$10,$19(a0)
000102B8 117C 0004 0018             		move.b	#4,$18(a0)
000102BE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000102C4                            
000102C4                            Obj51_Solid:				; XREF: Obj51_Index
000102C4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000102CA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000102D0 323C 001B                  		move.w	#$1B,d1
000102D4 343C 0010                  		move.w	#$10,d2
000102D8 363C 0011                  		move.w	#$11,d3
000102DC 3828 0008                  		move.w	8(a0),d4
000102E0 6100 FCEC                  		bsr.w	SolidObject
000102E4 0828 0003 0022             		btst	#3,$22(a0)
000102EA 6600                       		bne.s	Obj51_Smash
000102EC                            
000102EC                            locret_FCFC:
000102EC 4E75                       		rts	
000102EE                            ; ===========================================================================
000102EE                            
000102EE                            Obj51_Smash:				; XREF: Obj51_Solid
000102EE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000102F4 66F6                       		bne.s	locret_FCFC	; if not, branch
000102F6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000102FC 08E9 0002 0022             		bset	#2,$22(a1)
00010302 137C 000E 0016             		move.b	#$E,$16(a1)
00010308 137C 0007 0017             		move.b	#7,$17(a1)
0001030E 137C 0002 001C             		move.b	#2,$1C(a1)
00010314 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001031A 08E9 0001 0022             		bset	#1,$22(a1)
00010320 08A9 0003 0022             		bclr	#3,$22(a1)
00010326 137C 0002 0024             		move.b	#2,$24(a1)
0001032C 08A8 0003 0022             		bclr	#3,$22(a0)
00010332 4228 0025                  		clr.b	$25(a0)
00010336 117C 0001 001A             		move.b	#1,$1A(a0)
0001033C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010342 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010344 343C 0038                  		move.w	#$38,d2
00010348 6100 D4A2                  		bsr.w	SmashObject
0001034C 6100 DD36                  		bsr.w	SingleObjLoad
00010350 6600                       		bne.s	Obj51_Display
00010352 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010356 3368 0008 0008             		move.w	8(a0),8(a1)
0001035C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010362 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010366 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001036A 0C42 0006                  		cmpi.w	#6,d2
0001036E 6500                       		bcs.s	Obj51_Bonus
00010370 7406                       		moveq	#6,d2
00010372                            
00010372                            Obj51_Bonus:
00010372 7000                       		moveq	#0,d0
00010374 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010378 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001037E 6500                       		bcs.s	loc_FD98	; if not, branch
00010380 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010384 740A                       		moveq	#10,d2
00010386                            
00010386                            loc_FD98:
00010386 4EB9 0000 0000             		jsr	AddPoints
0001038C E24A                       		lsr.w	#1,d2
0001038E 1342 001A                  		move.b	d2,$1A(a1)
00010392                            
00010392                            Obj51_Display:				; XREF: Obj51_Index
00010392 6100 D844                  		bsr.w	SpeedToPos
00010396 0668 0038 0012             		addi.w	#$38,$12(a0)
0001039C 6100 D860                  		bsr.w	DisplaySprite
000103A0 4A28 0001                  		tst.b	1(a0)
000103A4 6A00 D894                  		bpl.w	DeleteObject
000103A8 4E75                       		rts	
000103AA                            ; ===========================================================================
000103AA FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000103AE FF00 FF00                  		dc.w $FF00, $FF00
000103B2 0200 FE00                  		dc.w $200, $FE00
000103B6 0100 FF00                  		dc.w $100, $FF00
000103BA                            
000103BA 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000103C2                            ; ---------------------------------------------------------------------------
000103C2                            ; Sprite mappings - smashable green block (MZ)
000103C2                            ; ---------------------------------------------------------------------------
000103C2                            Map_obj51:
000103C2                            	include "_maps\obj51.asm"
000103C2                            ; ---------------------------------------------------------------------------
000103C2                            ; Sprite mappings - smashable green block (MZ)
000103C2                            ; ---------------------------------------------------------------------------
000103C2 0000                       		dc.w byte_FDD8-Map_obj51
000103C4 0000                       		dc.w byte_FDE3-Map_obj51
000103C6 02                         byte_FDD8:	dc.b 2
000103C7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000103CC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000103D1 04                         byte_FDE3:	dc.b 4
000103D2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000103D7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000103DC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000103E1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000103E6                            		even
000103E6                            		even
000103E6                            
000103E6                            ; ===========================================================================
000103E6                            ; ---------------------------------------------------------------------------
000103E6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000103E6                            ; ---------------------------------------------------------------------------
000103E6                            
000103E6                            Obj52:					; XREF: Obj_Index
000103E6 7000                       		moveq	#0,d0
000103E8 1028 0024                  		move.b	$24(a0),d0
000103EC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000103F0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000103F4                            ; ===========================================================================
000103F4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103F6 0000                       		dc.w Obj52_Platform-Obj52_Index
000103F8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000103FA                            
000103FA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000103FC 2001                       		dc.b $20, 1
000103FE 2002                       		dc.b $20, 2
00010400 4003                       		dc.b $40, 3
00010402 3004                       		dc.b $30, 4
00010404                            ; ===========================================================================
00010404                            
00010404                            Obj52_Main:				; XREF: Obj52_Index
00010404 5428 0024                  		addq.b	#2,$24(a0)
00010408 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010410 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010416 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001041C 6600                       		bne.s	loc_FE44
0001041E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010426 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001042C 117C 0007 0016             		move.b	#7,$16(a0)
00010432                            
00010432                            loc_FE44:
00010432 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010438 6600                       		bne.s	loc_FE60
0001043A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010440 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010446 6700                       		beq.s	loc_FE60	; if yes, branch
00010448 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001044E                            
0001044E                            loc_FE60:
0001044E 117C 0004 0001             		move.b	#4,1(a0)
00010454 7000                       		moveq	#0,d0
00010456 1028 0028                  		move.b	$28(a0),d0
0001045A E648                       		lsr.w	#3,d0
0001045C 0240 001E                  		andi.w	#$1E,d0
00010460 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010464 115A 0019                  		move.b	(a2)+,$19(a0)
00010468 115A 001A                  		move.b	(a2)+,$1A(a0)
0001046C 117C 0004 0018             		move.b	#4,$18(a0)
00010472 3168 0008 0030             		move.w	8(a0),$30(a0)
00010478 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001047E 0228 000F 0028             		andi.b	#$F,$28(a0)
00010484                            
00010484                            Obj52_Platform:				; XREF: Obj52_Index
00010484 6100 0000                  		bsr.w	Obj52_Move
00010488 7200                       		moveq	#0,d1
0001048A 1228 0019                  		move.b	$19(a0),d1
0001048E 4EB9 0000 7924             		jsr	(PlatformObject).l
00010494 6000                       		bra.s	Obj52_ChkDel
00010496                            ; ===========================================================================
00010496                            
00010496                            Obj52_StandOn:				; XREF: Obj52_Index
00010496 7200                       		moveq	#0,d1
00010498 1228 0019                  		move.b	$19(a0),d1
0001049C 4EB9 0000 7A98             		jsr	(ExitPlatform).l
000104A2 3F28 0008                  		move.w	8(a0),-(sp)
000104A6 6100 0000                  		bsr.w	Obj52_Move
000104AA 341F                       		move.w	(sp)+,d2
000104AC 4EB9 0000 8002             		jsr	(MvSonicOnPtfm2).l
000104B2                            
000104B2                            Obj52_ChkDel:				; XREF: Obj52_Platform
000104B2 3028 0030                  		move.w	$30(a0),d0
000104B6 0240 FF80                  		andi.w	#$FF80,d0
000104BA 3238 F700                  		move.w	($FFFFF700).w,d1
000104BE 0441 0080                  		subi.w	#$80,d1
000104C2 0241 FF80                  		andi.w	#$FF80,d1
000104C6 9041                       		sub.w	d1,d0
000104C8 0C40 0280                  		cmpi.w	#$280,d0
000104CC 6200 D76C                  		bhi.w	DeleteObject
000104D0 6000 D72C                  		bra.w	DisplaySprite
000104D4                            ; ===========================================================================
000104D4                            
000104D4                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000104D4 7000                       		moveq	#0,d0
000104D6 1028 0028                  		move.b	$28(a0),d0
000104DA 0240 000F                  		andi.w	#$F,d0
000104DE D040                       		add.w	d0,d0
000104E0 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000104E4 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000104E8                            ; ===========================================================================
000104E8 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000104EC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000104F0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000104F4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104F8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000104FC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000104FE                            ; ===========================================================================
000104FE                            
000104FE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000104FE 4E75                       		rts	
00010500                            ; ===========================================================================
00010500                            
00010500                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010500 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010504 323C 0060                  		move.w	#$60,d1
00010508 0828 0000 0022             		btst	#0,$22(a0)
0001050E 6700                       		beq.s	loc_FF26
00010510 4440                       		neg.w	d0
00010512 D041                       		add.w	d1,d0
00010514                            
00010514                            loc_FF26:
00010514 3228 0030                  		move.w	$30(a0),d1
00010518 9240                       		sub.w	d0,d1
0001051A 3141 0008                  		move.w	d1,8(a0)
0001051E 4E75                       		rts	
00010520                            ; ===========================================================================
00010520                            
00010520                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010520 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010526 6600                       		bne.s	Obj52_02_Wait
00010528 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001052C                            
0001052C                            Obj52_02_Wait:
0001052C 4E75                       		rts	
0001052E                            ; ===========================================================================
0001052E                            
0001052E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001052E 7600                       		moveq	#0,d3
00010530 1628 0019                  		move.b	$19(a0),d3
00010534 6100 0000                  		bsr.w	ObjHitWallRight
00010538 4A41                       		tst.w	d1		; has the platform hit a wall?
0001053A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001053C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010540 3168 0008 0030             		move.w	8(a0),$30(a0)
00010546 4E75                       		rts	
00010548                            ; ===========================================================================
00010548                            
00010548                            Obj52_03_End:
00010548 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001054C 4E75                       		rts	
0001054E                            ; ===========================================================================
0001054E                            
0001054E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001054E 7600                       		moveq	#0,d3
00010550 1628 0019                  		move.b	$19(a0),d3
00010554 6100 0000                  		bsr.w	ObjHitWallRight
00010558 4A41                       		tst.w	d1		; has the platform hit a wall?
0001055A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001055C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010560 3168 0008 0030             		move.w	8(a0),$30(a0)
00010566 4E75                       		rts	
00010568                            ; ===========================================================================
00010568                            
00010568                            Obj52_05_End:
00010568 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001056C 4E75                       		rts	
0001056E                            ; ===========================================================================
0001056E                            
0001056E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001056E 6100 D668                  		bsr.w	SpeedToPos
00010572 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010578 6100 0000                  		bsr.w	ObjHitFloor
0001057C 4A41                       		tst.w	d1		; has platform hit the floor?
0001057E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010582 D368 000C                  		add.w	d1,$C(a0)
00010586 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001058A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001058E                            
0001058E                            locret_FFA0:
0001058E 4E75                       		rts	
00010590                            ; ===========================================================================
00010590                            
00010590                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010590 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010594 6700                       		beq.s	Obj52_07_ChkDel
00010596 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001059A                            
0001059A                            Obj52_07_ChkDel:
0001059A 588F                       		addq.l	#4,sp
0001059C 3028 0030                  		move.w	$30(a0),d0
000105A0 0240 FF80                  		andi.w	#$FF80,d0
000105A4 3238 F700                  		move.w	($FFFFF700).w,d1
000105A8 0441 0080                  		subi.w	#$80,d1
000105AC 0241 FF80                  		andi.w	#$FF80,d1
000105B0 9041                       		sub.w	d1,d0
000105B2 0C40 0280                  		cmpi.w	#$280,d0
000105B6 6200 D682                  		bhi.w	DeleteObject
000105BA 4E75                       		rts	
000105BC                            ; ===========================================================================
000105BC                            
000105BC                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000105BC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000105C0 323C 0080                  		move.w	#$80,d1
000105C4 0828 0000 0022             		btst	#0,$22(a0)
000105CA 6700                       		beq.s	loc_FFE2
000105CC 4440                       		neg.w	d0
000105CE D041                       		add.w	d1,d0
000105D0                            
000105D0                            loc_FFE2:
000105D0 3228 0032                  		move.w	$32(a0),d1
000105D4 9240                       		sub.w	d0,d1
000105D6 3141 000C                  		move.w	d1,$C(a0)
000105DA 4E75                       		rts	
000105DC                            ; ===========================================================================
000105DC                            
000105DC                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000105DC 7600                       		moveq	#0,d3
000105DE 1628 0019                  		move.b	$19(a0),d3
000105E2 D643                       		add.w	d3,d3
000105E4 7208                       		moveq	#8,d1
000105E6 0828 0000 0022             		btst	#0,$22(a0)
000105EC 6700                       		beq.s	loc_10004
000105EE 4441                       		neg.w	d1
000105F0 4443                       		neg.w	d3
000105F2                            
000105F2                            loc_10004:
000105F2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105F6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105F8 3028 0008                  		move.w	8(a0),d0
000105FC 9068 0030                  		sub.w	$30(a0),d0
00010600 B043                       		cmp.w	d3,d0
00010602 6700                       		beq.s	Obj52_0A_Wait
00010604 D368 0008                  		add.w	d1,8(a0)	; move platform
00010608 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001060E 4E75                       		rts	
00010610                            ; ===========================================================================
00010610                            
00010610                            Obj52_0A_Wait:
00010610 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010614 6600                       		bne.s	locret_1002E	; if time remains, branch
00010616 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001061C                            
0001061C                            locret_1002E:
0001061C 4E75                       		rts	
0001061E                            ; ===========================================================================
0001061E                            
0001061E                            Obj52_0A_Back:
0001061E 3028 0008                  		move.w	8(a0),d0
00010622 9068 0030                  		sub.w	$30(a0),d0
00010626 6700                       		beq.s	Obj52_0A_Reset
00010628 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001062C 4E75                       		rts	
0001062E                            ; ===========================================================================
0001062E                            
0001062E                            Obj52_0A_Reset:
0001062E 4268 0036                  		clr.w	$36(a0)
00010632 5328 0028                  		subq.b	#1,$28(a0)
00010636 4E75                       		rts	
00010638                            ; ===========================================================================
00010638                            ; ---------------------------------------------------------------------------
00010638                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010638                            ; ---------------------------------------------------------------------------
00010638                            Map_obj52:
00010638                            	include "_maps\obj52mz.asm"
00010638                            ; ---------------------------------------------------------------------------
00010638                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010638                            ; ---------------------------------------------------------------------------
00010638 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001063C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010640 0000                       		dc.w byte_1008F-Map_obj52
00010642 01                         byte_10054:	dc.b 1
00010643 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010648 02                         byte_1005A:	dc.b 2
00010649 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001064E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010653 04                         byte_10065:	dc.b 4
00010654 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010659 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001065E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010663 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010668 04                         byte_1007A:	dc.b 4
00010669 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001066E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010673 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010678 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001067D 03                         byte_1008F:	dc.b 3
0001067E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010683 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010688 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001068E 00                         		even
0001068E 00                         		even
0001068E                            
0001068E                            ; ---------------------------------------------------------------------------
0001068E                            ; Sprite mappings - moving block (LZ)
0001068E                            ; ---------------------------------------------------------------------------
0001068E                            Map_obj52a:
0001068E                            	include "_maps\obj52lz.asm"
0001068E                            ; ---------------------------------------------------------------------------
0001068E                            ; Sprite mappings - moving block (LZ)
0001068E                            ; ---------------------------------------------------------------------------
0001068E 0000                       		dc.w byte_100A2-Map_obj52a
00010690 01                         byte_100A2:	dc.b 1
00010691 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010696                            		even
00010696                            		even
00010696                            
00010696                            ; ===========================================================================
00010696                            ; ---------------------------------------------------------------------------
00010696                            ; Object 55 - Basaran enemy (MZ)
00010696                            ; ---------------------------------------------------------------------------
00010696                            
00010696                            Obj55:					; XREF: Obj_Index
00010696 7000                       		moveq	#0,d0
00010698 1028 0024                  		move.b	$24(a0),d0
0001069C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000106A0 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000106A4                            ; ===========================================================================
000106A4 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000106A6 0000                       		dc.w Obj55_Action-Obj55_Index
000106A8                            ; ===========================================================================
000106A8                            
000106A8                            Obj55_Main:				; XREF: Obj55_Index
000106A8 5428 0024                  		addq.b	#2,$24(a0)
000106AC 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000106B4 317C 84B8 0002             		move.w	#$84B8,2(a0)
000106BA 117C 0004 0001             		move.b	#4,1(a0)
000106C0 117C 000C 0016             		move.b	#$C,$16(a0)
000106C6 117C 0002 0018             		move.b	#2,$18(a0)
000106CC 117C 000B 0020             		move.b	#$B,$20(a0)
000106D2 117C 0010 0019             		move.b	#$10,$19(a0)
000106D8                            
000106D8                            Obj55_Action:				; XREF: Obj55_Index
000106D8 7000                       		moveq	#0,d0
000106DA 1028 0025                  		move.b	$25(a0),d0
000106DE 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000106E2 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000106E6 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000106EC 6100 A5DA                  		bsr.w	AnimateSprite
000106F0 6000 F5B4                  		bra.w	MarkObjGone
000106F4                            ; ===========================================================================
000106F4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106F6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106F8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000106FA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000106FC                            ; ===========================================================================
000106FC                            
000106FC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000106FC 343C 0080                  		move.w	#$80,d2
00010700 6100 0000                  		bsr.w	Obj55_ChkSonic
00010704 6400                       		bcc.s	Obj55_NoDrop
00010706 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001070A 3140 0036                  		move.w	d0,$36(a0)
0001070E 9068 000C                  		sub.w	$C(a0),d0
00010712 6500                       		bcs.s	Obj55_NoDrop
00010714 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010718 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001071A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001071E 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010720 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010724 D007                       		add.b	d7,d0
00010726 0200 0007                  		andi.b	#7,d0
0001072A 6600                       		bne.s	Obj55_NoDrop
0001072C 117C 0001 001C             		move.b	#1,$1C(a0)
00010732 5428 0025                  		addq.b	#2,$25(a0)
00010736                            
00010736                            Obj55_NoDrop:
00010736 4E75                       		rts	
00010738                            ; ===========================================================================
00010738                            
00010738                            Obj55_DropFly:				; XREF: Obj55_Index2
00010738 6100 D49E                  		bsr.w	SpeedToPos
0001073C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010742 343C 0080                  		move.w	#$80,d2
00010746 6100 0000                  		bsr.w	Obj55_ChkSonic
0001074A 3028 0036                  		move.w	$36(a0),d0
0001074E 9068 000C                  		sub.w	$C(a0),d0
00010752 6500                       		bcs.s	Obj55_ChkDel
00010754 0C40 0010                  		cmpi.w	#$10,d0
00010758 6400                       		bcc.s	locret_10180
0001075A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001075E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010764 117C 0002 001C             		move.b	#2,$1C(a0)
0001076A 5428 0025                  		addq.b	#2,$25(a0)
0001076E                            
0001076E                            locret_10180:
0001076E 4E75                       		rts	
00010770                            ; ===========================================================================
00010770                            
00010770                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010770 4A28 0001                  		tst.b	1(a0)
00010774 6A00 D4C4                  		bpl.w	DeleteObject
00010778 4E75                       		rts	
0001077A                            ; ===========================================================================
0001077A                            
0001077A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001077A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001077E 0200 000F                  		andi.b	#$F,d0
00010782 6600                       		bne.s	loc_101A0
00010784 303C 00C0                  		move.w	#$C0,d0
00010788 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
0001078E                            
0001078E                            loc_101A0:
0001078E 6100 D448                  		bsr.w	SpeedToPos
00010792 3038 D008                  		move.w	($FFFFD008).w,d0
00010796 9068 0008                  		sub.w	8(a0),d0
0001079A 6400                       		bcc.s	loc_101B0
0001079C 4440                       		neg.w	d0
0001079E                            
0001079E                            loc_101B0:
0001079E 0C40 0080                  		cmpi.w	#$80,d0
000107A2 6500                       		bcs.s	locret_101C6
000107A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000107A8 D007                       		add.b	d7,d0
000107AA 0200 0007                  		andi.b	#7,d0
000107AE 6600                       		bne.s	locret_101C6
000107B0 5428 0025                  		addq.b	#2,$25(a0)
000107B4                            
000107B4                            locret_101C6:
000107B4 4E75                       		rts	
000107B6                            ; ===========================================================================
000107B6                            
000107B6                            Obj55_FlyUp:				; XREF: Obj55_Index2
000107B6 6100 D420                  		bsr.w	SpeedToPos
000107BA 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000107C0 6100 0000                  		bsr.w	ObjHitCeiling
000107C4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000107C6 6A00                       		bpl.s	locret_101F4	; if not, branch
000107C8 9368 000C                  		sub.w	d1,$C(a0)
000107CC 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000107D2 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000107D6 4268 0012                  		clr.w	$12(a0)
000107DA 4228 001C                  		clr.b	$1C(a0)
000107DE 4228 0025                  		clr.b	$25(a0)
000107E2                            
000107E2                            locret_101F4:
000107E2 4E75                       		rts	
000107E4                            ; ===========================================================================
000107E4                            
000107E4                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000107E4 323C 0100                  		move.w	#$100,d1
000107E8 08E8 0000 0022             		bset	#0,$22(a0)
000107EE 3038 D008                  		move.w	($FFFFD008).w,d0
000107F2 9068 0008                  		sub.w	8(a0),d0
000107F6 6400                       		bcc.s	loc_10214
000107F8 4440                       		neg.w	d0
000107FA 4441                       		neg.w	d1
000107FC 08A8 0000 0022             		bclr	#0,$22(a0)
00010802                            
00010802                            loc_10214:
00010802 B042                       		cmp.w	d2,d0
00010804 4E75                       		rts	
00010806                            ; ===========================================================================
00010806 6100 D3D0                  		bsr.w	SpeedToPos
0001080A 6100 D3F2                  		bsr.w	DisplaySprite
0001080E 4A28 0001                  		tst.b	1(a0)
00010812 6A00 D426                  		bpl.w	DeleteObject
00010816 4E75                       		rts	
00010818                            ; ===========================================================================
00010818                            Ani_obj55:
00010818                            	include "_anim\obj55.asm"
00010818                            ; ---------------------------------------------------------------------------
00010818                            ; Animation script - Basaran enemy
00010818                            ; ---------------------------------------------------------------------------
00010818 0000                       		dc.w byte_10230-Ani_obj55
0001081A 0000                       		dc.w byte_10234-Ani_obj55
0001081C 0000                       		dc.w byte_10238-Ani_obj55
0001081E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010822 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010826 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001082C                            		even
0001082C                            		even
0001082C                            
0001082C                            ; ---------------------------------------------------------------------------
0001082C                            ; Sprite mappings - Basaran enemy (MZ)
0001082C                            ; ---------------------------------------------------------------------------
0001082C                            Map_obj55:
0001082C                            	include "_maps\obj55.asm"
0001082C                            ; ---------------------------------------------------------------------------
0001082C                            ; Sprite mappings - Basaran enemy (MZ)
0001082C                            ; ---------------------------------------------------------------------------
0001082C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010830 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010834 01                         byte_10246:	dc.b 1
00010835 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0001083A 03                         byte_1024C:	dc.b 3
0001083B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010840 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010845 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
0001084A 04                         byte_1025C:	dc.b 4
0001084B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010850 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010855 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
0001085A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001085F 04                         byte_10271:	dc.b 4
00010860 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010865 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
0001086A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001086F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010874                            		even
00010874                            		even
00010874                            
00010874                            ; ===========================================================================
00010874                            ; ---------------------------------------------------------------------------
00010874                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010874                            ; ---------------------------------------------------------------------------
00010874                            
00010874                            Obj56:					; XREF: Obj_Index
00010874 7000                       		moveq	#0,d0
00010876 1028 0024                  		move.b	$24(a0),d0
0001087A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001087E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010882                            ; ===========================================================================
00010882 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010884 0000                       		dc.w Obj56_Action-Obj56_Index
00010886                            
00010886 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010888 2020                       		dc.b  $20, $20
0001088A 1020                       		dc.b  $10, $20
0001088C 201A                       		dc.b  $20, $1A
0001088E 1027                       		dc.b  $10, $27
00010890 1010                       		dc.b  $10, $10
00010892 0820                       		dc.b	8, $20
00010894 4010                       		dc.b  $40, $10
00010896                            ; ===========================================================================
00010896                            
00010896                            Obj56_Main:				; XREF: Obj56_Index
00010896 5428 0024                  		addq.b	#2,$24(a0)
0001089A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000108A2 317C 4000 0002             		move.w	#$4000,2(a0)
000108A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108AE 6600                       		bne.s	loc_102C8
000108B0 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000108B6                            
000108B6                            loc_102C8:
000108B6 117C 0004 0001             		move.b	#4,1(a0)
000108BC 117C 0003 0018             		move.b	#3,$18(a0)
000108C2 7000                       		moveq	#0,d0
000108C4 1028 0028                  		move.b	$28(a0),d0
000108C8 E648                       		lsr.w	#3,d0
000108CA 0240 000E                  		andi.w	#$E,d0
000108CE 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000108D2 115A 0019                  		move.b	(a2)+,$19(a0)
000108D6 1152 0016                  		move.b	(a2),$16(a0)
000108DA E248                       		lsr.w	#1,d0
000108DC 1140 001A                  		move.b	d0,$1A(a0)
000108E0 3168 0008 0034             		move.w	8(a0),$34(a0)
000108E6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000108EC 7000                       		moveq	#0,d0
000108EE 1012                       		move.b	(a2),d0
000108F0 D040                       		add.w	d0,d0
000108F2 3140 003A                  		move.w	d0,$3A(a0)
000108F6 7000                       		moveq	#0,d0
000108F8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108FE 6700                       		beq.s	loc_10332
00010900 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010904 0240 000F                  		andi.w	#$F,d0
00010908 5140                       		subq.w	#8,d0
0001090A 6500                       		bcs.s	loc_10332
0001090C E548                       		lsl.w	#2,d0
0001090E 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010912 45F2 0000                  		lea	(a2,d0.w),a2
00010916 4A52                       		tst.w	(a2)
00010918 6A00                       		bpl.s	loc_10332
0001091A 0868 0000 0022             		bchg	#0,$22(a0)
00010920                            
00010920                            loc_10332:
00010920 1028 0028                  		move.b	$28(a0),d0
00010924 6A00                       		bpl.s	Obj56_Action
00010926 0200 000F                  		andi.b	#$F,d0
0001092A 1140 003C                  		move.b	d0,$3C(a0)
0001092E 117C 0005 0028             		move.b	#5,$28(a0)
00010934 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
0001093A 6600                       		bne.s	Obj56_ChkGone
0001093C 117C 000C 0028             		move.b	#$C,$28(a0)
00010942 317C 0080 003A             		move.w	#$80,$3A(a0)
00010948                            
00010948                            Obj56_ChkGone:
00010948 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001094C 7000                       		moveq	#0,d0
0001094E 1028 0023                  		move.b	$23(a0),d0
00010952 6700                       		beq.s	Obj56_Action
00010954 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001095A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010960 6700                       		beq.s	Obj56_Action
00010962 5228 0028                  		addq.b	#1,$28(a0)
00010966 4268 003A                  		clr.w	$3A(a0)
0001096A                            
0001096A                            Obj56_Action:				; XREF: Obj56_Index
0001096A 3F28 0008                  		move.w	8(a0),-(sp)
0001096E 7000                       		moveq	#0,d0
00010970 1028 0028                  		move.b	$28(a0),d0	; get object type
00010974 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010978 D040                       		add.w	d0,d0
0001097A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0001097E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010982 381F                       		move.w	(sp)+,d4
00010984 4A28 0001                  		tst.b	1(a0)
00010988 6A00                       		bpl.s	Obj56_ChkDel
0001098A 7200                       		moveq	#0,d1
0001098C 1228 0019                  		move.b	$19(a0),d1
00010990 0641 000B                  		addi.w	#$B,d1
00010994 7400                       		moveq	#0,d2
00010996 1428 0016                  		move.b	$16(a0),d2
0001099A 3602                       		move.w	d2,d3
0001099C 5243                       		addq.w	#1,d3
0001099E 6100 F62E                  		bsr.w	SolidObject
000109A2                            
000109A2                            Obj56_ChkDel:
000109A2 3028 0034                  		move.w	$34(a0),d0
000109A6 0240 FF80                  		andi.w	#$FF80,d0
000109AA 3238 F700                  		move.w	($FFFFF700).w,d1
000109AE 0441 0080                  		subi.w	#$80,d1
000109B2 0241 FF80                  		andi.w	#$FF80,d1
000109B6 9041                       		sub.w	d1,d0
000109B8 0C40 0280                  		cmpi.w	#$280,d0
000109BC 6200 D27C                  		bhi.w	DeleteObject
000109C0 6000 D23C                  		bra.w	DisplaySprite
000109C4                            ; ===========================================================================
000109C4 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
000109C8 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
000109CC 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
000109D0 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
000109D4 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
000109D8 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
000109DC 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000109E0                            ; ===========================================================================
000109E0                            
000109E0                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000109E0 4E75                       		rts	
000109E2                            ; ===========================================================================
000109E2                            
000109E2                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000109E2 323C 0040                  		move.w	#$40,d1
000109E6 7000                       		moveq	#0,d0
000109E8 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109EC 6000                       		bra.s	Obj56_Move_LR
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000109EE 323C 0080                  		move.w	#$80,d1
000109F2 7000                       		moveq	#0,d0
000109F4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109F8                            
000109F8                            Obj56_Move_LR:
000109F8 0828 0000 0022             		btst	#0,$22(a0)
000109FE 6700                       		beq.s	loc_10416
00010A00 4440                       		neg.w	d0
00010A02 D041                       		add.w	d1,d0
00010A04                            
00010A04                            loc_10416:
00010A04 3228 0034                  		move.w	$34(a0),d1
00010A08 9240                       		sub.w	d0,d1
00010A0A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010A0E 4E75                       		rts	
00010A10                            ; ===========================================================================
00010A10                            
00010A10                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010A10 323C 0040                  		move.w	#$40,d1
00010A14 7000                       		moveq	#0,d0
00010A16 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010A1A 6000                       		bra.s	Obj56_Move_UD
00010A1C                            ; ===========================================================================
00010A1C                            
00010A1C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010A1C 323C 0080                  		move.w	#$80,d1
00010A20 7000                       		moveq	#0,d0
00010A22 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A26                            
00010A26                            Obj56_Move_UD:
00010A26 0828 0000 0022             		btst	#0,$22(a0)
00010A2C 6700                       		beq.s	loc_10444
00010A2E 4440                       		neg.w	d0
00010A30 D041                       		add.w	d1,d0
00010A32                            
00010A32                            loc_10444:
00010A32 3228 0030                  		move.w	$30(a0),d1
00010A36 9240                       		sub.w	d0,d1
00010A38 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010A3C 4E75                       		rts	
00010A3E                            ; ===========================================================================
00010A3E                            
00010A3E                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010A3E 4A28 0038                  		tst.b	$38(a0)
00010A42 6600                       		bne.s	loc_104A4
00010A44 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A4A 6600                       		bne.s	loc_1047A	; if not, branch
00010A4C 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010A52 6600                       		bne.s	loc_1047A
00010A54 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A58 3038 D008                  		move.w	($FFFFD008).w,d0
00010A5C B068 0008                  		cmp.w	8(a0),d0
00010A60 6400                       		bcc.s	loc_1047A
00010A62 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A68                            
00010A68                            loc_1047A:
00010A68 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A6C 7000                       		moveq	#0,d0
00010A6E 1028 003C                  		move.b	$3C(a0),d0
00010A72 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A78 6700                       		beq.s	loc_104AE
00010A7A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A80 6600                       		bne.s	loc_1049E	; if not, branch
00010A82 0C00 0003                  		cmpi.b	#3,d0
00010A86 6600                       		bne.s	loc_1049E
00010A88 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A8C                            
00010A8C                            loc_1049E:
00010A8C 117C 0001 0038             		move.b	#1,$38(a0)
00010A92                            
00010A92                            loc_104A4:
00010A92 4A68 003A                  		tst.w	$3A(a0)
00010A96 6700                       		beq.s	loc_104C8
00010A98 5568 003A                  		subq.w	#2,$3A(a0)
00010A9C                            
00010A9C                            loc_104AE:
00010A9C 3028 003A                  		move.w	$3A(a0),d0
00010AA0 0828 0000 0022             		btst	#0,$22(a0)
00010AA6 6700                       		beq.s	loc_104BC
00010AA8 4440                       		neg.w	d0
00010AAA                            
00010AAA                            loc_104BC:
00010AAA 3228 0030                  		move.w	$30(a0),d1
00010AAE D240                       		add.w	d0,d1
00010AB0 3141 000C                  		move.w	d1,$C(a0)
00010AB4 4E75                       		rts	
00010AB6                            ; ===========================================================================
00010AB6                            
00010AB6                            loc_104C8:
00010AB6 5228 0028                  		addq.b	#1,$28(a0)
00010ABA 4228 0038                  		clr.b	$38(a0)
00010ABE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AC2 7000                       		moveq	#0,d0
00010AC4 1028 0023                  		move.b	$23(a0),d0
00010AC8 67D2                       		beq.s	loc_104AE
00010ACA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010AD0 60CA                       		bra.s	loc_104AE
00010AD2                            ; ===========================================================================
00010AD2                            
00010AD2                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010AD2 4A28 0038                  		tst.b	$38(a0)
00010AD6 6600                       		bne.s	loc_10500
00010AD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010ADC 7000                       		moveq	#0,d0
00010ADE 1028 003C                  		move.b	$3C(a0),d0
00010AE2 4A32 0000                  		tst.b	(a2,d0.w)
00010AE6 6A00                       		bpl.s	loc_10512
00010AE8 117C 0001 0038             		move.b	#1,$38(a0)
00010AEE                            
00010AEE                            loc_10500:
00010AEE 7000                       		moveq	#0,d0
00010AF0 1028 0016                  		move.b	$16(a0),d0
00010AF4 D040                       		add.w	d0,d0
00010AF6 B068 003A                  		cmp.w	$3A(a0),d0
00010AFA 6700                       		beq.s	loc_1052C
00010AFC 5468 003A                  		addq.w	#2,$3A(a0)
00010B00                            
00010B00                            loc_10512:
00010B00 3028 003A                  		move.w	$3A(a0),d0
00010B04 0828 0000 0022             		btst	#0,$22(a0)
00010B0A 6700                       		beq.s	loc_10520
00010B0C 4440                       		neg.w	d0
00010B0E                            
00010B0E                            loc_10520:
00010B0E 3228 0030                  		move.w	$30(a0),d1
00010B12 D240                       		add.w	d0,d1
00010B14 3141 000C                  		move.w	d1,$C(a0)
00010B18 4E75                       		rts	
00010B1A                            ; ===========================================================================
00010B1A                            
00010B1A                            loc_1052C:
00010B1A 5328 0028                  		subq.b	#1,$28(a0)
00010B1E 4228 0038                  		clr.b	$38(a0)
00010B22 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B26 7000                       		moveq	#0,d0
00010B28 1028 0023                  		move.b	$23(a0),d0
00010B2C 67D2                       		beq.s	loc_10512
00010B2E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010B34 60CA                       		bra.s	loc_10512
00010B36                            ; ===========================================================================
00010B36                            
00010B36                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010B36 4A28 0038                  		tst.b	$38(a0)
00010B3A 6600                       		bne.s	loc_1055E
00010B3C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010B40 6700                       		beq.s	locret_10578
00010B42 117C 0001 0038             		move.b	#1,$38(a0)
00010B48 4268 003A                  		clr.w	$3A(a0)
00010B4C                            
00010B4C                            loc_1055E:
00010B4C 5268 0008                  		addq.w	#1,8(a0)
00010B50 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B56 5268 003A                  		addq.w	#1,$3A(a0)
00010B5A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B60 6600                       		bne.s	locret_10578
00010B62 4228 0028                  		clr.b	$28(a0)
00010B66                            
00010B66                            locret_10578:
00010B66 4E75                       		rts	
00010B68                            ; ===========================================================================
00010B68                            
00010B68                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B68 4A28 0038                  		tst.b	$38(a0)
00010B6C 6600                       		bne.s	loc_10598
00010B6E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B72 7000                       		moveq	#0,d0
00010B74 1028 003C                  		move.b	$3C(a0),d0
00010B78 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B7E 6700                       		beq.s	loc_105A2
00010B80 117C 0001 0038             		move.b	#1,$38(a0)
00010B86                            
00010B86                            loc_10598:
00010B86 4A68 003A                  		tst.w	$3A(a0)
00010B8A 6700                       		beq.s	loc_105C0
00010B8C 5568 003A                  		subq.w	#2,$3A(a0)
00010B90                            
00010B90                            loc_105A2:
00010B90 3028 003A                  		move.w	$3A(a0),d0
00010B94 0828 0000 0022             		btst	#0,$22(a0)
00010B9A 6700                       		beq.s	loc_105B4
00010B9C 4440                       		neg.w	d0
00010B9E 0640 0080                  		addi.w	#$80,d0
00010BA2                            
00010BA2                            loc_105B4:
00010BA2 3228 0034                  		move.w	$34(a0),d1
00010BA6 D240                       		add.w	d0,d1
00010BA8 3141 0008                  		move.w	d1,8(a0)
00010BAC 4E75                       		rts	
00010BAE                            ; ===========================================================================
00010BAE                            
00010BAE                            loc_105C0:
00010BAE 5228 0028                  		addq.b	#1,$28(a0)
00010BB2 4228 0038                  		clr.b	$38(a0)
00010BB6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BBA 7000                       		moveq	#0,d0
00010BBC 1028 0023                  		move.b	$23(a0),d0
00010BC0 67CE                       		beq.s	loc_105A2
00010BC2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010BC8 60C6                       		bra.s	loc_105A2
00010BCA                            ; ===========================================================================
00010BCA                            
00010BCA                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010BCA 4A28 0038                  		tst.b	$38(a0)
00010BCE 6600                       		bne.s	loc_105F8
00010BD0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BD4 7000                       		moveq	#0,d0
00010BD6 1028 003C                  		move.b	$3C(a0),d0
00010BDA 4A32 0000                  		tst.b	(a2,d0.w)
00010BDE 6A00                       		bpl.s	loc_10606
00010BE0 117C 0001 0038             		move.b	#1,$38(a0)
00010BE6                            
00010BE6                            loc_105F8:
00010BE6 303C 0080                  		move.w	#$80,d0
00010BEA B068 003A                  		cmp.w	$3A(a0),d0
00010BEE 6700                       		beq.s	loc_10624
00010BF0 5468 003A                  		addq.w	#2,$3A(a0)
00010BF4                            
00010BF4                            loc_10606:
00010BF4 3028 003A                  		move.w	$3A(a0),d0
00010BF8 0828 0000 0022             		btst	#0,$22(a0)
00010BFE 6700                       		beq.s	loc_10618
00010C00 4440                       		neg.w	d0
00010C02 0640 0080                  		addi.w	#$80,d0
00010C06                            
00010C06                            loc_10618:
00010C06 3228 0034                  		move.w	$34(a0),d1
00010C0A D240                       		add.w	d0,d1
00010C0C 3141 0008                  		move.w	d1,8(a0)
00010C10 4E75                       		rts	
00010C12                            ; ===========================================================================
00010C12                            
00010C12                            loc_10624:
00010C12 5328 0028                  		subq.b	#1,$28(a0)
00010C16 4228 0038                  		clr.b	$38(a0)
00010C1A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C1E 7000                       		moveq	#0,d0
00010C20 1028 0023                  		move.b	$23(a0),d0
00010C24 67CE                       		beq.s	loc_10606
00010C26 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C2C 60C6                       		bra.s	loc_10606
00010C2E                            ; ===========================================================================
00010C2E                            
00010C2E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010C2E 323C 0010                  		move.w	#$10,d1
00010C32 7000                       		moveq	#0,d0
00010C34 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010C38 E248                       		lsr.w	#1,d0
00010C3A 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010C3E 6000                       		bra.s	Obj56_Move_Sqr
00010C40                            ; ===========================================================================
00010C40                            
00010C40                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010C40 323C 0030                  		move.w	#$30,d1
00010C44 7000                       		moveq	#0,d0
00010C46 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010C4A 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010C4E 6000                       		bra.s	Obj56_Move_Sqr
00010C50                            ; ===========================================================================
00010C50                            
00010C50                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010C50 323C 0050                  		move.w	#$50,d1
00010C54 7000                       		moveq	#0,d0
00010C56 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C5A 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C5E 6000                       		bra.s	Obj56_Move_Sqr
00010C60                            ; ===========================================================================
00010C60                            
00010C60                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C60 323C 0070                  		move.w	#$70,d1
00010C64 7000                       		moveq	#0,d0
00010C66 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C6A 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C6E                            
00010C6E                            Obj56_Move_Sqr:
00010C6E 4A43                       		tst.w	d3
00010C70 6600                       		bne.s	loc_1068E
00010C72 5228 0022                  		addq.b	#1,$22(a0)
00010C76 0228 0003 0022             		andi.b	#3,$22(a0)
00010C7C                            
00010C7C                            loc_1068E:
00010C7C 1428 0022                  		move.b	$22(a0),d2
00010C80 0202 0003                  		andi.b	#3,d2
00010C84 6600                       		bne.s	loc_106AE
00010C86 9041                       		sub.w	d1,d0
00010C88 D068 0034                  		add.w	$34(a0),d0
00010C8C 3140 0008                  		move.w	d0,8(a0)
00010C90 4441                       		neg.w	d1
00010C92 D268 0030                  		add.w	$30(a0),d1
00010C96 3141 000C                  		move.w	d1,$C(a0)
00010C9A 4E75                       		rts	
00010C9C                            ; ===========================================================================
00010C9C                            
00010C9C                            loc_106AE:
00010C9C 5302                       		subq.b	#1,d2
00010C9E 6600                       		bne.s	loc_106CC
00010CA0 5341                       		subq.w	#1,d1
00010CA2 9041                       		sub.w	d1,d0
00010CA4 4440                       		neg.w	d0
00010CA6 D068 0030                  		add.w	$30(a0),d0
00010CAA 3140 000C                  		move.w	d0,$C(a0)
00010CAE 5241                       		addq.w	#1,d1
00010CB0 D268 0034                  		add.w	$34(a0),d1
00010CB4 3141 0008                  		move.w	d1,8(a0)
00010CB8 4E75                       		rts	
00010CBA                            ; ===========================================================================
00010CBA                            
00010CBA                            loc_106CC:
00010CBA 5302                       		subq.b	#1,d2
00010CBC 6600                       		bne.s	loc_106EA
00010CBE 5341                       		subq.w	#1,d1
00010CC0 9041                       		sub.w	d1,d0
00010CC2 4440                       		neg.w	d0
00010CC4 D068 0034                  		add.w	$34(a0),d0
00010CC8 3140 0008                  		move.w	d0,8(a0)
00010CCC 5241                       		addq.w	#1,d1
00010CCE D268 0030                  		add.w	$30(a0),d1
00010CD2 3141 000C                  		move.w	d1,$C(a0)
00010CD6 4E75                       		rts	
00010CD8                            ; ===========================================================================
00010CD8                            
00010CD8                            loc_106EA:
00010CD8 9041                       		sub.w	d1,d0
00010CDA D068 0030                  		add.w	$30(a0),d0
00010CDE 3140 000C                  		move.w	d0,$C(a0)
00010CE2 4441                       		neg.w	d1
00010CE4 D268 0034                  		add.w	$34(a0),d1
00010CE8 3141 0008                  		move.w	d1,8(a0)
00010CEC 4E75                       		rts	
00010CEE                            ; ===========================================================================
00010CEE                            ; ---------------------------------------------------------------------------
00010CEE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CEE                            ; ---------------------------------------------------------------------------
00010CEE                            Map_obj56:
00010CEE                            	include "_maps\obj56.asm"
00010CEE                            ; ---------------------------------------------------------------------------
00010CEE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CEE                            ; ---------------------------------------------------------------------------
00010CEE 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010CF2 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CF6 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010CFA 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010CFE 01                         byte_10710:	dc.b 1
00010CFF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010D04 04                         byte_10716:	dc.b 4
00010D05 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010D0A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010D0F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010D14 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010D19 02                         byte_1072B:	dc.b 2
00010D1A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010D1F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010D24 04                         byte_10736:	dc.b 4
00010D25 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010D2A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010D2F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010D34 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010D39 03                         byte_1074B:	dc.b 3
00010D3A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010D3F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010D44 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010D49 01                         byte_1075B:	dc.b 1
00010D4A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010D4F 02                         byte_10761:	dc.b 2
00010D50 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010D55 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D5A 04                         byte_1076C:	dc.b 4
00010D5B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D60 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D65 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D6A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D70 00                         		even
00010D70 00                         		even
00010D70                            
00010D70                            ; ===========================================================================
00010D70                            ; ---------------------------------------------------------------------------
00010D70                            ; Object 57 - spiked balls (SYZ, LZ)
00010D70                            ; ---------------------------------------------------------------------------
00010D70                            
00010D70                            Obj57:					; XREF: Obj_Index
00010D70 7000                       		moveq	#0,d0
00010D72 1028 0024                  		move.b	$24(a0),d0
00010D76 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D7A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D7E                            ; ===========================================================================
00010D7E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D80 0000                       		dc.w Obj57_Move-Obj57_Index
00010D82 0000                       		dc.w Obj57_Display-Obj57_Index
00010D84                            ; ===========================================================================
00010D84                            
00010D84                            Obj57_Main:				; XREF: Obj57_Index
00010D84 5428 0024                  		addq.b	#2,$24(a0)
00010D88 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D90 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D96 117C 0004 0001             		move.b	#4,1(a0)
00010D9C 117C 0004 0018             		move.b	#4,$18(a0)
00010DA2 117C 0008 0019             		move.b	#8,$19(a0)
00010DA8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010DAE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010DB4 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DC0 6600                       		bne.s	loc_107E8
00010DC2 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010DC8 317C 0310 0002             		move.w	#$310,2(a0)
00010DCE 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010DD6                            
00010DD6                            loc_107E8:
00010DD6 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DDA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010DDE 4881                       		ext.w	d1
00010DE0 E741                       		asl.w	#3,d1		; multiply by 8
00010DE2 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010DE6 1028 0022                  		move.b	$22(a0),d0
00010DEA E418                       		ror.b	#2,d0
00010DEC 0200 00C0                  		andi.b	#-$40,d0
00010DF0 1140 0026                  		move.b	d0,$26(a0)
00010DF4 45E8 0029                  		lea	$29(a0),a2
00010DF8 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DFC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010E00 14FC 0000                  		move.b	#0,(a2)+
00010E04 3601                       		move.w	d1,d3
00010E06 E94B                       		lsl.w	#4,d3
00010E08 1143 003C                  		move.b	d3,$3C(a0)
00010E0C 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010E0E 6500                       		bcs.s	loc_10894
00010E10 0828 0003 0028             		btst	#3,$28(a0)
00010E16 6700                       		beq.s	Obj57_MakeChain
00010E18 5341                       		subq.w	#1,d1
00010E1A 6500                       		bcs.s	loc_10894
00010E1C                            
00010E1C                            Obj57_MakeChain:
00010E1C 6100 D266                  		bsr.w	SingleObjLoad
00010E20 6600                       		bne.s	loc_10894
00010E22 5228 0029                  		addq.b	#1,$29(a0)
00010E26 3A09                       		move.w	a1,d5
00010E28 0445 D000                  		subi.w	#-$3000,d5
00010E2C EC4D                       		lsr.w	#6,d5
00010E2E 0245 007F                  		andi.w	#$7F,d5
00010E32 14C5                       		move.b	d5,(a2)+
00010E34 137C 0004 0024             		move.b	#4,$24(a1)
00010E3A 1290                       		move.b	0(a0),0(a1)
00010E3C 2368 0004 0004             		move.l	4(a0),4(a1)
00010E42 3368 0002 0002             		move.w	2(a0),2(a1)
00010E48 1368 0001 0001             		move.b	1(a0),1(a1)
00010E4E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010E54 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E5A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E60 0403 0010                  		subi.b	#$10,d3
00010E64 1343 003C                  		move.b	d3,$3C(a1)
00010E68 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E6E 6600                       		bne.s	loc_10890
00010E70 4A03                       		tst.b	d3
00010E72 6600                       		bne.s	loc_10890
00010E74 137C 0002 001A             		move.b	#2,$1A(a1)
00010E7A                            
00010E7A                            loc_10890:
00010E7A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E7E                            
00010E7E                            loc_10894:
00010E7E 3A08                       		move.w	a0,d5
00010E80 0445 D000                  		subi.w	#-$3000,d5
00010E84 EC4D                       		lsr.w	#6,d5
00010E86 0245 007F                  		andi.w	#$7F,d5
00010E8A 14C5                       		move.b	d5,(a2)+
00010E8C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E92 6600                       		bne.s	Obj57_Move
00010E94 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E9A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010EA0                            
00010EA0                            Obj57_Move:				; XREF: Obj57_Index
00010EA0 6100 0000                  		bsr.w	Obj57_MoveSub
00010EA4 6000 0000                  		bra.w	Obj57_ChkDel
00010EA8                            ; ===========================================================================
00010EA8                            
00010EA8                            Obj57_MoveSub:				; XREF: Obj57_Move
00010EA8 3028 003E                  		move.w	$3E(a0),d0
00010EAC D168 0026                  		add.w	d0,$26(a0)
00010EB0 1028 0026                  		move.b	$26(a0),d0
00010EB4 4EB9 0000 2C64             		jsr	(CalcSine).l
00010EBA 3428 0038                  		move.w	$38(a0),d2
00010EBE 3628 003A                  		move.w	$3A(a0),d3
00010EC2 45E8 0029                  		lea	$29(a0),a2
00010EC6 7C00                       		moveq	#0,d6
00010EC8 1C1A                       		move.b	(a2)+,d6
00010ECA                            
00010ECA                            Obj57_MoveLoop:
00010ECA 7800                       		moveq	#0,d4
00010ECC 181A                       		move.b	(a2)+,d4
00010ECE ED4C                       		lsl.w	#6,d4
00010ED0 0684 00FF D000             		addi.l	#$FFD000,d4
00010ED6 2244                       		movea.l	d4,a1
00010ED8 7800                       		moveq	#0,d4
00010EDA 1829 003C                  		move.b	$3C(a1),d4
00010EDE 2A04                       		move.l	d4,d5
00010EE0 C9C0                       		muls.w	d0,d4
00010EE2 E084                       		asr.l	#8,d4
00010EE4 CBC1                       		muls.w	d1,d5
00010EE6 E085                       		asr.l	#8,d5
00010EE8 D842                       		add.w	d2,d4
00010EEA DA43                       		add.w	d3,d5
00010EEC 3344 000C                  		move.w	d4,$C(a1)
00010EF0 3345 0008                  		move.w	d5,8(a1)
00010EF4 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EF8 4E75                       		rts	
00010EFA                            ; ===========================================================================
00010EFA                            
00010EFA                            Obj57_ChkDel:				; XREF: Obj57_Move
00010EFA 3028 003A                  		move.w	$3A(a0),d0
00010EFE 0240 FF80                  		andi.w	#$FF80,d0
00010F02 3238 F700                  		move.w	($FFFFF700).w,d1
00010F06 0441 0080                  		subi.w	#$80,d1
00010F0A 0241 FF80                  		andi.w	#$FF80,d1
00010F0E 9041                       		sub.w	d1,d0
00010F10 0C40 0280                  		cmpi.w	#$280,d0
00010F14 6200 0000                  		bhi.w	Obj57_Delete
00010F18 6000 CCE4                  		bra.w	DisplaySprite
00010F1C                            ; ===========================================================================
00010F1C                            
00010F1C                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010F1C 7400                       		moveq	#0,d2
00010F1E 45E8 0029                  		lea	$29(a0),a2
00010F22 141A                       		move.b	(a2)+,d2
00010F24                            
00010F24                            Obj57_DelLoop:
00010F24 7000                       		moveq	#0,d0
00010F26 101A                       		move.b	(a2)+,d0
00010F28 ED48                       		lsl.w	#6,d0
00010F2A 0680 00FF D000             		addi.l	#$FFD000,d0
00010F30 2240                       		movea.l	d0,a1
00010F32 6100 CD08                  		bsr.w	DeleteObject2
00010F36 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010F3A                            
00010F3A 4E75                       		rts	
00010F3C                            ; ===========================================================================
00010F3C                            
00010F3C                            Obj57_Display:				; XREF: Obj57_Index
00010F3C 6000 CCC0                  		bra.w	DisplaySprite
00010F40                            ; ===========================================================================
00010F40                            ; ---------------------------------------------------------------------------
00010F40                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F40                            ; ---------------------------------------------------------------------------
00010F40                            Map_obj57:
00010F40                            	include "_maps\obj57syz.asm"
00010F40                            ; ---------------------------------------------------------------------------
00010F40                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F40                            ; ---------------------------------------------------------------------------
00010F40 0000                       		dc.w byte_10958-Map_obj57
00010F42 01                         byte_10958:	dc.b 1
00010F43 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F48                            		even
00010F48                            		even
00010F48                            
00010F48                            ; ---------------------------------------------------------------------------
00010F48                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F48                            ; ---------------------------------------------------------------------------
00010F48                            Map_obj57a:
00010F48                            	include "_maps\obj57lz.asm"
00010F48                            ; ---------------------------------------------------------------------------
00010F48                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F48                            ; ---------------------------------------------------------------------------
00010F48 0000                       		dc.w byte_10964-Map_obj57a
00010F4A 0000                       		dc.w byte_1096A-Map_obj57a
00010F4C 0000                       		dc.w byte_10970-Map_obj57a
00010F4E 01                         byte_10964:	dc.b 1
00010F4F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F54 01                         byte_1096A:	dc.b 1
00010F55 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F5A 01                         byte_10970:	dc.b 1
00010F5B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F60                            		even
00010F60                            		even
00010F60                            
00010F60                            ; ===========================================================================
00010F60                            ; ---------------------------------------------------------------------------
00010F60                            ; Object 58 - giant spiked balls (SYZ)
00010F60                            ; ---------------------------------------------------------------------------
00010F60                            
00010F60                            Obj58:					; XREF: Obj_Index
00010F60 7000                       		moveq	#0,d0
00010F62 1028 0024                  		move.b	$24(a0),d0
00010F66 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F6A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F6E                            ; ===========================================================================
00010F6E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F70 0000                       		dc.w Obj58_Move-Obj58_Index
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            Obj58_Main:				; XREF: Obj58_Index
00010F72 5428 0024                  		addq.b	#2,$24(a0)
00010F76 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F7E 317C 0396 0002             		move.w	#$396,2(a0)
00010F84 117C 0004 0001             		move.b	#4,1(a0)
00010F8A 117C 0004 0018             		move.b	#4,$18(a0)
00010F90 117C 0018 0019             		move.b	#$18,$19(a0)
00010F96 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F9C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010FA2 117C 0086 0020             		move.b	#$86,$20(a0)
00010FA8 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FAC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FB0 4881                       		ext.w	d1
00010FB2 E741                       		asl.w	#3,d1		; multiply by 8
00010FB4 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010FB8 1028 0022                  		move.b	$22(a0),d0
00010FBC E418                       		ror.b	#2,d0
00010FBE 0200 00C0                  		andi.b	#$C0,d0
00010FC2 1140 0026                  		move.b	d0,$26(a0)
00010FC6 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010FCC                            
00010FCC                            Obj58_Move:				; XREF: Obj58_Index
00010FCC 7000                       		moveq	#0,d0
00010FCE 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FD2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010FD6 D040                       		add.w	d0,d0
00010FD8 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010FDC 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010FE0 3028 003A                  		move.w	$3A(a0),d0
00010FE4 0240 FF80                  		andi.w	#$FF80,d0
00010FE8 3238 F700                  		move.w	($FFFFF700).w,d1
00010FEC 0441 0080                  		subi.w	#$80,d1
00010FF0 0241 FF80                  		andi.w	#$FF80,d1
00010FF4 9041                       		sub.w	d1,d0
00010FF6 0C40 0280                  		cmpi.w	#$280,d0
00010FFA 6200 CC3E                  		bhi.w	DeleteObject
00010FFE 6000 CBFE                  		bra.w	DisplaySprite
00011002                            ; ===========================================================================
00011002 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011004 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011006 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011008 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001100A                            ; ===========================================================================
0001100A                            
0001100A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001100A 4E75                       		rts	
0001100C                            ; ===========================================================================
0001100C                            
0001100C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001100C 323C 0060                  		move.w	#$60,d1
00011010 7000                       		moveq	#0,d0
00011012 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011016 0828 0000 0022             		btst	#0,$22(a0)
0001101C 6700                       		beq.s	loc_10A38
0001101E 4440                       		neg.w	d0
00011020 D041                       		add.w	d1,d0
00011022                            
00011022                            loc_10A38:
00011022 3228 003A                  		move.w	$3A(a0),d1
00011026 9240                       		sub.w	d0,d1
00011028 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001102C 4E75                       		rts	
0001102E                            ; ===========================================================================
0001102E                            
0001102E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001102E 323C 0060                  		move.w	#$60,d1
00011032 7000                       		moveq	#0,d0
00011034 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011038 0828 0000 0022             		btst	#0,$22(a0)
0001103E 6700                       		beq.s	loc_10A5C
00011040 4440                       		neg.w	d0
00011042 0640 0080                  		addi.w	#$80,d0
00011046                            
00011046                            loc_10A5C:
00011046 3228 0038                  		move.w	$38(a0),d1
0001104A 9240                       		sub.w	d0,d1
0001104C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011050 4E75                       		rts	
00011052                            ; ===========================================================================
00011052                            
00011052                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011052 3028 003E                  		move.w	$3E(a0),d0
00011056 D168 0026                  		add.w	d0,$26(a0)
0001105A 1028 0026                  		move.b	$26(a0),d0
0001105E 4EB9 0000 2C64             		jsr	(CalcSine).l
00011064 3428 0038                  		move.w	$38(a0),d2
00011068 3628 003A                  		move.w	$3A(a0),d3
0001106C 7800                       		moveq	#0,d4
0001106E 1828 003C                  		move.b	$3C(a0),d4
00011072 2A04                       		move.l	d4,d5
00011074 C9C0                       		muls.w	d0,d4
00011076 E084                       		asr.l	#8,d4
00011078 CBC1                       		muls.w	d1,d5
0001107A E085                       		asr.l	#8,d5
0001107C D842                       		add.w	d2,d4
0001107E DA43                       		add.w	d3,d5
00011080 3144 000C                  		move.w	d4,$C(a0)
00011084 3145 0008                  		move.w	d5,8(a0)
00011088 4E75                       		rts	
0001108A                            ; ===========================================================================
0001108A                            ; ---------------------------------------------------------------------------
0001108A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001108A                            ; ---------------------------------------------------------------------------
0001108A                            Map_obj15b:
0001108A                            	include "_maps\obj15sbz.asm"
0001108A                            ; ---------------------------------------------------------------------------
0001108A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001108A                            ; ---------------------------------------------------------------------------
0001108A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001108E 0000                       		dc.w byte_10AC6-Map_obj15b
00011090 05                         byte_10AA6:	dc.b 5
00011091 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011096 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001109B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000110A0 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000110A5 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000110AA 01                         byte_10AC0:	dc.b 1
000110AB F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000110B0 02                         byte_10AC6:	dc.b 2
000110B1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000110B6 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000110BC 00                         		even
000110BC 00                         		even
000110BC                            
000110BC                            ; ===========================================================================
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000110BC                            ; ---------------------------------------------------------------------------
000110BC                            
000110BC                            Obj59:					; XREF: Obj_Index
000110BC 7000                       		moveq	#0,d0
000110BE 1028 0024                  		move.b	$24(a0),d0
000110C2 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000110C6 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000110CA 3028 0032                  		move.w	$32(a0),d0
000110CE 0240 FF80                  		andi.w	#$FF80,d0
000110D2 3238 F700                  		move.w	($FFFFF700).w,d1
000110D6 0441 0080                  		subi.w	#$80,d1
000110DA 0241 FF80                  		andi.w	#$FF80,d1
000110DE 9041                       		sub.w	d1,d0
000110E0 0C40 0280                  		cmpi.w	#$280,d0
000110E4 6200 CB54                  		bhi.w	DeleteObject
000110E8 6000 CB14                  		bra.w	DisplaySprite
000110EC                            ; ===========================================================================
000110EC 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000110EE 0000                       		dc.w Obj59_Platform-Obj59_Index
000110F0 0000                       		dc.w Obj59_Action-Obj59_Index
000110F2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000110F4                            
000110F4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110F6                            
000110F6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110F8 2001                       		dc.b $20, 1
000110FA 3401                       		dc.b $34, 1
000110FC 1003                       		dc.b $10, 3
000110FE 2003                       		dc.b $20, 3
00011100 3403                       		dc.b $34, 3
00011102 1401                       		dc.b $14, 1
00011104 2401                       		dc.b $24, 1
00011106 2C01                       		dc.b $2C, 1
00011108 1403                       		dc.b $14, 3
0001110A 2403                       		dc.b $24, 3
0001110C 2C03                       		dc.b $2C, 3
0001110E 2005                       		dc.b $20, 5
00011110 2007                       		dc.b $20, 7
00011112 3009                       		dc.b $30, 9
00011114                            ; ===========================================================================
00011114                            
00011114                            Obj59_Main:				; XREF: Obj59_Index
00011114 5428 0024                  		addq.b	#2,$24(a0)
00011118 7000                       		moveq	#0,d0
0001111A 1028 0028                  		move.b	$28(a0),d0
0001111E 6A00                       		bpl.s	Obj59_Main2
00011120 5828 0024                  		addq.b	#4,$24(a0)
00011124 0240 007F                  		andi.w	#$7F,d0
00011128 C0FC 0006                  		mulu.w	#6,d0
0001112C 3140 003C                  		move.w	d0,$3C(a0)
00011130 3140 003E                  		move.w	d0,$3E(a0)
00011134 588F                       		addq.l	#4,sp
00011136 4E75                       		rts	
00011138                            ; ===========================================================================
00011138                            
00011138                            Obj59_Main2:
00011138 E648                       		lsr.w	#3,d0
0001113A 0240 001E                  		andi.w	#$1E,d0
0001113E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011142 115A 0019                  		move.b	(a2)+,$19(a0)
00011146 115A 001A                  		move.b	(a2)+,$1A(a0)
0001114A 7000                       		moveq	#0,d0
0001114C 1028 0028                  		move.b	$28(a0),d0
00011150 D040                       		add.w	d0,d0
00011152 0240 001E                  		andi.w	#$1E,d0
00011156 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001115A 101A                       		move.b	(a2)+,d0
0001115C E548                       		lsl.w	#2,d0
0001115E 3140 003C                  		move.w	d0,$3C(a0)
00011162 115A 0028                  		move.b	(a2)+,$28(a0)
00011166 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001116E 317C 4000 0002             		move.w	#$4000,2(a0)
00011174 117C 0004 0001             		move.b	#4,1(a0)
0001117A 117C 0004 0018             		move.b	#4,$18(a0)
00011180 3168 0008 0032             		move.w	8(a0),$32(a0)
00011186 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001118C                            
0001118C                            Obj59_Platform:				; XREF: Obj59_Index
0001118C 7200                       		moveq	#0,d1
0001118E 1228 0019                  		move.b	$19(a0),d1
00011192 4EB9 0000 7924             		jsr	(PlatformObject).l
00011198 6000 0000                  		bra.w	Obj59_Types
0001119C                            ; ===========================================================================
0001119C                            
0001119C                            Obj59_Action:				; XREF: Obj59_Index
0001119C 7200                       		moveq	#0,d1
0001119E 1228 0019                  		move.b	$19(a0),d1
000111A2 4EB9 0000 7A98             		jsr	(ExitPlatform).l
000111A8 3F28 0008                  		move.w	8(a0),-(sp)
000111AC 6100 0000                  		bsr.w	Obj59_Types
000111B0 341F                       		move.w	(sp)+,d2
000111B2 4A10                       		tst.b	0(a0)
000111B4 6700                       		beq.s	locret_10BD4
000111B6 4EF9 0000 8002             		jmp	(MvSonicOnPtfm2).l
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            locret_10BD4:
000111BC 4E75                       		rts	
000111BE                            ; ===========================================================================
000111BE                            
000111BE                            Obj59_Types:
000111BE 7000                       		moveq	#0,d0
000111C0 1028 0028                  		move.b	$28(a0),d0
000111C4 0240 000F                  		andi.w	#$F,d0
000111C8 D040                       		add.w	d0,d0
000111CA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000111CE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000111D2                            ; ===========================================================================
000111D2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111D6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111DA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111DE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111E2 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000111E6                            ; ===========================================================================
000111E6                            
000111E6                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000111E6 4E75                       		rts	
000111E8                            ; ===========================================================================
000111E8                            
000111E8                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000111E8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000111EE 6600                       		bne.s	locret_10C0C
000111F0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000111F4                            
000111F4                            locret_10C0C:
000111F4 4E75                       		rts	
000111F6                            ; ===========================================================================
000111F6                            
000111F6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111F6 6100 0000                  		bsr.w	Obj59_Move
000111FA 3028 0034                  		move.w	$34(a0),d0
000111FE 4440                       		neg.w	d0
00011200 D068 0030                  		add.w	$30(a0),d0
00011204 3140 000C                  		move.w	d0,$C(a0)
00011208 4E75                       		rts	
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001120A 6100 0000                  		bsr.w	Obj59_Move
0001120E 3028 0034                  		move.w	$34(a0),d0
00011212 D068 0030                  		add.w	$30(a0),d0
00011216 3140 000C                  		move.w	d0,$C(a0)
0001121A 4E75                       		rts	
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001121C 6100 0000                  		bsr.w	Obj59_Move
00011220 3028 0034                  		move.w	$34(a0),d0
00011224 E240                       		asr.w	#1,d0
00011226 4440                       		neg.w	d0
00011228 D068 0030                  		add.w	$30(a0),d0
0001122C 3140 000C                  		move.w	d0,$C(a0)
00011230 3028 0034                  		move.w	$34(a0),d0
00011234 D068 0032                  		add.w	$32(a0),d0
00011238 3140 0008                  		move.w	d0,8(a0)
0001123C 4E75                       		rts	
0001123E                            ; ===========================================================================
0001123E                            
0001123E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001123E 6100 0000                  		bsr.w	Obj59_Move
00011242 3028 0034                  		move.w	$34(a0),d0
00011246 E240                       		asr.w	#1,d0
00011248 D068 0030                  		add.w	$30(a0),d0
0001124C 3140 000C                  		move.w	d0,$C(a0)
00011250 3028 0034                  		move.w	$34(a0),d0
00011254 4440                       		neg.w	d0
00011256 D068 0032                  		add.w	$32(a0),d0
0001125A 3140 0008                  		move.w	d0,8(a0)
0001125E 4E75                       		rts	
00011260                            ; ===========================================================================
00011260                            
00011260                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011260 6100 0000                  		bsr.w	Obj59_Move
00011264 3028 0034                  		move.w	$34(a0),d0
00011268 4440                       		neg.w	d0
0001126A D068 0030                  		add.w	$30(a0),d0
0001126E 3140 000C                  		move.w	d0,$C(a0)
00011272 4A28 0028                  		tst.b	$28(a0)
00011276 6700 0000                  		beq.w	loc_10C94
0001127A 4E75                       		rts	
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            loc_10C94:
0001127C 0828 0003 0022             		btst	#3,$22(a0)
00011282 6700                       		beq.s	Obj59_Delete
00011284 08E9 0001 0022             		bset	#1,$22(a1)
0001128A 08A9 0003 0022             		bclr	#3,$22(a1)
00011290 137C 0002 0024             		move.b	#2,$24(a1)
00011296                            
00011296                            Obj59_Delete:
00011296 6000 C9A2                  		bra.w	DeleteObject
0001129A                            
0001129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001129A                            
0001129A                            
0001129A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001129A 3028 0038                  		move.w	$38(a0),d0
0001129E 4A28 003A                  		tst.b	$3A(a0)
000112A2 6600                       		bne.s	loc_10CC8
000112A4 0C40 0800                  		cmpi.w	#$800,d0
000112A8 6400                       		bcc.s	loc_10CD0
000112AA 0640 0010                  		addi.w	#$10,d0
000112AE 6000                       		bra.s	loc_10CD0
000112B0                            ; ===========================================================================
000112B0                            
000112B0                            loc_10CC8:
000112B0 4A40                       		tst.w	d0
000112B2 6700                       		beq.s	loc_10CD0
000112B4 0440 0010                  		subi.w	#$10,d0
000112B8                            
000112B8                            loc_10CD0:
000112B8 3140 0038                  		move.w	d0,$38(a0)
000112BC 48C0                       		ext.l	d0
000112BE E180                       		asl.l	#8,d0
000112C0 D0A8 0034                  		add.l	$34(a0),d0
000112C4 2140 0034                  		move.l	d0,$34(a0)
000112C8 4840                       		swap	d0
000112CA 3428 003C                  		move.w	$3C(a0),d2
000112CE B042                       		cmp.w	d2,d0
000112D0 6300                       		bls.s	loc_10CF0
000112D2 117C 0001 003A             		move.b	#1,$3A(a0)
000112D8                            
000112D8                            loc_10CF0:
000112D8 D442                       		add.w	d2,d2
000112DA B042                       		cmp.w	d2,d0
000112DC 6600                       		bne.s	locret_10CFA
000112DE 4228 0028                  		clr.b	$28(a0)
000112E2                            
000112E2                            locret_10CFA:
000112E2 4E75                       		rts	
000112E4                            ; End of function Obj59_Move
000112E4                            
000112E4                            ; ===========================================================================
000112E4                            
000112E4                            Obj59_MakeMulti:			; XREF: Obj59_Index
000112E4 5368 003C                  		subq.w	#1,$3C(a0)
000112E8 6600                       		bne.s	Obj59_ChkDel
000112EA 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000112F0 6100 CD92                  		bsr.w	SingleObjLoad
000112F4 6600                       		bne.s	Obj59_ChkDel
000112F6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000112FA 3368 0008 0008             		move.w	8(a0),8(a1)
00011300 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011306 137C 000E 0028             		move.b	#$E,$28(a1)
0001130C                            
0001130C                            Obj59_ChkDel:
0001130C 588F                       		addq.l	#4,sp
0001130E 3028 0008                  		move.w	8(a0),d0
00011312 0240 FF80                  		andi.w	#$FF80,d0
00011316 3238 F700                  		move.w	($FFFFF700).w,d1
0001131A 0441 0080                  		subi.w	#$80,d1
0001131E 0241 FF80                  		andi.w	#$FF80,d1
00011322 9041                       		sub.w	d1,d0
00011324 0C40 0280                  		cmpi.w	#$280,d0
00011328 6200 C910                  		bhi.w	DeleteObject
0001132C 4E75                       		rts	
0001132E                            ; ===========================================================================
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            Map_obj59:
0001132E                            	include "_maps\obj59.asm"
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E 0000                       		dc.w byte_10D4A-Map_obj59
00011330 03                         byte_10D4A:	dc.b 3
00011331 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011336 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001133B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011340                            		even
00011340                            		even
00011340                            
00011340                            ; ===========================================================================
00011340                            ; ---------------------------------------------------------------------------
00011340                            ; Object 5A - platforms	moving in circles (SLZ)
00011340                            ; ---------------------------------------------------------------------------
00011340                            
00011340                            Obj5A:					; XREF: Obj_Index
00011340 7000                       		moveq	#0,d0
00011342 1028 0024                  		move.b	$24(a0),d0
00011346 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001134A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001134E 3028 0032                  		move.w	$32(a0),d0
00011352 0240 FF80                  		andi.w	#$FF80,d0
00011356 3238 F700                  		move.w	($FFFFF700).w,d1
0001135A 0441 0080                  		subi.w	#$80,d1
0001135E 0241 FF80                  		andi.w	#$FF80,d1
00011362 9041                       		sub.w	d1,d0
00011364 0C40 0280                  		cmpi.w	#$280,d0
00011368 6200 C8D0                  		bhi.w	DeleteObject
0001136C 6000 C890                  		bra.w	DisplaySprite
00011370                            ; ===========================================================================
00011370 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011372 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011374 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011376                            ; ===========================================================================
00011376                            
00011376                            Obj5A_Main:				; XREF: Obj5A_Index
00011376 5428 0024                  		addq.b	#2,$24(a0)
0001137A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011382 317C 4000 0002             		move.w	#$4000,2(a0)
00011388 117C 0004 0001             		move.b	#4,1(a0)
0001138E 117C 0004 0018             		move.b	#4,$18(a0)
00011394 117C 0018 0019             		move.b	#$18,$19(a0)
0001139A 3168 0008 0032             		move.w	8(a0),$32(a0)
000113A0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000113A6                            
000113A6                            Obj5A_Platform:				; XREF: Obj5A_Index
000113A6 7200                       		moveq	#0,d1
000113A8 1228 0019                  		move.b	$19(a0),d1
000113AC 4EB9 0000 7924             		jsr	(PlatformObject).l
000113B2 6000 0000                  		bra.w	Obj5A_Types
000113B6                            ; ===========================================================================
000113B6                            
000113B6                            Obj5A_Action:				; XREF: Obj5A_Index
000113B6 7200                       		moveq	#0,d1
000113B8 1228 0019                  		move.b	$19(a0),d1
000113BC 4EB9 0000 7A98             		jsr	(ExitPlatform).l
000113C2 3F28 0008                  		move.w	8(a0),-(sp)
000113C6 6100 0000                  		bsr.w	Obj5A_Types
000113CA 341F                       		move.w	(sp)+,d2
000113CC 4EF9 0000 8002             		jmp	(MvSonicOnPtfm2).l
000113D2                            ; ===========================================================================
000113D2                            
000113D2                            Obj5A_Types:
000113D2 7000                       		moveq	#0,d0
000113D4 1028 0028                  		move.b	$28(a0),d0
000113D8 0240 000C                  		andi.w	#$C,d0
000113DC E248                       		lsr.w	#1,d0
000113DE 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000113E2 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000113E6                            ; ===========================================================================
000113E6 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000113E8 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000113EA                            ; ===========================================================================
000113EA                            
000113EA                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000113EA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113EE 0401 0050                  		subi.b	#$50,d1
000113F2 4881                       		ext.w	d1
000113F4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113F8 0402 0050                  		subi.b	#$50,d2
000113FC 4882                       		ext.w	d2
000113FE 0828 0000 0028             		btst	#0,$28(a0)
00011404 6700                       		beq.s	loc_10E24
00011406 4441                       		neg.w	d1
00011408 4442                       		neg.w	d2
0001140A                            
0001140A                            loc_10E24:
0001140A 0828 0001 0028             		btst	#1,$28(a0)
00011410 6700                       		beq.s	loc_10E30
00011412 4441                       		neg.w	d1
00011414 C342                       		exg	d1,d2
00011416                            
00011416                            loc_10E30:
00011416 D268 0032                  		add.w	$32(a0),d1
0001141A 3141 0008                  		move.w	d1,8(a0)
0001141E D468 0030                  		add.w	$30(a0),d2
00011422 3142 000C                  		move.w	d2,$C(a0)
00011426 4E75                       		rts	
00011428                            ; ===========================================================================
00011428                            
00011428                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011428 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001142C 0401 0050                  		subi.b	#$50,d1
00011430 4881                       		ext.w	d1
00011432 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011436 0402 0050                  		subi.b	#$50,d2
0001143A 4882                       		ext.w	d2
0001143C 0828 0000 0028             		btst	#0,$28(a0)
00011442 6700                       		beq.s	loc_10E62
00011444 4441                       		neg.w	d1
00011446 4442                       		neg.w	d2
00011448                            
00011448                            loc_10E62:
00011448 0828 0001 0028             		btst	#1,$28(a0)
0001144E 6700                       		beq.s	loc_10E6E
00011450 4441                       		neg.w	d1
00011452 C342                       		exg	d1,d2
00011454                            
00011454                            loc_10E6E:
00011454 4441                       		neg.w	d1
00011456 D268 0032                  		add.w	$32(a0),d1
0001145A 3141 0008                  		move.w	d1,8(a0)
0001145E D468 0030                  		add.w	$30(a0),d2
00011462 3142 000C                  		move.w	d2,$C(a0)
00011466 4E75                       		rts	
00011468                            ; ===========================================================================
00011468                            ; ---------------------------------------------------------------------------
00011468                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011468                            ; ---------------------------------------------------------------------------
00011468                            Map_obj5A:
00011468                            	include "_maps\obj5A.asm"
00011468                            ; ---------------------------------------------------------------------------
00011468                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011468                            ; ---------------------------------------------------------------------------
00011468 0000                       		dc.w byte_10E84-Map_obj5A
0001146A 02                         byte_10E84:	dc.b 2
0001146B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011470 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011476 00                         		even
00011476 00                         		even
00011476                            
00011476                            ; ===========================================================================
00011476                            ; ---------------------------------------------------------------------------
00011476                            ; Object 5B - blocks that form a staircase (SLZ)
00011476                            ; ---------------------------------------------------------------------------
00011476                            
00011476                            Obj5B:					; XREF: Obj_Index
00011476 7000                       		moveq	#0,d0
00011478 1028 0024                  		move.b	$24(a0),d0
0001147C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011480 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011484 3028 0030                  		move.w	$30(a0),d0
00011488 0240 FF80                  		andi.w	#$FF80,d0
0001148C 3238 F700                  		move.w	($FFFFF700).w,d1
00011490 0441 0080                  		subi.w	#$80,d1
00011494 0241 FF80                  		andi.w	#$FF80,d1
00011498 9041                       		sub.w	d1,d0
0001149A 0C40 0280                  		cmpi.w	#$280,d0
0001149E 6200 C79A                  		bhi.w	DeleteObject
000114A2 6000 C75A                  		bra.w	DisplaySprite
000114A6                            ; ===========================================================================
000114A6 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000114A8 0000                       		dc.w Obj5B_Move-Obj5B_Index
000114AA 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000114AC                            ; ===========================================================================
000114AC                            
000114AC                            Obj5B_Main:				; XREF: Obj5B_Index
000114AC 5428 0024                  		addq.b	#2,$24(a0)
000114B0 7638                       		moveq	#$38,d3
000114B2 7801                       		moveq	#1,d4
000114B4 0828 0000 0022             		btst	#0,$22(a0)
000114BA 6700                       		beq.s	loc_10EDA
000114BC 763B                       		moveq	#$3B,d3
000114BE 78FF                       		moveq	#-1,d4
000114C0                            
000114C0                            loc_10EDA:
000114C0 3428 0008                  		move.w	8(a0),d2
000114C4 2248                       		movea.l	a0,a1
000114C6 7203                       		moveq	#3,d1
000114C8 6000                       		bra.s	Obj5B_MakeBlocks
000114CA                            ; ===========================================================================
000114CA                            
000114CA                            Obj5B_Loop:
000114CA 6100 CBCE                  		bsr.w	SingleObjLoad2
000114CE 6600 0000                  		bne.w	Obj5B_Move
000114D2 137C 0004 0024             		move.b	#4,$24(a1)
000114D8                            
000114D8                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000114D8 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000114DC 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000114E4 337C 4000 0002             		move.w	#$4000,2(a1)
000114EA 137C 0004 0001             		move.b	#4,1(a1)
000114F0 137C 0003 0018             		move.b	#3,$18(a1)
000114F6 137C 0010 0019             		move.b	#$10,$19(a1)
000114FC 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011502 3342 0008                  		move.w	d2,8(a1)
00011506 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001150C 3368 0008 0030             		move.w	8(a0),$30(a1)
00011512 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011518 0642 0020                  		addi.w	#$20,d2
0001151C 1343 0037                  		move.b	d3,$37(a1)
00011520 2348 003C                  		move.l	a0,$3C(a1)
00011524 D604                       		add.b	d4,d3
00011526 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001152A                            
0001152A                            Obj5B_Move:				; XREF: Obj5B_Index
0001152A 7000                       		moveq	#0,d0
0001152C 1028 0028                  		move.b	$28(a0),d0
00011530 0240 0007                  		andi.w	#7,d0
00011534 D040                       		add.w	d0,d0
00011536 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001153A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001153E                            
0001153E                            Obj5B_Solid:				; XREF: Obj5B_Index
0001153E 2468 003C                  		movea.l	$3C(a0),a2
00011542 7000                       		moveq	#0,d0
00011544 1028 0037                  		move.b	$37(a0),d0
00011548 1032 0000                  		move.b	(a2,d0.w),d0
0001154C D068 0032                  		add.w	$32(a0),d0
00011550 3140 000C                  		move.w	d0,$C(a0)
00011554 7200                       		moveq	#0,d1
00011556 1228 0019                  		move.b	$19(a0),d1
0001155A 0641 000B                  		addi.w	#$B,d1
0001155E 343C 0010                  		move.w	#$10,d2
00011562 363C 0011                  		move.w	#$11,d3
00011566 3828 0008                  		move.w	8(a0),d4
0001156A 6100 EA62                  		bsr.w	SolidObject
0001156E 4A04                       		tst.b	d4
00011570 6A00                       		bpl.s	loc_10F92
00011572 1544 0036                  		move.b	d4,$36(a2)
00011576                            
00011576                            loc_10F92:
00011576 0828 0003 0022             		btst	#3,$22(a0)
0001157C 6700                       		beq.s	locret_10FA0
0001157E 157C 0001 0036             		move.b	#1,$36(a2)
00011584                            
00011584                            locret_10FA0:
00011584 4E75                       		rts	
00011586                            ; ===========================================================================
00011586 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011588 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001158A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001158C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001158E                            ; ===========================================================================
0001158E                            
0001158E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001158E 4A68 0034                  		tst.w	$34(a0)
00011592 6600                       		bne.s	loc_10FC0
00011594 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001159A 6600                       		bne.s	locret_10FBE
0001159C 317C 001E 0034             		move.w	#$1E,$34(a0)
000115A2                            
000115A2                            locret_10FBE:
000115A2 4E75                       		rts	
000115A4                            ; ===========================================================================
000115A4                            
000115A4                            loc_10FC0:
000115A4 5368 0034                  		subq.w	#1,$34(a0)
000115A8 66F8                       		bne.s	locret_10FBE
000115AA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000115AE 4E75                       		rts	
000115B0                            ; ===========================================================================
000115B0                            
000115B0                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000115B0 4A68 0034                  		tst.w	$34(a0)
000115B4 6600                       		bne.s	loc_10FE0
000115B6 4A28 0036                  		tst.b	$36(a0)
000115BA 6A00                       		bpl.s	locret_10FDE
000115BC 317C 003C 0034             		move.w	#$3C,$34(a0)
000115C2                            
000115C2                            locret_10FDE:
000115C2 4E75                       		rts	
000115C4                            ; ===========================================================================
000115C4                            
000115C4                            loc_10FE0:
000115C4 5368 0034                  		subq.w	#1,$34(a0)
000115C8 6600                       		bne.s	loc_10FEC
000115CA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000115CE 4E75                       		rts	
000115D0                            ; ===========================================================================
000115D0                            
000115D0                            loc_10FEC:
000115D0 43E8 0038                  		lea	$38(a0),a1
000115D4 3028 0034                  		move.w	$34(a0),d0
000115D8 E408                       		lsr.b	#2,d0
000115DA 0200 0001                  		andi.b	#1,d0
000115DE 12C0                       		move.b	d0,(a1)+
000115E0 0A00 0001                  		eori.b	#1,d0
000115E4 12C0                       		move.b	d0,(a1)+
000115E6 0A00 0001                  		eori.b	#1,d0
000115EA 12C0                       		move.b	d0,(a1)+
000115EC 0A00 0001                  		eori.b	#1,d0
000115F0 12C0                       		move.b	d0,(a1)+
000115F2 4E75                       		rts	
000115F4                            ; ===========================================================================
000115F4                            
000115F4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000115F4 43E8 0038                  		lea	$38(a0),a1
000115F8 0C11 0080                  		cmpi.b	#$80,(a1)
000115FC 6700                       		beq.s	locret_11038
000115FE 5211                       		addq.b	#1,(a1)
00011600 7200                       		moveq	#0,d1
00011602 1219                       		move.b	(a1)+,d1
00011604 4841                       		swap	d1
00011606 E289                       		lsr.l	#1,d1
00011608 2401                       		move.l	d1,d2
0001160A E289                       		lsr.l	#1,d1
0001160C 2601                       		move.l	d1,d3
0001160E D682                       		add.l	d2,d3
00011610 4841                       		swap	d1
00011612 4842                       		swap	d2
00011614 4843                       		swap	d3
00011616 12C3                       		move.b	d3,(a1)+
00011618 12C2                       		move.b	d2,(a1)+
0001161A 12C1                       		move.b	d1,(a1)+
0001161C                            
0001161C                            locret_11038:
0001161C 4E75                       		rts	
0001161E 4E75                       		rts	
00011620                            ; ===========================================================================
00011620                            ; ---------------------------------------------------------------------------
00011620                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011620                            ; ---------------------------------------------------------------------------
00011620                            Map_obj5B:
00011620                            	include "_maps\obj5B.asm"
00011620                            ; ---------------------------------------------------------------------------
00011620                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011620                            ; ---------------------------------------------------------------------------
00011620 0000                       		dc.w byte_1103E-Map_obj5B
00011622 01                         byte_1103E:	dc.b 1
00011623 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011628                            		even
00011628                            		even
00011628                            
00011628                            ; ===========================================================================
00011628                            ; ---------------------------------------------------------------------------
00011628                            ; Object 5C - metal girders in foreground (SLZ)
00011628                            ; ---------------------------------------------------------------------------
00011628                            
00011628                            Obj5C:					; XREF: Obj_Index
00011628 7000                       		moveq	#0,d0
0001162A 1028 0024                  		move.b	$24(a0),d0
0001162E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011632 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011636                            ; ===========================================================================
00011636 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011638 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001163A                            ; ===========================================================================
0001163A                            
0001163A                            Obj5C_Main:				; XREF: Obj5C_Index
0001163A 5428 0024                  		addq.b	#2,$24(a0)
0001163E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011646 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001164C 117C 0010 0019             		move.b	#$10,$19(a0)
00011652                            
00011652                            Obj5C_Display:				; XREF: Obj5C_Index
00011652 2238 F700                  		move.l	($FFFFF700).w,d1
00011656 D281                       		add.l	d1,d1
00011658 4841                       		swap	d1
0001165A 4441                       		neg.w	d1
0001165C 3141 0008                  		move.w	d1,8(a0)
00011660 2238 F704                  		move.l	($FFFFF704).w,d1
00011664 D281                       		add.l	d1,d1
00011666 4841                       		swap	d1
00011668 0241 003F                  		andi.w	#$3F,d1
0001166C 4441                       		neg.w	d1
0001166E 0641 0100                  		addi.w	#$100,d1
00011672 3141 000A                  		move.w	d1,$A(a0)
00011676 6000 C586                  		bra.w	DisplaySprite
0001167A                            ; ===========================================================================
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            Map_obj5C:
0001167A                            	include "_maps\obj5C.asm"
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001167A                            ; ---------------------------------------------------------------------------
0001167A 0000                       		dc.w byte_11098-Map_obj5C
0001167C 09                         byte_11098:	dc.b 9
0001167D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011682 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011687 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001168C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011691 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011696 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001169B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000116A0 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000116A5 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000116AA                            		even
000116AA                            		even
000116AA                            
000116AA                            ; ===========================================================================
000116AA                            ; ---------------------------------------------------------------------------
000116AA                            ; Object 1B - water surface (LZ)
000116AA                            ; ---------------------------------------------------------------------------
000116AA                            
000116AA                            Obj1B:					; XREF: Obj_Index
000116AA 7000                       		moveq	#0,d0
000116AC 1028 0024                  		move.b	$24(a0),d0
000116B0 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000116B4 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000116B8                            ; ===========================================================================
000116B8 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000116BA 0000                       		dc.w Obj1B_Action-Obj1B_Index
000116BC                            ; ===========================================================================
000116BC                            
000116BC                            Obj1B_Main:				; XREF: Obj1B_Index
000116BC 5428 0024                  		addq.b	#2,$24(a0)
000116C0 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000116C8 317C C300 0002             		move.w	#$C300,2(a0)
000116CE 117C 0004 0001             		move.b	#4,1(a0)
000116D4 117C 0080 0019             		move.b	#$80,$19(a0)
000116DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000116E0                            
000116E0                            Obj1B_Action:				; XREF: Obj1B_Index
000116E0 3238 F700                  		move.w	($FFFFF700).w,d1
000116E4 0241 FFE0                  		andi.w	#$FFE0,d1
000116E8 D268 0030                  		add.w	$30(a0),d1
000116EC 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000116F2 6700                       		beq.s	loc_11114
000116F4 0641 0020                  		addi.w	#$20,d1
000116F8                            
000116F8                            loc_11114:
000116F8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000116FC 3238 F646                  		move.w	($FFFFF646).w,d1
00011700 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011704 4A28 0032                  		tst.b	$32(a0)
00011708 6600                       		bne.s	Obj1B_Animate
0001170A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011710 6700                       		beq.s	loc_1114A	; if not, branch
00011712 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011716 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001171C 6000                       		bra.s	Obj1B_Display
0001171E                            ; ===========================================================================
0001171E                            
0001171E                            Obj1B_Animate:				; XREF: loc_11114
0001171E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011722 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011724 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001172A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001172E                            
0001172E                            loc_1114A:				; XREF: loc_11114
0001172E 5328 001E                  		subq.b	#1,$1E(a0)
00011732 6A00                       		bpl.s	Obj1B_Display
00011734 117C 0007 001E             		move.b	#7,$1E(a0)
0001173A 5228 001A                  		addq.b	#1,$1A(a0)
0001173E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011744 6500                       		bcs.s	Obj1B_Display
00011746 117C 0000 001A             		move.b	#0,$1A(a0)
0001174C                            
0001174C                            Obj1B_Display:
0001174C 6000 C4B0                  		bra.w	DisplaySprite
00011750                            ; ===========================================================================
00011750                            ; ---------------------------------------------------------------------------
00011750                            ; Sprite mappings - water surface (LZ)
00011750                            ; ---------------------------------------------------------------------------
00011750                            Map_obj1B:
00011750                            	include "_maps\obj1B.asm"
00011750                            ; ---------------------------------------------------------------------------
00011750                            ; Sprite mappings - water surface (LZ)
00011750                            ; ---------------------------------------------------------------------------
00011750 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011754 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011758 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001175C 03                         byte_11178:	dc.b 3
0001175D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011762 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011767 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001176C 03                         byte_11188:	dc.b 3
0001176D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011772 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011777 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001177C 03                         byte_11198:	dc.b 3
0001177D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011782 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011787 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001178C 06                         byte_111A8:	dc.b 6
0001178D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011792 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011797 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001179C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000117A1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000117A6 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000117AB 06                         byte_111C7:	dc.b 6
000117AC FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000117B1 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000117B6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000117BB FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000117C0 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000117C5 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000117CA 06                         byte_111E6:	dc.b 6
000117CB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000117D0 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000117D5 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000117DA FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000117DF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000117E4 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000117EA 00                         		even
000117EA 00                         		even
000117EA                            
000117EA                            ; ===========================================================================
000117EA                            ; ---------------------------------------------------------------------------
000117EA                            ; Object 0B - pole that	breaks (LZ)
000117EA                            ; ---------------------------------------------------------------------------
000117EA                            
000117EA                            Obj0B:					; XREF: Obj_Index
000117EA 7000                       		moveq	#0,d0
000117EC 1028 0024                  		move.b	$24(a0),d0
000117F0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000117F4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117F8                            ; ===========================================================================
000117F8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000117FA 0000                       		dc.w Obj0B_Action-Obj0B_Index
000117FC 0000                       		dc.w Obj0B_Display-Obj0B_Index
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            Obj0B_Main:				; XREF: Obj0B_Index
000117FE 5428 0024                  		addq.b	#2,$24(a0)
00011802 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001180A 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011810 117C 0004 0001             		move.b	#4,1(a0)
00011816 117C 0008 0019             		move.b	#8,$19(a0)
0001181C 117C 0004 0018             		move.b	#4,$18(a0)
00011822 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011828 7000                       		moveq	#0,d0
0001182A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001182E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011832 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011836                            
00011836                            Obj0B_Action:				; XREF: Obj0B_Index
00011836 4A28 0032                  		tst.b	$32(a0)
0001183A 6700                       		beq.s	Obj0B_Grab
0001183C 4A68 0030                  		tst.w	$30(a0)
00011840 6700                       		beq.s	Obj0B_MoveUp
00011842 5368 0030                  		subq.w	#1,$30(a0)
00011846 6600                       		bne.s	Obj0B_MoveUp
00011848 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001184E 6000                       		bra.s	Obj0B_Release
00011850                            ; ===========================================================================
00011850                            
00011850                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011850 43F8 D000                  		lea	($FFFFD000).w,a1
00011854 3028 000C                  		move.w	$C(a0),d0
00011858 0440 0018                  		subi.w	#$18,d0
0001185C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011862 6700                       		beq.s	Obj0B_MoveDown
00011864 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011868 B069 000C                  		cmp.w	$C(a1),d0
0001186C 6500                       		bcs.s	Obj0B_MoveDown
0001186E 3340 000C                  		move.w	d0,$C(a1)
00011872                            
00011872                            Obj0B_MoveDown:
00011872 0640 0024                  		addi.w	#$24,d0
00011876 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001187C 6700                       		beq.s	Obj0B_LetGo
0001187E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011882 B069 000C                  		cmp.w	$C(a1),d0
00011886 6400                       		bcc.s	Obj0B_LetGo
00011888 3340 000C                  		move.w	d0,$C(a1)
0001188C                            
0001188C                            Obj0B_LetGo:
0001188C 1038 F603                  		move.b	($FFFFF603).w,d0
00011890 0240 0070                  		andi.w	#$70,d0
00011894 6700                       		beq.s	Obj0B_Display
00011896                            
00011896                            Obj0B_Release:				; XREF: Obj0B_Action
00011896 4228 0020                  		clr.b	$20(a0)
0001189A 5428 0024                  		addq.b	#2,$24(a0)
0001189E 4238 F7C8                  		clr.b	($FFFFF7C8).w
000118A2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000118A6 4228 0032                  		clr.b	$32(a0)
000118AA 6000                       		bra.s	Obj0B_Display
000118AC                            ; ===========================================================================
000118AC                            
000118AC                            Obj0B_Grab:				; XREF: Obj0B_Action
000118AC 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000118B0 6700                       		beq.s	Obj0B_Display	; if not, branch
000118B2 43F8 D000                  		lea	($FFFFD000).w,a1
000118B6 3028 0008                  		move.w	8(a0),d0
000118BA 0640 0014                  		addi.w	#$14,d0
000118BE B069 0008                  		cmp.w	8(a1),d0
000118C2 6400                       		bcc.s	Obj0B_Display
000118C4 4228 0021                  		clr.b	$21(a0)
000118C8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000118CE 6400                       		bcc.s	Obj0B_Display
000118D0 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000118D4 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000118D8 3028 0008                  		move.w	8(a0),d0
000118DC 0640 0014                  		addi.w	#$14,d0
000118E0 3340 0008                  		move.w	d0,8(a1)
000118E4 08A9 0000 0022             		bclr	#0,$22(a1)
000118EA 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000118F0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118F6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118FC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011902                            
00011902                            Obj0B_Display:				; XREF: Obj0B_Index
00011902 6000 E3A2                  		bra.w	MarkObjGone
00011906                            ; ===========================================================================
00011906                            ; ---------------------------------------------------------------------------
00011906                            ; Sprite mappings - pole that breaks (LZ)
00011906                            ; ---------------------------------------------------------------------------
00011906                            Map_obj0B:
00011906                            	include "_maps\obj0B.asm"
00011906                            ; ---------------------------------------------------------------------------
00011906                            ; Sprite mappings - pole that breaks (LZ)
00011906                            ; ---------------------------------------------------------------------------
00011906 0000                       		dc.w byte_11326-Map_obj0B
00011908 0000                       		dc.w byte_11331-Map_obj0B
0001190A 02                         byte_11326:	dc.b 2			; normal pole
0001190B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011910 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011915 04                         byte_11331:	dc.b 4			; broken pole
00011916 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001191B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011920 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011925 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001192A                            		even
0001192A                            		even
0001192A                            
0001192A                            ; ===========================================================================
0001192A                            ; ---------------------------------------------------------------------------
0001192A                            ; Object 0C - flapping door (LZ)
0001192A                            ; ---------------------------------------------------------------------------
0001192A                            
0001192A                            Obj0C:					; XREF: Obj_Index
0001192A 7000                       		moveq	#0,d0
0001192C 1028 0024                  		move.b	$24(a0),d0
00011930 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011934 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011938                            ; ===========================================================================
00011938 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0001193A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001193C                            ; ===========================================================================
0001193C                            
0001193C                            Obj0C_Main:				; XREF: Obj0C_Index
0001193C 5428 0024                  		addq.b	#2,$24(a0)
00011940 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011948 317C 4328 0002             		move.w	#$4328,2(a0)
0001194E 0028 0004 0001             		ori.b	#4,1(a0)
00011954 117C 0028 0019             		move.b	#$28,$19(a0)
0001195A 7000                       		moveq	#0,d0
0001195C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011960 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011964 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011968                            
00011968                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011968 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001196C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001196E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011974 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
0001197A 4A28 0001                  		tst.b	1(a0)
0001197E 6A00                       		bpl.s	Obj0C_Solid
00011980 303C 00BB                  		move.w	#$BB,d0
00011984 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
0001198A                            
0001198A                            Obj0C_Solid:
0001198A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011990 6100 9336                  		bsr.w	AnimateSprite
00011994 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011998 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001199C 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001199E 3038 D008                  		move.w	($FFFFD008).w,d0
000119A2 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000119A6 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000119A8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000119AE 323C 0013                  		move.w	#$13,d1
000119B2 343C 0020                  		move.w	#$20,d2
000119B6 3602                       		move.w	d2,d3
000119B8 5243                       		addq.w	#1,d3
000119BA 3828 0008                  		move.w	8(a0),d4
000119BE 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
000119C2                            
000119C2                            Obj0C_Display:
000119C2 6000 E2E2                  		bra.w	MarkObjGone
000119C6                            ; ===========================================================================
000119C6                            Ani_obj0C:
000119C6                            	include "_anim\obj0C.asm"
000119C6                            ; ---------------------------------------------------------------------------
000119C6                            ; Animation script - flapping door (LZ)
000119C6                            ; ---------------------------------------------------------------------------
000119C6 0000                       		dc.w byte_113E6-Ani_obj0C
000119C8 0000                       		dc.w byte_113EC-Ani_obj0C
000119CA 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
000119D0 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
000119D6                            		even
000119D6                            		even
000119D6                            
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            ; Sprite mappings - flapping door (LZ)
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            Map_obj0C:
000119D6                            	include "_maps\obj0C.asm"
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            ; Sprite mappings - flapping door (LZ)
000119D6                            ; ---------------------------------------------------------------------------
000119D6 0000                       		dc.w byte_113F8-Map_obj0C
000119D8 0000                       		dc.w byte_11403-Map_obj0C
000119DA 0000                       		dc.w byte_1140E-Map_obj0C
000119DC 02                         byte_113F8:	dc.b 2
000119DD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000119E2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000119E7 02                         byte_11403:	dc.b 2
000119E8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000119ED 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000119F2 02                         byte_1140E:	dc.b 2
000119F3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119F8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000119FE 00                         		even
000119FE 00                         		even
000119FE                            
000119FE                            ; ===========================================================================
000119FE                            ; ---------------------------------------------------------------------------
000119FE                            ; Object 71 - invisible	solid blocks
000119FE                            ; ---------------------------------------------------------------------------
000119FE                            
000119FE                            Obj71:					; XREF: Obj_Index
000119FE 7000                       		moveq	#0,d0
00011A00 1028 0024                  		move.b	$24(a0),d0
00011A04 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011A08 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011A0C                            ; ===========================================================================
00011A0C 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011A0E 0000                       		dc.w Obj71_Solid-Obj71_Index
00011A10                            ; ===========================================================================
00011A10                            
00011A10                            Obj71_Main:				; XREF: Obj71_Index
00011A10 5428 0024                  		addq.b	#2,$24(a0)
00011A14 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011A1C 317C 8680 0002             		move.w	#$8680,2(a0)
00011A22 0028 0004 0001             		ori.b	#4,1(a0)
00011A28 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A2C 1200                       		move.b	d0,d1
00011A2E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011A32 0640 0010                  		addi.w	#$10,d0
00011A36 E248                       		lsr.w	#1,d0
00011A38 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011A3C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011A40 5241                       		addq.w	#1,d1
00011A42 E749                       		lsl.w	#3,d1
00011A44 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011A48                            
00011A48                            Obj71_Solid:				; XREF: Obj71_Index
00011A48 6100 C42E                  		bsr.w	ChkObjOnScreen
00011A4C 6600                       		bne.s	Obj71_ChkDel
00011A4E 7200                       		moveq	#0,d1
00011A50 1228 0019                  		move.b	$19(a0),d1
00011A54 0641 000B                  		addi.w	#$B,d1
00011A58 7400                       		moveq	#0,d2
00011A5A 1428 0016                  		move.b	$16(a0),d2
00011A5E 3602                       		move.w	d2,d3
00011A60 5243                       		addq.w	#1,d3
00011A62 3828 0008                  		move.w	8(a0),d4
00011A66 6100 E5A8                  		bsr.w	SolidObject71
00011A6A                            
00011A6A                            Obj71_ChkDel:
00011A6A 3028 0008                  		move.w	8(a0),d0
00011A6E 0240 FF80                  		andi.w	#$FF80,d0
00011A72 3238 F700                  		move.w	($FFFFF700).w,d1
00011A76 0441 0080                  		subi.w	#$80,d1
00011A7A 0241 FF80                  		andi.w	#$FF80,d1
00011A7E 9041                       		sub.w	d1,d0
00011A80 0C40 0280                  		cmpi.w	#$280,d0
00011A84 6200                       		bhi.s	Obj71_Delete
00011A86 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A8A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A8C 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A90                            ; ===========================================================================
00011A90                            
00011A90                            Obj71_NoDisplay:
00011A90 4E75                       		rts	
00011A92                            ; ===========================================================================
00011A92                            
00011A92                            Obj71_Delete:
00011A92 4EFA C1A6                  		jmp	DeleteObject
00011A96                            ; ===========================================================================
00011A96                            ; ---------------------------------------------------------------------------
00011A96                            ; Sprite mappings - invisible solid blocks
00011A96                            ; ---------------------------------------------------------------------------
00011A96                            Map_obj71:
00011A96                            	include "_maps\obj71.asm"
00011A96                            ; ---------------------------------------------------------------------------
00011A96                            ; Sprite mappings - invisible solid blocks
00011A96                            ; ---------------------------------------------------------------------------
00011A96 0000                       		dc.w byte_114BC-Map_obj71
00011A98 0000                       		dc.w byte_114D1-Map_obj71
00011A9A 0000                       		dc.w byte_114E6-Map_obj71
00011A9C 04                         byte_114BC:	dc.b 4
00011A9D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011AA2 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011AA7 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011AAC 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011AB1 04                         byte_114D1:	dc.b 4
00011AB2 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011AB7 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011ABC 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011AC1 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011AC6 04                         byte_114E6:	dc.b 4
00011AC7 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011ACC E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011AD1 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011AD6 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011ADC 00                         		even
00011ADC 00                         		even
00011ADC                            
00011ADC                            ; ===========================================================================
00011ADC                            ; ---------------------------------------------------------------------------
00011ADC                            ; Object 5D - fans (SLZ)
00011ADC                            ; ---------------------------------------------------------------------------
00011ADC                            
00011ADC                            Obj5D:					; XREF: Obj_Index
00011ADC 7000                       		moveq	#0,d0
00011ADE 1028 0024                  		move.b	$24(a0),d0
00011AE2 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011AE6 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011AEA                            ; ===========================================================================
00011AEA 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011AEC 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011AEE                            ; ===========================================================================
00011AEE                            
00011AEE                            Obj5D_Main:				; XREF: Obj5D_Index
00011AEE 5428 0024                  		addq.b	#2,$24(a0)
00011AF2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011AFA 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011B00 0028 0004 0001             		ori.b	#4,1(a0)
00011B06 117C 0010 0019             		move.b	#$10,$19(a0)
00011B0C 117C 0004 0018             		move.b	#4,$18(a0)
00011B12                            
00011B12                            Obj5D_Delay:				; XREF: Obj5D_Index
00011B12 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011B18 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011B1A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B1E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011B20 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011B26 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011B2C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011B2E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011B34                            
00011B34                            Obj5D_Blow:
00011B34 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011B38 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00011B40 3029 0008                  		move.w	8(a1),d0
00011B44 9068 0008                  		sub.w	8(a0),d0
00011B48 0828 0000 0022             		btst	#0,$22(a0)
00011B4E 6600                       		bne.s	Obj5D_ChkSonic
00011B50 4440                       		neg.w	d0
00011B52                            
00011B52                            Obj5D_ChkSonic:
00011B52 0640 0050                  		addi.w	#$50,d0
00011B56 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B5A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B5C 3229 000C                  		move.w	$C(a1),d1
00011B60 0641 0060                  		addi.w	#$60,d1
00011B64 9268 000C                  		sub.w	$C(a0),d1
00011B68 6500                       		bcs.s	Obj5D_Animate
00011B6A 0C41 0070                  		cmpi.w	#$70,d1
00011B6E 6400                       		bcc.s	Obj5D_Animate
00011B70 0440 0050                  		subi.w	#$50,d0
00011B74 6400                       		bcc.s	loc_1159A
00011B76 4640                       		not.w	d0
00011B78 D040                       		add.w	d0,d0
00011B7A                            
00011B7A                            loc_1159A:
00011B7A 0640 0060                  		addi.w	#$60,d0
00011B7E 0828 0000 0022             		btst	#0,$22(a0)
00011B84 6600                       		bne.s	loc_115A8
00011B86 4440                       		neg.w	d0
00011B88                            
00011B88                            loc_115A8:
00011B88 4400                       		neg.b	d0
00011B8A E840                       		asr.w	#4,d0
00011B8C 0828 0000 0028             		btst	#0,$28(a0)
00011B92 6700                       		beq.s	Obj5D_MoveSonic
00011B94 4440                       		neg.w	d0
00011B96                            
00011B96                            Obj5D_MoveSonic:
00011B96 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B9A                            
00011B9A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B9A 5328 001E                  		subq.b	#1,$1E(a0)
00011B9E 6A00                       		bpl.s	Obj5D_ChkDel
00011BA0 117C 0000 001E             		move.b	#0,$1E(a0)
00011BA6 5228 001B                  		addq.b	#1,$1B(a0)
00011BAA 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011BB0 6500                       		bcs.s	loc_115D8
00011BB2 117C 0000 001B             		move.b	#0,$1B(a0)
00011BB8                            
00011BB8                            loc_115D8:
00011BB8 7000                       		moveq	#0,d0
00011BBA 0828 0000 0028             		btst	#0,$28(a0)
00011BC0 6700                       		beq.s	loc_115E4
00011BC2 7002                       		moveq	#2,d0
00011BC4                            
00011BC4                            loc_115E4:
00011BC4 D028 001B                  		add.b	$1B(a0),d0
00011BC8 1140 001A                  		move.b	d0,$1A(a0)
00011BCC                            
00011BCC                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011BCC 6100 C030                  		bsr.w	DisplaySprite
00011BD0 3028 0008                  		move.w	8(a0),d0
00011BD4 0240 FF80                  		andi.w	#$FF80,d0
00011BD8 3238 F700                  		move.w	($FFFFF700).w,d1
00011BDC 0441 0080                  		subi.w	#$80,d1
00011BE0 0241 FF80                  		andi.w	#$FF80,d1
00011BE4 9041                       		sub.w	d1,d0
00011BE6 0C40 0280                  		cmpi.w	#$280,d0
00011BEA 6200 C04E                  		bhi.w	DeleteObject
00011BEE 4E75                       		rts	
00011BF0                            ; ===========================================================================
00011BF0                            ; ---------------------------------------------------------------------------
00011BF0                            ; Sprite mappings - fans (SLZ)
00011BF0                            ; ---------------------------------------------------------------------------
00011BF0                            Map_obj5D:
00011BF0                            	include "_maps\obj5D.asm"
00011BF0                            ; ---------------------------------------------------------------------------
00011BF0                            ; Sprite mappings - fans (SLZ)
00011BF0                            ; ---------------------------------------------------------------------------
00011BF0 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011BF4 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BF8 0000                       		dc.w byte_1161A-Map_obj5D
00011BFA 02                         byte_1161A:	dc.b 2
00011BFB F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011C00 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011C05 02                         byte_11625:	dc.b 2
00011C06 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011C0B 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011C10 02                         byte_11630:	dc.b 2
00011C11 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011C16 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011C1C 00                         		even
00011C1C 00                         		even
00011C1C                            
00011C1C                            ; ===========================================================================
00011C1C                            ; ---------------------------------------------------------------------------
00011C1C                            ; Object 5E - seesaws (SLZ)
00011C1C                            ; ---------------------------------------------------------------------------
00011C1C                            
00011C1C                            Obj5E:					; XREF: Obj_Index
00011C1C 7000                       		moveq	#0,d0
00011C1E 1028 0024                  		move.b	$24(a0),d0
00011C22 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011C26 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011C2A 3028 0030                  		move.w	$30(a0),d0
00011C2E 0240 FF80                  		andi.w	#$FF80,d0
00011C32 3238 F700                  		move.w	($FFFFF700).w,d1
00011C36 0441 0080                  		subi.w	#$80,d1
00011C3A 0241 FF80                  		andi.w	#$FF80,d1
00011C3E 9041                       		sub.w	d1,d0
00011C40 6B00 BFF8                  		bmi.w	DeleteObject
00011C44 0C40 0280                  		cmpi.w	#$280,d0
00011C48 6200 BFF0                  		bhi.w	DeleteObject
00011C4C 6000 BFB0                  		bra.w	DisplaySprite
00011C50                            ; ===========================================================================
00011C50 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011C52 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011C54 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C56 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C58 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C5A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C5C                            ; ===========================================================================
00011C5C                            
00011C5C                            Obj5E_Main:				; XREF: Obj5E_Index
00011C5C 5428 0024                  		addq.b	#2,$24(a0)
00011C60 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C68 317C 0374 0002             		move.w	#$374,2(a0)
00011C6E 0028 0004 0001             		ori.b	#4,1(a0)
00011C74 117C 0004 0018             		move.b	#4,$18(a0)
00011C7A 117C 0030 0019             		move.b	#$30,$19(a0)
00011C80 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C86 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C8A 6600                       		bne.s	loc_116D2	; if not, branch
00011C8C 6100 C40C                  		bsr.w	SingleObjLoad2
00011C90 6600                       		bne.s	loc_116D2
00011C92 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C96 5C29 0024                  		addq.b	#6,$24(a1)
00011C9A 3368 0008 0008             		move.w	8(a0),8(a1)
00011CA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011CA6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011CAC 2348 003C                  		move.l	a0,$3C(a1)
00011CB0                            
00011CB0                            loc_116D2:
00011CB0 0828 0000 0022             		btst	#0,$22(a0)
00011CB6 6700                       		beq.s	loc_116E0
00011CB8 117C 0002 001A             		move.b	#2,$1A(a0)
00011CBE                            
00011CBE                            loc_116E0:
00011CBE 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011CC4                            
00011CC4                            Obj5E_Slope:				; XREF: Obj5E_Index
00011CC4 1228 003A                  		move.b	$3A(a0),d1
00011CC8 6100 0000                  		bsr.w	loc_11766
00011CCC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CD2 0828 0000 001A             		btst	#0,$1A(a0)
00011CD8 6700                       		beq.s	loc_11702
00011CDA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CE0                            
00011CE0                            loc_11702:
00011CE0 43F8 D000                  		lea	($FFFFD000).w,a1
00011CE4 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011CEA 323C 0030                  		move.w	#$30,d1
00011CEE 4EB9 0000 79F8             		jsr	(SlopeObject).l
00011CF4 4E75                       		rts	
00011CF6                            ; ===========================================================================
00011CF6                            
00011CF6                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CF6 6100 0000                  		bsr.w	loc_1174A
00011CFA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011D00 0828 0000 001A             		btst	#0,$1A(a0)
00011D06 6700                       		beq.s	loc_11730
00011D08 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011D0E                            
00011D0E                            loc_11730:
00011D0E 323C 0030                  		move.w	#$30,d1
00011D12 4EB9 0000 7A98             		jsr	(ExitPlatform).l
00011D18 323C 0030                  		move.w	#$30,d1
00011D1C 3428 0008                  		move.w	8(a0),d2
00011D20 4EB9 0000 89F6             		jsr	SlopeObject2
00011D26 4E75                       		rts	
00011D28                            ; ===========================================================================
00011D28                            
00011D28                            loc_1174A:				; XREF: Obj5E_Slope2
00011D28 7202                       		moveq	#2,d1
00011D2A 43F8 D000                  		lea	($FFFFD000).w,a1
00011D2E 3028 0008                  		move.w	8(a0),d0
00011D32 9069 0008                  		sub.w	8(a1),d0
00011D36 6400                       		bcc.s	loc_1175E
00011D38 4440                       		neg.w	d0
00011D3A 7200                       		moveq	#0,d1
00011D3C                            
00011D3C                            loc_1175E:
00011D3C 0C40 0008                  		cmpi.w	#8,d0
00011D40 6400                       		bcc.s	loc_11766
00011D42 7201                       		moveq	#1,d1
00011D44                            
00011D44                            loc_11766:
00011D44 1028 001A                  		move.b	$1A(a0),d0
00011D48 B001                       		cmp.b	d1,d0
00011D4A 6700                       		beq.s	locret_11790
00011D4C 6400                       		bcc.s	loc_11772
00011D4E 5400                       		addq.b	#2,d0
00011D50                            
00011D50                            loc_11772:
00011D50 5300                       		subq.b	#1,d0
00011D52 1140 001A                  		move.b	d0,$1A(a0)
00011D56 1141 003A                  		move.b	d1,$3A(a0)
00011D5A 08A8 0000 0001             		bclr	#0,1(a0)
00011D60 0828 0001 001A             		btst	#1,$1A(a0)
00011D66 6700                       		beq.s	locret_11790
00011D68 08E8 0000 0001             		bset	#0,1(a0)
00011D6E                            
00011D6E                            locret_11790:
00011D6E 4E75                       		rts	
00011D70                            ; ===========================================================================
00011D70                            
00011D70                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D70 5428 0024                  		addq.b	#2,$24(a0)
00011D74 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D7C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D82 0028 0004 0001             		ori.b	#4,1(a0)
00011D88 117C 0004 0018             		move.b	#4,$18(a0)
00011D8E 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D94 117C 000C 0019             		move.b	#$C,$19(a0)
00011D9A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011DA0 0668 0028 0008             		addi.w	#$28,8(a0)
00011DA6 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011DAC 117C 0001 001A             		move.b	#1,$1A(a0)
00011DB2 0828 0000 0022             		btst	#0,$22(a0)
00011DB8 6700                       		beq.s	Obj5E_MoveSpike
00011DBA 0468 0050 0008             		subi.w	#$50,8(a0)
00011DC0 117C 0002 003A             		move.b	#2,$3A(a0)
00011DC6                            
00011DC6                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011DC6 2268 003C                  		movea.l	$3C(a0),a1
00011DCA 7000                       		moveq	#0,d0
00011DCC 1028 003A                  		move.b	$3A(a0),d0
00011DD0 9029 003A                  		sub.b	$3A(a1),d0
00011DD4 6700                       		beq.s	loc_1183E
00011DD6 6400                       		bcc.s	loc_117FC
00011DD8 4400                       		neg.b	d0
00011DDA                            
00011DDA                            loc_117FC:
00011DDA 323C F7E8                  		move.w	#-$818,d1
00011DDE 343C FEEC                  		move.w	#-$114,d2
00011DE2 0C00 0001                  		cmpi.b	#1,d0
00011DE6 6700                       		beq.s	loc_11822
00011DE8 323C F510                  		move.w	#-$AF0,d1
00011DEC 343C FF34                  		move.w	#-$CC,d2
00011DF0 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DF6 6D00                       		blt.s	loc_11822
00011DF8 323C F200                  		move.w	#-$E00,d1
00011DFC 343C FF60                  		move.w	#-$A0,d2
00011E00                            
00011E00                            loc_11822:
00011E00 3141 0012                  		move.w	d1,$12(a0)
00011E04 3142 0010                  		move.w	d2,$10(a0)
00011E08 3028 0008                  		move.w	8(a0),d0
00011E0C 9068 0030                  		sub.w	$30(a0),d0
00011E10 6400                       		bcc.s	loc_11838
00011E12 4468 0010                  		neg.w	$10(a0)
00011E16                            
00011E16                            loc_11838:
00011E16 5428 0024                  		addq.b	#2,$24(a0)
00011E1A 6000                       		bra.s	Obj5E_SpikeFall
00011E1C                            ; ===========================================================================
00011E1C                            
00011E1C                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011E1C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E22 7000                       		moveq	#0,d0
00011E24 1029 001A                  		move.b	$1A(a1),d0
00011E28 343C 0028                  		move.w	#$28,d2
00011E2C 3228 0008                  		move.w	8(a0),d1
00011E30 9268 0030                  		sub.w	$30(a0),d1
00011E34 6400                       		bcc.s	loc_1185C
00011E36 4442                       		neg.w	d2
00011E38 5440                       		addq.w	#2,d0
00011E3A                            
00011E3A                            loc_1185C:
00011E3A D040                       		add.w	d0,d0
00011E3C 3228 0034                  		move.w	$34(a0),d1
00011E40 D272 0000                  		add.w	(a2,d0.w),d1
00011E44 3141 000C                  		move.w	d1,$C(a0)
00011E48 D468 0030                  		add.w	$30(a0),d2
00011E4C 3142 0008                  		move.w	d2,8(a0)
00011E50 4268 000E                  		clr.w	$E(a0)
00011E54 4268 000A                  		clr.w	$A(a0)
00011E58 4E75                       		rts	
00011E5A                            ; ===========================================================================
00011E5A                            
00011E5A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E5A 4A68 0012                  		tst.w	$12(a0)
00011E5E 6A00                       		bpl.s	loc_1189A
00011E60 6100 BD4A                  		bsr.w	ObjectFall
00011E64 3028 0034                  		move.w	$34(a0),d0
00011E68 0440 002F                  		subi.w	#$2F,d0
00011E6C B068 000C                  		cmp.w	$C(a0),d0
00011E70 6E00                       		bgt.s	locret_11898
00011E72 6100 BD38                  		bsr.w	ObjectFall
00011E76                            
00011E76                            locret_11898:
00011E76 4E75                       		rts	
00011E78                            ; ===========================================================================
00011E78                            
00011E78                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E78 6100 BD32                  		bsr.w	ObjectFall
00011E7C 2268 003C                  		movea.l	$3C(a0),a1
00011E80 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E86 7000                       		moveq	#0,d0
00011E88 1029 001A                  		move.b	$1A(a1),d0
00011E8C 3228 0008                  		move.w	8(a0),d1
00011E90 9268 0030                  		sub.w	$30(a0),d1
00011E94 6400                       		bcc.s	loc_118BA
00011E96 5440                       		addq.w	#2,d0
00011E98                            
00011E98                            loc_118BA:
00011E98 D040                       		add.w	d0,d0
00011E9A 3228 0034                  		move.w	$34(a0),d1
00011E9E D272 0000                  		add.w	(a2,d0.w),d1
00011EA2 B268 000C                  		cmp.w	$C(a0),d1
00011EA6 6E00                       		bgt.s	locret_11938
00011EA8 2268 003C                  		movea.l	$3C(a0),a1
00011EAC 7202                       		moveq	#2,d1
00011EAE 4A68 0010                  		tst.w	$10(a0)
00011EB2 6B00                       		bmi.s	Obj5E_Spring
00011EB4 7200                       		moveq	#0,d1
00011EB6                            
00011EB6                            Obj5E_Spring:
00011EB6 1341 003A                  		move.b	d1,$3A(a1)
00011EBA 1141 003A                  		move.b	d1,$3A(a0)
00011EBE B229 001A                  		cmp.b	$1A(a1),d1
00011EC2 6700                       		beq.s	loc_1192C
00011EC4 08A9 0003 0022             		bclr	#3,$22(a1)
00011ECA 6700                       		beq.s	loc_1192C
00011ECC 4229 0025                  		clr.b	$25(a1)
00011ED0 137C 0002 0024             		move.b	#2,$24(a1)
00011ED6 45F8 D000                  		lea	($FFFFD000).w,a2
00011EDA 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011EE0 446A 0012                  		neg.w	$12(a2)
00011EE4 08EA 0001 0022             		bset	#1,$22(a2)
00011EEA 08AA 0003 0022             		bclr	#3,$22(a2)
00011EF0 422A 003C                  		clr.b	$3C(a2)
00011EF4 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011EFA 157C 0002 0024             		move.b	#2,$24(a2)
00011F00 303C 00CC                  		move.w	#$CC,d0
00011F04 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
00011F0A                            
00011F0A                            loc_1192C:
00011F0A 4268 0010                  		clr.w	$10(a0)
00011F0E 4268 0012                  		clr.w	$12(a0)
00011F12 5528 0024                  		subq.b	#2,$24(a0)
00011F16                            
00011F16                            locret_11938:
00011F16 4E75                       		rts	
00011F18                            ; ===========================================================================
00011F18 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011F22                            
00011F22                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011F52                            		even
00011F52                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F82                            		even
00011F82                            ; ---------------------------------------------------------------------------
00011F82                            ; Sprite mappings - seesaws (SLZ)
00011F82                            ; ---------------------------------------------------------------------------
00011F82                            Map_obj5E:
00011F82                            	include "_maps\obj5E.asm"
00011F82                            ; ---------------------------------------------------------------------------
00011F82                            ; Sprite mappings - seesaws (SLZ)
00011F82                            ; ---------------------------------------------------------------------------
00011F82 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F86 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F8A 07                         byte_119AC:	dc.b 7
00011F8B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F90 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F95 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F9A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F9F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011FA4 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011FA9 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011FAE 04                         byte_119D0:	dc.b 4
00011FAF E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011FB4 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011FB9 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011FBE E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011FC4 00                         		even
00011FC4 00                         		even
00011FC4                            
00011FC4                            ; ---------------------------------------------------------------------------
00011FC4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011FC4                            ; ---------------------------------------------------------------------------
00011FC4                            Map_obj5Ea:
00011FC4                            	include "_maps\obj5Eballs.asm"
00011FC4                            ; ---------------------------------------------------------------------------
00011FC4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011FC4                            ; ---------------------------------------------------------------------------
00011FC4 0000                       		dc.w byte_119EA-Map_obj5Ea
00011FC6 0000                       		dc.w byte_119F0-Map_obj5Ea
00011FC8 01                         byte_119EA:	dc.b 1
00011FC9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011FCE 01                         byte_119F0:	dc.b 1
00011FCF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011FD4                            		even
00011FD4                            		even
00011FD4                            
00011FD4                            ; ===========================================================================
00011FD4                            ; ---------------------------------------------------------------------------
00011FD4                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011FD4                            ; ---------------------------------------------------------------------------
00011FD4                            
00011FD4                            Obj5F:					; XREF: Obj_Index
00011FD4 7000                       		moveq	#0,d0
00011FD6 1028 0024                  		move.b	$24(a0),d0
00011FDA 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011FDE 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011FE2                            ; ===========================================================================
00011FE2 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011FE4 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011FE6 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011FE8 0000                       		dc.w Obj5F_End-Obj5F_Index
00011FEA                            ; ===========================================================================
00011FEA                            
00011FEA                            Obj5F_Main:				; XREF: Obj5F_Index
00011FEA 5428 0024                  		addq.b	#2,$24(a0)
00011FEE 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FF6 317C 0400 0002             		move.w	#$400,2(a0)
00011FFC 0028 0004 0001             		ori.b	#4,1(a0)
00012002 117C 0003 0018             		move.b	#3,$18(a0)
00012008 117C 000C 0019             		move.b	#$C,$19(a0)
0001200E 1028 0028                  		move.b	$28(a0),d0
00012012 6700                       		beq.s	loc_11A3C
00012014 1140 0024                  		move.b	d0,$24(a0)
00012018 4E75                       		rts	
0001201A                            ; ===========================================================================
0001201A                            
0001201A                            loc_11A3C:
0001201A 117C 009A 0020             		move.b	#$9A,$20(a0)
00012020 0868 0000 0022             		bchg	#0,$22(a0)
00012026                            
00012026                            Obj5F_Action:				; XREF: Obj5F_Index
00012026 7000                       		moveq	#0,d0
00012028 1028 0025                  		move.b	$25(a0),d0
0001202C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012030 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012034 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001203A 6100 8C8C                  		bsr.w	AnimateSprite
0001203E 6000 DC66                  		bra.w	MarkObjGone
00012042                            ; ===========================================================================
00012042 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012044 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012046 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012048                            ; ===========================================================================
00012048                            
00012048                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012048 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001204C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012050 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012052 5428 0025                  		addq.b	#2,$25(a0)
00012056 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001205C 317C 0010 0010             		move.w	#$10,$10(a0)
00012062 117C 0001 001C             		move.b	#1,$1C(a0)
00012068 0868 0000 0022             		bchg	#0,$22(a0)
0001206E 6700                       		beq.s	locret_11A96
00012070 4468 0010                  		neg.w	$10(a0)		; change direction
00012074                            
00012074                            locret_11A96:
00012074 4E75                       		rts	
00012076                            ; ===========================================================================
00012076                            
00012076                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012076 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001207A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001207E 6B00                       		bmi.s	loc_11AA8
00012080 6100 BB56                  		bsr.w	SpeedToPos
00012084 4E75                       		rts	
00012086                            ; ===========================================================================
00012086                            
00012086                            loc_11AA8:
00012086 5528 0025                  		subq.b	#2,$25(a0)
0001208A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012090 4268 0010                  		clr.w	$10(a0)		; stop walking
00012094 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001209A 4E75                       		rts	
0001209C                            ; ===========================================================================
0001209C                            
0001209C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001209C 5368 0030                  		subq.w	#1,$30(a0)
000120A0 6A00                       		bpl.s	locret_11AD0
000120A2 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000120A6 117C 0000 0024             		move.b	#0,$24(a0)
000120AC                            
000120AC                            locret_11AD0:
000120AC 4E75                       		rts	
000120AE                            ; ===========================================================================
000120AE                            
000120AE                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000120AE 3038 D008                  		move.w	($FFFFD008).w,d0
000120B2 9068 0008                  		sub.w	8(a0),d0
000120B6 6400                       		bcc.s	loc_11ADE
000120B8 4440                       		neg.w	d0
000120BA                            
000120BA                            loc_11ADE:
000120BA 0C40 0060                  		cmpi.w	#$60,d0
000120BE 6400                       		bcc.s	locret_11B5E
000120C0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000120C4 9068 000C                  		sub.w	$C(a0),d0
000120C8 6400                       		bcc.s	Obj5F_MakeFuse
000120CA 4440                       		neg.w	d0
000120CC                            
000120CC                            Obj5F_MakeFuse:
000120CC 0C40 0060                  		cmpi.w	#$60,d0
000120D0 6400                       		bcc.s	locret_11B5E
000120D2 4A78 FE08                  		tst.w	($FFFFFE08).w
000120D6 6600                       		bne.s	locret_11B5E
000120D8 117C 0004 0025             		move.b	#4,$25(a0)
000120DE 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000120E4 4268 0010                  		clr.w	$10(a0)
000120E8 117C 0002 001C             		move.b	#2,$1C(a0)
000120EE 6100 BFAA                  		bsr.w	SingleObjLoad2
000120F2 6600                       		bne.s	locret_11B5E
000120F4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120F8 3368 0008 0008             		move.w	8(a0),8(a1)
000120FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012104 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001210A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012110 137C 0004 0028             		move.b	#4,$28(a1)
00012116 137C 0003 001C             		move.b	#3,$1C(a1)
0001211C 337C 0010 0012             		move.w	#$10,$12(a1)
00012122 0828 0001 0022             		btst	#1,$22(a0)
00012128 6700                       		beq.s	loc_11B54
0001212A 4469 0012                  		neg.w	$12(a1)
0001212E                            
0001212E                            loc_11B54:
0001212E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012134 2348 003C                  		move.l	a0,$3C(a1)
00012138                            
00012138                            locret_11B5E:
00012138 4E75                       		rts	
0001213A                            ; ===========================================================================
0001213A                            
0001213A                            Obj5F_Display:				; XREF: Obj5F_Index
0001213A 6100                       		bsr.s	loc_11B70
0001213C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012142 6100 8B84                  		bsr.w	AnimateSprite
00012146 6000 DB5E                  		bra.w	MarkObjGone
0001214A                            ; ===========================================================================
0001214A                            
0001214A                            loc_11B70:
0001214A 5368 0030                  		subq.w	#1,$30(a0)
0001214E 6B00                       		bmi.s	loc_11B7C
00012150 6100 BA86                  		bsr.w	SpeedToPos
00012154 4E75                       		rts	
00012156                            ; ===========================================================================
00012156                            
00012156                            loc_11B7C:
00012156 4268 0030                  		clr.w	$30(a0)
0001215A 4228 0024                  		clr.b	$24(a0)
0001215E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012164 7203                       		moveq	#3,d1
00012166 2248                       		movea.l	a0,a1
00012168 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001216E 6000                       		bra.s	Obj5F_MakeShrap
00012170                            ; ===========================================================================
00012170                            
00012170                            Obj5F_Loop:
00012170 6100 BF28                  		bsr.w	SingleObjLoad2
00012174 6600                       		bne.s	loc_11BCE
00012176                            
00012176                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012176 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001217A 3368 0008 0008             		move.w	8(a0),8(a1)
00012180 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012186 137C 0006 0028             		move.b	#6,$28(a1)
0001218C 137C 0004 001C             		move.b	#4,$1C(a1)
00012192 335A 0010                  		move.w	(a2)+,$10(a1)
00012196 335A 0012                  		move.w	(a2)+,$12(a1)
0001219A 137C 0098 0020             		move.b	#$98,$20(a1)
000121A0 08E9 0007 0001             		bset	#7,1(a1)
000121A6                            
000121A6                            loc_11BCE:
000121A6 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000121AA                            
000121AA 117C 0006 0024             		move.b	#6,$24(a0)
000121B0                            
000121B0                            Obj5F_End:				; XREF: Obj5F_Index
000121B0 6100 BA26                  		bsr.w	SpeedToPos
000121B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000121BA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121C0 6100 8B06                  		bsr.w	AnimateSprite
000121C4 4A28 0001                  		tst.b	1(a0)
000121C8 6A00 BA70                  		bpl.w	DeleteObject
000121CC 6000 BA30                  		bra.w	DisplaySprite
000121D0                            ; ===========================================================================
000121D0 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000121E0                            
000121E0                            Ani_obj5F:
000121E0                            	include "_anim\obj5F.asm"
000121E0                            ; ---------------------------------------------------------------------------
000121E0                            ; Animation script - Bomb enemy
000121E0                            ; ---------------------------------------------------------------------------
000121E0 0000                       		dc.w byte_11C12-Ani_obj5F
000121E2 0000                       		dc.w byte_11C16-Ani_obj5F
000121E4 0000                       		dc.w byte_11C1C-Ani_obj5F
000121E6 0000                       		dc.w byte_11C20-Ani_obj5F
000121E8 0000                       		dc.w byte_11C24-Ani_obj5F
000121EA 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000121EE 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000121F4 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121F8 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000121FC 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012200                            		even
00012200                            		even
00012200                            
00012200                            ; ---------------------------------------------------------------------------
00012200                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012200                            ; ---------------------------------------------------------------------------
00012200                            Map_obj5F:
00012200                            	include "_maps\obj5F.asm"
00012200                            ; ---------------------------------------------------------------------------
00012200                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012200                            ; ---------------------------------------------------------------------------
00012200 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012204 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012208 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001220C 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012210 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012214 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012218 03                         byte_11C40:	dc.b 3
00012219 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001221E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012223 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012228 03                         byte_11C50:	dc.b 3
00012229 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001222E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012233 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012238 03                         byte_11C60:	dc.b 3
00012239 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001223E 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012243 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012248 03                         byte_11C70:	dc.b 3
00012249 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001224E 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012253 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012258 03                         byte_11C80:	dc.b 3
00012259 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001225E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012263 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012268 03                         byte_11C90:	dc.b 3
00012269 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001226E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012273 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012278 02                         byte_11CA0:	dc.b 2
00012279 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001227E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012283 02                         byte_11CAB:	dc.b 2
00012284 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012289 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001228E 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001228F E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012294 01                         byte_11CBC:	dc.b 1			; fuse
00012295 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001229A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001229B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000122A0 01                         byte_11CC8:	dc.b 1			; fireball
000122A1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000122A6                            		even
000122A6                            		even
000122A6                            
000122A6                            ; ===========================================================================
000122A6                            ; ---------------------------------------------------------------------------
000122A6                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000122A6                            ; ---------------------------------------------------------------------------
000122A6                            
000122A6                            Obj60:					; XREF: Obj_Index
000122A6 7000                       		moveq	#0,d0
000122A8 1028 0024                  		move.b	$24(a0),d0
000122AC 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000122B0 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000122B4                            ; ===========================================================================
000122B4 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000122B6 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000122B8 0000                       		dc.w Obj60_Display-Obj60_Index
000122BA 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000122BC 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000122BE                            ; ===========================================================================
000122BE                            
000122BE                            Obj60_Main:				; XREF: Obj60_Index
000122BE 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000122C6 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000122CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000122D2 6700                       		beq.s	loc_11D02
000122D4 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000122DA                            
000122DA                            loc_11D02:
000122DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122E0 6600                       		bne.s	loc_11D10
000122E2 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000122E8                            
000122E8                            loc_11D10:
000122E8 0028 0004 0001             		ori.b	#4,1(a0)
000122EE 117C 0004 0018             		move.b	#4,$18(a0)
000122F4 117C 000B 0020             		move.b	#$B,$20(a0)
000122FA 117C 000C 0019             		move.b	#$C,$19(a0)
00012300 7400                       		moveq	#0,d2
00012302 45E8 0037                  		lea	$37(a0),a2
00012306 264A                       		movea.l	a2,a3
00012308 524A                       		addq.w	#1,a2
0001230A 7203                       		moveq	#3,d1
0001230C                            
0001230C                            Obj60_MakeOrbs:
0001230C 6100 BD8C                  		bsr.w	SingleObjLoad2
00012310 6600                       		bne.s	loc_11D90
00012312 5213                       		addq.b	#1,(a3)
00012314 3A09                       		move.w	a1,d5
00012316 0445 D000                  		subi.w	#-$3000,d5
0001231A EC4D                       		lsr.w	#6,d5
0001231C 0245 007F                  		andi.w	#$7F,d5
00012320 14C5                       		move.b	d5,(a2)+
00012322 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012324 137C 0006 0024             		move.b	#6,$24(a1)
0001232A 2368 0004 0004             		move.l	4(a0),4(a1)
00012330 3368 0002 0002             		move.w	2(a0),2(a1)
00012336 0029 0004 0001             		ori.b	#4,1(a1)
0001233C 137C 0004 0018             		move.b	#4,$18(a1)
00012342 137C 0008 0019             		move.b	#8,$19(a1)
00012348 137C 0003 001A             		move.b	#3,$1A(a1)
0001234E 137C 0098 0020             		move.b	#$98,$20(a1)
00012354 1342 0026                  		move.b	d2,$26(a1)
00012358 0602 0040                  		addi.b	#$40,d2
0001235C 2348 003C                  		move.l	a0,$3C(a1)
00012360 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012364                            
00012364                            loc_11D90:
00012364 7001                       		moveq	#1,d0
00012366 0828 0000 0022             		btst	#0,$22(a0)
0001236C 6700                       		beq.s	Obj60_Move
0001236E 4440                       		neg.w	d0
00012370                            
00012370                            Obj60_Move:
00012370 1140 0036                  		move.b	d0,$36(a0)
00012374 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001237A 5428 0024                  		addq.b	#2,$24(a0)
0001237E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012384 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001238A 6700                       		beq.s	locret_11DBC	; if not, branch
0001238C 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012390                            
00012390                            locret_11DBC:
00012390 4E75                       		rts	
00012392                            ; ===========================================================================
00012392                            
00012392                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012392 3038 D008                  		move.w	($FFFFD008).w,d0
00012396 9068 0008                  		sub.w	8(a0),d0
0001239A 6400                       		bcc.s	loc_11DCA
0001239C 4440                       		neg.w	d0
0001239E                            
0001239E                            loc_11DCA:
0001239E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000123A2 6400                       		bcc.s	Obj60_Animate	; if not, branch
000123A4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000123A8 9068 000C                  		sub.w	$C(a0),d0
000123AC 6400                       		bcc.s	loc_11DDC
000123AE 4440                       		neg.w	d0
000123B0                            
000123B0                            loc_11DDC:
000123B0 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000123B4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000123B6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000123BA 6600                       		bne.s	Obj60_Animate	; if yes, branch
000123BC 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000123C2                            
000123C2                            Obj60_Animate:
000123C2 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000123C8 6100 88FE                  		bsr.w	AnimateSprite
000123CC 6000 0000                  		bra.w	Obj60_ChkDel
000123D0                            ; ===========================================================================
000123D0                            
000123D0                            Obj60_Display:				; XREF: Obj60_Index
000123D0 6100 B806                  		bsr.w	SpeedToPos
000123D4                            
000123D4                            Obj60_ChkDel:				; XREF: Obj60_Animate
000123D4 3028 0008                  		move.w	8(a0),d0
000123D8 0240 FF80                  		andi.w	#$FF80,d0
000123DC 3238 F700                  		move.w	($FFFFF700).w,d1
000123E0 0441 0080                  		subi.w	#$80,d1
000123E4 0241 FF80                  		andi.w	#$FF80,d1
000123E8 9041                       		sub.w	d1,d0
000123EA 0C40 0280                  		cmpi.w	#$280,d0
000123EE 6200 0000                  		bhi.w	Obj60_ChkGone
000123F2 6000 B80A                  		bra.w	DisplaySprite
000123F6                            ; ===========================================================================
000123F6                            
000123F6                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000123FA 7000                       		moveq	#0,d0
000123FC 1028 0023                  		move.b	$23(a0),d0
00012400 6700                       		beq.s	loc_11E34
00012402 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012408                            
00012408                            loc_11E34:
00012408 45E8 0037                  		lea	$37(a0),a2
0001240C 7400                       		moveq	#0,d2
0001240E 141A                       		move.b	(a2)+,d2
00012410 5342                       		subq.w	#1,d2
00012412 6500                       		bcs.s	Obj60_Delete
00012414                            
00012414                            loc_11E40:
00012414 7000                       		moveq	#0,d0
00012416 101A                       		move.b	(a2)+,d0
00012418 ED48                       		lsl.w	#6,d0
0001241A 0680 00FF D000             		addi.l	#$FFD000,d0
00012420 2240                       		movea.l	d0,a1
00012422 6100 B818                  		bsr.w	DeleteObject2
00012426 51CA FFEC                  		dbf	d2,loc_11E40
0001242A                            
0001242A                            Obj60_Delete:
0001242A 6000 B80E                  		bra.w	DeleteObject
0001242E                            ; ===========================================================================
0001242E                            
0001242E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001242E 2268 003C                  		movea.l	$3C(a0),a1
00012432 0C11 0060                  		cmpi.b	#$60,0(a1)
00012436 6600 B802                  		bne.w	DeleteObject
0001243A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012440 6600                       		bne.s	Obj60_Circle
00012442 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012448 6600                       		bne.s	Obj60_Circle
0001244A 5428 0024                  		addq.b	#2,$24(a0)
0001244E 5329 0037                  		subq.b	#1,$37(a1)
00012452 6600                       		bne.s	Obj60_FireOrb
00012454 5429 0024                  		addq.b	#2,$24(a1)
00012458                            
00012458                            Obj60_FireOrb:
00012458 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001245E 0829 0000 0022             		btst	#0,$22(a1)
00012464 6700                       		beq.s	Obj60_Display2
00012466 4468 0010                  		neg.w	$10(a0)
0001246A                            
0001246A                            Obj60_Display2:
0001246A 6000 B792                  		bra.w	DisplaySprite
0001246E                            ; ===========================================================================
0001246E                            
0001246E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001246E 1028 0026                  		move.b	$26(a0),d0
00012472 4EB9 0000 2C64             		jsr	(CalcSine).l
00012478 E841                       		asr.w	#4,d1
0001247A D269 0008                  		add.w	8(a1),d1
0001247E 3141 0008                  		move.w	d1,8(a0)
00012482 E840                       		asr.w	#4,d0
00012484 D069 000C                  		add.w	$C(a1),d0
00012488 3140 000C                  		move.w	d0,$C(a0)
0001248C 1029 0036                  		move.b	$36(a1),d0
00012490 D128 0026                  		add.b	d0,$26(a0)
00012494 6000 B768                  		bra.w	DisplaySprite
00012498                            ; ===========================================================================
00012498                            
00012498                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012498 6100 B73E                  		bsr.w	SpeedToPos
0001249C 4A28 0001                  		tst.b	1(a0)
000124A0 6A00 B798                  		bpl.w	DeleteObject
000124A4 6000 B758                  		bra.w	DisplaySprite
000124A8                            ; ===========================================================================
000124A8                            Ani_obj60:
000124A8                            	include "_anim\obj60.asm"
000124A8                            ; ---------------------------------------------------------------------------
000124A8                            ; Animation script - Orbinaut enemy
000124A8                            ; ---------------------------------------------------------------------------
000124A8 0000                       		dc.w byte_11EDA-Ani_obj60
000124AA 0000                       		dc.w byte_11EDE-Ani_obj60
000124AC 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000124B0 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000124B6                            		even
000124B6                            		even
000124B6                            
000124B6                            ; ---------------------------------------------------------------------------
000124B6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000124B6                            ; ---------------------------------------------------------------------------
000124B6                            Map_obj60:
000124B6                            	include "_maps\obj60.asm"
000124B6                            ; ---------------------------------------------------------------------------
000124B6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000124B6                            ; ---------------------------------------------------------------------------
000124B6 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000124BA 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000124BE 01                         byte_11EEC:	dc.b 1
000124BF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000124C4 01                         byte_11EF2:	dc.b 1
000124C5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000124CA 01                         byte_11EF8:	dc.b 1
000124CB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000124D0 01                         byte_11EFE:	dc.b 1
000124D1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000124D6                            		even
000124D6                            		even
000124D6                            
000124D6                            ; ===========================================================================
000124D6                            ; ---------------------------------------------------------------------------
000124D6                            ; Object 16 - harpoon (LZ)
000124D6                            ; ---------------------------------------------------------------------------
000124D6                            
000124D6                            Obj16:					; XREF: Obj_Index
000124D6 7000                       		moveq	#0,d0
000124D8 1028 0024                  		move.b	$24(a0),d0
000124DC 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000124E0 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000124E4                            ; ===========================================================================
000124E4 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000124E6 0000                       		dc.w Obj16_Move-Obj16_Index
000124E8 0000                       		dc.w Obj16_Wait-Obj16_Index
000124EA                            ; ===========================================================================
000124EA                            
000124EA                            Obj16_Main:				; XREF: Obj16_Index
000124EA 5428 0024                  		addq.b	#2,$24(a0)
000124EE 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124F6 317C 03CC 0002             		move.w	#$3CC,2(a0)
000124FC 0028 0004 0001             		ori.b	#4,1(a0)
00012502 117C 0004 0018             		move.b	#4,$18(a0)
00012508 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001250E 117C 0014 0019             		move.b	#$14,$19(a0)
00012514 317C 003C 0030             		move.w	#60,$30(a0)
0001251A                            
0001251A                            Obj16_Move:				; XREF: Obj16_Index
0001251A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012520 6100 87A6                  		bsr.w	AnimateSprite
00012524 7000                       		moveq	#0,d0
00012526 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001252A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012530 6000 D774                  		bra.w	MarkObjGone
00012534                            ; ===========================================================================
00012534 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001253A                            ; ===========================================================================
0001253A                            
0001253A                            Obj16_Wait:				; XREF: Obj16_Index
0001253A 5368 0030                  		subq.w	#1,$30(a0)
0001253E 6A00                       		bpl.s	Obj16_ChkDel
00012540 317C 003C 0030             		move.w	#60,$30(a0)
00012546 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001254A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012550                            
00012550                            Obj16_ChkDel:
00012550 6000 D754                  		bra.w	MarkObjGone
00012554                            ; ===========================================================================
00012554                            Ani_obj16:
00012554                            	include "_anim\obj16.asm"
00012554                            ; ---------------------------------------------------------------------------
00012554                            ; Animation script - harpoon (LZ)
00012554                            ; ---------------------------------------------------------------------------
00012554 0000                       		dc.w byte_11F8A-Ani_obj16
00012556 0000                       		dc.w byte_11F8E-Ani_obj16
00012558 0000                       		dc.w byte_11F92-Ani_obj16
0001255A 0000                       		dc.w byte_11F96-Ani_obj16
0001255C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012560 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012564 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012568 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001256C                            		even
0001256C                            		even
0001256C                            
0001256C                            ; ---------------------------------------------------------------------------
0001256C                            ; Sprite mappings - harpoon (LZ)
0001256C                            ; ---------------------------------------------------------------------------
0001256C                            Map_obj16:
0001256C                            	include "_maps\obj16.asm"
0001256C                            ; ---------------------------------------------------------------------------
0001256C                            ; Sprite mappings - harpoon (LZ)
0001256C                            ; ---------------------------------------------------------------------------
0001256C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012570 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012574 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012578 01                         byte_11FA6:	dc.b 1
00012579 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001257E 01                         byte_11FAC:	dc.b 1
0001257F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012584 02                         byte_11FB2:	dc.b 2
00012585 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001258A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001258F 01                         byte_11FBD:	dc.b 1
00012590 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012595 01                         byte_11FC3:	dc.b 1
00012596 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001259B 02                         byte_11FC9:	dc.b 2
0001259C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000125A1 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000125A6                            		even
000125A6                            		even
000125A6                            
000125A6                            ; ===========================================================================
000125A6                            ; ---------------------------------------------------------------------------
000125A6                            ; Object 61 - blocks (LZ)
000125A6                            ; ---------------------------------------------------------------------------
000125A6                            
000125A6                            Obj61:					; XREF: Obj_Index
000125A6 7000                       		moveq	#0,d0
000125A8 1028 0024                  		move.b	$24(a0),d0
000125AC 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000125B0 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000125B4                            ; ===========================================================================
000125B4 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000125B6 0000                       		dc.w Obj61_Action-Obj61_Index
000125B8                            
000125B8 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000125BA 200C                       		dc.b $20, $C
000125BC 1010                       		dc.b $10, $10
000125BE 1010                       		dc.b $10, $10
000125C0                            ; ===========================================================================
000125C0                            
000125C0                            Obj61_Main:				; XREF: Obj61_Index
000125C0 5428 0024                  		addq.b	#2,$24(a0)
000125C4 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000125CC 317C 43E6 0002             		move.w	#$43E6,2(a0)
000125D2 117C 0004 0001             		move.b	#4,1(a0)
000125D8 117C 0003 0018             		move.b	#3,$18(a0)
000125DE 7000                       		moveq	#0,d0
000125E0 1028 0028                  		move.b	$28(a0),d0
000125E4 E648                       		lsr.w	#3,d0
000125E6 0240 000E                  		andi.w	#$E,d0
000125EA 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000125EE 115A 0019                  		move.b	(a2)+,$19(a0)
000125F2 1152 0016                  		move.b	(a2),$16(a0)
000125F6 E248                       		lsr.w	#1,d0
000125F8 1140 001A                  		move.b	d0,$1A(a0)
000125FC 3168 0008 0034             		move.w	8(a0),$34(a0)
00012602 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012608 1028 0028                  		move.b	$28(a0),d0
0001260C 0200 000F                  		andi.b	#$F,d0
00012610 6700                       		beq.s	Obj61_Action
00012612 0C00 0007                  		cmpi.b	#7,d0
00012616 6700                       		beq.s	Obj61_Action
00012618 117C 0001 0038             		move.b	#1,$38(a0)
0001261E                            
0001261E                            Obj61_Action:				; XREF: Obj61_Index
0001261E 3F28 0008                  		move.w	8(a0),-(sp)
00012622 7000                       		moveq	#0,d0
00012624 1028 0028                  		move.b	$28(a0),d0
00012628 0240 000F                  		andi.w	#$F,d0
0001262C D040                       		add.w	d0,d0
0001262E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012632 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012636 381F                       		move.w	(sp)+,d4
00012638 4A28 0001                  		tst.b	1(a0)
0001263C 6A00                       		bpl.s	Obj61_ChkDel
0001263E 7200                       		moveq	#0,d1
00012640 1228 0019                  		move.b	$19(a0),d1
00012644 0641 000B                  		addi.w	#$B,d1
00012648 7400                       		moveq	#0,d2
0001264A 1428 0016                  		move.b	$16(a0),d2
0001264E 3602                       		move.w	d2,d3
00012650 5243                       		addq.w	#1,d3
00012652 6100 D97A                  		bsr.w	SolidObject
00012656 1144 003F                  		move.b	d4,$3F(a0)
0001265A 6100 0000                  		bsr.w	loc_12180
0001265E                            
0001265E                            Obj61_ChkDel:
0001265E 3028 0034                  		move.w	$34(a0),d0
00012662 0240 FF80                  		andi.w	#$FF80,d0
00012666 3238 F700                  		move.w	($FFFFF700).w,d1
0001266A 0441 0080                  		subi.w	#$80,d1
0001266E 0241 FF80                  		andi.w	#$FF80,d1
00012672 9041                       		sub.w	d1,d0
00012674 0C40 0280                  		cmpi.w	#$280,d0
00012678 6200 B5C0                  		bhi.w	DeleteObject
0001267C 6000 B580                  		bra.w	DisplaySprite
00012680                            ; ===========================================================================
00012680 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012684 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012688 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001268C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012690                            ; ===========================================================================
00012690                            
00012690                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012690 4E75                       		rts	
00012692                            ; ===========================================================================
00012692                            
00012692                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012692 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012696 6600                       		bne.s	loc_120D6	; if yes, branch
00012698 0828 0003 0022             		btst	#3,$22(a0)
0001269E 6700                       		beq.s	locret_120D4
000126A0 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000126A6                            
000126A6                            locret_120D4:
000126A6 4E75                       		rts	
000126A8                            ; ===========================================================================
000126A8                            
000126A8                            loc_120D6:
000126A8 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000126AC 66F8                       		bne.s	locret_120D4	; if time remains, branch
000126AE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000126B2 4228 0038                  		clr.b	$38(a0)
000126B6 4E75                       		rts	
000126B8                            ; ===========================================================================
000126B8                            
000126B8                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000126B8 6100 B51E                  		bsr.w	SpeedToPos
000126BC 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000126C0 6100 0000                  		bsr.w	ObjHitFloor
000126C4 4A41                       		tst.w	d1
000126C6 6A00 0000                  		bpl.w	locret_12106
000126CA 5241                       		addq.w	#1,d1
000126CC D368 000C                  		add.w	d1,$C(a0)
000126D0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000126D4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126D8                            
000126D8                            locret_12106:
000126D8 4E75                       		rts	
000126DA                            ; ===========================================================================
000126DA                            
000126DA                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000126DA 6100 B4FC                  		bsr.w	SpeedToPos
000126DE 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000126E2 6100 0000                  		bsr.w	ObjHitCeiling
000126E6 4A41                       		tst.w	d1
000126E8 6A00 0000                  		bpl.w	locret_12126
000126EC 9368 000C                  		sub.w	d1,$C(a0)
000126F0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000126F4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126F8                            
000126F8                            locret_12126:
000126F8 4E75                       		rts	
000126FA                            ; ===========================================================================
000126FA                            
000126FA                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000126FA 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012700 6600                       		bne.s	locret_12138	; if not, branch
00012702 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012706 4228 0038                  		clr.b	$38(a0)
0001270A                            
0001270A                            locret_12138:
0001270A 4E75                       		rts	
0001270C                            ; ===========================================================================
0001270C                            
0001270C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001270C 3038 F646                  		move.w	($FFFFF646).w,d0
00012710 9068 000C                  		sub.w	$C(a0),d0
00012714 6700                       		beq.s	locret_1217E
00012716 6400                       		bcc.s	loc_12162
00012718 0C40 FFFE                  		cmpi.w	#-2,d0
0001271C 6C00                       		bge.s	loc_1214E
0001271E 70FE                       		moveq	#-2,d0
00012720                            
00012720                            loc_1214E:
00012720 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012724 6100 0000                  		bsr.w	ObjHitCeiling
00012728 4A41                       		tst.w	d1
0001272A 6A00 0000                  		bpl.w	locret_12160
0001272E 9368 000C                  		sub.w	d1,$C(a0)
00012732                            
00012732                            locret_12160:
00012732 4E75                       		rts	
00012734                            ; ===========================================================================
00012734                            
00012734                            loc_12162:				; XREF: Obj61_Type07
00012734 0C40 0002                  		cmpi.w	#2,d0
00012738 6F00                       		ble.s	loc_1216A
0001273A 7002                       		moveq	#2,d0
0001273C                            
0001273C                            loc_1216A:
0001273C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012740 6100 0000                  		bsr.w	ObjHitFloor
00012744 4A41                       		tst.w	d1
00012746 6A00 0000                  		bpl.w	locret_1217E
0001274A 5241                       		addq.w	#1,d1
0001274C D368 000C                  		add.w	d1,$C(a0)
00012750                            
00012750                            locret_1217E:
00012750 4E75                       		rts	
00012752                            ; ===========================================================================
00012752                            
00012752                            loc_12180:				; XREF: Obj61_Action
00012752 4A28 0038                  		tst.b	$38(a0)
00012756 6700                       		beq.s	locret_121C0
00012758 0828 0003 0022             		btst	#3,$22(a0)
0001275E 6600                       		bne.s	loc_1219A
00012760 4A28 003E                  		tst.b	$3E(a0)
00012764 6700                       		beq.s	locret_121C0
00012766 5928 003E                  		subq.b	#4,$3E(a0)
0001276A 6000                       		bra.s	loc_121A6
0001276C                            ; ===========================================================================
0001276C                            
0001276C                            loc_1219A:
0001276C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012772 6700                       		beq.s	locret_121C0
00012774 5828 003E                  		addq.b	#4,$3E(a0)
00012778                            
00012778                            loc_121A6:
00012778 1028 003E                  		move.b	$3E(a0),d0
0001277C 4EB9 0000 2C64             		jsr	(CalcSine).l
00012782 323C 0400                  		move.w	#$400,d1
00012786 C1C1                       		muls.w	d1,d0
00012788 4840                       		swap	d0
0001278A D068 0030                  		add.w	$30(a0),d0
0001278E 3140 000C                  		move.w	d0,$C(a0)
00012792                            
00012792                            locret_121C0:
00012792 4E75                       		rts	
00012794                            ; ===========================================================================
00012794                            ; ---------------------------------------------------------------------------
00012794                            ; Sprite mappings - blocks (LZ)
00012794                            ; ---------------------------------------------------------------------------
00012794                            Map_obj61:
00012794                            	include "_maps\obj61.asm"
00012794                            ; ---------------------------------------------------------------------------
00012794                            ; Sprite mappings - blocks (LZ)
00012794                            ; ---------------------------------------------------------------------------
00012794 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012798 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001279C 01                         byte_121CA:	dc.b 1
0001279D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000127A2 02                         byte_121D0:	dc.b 2
000127A3 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000127A8 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000127AD 01                         byte_121DB:	dc.b 1
000127AE F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000127B3 01                         byte_121E1:	dc.b 1
000127B4 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000127BA 00                         		even
000127BA 00                         		even
000127BA                            
000127BA                            ; ===========================================================================
000127BA                            ; ---------------------------------------------------------------------------
000127BA                            ; Object 62 - gargoyle head (LZ)
000127BA                            ; ---------------------------------------------------------------------------
000127BA                            
000127BA                            Obj62:					; XREF: Obj_Index
000127BA 7000                       		moveq	#0,d0
000127BC 1028 0024                  		move.b	$24(a0),d0
000127C0 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000127C4 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000127C8 6000 D4DC                  		bra.w	MarkObjGone
000127CC                            ; ===========================================================================
000127CC 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000127CE 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000127D0 0000                       		dc.w Obj62_FireBall-Obj62_Index
000127D2 0000                       		dc.w Obj62_AniFire-Obj62_Index
000127D4                            
000127D4 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000127DC                            ; ===========================================================================
000127DC                            
000127DC                            Obj62_Main:				; XREF: Obj62_Index
000127DC 5428 0024                  		addq.b	#2,$24(a0)
000127E0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127E8 317C 42E9 0002             		move.w	#$42E9,2(a0)
000127EE 0028 0004 0001             		ori.b	#4,1(a0)
000127F4 117C 0003 0018             		move.b	#3,$18(a0)
000127FA 117C 0010 0019             		move.b	#$10,$19(a0)
00012800 1028 0028                  		move.b	$28(a0),d0	; get object type
00012804 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012808 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001280E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012814 0228 000F 0028             		andi.b	#$F,$28(a0)
0001281A                            
0001281A                            Obj62_MakeFire:				; XREF: Obj62_Index
0001281A 5328 001E                  		subq.b	#1,$1E(a0)
0001281E 6600                       		bne.s	Obj62_NoFire
00012820 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012826 6100 B650                  		bsr.w	ChkObjOnScreen
0001282A 6600                       		bne.s	Obj62_NoFire
0001282C 6100 B856                  		bsr.w	SingleObjLoad
00012830 6600                       		bne.s	Obj62_NoFire
00012832 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012836 5829 0024                  		addq.b	#4,$24(a1)
0001283A 3368 0008 0008             		move.w	8(a0),8(a1)
00012840 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012846 1368 0001 0001             		move.b	1(a0),1(a1)
0001284C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012852                            
00012852                            Obj62_NoFire:
00012852 4E75                       		rts	
00012854                            ; ===========================================================================
00012854                            
00012854                            Obj62_FireBall:				; XREF: Obj62_Index
00012854 5428 0024                  		addq.b	#2,$24(a0)
00012858 117C 0008 0016             		move.b	#8,$16(a0)
0001285E 117C 0008 0017             		move.b	#8,$17(a0)
00012864 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001286C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012872 0028 0004 0001             		ori.b	#4,1(a0)
00012878 117C 0004 0018             		move.b	#4,$18(a0)
0001287E 117C 0098 0020             		move.b	#$98,$20(a0)
00012884 117C 0008 0019             		move.b	#8,$19(a0)
0001288A 117C 0002 001A             		move.b	#2,$1A(a0)
00012890 5068 000C                  		addq.w	#8,$C(a0)
00012894 317C 0200 0010             		move.w	#$200,$10(a0)
0001289A 0828 0000 0022             		btst	#0,$22(a0)
000128A0 6600                       		bne.s	Obj62_Sound
000128A2 4468 0010                  		neg.w	$10(a0)
000128A6                            
000128A6                            Obj62_Sound:
000128A6 303C 00AE                  		move.w	#$AE,d0
000128AA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
000128B0                            
000128B0                            Obj62_AniFire:				; XREF: Obj62_Index
000128B0 1038 FE05                  		move.b	($FFFFFE05).w,d0
000128B4 0200 0007                  		andi.b	#7,d0
000128B8 6600                       		bne.s	Obj62_StopFire
000128BA 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
000128C0                            
000128C0                            Obj62_StopFire:
000128C0 6100 B316                  		bsr.w	SpeedToPos
000128C4 0828 0000 0022             		btst	#0,$22(a0)
000128CA 6600                       		bne.s	Obj62_StopFire2
000128CC 76F8                       		moveq	#-8,d3
000128CE 6100 0000                  		bsr.w	ObjHitWallLeft
000128D2 4A41                       		tst.w	d1
000128D4 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000128D8 4E75                       		rts	
000128DA                            ; ===========================================================================
000128DA                            
000128DA                            Obj62_StopFire2:
000128DA 7608                       		moveq	#8,d3
000128DC 6100 0000                  		bsr.w	ObjHitWallRight
000128E0 4A41                       		tst.w	d1
000128E2 6B00 B356                  		bmi.w	DeleteObject
000128E6 4E75                       		rts	
000128E8                            ; ===========================================================================
000128E8                            ; ---------------------------------------------------------------------------
000128E8                            ; Sprite mappings - gargoyle head (LZ)
000128E8                            ; ---------------------------------------------------------------------------
000128E8                            Map_obj62:
000128E8                            	include "_maps\obj62.asm"
000128E8                            ; ---------------------------------------------------------------------------
000128E8                            ; Sprite mappings - gargoyle head (LZ)
000128E8                            ; ---------------------------------------------------------------------------
000128E8 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000128EC 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000128F0 03                         byte_12320:	dc.b 3
000128F1 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128F6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000128FB 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012900 01                         byte_12330:	dc.b 1
00012901 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012906 01                         byte_12336:	dc.b 1
00012907 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001290C                            		even
0001290C                            		even
0001290C                            
0001290C                            ; ===========================================================================
0001290C                            ; ---------------------------------------------------------------------------
0001290C                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001290C                            ; ---------------------------------------------------------------------------
0001290C                            
0001290C                            Obj63:					; XREF: Obj_Index
0001290C 7000                       		moveq	#0,d0
0001290E 1028 0024                  		move.b	$24(a0),d0
00012912 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012916 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001291A 3028 0030                  		move.w	$30(a0),d0
0001291E 0240 FF80                  		andi.w	#$FF80,d0
00012922 3238 F700                  		move.w	($FFFFF700).w,d1
00012926 0441 0080                  		subi.w	#$80,d1
0001292A 0241 FF80                  		andi.w	#$FF80,d1
0001292E 9041                       		sub.w	d1,d0
00012930 0C40 0280                  		cmpi.w	#$280,d0
00012934 6200                       		bhi.s	loc_1236A
00012936                            
00012936                            Obj63_Display:				; XREF: loc_1236A
00012936 6000 B2C6                  		bra.w	DisplaySprite
0001293A                            ; ===========================================================================
0001293A                            
0001293A                            loc_1236A:				; XREF: Obj63
0001293A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012940 6600                       		bne.s	loc_12378
00012942 0C40 FF80                  		cmpi.w	#-$80,d0
00012946 64EE                       		bcc.s	Obj63_Display
00012948                            
00012948                            loc_12378:
00012948 1028 002F                  		move.b	$2F(a0),d0
0001294C 6A00 B2EC                  		bpl.w	DeleteObject
00012950 0240 007F                  		andi.w	#$7F,d0
00012954 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012958 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001295E 6000 B2DA                  		bra.w	DeleteObject
00012962                            ; ===========================================================================
00012962 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012964 0000                       		dc.w loc_124B2-Obj63_Index
00012966 0000                       		dc.w loc_124C2-Obj63_Index
00012968 0000                       		dc.w loc_124DE-Obj63_Index
0001296A                            ; ===========================================================================
0001296A                            
0001296A                            Obj63_Main:				; XREF: Obj63_Index
0001296A 1028 0028                  		move.b	$28(a0),d0
0001296E 6B00 0000                  		bmi.w	loc_12460
00012972 5428 0024                  		addq.b	#2,$24(a0)
00012976 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001297E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012984 0028 0004 0001             		ori.b	#4,1(a0)
0001298A 117C 0010 0019             		move.b	#$10,$19(a0)
00012990 117C 0004 0018             		move.b	#4,$18(a0)
00012996 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001299C 6600                       		bne.s	loc_123E2
0001299E 5828 0024                  		addq.b	#4,$24(a0)
000129A2 317C 03F6 0002             		move.w	#$3F6,2(a0)
000129A8 117C 0001 0018             		move.b	#1,$18(a0)
000129AE 6000 0000                  		bra.w	loc_124DE
000129B2                            ; ===========================================================================
000129B2                            
000129B2                            loc_123E2:
000129B2 117C 0004 001A             		move.b	#4,$1A(a0)
000129B8 7000                       		moveq	#0,d0
000129BA 1028 0028                  		move.b	$28(a0),d0
000129BE 3200                       		move.w	d0,d1
000129C0 E648                       		lsr.w	#3,d0
000129C2 0240 001E                  		andi.w	#$1E,d0
000129C6 45FA 0000                  		lea	Obj63_Data(pc),a2
000129CA D4F2 0000                  		adda.w	(a2,d0.w),a2
000129CE 315A 0038                  		move.w	(a2)+,$38(a0)
000129D2 315A 0030                  		move.w	(a2)+,$30(a0)
000129D6 214A 003C                  		move.l	a2,$3C(a0)
000129DA 0241 000F                  		andi.w	#$F,d1
000129DE E549                       		lsl.w	#2,d1
000129E0 1141 0038                  		move.b	d1,$38(a0)
000129E4 117C 0004 003A             		move.b	#4,$3A(a0)
000129EA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000129EE 6700                       		beq.s	loc_1244C
000129F0 117C 0001 003B             		move.b	#1,$3B(a0)
000129F6 4428 003A                  		neg.b	$3A(a0)
000129FA 7200                       		moveq	#0,d1
000129FC 1228 0038                  		move.b	$38(a0),d1
00012A00 D228 003A                  		add.b	$3A(a0),d1
00012A04 B228 0039                  		cmp.b	$39(a0),d1
00012A08 6500                       		bcs.s	loc_12448
00012A0A 1001                       		move.b	d1,d0
00012A0C 7200                       		moveq	#0,d1
00012A0E 4A00                       		tst.b	d0
00012A10 6A00                       		bpl.s	loc_12448
00012A12 1228 0039                  		move.b	$39(a0),d1
00012A16 5901                       		subq.b	#4,d1
00012A18                            
00012A18                            loc_12448:
00012A18 1141 0038                  		move.b	d1,$38(a0)
00012A1C                            
00012A1C                            loc_1244C:
00012A1C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012A22 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012A28 6100 0000                  		bsr.w	Obj63_ChangeDir
00012A2C 6000 0000                  		bra.w	loc_124B2
00012A30                            ; ===========================================================================
00012A30                            
00012A30                            loc_12460:				; XREF: Obj63_Main
00012A30 1140 002F                  		move.b	d0,$2F(a0)
00012A34 0240 007F                  		andi.w	#$7F,d0
00012A38 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012A3C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012A42 6600 B1F6                  		bne.w	DeleteObject
00012A46 D040                       		add.w	d0,d0
00012A48 0240 001E                  		andi.w	#$1E,d0
00012A4C 0640 0070                  		addi.w	#$70,d0
00012A50 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A56 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A5A 321A                       		move.w	(a2)+,d1
00012A5C 2248                       		movea.l	a0,a1
00012A5E 6000                       		bra.s	Obj63_MakePtfms
00012A60                            ; ===========================================================================
00012A60                            
00012A60                            Obj63_Loop:
00012A60 6100 B622                  		bsr.w	SingleObjLoad
00012A64 6600                       		bne.s	loc_124AA
00012A66                            
00012A66                            Obj63_MakePtfms:			; XREF: loc_12460
00012A66 12BC 0063                  		move.b	#$63,0(a1)
00012A6A 335A 0008                  		move.w	(a2)+,8(a1)
00012A6E 335A 000C                  		move.w	(a2)+,$C(a1)
00012A72 301A                       		move.w	(a2)+,d0
00012A74 1340 0028                  		move.b	d0,$28(a1)
00012A78                            
00012A78                            loc_124AA:
00012A78 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A7C                            
00012A7C 588F                       		addq.l	#4,sp
00012A7E 4E75                       		rts	
00012A80                            ; ===========================================================================
00012A80                            
00012A80                            loc_124B2:				; XREF: Obj63_Index
00012A80 7200                       		moveq	#0,d1
00012A82 1228 0019                  		move.b	$19(a0),d1
00012A86 4EB9 0000 7924             		jsr	(PlatformObject).l
00012A8C 6000 0000                  		bra.w	sub_12502
00012A90                            ; ===========================================================================
00012A90                            
00012A90                            loc_124C2:				; XREF: Obj63_Index
00012A90 7200                       		moveq	#0,d1
00012A92 1228 0019                  		move.b	$19(a0),d1
00012A96 4EB9 0000 7A98             		jsr	(ExitPlatform).l
00012A9C 3F28 0008                  		move.w	8(a0),-(sp)
00012AA0 6100 0000                  		bsr.w	sub_12502
00012AA4 341F                       		move.w	(sp)+,d2
00012AA6 4EF9 0000 8002             		jmp	(MvSonicOnPtfm2).l
00012AAC                            ; ===========================================================================
00012AAC                            
00012AAC                            loc_124DE:				; XREF: Obj63_Index
00012AAC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012AB0 0240 0003                  		andi.w	#3,d0
00012AB4 6600                       		bne.s	loc_124FC
00012AB6 7201                       		moveq	#1,d1
00012AB8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012ABC 6700                       		beq.s	loc_124F2
00012ABE 4401                       		neg.b	d1
00012AC0                            
00012AC0                            loc_124F2:
00012AC0 D328 001A                  		add.b	d1,$1A(a0)
00012AC4 0228 0003 001A             		andi.b	#3,$1A(a0)
00012ACA                            
00012ACA                            loc_124FC:
00012ACA 588F                       		addq.l	#4,sp
00012ACC 6000 D1D8                  		bra.w	MarkObjGone
00012AD0                            
00012AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AD0                            
00012AD0                            
00012AD0                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012AD0 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012AD4 6700                       		beq.s	loc_12520
00012AD6 4A28 003B                  		tst.b	$3B(a0)
00012ADA 6600                       		bne.s	loc_12520
00012ADC 117C 0001 003B             		move.b	#1,$3B(a0)
00012AE2 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012AE8 4428 003A                  		neg.b	$3A(a0)
00012AEC 6000                       		bra.s	loc_12534
00012AEE                            ; ===========================================================================
00012AEE                            
00012AEE                            loc_12520:
00012AEE 3028 0008                  		move.w	8(a0),d0
00012AF2 B068 0034                  		cmp.w	$34(a0),d0
00012AF6 6600                       		bne.s	loc_1256A
00012AF8 3028 000C                  		move.w	$C(a0),d0
00012AFC B068 0036                  		cmp.w	$36(a0),d0
00012B00 6600                       		bne.s	loc_1256A
00012B02                            
00012B02                            loc_12534:
00012B02 7200                       		moveq	#0,d1
00012B04 1228 0038                  		move.b	$38(a0),d1
00012B08 D228 003A                  		add.b	$3A(a0),d1
00012B0C B228 0039                  		cmp.b	$39(a0),d1
00012B10 6500                       		bcs.s	loc_12552
00012B12 1001                       		move.b	d1,d0
00012B14 7200                       		moveq	#0,d1
00012B16 4A00                       		tst.b	d0
00012B18 6A00                       		bpl.s	loc_12552
00012B1A 1228 0039                  		move.b	$39(a0),d1
00012B1E 5901                       		subq.b	#4,d1
00012B20                            
00012B20                            loc_12552:
00012B20 1141 0038                  		move.b	d1,$38(a0)
00012B24 2268 003C                  		movea.l	$3C(a0),a1
00012B28 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012B2E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012B34 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B38                            
00012B38                            loc_1256A:
00012B38 6100 B09E                  		bsr.w	SpeedToPos
00012B3C 4E75                       		rts	
00012B3E                            ; End of function sub_12502
00012B3E                            
00012B3E                            
00012B3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012B3E                            
00012B3E                            
00012B3E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012B3E 7000                       		moveq	#0,d0
00012B40 343C FF00                  		move.w	#-$100,d2
00012B44 3028 0008                  		move.w	8(a0),d0
00012B48 9068 0034                  		sub.w	$34(a0),d0
00012B4C 6400                       		bcc.s	loc_12584
00012B4E 4440                       		neg.w	d0
00012B50 4442                       		neg.w	d2
00012B52                            
00012B52                            loc_12584:
00012B52 7200                       		moveq	#0,d1
00012B54 363C FF00                  		move.w	#-$100,d3
00012B58 3228 000C                  		move.w	$C(a0),d1
00012B5C 9268 0036                  		sub.w	$36(a0),d1
00012B60 6400                       		bcc.s	loc_12598
00012B62 4441                       		neg.w	d1
00012B64 4443                       		neg.w	d3
00012B66                            
00012B66                            loc_12598:
00012B66 B240                       		cmp.w	d0,d1
00012B68 6500                       		bcs.s	loc_125C2
00012B6A 3028 0008                  		move.w	8(a0),d0
00012B6E 9068 0034                  		sub.w	$34(a0),d0
00012B72 6700                       		beq.s	loc_125AE
00012B74 48C0                       		ext.l	d0
00012B76 E180                       		asl.l	#8,d0
00012B78 81C1                       		divs.w	d1,d0
00012B7A 4440                       		neg.w	d0
00012B7C                            
00012B7C                            loc_125AE:
00012B7C 3140 0010                  		move.w	d0,$10(a0)
00012B80 3143 0012                  		move.w	d3,$12(a0)
00012B84 4840                       		swap	d0
00012B86 3140 000A                  		move.w	d0,$A(a0)
00012B8A 4268 000E                  		clr.w	$E(a0)
00012B8E 4E75                       		rts	
00012B90                            ; ===========================================================================
00012B90                            
00012B90                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B90 3228 000C                  		move.w	$C(a0),d1
00012B94 9268 0036                  		sub.w	$36(a0),d1
00012B98 6700                       		beq.s	loc_125D4
00012B9A 48C1                       		ext.l	d1
00012B9C E181                       		asl.l	#8,d1
00012B9E 83C0                       		divs.w	d0,d1
00012BA0 4441                       		neg.w	d1
00012BA2                            
00012BA2                            loc_125D4:
00012BA2 3141 0012                  		move.w	d1,$12(a0)
00012BA6 3142 0010                  		move.w	d2,$10(a0)
00012BAA 4841                       		swap	d1
00012BAC 3141 000E                  		move.w	d1,$E(a0)
00012BB0 4268 000A                  		clr.w	$A(a0)
00012BB4 4E75                       		rts	
00012BB6                            ; End of function Obj63_ChangeDir
00012BB6                            
00012BB6                            ; ===========================================================================
00012BB6 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012BB8 0000                       		dc.w word_12610-Obj63_Data
00012BBA 0000                       		dc.w word_12628-Obj63_Data
00012BBC 0000                       		dc.w word_1263C-Obj63_Data
00012BBE 0000                       		dc.w word_12650-Obj63_Data
00012BC0 0000                       		dc.w word_12668-Obj63_Data
00012BC2 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012BD2 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012BDE 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012BEE 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BF6 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012C0A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012C1E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012C36 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012C4A                            
00012C4A                            ; ---------------------------------------------------------------------------
00012C4A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C4A                            ; ---------------------------------------------------------------------------
00012C4A                            Map_obj63:
00012C4A                            	include "_maps\obj63.asm"
00012C4A                            ; ---------------------------------------------------------------------------
00012C4A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C4A                            ; ---------------------------------------------------------------------------
00012C4A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012C4E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012C52 0000                       		dc.w byte_1269E-Map_obj63
00012C54 01                         byte_12686:	dc.b 1
00012C55 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C5A 01                         byte_1268C:	dc.b 1
00012C5B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C60 01                         byte_12692:	dc.b 1
00012C61 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C66 01                         byte_12698:	dc.b 1
00012C67 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C6C 01                         byte_1269E:	dc.b 1
00012C6D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C72                            		even
00012C72                            		even
00012C72                            
00012C72                            ; ===========================================================================
00012C72                            ; ---------------------------------------------------------------------------
00012C72                            ; Object 64 - bubbles (LZ)
00012C72                            ; ---------------------------------------------------------------------------
00012C72                            
00012C72                            Obj64:					; XREF: Obj_Index
00012C72 7000                       		moveq	#0,d0
00012C74 1028 0024                  		move.b	$24(a0),d0
00012C78 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C7C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C80                            ; ===========================================================================
00012C80 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C82 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C84 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C86 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C88 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C8A 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C8C                            ; ===========================================================================
00012C8C                            
00012C8C                            Obj64_Main:				; XREF: Obj64_Index
00012C8C 5428 0024                  		addq.b	#2,$24(a0)
00012C90 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C98 317C 8348 0002             		move.w	#$8348,2(a0)
00012C9E 117C 0084 0001             		move.b	#$84,1(a0)
00012CA4 117C 0010 0019             		move.b	#$10,$19(a0)
00012CAA 117C 0001 0018             		move.b	#1,$18(a0)
00012CB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00012CB4 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012CB6 5028 0024                  		addq.b	#8,$24(a0)
00012CBA 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012CBE 1140 0032                  		move.b	d0,$32(a0)
00012CC2 1140 0033                  		move.b	d0,$33(a0)
00012CC6 117C 0006 001C             		move.b	#6,$1C(a0)
00012CCC 6000 0000                  		bra.w	Obj64_BblMaker
00012CD0                            ; ===========================================================================
00012CD0                            
00012CD0                            Obj64_Bubble:				; XREF: Obj64_Main
00012CD0 1140 001C                  		move.b	d0,$1C(a0)
00012CD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00012CDA 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012CE0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012CE6 1140 0026                  		move.b	d0,$26(a0)
00012CEA                            
00012CEA                            Obj64_Animate:				; XREF: Obj64_Index
00012CEA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012CF0 4EB9 0000 ACC8             		jsr	AnimateSprite
00012CF6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012CFC 6600                       		bne.s	Obj64_ChkWater
00012CFE 117C 0001 002E             		move.b	#1,$2E(a0)
00012D04                            
00012D04                            Obj64_ChkWater:				; XREF: Obj64_Index
00012D04 3038 F646                  		move.w	($FFFFF646).w,d0
00012D08 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012D0C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012D0E                            
00012D0E                            Obj64_Burst:				; XREF: Obj64_Wobble
00012D0E 117C 0006 0024             		move.b	#6,$24(a0)
00012D14 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012D18 6000 0000                  		bra.w	Obj64_Display2
00012D1C                            ; ===========================================================================
00012D1C                            
00012D1C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012D1C 1028 0026                  		move.b	$26(a0),d0
00012D20 5228 0026                  		addq.b	#1,$26(a0)
00012D24 0240 007F                  		andi.w	#$7F,d0
00012D28 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012D2E 1031 0000                  		move.b	(a1,d0.w),d0
00012D32 4880                       		ext.w	d0
00012D34 D068 0030                  		add.w	$30(a0),d0
00012D38 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012D3C 4A28 002E                  		tst.b	$2E(a0)
00012D40 6700                       		beq.s	Obj64_Display
00012D42 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012D46 6700                       		beq.s	Obj64_Display	; if not, branch
00012D48                            
00012D48 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012D4C 303C 00AD                  		move.w	#$AD,d0
00012D50 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D56 43F8 D000                  		lea	($FFFFD000).w,a1
00012D5A 4269 0010                  		clr.w	$10(a1)
00012D5E 4269 0012                  		clr.w	$12(a1)
00012D62 4269 0014                  		clr.w	$14(a1)
00012D66 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D6C 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D72 137C 0000 003C             		move.b	#0,$3C(a1)
00012D78 08A9 0005 0022             		bclr	#5,$22(a1)
00012D7E 08A9 0004 0022             		bclr	#4,$22(a1)
00012D84 0829 0002 0022             		btst	#2,$22(a1)
00012D8A 6700 FF82                  		beq.w	Obj64_Burst
00012D8E 08A9 0002 0022             		bclr	#2,$22(a1)
00012D94 137C 0013 0016             		move.b	#$13,$16(a1)
00012D9A 137C 0009 0017             		move.b	#9,$17(a1)
00012DA0 5B69 000C                  		subq.w	#5,$C(a1)
00012DA4 6000 FF68                  		bra.w	Obj64_Burst
00012DA8                            ; ===========================================================================
00012DA8                            
00012DA8                            Obj64_Display:				; XREF: Obj64_Wobble
00012DA8 6100 AE2E                  		bsr.w	SpeedToPos
00012DAC 4A28 0001                  		tst.b	1(a0)
00012DB0 6A00                       		bpl.s	Obj64_Delete
00012DB2 4EFA AE4A                  		jmp	DisplaySprite
00012DB6                            ; ===========================================================================
00012DB6                            
00012DB6                            Obj64_Delete:
00012DB6 4EFA AE82                  		jmp	DeleteObject
00012DBA                            ; ===========================================================================
00012DBA                            
00012DBA                            Obj64_Display2:				; XREF: Obj64_Index
00012DBA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012DC0 4EB9 0000 ACC8             		jsr	AnimateSprite
00012DC6 4A28 0001                  		tst.b	1(a0)
00012DCA 6A00                       		bpl.s	Obj64_Delete2
00012DCC 4EFA AE30                  		jmp	DisplaySprite
00012DD0                            ; ===========================================================================
00012DD0                            
00012DD0                            Obj64_Delete2:
00012DD0 4EFA AE68                  		jmp	DeleteObject
00012DD4                            ; ===========================================================================
00012DD4                            
00012DD4                            Obj64_Delete3:				; XREF: Obj64_Index
00012DD4 6000 AE64                  		bra.w	DeleteObject
00012DD8                            ; ===========================================================================
00012DD8                            
00012DD8                            Obj64_BblMaker:				; XREF: Obj64_Index
00012DD8 4A68 0036                  		tst.w	$36(a0)
00012DDC 6600                       		bne.s	loc_12874
00012DDE 3038 F646                  		move.w	($FFFFF646).w,d0
00012DE2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012DE6 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012DEA 4A28 0001                  		tst.b	1(a0)
00012DEE 6A00 0000                  		bpl.w	Obj64_ChkDel
00012DF2 5368 0038                  		subq.w	#1,$38(a0)
00012DF6 6A00 0000                  		bpl.w	loc_12914
00012DFA 317C 0001 0036             		move.w	#1,$36(a0)
00012E00                            
00012E00                            loc_1283A:
00012E00 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E06 3200                       		move.w	d0,d1
00012E08 0240 0007                  		andi.w	#7,d0
00012E0C 0C40 0006                  		cmpi.w	#6,d0
00012E10 64EE                       		bcc.s	loc_1283A
00012E12                            
00012E12 1140 0034                  		move.b	d0,$34(a0)
00012E16 0241 000C                  		andi.w	#$C,d1
00012E1A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012E20 D2C1                       		adda.w	d1,a1
00012E22 2149 003C                  		move.l	a1,$3C(a0)
00012E26 5328 0032                  		subq.b	#1,$32(a0)
00012E2A 6A00                       		bpl.s	loc_12872
00012E2C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012E32 08E8 0007 0036             		bset	#7,$36(a0)
00012E38                            
00012E38                            loc_12872:
00012E38 6000                       		bra.s	loc_1287C
00012E3A                            ; ===========================================================================
00012E3A                            
00012E3A                            loc_12874:				; XREF: Obj64_BblMaker
00012E3A 5368 0038                  		subq.w	#1,$38(a0)
00012E3E 6A00 0000                  		bpl.w	loc_12914
00012E42                            
00012E42                            loc_1287C:
00012E42 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E48 0240 001F                  		andi.w	#$1F,d0
00012E4C 3140 0038                  		move.w	d0,$38(a0)
00012E50 6100 B232                  		bsr.w	SingleObjLoad
00012E54 6600                       		bne.s	loc_128F8
00012E56 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E5A 3368 0008 0008             		move.w	8(a0),8(a1)
00012E60 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E66 0240 000F                  		andi.w	#$F,d0
00012E6A 5140                       		subq.w	#8,d0
00012E6C D169 0008                  		add.w	d0,8(a1)
00012E70 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E76 7000                       		moveq	#0,d0
00012E78 1028 0034                  		move.b	$34(a0),d0
00012E7C 2468 003C                  		movea.l	$3C(a0),a2
00012E80 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E86 0828 0007 0036             		btst	#7,$36(a0)
00012E8C 6700                       		beq.s	loc_128F8
00012E8E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E94 0240 0003                  		andi.w	#3,d0
00012E98 6600                       		bne.s	loc_128E4
00012E9A 08E8 0006 0036             		bset	#6,$36(a0)
00012EA0 6600                       		bne.s	loc_128F8
00012EA2 137C 0002 0028             		move.b	#2,$28(a1)
00012EA8                            
00012EA8                            loc_128E4:
00012EA8 4A28 0034                  		tst.b	$34(a0)
00012EAC 6600                       		bne.s	loc_128F8
00012EAE 08E8 0006 0036             		bset	#6,$36(a0)
00012EB4 6600                       		bne.s	loc_128F8
00012EB6 137C 0002 0028             		move.b	#2,$28(a1)
00012EBC                            
00012EBC                            loc_128F8:
00012EBC 5328 0034                  		subq.b	#1,$34(a0)
00012EC0 6A00                       		bpl.s	loc_12914
00012EC2 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012EC8 0240 007F                  		andi.w	#$7F,d0
00012ECC 0640 0080                  		addi.w	#$80,d0
00012ED0 D168 0038                  		add.w	d0,$38(a0)
00012ED4 4268 0036                  		clr.w	$36(a0)
00012ED8                            
00012ED8                            loc_12914:
00012ED8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EDE 4EB9 0000 ACC8             		jsr	AnimateSprite
00012EE4                            
00012EE4                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012EE4 3028 0008                  		move.w	8(a0),d0
00012EE8 0240 FF80                  		andi.w	#$FF80,d0
00012EEC 3238 F700                  		move.w	($FFFFF700).w,d1
00012EF0 0441 0080                  		subi.w	#$80,d1
00012EF4 0241 FF80                  		andi.w	#$FF80,d1
00012EF8 9041                       		sub.w	d1,d0
00012EFA 0C40 0280                  		cmpi.w	#$280,d0
00012EFE 6200 AD3A                  		bhi.w	DeleteObject
00012F02 3038 F646                  		move.w	($FFFFF646).w,d0
00012F06 B068 000C                  		cmp.w	$C(a0),d0
00012F0A 6500 ACF2                  		bcs.w	DisplaySprite
00012F0E 4E75                       		rts	
00012F10                            ; ===========================================================================
00012F10                            ; bubble production sequence
00012F10                            
00012F10                            ; 0 = small bubble, 1 =	large bubble
00012F10                            
00012F10 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012F22                            
00012F22                            ; ===========================================================================
00012F22                            
00012F22                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012F22 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012F26 6B00                       		bmi.s	loc_12998
00012F28 43F8 D000                  		lea	($FFFFD000).w,a1
00012F2C 3029 0008                  		move.w	8(a1),d0
00012F30 3228 0008                  		move.w	8(a0),d1
00012F34 0441 0010                  		subi.w	#$10,d1
00012F38 B240                       		cmp.w	d0,d1
00012F3A 6400                       		bcc.s	loc_12998
00012F3C 0641 0020                  		addi.w	#$20,d1
00012F40 B240                       		cmp.w	d0,d1
00012F42 6500                       		bcs.s	loc_12998
00012F44 3029 000C                  		move.w	$C(a1),d0
00012F48 3228 000C                  		move.w	$C(a0),d1
00012F4C B240                       		cmp.w	d0,d1
00012F4E 6400                       		bcc.s	loc_12998
00012F50 0641 0010                  		addi.w	#$10,d1
00012F54 B240                       		cmp.w	d0,d1
00012F56 6500                       		bcs.s	loc_12998
00012F58 7001                       		moveq	#1,d0
00012F5A 4E75                       		rts	
00012F5C                            ; ===========================================================================
00012F5C                            
00012F5C                            loc_12998:
00012F5C 7000                       		moveq	#0,d0
00012F5E 4E75                       		rts	
00012F60                            ; ===========================================================================
00012F60                            Ani_obj64:
00012F60                            	include "_anim\obj64.asm"
00012F60                            ; ---------------------------------------------------------------------------
00012F60                            ; Animation script - bubbles (LZ)
00012F60                            ; ---------------------------------------------------------------------------
00012F60 0000                       		dc.w byte_129AA-Ani_obj64
00012F62 0000                       		dc.w byte_129B0-Ani_obj64
00012F64 0000                       		dc.w byte_129B6-Ani_obj64
00012F66 0000                       		dc.w byte_129BE-Ani_obj64
00012F68 0000                       		dc.w byte_129BE-Ani_obj64
00012F6A 0000                       		dc.w byte_129C0-Ani_obj64
00012F6C 0000                       		dc.w byte_129C6-Ani_obj64
00012F6E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F74 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F7A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F82 04FC                       byte_129BE:	dc.b 4,	$FC
00012F84 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F8A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F90 00                         		even
00012F90 00                         		even
00012F90                            
00012F90                            ; ---------------------------------------------------------------------------
00012F90                            ; Sprite mappings - bubbles (LZ)
00012F90                            ; ---------------------------------------------------------------------------
00012F90                            Map_obj64:
00012F90                            	include "_maps\obj64.asm"
00012F90                            ; ---------------------------------------------------------------------------
00012F90                            ; Sprite mappings - bubbles (LZ)
00012F90                            ; ---------------------------------------------------------------------------
00012F90 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F94 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F98 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F9C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012FA0 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012FA4 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012FA8 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012FAC 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012FB0 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012FB4 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012FB8 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012FBC 0000                       		dc.w byte_12A9C-Map_obj64
00012FBE 01                         byte_129FA:	dc.b 1
00012FBF FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012FC4 01                         byte_12A00:	dc.b 1
00012FC5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012FCA 01                         byte_12A06:	dc.b 1
00012FCB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012FD0 01                         byte_12A0C:	dc.b 1
00012FD1 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012FD6 01                         byte_12A12:	dc.b 1
00012FD7 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012FDC 01                         byte_12A18:	dc.b 1
00012FDD F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012FE2 01                         byte_12A1E:	dc.b 1
00012FE3 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012FE8 04                         byte_12A24:	dc.b 4
00012FE9 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012FEE F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012FF3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FF8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012FFD 04                         byte_12A39:	dc.b 4
00012FFE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013003 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013008 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001300D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013012 01                         byte_12A4E:	dc.b 1
00013013 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013018 01                         byte_12A54:	dc.b 1
00013019 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001301E 01                         byte_12A5A:	dc.b 1
0001301F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013024 01                         byte_12A60:	dc.b 1
00013025 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001302A 01                         byte_12A66:	dc.b 1
0001302B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013030 01                         byte_12A6C:	dc.b 1
00013031 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013036 01                         byte_12A72:	dc.b 1
00013037 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001303C 01                         byte_12A78:	dc.b 1
0001303D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013042 01                         byte_12A7E:	dc.b 1
00013043 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013048 01                         byte_12A84:	dc.b 1
00013049 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001304E 01                         byte_12A8A:	dc.b 1
0001304F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013054 01                         byte_12A90:	dc.b 1
00013055 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001305A 01                         byte_12A96:	dc.b 1
0001305B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013060 00                         byte_12A9C:	dc.b 0
00013062 00                         		even
00013062 00                         		even
00013062                            
00013062                            ; ===========================================================================
00013062                            ; ---------------------------------------------------------------------------
00013062                            ; Object 65 - waterfalls (LZ)
00013062                            ; ---------------------------------------------------------------------------
00013062                            
00013062                            Obj65:					; XREF: Obj_Index
00013062 7000                       		moveq	#0,d0
00013064 1028 0024                  		move.b	$24(a0),d0
00013068 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001306C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013070                            ; ===========================================================================
00013070 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013072 0000                       		dc.w Obj65_Animate-Obj65_Index
00013074 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013076 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013078 0000                       		dc.w loc_12B36-Obj65_Index
0001307A                            ; ===========================================================================
0001307A                            
0001307A                            Obj65_Main:				; XREF: Obj65_Index
0001307A 5828 0024                  		addq.b	#4,$24(a0)
0001307E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013086 317C 4259 0002             		move.w	#$4259,2(a0)
0001308C 0028 0004 0001             		ori.b	#4,1(a0)
00013092 117C 0018 0019             		move.b	#$18,$19(a0)
00013098 117C 0001 0018             		move.b	#1,$18(a0)
0001309E 1028 0028                  		move.b	$28(a0),d0	; get object type
000130A2 6A00                       		bpl.s	loc_12AE6
000130A4 08E8 0007 0002             		bset	#7,2(a0)
000130AA                            
000130AA                            loc_12AE6:
000130AA 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000130AE 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000130B2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000130B6 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000130B8 4228 0018                  		clr.b	$18(a0)
000130BC 5528 0024                  		subq.b	#2,$24(a0)
000130C0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000130C6 6700                       		beq.s	loc_12B0A	; if not, branch
000130C8 117C 0006 0024             		move.b	#6,$24(a0)
000130CE                            
000130CE                            loc_12B0A:
000130CE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000130D4 6700                       		beq.s	Obj65_Animate	; if not, branch
000130D6 117C 0008 0024             		move.b	#8,$24(a0)
000130DC                            
000130DC                            Obj65_Animate:				; XREF: Obj65_Index
000130DC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000130E2 4EB9 0000 ACC8             		jsr	AnimateSprite
000130E8                            
000130E8                            Obj65_ChkDel:				; XREF: Obj65_Index
000130E8 6000 CBBC                  		bra.w	MarkObjGone
000130EC                            ; ===========================================================================
000130EC                            
000130EC                            Obj65_FixHeight:			; XREF: Obj65_Index
000130EC 3038 F646                  		move.w	($FFFFF646).w,d0
000130F0 0440 0010                  		subi.w	#$10,d0
000130F4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130F8 60E2                       		bra.s	Obj65_Animate
000130FA                            ; ===========================================================================
000130FA                            
000130FA                            loc_12B36:				; XREF: Obj65_Index
000130FA 08A8 0007 0002             		bclr	#7,2(a0)
00013100 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013106 6600                       		bne.s	Obj65_Animate2
00013108 08E8 0007 0002             		bset	#7,2(a0)
0001310E                            
0001310E                            Obj65_Animate2:
0001310E 60CC                       		bra.s	Obj65_Animate
00013110                            ; ===========================================================================
00013110                            Ani_obj65:
00013110                            	include "_anim\obj65.asm"
00013110                            ; ---------------------------------------------------------------------------
00013110                            ; Animation script - waterfall (LZ)
00013110                            ; ---------------------------------------------------------------------------
00013110 0000                       		dc.w byte_12B4E-Ani_obj65
00013112 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013118 00                         		even
00013118 00                         		even
00013118                            
00013118                            ; ---------------------------------------------------------------------------
00013118                            ; Sprite mappings - waterfalls (LZ)
00013118                            ; ---------------------------------------------------------------------------
00013118                            Map_obj65:
00013118                            	include "_maps\obj65.asm"
00013118                            ; ---------------------------------------------------------------------------
00013118                            ; Sprite mappings - waterfalls (LZ)
00013118                            ; ---------------------------------------------------------------------------
00013118 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001311C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013120 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013124 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013128 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001312C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013130 01                         byte_12B6C:	dc.b 1
00013131 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013136 02                         byte_12B72:	dc.b 2
00013137 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001313C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013141 02                         byte_12B7D:	dc.b 2
00013142 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013147 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001314C 01                         byte_12B88:	dc.b 1
0001314D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013152 02                         byte_12B8E:	dc.b 2
00013153 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013158 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001315D 01                         byte_12B99:	dc.b 1
0001315E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013163 01                         byte_12B9F:	dc.b 1
00013164 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013169 01                         byte_12BA5:	dc.b 1
0001316A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001316F 02                         byte_12BAB:	dc.b 2
00013170 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013175 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001317A 02                         byte_12BB6:	dc.b 2
0001317B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013180 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013185 02                         byte_12BC1:	dc.b 2
00013186 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001318B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013190 02                         byte_12BCC:	dc.b 2
00013191 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013196 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001319C 00                         		even
0001319C 00                         		even
0001319C                            
0001319C                            ; ===========================================================================
0001319C                            ; ---------------------------------------------------------------------------
0001319C                            ; Object 01 - Sonic
0001319C                            ; ---------------------------------------------------------------------------
0001319C                            
0001319C                            Obj01:					; XREF: Obj_Index
0001319C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000131A0 6700                       		beq.s	Obj01_Normal	; if not, branch
000131A2 4EF9 0000 0000             		jmp	DebugMode
000131A8                            ; ===========================================================================
000131A8                            
000131A8                            Obj01_Normal:
000131A8 7000                       		moveq	#0,d0
000131AA 1028 0024                  		move.b	$24(a0),d0
000131AE 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000131B2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000131B6                            ; ===========================================================================
000131B6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000131B8 0000                       		dc.w Obj01_Control-Obj01_Index
000131BA 0000                       		dc.w Obj01_Hurt-Obj01_Index
000131BC 0000                       		dc.w Obj01_Death-Obj01_Index
000131BE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000131C0                            ; ===========================================================================
000131C0                            
000131C0                            Player_Maps:
000131C0 0000 0000                  	dc.l	Map_Sonic
000131C4 0000 0000                  	dc.l	Map_Sonic ; gronic
000131C8                            	; insert player mapping here
000131C8                            	
000131C8                            Obj01_Main:				; XREF: Obj01_Index
000131C8 5428 0024                  		addq.b	#2,$24(a0)
000131CC 117C 0013 0016             		move.b	#$13,$16(a0)
000131D2 117C 0009 0017             		move.b	#9,$17(a0)
000131D8                            		
000131D8 7000                       		moveq	#0,d0
000131DA 1038 FFE8                  		move.b	(v_character),d0
000131DE E548                       		lsl.w	#2,d0
000131E0 43FA FFDE                  		lea 	Player_Maps(pc),a1
000131E4 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000131EA                            		
000131EA 317C 0780 0002             		move.w	#$780,2(a0)
000131F0 117C 0002 0018             		move.b	#2,$18(a0)
000131F6 117C 0018 0019             		move.b	#$18,$19(a0)
000131FC 117C 0004 0001             		move.b	#4,1(a0)
00013202 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013208 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001320E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013214                            
00013214                            Obj01_Control:				; XREF: Obj01_Index
00013214 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013218 6700                       		beq.s	loc_12C58	; if not, branch
0001321A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013220 6700                       		beq.s	loc_12C58	; if not, branch
00013222 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013228 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001322C 4E75                       		rts	
0001322E                            ; ===========================================================================
0001322E                            
0001322E                            loc_12C58:
0001322E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013232 6600                       		bne.s	loc_12C64	; if yes, branch
00013234 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001323A                            
0001323A                            loc_12C64:
0001323A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013240 6600                       		bne.s	loc_12C7E	; if yes, branch
00013242 7000                       		moveq	#0,d0
00013244 1028 0022                  		move.b	$22(a0),d0
00013248 0240 0006                  		andi.w	#6,d0
0001324C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013250 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013254                            
00013254                            loc_12C7E:
00013254 6100                       		bsr.s	Sonic_Display
00013256 6100 0000                  		bsr.w	Sonic_RecordPos
0001325A 6100 0000                  		bsr.w	Sonic_Water
0001325E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013264 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001326A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001326E 6700                       		beq.s	loc_12CA6
00013270 4A28 001C                  		tst.b	$1C(a0)
00013274 6600                       		bne.s	loc_12CA6
00013276 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001327C                            
0001327C                            loc_12CA6:
0001327C 6100 0000                  		bsr.w	Sonic_Animate
00013280 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013284 6B00                       		bmi.s	loc_12CB6
00013286 4EB9 0000 0000             		jsr	TouchResponse
0001328C                            
0001328C                            loc_12CB6:
0001328C 6100 0000                  		bsr.w	Sonic_Loops
00013290 6100 0000                  		bsr.w	LoadSonicDynPLC
00013294 4E75                       		rts	
00013296                            ; ===========================================================================
00013296 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013298 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001329A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001329C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            ; Music	to play	after invincibility wears off
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            ; ===========================================================================
0001329E                            
0001329E                            Sonic_Display:				; XREF: loc_12C7E
0001329E 3028 0030                  		move.w	$30(a0),d0
000132A2 6700                       		beq.s	Obj01_Display
000132A4 5368 0030                  		subq.w	#1,$30(a0)
000132A8 E648                       		lsr.w	#3,d0
000132AA 6400                       		bcc.s	Obj01_ChkInvin
000132AC                            
000132AC                            Obj01_Display:
000132AC 4EBA A950                  		jsr	DisplaySprite
000132B0                            
000132B0                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000132B0                             
000132B0                            Obj01_ChkInvin:
000132B0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000132B4 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000132B8 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000132BC 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000132C0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000132C4 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000132C8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000132CC 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000132D0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000132D6 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000132DA 7000                       		moveq	#0,d0
000132DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000132E0                             
000132E0 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000132E6 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000132E8 43F9 0000 3B04             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000132EE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132F0                             
000132F0                            Obj01_GetBgm2:
000132F0 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000132F6 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000132F8 43F9 0000 3B0C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000132FE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013300                             
00013300                            Obj01_GetBgm3:
00013300 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013306 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013308 43F9 0000 3B12             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001330E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013310                             
00013310                            Obj01_GetBgm4:
00013310 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013316 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013318 43F9 0000 3B18             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001331E                             
0001331E                            Obj01_PlayMusic:
0001331E 1031 0000                  		move.b	(a1,d0.w),d0
00013322 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
00013328                             
00013328                            ; NineKode ends here.
00013328                            
00013328                            Obj01_RmvInvin:
00013328 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001332E                            
0001332E                            Obj01_ChkShoes:
0001332E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013332 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013334 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013338 6700                       		beq.s	Obj01_ExitChk
0001333A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001333E 6600                       		bne.s	Obj01_ExitChk
00013340 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013346 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001334C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013352 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013358 303C 00E3                  		move.w	#$E3,d0
0001335C 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
00013362                            ; ===========================================================================
00013362                            
00013362                            Obj01_ExitChk:
00013362 4E75                       		rts	
00013364                            
00013364                            ; ---------------------------------------------------------------------------
00013364                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013364                            ; ---------------------------------------------------------------------------
00013364                            
00013364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013364                            
00013364                            
00013364                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013364 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013368 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001336C 43F1 0000                  		lea	(a1,d0.w),a1
00013370 32E8 0008                  		move.w	8(a0),(a1)+
00013374 32E8 000C                  		move.w	$C(a0),(a1)+
00013378 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001337C 4E75                       		rts	
0001337E                            ; End of function Sonic_RecordPos
0001337E                            
0001337E                            ; ---------------------------------------------------------------------------
0001337E                            ; Subroutine for Sonic when he's underwater
0001337E                            ; ---------------------------------------------------------------------------
0001337E                            
0001337E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001337E                            
0001337E                            
0001337E                            Sonic_Water:				; XREF: loc_12C7E
0001337E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013384 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013386                            
00013386                            locret_12D80:
00013386 4E75                       		rts	
00013388                            ; ===========================================================================
00013388                            
00013388                            Obj01_InWater:
00013388 3038 F646                  		move.w	($FFFFF646).w,d0
0001338C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013390 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013392 08E8 0006 0022             		bset	#6,$22(a0)
00013398 66EC                       		bne.s	locret_12D80
0001339A 6100 0000                  		bsr.w	ResumeMusic
0001339E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000133A4 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000133AA 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000133B0 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000133B6 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000133BC E0E8 0010                  		asr	$10(a0)
000133C0 E0E8 0012                  		asr	$12(a0)
000133C4 E0E8 0012                  		asr	$12(a0)
000133C8 67BC                       		beq.s	locret_12D80
000133CA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000133D0 303C 00AA                  		move.w	#$AA,d0
000133D4 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000133DA                            ; ===========================================================================
000133DA                            
000133DA                            Obj01_OutWater:
000133DA 08A8 0006 0022             		bclr	#6,$22(a0)
000133E0 67A4                       		beq.s	locret_12D80
000133E2 6100 0000                  		bsr.w	ResumeMusic
000133E6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000133EC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000133F2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000133F8 E1E8 0012                  		asl	$12(a0)
000133FC 6700 FF88                  		beq.w	locret_12D80
00013400 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013406 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001340C 6E00                       		bgt.s	loc_12E0E
0001340E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013414                            
00013414                            loc_12E0E:
00013414 303C 00AA                  		move.w	#$AA,d0
00013418 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001341E                            ; End of function Sonic_Water
0001341E                            
0001341E                            ; ===========================================================================
0001341E                            ; ---------------------------------------------------------------------------
0001341E                            ; Modes	for controlling	Sonic
0001341E                            ; ---------------------------------------------------------------------------
0001341E                            
0001341E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001341E 6100 0000                  		bsr.w	Sonic_Jump
00013422 6100 0000                  		bsr.w	Sonic_SlopeResist
00013426 6100 0000                  		bsr.w	Sonic_Move
0001342A 6100 0000                  		bsr.w	Sonic_Roll
0001342E 6100 0000                  		bsr.w	Sonic_LevelBound
00013432 4EBA A7A4                  		jsr	SpeedToPos
00013436 6100 0000                  		bsr.w	Sonic_AnglePos
0001343A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001343E 4E75                       		rts	
00013440                            ; ===========================================================================
00013440                            
00013440                            Obj01_MdJump:				; XREF: Obj01_Modes
00013440 6100 0000                  		bsr.w	Sonic_JumpHeight
00013444 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013448 6100 0000                  		bsr.w	Sonic_LevelBound
0001344C 4EBA A75E                  		jsr	ObjectFall
00013450 0828 0006 0022             		btst	#6,$22(a0)
00013456 6700                       		beq.s	loc_12E5C
00013458 0468 0028 0012             		subi.w	#$28,$12(a0)
0001345E                            
0001345E                            loc_12E5C:
0001345E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013462 6100 0000                  		bsr.w	Sonic_Floor
00013466 4E75                       		rts	
00013468                            ; ===========================================================================
00013468                            
00013468                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013468 6100 0000                  		bsr.w	Sonic_Jump
0001346C 6100 0000                  		bsr.w	Sonic_RollRepel
00013470 6100 0000                  		bsr.w	Sonic_RollSpeed
00013474 6100 0000                  		bsr.w	Sonic_LevelBound
00013478 4EBA A75E                  		jsr	SpeedToPos
0001347C 6100 0000                  		bsr.w	Sonic_AnglePos
00013480 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013484 4E75                       		rts	
00013486                            ; ===========================================================================
00013486                            
00013486                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013486 6100 0000                  		bsr.w	Sonic_JumpHeight
0001348A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001348E 6100 0000                  		bsr.w	Sonic_LevelBound
00013492 6100 0000                  		bsr.w	Sonic_AirUnroll
00013496 4EBA A714                  		jsr	ObjectFall
0001349A 0828 0006 0022             		btst	#6,$22(a0)
000134A0 6700                       		beq.s	loc_12EA6
000134A2 0468 0028 0012             		subi.w	#$28,$12(a0)
000134A8                            
000134A8                            loc_12EA6:
000134A8 6100 0000                  		bsr.w	Sonic_JumpAngle
000134AC 6100 0000                  		bsr.w	Sonic_Floor
000134B0 4E75                       		rts	
000134B2                            ; ---------------------------------------------------------------------------
000134B2                            ; Subroutine to	make Sonic walk/run
000134B2                            ; ---------------------------------------------------------------------------
000134B2                            
000134B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134B2                            
000134B2                            
000134B2                            Sonic_Move:				; XREF: Obj01_MdNormal
000134B2 3C38 F760                  		move.w	($FFFFF760).w,d6
000134B6 3A38 F762                  		move.w	($FFFFF762).w,d5
000134BA 3838 F764                  		move.w	($FFFFF764).w,d4
000134BE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000134C2 6600 0000                  		bne.w	loc_12FEE
000134C6 4A68 003E                  		tst.w	$3E(a0)
000134CA 6600 0000                  		bne.w	Obj01_ResetScr
000134CE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000134D4 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000134D6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134DC 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000134DE 6100 0000                  		bsr.w	Sonic_MoveLeft
000134E2                            
000134E2                            Obj01_NotLeft:
000134E2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000134E8 6700                       		beq.s	Obj01_NotRight	; if not, branch
000134EA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134F0 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000134F2 6100 0000                  		bsr.w	Sonic_MoveLeft
000134F6 6000                       		bra.s	Obj01_NotRight
000134F8                            
000134F8                            Obj01_MoveRight:
000134F8 6100 0000                  		bsr.w	Sonic_MoveRight
000134FC                            
000134FC                            Obj01_NotRight:
000134FC 1028 0026                  		move.b	$26(a0),d0
00013500 0600 0020                  		addi.b	#$20,d0
00013504 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013508 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001350C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013510 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013514 08A8 0005 0022             		bclr	#5,$22(a0)
0001351A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013520 0828 0003 0022             		btst	#3,$22(a0)
00013526 6700                       		beq.s	Sonic_Balance
00013528 7000                       		moveq	#0,d0
0001352A 1028 003D                  		move.b	$3D(a0),d0
0001352E ED48                       		lsl.w	#6,d0
00013530 43F8 D000                  		lea	($FFFFD000).w,a1
00013534 43F1 0000                  		lea	(a1,d0.w),a1
00013538 4A29 0022                  		tst.b	$22(a1)
0001353C 6B00                       		bmi.s	Sonic_LookUp
0001353E 7200                       		moveq	#0,d1
00013540 1229 0019                  		move.b	$19(a1),d1
00013544 3401                       		move.w	d1,d2
00013546 D442                       		add.w	d2,d2
00013548 5942                       		subq.w	#4,d2
0001354A D268 0008                  		add.w	8(a0),d1
0001354E 9269 0008                  		sub.w	8(a1),d1
00013552 0C41 0004                  		cmpi.w	#4,d1
00013556 6D00                       		blt.s	loc_12F6A
00013558 B242                       		cmp.w	d2,d1
0001355A 6C00                       		bge.s	loc_12F5A
0001355C 6000                       		bra.s	Sonic_LookUp
0001355E                            ; ===========================================================================
0001355E                            
0001355E                            Sonic_Balance:
0001355E 4EB9 0000 0000             		jsr	ObjHitFloor
00013564 0C41 000C                  		cmpi.w	#$C,d1
00013568 6D00                       		blt.s	Sonic_LookUp
0001356A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013570 6600                       		bne.s	loc_12F62
00013572                            
00013572                            loc_12F5A:
00013572 08A8 0000 0022             		bclr	#0,$22(a0)
00013578 6000                       		bra.s	loc_12F70
0001357A                            ; ===========================================================================
0001357A                            
0001357A                            loc_12F62:
0001357A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013580 6600                       		bne.s	Sonic_LookUp
00013582                            
00013582                            loc_12F6A:
00013582 08E8 0000 0022             		bset	#0,$22(a0)
00013588                            
00013588                            loc_12F70:
00013588 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001358E 6000                       		bra.s	Obj01_ResetScr
00013590                            ; ===========================================================================
00013590                            
00013590                            Sonic_LookUp:
00013590 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013596 6700                       		beq.s	Sonic_Duck	; if not, branch
00013598 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001359E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000135A4 6700                       		beq.s	loc_12FC2
000135A6 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000135AA 6000                       		bra.s	loc_12FC2
000135AC                            ; ===========================================================================
000135AC                            
000135AC                            Sonic_Duck:
000135AC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000135B2 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000135B4 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000135BA 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000135C0 6700                       		beq.s	loc_12FC2
000135C2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000135C6 6000                       		bra.s	loc_12FC2
000135C8                            ; ===========================================================================
000135C8                            
000135C8                            Obj01_ResetScr:
000135C8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000135CE 6700                       		beq.s	loc_12FC2	; if yes, branch
000135D0 6400                       		bcc.s	loc_12FBE
000135D2 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000135D6                            
000135D6                            loc_12FBE:
000135D6 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000135DA                            
000135DA                            loc_12FC2:
000135DA 1038 F602                  		move.b	($FFFFF602).w,d0
000135DE 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000135E2 6600                       		bne.s	loc_12FEE	; if yes, branch
000135E4 3028 0014                  		move.w	$14(a0),d0
000135E8 6700                       		beq.s	loc_12FEE
000135EA 6B00                       		bmi.s	loc_12FE2
000135EC 9045                       		sub.w	d5,d0
000135EE 6400                       		bcc.s	loc_12FDC
000135F0 303C 0000                  		move.w	#0,d0
000135F4                            
000135F4                            loc_12FDC:
000135F4 3140 0014                  		move.w	d0,$14(a0)
000135F8 6000                       		bra.s	loc_12FEE
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            loc_12FE2:
000135FA D045                       		add.w	d5,d0
000135FC 6400                       		bcc.s	loc_12FEA
000135FE 303C 0000                  		move.w	#0,d0
00013602                            
00013602                            loc_12FEA:
00013602 3140 0014                  		move.w	d0,$14(a0)
00013606                            
00013606                            loc_12FEE:
00013606 1028 0026                  		move.b	$26(a0),d0
0001360A 4EB9 0000 2C64             		jsr	(CalcSine).l
00013610 C3E8 0014                  		muls.w	$14(a0),d1
00013614 E081                       		asr.l	#8,d1
00013616 3141 0010                  		move.w	d1,$10(a0)
0001361A C1E8 0014                  		muls.w	$14(a0),d0
0001361E E080                       		asr.l	#8,d0
00013620 3140 0012                  		move.w	d0,$12(a0)
00013624                            
00013624                            loc_1300C:
00013624 1028 0026                  		move.b	$26(a0),d0
00013628 0600 0040                  		addi.b	#$40,d0
0001362C 6B00                       		bmi.s	locret_1307C
0001362E 123C 0040                  		move.b	#$40,d1
00013632 4A68 0014                  		tst.w	$14(a0)
00013636 6700                       		beq.s	locret_1307C
00013638 6B00                       		bmi.s	loc_13024
0001363A 4441                       		neg.w	d1
0001363C                            
0001363C                            loc_13024:
0001363C 1028 0026                  		move.b	$26(a0),d0
00013640 D001                       		add.b	d1,d0
00013642 3F00                       		move.w	d0,-(sp)
00013644 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013648 301F                       		move.w	(sp)+,d0
0001364A 4A41                       		tst.w	d1
0001364C 6A00                       		bpl.s	locret_1307C
0001364E E141                       		asl.w	#8,d1
00013650 0600 0020                  		addi.b	#$20,d0
00013654 0200 00C0                  		andi.b	#$C0,d0
00013658 6700                       		beq.s	loc_13078
0001365A 0C00 0040                  		cmpi.b	#$40,d0
0001365E 6700                       		beq.s	loc_13066
00013660 0C00 0080                  		cmpi.b	#$80,d0
00013664 6700                       		beq.s	loc_13060
00013666 D368 0010                  		add.w	d1,$10(a0)
0001366A 08E8 0005 0022             		bset	#5,$22(a0)
00013670 317C 0000 0014             		move.w	#0,$14(a0)
00013676 4E75                       		rts	
00013678                            ; ===========================================================================
00013678                            
00013678                            loc_13060:
00013678 9368 0012                  		sub.w	d1,$12(a0)
0001367C 4E75                       		rts	
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            loc_13066:
0001367E 9368 0010                  		sub.w	d1,$10(a0)
00013682 08E8 0005 0022             		bset	#5,$22(a0)
00013688 317C 0000 0014             		move.w	#0,$14(a0)
0001368E 4E75                       		rts	
00013690                            ; ===========================================================================
00013690                            
00013690                            loc_13078:
00013690 D368 0012                  		add.w	d1,$12(a0)
00013694                            
00013694                            locret_1307C:
00013694 4E75                       		rts	
00013696                            ; End of function Sonic_Move
00013696                            
00013696                            
00013696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013696                            
00013696                            
00013696                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013696 3028 0014                  		move.w	$14(a0),d0
0001369A 6700                       		beq.s	loc_13086
0001369C 6A00                       		bpl.s	loc_130B2
0001369E                            
0001369E                            loc_13086:
0001369E 08E8 0000 0022             		bset	#0,$22(a0)
000136A4 6600                       		bne.s	loc_1309A
000136A6 08A8 0005 0022             		bclr	#5,$22(a0)
000136AC 117C 0001 001D             		move.b	#1,$1D(a0)
000136B2                            
000136B2                            loc_1309A:
000136B2 9045                       		sub.w	d5,d0
000136B4 3206                       		move.w	d6,d1
000136B6 4441                       		neg.w	d1
000136B8 B041                       		cmp.w	d1,d0
000136BA 6E00                       		bgt.s	loc_130A6
000136BC 3001                       		move.w	d1,d0
000136BE                            
000136BE                            loc_130A6:
000136BE 3140 0014                  		move.w	d0,$14(a0)
000136C2 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136C8 4E75                       		rts	
000136CA                            ; ===========================================================================
000136CA                            
000136CA                            loc_130B2:				; XREF: Sonic_MoveLeft
000136CA 9044                       		sub.w	d4,d0
000136CC 6400                       		bcc.s	loc_130BA
000136CE 303C FF80                  		move.w	#-$80,d0
000136D2                            
000136D2                            loc_130BA:
000136D2 3140 0014                  		move.w	d0,$14(a0)
000136D6 1028 0026                  		move.b	$26(a0),d0
000136DA 0600 0020                  		addi.b	#$20,d0
000136DE 0200 00C0                  		andi.b	#$C0,d0
000136E2 6600                       		bne.s	locret_130E8
000136E4 0C40 0400                  		cmpi.w	#$400,d0
000136E8 6D00                       		blt.s	locret_130E8
000136EA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136F0 08A8 0000 0022             		bclr	#0,$22(a0)
000136F6 303C 00A4                  		move.w	#$A4,d0
000136FA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013700                            
00013700                            locret_130E8:
00013700 4E75                       		rts	
00013702                            ; End of function Sonic_MoveLeft
00013702                            
00013702                            
00013702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013702                            
00013702                            
00013702                            Sonic_MoveRight:			; XREF: Sonic_Move
00013702 3028 0014                  		move.w	$14(a0),d0
00013706 6B00                       		bmi.s	loc_13118
00013708 08A8 0000 0022             		bclr	#0,$22(a0)
0001370E 6700                       		beq.s	loc_13104
00013710 08A8 0005 0022             		bclr	#5,$22(a0)
00013716 117C 0001 001D             		move.b	#1,$1D(a0)
0001371C                            
0001371C                            loc_13104:
0001371C D045                       		add.w	d5,d0
0001371E B046                       		cmp.w	d6,d0
00013720 6D00                       		blt.s	loc_1310C
00013722 3006                       		move.w	d6,d0
00013724                            
00013724                            loc_1310C:
00013724 3140 0014                  		move.w	d0,$14(a0)
00013728 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001372E 4E75                       		rts	
00013730                            ; ===========================================================================
00013730                            
00013730                            loc_13118:				; XREF: Sonic_MoveRight
00013730 D044                       		add.w	d4,d0
00013732 6400                       		bcc.s	loc_13120
00013734 303C 0080                  		move.w	#$80,d0
00013738                            
00013738                            loc_13120:
00013738 3140 0014                  		move.w	d0,$14(a0)
0001373C 1028 0026                  		move.b	$26(a0),d0
00013740 0600 0020                  		addi.b	#$20,d0
00013744 0200 00C0                  		andi.b	#$C0,d0
00013748 6600                       		bne.s	locret_1314E
0001374A 0C40 FC00                  		cmpi.w	#-$400,d0
0001374E 6E00                       		bgt.s	locret_1314E
00013750 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013756 08E8 0000 0022             		bset	#0,$22(a0)
0001375C 303C 00A4                  		move.w	#$A4,d0
00013760 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013766                            
00013766                            locret_1314E:
00013766 4E75                       		rts	
00013768                            ; End of function Sonic_MoveRight
00013768                            
00013768                            ; ---------------------------------------------------------------------------
00013768                            ; Subroutine to	change Sonic's speed as he rolls
00013768                            ; ---------------------------------------------------------------------------
00013768                            
00013768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013768                            
00013768                            
00013768                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013768 3C38 F760                  		move.w	($FFFFF760).w,d6
0001376C E346                       		asl.w	#1,d6
0001376E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013772 E245                       		asr.w	#1,d5
00013774 3838 F764                  		move.w	($FFFFF764).w,d4
00013778 E444                       		asr.w	#2,d4
0001377A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001377E 6600 0000                  		bne.w	loc_131CC
00013782 4A68 003E                  		tst.w	$3E(a0)
00013786 6600                       		bne.s	loc_13188
00013788 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001378E 6700                       		beq.s	loc_1317C	; if not, branch
00013790 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013796 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013798 6100 0000                  		bsr.w	Sonic_RollLeft
0001379C                            
0001379C                            loc_1317C:
0001379C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000137A2 6700                       		beq.s	loc_13188	; if not, branch
000137A4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000137AA 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000137AC 6100 0000                  		bsr.w	Sonic_RollLeft
000137B0 6000                       		bra.s	loc_13188
000137B2                            
000137B2                            SonicRS_RollRight:
000137B2 6100 0000                  		bsr.w	Sonic_RollRight
000137B6                            
000137B6                            loc_13188:
000137B6 3028 0014                  		move.w	$14(a0),d0
000137BA 6700                       		beq.s	loc_131AA
000137BC 6B00                       		bmi.s	loc_1319E
000137BE 9045                       		sub.w	d5,d0
000137C0 6400                       		bcc.s	loc_13198
000137C2 303C 0000                  		move.w	#0,d0
000137C6                            
000137C6                            loc_13198:
000137C6 3140 0014                  		move.w	d0,$14(a0)
000137CA 6000                       		bra.s	loc_131AA
000137CC                            ; ===========================================================================
000137CC                            
000137CC                            loc_1319E:				; XREF: Sonic_RollSpeed
000137CC D045                       		add.w	d5,d0
000137CE 6400                       		bcc.s	loc_131A6
000137D0 303C 0000                  		move.w	#0,d0
000137D4                            
000137D4                            loc_131A6:
000137D4 3140 0014                  		move.w	d0,$14(a0)
000137D8                            
000137D8                            loc_131AA:
000137D8 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000137DC 6600                       		bne.s	loc_131CC	; if yes, branch
000137DE 08A8 0002 0022             		bclr	#2,$22(a0)
000137E4 117C 0013 0016             		move.b	#$13,$16(a0)
000137EA 117C 0009 0017             		move.b	#9,$17(a0)
000137F0 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000137F6 5B68 000C                  		subq.w	#5,$C(a0)
000137FA                            
000137FA                            loc_131CC:
000137FA 1028 0026                  		move.b	$26(a0),d0
000137FE 4EB9 0000 2C64             		jsr	(CalcSine).l
00013804 C1E8 0014                  		muls.w	$14(a0),d0
00013808 E080                       		asr.l	#8,d0
0001380A 3140 0012                  		move.w	d0,$12(a0)
0001380E C3E8 0014                  		muls.w	$14(a0),d1
00013812 E081                       		asr.l	#8,d1
00013814 0C41 1000                  		cmpi.w	#$1000,d1
00013818 6F00                       		ble.s	loc_131F0
0001381A 323C 1000                  		move.w	#$1000,d1
0001381E                            
0001381E                            loc_131F0:
0001381E 0C41 F000                  		cmpi.w	#-$1000,d1
00013822 6C00                       		bge.s	loc_131FA
00013824 323C F000                  		move.w	#-$1000,d1
00013828                            
00013828                            loc_131FA:
00013828 3141 0010                  		move.w	d1,$10(a0)
0001382C 6000 FDF6                  		bra.w	loc_1300C
00013830                            ; End of function Sonic_RollSpeed
00013830                            
00013830                            
00013830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013830                            
00013830                            
00013830                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013830 3028 0014                  		move.w	$14(a0),d0
00013834 6700                       		beq.s	loc_1320A
00013836 6A00                       		bpl.s	loc_13218
00013838                            
00013838                            loc_1320A:
00013838 08E8 0000 0022             		bset	#0,$22(a0)
0001383E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013844 4E75                       		rts	
00013846                            ; ===========================================================================
00013846                            
00013846                            loc_13218:
00013846 9044                       		sub.w	d4,d0
00013848 6400                       		bcc.s	loc_13220
0001384A 303C FF80                  		move.w	#-$80,d0
0001384E                            
0001384E                            loc_13220:
0001384E 3140 0014                  		move.w	d0,$14(a0)
00013852 4E75                       		rts	
00013854                            ; End of function Sonic_RollLeft
00013854                            
00013854                            
00013854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013854                            
00013854                            
00013854                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013854 3028 0014                  		move.w	$14(a0),d0
00013858 6B00                       		bmi.s	loc_1323A
0001385A 08A8 0000 0022             		bclr	#0,$22(a0)
00013860 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013866 4E75                       		rts	
00013868                            ; ===========================================================================
00013868                            
00013868                            loc_1323A:
00013868 D044                       		add.w	d4,d0
0001386A 6400                       		bcc.s	loc_13242
0001386C 303C 0080                  		move.w	#$80,d0
00013870                            
00013870                            loc_13242:
00013870 3140 0014                  		move.w	d0,$14(a0)
00013874 4E75                       		rts	
00013876                            ; End of function Sonic_RollRight
00013876                            
00013876                            Sonic_AirUnroll:
00013876                            		
00013876 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
0001387A 6600                       		bne.s	@timer
0001387C 1038 F605                  		move.b	($FFFFF605).w,d0
00013880 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013884 6700                       		beq.s	@end	; if not, branch
00013886 08A8 0002 0022             		bclr	#2,$22(a0)
0001388C 117C 0013 0016             		move.b	#$13,$16(a0)
00013892 117C 0009 0017             		move.b	#9,$17(a0)
00013898 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
0001389E 303C 00A5                  		move.w	#$A5,d0
000138A2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
000138A8 2028 0010                  		move.l	$10(a0),d0
000138AC D080                       		add.l	d0,d0
000138AE 2140 0010                  		move.l	d0,$10(a0)
000138B2 5B68 000C                  		subq.w	#5,$C(a0)
000138B6                            	@end:
000138B6 4E75                       		rts
000138B8                            	@timer:
000138B8 5328 003A                  		subq.b	#1,$3A(a0)
000138BC 4E75                       		rts
000138BE                            
000138BE                            ; ---------------------------------------------------------------------------
000138BE                            ; Subroutine to	change Sonic's direction while jumping
000138BE                            ; ---------------------------------------------------------------------------
000138BE                            
000138BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138BE                            
000138BE                            
000138BE                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000138BE 3C38 F760                  		move.w	($FFFFF760).w,d6
000138C2 3A38 F762                  		move.w	($FFFFF762).w,d5
000138C6 E345                       		asl.w	#1,d5
000138C8 0828 0004 0022             		btst	#4,$22(a0)
000138CE 6600                       		bne.s	Obj01_ResetScr2
000138D0 3028 0010                  		move.w	$10(a0),d0
000138D4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138DA 6700                       		beq.s	loc_13278	; if not, branch
000138DC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138E2 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000138E4 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000138E8 6E00                       		bgt.s	loc_13278
000138EA 3001                       		move.w	d1,d0
000138EC                            
000138EC                            loc_13278:
000138EC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138F2 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000138F4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138FA 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000138FC 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013900 6E00                       		bgt.s	Obj01_JumpMove
00013902 3001                       		move.w	d1,d0
00013904 6000                       		bra.s	Obj01_JumpMove
00013906                            
00013906                            SonicCJD_JumpLeft:
00013906 08E8 0000 0022             		bset	#0,$22(a0)
0001390C 9045                       		sub.w	d5,d0
0001390E 3206                       		move.w	d6,d1
00013910 4441                       		neg.w	d1
00013912 B041                       		cmp.w	d1,d0
00013914                            		; bgt.s	loc_13278
00013914                            		; move.w	d1,d0
00013914 4E75                       		rts
00013916                            
00013916                            SonicCJD_JumpRight:
00013916 08A8 0000 0022             		bclr	#0,$22(a0)
0001391C D045                       		add.w	d5,d0
0001391E B046                       		cmp.w	d6,d0
00013920 6D00                       		blt.s	Obj01_JumpMove
00013922 3006                       		move.w	d6,d0
00013924                            
00013924                            Obj01_JumpMove:
00013924 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013928                            
00013928                            Obj01_ResetScr2:
00013928 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001392E 6700                       		beq.s	loc_132A4	; if yes, branch
00013930 6400                       		bcc.s	loc_132A0
00013932 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013936                            
00013936                            loc_132A0:
00013936 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001393A                            
0001393A                            loc_132A4:
0001393A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013940 6500                       		bcs.s	locret_132D2	; if yes, branch
00013942 3028 0010                  		move.w	$10(a0),d0
00013946 3200                       		move.w	d0,d1
00013948 EA41                       		asr.w	#5,d1
0001394A 6700                       		beq.s	locret_132D2
0001394C 6B00                       		bmi.s	loc_132C6
0001394E 9041                       		sub.w	d1,d0
00013950 6400                       		bcc.s	loc_132C0
00013952 303C 0000                  		move.w	#0,d0
00013956                            
00013956                            loc_132C0:
00013956 3140 0010                  		move.w	d0,$10(a0)
0001395A 4E75                       		rts	
0001395C                            ; ===========================================================================
0001395C                            
0001395C                            loc_132C6:
0001395C 9041                       		sub.w	d1,d0
0001395E 6500                       		bcs.s	loc_132CE
00013960 303C 0000                  		move.w	#0,d0
00013964                            
00013964                            loc_132CE:
00013964 3140 0010                  		move.w	d0,$10(a0)
00013968                            
00013968                            locret_132D2:
00013968 4E75                       		rts	
0001396A                            ; End of function Sonic_ChgJumpDir
0001396A                            
0001396A                            ; ===========================================================================
0001396A                            ; ---------------------------------------------------------------------------
0001396A                            ; Unused subroutine to squash Sonic
0001396A                            ; ---------------------------------------------------------------------------
0001396A 1028 0026                  		move.b	$26(a0),d0
0001396E 0600 0020                  		addi.b	#$20,d0
00013972 0200 00C0                  		andi.b	#$C0,d0
00013976 6600                       		bne.s	locret_13302
00013978 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001397C 4A41                       		tst.w	d1
0001397E 6A00                       		bpl.s	locret_13302
00013980 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013986 317C 0000 0010             		move.w	#0,$10(a0)
0001398C 317C 0000 0012             		move.w	#0,$12(a0)
00013992 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013998                            
00013998                            locret_13302:
00013998 4E75                       		rts	
0001399A                            ; ---------------------------------------------------------------------------
0001399A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001399A                            ; ---------------------------------------------------------------------------
0001399A                            
0001399A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001399A                            
0001399A                            
0001399A                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001399A 2228 0008                  		move.l	8(a0),d1
0001399E 3028 0010                  		move.w	$10(a0),d0
000139A2 48C0                       		ext.l	d0
000139A4 E180                       		asl.l	#8,d0
000139A6 D280                       		add.l	d0,d1
000139A8 4841                       		swap	d1
000139AA 3038 F728                  		move.w	($FFFFF728).w,d0
000139AE 0640 0010                  		addi.w	#$10,d0
000139B2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000139B4 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000139B6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000139BA 0640 0128                  		addi.w	#$128,d0
000139BE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000139C2 6600                       		bne.s	loc_13332
000139C4 0640 0040                  		addi.w	#$40,d0
000139C8                            
000139C8                            loc_13332:
000139C8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000139CA 6300                       		bls.s	Boundary_Sides	; if yes, branch
000139CC                            
000139CC                            loc_13336:
000139CC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000139D0 0640 00E0                  		addi.w	#$E0,d0
000139D4 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000139D8 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000139DA 4E75                       		rts	
000139DC                            ; ===========================================================================
000139DC                            
000139DC                            Boundary_Bottom:
000139DC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000139E2 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000139E6 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000139EC 6500 0000                  		bcs.w	KillSonic
000139F0 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000139F4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000139FA 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013A00 4E75                       		rts	
00013A02                            ; ===========================================================================
00013A02                            
00013A02                            Boundary_Sides:
00013A02 3140 0008                  		move.w	d0,8(a0)
00013A06 317C 0000 000A             		move.w	#0,$A(a0)
00013A0C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013A12 317C 0000 0014             		move.w	#0,$14(a0)
00013A18 60B2                       		bra.s	loc_13336
00013A1A                            ; End of function Sonic_LevelBound
00013A1A                            
00013A1A                            ; ---------------------------------------------------------------------------
00013A1A                            ; Subroutine allowing Sonic to roll when he's moving
00013A1A                            ; ---------------------------------------------------------------------------
00013A1A                            
00013A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A1A                            
00013A1A                            
00013A1A                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013A1A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A1E 6600                       		bne.s	Obj01_NoRoll
00013A20 3028 0014                  		move.w	$14(a0),d0
00013A24 6A00                       		bpl.s	loc_13392
00013A26 4440                       		neg.w	d0
00013A28                            
00013A28                            loc_13392:
00013A28 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013A2C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013A2E 1038 F602                  		move.b	($FFFFF602).w,d0
00013A32 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013A36 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013A38 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013A3E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013A40                            
00013A40                            Obj01_NoRoll:
00013A40 4E75                       		rts	
00013A42                            ; ===========================================================================
00013A42                            
00013A42                            Obj01_ChkRoll:
00013A42 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013A48 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013A4A 4E75                       		rts	
00013A4C                            ; ===========================================================================
00013A4C                            
00013A4C                            Obj01_DoRoll:
00013A4C 08E8 0002 0022             		bset	#2,$22(a0)
00013A52 117C 000E 0016             		move.b	#$E,$16(a0)
00013A58 117C 0007 0017             		move.b	#7,$17(a0)
00013A5E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A64 5A68 000C                  		addq.w	#5,$C(a0)
00013A68 303C 00BE                  		move.w	#$BE,d0
00013A6C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013A72 4A68 0014                  		tst.w	$14(a0)
00013A76 6600                       		bne.s	locret_133E8
00013A78 317C 0200 0014             		move.w	#$200,$14(a0)
00013A7E                            
00013A7E                            locret_133E8:
00013A7E 4E75                       		rts	
00013A80                            ; End of function Sonic_Roll
00013A80                            
00013A80                            ; ---------------------------------------------------------------------------
00013A80                            ; Subroutine allowing Sonic to jump
00013A80                            ; ---------------------------------------------------------------------------
00013A80                            
00013A80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A80                            
00013A80                            
00013A80                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013A80 1038 F603                  		move.b	($FFFFF603).w,d0
00013A84 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A88 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013A8C 7000                       		moveq	#0,d0
00013A8E 1028 0026                  		move.b	$26(a0),d0
00013A92 0600 0080                  		addi.b	#$80,d0
00013A96 6100 0000                  		bsr.w	sub_14D48
00013A9A 0C41 0006                  		cmpi.w	#6,d1
00013A9E 6D00 0000                  		blt.w	locret_1348E
00013AA2 343C 0680                  		move.w	#$680,d2
00013AA6 0828 0006 0022             		btst	#6,$22(a0)
00013AAC 6700                       		beq.s	loc_1341C
00013AAE 343C 0380                  		move.w	#$380,d2
00013AB2                            
00013AB2                            loc_1341C:
00013AB2 7000                       		moveq	#0,d0
00013AB4 1028 0026                  		move.b	$26(a0),d0
00013AB8 0400 0040                  		subi.b	#$40,d0
00013ABC 4EB9 0000 2C64             		jsr	(CalcSine).l
00013AC2 C3C2                       		muls.w	d2,d1
00013AC4 E081                       		asr.l	#8,d1
00013AC6 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013ACA C1C2                       		muls.w	d2,d0
00013ACC E080                       		asr.l	#8,d0
00013ACE D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013AD2 08E8 0001 0022             		bset	#1,$22(a0)
00013AD8 08A8 0005 0022             		bclr	#5,$22(a0)
00013ADE 588F                       		addq.l	#4,sp
00013AE0 117C 0001 003C             		move.b	#1,$3C(a0)
00013AE6 4228 0038                  		clr.b	$38(a0)
00013AEA 303C 00A0                  		move.w	#$A0,d0
00013AEE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013AF4 117C 0013 0016             		move.b	#$13,$16(a0)
00013AFA 117C 0009 0017             		move.b	#9,$17(a0)
00013B00 0828 0002 0022             		btst	#2,$22(a0)
00013B06 6600                       		bne.s	loc_13490
00013B08 117C 000E 0016             		move.b	#$E,$16(a0)
00013B0E 117C 0007 0017             		move.b	#7,$17(a0)
00013B14 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013B1A 08E8 0002 0022             		bset	#2,$22(a0)
00013B20 5A68 000C                  		addq.w	#5,$C(a0)
00013B24 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013B2A                            
00013B2A                            locret_1348E:
00013B2A 4E75                       		rts	
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            loc_13490:
00013B2C 08E8 0004 0022             		bset	#4,$22(a0)
00013B32 4E75                       		rts	
00013B34                            ; End of function Sonic_Jump
00013B34                            
00013B34                            
00013B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B34                            
00013B34                            
00013B34                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B34 4A28 003C                  		tst.b	$3C(a0)
00013B38 6700                       		beq.s	loc_134C4
00013B3A 323C FC00                  		move.w	#-$400,d1
00013B3E 0828 0006 0022             		btst	#6,$22(a0)
00013B44 6700                       		beq.s	loc_134AE
00013B46 323C FE00                  		move.w	#-$200,d1
00013B4A                            
00013B4A                            loc_134AE:
00013B4A B268 0012                  		cmp.w	$12(a0),d1
00013B4E 6F00                       		ble.s	locret_134C2
00013B50 1038 F602                  		move.b	($FFFFF602).w,d0
00013B54 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013B58 6600                       		bne.s	locret_134C2	; if yes, branch
00013B5A 3141 0012                  		move.w	d1,$12(a0)
00013B5E                            
00013B5E                            locret_134C2:
00013B5E 4E75                       		rts	
00013B60                            ; ===========================================================================
00013B60                            
00013B60                            loc_134C4:
00013B60 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013B66 6C00                       		bge.s	locret_134D2
00013B68 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013B6E                            
00013B6E                            locret_134D2:
00013B6E 4E75                       		rts	
00013B70                            ; End of function Sonic_JumpHeight
00013B70                            
00013B70                            ; ---------------------------------------------------------------------------
00013B70                            ; Subroutine to	slow Sonic walking up a	slope
00013B70                            ; ---------------------------------------------------------------------------
00013B70                            
00013B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B70                            
00013B70                            
00013B70                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013B70 1028 0026                  		move.b	$26(a0),d0
00013B74 0600 0060                  		addi.b	#$60,d0
00013B78 0C00 00C0                  		cmpi.b	#$C0,d0
00013B7C 6400                       		bcc.s	locret_13508
00013B7E 1028 0026                  		move.b	$26(a0),d0
00013B82 4EB9 0000 2C64             		jsr	(CalcSine).l
00013B88 C1FC 0020                  		muls.w	#$20,d0
00013B8C E080                       		asr.l	#8,d0
00013B8E 4A68 0014                  		tst.w	$14(a0)
00013B92 6700                       		beq.s	locret_13508
00013B94 6B00                       		bmi.s	loc_13504
00013B96 4A40                       		tst.w	d0
00013B98 6700                       		beq.s	locret_13502
00013B9A D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013B9E                            
00013B9E                            locret_13502:
00013B9E 4E75                       		rts	
00013BA0                            ; ===========================================================================
00013BA0                            
00013BA0                            loc_13504:
00013BA0 D168 0014                  		add.w	d0,$14(a0)
00013BA4                            
00013BA4                            locret_13508:
00013BA4 4E75                       		rts	
00013BA6                            ; End of function Sonic_SlopeResist
00013BA6                            
00013BA6                            ; ---------------------------------------------------------------------------
00013BA6                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013BA6                            ; ---------------------------------------------------------------------------
00013BA6                            
00013BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BA6                            
00013BA6                            
00013BA6                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013BA6 1028 0026                  		move.b	$26(a0),d0
00013BAA 0600 0060                  		addi.b	#$60,d0
00013BAE 0C00 00C0                  		cmpi.b	#-$40,d0
00013BB2 6400                       		bcc.s	locret_13544
00013BB4 1028 0026                  		move.b	$26(a0),d0
00013BB8 4EB9 0000 2C64             		jsr	(CalcSine).l
00013BBE C1FC 0050                  		muls.w	#$50,d0
00013BC2 E080                       		asr.l	#8,d0
00013BC4 4A68 0014                  		tst.w	$14(a0)
00013BC8 6B00                       		bmi.s	loc_1353A
00013BCA 4A40                       		tst.w	d0
00013BCC 6A00                       		bpl.s	loc_13534
00013BCE E480                       		asr.l	#2,d0
00013BD0                            
00013BD0                            loc_13534:
00013BD0 D168 0014                  		add.w	d0,$14(a0)
00013BD4 4E75                       		rts	
00013BD6                            ; ===========================================================================
00013BD6                            
00013BD6                            loc_1353A:
00013BD6 4A40                       		tst.w	d0
00013BD8 6B00                       		bmi.s	loc_13540
00013BDA E480                       		asr.l	#2,d0
00013BDC                            
00013BDC                            loc_13540:
00013BDC D168 0014                  		add.w	d0,$14(a0)
00013BE0                            
00013BE0                            locret_13544:
00013BE0 4E75                       		rts	
00013BE2                            ; End of function Sonic_RollRepel
00013BE2                            
00013BE2                            ; ---------------------------------------------------------------------------
00013BE2                            ; Subroutine to	push Sonic down	a slope
00013BE2                            ; ---------------------------------------------------------------------------
00013BE2                            
00013BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BE2                            
00013BE2                            
00013BE2                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BE2 4E71                       		nop	
00013BE4 4A28 0038                  		tst.b	$38(a0)
00013BE8 6600                       		bne.s	locret_13580
00013BEA 4A68 003E                  		tst.w	$3E(a0)
00013BEE 6600                       		bne.s	loc_13582
00013BF0 1028 0026                  		move.b	$26(a0),d0
00013BF4 0600 0020                  		addi.b	#$20,d0
00013BF8 0200 00C0                  		andi.b	#$C0,d0
00013BFC 6700                       		beq.s	locret_13580
00013BFE 3028 0014                  		move.w	$14(a0),d0
00013C02 6A00                       		bpl.s	loc_1356A
00013C04 4440                       		neg.w	d0
00013C06                            
00013C06                            loc_1356A:
00013C06 0C40 0280                  		cmpi.w	#$280,d0
00013C0A 6400                       		bcc.s	locret_13580
00013C0C 4268 0014                  		clr.w	$14(a0)
00013C10 08E8 0001 0022             		bset	#1,$22(a0)
00013C16 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013C1C                            
00013C1C                            locret_13580:
00013C1C 4E75                       		rts	
00013C1E                            ; ===========================================================================
00013C1E                            
00013C1E                            loc_13582:
00013C1E 5368 003E                  		subq.w	#1,$3E(a0)
00013C22 4E75                       		rts	
00013C24                            ; End of function Sonic_SlopeRepel
00013C24                            
00013C24                            ; ---------------------------------------------------------------------------
00013C24                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013C24                            ; ---------------------------------------------------------------------------
00013C24                            
00013C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C24                            
00013C24                            
00013C24                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C24 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013C28 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013C2A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013C2C                            
00013C2C 5400                       		addq.b	#2,d0		; increase angle
00013C2E 6400                       		bcc.s	loc_13596
00013C30 7000                       		moveq	#0,d0
00013C32                            
00013C32                            loc_13596:
00013C32 6000                       		bra.s	loc_1359E
00013C34                            ; ===========================================================================
00013C34                            
00013C34                            loc_13598:
00013C34 5500                       		subq.b	#2,d0		; decrease angle
00013C36 6400                       		bcc.s	loc_1359E
00013C38 7000                       		moveq	#0,d0
00013C3A                            
00013C3A                            loc_1359E:
00013C3A 1140 0026                  		move.b	d0,$26(a0)
00013C3E                            
00013C3E                            locret_135A2:
00013C3E 4E75                       		rts	
00013C40                            ; End of function Sonic_JumpAngle
00013C40                            
00013C40                            ; ---------------------------------------------------------------------------
00013C40                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013C40                            ; ---------------------------------------------------------------------------
00013C40                            
00013C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C40                            
00013C40                            
00013C40                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013C40 3228 0010                  		move.w	$10(a0),d1
00013C44 3428 0012                  		move.w	$12(a0),d2
00013C48 4EB9 0000 2F32             		jsr	(CalcAngle).l
00013C4E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013C52 0400 0020                  		subi.b	#$20,d0
00013C56 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013C5A 0200 00C0                  		andi.b	#$C0,d0
00013C5E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013C62 0C00 0040                  		cmpi.b	#$40,d0
00013C66 6700 0000                  		beq.w	loc_13680
00013C6A 0C00 0080                  		cmpi.b	#$80,d0
00013C6E 6700 0000                  		beq.w	loc_136E2
00013C72 0C00 00C0                  		cmpi.b	#-$40,d0
00013C76 6700 0000                  		beq.w	loc_1373E
00013C7A 6100 0000                  		bsr.w	Sonic_HitWall
00013C7E 4A41                       		tst.w	d1
00013C80 6A00                       		bpl.s	loc_135F0
00013C82 9368 0008                  		sub.w	d1,8(a0)
00013C86 317C 0000 0010             		move.w	#0,$10(a0)
00013C8C                            
00013C8C                            loc_135F0:
00013C8C 6100 0000                  		bsr.w	sub_14EB4
00013C90 4A41                       		tst.w	d1
00013C92 6A00                       		bpl.s	loc_13602
00013C94 D368 0008                  		add.w	d1,8(a0)
00013C98 317C 0000 0010             		move.w	#0,$10(a0)
00013C9E                            
00013C9E                            loc_13602:
00013C9E 6100 0000                  		bsr.w	Sonic_HitFloor
00013CA2 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013CA6 4A41                       		tst.w	d1
00013CA8 6A00                       		bpl.s	locret_1367E
00013CAA 1428 0012                  		move.b	$12(a0),d2
00013CAE 5002                       		addq.b	#8,d2
00013CB0 4402                       		neg.b	d2
00013CB2 B202                       		cmp.b	d2,d1
00013CB4 6C00                       		bge.s	loc_1361E
00013CB6 B002                       		cmp.b	d2,d0
00013CB8 6D00                       		blt.s	locret_1367E
00013CBA                            
00013CBA                            loc_1361E:
00013CBA D368 000C                  		add.w	d1,$C(a0)
00013CBE 1143 0026                  		move.b	d3,$26(a0)
00013CC2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CC6 117C 0000 001C             		move.b	#0,$1C(a0)
00013CCC 1003                       		move.b	d3,d0
00013CCE 0600 0020                  		addi.b	#$20,d0
00013CD2 0200 0040                  		andi.b	#$40,d0
00013CD6 6600                       		bne.s	loc_1365C
00013CD8 1003                       		move.b	d3,d0
00013CDA 0600 0010                  		addi.b	#$10,d0
00013CDE 0200 0020                  		andi.b	#$20,d0
00013CE2 6700                       		beq.s	loc_1364E
00013CE4 E0E8 0012                  		asr	$12(a0)
00013CE8 6000                       		bra.s	loc_13670
00013CEA                            ; ===========================================================================
00013CEA                            
00013CEA                            loc_1364E:
00013CEA 317C 0000 0012             		move.w	#0,$12(a0)
00013CF0 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CF6 4E75                       		rts	
00013CF8                            ; ===========================================================================
00013CF8                            
00013CF8                            loc_1365C:
00013CF8 317C 0000 0010             		move.w	#0,$10(a0)
00013CFE 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013D04 6F00                       		ble.s	loc_13670
00013D06 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013D0C                            
00013D0C                            loc_13670:
00013D0C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D12 4A03                       		tst.b	d3
00013D14 6A00                       		bpl.s	locret_1367E
00013D16 4468 0014                  		neg.w	$14(a0)
00013D1A                            
00013D1A                            locret_1367E:
00013D1A 4E75                       		rts	
00013D1C                            ; ===========================================================================
00013D1C                            
00013D1C                            loc_13680:
00013D1C 6100 0000                  		bsr.w	Sonic_HitWall
00013D20 4A41                       		tst.w	d1
00013D22 6A00                       		bpl.s	loc_1369A
00013D24 9368 0008                  		sub.w	d1,8(a0)
00013D28 317C 0000 0010             		move.w	#0,$10(a0)
00013D2E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D34 4E75                       		rts	
00013D36                            ; ===========================================================================
00013D36                            
00013D36                            loc_1369A:
00013D36 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D3A 4A41                       		tst.w	d1
00013D3C 6A00                       		bpl.s	loc_136B4
00013D3E 9368 000C                  		sub.w	d1,$C(a0)
00013D42 4A68 0012                  		tst.w	$12(a0)
00013D46 6A00                       		bpl.s	locret_136B2
00013D48 317C 0000 0012             		move.w	#0,$12(a0)
00013D4E                            
00013D4E                            locret_136B2:
00013D4E 4E75                       		rts	
00013D50                            ; ===========================================================================
00013D50                            
00013D50                            loc_136B4:
00013D50 4A68 0012                  		tst.w	$12(a0)
00013D54 6B00                       		bmi.s	locret_136E0
00013D56 6100 0000                  		bsr.w	Sonic_HitFloor
00013D5A 4A41                       		tst.w	d1
00013D5C 6A00                       		bpl.s	locret_136E0
00013D5E D368 000C                  		add.w	d1,$C(a0)
00013D62 1143 0026                  		move.b	d3,$26(a0)
00013D66 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D6A 117C 0000 001C             		move.b	#0,$1C(a0)
00013D70 317C 0000 0012             		move.w	#0,$12(a0)
00013D76 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D7C                            
00013D7C                            locret_136E0:
00013D7C 4E75                       		rts	
00013D7E                            ; ===========================================================================
00013D7E                            
00013D7E                            loc_136E2:
00013D7E 6100 0000                  		bsr.w	Sonic_HitWall
00013D82 4A41                       		tst.w	d1
00013D84 6A00                       		bpl.s	loc_136F4
00013D86 9368 0008                  		sub.w	d1,8(a0)
00013D8A 317C 0000 0010             		move.w	#0,$10(a0)
00013D90                            
00013D90                            loc_136F4:
00013D90 6100 0000                  		bsr.w	sub_14EB4
00013D94 4A41                       		tst.w	d1
00013D96 6A00                       		bpl.s	loc_13706
00013D98 D368 0008                  		add.w	d1,8(a0)
00013D9C 317C 0000 0010             		move.w	#0,$10(a0)
00013DA2                            
00013DA2                            loc_13706:
00013DA2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DA6 4A41                       		tst.w	d1
00013DA8 6A00                       		bpl.s	locret_1373C
00013DAA 9368 000C                  		sub.w	d1,$C(a0)
00013DAE 1003                       		move.b	d3,d0
00013DB0 0600 0020                  		addi.b	#$20,d0
00013DB4 0200 0040                  		andi.b	#$40,d0
00013DB8 6600                       		bne.s	loc_13726
00013DBA 317C 0000 0012             		move.w	#0,$12(a0)
00013DC0 4E75                       		rts	
00013DC2                            ; ===========================================================================
00013DC2                            
00013DC2                            loc_13726:
00013DC2 1143 0026                  		move.b	d3,$26(a0)
00013DC6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DCA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DD0 4A03                       		tst.b	d3
00013DD2 6A00                       		bpl.s	locret_1373C
00013DD4 4468 0014                  		neg.w	$14(a0)
00013DD8                            
00013DD8                            locret_1373C:
00013DD8 4E75                       		rts	
00013DDA                            ; ===========================================================================
00013DDA                            
00013DDA                            loc_1373E:
00013DDA 6100 0000                  		bsr.w	sub_14EB4
00013DDE 4A41                       		tst.w	d1
00013DE0 6A00                       		bpl.s	loc_13758
00013DE2 D368 0008                  		add.w	d1,8(a0)
00013DE6 317C 0000 0010             		move.w	#0,$10(a0)
00013DEC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DF2 4E75                       		rts	
00013DF4                            ; ===========================================================================
00013DF4                            
00013DF4                            loc_13758:
00013DF4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DF8 4A41                       		tst.w	d1
00013DFA 6A00                       		bpl.s	loc_13772
00013DFC 9368 000C                  		sub.w	d1,$C(a0)
00013E00 4A68 0012                  		tst.w	$12(a0)
00013E04 6A00                       		bpl.s	locret_13770
00013E06 317C 0000 0012             		move.w	#0,$12(a0)
00013E0C                            
00013E0C                            locret_13770:
00013E0C 4E75                       		rts	
00013E0E                            ; ===========================================================================
00013E0E                            
00013E0E                            loc_13772:
00013E0E 4A68 0012                  		tst.w	$12(a0)
00013E12 6B00                       		bmi.s	locret_1379E
00013E14 6100 0000                  		bsr.w	Sonic_HitFloor
00013E18 4A41                       		tst.w	d1
00013E1A 6A00                       		bpl.s	locret_1379E
00013E1C D368 000C                  		add.w	d1,$C(a0)
00013E20 1143 0026                  		move.b	d3,$26(a0)
00013E24 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E28 117C 0000 001C             		move.b	#0,$1C(a0)
00013E2E 317C 0000 0012             		move.w	#0,$12(a0)
00013E34 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E3A                            
00013E3A                            locret_1379E:
00013E3A 4E75                       		rts	
00013E3C                            ; End of function Sonic_Floor
00013E3C                            
00013E3C                            ; ---------------------------------------------------------------------------
00013E3C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013E3C                            ; ---------------------------------------------------------------------------
00013E3C                            
00013E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E3C                            
00013E3C                            
00013E3C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013E3C 0828 0004 0022             		btst	#4,$22(a0)
00013E42 6700                       		beq.s	loc_137AE
00013E44 4E71                       		nop	
00013E46 4E71                       		nop	
00013E48 4E71                       		nop	
00013E4A                            
00013E4A                            loc_137AE:
00013E4A 08A8 0005 0022             		bclr	#5,$22(a0)
00013E50 08A8 0001 0022             		bclr	#1,$22(a0)
00013E56 08A8 0004 0022             		bclr	#4,$22(a0)
00013E5C 0828 0002 0022             		btst	#2,$22(a0)
00013E62 6700                       		beq.s	loc_137E4
00013E64 08A8 0002 0022             		bclr	#2,$22(a0)
00013E6A 117C 0013 0016             		move.b	#$13,$16(a0)
00013E70 117C 0009 0017             		move.b	#9,$17(a0)
00013E76 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013E7C 5B68 000C                  		subq.w	#5,$C(a0)
00013E80                            
00013E80                            loc_137E4:
00013E80 117C 0000 003C             		move.b	#0,$3C(a0)
00013E86 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013E8C 4E75                       		rts	
00013E8E                            ; End of function Sonic_ResetOnFloor
00013E8E                            
00013E8E                            ; ===========================================================================
00013E8E                            ; ---------------------------------------------------------------------------
00013E8E                            ; Sonic	when he	gets hurt
00013E8E                            ; ---------------------------------------------------------------------------
00013E8E                            
00013E8E                            Obj01_Hurt:				; XREF: Obj01_Index
00013E8E 4EBA 9D48                  		jsr	SpeedToPos
00013E92 0668 0030 0012             		addi.w	#$30,$12(a0)
00013E98 0828 0006 0022             		btst	#6,$22(a0)
00013E9E 6700                       		beq.s	loc_1380C
00013EA0 0468 0020 0012             		subi.w	#$20,$12(a0)
00013EA6                            
00013EA6                            loc_1380C:
00013EA6 6100 0000                  		bsr.w	Sonic_HurtStop
00013EAA 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013EAE 6100 F4B4                  		bsr.w	Sonic_RecordPos
00013EB2 6100 0000                  		bsr.w	Sonic_Animate
00013EB6 6100 0000                  		bsr.w	LoadSonicDynPLC
00013EBA 4EFA 9D42                  		jmp	DisplaySprite
00013EBE                            
00013EBE                            ; ---------------------------------------------------------------------------
00013EBE                            ; Subroutine to	stop Sonic falling after he's been hurt
00013EBE                            ; ---------------------------------------------------------------------------
00013EBE                            
00013EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBE                            
00013EBE                            
00013EBE                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013EBE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013EC2 0640 00E0                  		addi.w	#$E0,d0
00013EC6 B068 000C                  		cmp.w	$C(a0),d0
00013ECA 6500 0000                  		bcs.w	KillSonic
00013ECE 6100 FD70                  		bsr.w	Sonic_Floor
00013ED2 0828 0001 0022             		btst	#1,$22(a0)
00013ED8 6600                       		bne.s	locret_13860
00013EDA 7000                       		moveq	#0,d0
00013EDC 3140 0012                  		move.w	d0,$12(a0)
00013EE0 3140 0010                  		move.w	d0,$10(a0)
00013EE4 3140 0014                  		move.w	d0,$14(a0)
00013EE8 117C 0000 001C             		move.b	#0,$1C(a0)
00013EEE 5528 0024                  		subq.b	#2,$24(a0)
00013EF2 317C 0078 0030             		move.w	#$78,$30(a0)
00013EF8                            
00013EF8                            locret_13860:
00013EF8 4E75                       		rts	
00013EFA                            ; End of function Sonic_HurtStop
00013EFA                            
00013EFA                            ; ===========================================================================
00013EFA                            ; ---------------------------------------------------------------------------
00013EFA                            ; Sonic	when he	dies
00013EFA                            ; ---------------------------------------------------------------------------
00013EFA                            
00013EFA                            Obj01_Death:				; XREF: Obj01_Index
00013EFA 6100 0000                  		bsr.w	GameOver
00013EFE 4EBA 9CAC                  		jsr	ObjectFall
00013F02 6100 F460                  		bsr.w	Sonic_RecordPos
00013F06 6100 0000                  		bsr.w	Sonic_Animate
00013F0A 6100 0000                  		bsr.w	LoadSonicDynPLC
00013F0E 4EFA 9CEE                  		jmp	DisplaySprite
00013F12                            
00013F12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F12                            
00013F12                            
00013F12                            GameOver:				; XREF: Obj01_Death
00013F12 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F16 0640 0100                  		addi.w	#$100,d0
00013F1A B068 000C                  		cmp.w	$C(a0),d0
00013F1E 6400 0000                  		bcc.w	locret_13900
00013F22 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013F28 5428 0024                  		addq.b	#2,$24(a0)
00013F2C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013F30 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013F34 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013F38 6600                       		bne.s	loc_138D4
00013F3A 317C 0000 003A             		move.w	#0,$3A(a0)
00013F40 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013F46 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F4C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013F52 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013F56                            
00013F56                            loc_138C2:
00013F56 303C 008F                  		move.w	#$8F,d0
00013F5A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
00013F60 7003                       		moveq	#3,d0
00013F62 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
00013F68                            ; ===========================================================================
00013F68                            
00013F68                            loc_138D4:
00013F68 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013F6E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013F72 6700                       		beq.s	locret_13900	; if not, branch
00013F74 317C 0000 003A             		move.w	#0,$3A(a0)
00013F7A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013F80 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F86 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013F8C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013F92 60C2                       		bra.s	loc_138C2
00013F94                            ; ===========================================================================
00013F94                            
00013F94                            locret_13900:
00013F94 4E75                       		rts	
00013F96                            ; End of function GameOver
00013F96                            
00013F96                            ; ===========================================================================
00013F96                            ; ---------------------------------------------------------------------------
00013F96                            ; Sonic	when the level is restarted
00013F96                            ; ---------------------------------------------------------------------------
00013F96                            
00013F96                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013F96 4A68 003A                  		tst.w	$3A(a0)
00013F9A 6700                       		beq.s	locret_13914
00013F9C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013FA0 6600                       		bne.s	locret_13914
00013FA2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013FA8                            
00013FA8                            locret_13914:
00013FA8 4E75                       		rts	
00013FAA                            
00013FAA                            ; ---------------------------------------------------------------------------
00013FAA                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013FAA                            ; ---------------------------------------------------------------------------
00013FAA                            
00013FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FAA                            
00013FAA                            
00013FAA                            Sonic_Loops:				; XREF: Obj01_Control
00013FAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013FB0 6700                       		beq.s	loc_13926	; if yes, branch
00013FB2 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013FB6 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013FBA                            
00013FBA                            loc_13926:
00013FBA 3028 000C                  		move.w	$C(a0),d0
00013FBE E248                       		lsr.w	#1,d0
00013FC0 0240 0380                  		andi.w	#$380,d0
00013FC4 1228 0008                  		move.b	8(a0),d1
00013FC8 0241 007F                  		andi.w	#$7F,d1
00013FCC D041                       		add.w	d1,d0
00013FCE 43F8 A400                  		lea	($FFFFA400).w,a1
00013FD2 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013FD6 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013FDA 6700 FA66                  		beq.w	Obj01_ChkRoll
00013FDE B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013FE2 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013FE6 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013FEA 6700                       		beq.s	loc_13976
00013FEC B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013FF0 6700                       		beq.s	loc_13966
00013FF2 08A8 0006 0001             		bclr	#6,1(a0)
00013FF8 4E75                       		rts	
00013FFA                            ; ===========================================================================
00013FFA                            
00013FFA                            loc_13966:
00013FFA 0828 0001 0022             		btst	#1,$22(a0)
00014000 6700                       		beq.s	loc_13976
00014002 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014008 4E75                       		rts	
0001400A                            ; ===========================================================================
0001400A                            
0001400A                            loc_13976:
0001400A 3428 0008                  		move.w	8(a0),d2
0001400E 0C02 002C                  		cmpi.b	#$2C,d2
00014012 6400                       		bcc.s	loc_13988
00014014 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001401A 4E75                       		rts	
0001401C                            ; ===========================================================================
0001401C                            
0001401C                            loc_13988:
0001401C 0C02 00E0                  		cmpi.b	#-$20,d2
00014020 6500                       		bcs.s	loc_13996
00014022 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014028 4E75                       		rts	
0001402A                            ; ===========================================================================
0001402A                            
0001402A                            loc_13996:
0001402A 0828 0006 0001             		btst	#6,1(a0)
00014030 6600                       		bne.s	loc_139B2
00014032 1228 0026                  		move.b	$26(a0),d1
00014036 6700                       		beq.s	locret_139C2
00014038 0C01 0080                  		cmpi.b	#-$80,d1
0001403C 6200                       		bhi.s	locret_139C2
0001403E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014044 4E75                       		rts	
00014046                            ; ===========================================================================
00014046                            
00014046                            loc_139B2:
00014046 1228 0026                  		move.b	$26(a0),d1
0001404A 0C01 0080                  		cmpi.b	#-$80,d1
0001404E 6300                       		bls.s	locret_139C2
00014050 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014056                            
00014056                            locret_139C2:
00014056 4E75                       		rts	
00014058                            ; End of function Sonic_Loops
00014058                            
00014058                            ; ---------------------------------------------------------------------------
00014058                            ; Subroutine to	animate	Sonic's sprites
00014058                            ; ---------------------------------------------------------------------------
00014058                            
00014058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014058                            
00014058                            Player_Anim:
00014058 0000 0000                  	dc.l	SonicAniData
0001405C 0000 0000                  	dc.l	SonicAniData ; gronic
00014060                            	; Insert more animation data for other characters here
00014060                            	
00014060                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014060 7000                       			moveq	#0,d0
00014062 1038 FFE8                  		move.b	(v_character),d0
00014066 E548                       		lsl.w	#2,d0
00014068 43FA FFEE                  		lea 	Player_Anim(pc),a1
0001406C                            		
0001406C 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014070                            	
00014070 7000                       		moveq	#0,d0
00014072 1028 001C                  		move.b	$1C(a0),d0
00014076 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001407A 6700                       		beq.s	SAnim_Do	; if not, branch
0001407C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014080 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014086 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001408C                            
0001408C                            SAnim_Do:
0001408C D040                       		add.w	d0,d0
0001408E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014092 1011                       		move.b	(a1),d0
00014094 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014096 1228 0022                  		move.b	$22(a0),d1
0001409A 0201 0001                  		andi.b	#1,d1
0001409E 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140A4 8328 0001                  		or.b	d1,1(a0)
000140A8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000140AC 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000140AE 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000140B2                            
000140B2                            SAnim_Do2:
000140B2 7200                       		moveq	#0,d1
000140B4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000140B8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000140BC 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000140BE                            
000140BE                            SAnim_Next:
000140BE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000140C2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000140C6                            
000140C6                            SAnim_Delay:
000140C6 4E75                       		rts	
000140C8                            ; ===========================================================================
000140C8                            
000140C8                            SAnim_End_FF:
000140C8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000140CA 6600                       		bne.s	SAnim_End_FE	; if not, branch
000140CC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000140D2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000140D6 60E6                       		bra.s	SAnim_Next
000140D8                            ; ===========================================================================
000140D8                            
000140D8                            SAnim_End_FE:
000140D8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000140DA 6600                       		bne.s	SAnim_End_FD	; if not, branch
000140DC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000140E0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000140E4 9200                       		sub.b	d0,d1
000140E6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000140EA 60D2                       		bra.s	SAnim_Next
000140EC                            ; ===========================================================================
000140EC                            
000140EC                            SAnim_End_FD:
000140EC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000140EE 6600                       		bne.s	SAnim_End	; if not, branch
000140F0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000140F6                            
000140F6                            SAnim_End:
000140F6 4E75                       		rts	
000140F8                            ; ===========================================================================
000140F8                            
000140F8                            SAnim_WalkRun:				; XREF: SAnim_Do
000140F8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000140FC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000140FE 5200                       		addq.b	#1,d0		; is animation walking/running?
00014100 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014104 7200                       		moveq	#0,d1
00014106 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001410A 1428 0022                  		move.b	$22(a0),d2
0001410E 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014112 6600                       		bne.s	loc_13A70	; if yes, branch
00014114 4600                       		not.b	d0		; reverse angle
00014116                            
00014116                            loc_13A70:
00014116 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001411A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001411C 7203                       		moveq	#3,d1
0001411E                            
0001411E                            loc_13A78:
0001411E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014124 B302                       		eor.b	d1,d2
00014126 8528 0001                  		or.b	d2,1(a0)
0001412A 0828 0005 0022             		btst	#5,$22(a0)
00014130 6600 0000                  		bne.w	SAnim_Push
00014134 E808                       		lsr.b	#4,d0		; divide angle by $10
00014136 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001413A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001413E 6A00                       		bpl.s	loc_13A9C
00014140 4442                       		neg.w	d2
00014142                            
00014142                            loc_13A9C:
00014142 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014148 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001414C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001414E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014154 1200                       		move.b	d0,d1
00014156 E209                       		lsr.b	#1,d1
00014158 D001                       		add.b	d1,d0
0001415A                            
0001415A                            loc_13AB4:
0001415A D000                       		add.b	d0,d0
0001415C 1600                       		move.b	d0,d3
0001415E 4442                       		neg.w	d2
00014160 0642 0800                  		addi.w	#$800,d2
00014164 6A00                       		bpl.s	loc_13AC2
00014166 7400                       		moveq	#0,d2
00014168                            
00014168                            loc_13AC2:
00014168 E04A                       		lsr.w	#8,d2
0001416A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001416E 6100 FF42                  		bsr.w	SAnim_Do2
00014172 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014176 4E75                       		rts	
00014178                            ; ===========================================================================
00014178                            
00014178                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014178 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001417A 6600                       		bne.s	SAnim_Push	; if not, branch
0001417C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014180 6A00                       		bpl.s	loc_13ADE
00014182 4442                       		neg.w	d2
00014184                            
00014184                            loc_13ADE:
00014184 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001418A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001418E 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014190 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014196                            
00014196                            loc_13AF0:
00014196 4442                       		neg.w	d2
00014198 0642 0400                  		addi.w	#$400,d2
0001419C 6A00                       		bpl.s	loc_13AFA
0001419E 7400                       		moveq	#0,d2
000141A0                            
000141A0                            loc_13AFA:
000141A0 E04A                       		lsr.w	#8,d2
000141A2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000141A6 1228 0022                  		move.b	$22(a0),d1
000141AA 0201 0001                  		andi.b	#1,d1
000141AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141B4 8328 0001                  		or.b	d1,1(a0)
000141B8 6000 FEF8                  		bra.w	SAnim_Do2
000141BC                            ; ===========================================================================
000141BC                            
000141BC                            SAnim_Push:				; XREF: SAnim_RollJump
000141BC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000141C0 6B00                       		bmi.s	loc_13B1E
000141C2 4442                       		neg.w	d2
000141C4                            
000141C4                            loc_13B1E:
000141C4 0642 0800                  		addi.w	#$800,d2
000141C8 6A00                       		bpl.s	loc_13B26
000141CA 7400                       		moveq	#0,d2
000141CC                            
000141CC                            loc_13B26:
000141CC EC4A                       		lsr.w	#6,d2
000141CE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000141D2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000141D8 1228 0022                  		move.b	$22(a0),d1
000141DC 0201 0001                  		andi.b	#1,d1
000141E0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141E6 8328 0001                  		or.b	d1,1(a0)
000141EA 6000 FEC6                  		bra.w	SAnim_Do2
000141EE                            ; End of function Sonic_Animate
000141EE                            
000141EE                            ; ===========================================================================
000141EE                            SonicAniData:
000141EE                            	include "_anim\Sonic.asm"
000141EE                            ; ---------------------------------------------------------------------------
000141EE                            ; Animation script - Sonic
000141EE                            ; ---------------------------------------------------------------------------
000141EE 0000                       		dc.w SonAni_Walk-SonicAniData
000141F0 0000                       		dc.w SonAni_Run-SonicAniData
000141F2 0000                       		dc.w SonAni_Roll-SonicAniData
000141F4 0000                       		dc.w SonAni_Roll2-SonicAniData
000141F6 0000                       		dc.w SonAni_Push-SonicAniData
000141F8 0000                       		dc.w SonAni_Wait-SonicAniData
000141FA 0000                       		dc.w SonAni_Balance-SonicAniData
000141FC 0000                       		dc.w SonAni_LookUp-SonicAniData
000141FE 0000                       		dc.w SonAni_Duck-SonicAniData
00014200 0000                       		dc.w SonAni_Warp1-SonicAniData
00014202 0000                       		dc.w SonAni_Warp2-SonicAniData
00014204 0000                       		dc.w SonAni_Warp3-SonicAniData
00014206 0000                       		dc.w SonAni_Warp4-SonicAniData
00014208 0000                       		dc.w SonAni_Stop-SonicAniData
0001420A 0000                       		dc.w SonAni_Float1-SonicAniData
0001420C 0000                       		dc.w SonAni_Float2-SonicAniData
0001420E 0000                       		dc.w SonAni_Spring-SonicAniData
00014210 0000                       		dc.w SonAni_LZHang-SonicAniData
00014212 0000                       		dc.w SonAni_Leap1-SonicAniData
00014214 0000                       		dc.w SonAni_Leap2-SonicAniData
00014216 0000                       		dc.w SonAni_Surf-SonicAniData
00014218 0000                       		dc.w SonAni_Bubble-SonicAniData
0001421A 0000                       		dc.w SonAni_Death1-SonicAniData
0001421C 0000                       		dc.w SonAni_Drown-SonicAniData
0001421E 0000                       		dc.w SonAni_Death2-SonicAniData
00014220 0000                       		dc.w SonAni_Shrink-SonicAniData
00014222 0000                       		dc.w SonAni_Hurt-SonicAniData
00014224 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014226 0000                       		dc.w SonAni_Blank-SonicAniData
00014228 0000                       		dc.w SonAni_Float3-SonicAniData
0001422A 0000                       		dc.w SonAni_Float4-SonicAniData
0001422C FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014236 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001423E FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014246 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001424E FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014256 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001426C 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014270 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014274 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014278 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001427C 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014280 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014284 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014288 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001428C 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014290 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014298 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001429C 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000142A0 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000142A6 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000142AC 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000142B0 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000142B8 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000142BC 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000142C0 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000142C4 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000142CE 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000142D2 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000142D6 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000142DA 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000142E2 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000142E6                            		even
000142E6                            		even
000142E6                            
000142E6                            ; ---------------------------------------------------------------------------
000142E6                            ; Sonic	pattern	loading	subroutine
000142E6                            ; ---------------------------------------------------------------------------
000142E6                            
000142E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142E6                            Player_DPLC:
000142E6 0000 0000                  	dc.l	SonicDynPLC
000142EA 0000 0000                  	dc.l	SonicDynPLC ; gronic
000142EE                            	; add pointers for player dplc here
000142EE                            Player_Art:
000142EE 0000 0000                  	dc.l	Art_Sonic
000142F2 0000 0000                  	dc.l	Art_Sonic ; gronic
000142F6                            	; add pointers for player art here
000142F6                            
000142F6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000142F6 7000                       		moveq	#0,d0
000142F8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000142FC B038 F766                  		cmp.b	($FFFFF766).w,d0
00014300 6700                       		beq.s	locret_13C96
00014302 11C0 F766                  		move.b	d0,($FFFFF766).w
00014306                            		
00014306 323C 0000                  		move.w	#0,d1
0001430A 1238 FFE8                  		move.b	(v_character),d1
0001430E E549                       		lsl.w	#2,d1
00014310 45FA FFD4                  		lea 	Player_DPLC(pc),a2
00014314                            
00014314 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014318                            		
00014318 D040                       		add.w	d0,d0
0001431A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001431E 7200                       		moveq	#0,d1
00014320 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014322 5301                       		subq.b	#1,d1
00014324 6B00                       		bmi.s	locret_13C96
00014326 47F8 C800                  		lea	($FFFFC800).w,a3
0001432A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014330                            
00014330                            SPLC_ReadEntry:
00014330 303C 0000                  		move.w	#0,d0
00014334 1038 FFE8                  		move.b	(v_character),d0
00014338 E548                       		lsl.w	#2,d0
0001433A 43FA FFB2                  		lea 	Player_Art(pc),a1
0001433E                            
0001433E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014342                            
00014342 7400                       		moveq	#0,d2
00014344 141A                       		move.b	(a2)+,d2
00014346 3002                       		move.w	d2,d0
00014348 E808                       		lsr.b	#4,d0
0001434A E14A                       		lsl.w	#8,d2
0001434C 141A                       		move.b	(a2)+,d2
0001434E EB4A                       		lsl.w	#5,d2
00014350 D3C2                       		adda.l	d2,a1
00014352                            
00014352                            SPLC_LoadTile:
00014352 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014356 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001435A 47EB 0020                  		lea	$20(a3),a3	; next tile
0001435E 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014362                            
00014362 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014366                            
00014366                            locret_13C96:
00014366 4E75                       		rts	
00014368                            ; End of function LoadSonicDynPLC
00014368                            
00014368                            ; ===========================================================================
00014368                            ; ---------------------------------------------------------------------------
00014368                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014368                            ; ---------------------------------------------------------------------------
00014368                            
00014368                            Obj0A:					; XREF: Obj_Index
00014368 7000                       		moveq	#0,d0
0001436A 1028 0024                  		move.b	$24(a0),d0
0001436E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014372 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014376                            ; ===========================================================================
00014376 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001437A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001437E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014382 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014386 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014388                            ; ===========================================================================
00014388                            
00014388                            Obj0A_Main:				; XREF: Obj0A_Index
00014388 5428 0024                  		addq.b	#2,$24(a0)
0001438C 217C 0001 2F90 0004        		move.l	#Map_obj64,4(a0)
00014394 317C 8348 0002             		move.w	#$8348,2(a0)
0001439A 117C 0084 0001             		move.b	#$84,1(a0)
000143A0 117C 0010 0019             		move.b	#$10,$19(a0)
000143A6 117C 0001 0018             		move.b	#1,$18(a0)
000143AC 1028 0028                  		move.b	$28(a0),d0
000143B0 6A00                       		bpl.s	loc_13D00
000143B2 5028 0024                  		addq.b	#8,$24(a0)
000143B6 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000143BE 317C 0440 0002             		move.w	#$440,2(a0)
000143C4 0240 007F                  		andi.w	#$7F,d0
000143C8 1140 0033                  		move.b	d0,$33(a0)
000143CC 6000 0000                  		bra.w	Obj0A_Countdown
000143D0                            ; ===========================================================================
000143D0                            
000143D0                            loc_13D00:
000143D0 1140 001C                  		move.b	d0,$1C(a0)
000143D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000143DA 317C FF78 0012             		move.w	#-$88,$12(a0)
000143E0                            
000143E0                            Obj0A_Animate:				; XREF: Obj0A_Index
000143E0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143E6 4EB9 0000 ACC8             		jsr	AnimateSprite
000143EC                            
000143EC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000143EC 3038 F646                  		move.w	($FFFFF646).w,d0
000143F0 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000143F4 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000143F6 117C 0006 0024             		move.b	#6,$24(a0)
000143FC 5E28 001C                  		addq.b	#7,$1C(a0)
00014400 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014406 6700                       		beq.s	Obj0A_Display
00014408 6000                       		bra.s	Obj0A_Display
0001440A                            ; ===========================================================================
0001440A                            
0001440A                            Obj0A_Wobble:
0001440A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001440E 6700                       		beq.s	loc_13D44
00014410 5868 0030                  		addq.w	#4,$30(a0)
00014414                            
00014414                            loc_13D44:
00014414 1028 0026                  		move.b	$26(a0),d0
00014418 5228 0026                  		addq.b	#1,$26(a0)
0001441C 0240 007F                  		andi.w	#$7F,d0
00014420 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014426 1031 0000                  		move.b	(a1,d0.w),d0
0001442A 4880                       		ext.w	d0
0001442C D068 0030                  		add.w	$30(a0),d0
00014430 3140 0008                  		move.w	d0,8(a0)
00014434 6100                       		bsr.s	Obj0A_ShowNumber
00014436 4EBA 97A0                  		jsr	SpeedToPos
0001443A 4A28 0001                  		tst.b	1(a0)
0001443E 6A00                       		bpl.s	Obj0A_Delete
00014440 4EFA 97BC                  		jmp	DisplaySprite
00014444                            ; ===========================================================================
00014444                            
00014444                            Obj0A_Delete:
00014444 4EFA 97F4                  		jmp	DeleteObject
00014448                            ; ===========================================================================
00014448                            
00014448                            Obj0A_Display:				; XREF: Obj0A_Index
00014448 6100                       		bsr.s	Obj0A_ShowNumber
0001444A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014450 4EB9 0000 ACC8             		jsr	AnimateSprite
00014456 4EFA 97A6                  		jmp	DisplaySprite
0001445A                            ; ===========================================================================
0001445A                            
0001445A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001445A 4EFA 97DE                  		jmp	DeleteObject
0001445E                            ; ===========================================================================
0001445E                            
0001445E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001445E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014464 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014466 5368 0038                  		subq.w	#1,$38(a0)
0001446A 6600                       		bne.s	Obj0A_Display2
0001446C 117C 000E 0024             		move.b	#$E,$24(a0)
00014472 5E28 001C                  		addq.b	#7,$1C(a0)
00014476 60D0                       		bra.s	Obj0A_Display
00014478                            ; ===========================================================================
00014478                            
00014478                            Obj0A_Display2:
00014478 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001447E 4EB9 0000 ACC8             		jsr	AnimateSprite
00014484 4A28 0001                  		tst.b	1(a0)
00014488 6A00                       		bpl.s	Obj0A_Delete3
0001448A 4EFA 9772                  		jmp	DisplaySprite
0001448E                            ; ===========================================================================
0001448E                            
0001448E                            Obj0A_Delete3:
0001448E 4EFA 97AA                  		jmp	DeleteObject
00014492                            ; ===========================================================================
00014492                            
00014492                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014492 4A68 0038                  		tst.w	$38(a0)
00014496 6700                       		beq.s	locret_13E1A
00014498 5368 0038                  		subq.w	#1,$38(a0)
0001449C 6600                       		bne.s	locret_13E1A
0001449E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000144A4 6400                       		bcc.s	locret_13E1A
000144A6 317C 000F 0038             		move.w	#$F,$38(a0)
000144AC 4268 0012                  		clr.w	$12(a0)
000144B0 117C 0080 0001             		move.b	#$80,1(a0)
000144B6 3028 0008                  		move.w	8(a0),d0
000144BA 9078 F700                  		sub.w	($FFFFF700).w,d0
000144BE 0640 0080                  		addi.w	#$80,d0
000144C2 3140 0008                  		move.w	d0,8(a0)
000144C6 3028 000C                  		move.w	$C(a0),d0
000144CA 9078 F704                  		sub.w	($FFFFF704).w,d0
000144CE 0640 0080                  		addi.w	#$80,d0
000144D2 3140 000A                  		move.w	d0,$A(a0)
000144D6 117C 000C 0024             		move.b	#$C,$24(a0)
000144DC                            
000144DC                            locret_13E1A:
000144DC 4E75                       		rts	
000144DE                            ; ===========================================================================
000144DE                            Obj0A_WobbleData:
000144DE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000144EF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014500 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014511 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014521 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001452E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001453B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014548 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014555 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001455E                            ; ===========================================================================
0001455E                            
0001455E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001455E 4A68 002C                  		tst.w	$2C(a0)
00014562 6600 0000                  		bne.w	loc_13F86
00014566 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001456C 6400 0000                  		bcc.w	locret_1408C
00014570 0838 0006 D022             		btst	#6,($FFFFD022).w
00014576 6700 0000                  		beq.w	locret_1408C
0001457A 5368 0038                  		subq.w	#1,$38(a0)
0001457E 6A00 0000                  		bpl.w	loc_13FAC
00014582 317C 003B 0038             		move.w	#59,$38(a0)
00014588 317C 0001 0036             		move.w	#1,$36(a0)
0001458E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014594 0240 0001                  		andi.w	#1,d0
00014598 1140 0034                  		move.b	d0,$34(a0)
0001459C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000145A0 0C40 0019                  		cmpi.w	#$19,d0
000145A4 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000145A6 0C40 0014                  		cmpi.w	#$14,d0
000145AA 6700                       		beq.s	Obj0A_WarnSound
000145AC 0C40 000F                  		cmpi.w	#$F,d0
000145B0 6700                       		beq.s	Obj0A_WarnSound
000145B2 0C40 000C                  		cmpi.w	#$C,d0
000145B6 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000145B8 6600                       		bne.s	loc_13F02
000145BA 303C 0092                  		move.w	#$92,d0
000145BE 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
000145C4                            
000145C4                            loc_13F02:
000145C4 5328 0032                  		subq.b	#1,$32(a0)
000145C8 6A00                       		bpl.s	Obj0A_ReduceAir
000145CA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000145D0 08E8 0007 0036             		bset	#7,$36(a0)
000145D6 6000                       		bra.s	Obj0A_ReduceAir
000145D8                            ; ===========================================================================
000145D8                            
000145D8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000145D8 303C 00C2                  		move.w	#$C2,d0
000145DC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000145E2                            
000145E2                            Obj0A_ReduceAir:
000145E2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000145E6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000145EA 6100 0000                  		bsr.w	ResumeMusic
000145EE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000145F4 303C 00B2                  		move.w	#$B2,d0
000145F8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
000145FE 117C 000A 0034             		move.b	#$A,$34(a0)
00014604 317C 0001 0036             		move.w	#1,$36(a0)
0001460A 317C 0078 002C             		move.w	#$78,$2C(a0)
00014610 2F08                       		move.l	a0,-(sp)
00014612 41F8 D000                  		lea	($FFFFD000).w,a0
00014616 6100 F824                  		bsr.w	Sonic_ResetOnFloor
0001461A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014620 08E8 0001 0022             		bset	#1,$22(a0)
00014626 08E8 0007 0002             		bset	#7,2(a0)
0001462C 317C 0000 0012             		move.w	#0,$12(a0)
00014632 317C 0000 0010             		move.w	#0,$10(a0)
00014638 317C 0000 0014             		move.w	#0,$14(a0)
0001463E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014644 205F                       		movea.l	(sp)+,a0
00014646 4E75                       		rts	
00014648                            ; ===========================================================================
00014648                            
00014648                            loc_13F86:
00014648 5368 002C                  		subq.w	#1,$2C(a0)
0001464C 6600                       		bne.s	loc_13F94
0001464E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014654 4E75                       		rts	
00014656                            ; ===========================================================================
00014656                            
00014656                            loc_13F94:
00014656 2F08                       		move.l	a0,-(sp)
00014658 41F8 D000                  		lea	($FFFFD000).w,a0
0001465C 4EBA 957A                  		jsr	SpeedToPos
00014660 0668 0010 0012             		addi.w	#$10,$12(a0)
00014666 205F                       		movea.l	(sp)+,a0
00014668 6000                       		bra.s	loc_13FAC
0001466A                            ; ===========================================================================
0001466A                            
0001466A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001466A 6000                       		bra.s	Obj0A_MakeItem
0001466C                            ; ===========================================================================
0001466C                            
0001466C                            loc_13FAC:
0001466C 4A68 0036                  		tst.w	$36(a0)
00014670 6700 0000                  		beq.w	locret_1408C
00014674 5368 003A                  		subq.w	#1,$3A(a0)
00014678 6A00 0000                  		bpl.w	locret_1408C
0001467C                            
0001467C                            Obj0A_MakeItem:
0001467C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014682 0240 000F                  		andi.w	#$F,d0
00014686 3140 003A                  		move.w	d0,$3A(a0)
0001468A 4EBA 99F8                  		jsr	SingleObjLoad
0001468E 6600 0000                  		bne.w	locret_1408C
00014692 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014696 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001469C 7006                       		moveq	#6,d0
0001469E 0838 0000 D022             		btst	#0,($FFFFD022).w
000146A4 6700                       		beq.s	loc_13FF2
000146A6 4440                       		neg.w	d0
000146A8 137C 0040 0026             		move.b	#$40,$26(a1)
000146AE                            
000146AE                            loc_13FF2:
000146AE D169 0008                  		add.w	d0,8(a1)
000146B2 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000146B8 137C 0006 0028             		move.b	#6,$28(a1)
000146BE 4A68 002C                  		tst.w	$2C(a0)
000146C2 6700 0000                  		beq.w	loc_1403E
000146C6 0268 0007 003A             		andi.w	#7,$3A(a0)
000146CC 0668 0000 003A             		addi.w	#0,$3A(a0)
000146D2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000146D6 0440 000C                  		subi.w	#$C,d0
000146DA 3340 000C                  		move.w	d0,$C(a1)
000146DE 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000146E4 1340 0026                  		move.b	d0,$26(a1)
000146E8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000146EC 0200 0003                  		andi.b	#3,d0
000146F0 6600                       		bne.s	loc_14082
000146F2 137C 000E 0028             		move.b	#$E,$28(a1)
000146F8 6000                       		bra.s	loc_14082
000146FA                            ; ===========================================================================
000146FA                            
000146FA                            loc_1403E:
000146FA 0828 0007 0036             		btst	#7,$36(a0)
00014700 6700                       		beq.s	loc_14082
00014702 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014706 E24A                       		lsr.w	#1,d2
00014708 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001470E 0240 0003                  		andi.w	#3,d0
00014712 6600                       		bne.s	loc_1406A
00014714 08E8 0006 0036             		bset	#6,$36(a0)
0001471A 6600                       		bne.s	loc_14082
0001471C 1342 0028                  		move.b	d2,$28(a1)
00014720 337C 001C 0038             		move.w	#$1C,$38(a1)
00014726                            
00014726                            loc_1406A:
00014726 4A28 0034                  		tst.b	$34(a0)
0001472A 6600                       		bne.s	loc_14082
0001472C 08E8 0006 0036             		bset	#6,$36(a0)
00014732 6600                       		bne.s	loc_14082
00014734 1342 0028                  		move.b	d2,$28(a1)
00014738 337C 001C 0038             		move.w	#$1C,$38(a1)
0001473E                            
0001473E                            loc_14082:
0001473E 5328 0034                  		subq.b	#1,$34(a0)
00014742 6A00                       		bpl.s	locret_1408C
00014744 4268 0036                  		clr.w	$36(a0)
00014748                            
00014748                            locret_1408C:
00014748 4E75                       		rts	
0001474A                            
0001474A                            ; ---------------------------------------------------------------------------
0001474A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001474A                            ; ---------------------------------------------------------------------------
0001474A                            
0001474A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001474A                            
0001474A                            
0001474A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001474A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014750                             
00014750                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014750                             
00014750 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014754                             
00014754 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001475A 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001475C 43F9 0000 3B04             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014762 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014764                             
00014764                            Air_GetBgm2:
00014764 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001476A 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001476C 43F9 0000 3B0C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014772 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014774                             
00014774                            Air_GetBgm3:
00014774 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001477A 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001477C 43F9 0000 3B12             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014782 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014784                             
00014784                            Air_GetBgm4:
00014784 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001478A 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001478C 43F9 0000 3B18             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014792                             
00014792                            Air_PlayMusic:
00014792 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014796                             
00014796                            loc_140A6:
00014796 4EB9 0000 15BA             		jsr	(PlaySound).l
0001479C                             
0001479C                            ; NineKode ends here
0001479C                            
0001479C                            loc_140AC:
0001479C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000147A2 4238 D372                  		clr.b	($FFFFD372).w
000147A6 4E75                       		rts	
000147A8                            ; End of function ResumeMusic
000147A8                            
000147A8                            ; ===========================================================================
000147A8                            Ani_obj0A:
000147A8                            	include "_anim\obj0A.asm"
000147A8                            ; ---------------------------------------------------------------------------
000147A8                            ; Animation script - countdown numbers and bubbles (LZ)
000147A8                            ; ---------------------------------------------------------------------------
000147A8 0000                       		dc.w byte_140D6-Ani_obj0A
000147AA 0000                       		dc.w byte_140E0-Ani_obj0A
000147AC 0000                       		dc.w byte_140EA-Ani_obj0A
000147AE 0000                       		dc.w byte_140F4-Ani_obj0A
000147B0 0000                       		dc.w byte_140FE-Ani_obj0A
000147B2 0000                       		dc.w byte_14108-Ani_obj0A
000147B4 0000                       		dc.w byte_14112-Ani_obj0A
000147B6 0000                       		dc.w byte_14118-Ani_obj0A
000147B8 0000                       		dc.w byte_14120-Ani_obj0A
000147BA 0000                       		dc.w byte_14128-Ani_obj0A
000147BC 0000                       		dc.w byte_14130-Ani_obj0A
000147BE 0000                       		dc.w byte_14138-Ani_obj0A
000147C0 0000                       		dc.w byte_14140-Ani_obj0A
000147C2 0000                       		dc.w byte_14148-Ani_obj0A
000147C4 0000                       		dc.w byte_1414A-Ani_obj0A
000147C6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000147D0 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000147DA 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000147E4 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000147EE 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000147F8 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014802 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014808 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014810 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014818 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014820 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014828 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014830 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014838 0EFC                       byte_14148:	dc.b $E, $FC
0001483A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014840                            		even
00014840                            		even
00014840                            
00014840                            ; ---------------------------------------------------------------------------
00014840                            ; Sprite mappings - drowning countdown numbers (LZ)
00014840                            ; ---------------------------------------------------------------------------
00014840                            Map_obj0A:
00014840                            	include "_maps\obj0A.asm"
00014840                            ; ---------------------------------------------------------------------------
00014840                            ; Sprite mappings - drowning countdown numbers (LZ)
00014840                            ; ---------------------------------------------------------------------------
00014840 0000                       		dc.w byte_14152-Map_obj0A
00014842 01                         byte_14152:	dc.b 1
00014843 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014848                            		even
00014848                            		even
00014848                            
00014848                            ; ===========================================================================
00014848                            ; ---------------------------------------------------------------------------
00014848                            ; Object 38 - shield and invincibility stars
00014848                            ; ---------------------------------------------------------------------------
00014848                            
00014848                            Obj38:					; XREF: Obj_Index
00014848 7000                       		moveq	#0,d0
0001484A 1028 0024                  		move.b	$24(a0),d0
0001484E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014852 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014856                            ; ===========================================================================
00014856 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014858 0000                       		dc.w Obj38_Shield-Obj38_Index
0001485A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001485C                            ; ===========================================================================
0001485C                            
0001485C                            Obj38_Main:				; XREF: Obj38_Index
0001485C 5428 0024                  		addq.b	#2,$24(a0)
00014860 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014868 117C 0004 0001             		move.b	#4,1(a0)
0001486E 117C 0001 0018             		move.b	#1,$18(a0)
00014874 117C 0010 0019             		move.b	#$10,$19(a0)
0001487A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001487E 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014880 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014886 4E75                       		rts	
00014888                            ; ===========================================================================
00014888                            
00014888                            Obj38_DoStars:
00014888 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001488C 317C 055C 0002             		move.w	#$55C,2(a0)
00014892 4E75                       		rts	
00014894                            ; ===========================================================================
00014894                            
00014894                            Obj38_Shield:				; XREF: Obj38_Index
00014894 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014898 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001489A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001489E 6700                       		beq.s	Obj38_Delete	; if not, branch
000148A0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000148A6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148AC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148B2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000148B8 4EB9 0000 ACC8             		jsr	AnimateSprite
000148BE 4EFA 933E                  		jmp	DisplaySprite
000148C2                            ; ===========================================================================
000148C2                            
000148C2                            Obj38_RmvShield:
000148C2 4E75                       		rts	
000148C4                            ; ===========================================================================
000148C4                            
000148C4                            Obj38_Delete:
000148C4 4EFA 9374                  		jmp	DeleteObject
000148C8                            ; ===========================================================================
000148C8                            
000148C8                            Obj38_Stars:				; XREF: Obj38_Index
000148C8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000148CC 6700                       		beq.s	Obj38_Delete2	; if not, branch
000148CE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000148D2 1228 001C                  		move.b	$1C(a0),d1
000148D6 5301                       		subq.b	#1,d1
000148D8 6000                       		bra.s	Obj38_StarTrail
000148DA                            ; ===========================================================================
000148DA E909                       		lsl.b	#4,d1
000148DC 5801                       		addq.b	#4,d1
000148DE 9001                       		sub.b	d1,d0
000148E0 1228 0030                  		move.b	$30(a0),d1
000148E4 9001                       		sub.b	d1,d0
000148E6 5801                       		addq.b	#4,d1
000148E8 0201 000F                  		andi.b	#$F,d1
000148EC 1141 0030                  		move.b	d1,$30(a0)
000148F0 6000                       		bra.s	Obj38_StarTrail2a
000148F2                            ; ===========================================================================
000148F2                            
000148F2                            Obj38_StarTrail:			; XREF: Obj38_Stars
000148F2 E709                       		lsl.b	#3,d1
000148F4 1401                       		move.b	d1,d2
000148F6 D201                       		add.b	d1,d1
000148F8 D202                       		add.b	d2,d1
000148FA 5801                       		addq.b	#4,d1
000148FC 9001                       		sub.b	d1,d0
000148FE 1228 0030                  		move.b	$30(a0),d1
00014902 9001                       		sub.b	d1,d0
00014904 5801                       		addq.b	#4,d1
00014906 0C01 0018                  		cmpi.b	#$18,d1
0001490A 6500                       		bcs.s	Obj38_StarTrail2
0001490C 7200                       		moveq	#0,d1
0001490E                            
0001490E                            Obj38_StarTrail2:
0001490E 1141 0030                  		move.b	d1,$30(a0)
00014912                            
00014912                            Obj38_StarTrail2a:
00014912 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014916 43F1 0000                  		lea	(a1,d0.w),a1
0001491A 3159 0008                  		move.w	(a1)+,8(a0)
0001491E 3159 000C                  		move.w	(a1)+,$C(a0)
00014922 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014928 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001492E 4EB9 0000 ACC8             		jsr	AnimateSprite
00014934 4EFA 92C8                  		jmp	DisplaySprite
00014938                            ; ===========================================================================
00014938                            
00014938                            Obj38_Delete2:				; XREF: Obj38_Stars
00014938 4EFA 9300                  		jmp	DeleteObject
0001493C                            ; ===========================================================================
0001493C                            ; ---------------------------------------------------------------------------
0001493C                            ; Object 4A - special stage entry from beta
0001493C                            ; ---------------------------------------------------------------------------
0001493C                            
0001493C                            Obj4A:					; XREF: Obj_Index
0001493C 7000                       		moveq	#0,d0
0001493E 1028 0024                  		move.b	$24(a0),d0
00014942 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014946 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001494A                            ; ===========================================================================
0001494A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001494C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001494E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014950                            ; ===========================================================================
00014950                            
00014950                            Obj4A_Main:				; XREF: Obj4A_Index
00014950 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014954 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014956 4E75                       		rts	
00014958                            ; ===========================================================================
00014958                            
00014958                            Obj4A_Main2:
00014958 5428 0024                  		addq.b	#2,$24(a0)
0001495C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014964 117C 0004 0001             		move.b	#4,1(a0)
0001496A 117C 0001 0018             		move.b	#1,$18(a0)
00014970 117C 0038 0019             		move.b	#$38,$19(a0)
00014976 317C 0541 0002             		move.w	#$541,2(a0)
0001497C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014982                            
00014982                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014982 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014988 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001498E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014994 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001499A 4EB9 0000 ACC8             		jsr	AnimateSprite
000149A0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000149A6 6600                       		bne.s	Obj4A_Display
000149A8 4A38 D000                  		tst.b	($FFFFD000).w
000149AC 6700                       		beq.s	Obj4A_Display
000149AE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000149B4 303C 00A8                  		move.w	#$A8,d0
000149B8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000149BE                            
000149BE                            Obj4A_Display:
000149BE 4EFA 923E                  		jmp	DisplaySprite
000149C2                            ; ===========================================================================
000149C2                            
000149C2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000149C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000149C6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000149C8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000149CE 4EFA 926A                  		jmp	DeleteObject
000149D2                            ; ===========================================================================
000149D2                            
000149D2                            Obj4A_Wait:
000149D2 4E75                       		rts	
000149D4                            ; ===========================================================================
000149D4                            ; ---------------------------------------------------------------------------
000149D4                            ; Object 08 - water splash (LZ)
000149D4                            ; ---------------------------------------------------------------------------
000149D4                            
000149D4                            Obj08:					; XREF: Obj_Index
000149D4 7000                       		moveq	#0,d0
000149D6 1028 0024                  		move.b	$24(a0),d0
000149DA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000149DE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000149E2                            ; ===========================================================================
000149E2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000149E4 0000                       		dc.w Obj08_Display-Obj08_Index
000149E6 0000                       		dc.w Obj08_Delete-Obj08_Index
000149E8                            ; ===========================================================================
000149E8                            
000149E8                            Obj08_Main:				; XREF: Obj08_Index
000149E8 5428 0024                  		addq.b	#2,$24(a0)
000149EC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000149F4 0028 0004 0001             		ori.b	#4,1(a0)
000149FA 117C 0001 0018             		move.b	#1,$18(a0)
00014A00 117C 0010 0019             		move.b	#$10,$19(a0)
00014A06 317C 4259 0002             		move.w	#$4259,2(a0)
00014A0C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014A12                            
00014A12                            Obj08_Display:				; XREF: Obj08_Index
00014A12 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014A18 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014A1E 4EB9 0000 ACC8             		jsr	AnimateSprite
00014A24 4EFA 91D8                  		jmp	DisplaySprite
00014A28                            ; ===========================================================================
00014A28                            
00014A28                            Obj08_Delete:				; XREF: Obj08_Index
00014A28 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014A2C                            ; ===========================================================================
00014A2C                            Ani_obj38:
00014A2C                            	include "_anim\obj38.asm"
00014A2C                            ; ---------------------------------------------------------------------------
00014A2C                            ; Animation script - shield and invincibility stars
00014A2C                            ; ---------------------------------------------------------------------------
00014A2C 0000                       		dc.w byte_14356-Ani_obj38
00014A2E 0000                       		dc.w byte_1435E-Ani_obj38
00014A30 0000                       		dc.w byte_14364-Ani_obj38
00014A32 0000                       		dc.w byte_1437E-Ani_obj38
00014A34 0000                       		dc.w byte_14398-Ani_obj38
00014A36 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014A3E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014A44 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014A55 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014A5E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014A6F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014A78 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014A89 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014A92                            		even
00014A92                            		even
00014A92                            
00014A92                            ; ---------------------------------------------------------------------------
00014A92                            ; Sprite mappings - shield and invincibility stars
00014A92                            ; ---------------------------------------------------------------------------
00014A92                            Map_obj38:
00014A92                            	include "_maps\obj38.asm"
00014A92                            ; ---------------------------------------------------------------------------
00014A92                            ; Sprite mappings - shield and invincibility stars
00014A92                            ; ---------------------------------------------------------------------------
00014A92 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014A96 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014A9A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014A9E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014AA2 04                         byte_143C2:	dc.b 4
00014AA3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014AA8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014AAD 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014AB2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014AB7 04                         byte_143D7:	dc.b 4
00014AB8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014ABD E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014AC2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014AC7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014ACC 04                         byte_143EC:	dc.b 4
00014ACD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014AD2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014AD7 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014ADC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014AE1 04                         byte_14401:	dc.b 4
00014AE2 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014AE7 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014AEC 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014AF1 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014AF6 04                         byte_14416:	dc.b 4
00014AF7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014AFC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014B01 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014B06 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014B0B 04                         byte_1442B:	dc.b 4
00014B0C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014B11 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014B16 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014B1B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014B20 04                         byte_14440:	dc.b 4
00014B21 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014B26 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014B2B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014B30 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014B36 00                         		even
00014B36 00                         		even
00014B36                            
00014B36                            Ani_obj4A:
00014B36                            	include "_anim\obj4A.asm"
00014B36                            ; ---------------------------------------------------------------------------
00014B36                            ; Animation script - special stage entry effect from beta
00014B36                            ; ---------------------------------------------------------------------------
00014B36 0000                       		dc.w byte_14458-Ani_obj4A
00014B38 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014B4C                            		even
00014B4C                            		even
00014B4C                            
00014B4C                            ; ---------------------------------------------------------------------------
00014B4C                            ; Sprite mappings - special stage entry	from beta
00014B4C                            ; ---------------------------------------------------------------------------
00014B4C                            Map_obj4A:
00014B4C                            	include "_maps\obj4A.asm"
00014B4C                            ; ---------------------------------------------------------------------------
00014B4C                            ; Sprite mappings - special stage entry	from beta
00014B4C                            ; ---------------------------------------------------------------------------
00014B4C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014B50 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014B54 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014B58 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014B5C 03                         byte_1447C:	dc.b 3
00014B5D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014B62 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014B67 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014B6C 03                         byte_1448C:	dc.b 3
00014B6D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014B72 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014B77 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014B7C 05                         byte_1449C:	dc.b 5
00014B7D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014B82 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014B87 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014B8C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014B91 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014B96 09                         byte_144B6:	dc.b 9
00014B97 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014B9C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014BA1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014BA6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014BAB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014BB0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014BB5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014BBA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014BBF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014BC4 12                         byte_144E4:	dc.b $12
00014BC5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014BCA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014BCF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014BD4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014BD9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014BDE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014BE3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014BE8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014BED 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014BF2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014BF7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014BFC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014C01 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014C06 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014C0B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014C10 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014C15 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014C1A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014C1F 11                         byte_1453F:	dc.b $11
00014C20 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014C25 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014C2A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014C2F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014C34 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014C39 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014C3E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014C43 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014C48 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014C4D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014C52 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014C57 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014C5C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014C61 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014C66 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014C6B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014C70 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014C75 09                         byte_14595:	dc.b 9
00014C76 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014C7B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014C80 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014C85 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014C8A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014C8F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014C94 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014C99 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014C9E 04                         		dc.b 4
00014C9F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014CA4                            		even
00014CA4                            		even
00014CA4                            
00014CA4                            Ani_obj08:
00014CA4                            	include "_anim\obj08.asm"
00014CA4                            ; ---------------------------------------------------------------------------
00014CA4                            ; Animation script - water splash (LZ)
00014CA4                            ; ---------------------------------------------------------------------------
00014CA4 0000                       		dc.w byte_145C6-Ani_obj08
00014CA6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014CAC                            		even
00014CAC                            		even
00014CAC                            
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Sprite mappings - water splash (LZ)
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            Map_obj08:
00014CAC                            	include "_maps\obj08.asm"
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Sprite mappings - water splash (LZ)
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC 0000                       		dc.w byte_145D2-Map_obj08
00014CAE 0000                       		dc.w byte_145DD-Map_obj08
00014CB0 0000                       		dc.w byte_145E8-Map_obj08
00014CB2 02                         byte_145D2:	dc.b 2
00014CB3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014CB8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014CBD 02                         byte_145DD:	dc.b 2
00014CBE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014CC3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014CC8 01                         byte_145E8:	dc.b 1
00014CC9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014CCE                            		even
00014CCE                            		even
00014CCE                            
00014CCE                            ; ---------------------------------------------------------------------------
00014CCE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014CCE                            ; ---------------------------------------------------------------------------
00014CCE                            
00014CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CCE                            
00014CCE                            
00014CCE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014CCE 0828 0003 0022             		btst	#3,$22(a0)
00014CD4 6700                       		beq.s	loc_14602
00014CD6 7000                       		moveq	#0,d0
00014CD8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014CDC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014CE0 4E75                       		rts	
00014CE2                            ; ===========================================================================
00014CE2                            
00014CE2                            loc_14602:
00014CE2 7003                       		moveq	#3,d0
00014CE4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014CE8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014CEC 1028 0026                  		move.b	$26(a0),d0
00014CF0 0600 0020                  		addi.b	#$20,d0
00014CF4 6A00                       		bpl.s	loc_14624
00014CF6 1028 0026                  		move.b	$26(a0),d0
00014CFA 6A00                       		bpl.s	loc_1461E
00014CFC 5300                       		subq.b	#1,d0
00014CFE                            
00014CFE                            loc_1461E:
00014CFE 0600 0020                  		addi.b	#$20,d0
00014D02 6000                       		bra.s	loc_14630
00014D04                            ; ===========================================================================
00014D04                            
00014D04                            loc_14624:
00014D04 1028 0026                  		move.b	$26(a0),d0
00014D08 6A00                       		bpl.s	loc_1462C
00014D0A 5200                       		addq.b	#1,d0
00014D0C                            
00014D0C                            loc_1462C:
00014D0C 0600 001F                  		addi.b	#$1F,d0
00014D10                            
00014D10                            loc_14630:
00014D10 0200 00C0                  		andi.b	#$C0,d0
00014D14 0C00 0040                  		cmpi.b	#$40,d0
00014D18 6700 0000                  		beq.w	Sonic_WalkVertL
00014D1C 0C00 0080                  		cmpi.b	#$80,d0
00014D20 6700 0000                  		beq.w	Sonic_WalkCeiling
00014D24 0C00 00C0                  		cmpi.b	#$C0,d0
00014D28 6700 0000                  		beq.w	Sonic_WalkVertR
00014D2C 3428 000C                  		move.w	$C(a0),d2
00014D30 3628 0008                  		move.w	8(a0),d3
00014D34 7000                       		moveq	#0,d0
00014D36 1028 0016                  		move.b	$16(a0),d0
00014D3A 4880                       		ext.w	d0
00014D3C D440                       		add.w	d0,d2
00014D3E 1028 0017                  		move.b	$17(a0),d0
00014D42 4880                       		ext.w	d0
00014D44 D640                       		add.w	d0,d3
00014D46 49F8 F768                  		lea	($FFFFF768).w,a4
00014D4A 367C 0010                  		movea.w	#$10,a3
00014D4E 3C3C 0000                  		move.w	#0,d6
00014D52 7A0D                       		moveq	#$D,d5
00014D54 6100 0000                  		bsr.w	FindFloor
00014D58 3F01                       		move.w	d1,-(sp)
00014D5A 3428 000C                  		move.w	$C(a0),d2
00014D5E 3628 0008                  		move.w	8(a0),d3
00014D62 7000                       		moveq	#0,d0
00014D64 1028 0016                  		move.b	$16(a0),d0
00014D68 4880                       		ext.w	d0
00014D6A D440                       		add.w	d0,d2
00014D6C 1028 0017                  		move.b	$17(a0),d0
00014D70 4880                       		ext.w	d0
00014D72 4440                       		neg.w	d0
00014D74 D640                       		add.w	d0,d3
00014D76 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D7A 367C 0010                  		movea.w	#$10,a3
00014D7E 3C3C 0000                  		move.w	#0,d6
00014D82 7A0D                       		moveq	#$D,d5
00014D84 6100 0000                  		bsr.w	FindFloor
00014D88 301F                       		move.w	(sp)+,d0
00014D8A 6100 0000                  		bsr.w	Sonic_Angle
00014D8E 4A41                       		tst.w	d1
00014D90 6700                       		beq.s	locret_146BE
00014D92 6A00                       		bpl.s	loc_146C0
00014D94 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D98 6D00                       		blt.s	locret_146E6
00014D9A D368 000C                  		add.w	d1,$C(a0)
00014D9E                            
00014D9E                            locret_146BE:
00014D9E 4E75                       		rts	
00014DA0                            ; ===========================================================================
00014DA0                            
00014DA0                            loc_146C0:
00014DA0 0C41 000E                  		cmpi.w	#$E,d1
00014DA4 6E00                       		bgt.s	loc_146CC
00014DA6                            
00014DA6                            loc_146C6:
00014DA6 D368 000C                  		add.w	d1,$C(a0)
00014DAA 4E75                       		rts	
00014DAC                            ; ===========================================================================
00014DAC                            
00014DAC                            loc_146CC:
00014DAC 4A28 0038                  		tst.b	$38(a0)
00014DB0 66F4                       		bne.s	loc_146C6
00014DB2 08E8 0001 0022             		bset	#1,$22(a0)
00014DB8 08A8 0005 0022             		bclr	#5,$22(a0)
00014DBE 117C 0001 001D             		move.b	#1,$1D(a0)
00014DC4 4E75                       		rts	
00014DC6                            ; ===========================================================================
00014DC6                            
00014DC6                            locret_146E6:
00014DC6 4E75                       		rts	
00014DC8                            ; End of function Sonic_AnglePos
00014DC8                            
00014DC8                            ; ===========================================================================
00014DC8 2428 0008                  		move.l	8(a0),d2
00014DCC 3028 0010                  		move.w	$10(a0),d0
00014DD0 48C0                       		ext.l	d0
00014DD2 E180                       		asl.l	#8,d0
00014DD4 9480                       		sub.l	d0,d2
00014DD6 2142 0008                  		move.l	d2,8(a0)
00014DDA 303C 0038                  		move.w	#$38,d0
00014DDE 48C0                       		ext.l	d0
00014DE0 E180                       		asl.l	#8,d0
00014DE2 9680                       		sub.l	d0,d3
00014DE4 2143 000C                  		move.l	d3,$C(a0)
00014DE8 4E75                       		rts	
00014DEA                            ; ===========================================================================
00014DEA                            
00014DEA                            locret_1470A:
00014DEA 4E75                       		rts	
00014DEC                            ; ===========================================================================
00014DEC 2628 000C                  		move.l	$C(a0),d3
00014DF0 3028 0012                  		move.w	$12(a0),d0
00014DF4 0440 0038                  		subi.w	#$38,d0
00014DF8 3140 0012                  		move.w	d0,$12(a0)
00014DFC 48C0                       		ext.l	d0
00014DFE E180                       		asl.l	#8,d0
00014E00 9680                       		sub.l	d0,d3
00014E02 2143 000C                  		move.l	d3,$C(a0)
00014E06 4E75                       		rts	
00014E08 4E75                       		rts	
00014E0A                            ; ===========================================================================
00014E0A 2428 0008                  		move.l	8(a0),d2
00014E0E 2628 000C                  		move.l	$C(a0),d3
00014E12 3028 0010                  		move.w	$10(a0),d0
00014E16 48C0                       		ext.l	d0
00014E18 E180                       		asl.l	#8,d0
00014E1A 9480                       		sub.l	d0,d2
00014E1C 3028 0012                  		move.w	$12(a0),d0
00014E20 48C0                       		ext.l	d0
00014E22 E180                       		asl.l	#8,d0
00014E24 9680                       		sub.l	d0,d3
00014E26 2142 0008                  		move.l	d2,8(a0)
00014E2A 2143 000C                  		move.l	d3,$C(a0)
00014E2E 4E75                       		rts	
00014E30                            
00014E30                            ; ---------------------------------------------------------------------------
00014E30                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014E30                            ; ---------------------------------------------------------------------------
00014E30                            
00014E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E30                            
00014E30                            
00014E30                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014E30 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014E34 B240                       		cmp.w	d0,d1
00014E36 6F00                       		ble.s	loc_1475E
00014E38 1438 F768                  		move.b	($FFFFF768).w,d2
00014E3C 3200                       		move.w	d0,d1
00014E3E                            
00014E3E                            loc_1475E:
00014E3E 0802 0000                  		btst	#0,d2
00014E42 6600                       		bne.s	loc_1476A
00014E44 1142 0026                  		move.b	d2,$26(a0)
00014E48 4E75                       		rts	
00014E4A                            ; ===========================================================================
00014E4A                            
00014E4A                            loc_1476A:
00014E4A 1428 0026                  		move.b	$26(a0),d2
00014E4E 0602 0020                  		addi.b	#$20,d2
00014E52 0202 00C0                  		andi.b	#$C0,d2
00014E56 1142 0026                  		move.b	d2,$26(a0)
00014E5A 4E75                       		rts	
00014E5C                            ; End of function Sonic_Angle
00014E5C                            
00014E5C                            ; ---------------------------------------------------------------------------
00014E5C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014E5C                            ; ---------------------------------------------------------------------------
00014E5C                            
00014E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E5C                            
00014E5C                            
00014E5C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014E5C 3428 000C                  		move.w	$C(a0),d2
00014E60 3628 0008                  		move.w	8(a0),d3
00014E64 7000                       		moveq	#0,d0
00014E66 1028 0017                  		move.b	$17(a0),d0
00014E6A 4880                       		ext.w	d0
00014E6C 4440                       		neg.w	d0
00014E6E D440                       		add.w	d0,d2
00014E70 1028 0016                  		move.b	$16(a0),d0
00014E74 4880                       		ext.w	d0
00014E76 D640                       		add.w	d0,d3
00014E78 49F8 F768                  		lea	($FFFFF768).w,a4
00014E7C 367C 0010                  		movea.w	#$10,a3
00014E80 3C3C 0000                  		move.w	#0,d6
00014E84 7A0D                       		moveq	#$D,d5
00014E86 6100 0000                  		bsr.w	FindWall
00014E8A 3F01                       		move.w	d1,-(sp)
00014E8C 3428 000C                  		move.w	$C(a0),d2
00014E90 3628 0008                  		move.w	8(a0),d3
00014E94 7000                       		moveq	#0,d0
00014E96 1028 0017                  		move.b	$17(a0),d0
00014E9A 4880                       		ext.w	d0
00014E9C D440                       		add.w	d0,d2
00014E9E 1028 0016                  		move.b	$16(a0),d0
00014EA2 4880                       		ext.w	d0
00014EA4 D640                       		add.w	d0,d3
00014EA6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EAA 367C 0010                  		movea.w	#$10,a3
00014EAE 3C3C 0000                  		move.w	#0,d6
00014EB2 7A0D                       		moveq	#$D,d5
00014EB4 6100 0000                  		bsr.w	FindWall
00014EB8 301F                       		move.w	(sp)+,d0
00014EBA 6100 FF74                  		bsr.w	Sonic_Angle
00014EBE 4A41                       		tst.w	d1
00014EC0 6700                       		beq.s	locret_147F0
00014EC2 6A00                       		bpl.s	loc_147F2
00014EC4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EC8 6D00 FF20                  		blt.w	locret_1470A
00014ECC D368 0008                  		add.w	d1,8(a0)
00014ED0                            
00014ED0                            locret_147F0:
00014ED0 4E75                       		rts	
00014ED2                            ; ===========================================================================
00014ED2                            
00014ED2                            loc_147F2:
00014ED2 0C41 000E                  		cmpi.w	#$E,d1
00014ED6 6E00                       		bgt.s	loc_147FE
00014ED8                            
00014ED8                            loc_147F8:
00014ED8 D368 0008                  		add.w	d1,8(a0)
00014EDC 4E75                       		rts	
00014EDE                            ; ===========================================================================
00014EDE                            
00014EDE                            loc_147FE:
00014EDE 4A28 0038                  		tst.b	$38(a0)
00014EE2 66F4                       		bne.s	loc_147F8
00014EE4 08E8 0001 0022             		bset	#1,$22(a0)
00014EEA 08A8 0005 0022             		bclr	#5,$22(a0)
00014EF0 117C 0001 001D             		move.b	#1,$1D(a0)
00014EF6 4E75                       		rts	
00014EF8                            ; End of function Sonic_WalkVertR
00014EF8                            
00014EF8                            ; ---------------------------------------------------------------------------
00014EF8                            ; Subroutine allowing Sonic to walk upside-down
00014EF8                            ; ---------------------------------------------------------------------------
00014EF8                            
00014EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EF8                            
00014EF8                            
00014EF8                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014EF8 3428 000C                  		move.w	$C(a0),d2
00014EFC 3628 0008                  		move.w	8(a0),d3
00014F00 7000                       		moveq	#0,d0
00014F02 1028 0016                  		move.b	$16(a0),d0
00014F06 4880                       		ext.w	d0
00014F08 9440                       		sub.w	d0,d2
00014F0A 0A42 000F                  		eori.w	#$F,d2
00014F0E 1028 0017                  		move.b	$17(a0),d0
00014F12 4880                       		ext.w	d0
00014F14 D640                       		add.w	d0,d3
00014F16 49F8 F768                  		lea	($FFFFF768).w,a4
00014F1A 367C FFF0                  		movea.w	#-$10,a3
00014F1E 3C3C 1000                  		move.w	#$1000,d6
00014F22 7A0D                       		moveq	#$D,d5
00014F24 6100 0000                  		bsr.w	FindFloor
00014F28 3F01                       		move.w	d1,-(sp)
00014F2A 3428 000C                  		move.w	$C(a0),d2
00014F2E 3628 0008                  		move.w	8(a0),d3
00014F32 7000                       		moveq	#0,d0
00014F34 1028 0016                  		move.b	$16(a0),d0
00014F38 4880                       		ext.w	d0
00014F3A 9440                       		sub.w	d0,d2
00014F3C 0A42 000F                  		eori.w	#$F,d2
00014F40 1028 0017                  		move.b	$17(a0),d0
00014F44 4880                       		ext.w	d0
00014F46 9640                       		sub.w	d0,d3
00014F48 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F4C 367C FFF0                  		movea.w	#-$10,a3
00014F50 3C3C 1000                  		move.w	#$1000,d6
00014F54 7A0D                       		moveq	#$D,d5
00014F56 6100 0000                  		bsr.w	FindFloor
00014F5A 301F                       		move.w	(sp)+,d0
00014F5C 6100 FED2                  		bsr.w	Sonic_Angle
00014F60 4A41                       		tst.w	d1
00014F62 6700                       		beq.s	locret_14892
00014F64 6A00                       		bpl.s	loc_14894
00014F66 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F6A 6D00 FE5A                  		blt.w	locret_146E6
00014F6E 9368 000C                  		sub.w	d1,$C(a0)
00014F72                            
00014F72                            locret_14892:
00014F72 4E75                       		rts	
00014F74                            ; ===========================================================================
00014F74                            
00014F74                            loc_14894:
00014F74 0C41 000E                  		cmpi.w	#$E,d1
00014F78 6E00                       		bgt.s	loc_148A0
00014F7A                            
00014F7A                            loc_1489A:
00014F7A 9368 000C                  		sub.w	d1,$C(a0)
00014F7E 4E75                       		rts	
00014F80                            ; ===========================================================================
00014F80                            
00014F80                            loc_148A0:
00014F80 4A28 0038                  		tst.b	$38(a0)
00014F84 66F4                       		bne.s	loc_1489A
00014F86 08E8 0001 0022             		bset	#1,$22(a0)
00014F8C 08A8 0005 0022             		bclr	#5,$22(a0)
00014F92 117C 0001 001D             		move.b	#1,$1D(a0)
00014F98 4E75                       		rts	
00014F9A                            ; End of function Sonic_WalkCeiling
00014F9A                            
00014F9A                            ; ---------------------------------------------------------------------------
00014F9A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014F9A                            ; ---------------------------------------------------------------------------
00014F9A                            
00014F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F9A                            
00014F9A                            
00014F9A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014F9A 3428 000C                  		move.w	$C(a0),d2
00014F9E 3628 0008                  		move.w	8(a0),d3
00014FA2 7000                       		moveq	#0,d0
00014FA4 1028 0017                  		move.b	$17(a0),d0
00014FA8 4880                       		ext.w	d0
00014FAA 9440                       		sub.w	d0,d2
00014FAC 1028 0016                  		move.b	$16(a0),d0
00014FB0 4880                       		ext.w	d0
00014FB2 9640                       		sub.w	d0,d3
00014FB4 0A43 000F                  		eori.w	#$F,d3
00014FB8 49F8 F768                  		lea	($FFFFF768).w,a4
00014FBC 367C FFF0                  		movea.w	#-$10,a3
00014FC0 3C3C 0800                  		move.w	#$800,d6
00014FC4 7A0D                       		moveq	#$D,d5
00014FC6 6100 0000                  		bsr.w	FindWall
00014FCA 3F01                       		move.w	d1,-(sp)
00014FCC 3428 000C                  		move.w	$C(a0),d2
00014FD0 3628 0008                  		move.w	8(a0),d3
00014FD4 7000                       		moveq	#0,d0
00014FD6 1028 0017                  		move.b	$17(a0),d0
00014FDA 4880                       		ext.w	d0
00014FDC D440                       		add.w	d0,d2
00014FDE 1028 0016                  		move.b	$16(a0),d0
00014FE2 4880                       		ext.w	d0
00014FE4 9640                       		sub.w	d0,d3
00014FE6 0A43 000F                  		eori.w	#$F,d3
00014FEA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FEE 367C FFF0                  		movea.w	#-$10,a3
00014FF2 3C3C 0800                  		move.w	#$800,d6
00014FF6 7A0D                       		moveq	#$D,d5
00014FF8 6100 0000                  		bsr.w	FindWall
00014FFC 301F                       		move.w	(sp)+,d0
00014FFE 6100 FE30                  		bsr.w	Sonic_Angle
00015002 4A41                       		tst.w	d1
00015004 6700                       		beq.s	locret_14934
00015006 6A00                       		bpl.s	loc_14936
00015008 0C41 FFF2                  		cmpi.w	#-$E,d1
0001500C 6D00 FDDC                  		blt.w	locret_1470A
00015010 9368 0008                  		sub.w	d1,8(a0)
00015014                            
00015014                            locret_14934:
00015014 4E75                       		rts	
00015016                            ; ===========================================================================
00015016                            
00015016                            loc_14936:
00015016 0C41 000E                  		cmpi.w	#$E,d1
0001501A 6E00                       		bgt.s	loc_14942
0001501C                            
0001501C                            loc_1493C:
0001501C 9368 0008                  		sub.w	d1,8(a0)
00015020 4E75                       		rts	
00015022                            ; ===========================================================================
00015022                            
00015022                            loc_14942:
00015022 4A28 0038                  		tst.b	$38(a0)
00015026 66F4                       		bne.s	loc_1493C
00015028 08E8 0001 0022             		bset	#1,$22(a0)
0001502E 08A8 0005 0022             		bclr	#5,$22(a0)
00015034 117C 0001 001D             		move.b	#1,$1D(a0)
0001503A 4E75                       		rts	
0001503C                            ; End of function Sonic_WalkVertL
0001503C                            
0001503C                            ; ---------------------------------------------------------------------------
0001503C                            ; Subroutine to	find which tile	the object is standing on
0001503C                            ; ---------------------------------------------------------------------------
0001503C                            
0001503C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001503C                            
0001503C                            
0001503C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001503C 3002                       		move.w	d2,d0
0001503E E248                       		lsr.w	#1,d0
00015040 0240 0380                  		andi.w	#$380,d0
00015044 3203                       		move.w	d3,d1
00015046 E049                       		lsr.w	#8,d1
00015048 0241 007F                  		andi.w	#$7F,d1
0001504C D041                       		add.w	d1,d0
0001504E 72FF                       		moveq	#-1,d1
00015050 43F8 A400                  		lea	($FFFFA400).w,a1
00015054 1231 0000                  		move.b	(a1,d0.w),d1
00015058 6700                       		beq.s	loc_14996
0001505A 6B00                       		bmi.s	loc_1499A
0001505C 5301                       		subq.b	#1,d1
0001505E 4881                       		ext.w	d1
00015060 EE59                       		ror.w	#7,d1
00015062 3002                       		move.w	d2,d0
00015064 D040                       		add.w	d0,d0
00015066 0240 01E0                  		andi.w	#$1E0,d0
0001506A D240                       		add.w	d0,d1
0001506C 3003                       		move.w	d3,d0
0001506E E648                       		lsr.w	#3,d0
00015070 0240 001E                  		andi.w	#$1E,d0
00015074 D240                       		add.w	d0,d1
00015076                            
00015076                            loc_14996:
00015076 2241                       		movea.l	d1,a1
00015078 4E75                       		rts	
0001507A                            ; ===========================================================================
0001507A                            
0001507A                            loc_1499A:
0001507A 0241 007F                  		andi.w	#$7F,d1
0001507E 0828 0006 0001             		btst	#6,1(a0)
00015084 6700                       		beq.s	loc_149B2
00015086 5241                       		addq.w	#1,d1
00015088 0C41 0029                  		cmpi.w	#$29,d1
0001508C 6600                       		bne.s	loc_149B2
0001508E 323C 0051                  		move.w	#$51,d1
00015092                            
00015092                            loc_149B2:
00015092 5301                       		subq.b	#1,d1
00015094 EE59                       		ror.w	#7,d1
00015096 3002                       		move.w	d2,d0
00015098 D040                       		add.w	d0,d0
0001509A 0240 01E0                  		andi.w	#$1E0,d0
0001509E D240                       		add.w	d0,d1
000150A0 3003                       		move.w	d3,d0
000150A2 E648                       		lsr.w	#3,d0
000150A4 0240 001E                  		andi.w	#$1E,d0
000150A8 D240                       		add.w	d0,d1
000150AA 2241                       		movea.l	d1,a1
000150AC 4E75                       		rts	
000150AE                            ; End of function Floor_ChkTile
000150AE                            
000150AE                            
000150AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150AE                            
000150AE                            
000150AE                            FindFloor:				; XREF: Sonic_AnglePos; et al
000150AE 618C                       		bsr.s	Floor_ChkTile
000150B0 3011                       		move.w	(a1),d0
000150B2 3800                       		move.w	d0,d4
000150B4 0240 07FF                  		andi.w	#$7FF,d0
000150B8 6700                       		beq.s	loc_149DE
000150BA 0B04                       		btst	d5,d4
000150BC 6600                       		bne.s	loc_149EC
000150BE                            
000150BE                            loc_149DE:
000150BE D44B                       		add.w	a3,d2
000150C0 6100 0000                  		bsr.w	FindFloor2
000150C4 944B                       		sub.w	a3,d2
000150C6 0641 0010                  		addi.w	#$10,d1
000150CA 4E75                       		rts	
000150CC                            ; ===========================================================================
000150CC                            
000150CC                            loc_149EC:
000150CC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000150D0 1032 0000                  		move.b	(a2,d0.w),d0
000150D4 0240 00FF                  		andi.w	#$FF,d0
000150D8 67E4                       		beq.s	loc_149DE
000150DA 45F9 0000 0000             		lea	(AngleMap).l,a2
000150E0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150E4 E948                       		lsl.w	#4,d0
000150E6 3203                       		move.w	d3,d1
000150E8 0804 000B                  		btst	#$B,d4
000150EC 6700                       		beq.s	loc_14A12
000150EE 4641                       		not.w	d1
000150F0 4414                       		neg.b	(a4)
000150F2                            
000150F2                            loc_14A12:
000150F2 0804 000C                  		btst	#$C,d4
000150F6 6700                       		beq.s	loc_14A22
000150F8 0614 0040                  		addi.b	#$40,(a4)
000150FC 4414                       		neg.b	(a4)
000150FE 0414 0040                  		subi.b	#$40,(a4)
00015102                            
00015102                            loc_14A22:
00015102 0241 000F                  		andi.w	#$F,d1
00015106 D240                       		add.w	d0,d1
00015108 45F9 0000 0000             		lea	(CollArray1).l,a2
0001510E 1032 1000                  		move.b	(a2,d1.w),d0
00015112 4880                       		ext.w	d0
00015114 BD44                       		eor.w	d6,d4
00015116 0804 000C                  		btst	#$C,d4
0001511A 6700                       		beq.s	loc_14A3E
0001511C 4440                       		neg.w	d0
0001511E                            
0001511E                            loc_14A3E:
0001511E 4A40                       		tst.w	d0
00015120 679C                       		beq.s	loc_149DE
00015122 6B00                       		bmi.s	loc_14A5A
00015124 0C00 0010                  		cmpi.b	#$10,d0
00015128 6700                       		beq.s	loc_14A66
0001512A 3202                       		move.w	d2,d1
0001512C 0241 000F                  		andi.w	#$F,d1
00015130 D041                       		add.w	d1,d0
00015132 323C 000F                  		move.w	#$F,d1
00015136 9240                       		sub.w	d0,d1
00015138 4E75                       		rts	
0001513A                            ; ===========================================================================
0001513A                            
0001513A                            loc_14A5A:
0001513A 3202                       		move.w	d2,d1
0001513C 0241 000F                  		andi.w	#$F,d1
00015140 D041                       		add.w	d1,d0
00015142 6A00 FF7A                  		bpl.w	loc_149DE
00015146                            
00015146                            loc_14A66:
00015146 944B                       		sub.w	a3,d2
00015148 6100 0000                  		bsr.w	FindFloor2
0001514C D44B                       		add.w	a3,d2
0001514E 0441 0010                  		subi.w	#$10,d1
00015152 4E75                       		rts	
00015154                            ; End of function FindFloor
00015154                            
00015154                            
00015154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015154                            
00015154                            
00015154                            FindFloor2:				; XREF: FindFloor
00015154 6100 FEE6                  		bsr.w	Floor_ChkTile
00015158 3011                       		move.w	(a1),d0
0001515A 3800                       		move.w	d0,d4
0001515C 0240 07FF                  		andi.w	#$7FF,d0
00015160 6700                       		beq.s	loc_14A86
00015162 0B04                       		btst	d5,d4
00015164 6600                       		bne.s	loc_14A94
00015166                            
00015166                            loc_14A86:
00015166 323C 000F                  		move.w	#$F,d1
0001516A 3002                       		move.w	d2,d0
0001516C 0240 000F                  		andi.w	#$F,d0
00015170 9240                       		sub.w	d0,d1
00015172 4E75                       		rts	
00015174                            ; ===========================================================================
00015174                            
00015174                            loc_14A94:
00015174 2478 F796                  		movea.l	($FFFFF796).w,a2
00015178 1032 0000                  		move.b	(a2,d0.w),d0
0001517C 0240 00FF                  		andi.w	#$FF,d0
00015180 67E4                       		beq.s	loc_14A86
00015182 45F9 0000 0000             		lea	(AngleMap).l,a2
00015188 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001518C E948                       		lsl.w	#4,d0
0001518E 3203                       		move.w	d3,d1
00015190 0804 000B                  		btst	#$B,d4
00015194 6700                       		beq.s	loc_14ABA
00015196 4641                       		not.w	d1
00015198 4414                       		neg.b	(a4)
0001519A                            
0001519A                            loc_14ABA:
0001519A 0804 000C                  		btst	#$C,d4
0001519E 6700                       		beq.s	loc_14ACA
000151A0 0614 0040                  		addi.b	#$40,(a4)
000151A4 4414                       		neg.b	(a4)
000151A6 0414 0040                  		subi.b	#$40,(a4)
000151AA                            
000151AA                            loc_14ACA:
000151AA 0241 000F                  		andi.w	#$F,d1
000151AE D240                       		add.w	d0,d1
000151B0 45F9 0000 0000             		lea	(CollArray1).l,a2
000151B6 1032 1000                  		move.b	(a2,d1.w),d0
000151BA 4880                       		ext.w	d0
000151BC BD44                       		eor.w	d6,d4
000151BE 0804 000C                  		btst	#$C,d4
000151C2 6700                       		beq.s	loc_14AE6
000151C4 4440                       		neg.w	d0
000151C6                            
000151C6                            loc_14AE6:
000151C6 4A40                       		tst.w	d0
000151C8 679C                       		beq.s	loc_14A86
000151CA 6B00                       		bmi.s	loc_14AFC
000151CC 3202                       		move.w	d2,d1
000151CE 0241 000F                  		andi.w	#$F,d1
000151D2 D041                       		add.w	d1,d0
000151D4 323C 000F                  		move.w	#$F,d1
000151D8 9240                       		sub.w	d0,d1
000151DA 4E75                       		rts	
000151DC                            ; ===========================================================================
000151DC                            
000151DC                            loc_14AFC:
000151DC 3202                       		move.w	d2,d1
000151DE 0241 000F                  		andi.w	#$F,d1
000151E2 D041                       		add.w	d1,d0
000151E4 6A00 FF80                  		bpl.w	loc_14A86
000151E8 4641                       		not.w	d1
000151EA 4E75                       		rts	
000151EC                            ; End of function FindFloor2
000151EC                            
000151EC                            
000151EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151EC                            
000151EC                            
000151EC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000151EC 6100 FE4E                  		bsr.w	Floor_ChkTile
000151F0 3011                       		move.w	(a1),d0
000151F2 3800                       		move.w	d0,d4
000151F4 0240 07FF                  		andi.w	#$7FF,d0
000151F8 6700                       		beq.s	loc_14B1E
000151FA 0B04                       		btst	d5,d4
000151FC 6600                       		bne.s	loc_14B2C
000151FE                            
000151FE                            loc_14B1E:
000151FE D64B                       		add.w	a3,d3
00015200 6100 0000                  		bsr.w	FindWall2
00015204 964B                       		sub.w	a3,d3
00015206 0641 0010                  		addi.w	#$10,d1
0001520A 4E75                       		rts	
0001520C                            ; ===========================================================================
0001520C                            
0001520C                            loc_14B2C:
0001520C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015210 1032 0000                  		move.b	(a2,d0.w),d0
00015214 0240 00FF                  		andi.w	#$FF,d0
00015218 67E4                       		beq.s	loc_14B1E
0001521A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015220 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015224 E948                       		lsl.w	#4,d0
00015226 3202                       		move.w	d2,d1
00015228 0804 000C                  		btst	#$C,d4
0001522C 6700                       		beq.s	loc_14B5A
0001522E 4641                       		not.w	d1
00015230 0614 0040                  		addi.b	#$40,(a4)
00015234 4414                       		neg.b	(a4)
00015236 0414 0040                  		subi.b	#$40,(a4)
0001523A                            
0001523A                            loc_14B5A:
0001523A 0804 000B                  		btst	#$B,d4
0001523E 6700                       		beq.s	loc_14B62
00015240 4414                       		neg.b	(a4)
00015242                            
00015242                            loc_14B62:
00015242 0241 000F                  		andi.w	#$F,d1
00015246 D240                       		add.w	d0,d1
00015248 45F9 0000 0000             		lea	(CollArray2).l,a2
0001524E 1032 1000                  		move.b	(a2,d1.w),d0
00015252 4880                       		ext.w	d0
00015254 BD44                       		eor.w	d6,d4
00015256 0804 000B                  		btst	#$B,d4
0001525A 6700                       		beq.s	loc_14B7E
0001525C 4440                       		neg.w	d0
0001525E                            
0001525E                            loc_14B7E:
0001525E 4A40                       		tst.w	d0
00015260 679C                       		beq.s	loc_14B1E
00015262 6B00                       		bmi.s	loc_14B9A
00015264 0C00 0010                  		cmpi.b	#$10,d0
00015268 6700                       		beq.s	loc_14BA6
0001526A 3203                       		move.w	d3,d1
0001526C 0241 000F                  		andi.w	#$F,d1
00015270 D041                       		add.w	d1,d0
00015272 323C 000F                  		move.w	#$F,d1
00015276 9240                       		sub.w	d0,d1
00015278 4E75                       		rts	
0001527A                            ; ===========================================================================
0001527A                            
0001527A                            loc_14B9A:
0001527A 3203                       		move.w	d3,d1
0001527C 0241 000F                  		andi.w	#$F,d1
00015280 D041                       		add.w	d1,d0
00015282 6A00 FF7A                  		bpl.w	loc_14B1E
00015286                            
00015286                            loc_14BA6:
00015286 964B                       		sub.w	a3,d3
00015288 6100 0000                  		bsr.w	FindWall2
0001528C D64B                       		add.w	a3,d3
0001528E 0441 0010                  		subi.w	#$10,d1
00015292 4E75                       		rts	
00015294                            ; End of function FindWall
00015294                            
00015294                            
00015294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015294                            
00015294                            
00015294                            FindWall2:				; XREF: FindWall
00015294 6100 FDA6                  		bsr.w	Floor_ChkTile
00015298 3011                       		move.w	(a1),d0
0001529A 3800                       		move.w	d0,d4
0001529C 0240 07FF                  		andi.w	#$7FF,d0
000152A0 6700                       		beq.s	loc_14BC6
000152A2 0B04                       		btst	d5,d4
000152A4 6600                       		bne.s	loc_14BD4
000152A6                            
000152A6                            loc_14BC6:
000152A6 323C 000F                  		move.w	#$F,d1
000152AA 3003                       		move.w	d3,d0
000152AC 0240 000F                  		andi.w	#$F,d0
000152B0 9240                       		sub.w	d0,d1
000152B2 4E75                       		rts	
000152B4                            ; ===========================================================================
000152B4                            
000152B4                            loc_14BD4:
000152B4 2478 F796                  		movea.l	($FFFFF796).w,a2
000152B8 1032 0000                  		move.b	(a2,d0.w),d0
000152BC 0240 00FF                  		andi.w	#$FF,d0
000152C0 67E4                       		beq.s	loc_14BC6
000152C2 45F9 0000 0000             		lea	(AngleMap).l,a2
000152C8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152CC E948                       		lsl.w	#4,d0
000152CE 3202                       		move.w	d2,d1
000152D0 0804 000C                  		btst	#$C,d4
000152D4 6700                       		beq.s	loc_14C02
000152D6 4641                       		not.w	d1
000152D8 0614 0040                  		addi.b	#$40,(a4)
000152DC 4414                       		neg.b	(a4)
000152DE 0414 0040                  		subi.b	#$40,(a4)
000152E2                            
000152E2                            loc_14C02:
000152E2 0804 000B                  		btst	#$B,d4
000152E6 6700                       		beq.s	loc_14C0A
000152E8 4414                       		neg.b	(a4)
000152EA                            
000152EA                            loc_14C0A:
000152EA 0241 000F                  		andi.w	#$F,d1
000152EE D240                       		add.w	d0,d1
000152F0 45F9 0000 0000             		lea	(CollArray2).l,a2
000152F6 1032 1000                  		move.b	(a2,d1.w),d0
000152FA 4880                       		ext.w	d0
000152FC BD44                       		eor.w	d6,d4
000152FE 0804 000B                  		btst	#$B,d4
00015302 6700                       		beq.s	loc_14C26
00015304 4440                       		neg.w	d0
00015306                            
00015306                            loc_14C26:
00015306 4A40                       		tst.w	d0
00015308 679C                       		beq.s	loc_14BC6
0001530A 6B00                       		bmi.s	loc_14C3C
0001530C 3203                       		move.w	d3,d1
0001530E 0241 000F                  		andi.w	#$F,d1
00015312 D041                       		add.w	d1,d0
00015314 323C 000F                  		move.w	#$F,d1
00015318 9240                       		sub.w	d0,d1
0001531A 4E75                       		rts	
0001531C                            ; ===========================================================================
0001531C                            
0001531C                            loc_14C3C:
0001531C 3203                       		move.w	d3,d1
0001531E 0241 000F                  		andi.w	#$F,d1
00015322 D041                       		add.w	d1,d0
00015324 6A00 FF80                  		bpl.w	loc_14BC6
00015328 4641                       		not.w	d1
0001532A 4E75                       		rts	
0001532C                            ; End of function FindWall2
0001532C                            
0001532C                            ; ---------------------------------------------------------------------------
0001532C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001532C                            ; ---------------------------------------------------------------------------
0001532C                            
0001532C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532C                            
0001532C                            
0001532C                            FloorLog_Unk:				; XREF: Level
0001532C 4E75                       		rts	
0001532E                            
0001532E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015334 45F9 0000 0000             		lea	(CollArray1).l,a2
0001533A 363C 00FF                  		move.w	#$FF,d3
0001533E                            
0001533E                            loc_14C5E:
0001533E 7A10                       		moveq	#$10,d5
00015340 343C 000F                  		move.w	#$F,d2
00015344                            
00015344                            loc_14C64:
00015344 7800                       		moveq	#0,d4
00015346 323C 000F                  		move.w	#$F,d1
0001534A                            
0001534A                            loc_14C6A:
0001534A 3019                       		move.w	(a1)+,d0
0001534C EAA8                       		lsr.l	d5,d0
0001534E D944                       		addx.w	d4,d4
00015350 51C9 FFF8                  		dbf	d1,loc_14C6A
00015354                            
00015354 34C4                       		move.w	d4,(a2)+
00015356 92FC 0020                  		suba.w	#$20,a1
0001535A 5345                       		subq.w	#1,d5
0001535C 51CA FFE6                  		dbf	d2,loc_14C64
00015360                            
00015360 D2FC 0020                  		adda.w	#$20,a1
00015364 51CB FFD8                  		dbf	d3,loc_14C5E
00015368                            
00015368 43F9 0000 0000             		lea	(CollArray1).l,a1
0001536E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015374 6100                       		bsr.s	FloorLog_Unk2
00015376 43F9 0000 0000             		lea	(CollArray1).l,a1
0001537C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015382                            
00015382                            ; End of function FloorLog_Unk
00015382                            
00015382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015382                            
00015382                            
00015382                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015382 363C 0FFF                  		move.w	#$FFF,d3
00015386                            
00015386                            loc_14CA6:
00015386 7400                       		moveq	#0,d2
00015388 323C 000F                  		move.w	#$F,d1
0001538C 3019                       		move.w	(a1)+,d0
0001538E 6700                       		beq.s	loc_14CD4
00015390 6B00                       		bmi.s	loc_14CBE
00015392                            
00015392                            loc_14CB2:
00015392 E248                       		lsr.w	#1,d0
00015394 6400                       		bcc.s	loc_14CB8
00015396 5202                       		addq.b	#1,d2
00015398                            
00015398                            loc_14CB8:
00015398 51C9 FFF8                  		dbf	d1,loc_14CB2
0001539C                            
0001539C 6000                       		bra.s	loc_14CD6
0001539E                            ; ===========================================================================
0001539E                            
0001539E                            loc_14CBE:
0001539E 0C40 FFFF                  		cmpi.w	#-1,d0
000153A2 6700                       		beq.s	loc_14CD0
000153A4                            
000153A4                            loc_14CC4:
000153A4 E348                       		lsl.w	#1,d0
000153A6 6400                       		bcc.s	loc_14CCA
000153A8 5302                       		subq.b	#1,d2
000153AA                            
000153AA                            loc_14CCA:
000153AA 51C9 FFF8                  		dbf	d1,loc_14CC4
000153AE                            
000153AE 6000                       		bra.s	loc_14CD6
000153B0                            ; ===========================================================================
000153B0                            
000153B0                            loc_14CD0:
000153B0 303C 0010                  		move.w	#$10,d0
000153B4                            
000153B4                            loc_14CD4:
000153B4 3400                       		move.w	d0,d2
000153B6                            
000153B6                            loc_14CD6:
000153B6 14C2                       		move.b	d2,(a2)+
000153B8 51CB FFCC                  		dbf	d3,loc_14CA6
000153BC                            
000153BC 4E75                       		rts	
000153BE                            
000153BE                            ; End of function FloorLog_Unk2
000153BE                            
000153BE                            
000153BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153BE                            
000153BE                            
000153BE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000153BE 2628 0008                  		move.l	8(a0),d3
000153C2 2428 000C                  		move.l	$C(a0),d2
000153C6 3228 0010                  		move.w	$10(a0),d1
000153CA 48C1                       		ext.l	d1
000153CC E181                       		asl.l	#8,d1
000153CE D681                       		add.l	d1,d3
000153D0 3228 0012                  		move.w	$12(a0),d1
000153D4 48C1                       		ext.l	d1
000153D6 E181                       		asl.l	#8,d1
000153D8 D481                       		add.l	d1,d2
000153DA 4842                       		swap	d2
000153DC 4843                       		swap	d3
000153DE 11C0 F768                  		move.b	d0,($FFFFF768).w
000153E2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000153E6 1200                       		move.b	d0,d1
000153E8 0600 0020                  		addi.b	#$20,d0
000153EC 6A00                       		bpl.s	loc_14D1A
000153EE 1001                       		move.b	d1,d0
000153F0 6A00                       		bpl.s	loc_14D14
000153F2 5300                       		subq.b	#1,d0
000153F4                            
000153F4                            loc_14D14:
000153F4 0600 0020                  		addi.b	#$20,d0
000153F8 6000                       		bra.s	loc_14D24
000153FA                            ; ===========================================================================
000153FA                            
000153FA                            loc_14D1A:
000153FA 1001                       		move.b	d1,d0
000153FC 6A00                       		bpl.s	loc_14D20
000153FE 5200                       		addq.b	#1,d0
00015400                            
00015400                            loc_14D20:
00015400 0600 001F                  		addi.b	#$1F,d0
00015404                            
00015404                            loc_14D24:
00015404 0200 00C0                  		andi.b	#$C0,d0
00015408 6700 0000                  		beq.w	loc_14DF0
0001540C 0C00 0080                  		cmpi.b	#$80,d0
00015410 6700 0000                  		beq.w	loc_14F7C
00015414 0201 0038                  		andi.b	#$38,d1
00015418 6600                       		bne.s	loc_14D3C
0001541A 5042                       		addq.w	#8,d2
0001541C                            
0001541C                            loc_14D3C:
0001541C 0C00 0040                  		cmpi.b	#$40,d0
00015420 6700 0000                  		beq.w	loc_1504A
00015424 6000 0000                  		bra.w	loc_14EBC
00015428                            
00015428                            ; End of function Sonic_WalkSpeed
00015428                            
00015428                            
00015428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015428                            
00015428                            
00015428                            sub_14D48:				; XREF: Sonic_Jump
00015428 11C0 F768                  		move.b	d0,($FFFFF768).w
0001542C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015430 0600 0020                  		addi.b	#$20,d0
00015434 0200 00C0                  		andi.b	#$C0,d0
00015438 0C00 0040                  		cmpi.b	#$40,d0
0001543C 6700 0000                  		beq.w	loc_14FD6
00015440 0C00 0080                  		cmpi.b	#$80,d0
00015444 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015448 0C00 00C0                  		cmpi.b	#$C0,d0
0001544C 6700 0000                  		beq.w	sub_14E50
00015450                            
00015450                            ; End of function sub_14D48
00015450                            
00015450                            ; ---------------------------------------------------------------------------
00015450                            ; Subroutine to	make Sonic land	on the floor after jumping
00015450                            ; ---------------------------------------------------------------------------
00015450                            
00015450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015450                            
00015450                            
00015450                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015450 3428 000C                  		move.w	$C(a0),d2
00015454 3628 0008                  		move.w	8(a0),d3
00015458 7000                       		moveq	#0,d0
0001545A 1028 0016                  		move.b	$16(a0),d0
0001545E 4880                       		ext.w	d0
00015460 D440                       		add.w	d0,d2
00015462 1028 0017                  		move.b	$17(a0),d0
00015466 4880                       		ext.w	d0
00015468 D640                       		add.w	d0,d3
0001546A 49F8 F768                  		lea	($FFFFF768).w,a4
0001546E 367C 0010                  		movea.w	#$10,a3
00015472 3C3C 0000                  		move.w	#0,d6
00015476 7A0D                       		moveq	#$D,d5
00015478 6100 FC34                  		bsr.w	FindFloor
0001547C 3F01                       		move.w	d1,-(sp)
0001547E 3428 000C                  		move.w	$C(a0),d2
00015482 3628 0008                  		move.w	8(a0),d3
00015486 7000                       		moveq	#0,d0
00015488 1028 0016                  		move.b	$16(a0),d0
0001548C 4880                       		ext.w	d0
0001548E D440                       		add.w	d0,d2
00015490 1028 0017                  		move.b	$17(a0),d0
00015494 4880                       		ext.w	d0
00015496 9640                       		sub.w	d0,d3
00015498 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001549C 367C 0010                  		movea.w	#$10,a3
000154A0 3C3C 0000                  		move.w	#0,d6
000154A4 7A0D                       		moveq	#$D,d5
000154A6 6100 FC06                  		bsr.w	FindFloor
000154AA 301F                       		move.w	(sp)+,d0
000154AC 143C 0000                  		move.b	#0,d2
000154B0                            
000154B0                            loc_14DD0:
000154B0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000154B4 B240                       		cmp.w	d0,d1
000154B6 6F00                       		ble.s	loc_14DDE
000154B8 1638 F768                  		move.b	($FFFFF768).w,d3
000154BC C141                       		exg	d0,d1
000154BE                            
000154BE                            loc_14DDE:
000154BE 0803 0000                  		btst	#0,d3
000154C2 6700                       		beq.s	locret_14DE6
000154C4 1602                       		move.b	d2,d3
000154C6                            
000154C6                            locret_14DE6:
000154C6 4E75                       		rts	
000154C8                            
000154C8                            ; End of function Sonic_HitFloor
000154C8                            
000154C8                            ; ===========================================================================
000154C8 3428 000C                  		move.w	$C(a0),d2
000154CC 3628 0008                  		move.w	8(a0),d3
000154D0                            
000154D0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000154D0 0642 000A                  		addi.w	#$A,d2
000154D4 49F8 F768                  		lea	($FFFFF768).w,a4
000154D8 367C 0010                  		movea.w	#$10,a3
000154DC 3C3C 0000                  		move.w	#0,d6
000154E0 7A0E                       		moveq	#$E,d5
000154E2 6100 FBCA                  		bsr.w	FindFloor
000154E6 143C 0000                  		move.b	#0,d2
000154EA                            
000154EA                            loc_14E0A:				; XREF: sub_14EB4
000154EA 1638 F768                  		move.b	($FFFFF768).w,d3
000154EE 0803 0000                  		btst	#0,d3
000154F2 6700                       		beq.s	locret_14E16
000154F4 1602                       		move.b	d2,d3
000154F6                            
000154F6                            locret_14E16:
000154F6 4E75                       		rts	
000154F8                            
000154F8                            ; ---------------------------------------------------------------------------
000154F8                            ; Subroutine allowing objects to interact with the floor
000154F8                            ; ---------------------------------------------------------------------------
000154F8                            
000154F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F8                            
000154F8                            
000154F8                            ObjHitFloor:
000154F8 3628 0008                  		move.w	8(a0),d3
000154FC                            
000154FC                            ; End of function ObjHitFloor
000154FC                            
000154FC                            
000154FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154FC                            
000154FC                            
000154FC                            ObjHitFloor2:
000154FC 3428 000C                  		move.w	$C(a0),d2
00015500 7000                       		moveq	#0,d0
00015502 1028 0016                  		move.b	$16(a0),d0
00015506 4880                       		ext.w	d0
00015508 D440                       		add.w	d0,d2
0001550A 49F8 F768                  		lea	($FFFFF768).w,a4
0001550E 18BC 0000                  		move.b	#0,(a4)
00015512 367C 0010                  		movea.w	#$10,a3
00015516 3C3C 0000                  		move.w	#0,d6
0001551A 7A0D                       		moveq	#$D,d5
0001551C 6100 FB90                  		bsr.w	FindFloor
00015520 1638 F768                  		move.b	($FFFFF768).w,d3
00015524 0803 0000                  		btst	#0,d3
00015528 6700                       		beq.s	locret_14E4E
0001552A 163C 0000                  		move.b	#0,d3
0001552E                            
0001552E                            locret_14E4E:
0001552E 4E75                       		rts	
00015530                            ; End of function ObjHitFloor2
00015530                            
00015530                            
00015530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015530                            
00015530                            
00015530                            sub_14E50:				; XREF: sub_14D48
00015530 3428 000C                  		move.w	$C(a0),d2
00015534 3628 0008                  		move.w	8(a0),d3
00015538 7000                       		moveq	#0,d0
0001553A 1028 0017                  		move.b	$17(a0),d0
0001553E 4880                       		ext.w	d0
00015540 9440                       		sub.w	d0,d2
00015542 1028 0016                  		move.b	$16(a0),d0
00015546 4880                       		ext.w	d0
00015548 D640                       		add.w	d0,d3
0001554A 49F8 F768                  		lea	($FFFFF768).w,a4
0001554E 367C 0010                  		movea.w	#$10,a3
00015552 3C3C 0000                  		move.w	#0,d6
00015556 7A0E                       		moveq	#$E,d5
00015558 6100 FC92                  		bsr.w	FindWall
0001555C 3F01                       		move.w	d1,-(sp)
0001555E 3428 000C                  		move.w	$C(a0),d2
00015562 3628 0008                  		move.w	8(a0),d3
00015566 7000                       		moveq	#0,d0
00015568 1028 0017                  		move.b	$17(a0),d0
0001556C 4880                       		ext.w	d0
0001556E D440                       		add.w	d0,d2
00015570 1028 0016                  		move.b	$16(a0),d0
00015574 4880                       		ext.w	d0
00015576 D640                       		add.w	d0,d3
00015578 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001557C 367C 0010                  		movea.w	#$10,a3
00015580 3C3C 0000                  		move.w	#0,d6
00015584 7A0E                       		moveq	#$E,d5
00015586 6100 FC64                  		bsr.w	FindWall
0001558A 301F                       		move.w	(sp)+,d0
0001558C 143C 00C0                  		move.b	#-$40,d2
00015590 6000 FF1E                  		bra.w	loc_14DD0
00015594                            
00015594                            ; End of function sub_14E50
00015594                            
00015594                            
00015594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015594                            
00015594                            
00015594                            sub_14EB4:				; XREF: Sonic_Floor
00015594 3428 000C                  		move.w	$C(a0),d2
00015598 3628 0008                  		move.w	8(a0),d3
0001559C                            
0001559C                            loc_14EBC:
0001559C 0643 000A                  		addi.w	#$A,d3
000155A0 49F8 F768                  		lea	($FFFFF768).w,a4
000155A4 367C 0010                  		movea.w	#$10,a3
000155A8 3C3C 0000                  		move.w	#0,d6
000155AC 7A0E                       		moveq	#$E,d5
000155AE 6100 FC3C                  		bsr.w	FindWall
000155B2 143C 00C0                  		move.b	#-$40,d2
000155B6 6000 FF32                  		bra.w	loc_14E0A
000155BA                            
000155BA                            ; End of function sub_14EB4
000155BA                            
000155BA                            ; ---------------------------------------------------------------------------
000155BA                            ; Subroutine to	detect when an object hits a wall to its right
000155BA                            ; ---------------------------------------------------------------------------
000155BA                            
000155BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155BA                            
000155BA                            
000155BA                            ObjHitWallRight:
000155BA D668 0008                  		add.w	8(a0),d3
000155BE 3428 000C                  		move.w	$C(a0),d2
000155C2 49F8 F768                  		lea	($FFFFF768).w,a4
000155C6 18BC 0000                  		move.b	#0,(a4)
000155CA 367C 0010                  		movea.w	#$10,a3
000155CE 3C3C 0000                  		move.w	#0,d6
000155D2 7A0E                       		moveq	#$E,d5
000155D4 6100 FC16                  		bsr.w	FindWall
000155D8 1638 F768                  		move.b	($FFFFF768).w,d3
000155DC 0803 0000                  		btst	#0,d3
000155E0 6700                       		beq.s	locret_14F06
000155E2 163C 00C0                  		move.b	#-$40,d3
000155E6                            
000155E6                            locret_14F06:
000155E6 4E75                       		rts	
000155E8                            
000155E8                            ; End of function ObjHitWallRight
000155E8                            
000155E8                            ; ---------------------------------------------------------------------------
000155E8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000155E8                            ; touches them
000155E8                            ; ---------------------------------------------------------------------------
000155E8                            
000155E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155E8                            
000155E8                            
000155E8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000155E8 3428 000C                  		move.w	$C(a0),d2
000155EC 3628 0008                  		move.w	8(a0),d3
000155F0 7000                       		moveq	#0,d0
000155F2 1028 0016                  		move.b	$16(a0),d0
000155F6 4880                       		ext.w	d0
000155F8 9440                       		sub.w	d0,d2
000155FA 0A42 000F                  		eori.w	#$F,d2
000155FE 1028 0017                  		move.b	$17(a0),d0
00015602 4880                       		ext.w	d0
00015604 D640                       		add.w	d0,d3
00015606 49F8 F768                  		lea	($FFFFF768).w,a4
0001560A 367C FFF0                  		movea.w	#-$10,a3
0001560E 3C3C 1000                  		move.w	#$1000,d6
00015612 7A0E                       		moveq	#$E,d5
00015614 6100 FA98                  		bsr.w	FindFloor
00015618 3F01                       		move.w	d1,-(sp)
0001561A 3428 000C                  		move.w	$C(a0),d2
0001561E 3628 0008                  		move.w	8(a0),d3
00015622 7000                       		moveq	#0,d0
00015624 1028 0016                  		move.b	$16(a0),d0
00015628 4880                       		ext.w	d0
0001562A 9440                       		sub.w	d0,d2
0001562C 0A42 000F                  		eori.w	#$F,d2
00015630 1028 0017                  		move.b	$17(a0),d0
00015634 4880                       		ext.w	d0
00015636 9640                       		sub.w	d0,d3
00015638 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001563C 367C FFF0                  		movea.w	#-$10,a3
00015640 3C3C 1000                  		move.w	#$1000,d6
00015644 7A0E                       		moveq	#$E,d5
00015646 6100 FA66                  		bsr.w	FindFloor
0001564A 301F                       		move.w	(sp)+,d0
0001564C 143C 0080                  		move.b	#-$80,d2
00015650 6000 FE5E                  		bra.w	loc_14DD0
00015654                            ; End of function Sonic_DontRunOnWalls
00015654                            
00015654                            ; ===========================================================================
00015654 3428 000C                  		move.w	$C(a0),d2
00015658 3628 0008                  		move.w	8(a0),d3
0001565C                            
0001565C                            loc_14F7C:
0001565C 0442 000A                  		subi.w	#$A,d2
00015660 0A42 000F                  		eori.w	#$F,d2
00015664 49F8 F768                  		lea	($FFFFF768).w,a4
00015668 367C FFF0                  		movea.w	#-$10,a3
0001566C 3C3C 1000                  		move.w	#$1000,d6
00015670 7A0E                       		moveq	#$E,d5
00015672 6100 FA3A                  		bsr.w	FindFloor
00015676 143C 0080                  		move.b	#-$80,d2
0001567A 6000 FE6E                  		bra.w	loc_14E0A
0001567E                            
0001567E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001567E                            
0001567E                            
0001567E                            ObjHitCeiling:
0001567E 3428 000C                  		move.w	$C(a0),d2
00015682 3628 0008                  		move.w	8(a0),d3
00015686 7000                       		moveq	#0,d0
00015688 1028 0016                  		move.b	$16(a0),d0
0001568C 4880                       		ext.w	d0
0001568E 9440                       		sub.w	d0,d2
00015690 0A42 000F                  		eori.w	#$F,d2
00015694 49F8 F768                  		lea	($FFFFF768).w,a4
00015698 367C FFF0                  		movea.w	#-$10,a3
0001569C 3C3C 1000                  		move.w	#$1000,d6
000156A0 7A0E                       		moveq	#$E,d5
000156A2 6100 FA0A                  		bsr.w	FindFloor
000156A6 1638 F768                  		move.b	($FFFFF768).w,d3
000156AA 0803 0000                  		btst	#0,d3
000156AE 6700                       		beq.s	locret_14FD4
000156B0 163C 0080                  		move.b	#-$80,d3
000156B4                            
000156B4                            locret_14FD4:
000156B4 4E75                       		rts	
000156B6                            ; End of function ObjHitCeiling
000156B6                            
000156B6                            ; ===========================================================================
000156B6                            
000156B6                            loc_14FD6:				; XREF: sub_14D48
000156B6 3428 000C                  		move.w	$C(a0),d2
000156BA 3628 0008                  		move.w	8(a0),d3
000156BE 7000                       		moveq	#0,d0
000156C0 1028 0017                  		move.b	$17(a0),d0
000156C4 4880                       		ext.w	d0
000156C6 9440                       		sub.w	d0,d2
000156C8 1028 0016                  		move.b	$16(a0),d0
000156CC 4880                       		ext.w	d0
000156CE 9640                       		sub.w	d0,d3
000156D0 0A43 000F                  		eori.w	#$F,d3
000156D4 49F8 F768                  		lea	($FFFFF768).w,a4
000156D8 367C FFF0                  		movea.w	#-$10,a3
000156DC 3C3C 0800                  		move.w	#$800,d6
000156E0 7A0E                       		moveq	#$E,d5
000156E2 6100 FB08                  		bsr.w	FindWall
000156E6 3F01                       		move.w	d1,-(sp)
000156E8 3428 000C                  		move.w	$C(a0),d2
000156EC 3628 0008                  		move.w	8(a0),d3
000156F0 7000                       		moveq	#0,d0
000156F2 1028 0017                  		move.b	$17(a0),d0
000156F6 4880                       		ext.w	d0
000156F8 D440                       		add.w	d0,d2
000156FA 1028 0016                  		move.b	$16(a0),d0
000156FE 4880                       		ext.w	d0
00015700 9640                       		sub.w	d0,d3
00015702 0A43 000F                  		eori.w	#$F,d3
00015706 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001570A 367C FFF0                  		movea.w	#-$10,a3
0001570E 3C3C 0800                  		move.w	#$800,d6
00015712 7A0E                       		moveq	#$E,d5
00015714 6100 FAD6                  		bsr.w	FindWall
00015718 301F                       		move.w	(sp)+,d0
0001571A 143C 0040                  		move.b	#$40,d2
0001571E 6000 FD90                  		bra.w	loc_14DD0
00015722                            
00015722                            ; ---------------------------------------------------------------------------
00015722                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015722                            ; ---------------------------------------------------------------------------
00015722                            
00015722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015722                            
00015722                            
00015722                            Sonic_HitWall:				; XREF: Sonic_Floor
00015722 3428 000C                  		move.w	$C(a0),d2
00015726 3628 0008                  		move.w	8(a0),d3
0001572A                            
0001572A                            loc_1504A:
0001572A 0443 000A                  		subi.w	#$A,d3
0001572E 0A43 000F                  		eori.w	#$F,d3
00015732 49F8 F768                  		lea	($FFFFF768).w,a4
00015736 367C FFF0                  		movea.w	#-$10,a3
0001573A 3C3C 0800                  		move.w	#$800,d6
0001573E 7A0E                       		moveq	#$E,d5
00015740 6100 FAAA                  		bsr.w	FindWall
00015744 143C 0040                  		move.b	#$40,d2
00015748 6000 FDA0                  		bra.w	loc_14E0A
0001574C                            ; End of function Sonic_HitWall
0001574C                            
0001574C                            ; ---------------------------------------------------------------------------
0001574C                            ; Subroutine to	detect when an object hits a wall to its left
0001574C                            ; ---------------------------------------------------------------------------
0001574C                            
0001574C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001574C                            
0001574C                            
0001574C                            ObjHitWallLeft:
0001574C D668 0008                  		add.w	8(a0),d3
00015750 3428 000C                  		move.w	$C(a0),d2
00015754 49F8 F768                  		lea	($FFFFF768).w,a4
00015758 18BC 0000                  		move.b	#0,(a4)
0001575C 367C FFF0                  		movea.w	#-$10,a3
00015760 3C3C 0800                  		move.w	#$800,d6
00015764 7A0E                       		moveq	#$E,d5
00015766 6100 FA84                  		bsr.w	FindWall
0001576A 1638 F768                  		move.b	($FFFFF768).w,d3
0001576E 0803 0000                  		btst	#0,d3
00015772 6700                       		beq.s	locret_15098
00015774 163C 0040                  		move.b	#$40,d3
00015778                            
00015778                            locret_15098:
00015778 4E75                       		rts	
0001577A                            ; End of function ObjHitWallLeft
0001577A                            
0001577A                            ; ===========================================================================
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            
0001577A                            Obj66:					; XREF: Obj_Index
0001577A 7000                       		moveq	#0,d0
0001577C 1028 0024                  		move.b	$24(a0),d0
00015780 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015784 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015788                            ; ===========================================================================
00015788 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001578A 0000                       		dc.w Obj66_Action-Obj66_Index
0001578C 0000                       		dc.w Obj66_Display-Obj66_Index
0001578E 0000                       		dc.w Obj66_Release-Obj66_Index
00015790                            ; ===========================================================================
00015790                            
00015790                            Obj66_Main:				; XREF: Obj66_Index
00015790 5428 0024                  		addq.b	#2,$24(a0)
00015794 323C 0001                  		move.w	#1,d1
00015798 2248                       		movea.l	a0,a1
0001579A 6000                       		bra.s	Obj66_MakeItem
0001579C                            ; ===========================================================================
0001579C                            
0001579C                            Obj66_Loop:
0001579C 6100 88E6                  		bsr.w	SingleObjLoad
000157A0 6600                       		bne.s	loc_150FE
000157A2 12BC 0066                  		move.b	#$66,0(a1)
000157A6 5829 0024                  		addq.b	#4,$24(a1)
000157AA 3368 0008 0008             		move.w	8(a0),8(a1)
000157B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000157B6 137C 0003 0018             		move.b	#3,$18(a1)
000157BC 137C 0010 001A             		move.b	#$10,$1A(a1)
000157C2                            
000157C2                            Obj66_MakeItem:				; XREF: Obj66_Main
000157C2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000157CA 337C 4348 0002             		move.w	#$4348,2(a1)
000157D0 0029 0004 0001             		ori.b	#4,1(a1)
000157D6 137C 0038 0019             		move.b	#$38,$19(a1)
000157DC                            
000157DC                            loc_150FE:
000157DC 51C9 FFBE                  		dbf	d1,Obj66_Loop
000157E0                            
000157E0 117C 0030 0019             		move.b	#$30,$19(a0)
000157E6 117C 0004 0018             		move.b	#4,$18(a0)
000157EC 317C 003C 0030             		move.w	#$3C,$30(a0)
000157F2 117C 0001 0034             		move.b	#1,$34(a0)
000157F8 1168 0028 0038             		move.b	$28(a0),$38(a0)
000157FE                            
000157FE                            Obj66_Action:				; XREF: Obj66_Index
000157FE 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015802 4A28 0001                  		tst.b	1(a0)
00015806 6A00 0000                  		bpl.w	Obj66_Display
0001580A 323C 0030                  		move.w	#$30,d1
0001580E 3401                       		move.w	d1,d2
00015810 3602                       		move.w	d2,d3
00015812 5243                       		addq.w	#1,d3
00015814 3828 0008                  		move.w	8(a0),d4
00015818 6100 A7B4                  		bsr.w	SolidObject
0001581C 0828 0005 0022             		btst	#5,$22(a0)
00015822 6700 0000                  		beq.w	Obj66_Display
00015826 43F8 D000                  		lea	($FFFFD000).w,a1
0001582A 720E                       		moveq	#$E,d1
0001582C 3029 0008                  		move.w	8(a1),d0
00015830 B068 0008                  		cmp.w	8(a0),d0
00015834 6500                       		bcs.s	Obj66_GrabSonic
00015836 7207                       		moveq	#7,d1
00015838                            
00015838                            Obj66_GrabSonic:
00015838 B228 001A                  		cmp.b	$1A(a0),d1
0001583C 6600                       		bne.s	Obj66_Display
0001583E 1141 0032                  		move.b	d1,$32(a0)
00015842 5828 0024                  		addq.b	#4,$24(a0)
00015846 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001584C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015852 337C 0800 0014             		move.w	#$800,$14(a1)
00015858 337C 0000 0010             		move.w	#0,$10(a1)
0001585E 337C 0000 0012             		move.w	#0,$12(a1)
00015864 08A8 0005 0022             		bclr	#5,$22(a0)
0001586A 08A9 0005 0022             		bclr	#5,$22(a1)
00015870 08E9 0001 0022             		bset	#1,$22(a1)
00015876 3429 0008                  		move.w	8(a1),d2
0001587A 3629 000C                  		move.w	$C(a1),d3
0001587E 6100 0000                  		bsr.w	Obj66_ChgPos
00015882 D569 0008                  		add.w	d2,8(a1)
00015886 D769 000C                  		add.w	d3,$C(a1)
0001588A E0E9 0008                  		asr	8(a1)
0001588E E0E9 000C                  		asr	$C(a1)
00015892                            
00015892                            Obj66_Display:				; XREF: Obj66_Index
00015892 6000 A412                  		bra.w	MarkObjGone
00015896                            ; ===========================================================================
00015896                            
00015896                            Obj66_Release:				; XREF: Obj66_Index
00015896 1028 001A                  		move.b	$1A(a0),d0
0001589A 0C00 0004                  		cmpi.b	#4,d0
0001589E 6700                       		beq.s	loc_151C8
000158A0 0C00 0007                  		cmpi.b	#7,d0
000158A4 6600                       		bne.s	loc_151F8
000158A6                            
000158A6                            loc_151C8:
000158A6 B028 0032                  		cmp.b	$32(a0),d0
000158AA 6700                       		beq.s	loc_151F8
000158AC 43F8 D000                  		lea	($FFFFD000).w,a1
000158B0 337C 0000 0010             		move.w	#0,$10(a1)
000158B6 337C 0800 0012             		move.w	#$800,$12(a1)
000158BC 0C00 0004                  		cmpi.b	#4,d0
000158C0 6700                       		beq.s	loc_151F0
000158C2 337C 0800 0010             		move.w	#$800,$10(a1)
000158C8 337C 0800 0012             		move.w	#$800,$12(a1)
000158CE                            
000158CE                            loc_151F0:
000158CE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000158D2 5928 0024                  		subq.b	#4,$24(a0)
000158D6                            
000158D6                            loc_151F8:
000158D6 6100                       		bsr.s	Obj66_ChkSwitch
000158D8 6100                       		bsr.s	Obj66_ChgPos
000158DA 6000 A3CA                  		bra.w	MarkObjGone
000158DE                            
000158DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158DE                            
000158DE                            
000158DE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000158DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000158E2 7000                       		moveq	#0,d0
000158E4 1028 0038                  		move.b	$38(a0),d0
000158E8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000158EE 6700                       		beq.s	loc_15224	; if not, branch
000158F0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000158F4 6600                       		bne.s	Obj66_Animate	; if yes, branch
000158F6 4428 0034                  		neg.b	$34(a0)
000158FA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015900 6000                       		bra.s	Obj66_Animate
00015902                            ; ===========================================================================
00015902                            
00015902                            loc_15224:
00015902 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015906                            
00015906                            Obj66_Animate:
00015906 5328 001E                  		subq.b	#1,$1E(a0)
0001590A 6A00                       		bpl.s	locret_15246
0001590C 117C 0007 001E             		move.b	#7,$1E(a0)
00015912 1228 0034                  		move.b	$34(a0),d1
00015916 1028 001A                  		move.b	$1A(a0),d0
0001591A D001                       		add.b	d1,d0
0001591C 0200 000F                  		andi.b	#$F,d0
00015920 1140 001A                  		move.b	d0,$1A(a0)
00015924                            
00015924                            locret_15246:
00015924 4E75                       		rts	
00015926                            ; End of function Obj66_ChkSwitch
00015926                            
00015926                            
00015926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015926                            
00015926                            
00015926                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015926 43F8 D000                  		lea	($FFFFD000).w,a1
0001592A 7000                       		moveq	#0,d0
0001592C 1028 001A                  		move.b	$1A(a0),d0
00015930 D040                       		add.w	d0,d0
00015932 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015936 101A                       		move.b	(a2)+,d0
00015938 4880                       		ext.w	d0
0001593A D068 0008                  		add.w	8(a0),d0
0001593E 3340 0008                  		move.w	d0,8(a1)
00015942 101A                       		move.b	(a2)+,d0
00015944 4880                       		ext.w	d0
00015946 D068 000C                  		add.w	$C(a0),d0
0001594A 3340 000C                  		move.w	d0,$C(a1)
0001594E 4E75                       		rts	
00015950                            ; End of function Obj66_ChgPos
00015950                            
00015950                            ; ===========================================================================
00015950 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015954 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015958 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001595C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015960 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015964 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015968 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001596C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015970                            ; ---------------------------------------------------------------------------
00015970                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015970                            ; ---------------------------------------------------------------------------
00015970                            Map_obj66:
00015970                            	include "_maps\obj66.asm"
00015970                            ; ---------------------------------------------------------------------------
00015970                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015970                            ; ---------------------------------------------------------------------------
00015970 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015974 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015978 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001597C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015980 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015984 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015988 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001598C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015990 0000                       		dc.w byte_154A4-Map_obj66
00015992 06                         byte_152B4:	dc.b 6
00015993 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015998 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001599D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000159A2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000159A7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000159AC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000159B1 06                         byte_152D3:	dc.b 6
000159B2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000159B7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000159BC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000159C1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000159C6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000159CB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000159D0 06                         byte_152F2:	dc.b 6
000159D1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000159D6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000159DB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000159E0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000159E5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000159EA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000159EF 06                         byte_15311:	dc.b 6
000159F0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000159F5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000159FA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000159FF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015A04 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015A09 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015A0E 06                         byte_15330:	dc.b 6
00015A0F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015A14 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015A19 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015A1E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015A23 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015A28 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015A2D 06                         byte_1534F:	dc.b 6
00015A2E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015A33 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015A38 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015A3D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015A42 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015A47 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015A4C 06                         byte_1536E:	dc.b 6
00015A4D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015A52 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015A57 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015A5C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015A61 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015A66 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015A6B 06                         byte_1538D:	dc.b 6
00015A6C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015A71 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015A76 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015A7B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015A80 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015A85 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015A8A 06                         byte_153AC:	dc.b 6
00015A8B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015A90 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015A95 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015A9A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015A9F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015AA4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015AA9 06                         byte_153CB:	dc.b 6
00015AAA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015AAF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015AB4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015AB9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015ABE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015AC3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015AC8 06                         byte_153EA:	dc.b 6
00015AC9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015ACE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015AD3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015AD8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015ADD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015AE2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015AE7 06                         byte_15409:	dc.b 6
00015AE8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015AED D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015AF2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015AF7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015AFC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015B01 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015B06 06                         byte_15428:	dc.b 6
00015B07 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015B0C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015B11 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015B16 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015B1B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015B20 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015B25 06                         byte_15447:	dc.b 6
00015B26 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015B2B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015B30 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015B35 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015B3A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015B3F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015B44 06                         byte_15466:	dc.b 6
00015B45 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015B4A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015B4F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015B54 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015B59 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015B5E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015B63 06                         byte_15485:	dc.b 6
00015B64 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015B69 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015B6E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015B73 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015B78 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015B7D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015B82 0C                         byte_154A4:	dc.b $C
00015B83 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015B88 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015B8D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015B92 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015B97 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015B9C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015BA1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015BA6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015BAB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015BB0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015BB5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015BBA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015BC0 00                         		even
00015BC0 00                         		even
00015BC0                            
00015BC0                            ; ===========================================================================
00015BC0                            ; ---------------------------------------------------------------------------
00015BC0                            ; Object 67 - disc that	you run	around (SBZ)
00015BC0                            ; ---------------------------------------------------------------------------
00015BC0                            
00015BC0                            Obj67:					; XREF: Obj_Index
00015BC0 7000                       		moveq	#0,d0
00015BC2 1028 0024                  		move.b	$24(a0),d0
00015BC6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015BCA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015BCE                            ; ===========================================================================
00015BCE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015BD0 0000                       		dc.w Obj67_Action-Obj67_Index
00015BD2                            ; ===========================================================================
00015BD2                            
00015BD2                            Obj67_Main:				; XREF: Obj67_Index
00015BD2 5428 0024                  		addq.b	#2,$24(a0)
00015BD6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015BDE 317C C344 0002             		move.w	#$C344,2(a0)
00015BE4 117C 0004 0001             		move.b	#4,1(a0)
00015BEA 117C 0004 0018             		move.b	#4,$18(a0)
00015BF0 117C 0008 0019             		move.b	#8,$19(a0)
00015BF6 3168 0008 0032             		move.w	8(a0),$32(a0)
00015BFC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015C02 117C 0018 0034             		move.b	#$18,$34(a0)
00015C08 117C 0048 0038             		move.b	#$48,$38(a0)
00015C0E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C12 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C16 6700                       		beq.s	loc_15546
00015C18 117C 0010 0034             		move.b	#$10,$34(a0)
00015C1E 117C 0038 0038             		move.b	#$38,$38(a0)
00015C24                            
00015C24                            loc_15546:
00015C24 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C28 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015C2C 4881                       		ext.w	d1
00015C2E E741                       		asl.w	#3,d1
00015C30 3141 0036                  		move.w	d1,$36(a0)
00015C34 1028 0022                  		move.b	$22(a0),d0
00015C38 E418                       		ror.b	#2,d0
00015C3A 0200 00C0                  		andi.b	#-$40,d0
00015C3E 1140 0026                  		move.b	d0,$26(a0)
00015C42                            
00015C42                            Obj67_Action:				; XREF: Obj67_Index
00015C42 6100 0000                  		bsr.w	Obj67_MoveSonic
00015C46 6100 0000                  		bsr.w	Obj67_MoveSpot
00015C4A 6000 0000                  		bra.w	Obj67_ChkDel
00015C4E                            ; ===========================================================================
00015C4E                            
00015C4E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015C4E 7400                       		moveq	#0,d2
00015C50 1428 0038                  		move.b	$38(a0),d2
00015C54 3602                       		move.w	d2,d3
00015C56 D643                       		add.w	d3,d3
00015C58 43F8 D000                  		lea	($FFFFD000).w,a1
00015C5C 3029 0008                  		move.w	8(a1),d0
00015C60 9068 0032                  		sub.w	$32(a0),d0
00015C64 D042                       		add.w	d2,d0
00015C66 B043                       		cmp.w	d3,d0
00015C68 6400                       		bcc.s	loc_155A8
00015C6A 3229 000C                  		move.w	$C(a1),d1
00015C6E 9268 0030                  		sub.w	$30(a0),d1
00015C72 D242                       		add.w	d2,d1
00015C74 B243                       		cmp.w	d3,d1
00015C76 6400                       		bcc.s	loc_155A8
00015C78 0829 0001 0022             		btst	#1,$22(a1)
00015C7E 6700                       		beq.s	loc_155B8
00015C80 4228 003A                  		clr.b	$3A(a0)
00015C84 4E75                       		rts	
00015C86                            ; ===========================================================================
00015C86                            
00015C86                            loc_155A8:
00015C86 4A28 003A                  		tst.b	$3A(a0)
00015C8A 6700                       		beq.s	locret_155B6
00015C8C 4229 0038                  		clr.b	$38(a1)
00015C90 4228 003A                  		clr.b	$3A(a0)
00015C94                            
00015C94                            locret_155B6:
00015C94 4E75                       		rts	
00015C96                            ; ===========================================================================
00015C96                            
00015C96                            loc_155B8:
00015C96 4A28 003A                  		tst.b	$3A(a0)
00015C9A 6600                       		bne.s	loc_155E2
00015C9C 117C 0001 003A             		move.b	#1,$3A(a0)
00015CA2 0829 0002 0022             		btst	#2,$22(a1)
00015CA8 6600                       		bne.s	loc_155D0
00015CAA 4229 001C                  		clr.b	$1C(a1)
00015CAE                            
00015CAE                            loc_155D0:
00015CAE 08A9 0005 0022             		bclr	#5,$22(a1)
00015CB4 137C 0001 001D             		move.b	#1,$1D(a1)
00015CBA 137C 0001 0038             		move.b	#1,$38(a1)
00015CC0                            
00015CC0                            loc_155E2:
00015CC0 3029 0014                  		move.w	$14(a1),d0
00015CC4 4A68 0036                  		tst.w	$36(a0)
00015CC8 6A00                       		bpl.s	loc_15608
00015CCA 0C40 FC00                  		cmpi.w	#-$400,d0
00015CCE 6F00                       		ble.s	loc_155FA
00015CD0 337C FC00 0014             		move.w	#-$400,$14(a1)
00015CD6 4E75                       		rts	
00015CD8                            ; ===========================================================================
00015CD8                            
00015CD8                            loc_155FA:
00015CD8 0C40 F100                  		cmpi.w	#-$F00,d0
00015CDC 6C00                       		bge.s	locret_15606
00015CDE 337C F100 0014             		move.w	#-$F00,$14(a1)
00015CE4                            
00015CE4                            locret_15606:
00015CE4 4E75                       		rts	
00015CE6                            ; ===========================================================================
00015CE6                            
00015CE6                            loc_15608:
00015CE6 0C40 0400                  		cmpi.w	#$400,d0
00015CEA 6C00                       		bge.s	loc_15616
00015CEC 337C 0400 0014             		move.w	#$400,$14(a1)
00015CF2 4E75                       		rts	
00015CF4                            ; ===========================================================================
00015CF4                            
00015CF4                            loc_15616:
00015CF4 0C40 0F00                  		cmpi.w	#$F00,d0
00015CF8 6F00                       		ble.s	locret_15622
00015CFA 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015D00                            
00015D00                            locret_15622:
00015D00 4E75                       		rts	
00015D02                            ; ===========================================================================
00015D02                            
00015D02                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015D02 3028 0036                  		move.w	$36(a0),d0
00015D06 D168 0026                  		add.w	d0,$26(a0)
00015D0A 1028 0026                  		move.b	$26(a0),d0
00015D0E 4EB9 0000 2C64             		jsr	(CalcSine).l
00015D14 3428 0030                  		move.w	$30(a0),d2
00015D18 3628 0032                  		move.w	$32(a0),d3
00015D1C 7800                       		moveq	#0,d4
00015D1E 1828 0034                  		move.b	$34(a0),d4
00015D22 E14C                       		lsl.w	#8,d4
00015D24 2A04                       		move.l	d4,d5
00015D26 C9C0                       		muls.w	d0,d4
00015D28 4844                       		swap	d4
00015D2A CBC1                       		muls.w	d1,d5
00015D2C 4845                       		swap	d5
00015D2E D842                       		add.w	d2,d4
00015D30 DA43                       		add.w	d3,d5
00015D32 3144 000C                  		move.w	d4,$C(a0)
00015D36 3145 0008                  		move.w	d5,8(a0)
00015D3A 4E75                       		rts	
00015D3C                            ; ===========================================================================
00015D3C                            
00015D3C                            Obj67_ChkDel:				; XREF: Obj67_Action
00015D3C 3028 0032                  		move.w	$32(a0),d0
00015D40 0240 FF80                  		andi.w	#-$80,d0
00015D44 3238 F700                  		move.w	($FFFFF700).w,d1
00015D48 0441 0080                  		subi.w	#$80,d1
00015D4C 0241 FF80                  		andi.w	#-$80,d1
00015D50 9041                       		sub.w	d1,d0
00015D52 0C40 0280                  		cmpi.w	#$280,d0
00015D56 6200                       		bhi.s	Obj67_Delete
00015D58 4EF9 0000 DBFE             		jmp	DisplaySprite
00015D5E                            ; ===========================================================================
00015D5E                            
00015D5E                            Obj67_Delete:
00015D5E 4EF9 0000 DC3A             		jmp	DeleteObject
00015D64                            ; ===========================================================================
00015D64                            ; ---------------------------------------------------------------------------
00015D64                            ; Sprite mappings - disc that you run around (SBZ)
00015D64                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015D64                            ; part of the level tiles.)
00015D64                            ; ---------------------------------------------------------------------------
00015D64                            Map_obj67:
00015D64                            	include "_maps\obj67.asm"
00015D64                            ; ---------------------------------------------------------------------------
00015D64                            ; Sprite mappings - disc that you run around (SBZ)
00015D64                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015D64                            ; part of the level tiles.)
00015D64                            ; ---------------------------------------------------------------------------
00015D64 0000                       		dc.w byte_15688-Map_obj67
00015D66 01                         byte_15688:	dc.b 1
00015D67 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015D6C                            		even
00015D6C                            		even
00015D6C                            
00015D6C                            ; ===========================================================================
00015D6C                            ; ---------------------------------------------------------------------------
00015D6C                            ; Object 68 - conveyor belts (SBZ)
00015D6C                            ; ---------------------------------------------------------------------------
00015D6C                            
00015D6C                            Obj68:					; XREF: Obj_Index
00015D6C 7000                       		moveq	#0,d0
00015D6E 1028 0024                  		move.b	$24(a0),d0
00015D72 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015D76 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015D7A                            ; ===========================================================================
00015D7A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015D7C 0000                       		dc.w Obj68_Action-Obj68_Index
00015D7E                            ; ===========================================================================
00015D7E                            
00015D7E                            Obj68_Main:				; XREF: Obj68_Index
00015D7E 5428 0024                  		addq.b	#2,$24(a0)
00015D82 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015D88 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D8C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015D90 6700                       		beq.s	loc_156BA	; if zero, branch
00015D92 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015D98                            
00015D98                            loc_156BA:
00015D98 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D9C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015DA0 4881                       		ext.w	d1
00015DA2 E841                       		asr.w	#4,d1
00015DA4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015DA8                            
00015DA8                            Obj68_Action:				; XREF: Obj68_Index
00015DA8 6100                       		bsr.s	Obj68_MoveSonic
00015DAA 3028 0008                  		move.w	8(a0),d0
00015DAE 0240 FF80                  		andi.w	#$FF80,d0
00015DB2 3238 F700                  		move.w	($FFFFF700).w,d1
00015DB6 0441 0080                  		subi.w	#$80,d1
00015DBA 0241 FF80                  		andi.w	#$FF80,d1
00015DBE 9041                       		sub.w	d1,d0
00015DC0 0C40 0280                  		cmpi.w	#$280,d0
00015DC4 6200                       		bhi.s	Obj68_Delete
00015DC6 4E75                       		rts	
00015DC8                            ; ===========================================================================
00015DC8                            
00015DC8                            Obj68_Delete:
00015DC8 4EF9 0000 DC3A             		jmp	DeleteObject
00015DCE                            ; ===========================================================================
00015DCE                            
00015DCE                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015DCE 7400                       		moveq	#0,d2
00015DD0 1428 0038                  		move.b	$38(a0),d2
00015DD4 3602                       		move.w	d2,d3
00015DD6 D643                       		add.w	d3,d3
00015DD8 43F8 D000                  		lea	($FFFFD000).w,a1
00015DDC 3029 0008                  		move.w	8(a1),d0
00015DE0 9068 0008                  		sub.w	8(a0),d0
00015DE4 D042                       		add.w	d2,d0
00015DE6 B043                       		cmp.w	d3,d0
00015DE8 6400                       		bcc.s	locret_1572E
00015DEA 3229 000C                  		move.w	$C(a1),d1
00015DEE 9268 000C                  		sub.w	$C(a0),d1
00015DF2 0641 0030                  		addi.w	#$30,d1
00015DF6 0C41 0030                  		cmpi.w	#$30,d1
00015DFA 6400                       		bcc.s	locret_1572E
00015DFC 0829 0001 0022             		btst	#1,$22(a1)
00015E02 6600                       		bne.s	locret_1572E
00015E04 3028 0036                  		move.w	$36(a0),d0
00015E08 D169 0008                  		add.w	d0,8(a1)
00015E0C                            
00015E0C                            locret_1572E:
00015E0C 4E75                       		rts	
00015E0E                            
00015E0E                            ; ===========================================================================
00015E0E                            ; ---------------------------------------------------------------------------
00015E0E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015E0E                            ; ---------------------------------------------------------------------------
00015E0E                            
00015E0E                            Obj69:					; XREF: Obj_Index
00015E0E 7000                       		moveq	#0,d0
00015E10 1028 0024                  		move.b	$24(a0),d0
00015E14 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015E18 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015E1C                            ; ===========================================================================
00015E1C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015E1E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015E20 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015E22                            ; ===========================================================================
00015E22                            
00015E22                            Obj69_Main:				; XREF: Obj69_Index
00015E22 5428 0024                  		addq.b	#2,$24(a0)
00015E26 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015E2E 317C 4492 0002             		move.w	#$4492,2(a0)
00015E34 0028 0004 0001             		ori.b	#4,1(a0)
00015E3A 117C 0080 0019             		move.b	#$80,$19(a0)
00015E40 7000                       		moveq	#0,d0
00015E42 1028 0028                  		move.b	$28(a0),d0
00015E46 0240 000F                  		andi.w	#$F,d0
00015E4A C0FC 003C                  		mulu.w	#$3C,d0
00015E4E 3140 0032                  		move.w	d0,$32(a0)
00015E52 4A28 0028                  		tst.b	$28(a0)
00015E56 6A00                       		bpl.s	Obj69_Trapdoor
00015E58 5428 0024                  		addq.b	#2,$24(a0)
00015E5C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015E64 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015E6A 117C 0010 0019             		move.b	#$10,$19(a0)
00015E70 117C 0002 001C             		move.b	#2,$1C(a0)
00015E76 7000                       		moveq	#0,d0
00015E78 1028 0028                  		move.b	$28(a0),d0	; get object type
00015E7C 3200                       		move.w	d0,d1
00015E7E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015E82 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015E86 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015E8A 3140 0032                  		move.w	d0,$32(a0)
00015E8E 0241 0070                  		andi.w	#$70,d1
00015E92 0641 0010                  		addi.w	#$10,d1
00015E96 E549                       		lsl.w	#2,d1
00015E98 5341                       		subq.w	#1,d1
00015E9A 3141 0036                  		move.w	d1,$36(a0)
00015E9E 6000                       		bra.s	Obj69_Spinner
00015EA0                            ; ===========================================================================
00015EA0                            
00015EA0                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015EA0 5368 0030                  		subq.w	#1,$30(a0)
00015EA4 6A00                       		bpl.s	Obj69_Animate
00015EA6 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015EAC 0868 0000 001C             		bchg	#0,$1C(a0)
00015EB2 4A28 0001                  		tst.b	1(a0)
00015EB6 6A00                       		bpl.s	Obj69_Animate
00015EB8 303C 00BB                  		move.w	#$BB,d0
00015EBC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00015EC2                            
00015EC2                            Obj69_Animate:
00015EC2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015EC8 4EB9 0000 ACC8             		jsr	AnimateSprite
00015ECE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015ED2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015ED4 323C 004B                  		move.w	#$4B,d1
00015ED8 343C 000C                  		move.w	#$C,d2
00015EDC 3602                       		move.w	d2,d3
00015EDE 5243                       		addq.w	#1,d3
00015EE0 3828 0008                  		move.w	8(a0),d4
00015EE4 6100 A0E8                  		bsr.w	SolidObject
00015EE8 6000 9DBC                  		bra.w	MarkObjGone
00015EEC                            ; ===========================================================================
00015EEC                            
00015EEC                            Obj69_NotSolid:
00015EEC 0828 0003 0022             		btst	#3,$22(a0)
00015EF2 6700                       		beq.s	Obj69_Display
00015EF4 43F8 D000                  		lea	($FFFFD000).w,a1
00015EF8 08A9 0003 0022             		bclr	#3,$22(a1)
00015EFE 08A8 0003 0022             		bclr	#3,$22(a0)
00015F04 4228 0025                  		clr.b	$25(a0)
00015F08                            
00015F08                            Obj69_Display:
00015F08 6000 9D9C                  		bra.w	MarkObjGone
00015F0C                            ; ===========================================================================
00015F0C                            
00015F0C                            Obj69_Spinner:				; XREF: Obj69_Index
00015F0C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F10 C068 0036                  		and.w	$36(a0),d0
00015F14 6600                       		bne.s	Obj69_Delay
00015F16 117C 0001 0034             		move.b	#1,$34(a0)
00015F1C                            
00015F1C                            Obj69_Delay:
00015F1C 4A28 0034                  		tst.b	$34(a0)
00015F20 6700                       		beq.s	Obj69_Animate2
00015F22 5368 0030                  		subq.w	#1,$30(a0)
00015F26 6A00                       		bpl.s	Obj69_Animate2
00015F28 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015F2E 4228 0034                  		clr.b	$34(a0)
00015F32 0868 0000 001C             		bchg	#0,$1C(a0)
00015F38                            
00015F38                            Obj69_Animate2:
00015F38 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015F3E 4EB9 0000 ACC8             		jsr	AnimateSprite
00015F44 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015F48 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015F4A 323C 001B                  		move.w	#$1B,d1
00015F4E 343C 0007                  		move.w	#7,d2
00015F52 3602                       		move.w	d2,d3
00015F54 5243                       		addq.w	#1,d3
00015F56 3828 0008                  		move.w	8(a0),d4
00015F5A 6100 A072                  		bsr.w	SolidObject
00015F5E 6000 9D46                  		bra.w	MarkObjGone
00015F62                            ; ===========================================================================
00015F62                            
00015F62                            Obj69_NotSolid2:
00015F62 0828 0003 0022             		btst	#3,$22(a0)
00015F68 6700                       		beq.s	Obj69_Display2
00015F6A 43F8 D000                  		lea	($FFFFD000).w,a1
00015F6E 08A9 0003 0022             		bclr	#3,$22(a1)
00015F74 08A8 0003 0022             		bclr	#3,$22(a0)
00015F7A 4228 0025                  		clr.b	$25(a0)
00015F7E                            
00015F7E                            Obj69_Display2:
00015F7E 6000 9D26                  		bra.w	MarkObjGone
00015F82                            ; ===========================================================================
00015F82                            Ani_obj69:
00015F82                            	include "_anim\obj69.asm"
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            ; Animation script - trapdoor (SBZ)
00015F82                            ; ---------------------------------------------------------------------------
00015F82 0000                       		dc.w byte_158AC-Ani_obj69
00015F84 0000                       		dc.w byte_158B2-Ani_obj69
00015F86 0000                       		dc.w byte_158B8-Ani_obj69
00015F88 0000                       		dc.w byte_158CC-Ani_obj69
00015F8A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015F90 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015F96 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015FA3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015FAA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015FB7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015FBE                            		even
00015FBE                            		even
00015FBE                            
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            ; Sprite mappings - trapdoor (SBZ)
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            Map_obj69:
00015FBE                            	include "_maps\obj69.asm"
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            ; Sprite mappings - trapdoor (SBZ)
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE 0000                       		dc.w byte_158E6-Map_obj69
00015FC0 0000                       		dc.w byte_158FB-Map_obj69
00015FC2 0000                       		dc.w byte_15924-Map_obj69
00015FC4 04                         byte_158E6:	dc.b 4
00015FC5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015FCA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015FCF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015FD4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015FD9 08                         byte_158FB:	dc.b 8
00015FDA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015FDF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015FE4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015FE9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015FEE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015FF3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015FF8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015FFD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016002 04                         byte_15924:	dc.b 4
00016003 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016008 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001600D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016012 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016018 00                         		even
00016018 00                         		even
00016018                            
00016018                            ; ---------------------------------------------------------------------------
00016018                            ; Sprite mappings - spinning platforms (SBZ)
00016018                            ; ---------------------------------------------------------------------------
00016018                            Map_obj69a:
00016018                            	include "_maps\obj69a.asm"
00016018                            ; ---------------------------------------------------------------------------
00016018                            ; Sprite mappings - spinning platforms (SBZ)
00016018                            ; ---------------------------------------------------------------------------
00016018 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001601C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016020 0000                       		dc.w byte_15970-Map_obj69a
00016022 02                         byte_15944:	dc.b 2
00016023 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016028 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001602D 02                         byte_1594F:	dc.b 2
0001602E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016033 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016038 02                         byte_1595A:	dc.b 2
00016039 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001603E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016043 02                         byte_15965:	dc.b 2
00016044 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016049 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001604E 02                         byte_15970:	dc.b 2
0001604F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016054 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001605A 00                         		even
0001605A 00                         		even
0001605A                            
0001605A                            ; ===========================================================================
0001605A                            ; ---------------------------------------------------------------------------
0001605A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001605A                            ; ---------------------------------------------------------------------------
0001605A                            
0001605A                            Obj6A:					; XREF: Obj_Index
0001605A 7000                       		moveq	#0,d0
0001605C 1028 0024                  		move.b	$24(a0),d0
00016060 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016064 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016068                            ; ===========================================================================
00016068 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001606A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001606C                            ; ===========================================================================
0001606C                            
0001606C                            Obj6A_Main:				; XREF: Obj6A_Index
0001606C 5428 0024                  		addq.b	#2,$24(a0)
00016070 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016078 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001607E 117C 0004 0001             		move.b	#4,1(a0)
00016084 117C 0004 0018             		move.b	#4,$18(a0)
0001608A 117C 0020 0019             		move.b	#$20,$19(a0)
00016090 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016096 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001609C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000160A2 6400                       		bcc.s	Obj6A_Action
000160A4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160AA                            
000160AA                            Obj6A_Action:				; XREF: Obj6A_Index
000160AA 7000                       		moveq	#0,d0
000160AC 1028 0028                  		move.b	$28(a0),d0
000160B0 0240 0007                  		andi.w	#7,d0
000160B4 D040                       		add.w	d0,d0
000160B6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000160BA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000160BE 3028 003A                  		move.w	$3A(a0),d0
000160C2 0240 FF80                  		andi.w	#$FF80,d0
000160C6 3238 F700                  		move.w	($FFFFF700).w,d1
000160CA 0441 0080                  		subi.w	#$80,d1
000160CE 0241 FF80                  		andi.w	#$FF80,d1
000160D2 9041                       		sub.w	d1,d0
000160D4 0C40 0280                  		cmpi.w	#$280,d0
000160D8 6200                       		bhi.s	Obj6A_Delete
000160DA 4EF9 0000 DBFE             		jmp	DisplaySprite
000160E0                            ; ===========================================================================
000160E0                            
000160E0                            Obj6A_Delete:
000160E0 4EF9 0000 DC3A             		jmp	DeleteObject
000160E6                            ; ===========================================================================
000160E6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000160EA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000160EE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000160F0                            ; ===========================================================================
000160F0                            
000160F0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000160F0 4E75                       		rts	
000160F2                            ; ===========================================================================
000160F2                            
000160F2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000160F2 323C 0060                  		move.w	#$60,d1
000160F6 7000                       		moveq	#0,d0
000160F8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000160FC 0828 0000 0022             		btst	#0,$22(a0)
00016102 6700                       		beq.s	Obj6A_Animate01
00016104 4440                       		neg.w	d0
00016106 D041                       		add.w	d1,d0
00016108                            
00016108                            Obj6A_Animate01:
00016108 3228 003A                  		move.w	$3A(a0),d1
0001610C 9240                       		sub.w	d0,d1
0001610E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016112 5328 001E                  		subq.b	#1,$1E(a0)
00016116 6A00                       		bpl.s	loc_15A46
00016118 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001611E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016124                            
00016124                            loc_15A46:
00016124 4A28 0001                  		tst.b	1(a0)
00016128 6A00                       		bpl.s	locret_15A60
0001612A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001612E 0240 000F                  		andi.w	#$F,d0
00016132 6600                       		bne.s	locret_15A60
00016134 303C 00B0                  		move.w	#$B0,d0
00016138 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001613E                            
0001613E                            locret_15A60:
0001613E 4E75                       		rts	
00016140                            ; ===========================================================================
00016140                            
00016140                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016140 323C 0030                  		move.w	#$30,d1
00016144 7000                       		moveq	#0,d0
00016146 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001614A 0828 0000 0022             		btst	#0,$22(a0)
00016150 6700                       		beq.s	Obj6A_Animate02
00016152 4440                       		neg.w	d0
00016154 0640 0080                  		addi.w	#$80,d0
00016158                            
00016158                            Obj6A_Animate02:
00016158 3228 0038                  		move.w	$38(a0),d1
0001615C 9240                       		sub.w	d0,d1
0001615E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016162 5328 001E                  		subq.b	#1,$1E(a0)
00016166 6A00                       		bpl.s	loc_15A96
00016168 117C 0002 001E             		move.b	#2,$1E(a0)
0001616E 0868 0000 001A             		bchg	#0,$1A(a0)
00016174                            
00016174                            loc_15A96:
00016174 4A28 0001                  		tst.b	1(a0)
00016178 6A00                       		bpl.s	locret_15AB0
0001617A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001617E 0C00 0018                  		cmpi.b	#$18,d0
00016182 6600                       		bne.s	locret_15AB0
00016184 303C 00B0                  		move.w	#$B0,d0
00016188 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001618E                            
0001618E                            locret_15AB0:
0001618E 4E75                       		rts	
00016190                            ; ===========================================================================
00016190                            
00016190                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016190 4A28 003D                  		tst.b	$3D(a0)
00016194 6600                       		bne.s	Obj6A_Animate03
00016196 3038 D008                  		move.w	($FFFFD008).w,d0
0001619A 0440 00C0                  		subi.w	#$C0,d0
0001619E 6500                       		bcs.s	loc_15B02
000161A0 9068 0008                  		sub.w	8(a0),d0
000161A4 6500                       		bcs.s	loc_15B02
000161A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000161AA 0440 0080                  		subi.w	#$80,d0
000161AE B068 000C                  		cmp.w	$C(a0),d0
000161B2 6400                       		bcc.s	locret_15B04
000161B4 0640 0100                  		addi.w	#$100,d0
000161B8 B068 000C                  		cmp.w	$C(a0),d0
000161BC 6500                       		bcs.s	locret_15B04
000161BE 117C 0001 003D             		move.b	#1,$3D(a0)
000161C4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000161CA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000161D0 117C 0002 001A             		move.b	#2,$1A(a0)
000161D6 303C 00B0                  		move.w	#$B0,d0
000161DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000161E0                            
000161E0                            loc_15B02:
000161E0 588F                       		addq.l	#4,sp
000161E2                            
000161E2                            locret_15B04:
000161E2 4E75                       		rts	
000161E4                            ; ===========================================================================
000161E4                            
000161E4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000161E4 4EB9 0000 DBD8             		jsr	SpeedToPos
000161EA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000161F0 5328 001E                  		subq.b	#1,$1E(a0)
000161F4 6A00                       		bpl.s	locret_15B24
000161F6 117C 0002 001E             		move.b	#2,$1E(a0)
000161FC 0868 0000 001A             		bchg	#0,$1A(a0)
00016202                            
00016202                            locret_15B24:
00016202 4E75                       		rts	
00016204                            ; ===========================================================================
00016204                            
00016204                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016204 4A28 003D                  		tst.b	$3D(a0)
00016208 6600                       		bne.s	Obj6A_Animate04
0001620A 3038 D008                  		move.w	($FFFFD008).w,d0
0001620E 0640 00E0                  		addi.w	#$E0,d0
00016212 9068 0008                  		sub.w	8(a0),d0
00016216 6400                       		bcc.s	loc_15B74
00016218 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001621C 0440 0080                  		subi.w	#$80,d0
00016220 B068 000C                  		cmp.w	$C(a0),d0
00016224 6400                       		bcc.s	locret_15B76
00016226 0640 0100                  		addi.w	#$100,d0
0001622A B068 000C                  		cmp.w	$C(a0),d0
0001622E 6500                       		bcs.s	locret_15B76
00016230 117C 0001 003D             		move.b	#1,$3D(a0)
00016236 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001623C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016242 117C 0002 001A             		move.b	#2,$1A(a0)
00016248 303C 00B0                  		move.w	#$B0,d0
0001624C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016252                            
00016252                            loc_15B74:
00016252 588F                       		addq.l	#4,sp
00016254                            
00016254                            locret_15B76:
00016254 4E75                       		rts	
00016256                            ; ===========================================================================
00016256                            
00016256                            Obj6A_Animate04:
00016256 4EB9 0000 DBD8             		jsr	SpeedToPos
0001625C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016262 5328 001E                  		subq.b	#1,$1E(a0)
00016266 6A00                       		bpl.s	locret_15B96
00016268 117C 0002 001E             		move.b	#2,$1E(a0)
0001626E 0868 0000 001A             		bchg	#0,$1A(a0)
00016274                            
00016274                            locret_15B96:
00016274 4E75                       		rts	
00016276                            ; ===========================================================================
00016276                            ; ---------------------------------------------------------------------------
00016276                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016276                            ; ---------------------------------------------------------------------------
00016276                            Map_obj6A:
00016276                            	include "_maps\obj6A.asm"
00016276                            ; ---------------------------------------------------------------------------
00016276                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016276                            ; ---------------------------------------------------------------------------
00016276 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001627A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001627E 07                         byte_15BA0:	dc.b 7
0001627F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016284 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016289 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001628E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016293 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016298 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001629D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000162A2 07                         byte_15BC4:	dc.b 7
000162A3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000162A8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000162AD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000162B2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000162B7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000162BC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000162C1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000162C6 04                         byte_15BE8:	dc.b 4
000162C7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000162CC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000162D1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000162D6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000162DB 04                         byte_15BFD:	dc.b 4
000162DC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000162E1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000162E6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000162EB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000162F0                            		even
000162F0                            		even
000162F0                            
000162F0                            ; ===========================================================================
000162F0                            ; ---------------------------------------------------------------------------
000162F0                            ; Object 6B - stomper (SBZ)
000162F0                            ; ---------------------------------------------------------------------------
000162F0                            
000162F0                            Obj6B:					; XREF: Obj_Index
000162F0 7000                       		moveq	#0,d0
000162F2 1028 0024                  		move.b	$24(a0),d0
000162F6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000162FA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000162FE                            ; ===========================================================================
000162FE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016300 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016302                            
00016302 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016306 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001630A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001630E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016312 8040 0005                  		dc.b  $80, $40,	  0,   5
00016316                            ; ===========================================================================
00016316                            
00016316                            Obj6B_Main:				; XREF: Obj6B_Index
00016316 5428 0024                  		addq.b	#2,$24(a0)
0001631A 7000                       		moveq	#0,d0
0001631C 1028 0028                  		move.b	$28(a0),d0
00016320 E448                       		lsr.w	#2,d0
00016322 0240 001C                  		andi.w	#$1C,d0
00016326 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001632A 115B 0019                  		move.b	(a3)+,$19(a0)
0001632E 115B 0016                  		move.b	(a3)+,$16(a0)
00016332 E448                       		lsr.w	#2,d0
00016334 1140 001A                  		move.b	d0,$1A(a0)
00016338 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016340 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016346 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001634C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001634E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016354 6700                       		beq.s	Obj6B_SBZ3
00016356                            
00016356                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016356 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001635A 7000                       		moveq	#0,d0
0001635C 1028 0023                  		move.b	$23(a0),d0
00016360 6700                       		beq.s	Obj6B_Delete
00016362 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016368                            
00016368                            Obj6B_Delete:
00016368 4EF9 0000 DC3A             		jmp	DeleteObject
0001636E                            ; ===========================================================================
0001636E                            
0001636E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001636E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016374 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001637A 6600                       		bne.s	Obj6B_SBZ12
0001637C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016380 7000                       		moveq	#0,d0
00016382 1028 0023                  		move.b	$23(a0),d0
00016386 6700                       		beq.s	Obj6B_SBZ12
00016388 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001638E 6700                       		beq.s	Obj6B_SBZ12
00016390 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016394 60C0                       		bra.s	Obj6B_ChkGone
00016396                            ; ===========================================================================
00016396                            
00016396                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016396 0028 0004 0001             		ori.b	#4,1(a0)
0001639C 117C 0004 0018             		move.b	#4,$18(a0)
000163A2 3168 0008 0034             		move.w	8(a0),$34(a0)
000163A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000163AE 7000                       		moveq	#0,d0
000163B0 101B                       		move.b	(a3)+,d0
000163B2 3140 003C                  		move.w	d0,$3C(a0)
000163B6 7000                       		moveq	#0,d0
000163B8 1028 0028                  		move.b	$28(a0),d0
000163BC 6A00                       		bpl.s	Obj6B_Action
000163BE 0200 000F                  		andi.b	#$F,d0
000163C2 1140 003E                  		move.b	d0,$3E(a0)
000163C6 1153 0028                  		move.b	(a3),$28(a0)
000163CA 0C13 0005                  		cmpi.b	#5,(a3)
000163CE 6600                       		bne.s	Obj6B_ChkGone2
000163D0 08E8 0004 0001             		bset	#4,1(a0)
000163D6                            
000163D6                            Obj6B_ChkGone2:
000163D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163DA 7000                       		moveq	#0,d0
000163DC 1028 0023                  		move.b	$23(a0),d0
000163E0 6700                       		beq.s	Obj6B_Action
000163E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000163E8                            
000163E8                            Obj6B_Action:				; XREF: Obj6B_Index
000163E8 3F28 0008                  		move.w	8(a0),-(sp)
000163EC 7000                       		moveq	#0,d0
000163EE 1028 0028                  		move.b	$28(a0),d0
000163F2 0240 000F                  		andi.w	#$F,d0
000163F6 D040                       		add.w	d0,d0
000163F8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000163FC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016400 381F                       		move.w	(sp)+,d4
00016402 4A28 0001                  		tst.b	1(a0)
00016406 6A00                       		bpl.s	Obj6B_ChkDel
00016408 7200                       		moveq	#0,d1
0001640A 1228 0019                  		move.b	$19(a0),d1
0001640E 0641 000B                  		addi.w	#$B,d1
00016412 7400                       		moveq	#0,d2
00016414 1428 0016                  		move.b	$16(a0),d2
00016418 3602                       		move.w	d2,d3
0001641A 5243                       		addq.w	#1,d3
0001641C 6100 9BB0                  		bsr.w	SolidObject
00016420                            
00016420                            Obj6B_ChkDel:
00016420 3028 0034                  		move.w	$34(a0),d0
00016424 0240 FF80                  		andi.w	#$FF80,d0
00016428 3238 F700                  		move.w	($FFFFF700).w,d1
0001642C 0441 0080                  		subi.w	#$80,d1
00016430 0241 FF80                  		andi.w	#$FF80,d1
00016434 9041                       		sub.w	d1,d0
00016436 0C40 0280                  		cmpi.w	#$280,d0
0001643A 6200                       		bhi.s	loc_15D64
0001643C 4EF9 0000 DBFE             		jmp	DisplaySprite
00016442                            ; ===========================================================================
00016442                            
00016442                            loc_15D64:
00016442 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016448 6600                       		bne.s	Obj6B_Delete2
0001644A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001644E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016452 7000                       		moveq	#0,d0
00016454 1028 0023                  		move.b	$23(a0),d0
00016458 6700                       		beq.s	Obj6B_Delete2
0001645A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016460                            
00016460                            Obj6B_Delete2:
00016460 4EF9 0000 DC3A             		jmp	DeleteObject
00016466                            ; ===========================================================================
00016466 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001646A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001646E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016472                            ; ===========================================================================
00016472                            
00016472                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016472 4E75                       		rts	
00016474                            ; ===========================================================================
00016474                            
00016474                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016474 4A28 0038                  		tst.b	$38(a0)
00016478 6600                       		bne.s	loc_15DB4
0001647A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001647E 7000                       		moveq	#0,d0
00016480 1028 003E                  		move.b	$3E(a0),d0
00016484 0832 0000 0000             		btst	#0,(a2,d0.w)
0001648A 6700                       		beq.s	loc_15DC2
0001648C 117C 0001 0038             		move.b	#1,$38(a0)
00016492                            
00016492                            loc_15DB4:
00016492 3028 003C                  		move.w	$3C(a0),d0
00016496 B068 003A                  		cmp.w	$3A(a0),d0
0001649A 6700                       		beq.s	loc_15DE0
0001649C 5468 003A                  		addq.w	#2,$3A(a0)
000164A0                            
000164A0                            loc_15DC2:
000164A0 3028 003A                  		move.w	$3A(a0),d0
000164A4 0828 0000 0022             		btst	#0,$22(a0)
000164AA 6700                       		beq.s	loc_15DD4
000164AC 4440                       		neg.w	d0
000164AE 0640 0080                  		addi.w	#$80,d0
000164B2                            
000164B2                            loc_15DD4:
000164B2 3228 0034                  		move.w	$34(a0),d1
000164B6 9240                       		sub.w	d0,d1
000164B8 3141 0008                  		move.w	d1,8(a0)
000164BC 4E75                       		rts	
000164BE                            ; ===========================================================================
000164BE                            
000164BE                            loc_15DE0:
000164BE 5228 0028                  		addq.b	#1,$28(a0)
000164C2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000164C8 4228 0038                  		clr.b	$38(a0)
000164CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164D0 7000                       		moveq	#0,d0
000164D2 1028 0023                  		move.b	$23(a0),d0
000164D6 67C8                       		beq.s	loc_15DC2
000164D8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000164DE 60C0                       		bra.s	loc_15DC2
000164E0                            ; ===========================================================================
000164E0                            
000164E0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000164E0 4A28 0038                  		tst.b	$38(a0)
000164E4 6600                       		bne.s	loc_15E14
000164E6 5368 0036                  		subq.w	#1,$36(a0)
000164EA 6600                       		bne.s	loc_15E1E
000164EC 117C 0001 0038             		move.b	#1,$38(a0)
000164F2                            
000164F2                            loc_15E14:
000164F2 4A68 003A                  		tst.w	$3A(a0)
000164F6 6700                       		beq.s	loc_15E3C
000164F8 5568 003A                  		subq.w	#2,$3A(a0)
000164FC                            
000164FC                            loc_15E1E:
000164FC 3028 003A                  		move.w	$3A(a0),d0
00016500 0828 0000 0022             		btst	#0,$22(a0)
00016506 6700                       		beq.s	loc_15E30
00016508 4440                       		neg.w	d0
0001650A 0640 0080                  		addi.w	#$80,d0
0001650E                            
0001650E                            loc_15E30:
0001650E 3228 0034                  		move.w	$34(a0),d1
00016512 9240                       		sub.w	d0,d1
00016514 3141 0008                  		move.w	d1,8(a0)
00016518 4E75                       		rts	
0001651A                            ; ===========================================================================
0001651A                            
0001651A                            loc_15E3C:
0001651A 5328 0028                  		subq.b	#1,$28(a0)
0001651E 4228 0038                  		clr.b	$38(a0)
00016522 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016526 7000                       		moveq	#0,d0
00016528 1028 0023                  		move.b	$23(a0),d0
0001652C 67CE                       		beq.s	loc_15E1E
0001652E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016534 60C6                       		bra.s	loc_15E1E
00016536                            ; ===========================================================================
00016536                            
00016536                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016536 4A28 0038                  		tst.b	$38(a0)
0001653A 6600                       		bne.s	loc_15E7C
0001653C 4A68 003A                  		tst.w	$3A(a0)
00016540 6700                       		beq.s	loc_15E6A
00016542 5368 003A                  		subq.w	#1,$3A(a0)
00016546 6000                       		bra.s	loc_15E8E
00016548                            ; ===========================================================================
00016548                            
00016548                            loc_15E6A:
00016548 5368 0036                  		subq.w	#1,$36(a0)
0001654C 6A00                       		bpl.s	loc_15E8E
0001654E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016554 117C 0001 0038             		move.b	#1,$38(a0)
0001655A                            
0001655A                            loc_15E7C:
0001655A 5068 003A                  		addq.w	#8,$3A(a0)
0001655E 3028 003A                  		move.w	$3A(a0),d0
00016562 B068 003C                  		cmp.w	$3C(a0),d0
00016566 6600                       		bne.s	loc_15E8E
00016568 4228 0038                  		clr.b	$38(a0)
0001656C                            
0001656C                            loc_15E8E:
0001656C 3028 003A                  		move.w	$3A(a0),d0
00016570 0828 0000 0022             		btst	#0,$22(a0)
00016576 6700                       		beq.s	loc_15EA0
00016578 4440                       		neg.w	d0
0001657A 0640 0038                  		addi.w	#$38,d0
0001657E                            
0001657E                            loc_15EA0:
0001657E 3228 0030                  		move.w	$30(a0),d1
00016582 D240                       		add.w	d0,d1
00016584 3141 000C                  		move.w	d1,$C(a0)
00016588 4E75                       		rts	
0001658A                            ; ===========================================================================
0001658A                            
0001658A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001658A 4A28 0038                  		tst.b	$38(a0)
0001658E 6600                       		bne.s	loc_15ED0
00016590 4A68 003A                  		tst.w	$3A(a0)
00016594 6700                       		beq.s	loc_15EBE
00016596 5168 003A                  		subq.w	#8,$3A(a0)
0001659A 6000                       		bra.s	loc_15EF0
0001659C                            ; ===========================================================================
0001659C                            
0001659C                            loc_15EBE:
0001659C 5368 0036                  		subq.w	#1,$36(a0)
000165A0 6A00                       		bpl.s	loc_15EF0
000165A2 317C 003C 0036             		move.w	#$3C,$36(a0)
000165A8 117C 0001 0038             		move.b	#1,$38(a0)
000165AE                            
000165AE                            loc_15ED0:
000165AE 3028 003A                  		move.w	$3A(a0),d0
000165B2 B068 003C                  		cmp.w	$3C(a0),d0
000165B6 6700                       		beq.s	loc_15EE0
000165B8 5068 003A                  		addq.w	#8,$3A(a0)
000165BC 6000                       		bra.s	loc_15EF0
000165BE                            ; ===========================================================================
000165BE                            
000165BE                            loc_15EE0:
000165BE 5368 0036                  		subq.w	#1,$36(a0)
000165C2 6A00                       		bpl.s	loc_15EF0
000165C4 317C 003C 0036             		move.w	#$3C,$36(a0)
000165CA 4228 0038                  		clr.b	$38(a0)
000165CE                            
000165CE                            loc_15EF0:
000165CE 3028 003A                  		move.w	$3A(a0),d0
000165D2 0828 0000 0022             		btst	#0,$22(a0)
000165D8 6700                       		beq.s	loc_15F02
000165DA 4440                       		neg.w	d0
000165DC 0640 0038                  		addi.w	#$38,d0
000165E0                            
000165E0                            loc_15F02:
000165E0 3228 0030                  		move.w	$30(a0),d1
000165E4 D240                       		add.w	d0,d1
000165E6 3141 000C                  		move.w	d1,$C(a0)
000165EA 4E75                       		rts	
000165EC                            ; ===========================================================================
000165EC                            
000165EC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000165EC 4A28 0038                  		tst.b	$38(a0)
000165F0 6600                       		bne.s	loc_15F3E
000165F2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000165F6 7000                       		moveq	#0,d0
000165F8 1028 003E                  		move.b	$3E(a0),d0
000165FC 0832 0000 0000             		btst	#0,(a2,d0.w)
00016602 6700                       		beq.s	locret_15F5C
00016604 117C 0001 0038             		move.b	#1,$38(a0)
0001660A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001660E 7000                       		moveq	#0,d0
00016610 1028 0023                  		move.b	$23(a0),d0
00016614 6700                       		beq.s	loc_15F3E
00016616 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001661C                            
0001661C                            loc_15F3E:
0001661C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016624 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001662C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016632 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016638 6700                       		beq.s	loc_15F5E
0001663A                            
0001663A                            locret_15F5C:
0001663A 4E75                       		rts	
0001663C                            ; ===========================================================================
0001663C                            
0001663C                            loc_15F5E:
0001663C 4228 0028                  		clr.b	$28(a0)
00016640 4228 0038                  		clr.b	$38(a0)
00016644 4E75                       		rts	
00016646                            ; ===========================================================================
00016646                            ; ---------------------------------------------------------------------------
00016646                            ; Sprite mappings - stomper and	platforms (SBZ)
00016646                            ; ---------------------------------------------------------------------------
00016646                            Map_obj6B:
00016646                            	include "_maps\obj6B.asm"
00016646                            ; ---------------------------------------------------------------------------
00016646                            ; Sprite mappings - stomper and	platforms (SBZ)
00016646                            ; ---------------------------------------------------------------------------
00016646 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001664A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001664E 0000                       		dc.w byte_15FB0-Map_obj6B
00016650 04                         byte_15F72:	dc.b 4
00016651 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016656 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001665B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016660 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016665 08                         byte_15F87:	dc.b 8
00016666 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001666B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016670 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016675 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001667A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001667F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016684 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016689 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001668E 0E                         byte_15FB0:	dc.b $E
0001668F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016694 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016699 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001669E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000166A3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000166A8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000166AD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000166B2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000166B7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000166BC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000166C1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000166C6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000166CB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000166D0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000166D6 00                         		even
000166D6 00                         		even
000166D6                            
000166D6                            ; ===========================================================================
000166D6                            ; ---------------------------------------------------------------------------
000166D6                            ; Object 6C - vanishing	platforms (SBZ)
000166D6                            ; ---------------------------------------------------------------------------
000166D6                            
000166D6                            Obj6C:					; XREF: Obj_Index
000166D6 7000                       		moveq	#0,d0
000166D8 1028 0024                  		move.b	$24(a0),d0
000166DC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000166E0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000166E4                            ; ===========================================================================
000166E4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000166E6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000166E8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000166EA 0000                       		dc.w loc_16068-Obj6C_Index
000166EC                            ; ===========================================================================
000166EC                            
000166EC                            Obj6C_Main:				; XREF: Obj6C_Index
000166EC 5C28 0024                  		addq.b	#6,$24(a0)
000166F0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000166F8 317C 44C3 0002             		move.w	#$44C3,2(a0)
000166FE 0028 0004 0001             		ori.b	#4,1(a0)
00016704 117C 0010 0019             		move.b	#$10,$19(a0)
0001670A 117C 0004 0018             		move.b	#4,$18(a0)
00016710 7000                       		moveq	#0,d0
00016712 1028 0028                  		move.b	$28(a0),d0	; get object type
00016716 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001671A 5240                       		addq.w	#1,d0		; add 1
0001671C EF48                       		lsl.w	#7,d0		; multiply by $80
0001671E 3200                       		move.w	d0,d1
00016720 5340                       		subq.w	#1,d0
00016722 3140 0030                  		move.w	d0,$30(a0)
00016726 3140 0032                  		move.w	d0,$32(a0)
0001672A 7000                       		moveq	#0,d0
0001672C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016730 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016734 0641 0080                  		addi.w	#$80,d1
00016738 C0C1                       		mulu.w	d1,d0
0001673A E088                       		lsr.l	#8,d0
0001673C 3140 0036                  		move.w	d0,$36(a0)
00016740 5341                       		subq.w	#1,d1
00016742 3141 0038                  		move.w	d1,$38(a0)
00016746                            
00016746                            loc_16068:				; XREF: Obj6C_Index
00016746 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001674A 9068 0036                  		sub.w	$36(a0),d0
0001674E C068 0038                  		and.w	$38(a0),d0
00016752 6600                       		bne.s	Obj6C_Animate
00016754 5928 0024                  		subq.b	#4,$24(a0)
00016758 6000                       		bra.s	Obj6C_Vanish
0001675A                            ; ===========================================================================
0001675A                            
0001675A                            Obj6C_Animate:
0001675A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016760 4EB9 0000 ACC8             		jsr	AnimateSprite
00016766 6000 953E                  		bra.w	MarkObjGone
0001676A                            ; ===========================================================================
0001676A                            
0001676A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001676A 5368 0030                  		subq.w	#1,$30(a0)
0001676E 6A00                       		bpl.s	loc_160AA
00016770 317C 007F 0030             		move.w	#127,$30(a0)
00016776 4A28 001C                  		tst.b	$1C(a0)
0001677A 6700                       		beq.s	loc_160A4
0001677C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016782                            
00016782                            loc_160A4:
00016782 0868 0000 001C             		bchg	#0,$1C(a0)
00016788                            
00016788                            loc_160AA:
00016788 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001678E 4EB9 0000 ACC8             		jsr	AnimateSprite
00016794 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001679A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001679C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000167A2 6600                       		bne.s	loc_160D6
000167A4 7200                       		moveq	#0,d1
000167A6 1228 0019                  		move.b	$19(a0),d1
000167AA 4EB9 0000 7924             		jsr	(PlatformObject).l
000167B0 6000 94F4                  		bra.w	MarkObjGone
000167B4                            ; ===========================================================================
000167B4                            
000167B4                            loc_160D6:
000167B4 7200                       		moveq	#0,d1
000167B6 1228 0019                  		move.b	$19(a0),d1
000167BA 4EB9 0000 7A98             		jsr	(ExitPlatform).l
000167C0 3428 0008                  		move.w	8(a0),d2
000167C4 4EB9 0000 8002             		jsr	(MvSonicOnPtfm2).l
000167CA 6000 94DA                  		bra.w	MarkObjGone
000167CE                            ; ===========================================================================
000167CE                            
000167CE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000167CE 0828 0003 0022             		btst	#3,$22(a0)
000167D4 6700                       		beq.s	Obj6C_Display
000167D6 43F8 D000                  		lea	($FFFFD000).w,a1
000167DA 08A9 0003 0022             		bclr	#3,$22(a1)
000167E0 08A8 0003 0022             		bclr	#3,$22(a0)
000167E6 117C 0002 0024             		move.b	#2,$24(a0)
000167EC 4228 0025                  		clr.b	$25(a0)
000167F0                            
000167F0                            Obj6C_Display:
000167F0 6000 94B4                  		bra.w	MarkObjGone
000167F4                            ; ===========================================================================
000167F4                            Ani_obj6C:
000167F4                            	include "_anim\obj6C.asm"
000167F4                            ; ---------------------------------------------------------------------------
000167F4                            ; Animation script - vanishing platforms (SBZ)
000167F4                            ; ---------------------------------------------------------------------------
000167F4 0000                       		dc.w byte_1611A-Ani_obj6C
000167F6 0000                       		dc.w byte_16122-Ani_obj6C
000167F8 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016800 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016808                            		even
00016808                            		even
00016808                            
00016808                            ; ---------------------------------------------------------------------------
00016808                            ; Sprite mappings - vanishing platforms	(SBZ)
00016808                            ; ---------------------------------------------------------------------------
00016808                            Map_obj6C:
00016808                            	include "_maps\obj6C.asm"
00016808                            ; ---------------------------------------------------------------------------
00016808                            ; Sprite mappings - vanishing platforms	(SBZ)
00016808                            ; ---------------------------------------------------------------------------
00016808 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001680C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016810 01                         byte_16132:	dc.b 1
00016811 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016816 01                         byte_16138:	dc.b 1
00016817 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001681C 01                         byte_1613E:	dc.b 1
0001681D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016822 00                         byte_16144:	dc.b 0
00016824 00                         		even
00016824 00                         		even
00016824                            
00016824                            ; ===========================================================================
00016824                            ; ---------------------------------------------------------------------------
00016824                            ; Object 6E - electrocution orbs (SBZ)
00016824                            ; ---------------------------------------------------------------------------
00016824                            
00016824                            Obj6E:					; XREF: Obj_Index
00016824 7000                       		moveq	#0,d0
00016826 1028 0024                  		move.b	$24(a0),d0
0001682A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001682E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016832                            ; ===========================================================================
00016832 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016834 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016836                            ; ===========================================================================
00016836                            
00016836                            Obj6E_Main:				; XREF: Obj6E_Index
00016836 5428 0024                  		addq.b	#2,$24(a0)
0001683A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016842 317C 047E 0002             		move.w	#$47E,2(a0)
00016848 0028 0004 0001             		ori.b	#4,1(a0)
0001684E 117C 0028 0019             		move.b	#$28,$19(a0)
00016854 7000                       		moveq	#0,d0
00016856 1028 0028                  		move.b	$28(a0),d0	; read object type
0001685A E948                       		lsl.w	#4,d0		; multiply by $10
0001685C 5340                       		subq.w	#1,d0
0001685E 3140 0034                  		move.w	d0,$34(a0)
00016862                            
00016862                            Obj6E_Shock:				; XREF: Obj6E_Index
00016862 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016866 C068 0034                  		and.w	$34(a0),d0
0001686A 6600                       		bne.s	Obj6E_Animate
0001686C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016872 4A28 0001                  		tst.b	1(a0)
00016876 6A00                       		bpl.s	Obj6E_Animate
00016878 303C 00B1                  		move.w	#$B1,d0
0001687C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016882                            
00016882                            Obj6E_Animate:
00016882 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016888 4EB9 0000 ACC8             		jsr	AnimateSprite
0001688E 117C 0000 0020             		move.b	#0,$20(a0)
00016894 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001689A 6600                       		bne.s	Obj6E_Display	; if not, branch
0001689C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000168A2                            
000168A2                            Obj6E_Display:
000168A2 6000 9402                  		bra.w	MarkObjGone
000168A6                            ; ===========================================================================
000168A6                            Ani_obj6E:
000168A6                            	include "_anim\obj6E.asm"
000168A6                            ; ---------------------------------------------------------------------------
000168A6                            ; Animation script - electrocution orbs (SBZ)
000168A6                            ; ---------------------------------------------------------------------------
000168A6 0000                       		dc.w byte_161CC-Ani_obj6E
000168A8 0000                       		dc.w byte_161D0-Ani_obj6E
000168AA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000168AE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000168BE                            		even
000168BE                            		even
000168BE                            
000168BE                            ; ---------------------------------------------------------------------------
000168BE                            ; Sprite mappings - electrocution orbs (SBZ)
000168BE                            ; ---------------------------------------------------------------------------
000168BE                            Map_obj6E:
000168BE                            	include "_maps\obj6E.asm"
000168BE                            Map_26ed:
000168BE 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000168C0 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000168C2 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000168C4 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000168C6 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000168C8 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000168CA 01                         Map_26ed_C: 	dc.b $1
000168CB 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000168D0 02                         Map_26ed_12: 	dc.b $2
000168D1 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168D6 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168DB 06                         Map_26ed_1D: 	dc.b $6
000168DC F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168E1 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168E6 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000168EB F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000168F0 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000168F5 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000168FA 08                         Map_26ed_3C: 	dc.b $8
000168FB F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016900 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016905 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
0001690A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001690F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016914 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016919 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001691E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016923 06                         Map_26ed_65: 	dc.b $6
00016924 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016929 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001692E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016933 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016938 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001693D F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016942 04                         Map_26ed_84: 	dc.b $4
00016943 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016948 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001694D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016952 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016958 00                         	even
00016958 00                         	even
00016958                            
00016958                            ; ===========================================================================
00016958                            ; ---------------------------------------------------------------------------
00016958                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016958                            ; ---------------------------------------------------------------------------
00016958                            
00016958                            Obj6F:					; XREF: Obj_Index
00016958 7000                       		moveq	#0,d0
0001695A 1028 0024                  		move.b	$24(a0),d0
0001695E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016962 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016966 3028 0030                  		move.w	$30(a0),d0
0001696A 0240 FF80                  		andi.w	#$FF80,d0
0001696E 3238 F700                  		move.w	($FFFFF700).w,d1
00016972 0441 0080                  		subi.w	#$80,d1
00016976 0241 FF80                  		andi.w	#$FF80,d1
0001697A 9041                       		sub.w	d1,d0
0001697C 0C40 0280                  		cmpi.w	#$280,d0
00016980 6200                       		bhi.s	loc_1629A
00016982                            
00016982                            Obj6F_Display:
00016982 4EF9 0000 DBFE             		jmp	DisplaySprite
00016988                            ; ===========================================================================
00016988                            
00016988                            loc_1629A:
00016988 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001698E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016990 0C40 FF80                  		cmpi.w	#-$80,d0
00016994 64EC                       		bcc.s	Obj6F_Display
00016996                            
00016996                            Obj6F_Act1or2:
00016996 1028 002F                  		move.b	$2F(a0),d0
0001699A 6A00                       		bpl.s	Obj6F_Delete
0001699C 0240 007F                  		andi.w	#$7F,d0
000169A0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000169A4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000169AA                            
000169AA                            Obj6F_Delete:
000169AA 4EF9 0000 DC3A             		jmp	DeleteObject
000169B0                            ; ===========================================================================
000169B0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000169B2 0000                       		dc.w loc_163D8-Obj6F_Index
000169B4                            ; ===========================================================================
000169B4                            
000169B4                            Obj6F_Main:				; XREF: Obj6F_Index
000169B4 1028 0028                  		move.b	$28(a0),d0
000169B8 6B00 0000                  		bmi.w	loc_16380
000169BC 5428 0024                  		addq.b	#2,$24(a0)
000169C0 217C 0001 6018 0004        		move.l	#Map_obj69a,4(a0)
000169C8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000169CE 117C 0010 0019             		move.b	#$10,$19(a0)
000169D4 0028 0004 0001             		ori.b	#4,1(a0)
000169DA 117C 0004 0018             		move.b	#4,$18(a0)
000169E0 7000                       		moveq	#0,d0
000169E2 1028 0028                  		move.b	$28(a0),d0
000169E6 3200                       		move.w	d0,d1
000169E8 E648                       		lsr.w	#3,d0
000169EA 0240 001E                  		andi.w	#$1E,d0
000169EE 45FA 0000                  		lea	off_164A6(pc),a2
000169F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169F6 315A 0038                  		move.w	(a2)+,$38(a0)
000169FA 315A 0030                  		move.w	(a2)+,$30(a0)
000169FE 214A 003C                  		move.l	a2,$3C(a0)
00016A02 0241 000F                  		andi.w	#$F,d1
00016A06 E549                       		lsl.w	#2,d1
00016A08 1141 0038                  		move.b	d1,$38(a0)
00016A0C 117C 0004 003A             		move.b	#4,$3A(a0)
00016A12 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016A16 6700                       		beq.s	loc_16356
00016A18 117C 0001 003B             		move.b	#1,$3B(a0)
00016A1E 4428 003A                  		neg.b	$3A(a0)
00016A22 7200                       		moveq	#0,d1
00016A24 1228 0038                  		move.b	$38(a0),d1
00016A28 D228 003A                  		add.b	$3A(a0),d1
00016A2C B228 0039                  		cmp.b	$39(a0),d1
00016A30 6500                       		bcs.s	loc_16352
00016A32 1001                       		move.b	d1,d0
00016A34 7200                       		moveq	#0,d1
00016A36 4A00                       		tst.b	d0
00016A38 6A00                       		bpl.s	loc_16352
00016A3A 1228 0039                  		move.b	$39(a0),d1
00016A3E 5901                       		subq.b	#4,d1
00016A40                            
00016A40                            loc_16352:
00016A40 1141 0038                  		move.b	d1,$38(a0)
00016A44                            
00016A44                            loc_16356:
00016A44 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016A4A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016A50 4A41                       		tst.w	d1
00016A52 6600                       		bne.s	loc_1636C
00016A54 117C 0001 001C             		move.b	#1,$1C(a0)
00016A5A                            
00016A5A                            loc_1636C:
00016A5A 0C41 0008                  		cmpi.w	#8,d1
00016A5E 6600                       		bne.s	loc_16378
00016A60 117C 0000 001C             		move.b	#0,$1C(a0)
00016A66                            
00016A66                            loc_16378:
00016A66 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016A6A 6000 0000                  		bra.w	loc_163D8
00016A6E                            ; ===========================================================================
00016A6E                            
00016A6E                            loc_16380:				; XREF: Obj6F_Main
00016A6E 1140 002F                  		move.b	d0,$2F(a0)
00016A72 0240 007F                  		andi.w	#$7F,d0
00016A76 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016A7A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016A80 6700                       		beq.s	loc_1639A
00016A82 4EF9 0000 DC3A             		jmp	DeleteObject
00016A88                            ; ===========================================================================
00016A88                            
00016A88                            loc_1639A:
00016A88 D040                       		add.w	d0,d0
00016A8A 0240 001E                  		andi.w	#$1E,d0
00016A8E 0640 0080                  		addi.w	#$80,d0
00016A92 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016A98 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A9C 321A                       		move.w	(a2)+,d1
00016A9E 2248                       		movea.l	a0,a1
00016AA0 6000                       		bra.s	Obj6F_LoadPform
00016AA2                            ; ===========================================================================
00016AA2                            
00016AA2                            Obj6F_Loop:
00016AA2 4EB9 0000 E084             		jsr	SingleObjLoad
00016AA8 6600                       		bne.s	loc_163D0
00016AAA                            
00016AAA                            Obj6F_LoadPform:			; XREF: loc_1639A
00016AAA 12BC 006F                  		move.b	#$6F,0(a1)
00016AAE 335A 0008                  		move.w	(a2)+,8(a1)
00016AB2 335A 000C                  		move.w	(a2)+,$C(a1)
00016AB6 301A                       		move.w	(a2)+,d0
00016AB8 1340 0028                  		move.b	d0,$28(a1)
00016ABC                            
00016ABC                            loc_163D0:
00016ABC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016AC0                            
00016AC0 588F                       		addq.l	#4,sp
00016AC2 4E75                       		rts	
00016AC4                            ; ===========================================================================
00016AC4                            
00016AC4                            loc_163D8:				; XREF: Obj6F_Index
00016AC4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016ACA 4EB9 0000 ACC8             		jsr	AnimateSprite
00016AD0 4A28 001A                  		tst.b	$1A(a0)
00016AD4 6600                       		bne.s	loc_16404
00016AD6 3F28 0008                  		move.w	8(a0),-(sp)
00016ADA 6100 0000                  		bsr.w	loc_16424
00016ADE 323C 001B                  		move.w	#$1B,d1
00016AE2 343C 0007                  		move.w	#7,d2
00016AE6 3602                       		move.w	d2,d3
00016AE8 5243                       		addq.w	#1,d3
00016AEA 381F                       		move.w	(sp)+,d4
00016AEC 6000 94E0                  		bra.w	SolidObject
00016AF0                            ; ===========================================================================
00016AF0                            
00016AF0                            loc_16404:
00016AF0 0828 0003 0022             		btst	#3,$22(a0)
00016AF6 6700                       		beq.s	loc_16420
00016AF8 43F8 D000                  		lea	($FFFFD000).w,a1
00016AFC 08A9 0003 0022             		bclr	#3,$22(a1)
00016B02 08A8 0003 0022             		bclr	#3,$22(a0)
00016B08 4228 0025                  		clr.b	$25(a0)
00016B0C                            
00016B0C                            loc_16420:
00016B0C 6000 0002                  		bra.w	*+4
00016B10                            
00016B10                            loc_16424:
00016B10 3028 0008                  		move.w	8(a0),d0
00016B14 B068 0034                  		cmp.w	$34(a0),d0
00016B18 6600                       		bne.s	loc_16484
00016B1A 3028 000C                  		move.w	$C(a0),d0
00016B1E B068 0036                  		cmp.w	$36(a0),d0
00016B22 6600                       		bne.s	loc_16484
00016B24 7200                       		moveq	#0,d1
00016B26 1228 0038                  		move.b	$38(a0),d1
00016B2A D228 003A                  		add.b	$3A(a0),d1
00016B2E B228 0039                  		cmp.b	$39(a0),d1
00016B32 6500                       		bcs.s	loc_16456
00016B34 1001                       		move.b	d1,d0
00016B36 7200                       		moveq	#0,d1
00016B38 4A00                       		tst.b	d0
00016B3A 6A00                       		bpl.s	loc_16456
00016B3C 1228 0039                  		move.b	$39(a0),d1
00016B40 5901                       		subq.b	#4,d1
00016B42                            
00016B42                            loc_16456:
00016B42 1141 0038                  		move.b	d1,$38(a0)
00016B46 2268 003C                  		movea.l	$3C(a0),a1
00016B4A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016B50 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016B56 4A41                       		tst.w	d1
00016B58 6600                       		bne.s	loc_16474
00016B5A 117C 0001 001C             		move.b	#1,$1C(a0)
00016B60                            
00016B60                            loc_16474:
00016B60 0C41 0008                  		cmpi.w	#8,d1
00016B64 6600                       		bne.s	loc_16480
00016B66 117C 0000 001C             		move.b	#0,$1C(a0)
00016B6C                            
00016B6C                            loc_16480:
00016B6C 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016B70                            
00016B70                            loc_16484:
00016B70 4EF9 0000 DBD8             		jmp	SpeedToPos
00016B76                            ; ===========================================================================
00016B76                            Ani_obj6F:
00016B76                            	include "_anim\obj6F.asm"
00016B76                            ; ---------------------------------------------------------------------------
00016B76                            ; Animation script - platform on conveyor belt (SBZ)
00016B76                            ; ---------------------------------------------------------------------------
00016B76 0000                       		dc.w byte_1648E-Ani_obj6F
00016B78 0000                       		dc.w byte_164A2-Ani_obj6F
00016B7A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B87 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016B8E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016B92 00                         		even
00016B92 00                         		even
00016B92                            
00016B92 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016B98 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016B9E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016BB2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016BC6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016BDA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016BEE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016C02 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016C16                            ; ===========================================================================
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            ; Object 70 - large girder block (SBZ)
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            
00016C16                            Obj70:					; XREF: Obj_Index
00016C16 7000                       		moveq	#0,d0
00016C18 1028 0024                  		move.b	$24(a0),d0
00016C1C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016C20 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016C24                            ; ===========================================================================
00016C24 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016C26 0000                       		dc.w Obj70_Action-Obj70_Index
00016C28                            ; ===========================================================================
00016C28                            
00016C28                            Obj70_Main:				; XREF: Obj70_Index
00016C28 5428 0024                  		addq.b	#2,$24(a0)
00016C2C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016C34 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016C3A 0028 0004 0001             		ori.b	#4,1(a0)
00016C40 117C 0004 0018             		move.b	#4,$18(a0)
00016C46 117C 0060 0019             		move.b	#$60,$19(a0)
00016C4C 117C 0018 0016             		move.b	#$18,$16(a0)
00016C52 3168 0008 0032             		move.w	8(a0),$32(a0)
00016C58 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016C5E 6100 0000                  		bsr.w	Obj70_Move2
00016C62                            
00016C62                            Obj70_Action:				; XREF: Obj70_Index
00016C62 3F28 0008                  		move.w	8(a0),-(sp)
00016C66 4A68 003A                  		tst.w	$3A(a0)
00016C6A 6700                       		beq.s	Obj70_Move
00016C6C 5368 003A                  		subq.w	#1,$3A(a0)
00016C70 6600                       		bne.s	Obj70_Solid
00016C72                            
00016C72                            Obj70_Move:
00016C72 4EB9 0000 DBD8             		jsr	SpeedToPos
00016C78 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016C7C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016C7E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016C82                            
00016C82                            Obj70_Solid:
00016C82 381F                       		move.w	(sp)+,d4
00016C84 4A28 0001                  		tst.b	1(a0)
00016C88 6A00                       		bpl.s	Obj70_ChkDel
00016C8A 7200                       		moveq	#0,d1
00016C8C 1228 0019                  		move.b	$19(a0),d1
00016C90 0641 000B                  		addi.w	#$B,d1
00016C94 7400                       		moveq	#0,d2
00016C96 1428 0016                  		move.b	$16(a0),d2
00016C9A 3602                       		move.w	d2,d3
00016C9C 5243                       		addq.w	#1,d3
00016C9E 6100 932E                  		bsr.w	SolidObject
00016CA2                            
00016CA2                            Obj70_ChkDel:
00016CA2 3028 0032                  		move.w	$32(a0),d0
00016CA6 0240 FF80                  		andi.w	#$FF80,d0
00016CAA 3238 F700                  		move.w	($FFFFF700).w,d1
00016CAE 0441 0080                  		subi.w	#$80,d1
00016CB2 0241 FF80                  		andi.w	#$FF80,d1
00016CB6 9041                       		sub.w	d1,d0
00016CB8 0C40 0280                  		cmpi.w	#$280,d0
00016CBC 6200                       		bhi.s	Obj70_Delete
00016CBE 4EF9 0000 DBFE             		jmp	DisplaySprite
00016CC4                            ; ===========================================================================
00016CC4                            
00016CC4                            Obj70_Delete:
00016CC4 4EF9 0000 DC3A             		jmp	DeleteObject
00016CCA                            ; ===========================================================================
00016CCA                            
00016CCA                            Obj70_Move2:				; XREF: Obj70_Main
00016CCA 1028 0038                  		move.b	$38(a0),d0
00016CCE 0240 0018                  		andi.w	#$18,d0
00016CD2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016CD8 43F1 0000                  		lea	(a1,d0.w),a1
00016CDC 3159 0010                  		move.w	(a1)+,$10(a0)
00016CE0 3159 0012                  		move.w	(a1)+,$12(a0)
00016CE4 3159 0034                  		move.w	(a1)+,$34(a0)
00016CE8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016CEC 317C 0007 003A             		move.w	#7,$3A(a0)
00016CF2 4E75                       		rts	
00016CF4                            ; ===========================================================================
00016CF4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016CFC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016D04 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016D0C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016D14                            ; ---------------------------------------------------------------------------
00016D14                            ; Sprite mappings - large girder block (SBZ)
00016D14                            ; ---------------------------------------------------------------------------
00016D14                            Map_obj70:
00016D14                            	include "_maps\obj70.asm"
00016D14                            ; ---------------------------------------------------------------------------
00016D14                            ; Sprite mappings - large girder block (SBZ)
00016D14                            ; ---------------------------------------------------------------------------
00016D14 0000                       		dc.w byte_1662A-Map_obj70
00016D16 0C                         byte_1662A:	dc.b $C
00016D17 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016D1C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016D21 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016D26 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016D2B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016D30 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016D35 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016D3A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016D3F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016D44 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016D49 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016D4E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016D54 00                         		even
00016D54 00                         		even
00016D54                            
00016D54                            ; ===========================================================================
00016D54                            ; ---------------------------------------------------------------------------
00016D54                            ; Object 72 - teleporter (SBZ)
00016D54                            ; ---------------------------------------------------------------------------
00016D54                            
00016D54                            Obj72:					; XREF: Obj_Index
00016D54 7000                       		moveq	#0,d0
00016D56 1028 0024                  		move.b	$24(a0),d0
00016D5A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016D5E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016D62 3028 0008                  		move.w	8(a0),d0
00016D66 0240 FF80                  		andi.w	#$FF80,d0
00016D6A 3238 F700                  		move.w	($FFFFF700).w,d1
00016D6E 0441 0080                  		subi.w	#$80,d1
00016D72 0241 FF80                  		andi.w	#$FF80,d1
00016D76 9041                       		sub.w	d1,d0
00016D78 0C40 0280                  		cmpi.w	#$280,d0
00016D7C 6200                       		bhi.s	Obj72_Delete
00016D7E 4E75                       		rts	
00016D80                            ; ===========================================================================
00016D80                            
00016D80                            Obj72_Delete:
00016D80 4EF9 0000 DC3A             		jmp	DeleteObject
00016D86                            ; ===========================================================================
00016D86 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016D88 0000                       		dc.w loc_166C8-Obj72_Index
00016D8A 0000                       		dc.w loc_1675E-Obj72_Index
00016D8C 0000                       		dc.w loc_16798-Obj72_Index
00016D8E                            ; ===========================================================================
00016D8E                            
00016D8E                            Obj72_Main:				; XREF: Obj72_Index
00016D8E 5428 0024                  		addq.b	#2,$24(a0)
00016D92 1028 0028                  		move.b	$28(a0),d0
00016D96 D040                       		add.w	d0,d0
00016D98 0240 001E                  		andi.w	#$1E,d0
00016D9C 45FA 0000                  		lea	Obj72_Data(pc),a2
00016DA0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016DA4 315A 003A                  		move.w	(a2)+,$3A(a0)
00016DA8 214A 003C                  		move.l	a2,$3C(a0)
00016DAC 315A 0036                  		move.w	(a2)+,$36(a0)
00016DB0 315A 0038                  		move.w	(a2)+,$38(a0)
00016DB4                            
00016DB4                            loc_166C8:				; XREF: Obj72_Index
00016DB4 43F8 D000                  		lea	($FFFFD000).w,a1
00016DB8 3029 0008                  		move.w	8(a1),d0
00016DBC 9068 0008                  		sub.w	8(a0),d0
00016DC0 0828 0000 0022             		btst	#0,$22(a0)
00016DC6 6700                       		beq.s	loc_166E0
00016DC8 0640 000F                  		addi.w	#$F,d0
00016DCC                            
00016DCC                            loc_166E0:
00016DCC 0C40 0010                  		cmpi.w	#$10,d0
00016DD0 6400                       		bcc.s	locret_1675C
00016DD2 3229 000C                  		move.w	$C(a1),d1
00016DD6 9268 000C                  		sub.w	$C(a0),d1
00016DDA 0641 0020                  		addi.w	#$20,d1
00016DDE 0C41 0040                  		cmpi.w	#$40,d1
00016DE2 6400                       		bcc.s	locret_1675C
00016DE4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016DE8 6600                       		bne.s	locret_1675C
00016DEA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016DF0 6600                       		bne.s	loc_1670E
00016DF2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016DF8 6500                       		bcs.s	locret_1675C
00016DFA                            
00016DFA                            loc_1670E:
00016DFA 5428 0024                  		addq.b	#2,$24(a0)
00016DFE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016E04 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016E0A 337C 0800 0014             		move.w	#$800,$14(a1)
00016E10 337C 0000 0010             		move.w	#0,$10(a1)
00016E16 337C 0000 0012             		move.w	#0,$12(a1)
00016E1C 08A8 0005 0022             		bclr	#5,$22(a0)
00016E22 08A9 0005 0022             		bclr	#5,$22(a1)
00016E28 08E9 0001 0022             		bset	#1,$22(a1)
00016E2E 3368 0008 0008             		move.w	8(a0),8(a1)
00016E34 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016E3A 4228 0032                  		clr.b	$32(a0)
00016E3E 303C 00BE                  		move.w	#$BE,d0
00016E42 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016E48                            
00016E48                            locret_1675C:
00016E48 4E75                       		rts	
00016E4A                            ; ===========================================================================
00016E4A                            
00016E4A                            loc_1675E:				; XREF: Obj72_Index
00016E4A 43F8 D000                  		lea	($FFFFD000).w,a1
00016E4E 1028 0032                  		move.b	$32(a0),d0
00016E52 5428 0032                  		addq.b	#2,$32(a0)
00016E56 4EB9 0000 2C64             		jsr	(CalcSine).l
00016E5C EA40                       		asr.w	#5,d0
00016E5E 3428 000C                  		move.w	$C(a0),d2
00016E62 9440                       		sub.w	d0,d2
00016E64 3342 000C                  		move.w	d2,$C(a1)
00016E68 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016E6E 6600                       		bne.s	locret_16796
00016E70 6100 0000                  		bsr.w	sub_1681C
00016E74 5428 0024                  		addq.b	#2,$24(a0)
00016E78 303C 00BC                  		move.w	#$BC,d0
00016E7C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00016E82                            
00016E82                            locret_16796:
00016E82 4E75                       		rts	
00016E84                            ; ===========================================================================
00016E84                            
00016E84                            loc_16798:				; XREF: Obj72_Index
00016E84 588F                       		addq.l	#4,sp
00016E86 43F8 D000                  		lea	($FFFFD000).w,a1
00016E8A 5328 002E                  		subq.b	#1,$2E(a0)
00016E8E 6A00                       		bpl.s	loc_167DA
00016E90 3368 0036 0008             		move.w	$36(a0),8(a1)
00016E96 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016E9C 7200                       		moveq	#0,d1
00016E9E 1228 003A                  		move.b	$3A(a0),d1
00016EA2 5801                       		addq.b	#4,d1
00016EA4 B228 003B                  		cmp.b	$3B(a0),d1
00016EA8 6500                       		bcs.s	loc_167C2
00016EAA 7200                       		moveq	#0,d1
00016EAC 6000                       		bra.s	loc_16800
00016EAE                            ; ===========================================================================
00016EAE                            
00016EAE                            loc_167C2:
00016EAE 1141 003A                  		move.b	d1,$3A(a0)
00016EB2 2468 003C                  		movea.l	$3C(a0),a2
00016EB6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016EBC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016EC2 6000 0000                  		bra.w	sub_1681C
00016EC6                            ; ===========================================================================
00016EC6                            
00016EC6                            loc_167DA:
00016EC6 2429 0008                  		move.l	8(a1),d2
00016ECA 2629 000C                  		move.l	$C(a1),d3
00016ECE 3029 0010                  		move.w	$10(a1),d0
00016ED2 48C0                       		ext.l	d0
00016ED4 E180                       		asl.l	#8,d0
00016ED6 D480                       		add.l	d0,d2
00016ED8 3029 0012                  		move.w	$12(a1),d0
00016EDC 48C0                       		ext.l	d0
00016EDE E180                       		asl.l	#8,d0
00016EE0 D680                       		add.l	d0,d3
00016EE2 2342 0008                  		move.l	d2,8(a1)
00016EE6 2343 000C                  		move.l	d3,$C(a1)
00016EEA 4E75                       		rts	
00016EEC                            ; ===========================================================================
00016EEC                            
00016EEC                            loc_16800:
00016EEC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016EF2 4228 0024                  		clr.b	$24(a0)
00016EF6 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016EFA 337C 0000 0010             		move.w	#0,$10(a1)
00016F00 337C 0200 0012             		move.w	#$200,$12(a1)
00016F06 4E75                       		rts	
00016F08                            
00016F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F08                            
00016F08                            
00016F08                            sub_1681C:
00016F08 7000                       		moveq	#0,d0
00016F0A 343C 1000                  		move.w	#$1000,d2
00016F0E 3028 0036                  		move.w	$36(a0),d0
00016F12 9069 0008                  		sub.w	8(a1),d0
00016F16 6C00                       		bge.s	loc_16830
00016F18 4440                       		neg.w	d0
00016F1A 4442                       		neg.w	d2
00016F1C                            
00016F1C                            loc_16830:
00016F1C 7200                       		moveq	#0,d1
00016F1E 363C 1000                  		move.w	#$1000,d3
00016F22 3228 0038                  		move.w	$38(a0),d1
00016F26 9269 000C                  		sub.w	$C(a1),d1
00016F2A 6C00                       		bge.s	loc_16844
00016F2C 4441                       		neg.w	d1
00016F2E 4443                       		neg.w	d3
00016F30                            
00016F30                            loc_16844:
00016F30 B240                       		cmp.w	d0,d1
00016F32 6500                       		bcs.s	loc_1687A
00016F34 7200                       		moveq	#0,d1
00016F36 3228 0038                  		move.w	$38(a0),d1
00016F3A 9269 000C                  		sub.w	$C(a1),d1
00016F3E 4841                       		swap	d1
00016F40 83C3                       		divs.w	d3,d1
00016F42 7000                       		moveq	#0,d0
00016F44 3028 0036                  		move.w	$36(a0),d0
00016F48 9069 0008                  		sub.w	8(a1),d0
00016F4C 6700                       		beq.s	loc_16866
00016F4E 4840                       		swap	d0
00016F50 81C1                       		divs.w	d1,d0
00016F52                            
00016F52                            loc_16866:
00016F52 3340 0010                  		move.w	d0,$10(a1)
00016F56 3343 0012                  		move.w	d3,$12(a1)
00016F5A 4A41                       		tst.w	d1
00016F5C 6A00                       		bpl.s	loc_16874
00016F5E 4441                       		neg.w	d1
00016F60                            
00016F60                            loc_16874:
00016F60 3141 002E                  		move.w	d1,$2E(a0)
00016F64 4E75                       		rts	
00016F66                            ; ===========================================================================
00016F66                            
00016F66                            loc_1687A:
00016F66 7000                       		moveq	#0,d0
00016F68 3028 0036                  		move.w	$36(a0),d0
00016F6C 9069 0008                  		sub.w	8(a1),d0
00016F70 4840                       		swap	d0
00016F72 81C2                       		divs.w	d2,d0
00016F74 7200                       		moveq	#0,d1
00016F76 3228 0038                  		move.w	$38(a0),d1
00016F7A 9269 000C                  		sub.w	$C(a1),d1
00016F7E 6700                       		beq.s	loc_16898
00016F80 4841                       		swap	d1
00016F82 83C0                       		divs.w	d0,d1
00016F84                            
00016F84                            loc_16898:
00016F84 3341 0012                  		move.w	d1,$12(a1)
00016F88 3342 0010                  		move.w	d2,$10(a1)
00016F8C 4A40                       		tst.w	d0
00016F8E 6A00                       		bpl.s	loc_168A6
00016F90 4440                       		neg.w	d0
00016F92                            
00016F92                            loc_168A6:
00016F92 3140 002E                  		move.w	d0,$2E(a0)
00016F96 4E75                       		rts	
00016F98                            ; End of function sub_1681C
00016F98                            
00016F98                            ; ===========================================================================
00016F98 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016F9E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016FA4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016FA8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016FAE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016FB4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016FBA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016FC0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016FC6 0884 0298 0894             		dc.w $884, $298, $894
00016FCC 0270 0894 0190             		dc.w $270, $894, $190
00016FD2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016FD8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016FDE 1184 0498 1158             		dc.w $1184, $498, $1158
00016FE4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016FEA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016FF0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016FF6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016FFC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017002 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017008 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001700E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017014 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001701A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017020                            ; ===========================================================================
00017020                            ; ---------------------------------------------------------------------------
00017020                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017020                            ; ---------------------------------------------------------------------------
00017020                            
00017020                            Obj78:					; XREF: Obj_Index
00017020 7000                       		moveq	#0,d0
00017022 1028 0024                  		move.b	$24(a0),d0
00017026 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001702A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001702E                            ; ===========================================================================
0001702E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017030 0000                       		dc.w Obj78_Action-Obj78_Index
00017032 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017034 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017036 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017038 0000                       		dc.w Obj78_Delete-Obj78_Index
0001703A 0000                       		dc.w loc_16CC0-Obj78_Index
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            locret_16950:
0001703C 4E75                       		rts	
0001703E                            ; ===========================================================================
0001703E                            
0001703E                            Obj78_Main:				; XREF: Obj78_Index
0001703E 117C 0007 0016             		move.b	#7,$16(a0)
00017044 117C 0008 0017             		move.b	#8,$17(a0)
0001704A 4EB9 0000 DBAC             		jsr	ObjectFall
00017050 4EBA E4A6                  		jsr	ObjHitFloor
00017054 4A41                       		tst.w	d1
00017056 6AE4                       		bpl.s	locret_16950
00017058 D368 000C                  		add.w	d1,$C(a0)
0001705C 4268 0012                  		clr.w	$12(a0)
00017060 5428 0024                  		addq.b	#2,$24(a0)
00017064 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001706C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017072 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017078 6700                       		beq.s	loc_16996
0001707A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017080                            
00017080                            loc_16996:
00017080 0228 0003 0001             		andi.b	#3,1(a0)
00017086 0028 0004 0001             		ori.b	#4,1(a0)
0001708C 1168 0001 0022             		move.b	1(a0),$22(a0)
00017092 117C 0004 0018             		move.b	#4,$18(a0)
00017098 117C 0008 0019             		move.b	#8,$19(a0)
0001709E 117C 000B 0020             		move.b	#$B,$20(a0)
000170A4 3428 0008                  		move.w	8(a0),d2
000170A8 7A0C                       		moveq	#$C,d5
000170AA 0828 0000 0022             		btst	#0,$22(a0)
000170B0 6700                       		beq.s	loc_169CA
000170B2 4445                       		neg.w	d5
000170B4                            
000170B4                            loc_169CA:
000170B4 1C3C 0004                  		move.b	#4,d6
000170B8 7600                       		moveq	#0,d3
000170BA 7804                       		moveq	#4,d4
000170BC 2448                       		movea.l	a0,a2
000170BE 7202                       		moveq	#2,d1
000170C0                            
000170C0                            Obj78_LoadBody:
000170C0 4EB9 0000 E09A             		jsr	SingleObjLoad2
000170C6 6600                       		bne.s	Obj78_QuitLoad
000170C8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000170CC 1346 0024                  		move.b	d6,$24(a1)
000170D0 5406                       		addq.b	#2,d6
000170D2 2368 0004 0004             		move.l	4(a0),4(a1)
000170D8 3368 0002 0002             		move.w	2(a0),2(a1)
000170DE 137C 0005 0018             		move.b	#5,$18(a1)
000170E4 137C 0008 0019             		move.b	#8,$19(a1)
000170EA 137C 00CB 0020             		move.b	#$CB,$20(a1)
000170F0 D445                       		add.w	d5,d2
000170F2 3342 0008                  		move.w	d2,8(a1)
000170F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170FC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017102 1368 0022 0001             		move.b	$22(a0),1(a1)
00017108 137C 0008 001A             		move.b	#8,$1A(a1)
0001710E 234A 003C                  		move.l	a2,$3C(a1)
00017112 1344 003C                  		move.b	d4,$3C(a1)
00017116 5804                       		addq.b	#4,d4
00017118 2449                       		movea.l	a1,a2
0001711A                            
0001711A                            Obj78_QuitLoad:
0001711A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001711E                            
0001711E 117C 0007 002A             		move.b	#7,$2A(a0)
00017124 4228 003C                  		clr.b	$3C(a0)
00017128                            
00017128                            Obj78_Action:				; XREF: Obj78_Index
00017128 4A28 0022                  		tst.b	$22(a0)
0001712C 6B00 0000                  		bmi.w	loc_16C96
00017130 7000                       		moveq	#0,d0
00017132 1028 0025                  		move.b	$25(a0),d0
00017136 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001713A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001713E 1228 002B                  		move.b	$2B(a0),d1
00017142 6A00                       		bpl.s	Obj78_Display
00017144 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001714A 1028 0026                  		move.b	$26(a0),d0
0001714E 0240 007F                  		andi.w	#$7F,d0
00017152 5828 0026                  		addq.b	#4,$26(a0)
00017156 1031 0000                  		move.b	(a1,d0.w),d0
0001715A 6A00                       		bpl.s	Obj78_AniHead
0001715C 08A8 0007 002B             		bclr	#7,$2B(a0)
00017162 6000                       		bra.s	Obj78_Display
00017164                            ; ===========================================================================
00017164                            
00017164                            Obj78_AniHead:
00017164 0201 0010                  		andi.b	#$10,d1
00017168 D001                       		add.b	d1,d0
0001716A 1140 001A                  		move.b	d0,$1A(a0)
0001716E                            
0001716E                            Obj78_Display:
0001716E 3028 0008                  		move.w	8(a0),d0
00017172 0240 FF80                  		andi.w	#$FF80,d0
00017176 3238 F700                  		move.w	($FFFFF700).w,d1
0001717A 0441 0080                  		subi.w	#$80,d1
0001717E 0241 FF80                  		andi.w	#$FF80,d1
00017182 9041                       		sub.w	d1,d0
00017184 0C40 0280                  		cmpi.w	#$280,d0
00017188 6200 0000                  		bhi.w	Obj78_ChkGone
0001718C 4EF9 0000 DBFE             		jmp	DisplaySprite
00017192                            ; ===========================================================================
00017192                            
00017192                            Obj78_ChkGone:
00017192 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017196 7000                       		moveq	#0,d0
00017198 1028 0023                  		move.b	$23(a0),d0
0001719C 6700                       		beq.s	loc_16ABC
0001719E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000171A4                            
000171A4                            loc_16ABC:
000171A4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000171AA 4E75                       		rts	
000171AC                            ; ===========================================================================
000171AC                            
000171AC                            Obj78_Delete:				; XREF: Obj78_Index
000171AC 4EF9 0000 DC3A             		jmp	DeleteObject
000171B2                            ; ===========================================================================
000171B2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000171B4 0000                       		dc.w loc_16B02-Obj78_Index2
000171B6                            ; ===========================================================================
000171B6                            
000171B6                            Obj78_Move:				; XREF: Obj78_Index2
000171B6 5328 002A                  		subq.b	#1,$2A(a0)
000171BA 6B00                       		bmi.s	Obj78_Move2
000171BC 4E75                       		rts	
000171BE                            ; ===========================================================================
000171BE                            
000171BE                            Obj78_Move2:
000171BE 5428 0025                  		addq.b	#2,$25(a0)
000171C2 117C 0010 002A             		move.b	#$10,$2A(a0)
000171C8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000171CE 317C 0040 0014             		move.w	#$40,$14(a0)
000171D4 0868 0004 002B             		bchg	#4,$2B(a0)
000171DA 6600                       		bne.s	loc_16AFC
000171DC 4268 0010                  		clr.w	$10(a0)
000171E0 4468 0014                  		neg.w	$14(a0)
000171E4                            
000171E4                            loc_16AFC:
000171E4 08E8 0007 002B             		bset	#7,$2B(a0)
000171EA                            
000171EA                            loc_16B02:				; XREF: Obj78_Index2
000171EA 5328 002A                  		subq.b	#1,$2A(a0)
000171EE 6B00                       		bmi.s	loc_16B5E
000171F0 2F28 0008                  		move.l	8(a0),-(sp)
000171F4 2428 0008                  		move.l	8(a0),d2
000171F8 3028 0010                  		move.w	$10(a0),d0
000171FC 0828 0000 0022             		btst	#0,$22(a0)
00017202 6700                       		beq.s	loc_16B1E
00017204 4440                       		neg.w	d0
00017206                            
00017206                            loc_16B1E:
00017206 48C0                       		ext.l	d0
00017208 E180                       		asl.l	#8,d0
0001720A D480                       		add.l	d0,d2
0001720C 2142 0008                  		move.l	d2,8(a0)
00017210 4EBA E2E6                  		jsr	ObjHitFloor
00017214 241F                       		move.l	(sp)+,d2
00017216 0C41 FFF8                  		cmpi.w	#-8,d1
0001721A 6D00                       		blt.s	loc_16B70
0001721C 0C41 000C                  		cmpi.w	#$C,d1
00017220 6C00                       		bge.s	loc_16B70
00017222 D368 000C                  		add.w	d1,$C(a0)
00017226 4842                       		swap	d2
00017228 B468 0008                  		cmp.w	8(a0),d2
0001722C 6700                       		beq.s	locret_16B5C
0001722E 7000                       		moveq	#0,d0
00017230 1028 003C                  		move.b	$3C(a0),d0
00017234 5228 003C                  		addq.b	#1,$3C(a0)
00017238 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001723E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017242                            
00017242                            locret_16B5C:
00017242 4E75                       		rts	
00017244                            ; ===========================================================================
00017244                            
00017244                            loc_16B5E:
00017244 5528 0025                  		subq.b	#2,$25(a0)
00017248 117C 0007 002A             		move.b	#7,$2A(a0)
0001724E 317C 0000 0010             		move.w	#0,$10(a0)
00017254 4E75                       		rts	
00017256                            ; ===========================================================================
00017256                            
00017256                            loc_16B70:
00017256 2142 0008                  		move.l	d2,8(a0)
0001725A 0868 0000 0022             		bchg	#0,$22(a0)
00017260 1168 0022 0001             		move.b	$22(a0),1(a0)
00017266 7000                       		moveq	#0,d0
00017268 1028 003C                  		move.b	$3C(a0),d0
0001726C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017272 5228 003C                  		addq.b	#1,$3C(a0)
00017276 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001727C 4E75                       		rts	
0001727E                            ; ===========================================================================
0001727E                            
0001727E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001727E 2268 003C                  		movea.l	$3C(a0),a1
00017282 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017288 6A00                       		bpl.s	Obj78_BodySeg1
0001728A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017290 1028 0026                  		move.b	$26(a0),d0
00017294 0240 007F                  		andi.w	#$7F,d0
00017298 5828 0026                  		addq.b	#4,$26(a0)
0001729C 4A31 0004                  		tst.b	4(a1,d0.w)
000172A0 6A00                       		bpl.s	Obj78_AniBody
000172A2 5828 0026                  		addq.b	#4,$26(a0)
000172A6                            
000172A6                            Obj78_AniBody:
000172A6 1031 0000                  		move.b	(a1,d0.w),d0
000172AA 5000                       		addq.b	#8,d0
000172AC 1140 001A                  		move.b	d0,$1A(a0)
000172B0                            
000172B0                            Obj78_BodySeg1:				; XREF: Obj78_Index
000172B0 2268 003C                  		movea.l	$3C(a0),a1
000172B4 4A28 0022                  		tst.b	$22(a0)
000172B8 6B00 0000                  		bmi.w	loc_16C90
000172BC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000172C2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000172C8 6700 0000                  		beq.w	loc_16C64
000172CC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000172D2 3029 0010                  		move.w	$10(a1),d0
000172D6 D069 0014                  		add.w	$14(a1),d0
000172DA 3140 0010                  		move.w	d0,$10(a0)
000172DE 2428 0008                  		move.l	8(a0),d2
000172E2 2602                       		move.l	d2,d3
000172E4 3028 0010                  		move.w	$10(a0),d0
000172E8 0828 0000 0022             		btst	#0,$22(a0)
000172EE 6700                       		beq.s	loc_16C0C
000172F0 4440                       		neg.w	d0
000172F2                            
000172F2                            loc_16C0C:
000172F2 48C0                       		ext.l	d0
000172F4 E180                       		asl.l	#8,d0
000172F6 D480                       		add.l	d0,d2
000172F8 2142 0008                  		move.l	d2,8(a0)
000172FC 4843                       		swap	d3
000172FE B668 0008                  		cmp.w	8(a0),d3
00017302 6700                       		beq.s	loc_16C64
00017304 7000                       		moveq	#0,d0
00017306 1028 003C                  		move.b	$3C(a0),d0
0001730A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001730E 0C01 0080                  		cmpi.b	#-$80,d1
00017312 6600                       		bne.s	loc_16C50
00017314 4843                       		swap	d3
00017316 2143 0008                  		move.l	d3,8(a0)
0001731A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001731E 0868 0000 0022             		bchg	#0,$22(a0)
00017324 1168 0022 0001             		move.b	$22(a0),1(a0)
0001732A 5228 003C                  		addq.b	#1,$3C(a0)
0001732E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017334 6000                       		bra.s	loc_16C64
00017336                            ; ===========================================================================
00017336                            
00017336                            loc_16C50:
00017336 4881                       		ext.w	d1
00017338 D368 000C                  		add.w	d1,$C(a0)
0001733C 5228 003C                  		addq.b	#1,$3C(a0)
00017340 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017346 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001734A                            
0001734A                            loc_16C64:
0001734A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017350 6700                       		beq.s	loc_16C90
00017352 0C11 0027                  		cmpi.b	#$27,0(a1)
00017356 6700                       		beq.s	loc_16C7C
00017358 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001735E 6600                       		bne.s	loc_16C82
00017360                            
00017360                            loc_16C7C:
00017360 117C 000A 0024             		move.b	#$A,$24(a0)
00017366                            
00017366                            loc_16C82:
00017366 4EF9 0000 DBFE             		jmp	DisplaySprite
0001736C                            
0001736C                            ; ===========================================================================
0001736C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017374                            ; ===========================================================================
00017374                            
00017374                            loc_16C90:
00017374 08E9 0007 0022             		bset	#7,$22(a1)
0001737A                            
0001737A                            loc_16C96:
0001737A 7000                       		moveq	#0,d0
0001737C 1028 0024                  		move.b	$24(a0),d0
00017380 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017384 0828 0000 0022             		btst	#0,$22(a0)
0001738A 6700                       		beq.s	loc_16CAA
0001738C 4440                       		neg.w	d0
0001738E                            
0001738E                            loc_16CAA:
0001738E 3140 0010                  		move.w	d0,$10(a0)
00017392 317C FC00 0012             		move.w	#-$400,$12(a0)
00017398 117C 000C 0024             		move.b	#$C,$24(a0)
0001739E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000173A4                            
000173A4                            loc_16CC0:				; XREF: Obj78_Index
000173A4 4EB9 0000 DBAC             		jsr	ObjectFall
000173AA 4A68 0012                  		tst.w	$12(a0)
000173AE 6B00                       		bmi.s	loc_16CE0
000173B0 4EBA E146                  		jsr	ObjHitFloor
000173B4 4A41                       		tst.w	d1
000173B6 6A00                       		bpl.s	loc_16CE0
000173B8 D368 000C                  		add.w	d1,$C(a0)
000173BC 317C FC00 0012             		move.w	#-$400,$12(a0)
000173C2                            
000173C2                            loc_16CE0:
000173C2 4A28 0001                  		tst.b	1(a0)
000173C6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000173CA 4EF9 0000 DBFE             		jmp	DisplaySprite
000173D0                            ; ===========================================================================
000173D0                            Ani_obj78:
000173D0                            	include "_anim\obj78.asm"
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            ; Animation script - Caterkiller enemy (uses non-standard format)
000173D0                            ; ---------------------------------------------------------------------------
000173D0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000173E0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000173F0 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017400 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017410 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017420 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017430 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017440 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017450                            	even
00017450                            	even
00017450                            
00017450                            ; ---------------------------------------------------------------------------
00017450                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017450                            ; ---------------------------------------------------------------------------
00017450                            Map_obj78:
00017450                            	include "_maps\obj78.asm"
00017450                            ; ---------------------------------------------------------------------------
00017450                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017450                            ; ---------------------------------------------------------------------------
00017450 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017454 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017458 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001745C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017460 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017464 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017468 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001746C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017470 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017474 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017478 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001747C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017480 01                         byte_16D9E:	dc.b 1
00017481 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017486 01                         byte_16DA4:	dc.b 1
00017487 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001748C 01                         byte_16DAA:	dc.b 1
0001748D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017492 01                         byte_16DB0:	dc.b 1
00017493 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017498 01                         byte_16DB6:	dc.b 1
00017499 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001749E 01                         byte_16DBC:	dc.b 1
0001749F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000174A4 01                         byte_16DC2:	dc.b 1
000174A5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000174AA 01                         byte_16DC8:	dc.b 1
000174AB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000174B0 01                         byte_16DCE:	dc.b 1
000174B1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000174B6 01                         byte_16DD4:	dc.b 1
000174B7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000174BC 01                         byte_16DDA:	dc.b 1
000174BD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000174C2 01                         byte_16DE0:	dc.b 1
000174C3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000174C8 01                         byte_16DE6:	dc.b 1
000174C9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000174CE 01                         byte_16DEC:	dc.b 1
000174CF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000174D4 01                         byte_16DF2:	dc.b 1
000174D5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000174DA 01                         byte_16DF8:	dc.b 1
000174DB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000174E0 01                         byte_16DFE:	dc.b 1
000174E1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000174E6 01                         byte_16E04:	dc.b 1
000174E7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000174EC 01                         byte_16E0A:	dc.b 1
000174ED F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000174F2 01                         byte_16E10:	dc.b 1
000174F3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000174F8 01                         byte_16E16:	dc.b 1
000174F9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000174FE 01                         byte_16E1C:	dc.b 1
000174FF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017504 01                         byte_16E22:	dc.b 1
00017505 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001750A 01                         byte_16E28:	dc.b 1
0001750B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017510                            		even
00017510                            		even
00017510                            
00017510                            ; ===========================================================================
00017510                            ; ---------------------------------------------------------------------------
00017510                            ; Object 79 - lamppost
00017510                            ; ---------------------------------------------------------------------------
00017510                            
00017510                            Obj79:					; XREF: Obj_Index
00017510 7000                       		moveq	#0,d0
00017512 1028 0024                  		move.b	$24(a0),d0
00017516 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001751A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001751E 4EFA 8786                  		jmp	MarkObjGone
00017522                            ; ===========================================================================
00017522 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017524 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017526 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017528 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001752A                            ; ===========================================================================
0001752A                            
0001752A                            Obj79_Main:				; XREF: Obj79_Index
0001752A 5428 0024                  		addq.b	#2,$24(a0)
0001752E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017536 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001753C 117C 0004 0001             		move.b	#4,1(a0)
00017542 117C 0008 0019             		move.b	#8,$19(a0)
00017548 117C 0005 0018             		move.b	#5,$18(a0)
0001754E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017552 7000                       		moveq	#0,d0
00017554 1028 0023                  		move.b	$23(a0),d0
00017558 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001755E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017564 6600                       		bne.s	Obj79_RedLamp
00017566 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001756A 0201 007F                  		andi.b	#$7F,d1
0001756E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017572 0202 007F                  		andi.b	#$7F,d2
00017576 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017578 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001757A                            
0001757A                            Obj79_RedLamp:
0001757A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017580 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017586 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001758C 4E75                       		rts	
0001758E                            ; ===========================================================================
0001758E                            
0001758E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001758E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017592 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001759A 6B00 0000                  		bmi.w	locret_16F90
0001759E 1238 FE30                  		move.b	($FFFFFE30).w,d1
000175A2 0201 007F                  		andi.b	#$7F,d1
000175A6 1428 0028                  		move.b	$28(a0),d2
000175AA 0202 007F                  		andi.b	#$7F,d2
000175AE B202                       		cmp.b	d2,d1
000175B0 6500                       		bcs.s	Obj79_HitLamp
000175B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175B6 7000                       		moveq	#0,d0
000175B8 1028 0023                  		move.b	$23(a0),d0
000175BC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000175C2 117C 0004 0024             		move.b	#4,$24(a0)
000175C8 117C 0003 001A             		move.b	#3,$1A(a0)
000175CE 6000 0000                  		bra.w	locret_16F90
000175D2                            ; ===========================================================================
000175D2                            
000175D2                            Obj79_HitLamp:
000175D2 3038 D008                  		move.w	($FFFFD008).w,d0
000175D6 9068 0008                  		sub.w	8(a0),d0
000175DA 5040                       		addq.w	#8,d0
000175DC 0C40 0010                  		cmpi.w	#$10,d0
000175E0 6400 0000                  		bcc.w	locret_16F90
000175E4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000175E8 9068 000C                  		sub.w	$C(a0),d0
000175EC 0640 0040                  		addi.w	#$40,d0
000175F0 0C40 0068                  		cmpi.w	#$68,d0
000175F4 6400                       		bcc.s	locret_16F90
000175F6 303C 00A1                  		move.w	#$A1,d0
000175FA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017600 5428 0024                  		addq.b	#2,$24(a0)
00017604 4EB9 0000 E084             		jsr	SingleObjLoad
0001760A 6600                       		bne.s	loc_16F76
0001760C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017610 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017616 3368 0008 0030             		move.w	8(a0),$30(a1)
0001761C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017622 0469 0018 0032             		subi.w	#$18,$32(a1)
00017628 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017630 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017636 137C 0004 0001             		move.b	#4,1(a1)
0001763C 137C 0008 0019             		move.b	#8,$19(a1)
00017642 137C 0004 0018             		move.b	#4,$18(a1)
00017648 137C 0002 001A             		move.b	#2,$1A(a1)
0001764E 337C 0020 0036             		move.w	#$20,$36(a1)
00017654                            
00017654                            loc_16F76:
00017654 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001765A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001765E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017662 7000                       		moveq	#0,d0
00017664 1028 0023                  		move.b	$23(a0),d0
00017668 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001766E                            
0001766E                            locret_16F90:
0001766E 4E75                       		rts	
00017670                            ; ===========================================================================
00017670                            
00017670                            Obj79_AfterHit:				; XREF: Obj79_Index
00017670 4E75                       		rts	
00017672                            ; ===========================================================================
00017672                            
00017672                            Obj79_Twirl:				; XREF: Obj79_Index
00017672 5368 0036                  		subq.w	#1,$36(a0)
00017676 6A00                       		bpl.s	loc_16FA0
00017678 117C 0004 0024             		move.b	#4,$24(a0)
0001767E                            
0001767E                            loc_16FA0:
0001767E 1028 0026                  		move.b	$26(a0),d0
00017682 0428 0010 0026             		subi.b	#$10,$26(a0)
00017688 0400 0040                  		subi.b	#$40,d0
0001768C 4EB9 0000 2C64             		jsr	(CalcSine).l
00017692 C3FC 0C00                  		muls.w	#$C00,d1
00017696 4841                       		swap	d1
00017698 D268 0030                  		add.w	$30(a0),d1
0001769C 3141 0008                  		move.w	d1,8(a0)
000176A0 C1FC 0C00                  		muls.w	#$C00,d0
000176A4 4840                       		swap	d0
000176A6 D068 0032                  		add.w	$32(a0),d0
000176AA 3140 000C                  		move.w	d0,$C(a0)
000176AE 4E75                       		rts	
000176B0                            ; ===========================================================================
000176B0                            ; ---------------------------------------------------------------------------
000176B0                            ; Subroutine to	store information when you hit a lamppost
000176B0                            ; ---------------------------------------------------------------------------
000176B0                            
000176B0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000176B0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000176B6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000176BC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000176C2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000176C8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000176CE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000176D4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000176DA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000176E0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000176E6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000176EC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000176F2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000176F8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000176FE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017704 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001770A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017710 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017716 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001771C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017722 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017728 4E75                       		rts	
0001772A                            
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            
0001772A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001772A                            
0001772A                            
0001772A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001772A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017730 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017736 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001773C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017742 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017748 4278 FE20                  		clr.w	($FFFFFE20).w
0001774C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017750 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017756 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001775C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017760 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017766 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001776C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017772 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017778 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001777E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017784 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001778A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017790 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017796 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001779C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000177A2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000177A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000177AE 6600                       		bne.s	loc_170E4
000177B0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000177B6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000177BC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000177C2                            
000177C2                            loc_170E4:
000177C2 4A38 FE30                  		tst.b	($FFFFFE30).w
000177C6 6A00                       		bpl.s	locret_170F6
000177C8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000177CC 0440 00A0                  		subi.w	#$A0,d0
000177D0 31C0 F728                  		move.w	d0,($FFFFF728).w
000177D4                            
000177D4                            locret_170F6:
000177D4 4E75                       		rts	
000177D6                            ; End of function Obj79_LoadInfo
000177D6                            
000177D6                            ; ===========================================================================
000177D6                            ; ---------------------------------------------------------------------------
000177D6                            ; Sprite mappings - lamppost
000177D6                            ; ---------------------------------------------------------------------------
000177D6                            Map_obj79:
000177D6                            	include "_maps\obj79.asm"
000177D6                            ; ---------------------------------------------------------------------------
000177D6                            ; Sprite mappings - lamppost
000177D6                            ; ---------------------------------------------------------------------------
000177D6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000177DA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000177DE 06                         byte_17100:	dc.b 6
000177DF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000177E4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000177E9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000177EE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000177F3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000177F8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000177FD 04                         byte_1711F:	dc.b 4
000177FE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017803 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017808 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001780D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017812 02                         byte_17134:	dc.b 2
00017813 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017818 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001781D 06                         byte_1713F:	dc.b 6
0001781E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017823 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017828 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001782D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017832 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017837 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001783C                            		even
0001783C                            		even
0001783C                            
0001783C                            ; ===========================================================================
0001783C                            ; ---------------------------------------------------------------------------
0001783C                            ; Object 7D - hidden points at the end of a level
0001783C                            ; ---------------------------------------------------------------------------
0001783C                            
0001783C                            Obj7D:					; XREF: Obj_Index
0001783C 7000                       		moveq	#0,d0
0001783E 1028 0024                  		move.b	$24(a0),d0
00017842 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017846 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001784A                            ; ===========================================================================
0001784A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001784C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001784E                            ; ===========================================================================
0001784E                            
0001784E                            Obj7D_Main:				; XREF: Obj7D_Index
0001784E 7410                       		moveq	#$10,d2
00017850 3602                       		move.w	d2,d3
00017852 D643                       		add.w	d3,d3
00017854 43F8 D000                  		lea	($FFFFD000).w,a1
00017858 3029 0008                  		move.w	8(a1),d0
0001785C 9068 0008                  		sub.w	8(a0),d0
00017860 D042                       		add.w	d2,d0
00017862 B043                       		cmp.w	d3,d0
00017864 6400                       		bcc.s	Obj7D_ChkDel
00017866 3229 000C                  		move.w	$C(a1),d1
0001786A 9268 000C                  		sub.w	$C(a0),d1
0001786E D242                       		add.w	d2,d1
00017870 B243                       		cmp.w	d3,d1
00017872 6400                       		bcc.s	Obj7D_ChkDel
00017874 4A78 FE08                  		tst.w	($FFFFFE08).w
00017878 6600                       		bne.s	Obj7D_ChkDel
0001787A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001787E 6600                       		bne.s	Obj7D_ChkDel
00017880 5428 0024                  		addq.b	#2,$24(a0)
00017884 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001788C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017892 0028 0004 0001             		ori.b	#4,1(a0)
00017898 117C 0000 0018             		move.b	#0,$18(a0)
0001789E 117C 0010 0019             		move.b	#$10,$19(a0)
000178A4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000178AA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000178B0 303C 00C9                  		move.w	#$C9,d0
000178B4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
000178BA 7000                       		moveq	#0,d0
000178BC 1028 0028                  		move.b	$28(a0),d0
000178C0 D040                       		add.w	d0,d0
000178C2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000178C6 4EB9 0000 0000             		jsr	AddPoints
000178CC                            
000178CC                            Obj7D_ChkDel:
000178CC 3028 0008                  		move.w	8(a0),d0
000178D0 0240 FF80                  		andi.w	#$FF80,d0
000178D4 3238 F700                  		move.w	($FFFFF700).w,d1
000178D8 0441 0080                  		subi.w	#$80,d1
000178DC 0241 FF80                  		andi.w	#$FF80,d1
000178E0 9041                       		sub.w	d1,d0
000178E2 0C40 0280                  		cmpi.w	#$280,d0
000178E6 6200                       		bhi.s	Obj7D_Delete
000178E8 4E75                       		rts	
000178EA                            ; ===========================================================================
000178EA                            
000178EA                            Obj7D_Delete:
000178EA 4EF9 0000 DC3A             		jmp	DeleteObject
000178F0                            ; ===========================================================================
000178F0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000178F2 03E8                       		dc.w 1000
000178F4 0064                       		dc.w 100
000178F6 0001                       		dc.w 1
000178F8                            ; ===========================================================================
000178F8                            
000178F8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000178F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000178FC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000178FE 3028 0008                  		move.w	8(a0),d0
00017902 0240 FF80                  		andi.w	#-$80,d0
00017906 3238 F700                  		move.w	($FFFFF700).w,d1
0001790A 0441 0080                  		subi.w	#$80,d1
0001790E 0241 FF80                  		andi.w	#-$80,d1
00017912 9041                       		sub.w	d1,d0
00017914 0C40 0280                  		cmpi.w	#$280,d0
00017918 6200                       		bhi.s	Obj7D_Delete2
0001791A 4EF9 0000 DBFE             		jmp	DisplaySprite
00017920                            ; ===========================================================================
00017920                            
00017920                            Obj7D_Delete2:
00017920 4EF9 0000 DC3A             		jmp	DeleteObject
00017926                            ; ===========================================================================
00017926                            ; ---------------------------------------------------------------------------
00017926                            ; Sprite mappings - hidden points at the end of	a level
00017926                            ; ---------------------------------------------------------------------------
00017926                            Map_obj7D:
00017926                            	include "_maps\obj7D.asm"
00017926                            ; ---------------------------------------------------------------------------
00017926                            ; Sprite mappings - hidden points at the end of	a level
00017926                            ; ---------------------------------------------------------------------------
00017926 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001792A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001792E 00                         byte_17250:	dc.b 0
0001792F 01                         byte_17251:	dc.b 1
00017930 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017935 01                         byte_17257:	dc.b 1
00017936 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001793B 01                         byte_1725D:	dc.b 1
0001793C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017942 00                         		even
00017942 00                         		even
00017942                            
00017942                            ; ===========================================================================
00017942                            ; ---------------------------------------------------------------------------
00017942                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017942                            ; ---------------------------------------------------------------------------
00017942                            
00017942                            Obj8A:					; XREF: Obj_Index
00017942 7000                       		moveq	#0,d0
00017944 1028 0024                  		move.b	$24(a0),d0
00017948 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001794C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017950                            ; ===========================================================================
00017950 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017952 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017954                            ; ===========================================================================
00017954                            
00017954                            Obj8A_Main:				; XREF: Obj8A_Index
00017954 5428 0024                  		addq.b	#2,$24(a0)
00017958 317C 0120 0008             		move.w	#$120,8(a0)
0001795E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017964 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001796C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017972 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017976 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001797A 117C 0000 0001             		move.b	#0,1(a0)
00017980 117C 0000 0018             		move.b	#0,$18(a0)
00017986 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001798C 6600                       		bne.s	Obj8A_Display	; if not, branch
0001798E 317C 00A6 0002             		move.w	#$A6,2(a0)
00017994 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001799A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001799E 6700                       		beq.s	Obj8A_Display	; if not, branch
000179A0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000179A6 6600                       		bne.s	Obj8A_Display	; if not, branch
000179A8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000179AE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000179B4 4EF9 0000 DC3A             		jmp	DeleteObject
000179BA                            ; ===========================================================================
000179BA                            
000179BA                            Obj8A_Display:				; XREF: Obj8A_Index
000179BA 4EF9 0000 DBFE             		jmp	DisplaySprite
000179C0                            ; ===========================================================================
000179C0                            ; ---------------------------------------------------------------------------
000179C0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000179C0                            ; ---------------------------------------------------------------------------
000179C0                            Map_obj8A:
000179C0                            	include "_maps\obj8A.asm"
000179C0                            ; ================================================================================
000179C0                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
000179C0                            ; ================================================================================
000179C0                            
000179C0                            DATAV02AM357W0A:
000179C0 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
000179C4 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
000179C8 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
000179CC 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
000179D0 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
000179D4 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
000179D6 0E                         DATAV02AM357W0A_0: dc.b $E
000179D7 F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
000179DC F805 8026 98               	dc.b $F8, $5, $80, $26, $98
000179E1 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
000179E6 F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
000179EB F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
000179F0 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
000179F5 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
000179FA F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
000179FF F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017A04 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017A09 F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017A0E F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017A13 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017A18 F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017A1D 10                         DATAV02AM357W0A_1: dc.b $10
00017A1E D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017A23 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017A28 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017A2D D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017A32 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017A37 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017A3C D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017A41 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017A46 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017A4B 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017A50 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017A55 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017A5A 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017A5F 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017A64 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017A69 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017A6E 0A                         DATAV02AM357W0A_2: dc.b $A
00017A6F D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017A74 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017A79 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017A7E D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017A83 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017A88 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017A8D D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017A92 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017A97 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017A9C 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017AA1 18                         DATAV02AM357W0A_3: dc.b $18
00017AA2 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017AA7 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017AAC D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017AB1 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017AB6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017ABB D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017AC0 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017AC5 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017ACA D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017ACF D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017AD4 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017AD9 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017ADE D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017AE3 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017AE8 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017AED 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017AF2 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017AF7 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017AFC 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017B01 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017B06 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017B0B 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017B10 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017B15 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017B1A 14                         DATAV02AM357W0A_4: dc.b $14
00017B1B D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017B20 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017B25 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017B2A D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017B2F D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017B34 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017B39 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017B3E 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017B43 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017B48 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017B4D 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017B52 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017B57 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017B5C 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017B61 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017B66 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017B6B 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017B70 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017B75 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017B7A 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017B7F 1A                         DATAV02AM357W0A_5: dc.b $1A
00017B80 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017B85 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017B8A D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017B8F D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017B94 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017B99 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017B9E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017BA3 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017BA8 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017BAD D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017BB2 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017BB7 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017BBC 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017BC1 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017BC6 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017BCB 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017BD0 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017BD5 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017BDA 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017BDF 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017BE4 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017BE9 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017BEE 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017BF3 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017BF8 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017BFD 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017C02 17                         DATAV02AM357W0A_6: dc.b $17
00017C03 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017C08 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017C0D D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017C12 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017C17 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017C1C D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017C21 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017C26 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017C2B D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017C30 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017C35 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017C3A D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017C3F 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017C44 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017C49 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017C4E 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017C53 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017C58 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017C5D 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017C62 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017C67 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017C6C 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017C71 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017C76 1F                         DATAV02AM357W0A_7: dc.b $1F
00017C77 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017C7C D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017C81 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017C86 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017C8B D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017C90 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017C95 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017C9A D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017C9F D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017CA4 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017CA9 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017CAE D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017CB3 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017CB8 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017CBD 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017CC2 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017CC7 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017CCC 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017CD1 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017CD6 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017CDB 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017CE0 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017CE5 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017CEA 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017CEF 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017CF4 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017CF9 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017CFE 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017D03 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017D08 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017D0D 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017D12 0F                         DATAV02AM357W0A_8: dc.b $F
00017D13 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017D18 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017D1D F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017D22 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017D27 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017D2C F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017D31 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017D36 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017D3B F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017D40 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017D45 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017D4A F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017D4F F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017D54 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017D59 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017D5E 08                         DATAV02AM357W0A_9: dc.b $8
00017D5F 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017D64 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017D69 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017D6E 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017D73 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017D78 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017D7D 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017D82 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017D87 20                         DATAV02AM357W0A_A: dc.b $20
00017D88 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017D8D ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017D92 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017D97 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017D9C ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017DA1 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017DA6 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017DAB FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017DB0 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017DB5 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017DBA FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017DBF FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017DC4 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017DC9 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017DCE 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017DD3 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017DD8 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017DDD 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017DE2 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017DE7 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017DEC 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017DF1 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017DF6 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017DFB 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017E00 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017E05 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017E0A 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017E0F 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017E14 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017E19 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017E1E 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017E23 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017E28                            	even
00017E28                            	even
00017E28                            
00017E28                            ; ===========================================================================
00017E28                            ; ---------------------------------------------------------------------------
00017E28                            ; Object 3D - matthew boss - modified by GK89
00017E28                            ; ---------------------------------------------------------------------------
00017E28                            
00017E28                            Obj3D:					; XREF: Obj_Index
00017E28 7000                       		moveq	#0,d0
00017E2A 1028 0024                  		move.b	$24(a0),d0
00017E2E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017E32 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017E36                            ; ===========================================================================
00017E36 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017E38 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017E3A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017E3C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017E3E                            
00017E3E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017E40 0401                       		dc.b 4,	1
00017E42 0607                       		dc.b 6,	7
00017E44                            ; ===========================================================================
00017E44                            
00017E44                            Obj3D_Main:				; XREF: Obj3D_Index
00017E44 45F9 0001 7E3E             		lea	(Obj3D_ObjData).l,a2
00017E4A 2248                       		movea.l	a0,a1
00017E4C 7202                       		moveq	#2,d1
00017E4E 6000                       		bra.s	Obj3D_LoadBoss
00017E50                            ; ===========================================================================
00017E50                            
00017E50                            Obj3D_Loop:
00017E50 4EB9 0000 E09A             		jsr	SingleObjLoad2
00017E56 6600                       		bne.s	loc_17772
00017E58                            
00017E58                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017E58 135A 0024                  		move.b	(a2)+,$24(a1)
00017E5C 12BC 003D                  		move.b	#$3D,0(a1)
00017E60 3368 0008 0008             		move.w	8(a0),8(a1)
00017E66 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E6C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017E74 337C 0400 0002             		move.w	#$400,2(a1)
00017E7A 137C 0004 0001             		move.b	#4,1(a1)
00017E80 137C 0020 0019             		move.b	#$20,$19(a1)
00017E86 137C 0003 0018             		move.b	#3,$18(a1)
00017E8C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017E90 2348 0034                  		move.l	a0,$34(a1)
00017E94 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017E98                            
00017E98                            loc_17772:
00017E98 3168 0008 0030             		move.w	8(a0),$30(a0)
00017E9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017EA4 117C 000F 0020             		move.b	#$F,$20(a0)
00017EAA 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00017EB0                            
00017EB0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017EB0 7000                       		moveq	#0,d0
00017EB2 1028 0025                  		move.b	$25(a0),d0
00017EB6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017EBA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017EBE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017EC4 4EB9 0000 ACC8             		jsr	AnimateSprite
00017ECA 1028 0022                  		move.b	$22(a0),d0
00017ECE 0200 0003                  		andi.b	#3,d0
00017ED2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017ED8 8128 0001                  		or.b	d0,1(a0)
00017EDC 4EF9 0000 DBFE             		jmp	DisplaySprite
00017EE2                            ; ===========================================================================
00017EE2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017EE4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017EE6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017EE8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017EEA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017EEC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017EEE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017EF0                            ; ===========================================================================
00017EF0                            
00017EF0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017EF0 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00017EF6 6100 0000                  		bsr.w	BossMove
00017EFA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017F00 6600                       		bne.s	loc_177E6
00017F02 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017F08 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017F0C                            
00017F0C                            loc_177E6:
00017F0C 1028 003F                  		move.b	$3F(a0),d0
00017F10 4EB9 0000 2C64             		jsr	(CalcSine).l
00017F16 EC40                       		asr.w	#6,d0
00017F18 D068 0038                  		add.w	$38(a0),d0
00017F1C 3140 000C                  		move.w	d0,$C(a0)
00017F20 3168 0030 0008             		move.w	$30(a0),8(a0)
00017F26 5428 003F                  		addq.b	#2,$3F(a0)
00017F2A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017F30 6400                       		bcc.s	locret_1784A
00017F32 4A28 0022                  		tst.b	$22(a0)
00017F36 6B00                       		bmi.s	loc_1784C
00017F38 4A28 0020                  		tst.b	$20(a0)
00017F3C 6600                       		bne.s	locret_1784A
00017F3E 4A28 003E                  		tst.b	$3E(a0)
00017F42 6600                       		bne.s	Obj3D_ShipFlash
00017F44 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017F4A 303C 00AC                  		move.w	#$AC,d0
00017F4E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017F54                            
00017F54                            Obj3D_ShipFlash:
00017F54 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017F58 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017F5A 4A51                       		tst.w	(a1)
00017F5C 6600                       		bne.s	loc_1783C
00017F5E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017F62                            
00017F62                            loc_1783C:
00017F62 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017F64 5328 003E                  		subq.b	#1,$3E(a0)
00017F68 6600                       		bne.s	locret_1784A
00017F6A 117C 000F 0020             		move.b	#$F,$20(a0)
00017F70                            
00017F70                            locret_1784A:
00017F70 4E75                       		rts	
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            loc_1784C:				; XREF: loc_177E6
00017F72 7064                       		moveq	#100,d0
00017F74 6100 0000                  		bsr.w	AddPoints
00017F78 117C 0008 0025             		move.b	#8,$25(a0)
00017F7E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017F84 4E75                       		rts	
00017F86                            
00017F86                            ; ---------------------------------------------------------------------------
00017F86                            ; Defeated boss	subroutine
00017F86                            ; ---------------------------------------------------------------------------
00017F86                            
00017F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F86                            
00017F86                            
00017F86                            BossDefeated:
00017F86 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017F8A 0200 0007                  		andi.b	#7,d0
00017F8E 6600                       		bne.s	locret_178A2
00017F90 4EB9 0000 E084             		jsr	SingleObjLoad
00017F96 6600                       		bne.s	locret_178A2
00017F98 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017F9C 3368 0008 0008             		move.w	8(a0),8(a1)
00017FA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FA8 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00017FAE 3200                       		move.w	d0,d1
00017FB0 7200                       		moveq	#0,d1
00017FB2 1200                       		move.b	d0,d1
00017FB4 E409                       		lsr.b	#2,d1
00017FB6 0441 0020                  		subi.w	#$20,d1
00017FBA D369 0008                  		add.w	d1,8(a1)
00017FBE E048                       		lsr.w	#8,d0
00017FC0 E608                       		lsr.b	#3,d0
00017FC2 D169 000C                  		add.w	d0,$C(a1)
00017FC6                            
00017FC6                            locret_178A2:
00017FC6 4E75                       		rts	
00017FC8                            ; End of function BossDefeated
00017FC8                            
00017FC8                            ; ---------------------------------------------------------------------------
00017FC8                            ; Subroutine to	move a boss
00017FC8                            ; ---------------------------------------------------------------------------
00017FC8                            
00017FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FC8                            
00017FC8                            
00017FC8                            BossMove:
00017FC8 2428 0030                  		move.l	$30(a0),d2
00017FCC 2628 0038                  		move.l	$38(a0),d3
00017FD0 3028 0010                  		move.w	$10(a0),d0
00017FD4 48C0                       		ext.l	d0
00017FD6 E180                       		asl.l	#8,d0
00017FD8 D480                       		add.l	d0,d2
00017FDA 3028 0012                  		move.w	$12(a0),d0
00017FDE 48C0                       		ext.l	d0
00017FE0 E180                       		asl.l	#8,d0
00017FE2 D680                       		add.l	d0,d3
00017FE4 2142 0030                  		move.l	d2,$30(a0)
00017FE8 2143 0038                  		move.l	d3,$38(a0)
00017FEC 4E75                       		rts	
00017FEE                            ; End of function BossMove
00017FEE                            
00017FEE                            ; ===========================================================================
00017FEE                            
00017FEE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00017FEE 6100 FFD8                  		bsr.w	BossMove
00017FF2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017FF8 6600                       		bne.s	loc_17916
00017FFA 317C 0000 0010             		move.w	#0,$10(a0)
00018000 317C 0000 0012             		move.w	#0,$12(a0)
00018006 5428 0025                  		addq.b	#2,$25(a0)
0001800A 4EB9 0000 E09A             		jsr	SingleObjLoad2
00018010 6600                       		bne.s	loc_17910
00018012 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018016 3368 0030 0008             		move.w	$30(a0),8(a1)
0001801C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018022 2348 0034                  		move.l	a0,$34(a1)
00018026                            
00018026                            loc_17910:
00018026 317C 0077 003C             		move.w	#$77,$3C(a0)
0001802C                            
0001802C                            loc_17916:
0001802C 6000 FEDE                  		bra.w	loc_177E6
00018030                            ; ===========================================================================
00018030                            
00018030                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018030 5368 003C                  		subq.w	#1,$3C(a0)
00018034 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001803A 5428 0025                  		addq.b	#2,$25(a0)
0001803E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018044 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018048 9068 0008                  		sub.w	8(a0),d0		 
0001804C 6A00                       		bpl.s	Obj3D_left			 
0001804E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018054 6000                       		bra.s	Obj3D_right		 
00018056 08A8 0005 0022             		bclr	#5,$22(a0)
0001805C 4EB9 0000 0000              		jsr     loc_17950
00018062 4E75                       		rts
00018064                            ; ===========================================================================
00018064                            
00018064                            Obj3D_right:
00018064 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001806A 4E75                       		Rts
0001806C                            
0001806C                            Obj3D_left:
0001806C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018072 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018078 6600                       		bne.s	RTSboss  	; if not, branch
0001807A 0868 0000 0022              		bchg	#0,$22(a0)
00018080                            
00018080                            RTSboss:	    
00018080 4E75                       		rts
00018082                             ; ===========================================================================
00018082                            
00018082                            Obj3D_UpStuff:
00018082 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018086 9068 000C                  		sub.w	$C(a0),d0		 
0001808A 6A00                       		bpl.s	Obj3D_down			 
0001808C 6000                        		bra.s	Obj3D_up		 
0001808E 08A8 0005 0022             		bclr	#5,$22(a0)
00018094                             
00018094                            Obj3D_up:		
00018094 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001809A 4E75                        	    rts
0001809C                            
0001809C                            Obj3D_down:
0001809C 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000180A2                            
000180A2                            loc_17950:
000180A2 6000 FE68                  		bra.w	loc_177E6
000180A6                            ; ===========================================================================
000180A6                            
000180A6                            loc_17954:				; XREF: Obj3D_ShipIndex
000180A6 5368 003C                  		subq.w	#1,$3C(a0)
000180AA 6B00                       		bmi.s	loc_17960
000180AC 6100 FF1A                  		bsr.w	BossMove
000180B0 6000                       		bra.s	loc_17976
000180B2                            ; ===========================================================================
000180B2                            
000180B2                            loc_17960:
000180B2 0868 0000 0022             		bchg	#0,$22(a0)
000180B8 317C 003F 003C             		move.w	#$3F,$3C(a0)
000180BE 5528 0025                  		subq.b	#2,$25(a0)
000180C2 317C 0000 0010             		move.w	#0,$10(a0)
000180C8                            
000180C8                            loc_17976:
000180C8 6000 FE42                  		bra.w	loc_177E6
000180CC                            ; ===========================================================================
000180CC                            
000180CC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000180CC 5368 003C                  		subq.w	#1,$3C(a0)
000180D0 6B00                       		bmi.s	loc_17984
000180D2 6000 FEB2                  		bra.w	BossDefeated
000180D6                            ; ===========================================================================
000180D6                            
000180D6                            loc_17984:
000180D6 08E8 0000 0022             		bset	#0,$22(a0)
000180DC 08A8 0007 0022             		bclr	#7,$22(a0)
000180E2 4268 0010                  		clr.w	$10(a0)
000180E6 5428 0025                  		addq.b	#2,$25(a0)
000180EA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000180F0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000180F4 6600                       		bne.s	locret_179AA
000180F6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000180FC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018102 6000 FE82                  		bra.w	BossDefeated
00018106                            
00018106                            locret_179AA:
00018106 4E75                       		rts	
00018108                            ; ===========================================================================
00018108                            
00018108                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018108 4EB9 0000 DBAC             		jsr ObjectFall		
0001810E 5268 003C                  		addq.w	#1,$3C(a0)
00018112 6700                       		beq.s	loc_179BC
00018114 6A00                       		bpl.s	loc_179C2
00018116 6000                       		bra.s	loc_179EE
00018118                            ; ===========================================================================
00018118                            
00018118                            loc_179BC:
00018118 4268 0012                  		clr.w	$12(a0)
0001811C 6000                       		bra.s	loc_179EE
0001811E                            ; ===========================================================================
0001811E                            
0001811E                            loc_179C2:
0001811E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018124 6500                       		bcs.s	loc_179DA
00018126 6700                       		beq.s	loc_179E0
00018128 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001812E 6500                       		bcs.s	loc_179EE
00018130 5428 0025                  		addq.b	#2,$25(a0)
00018134 6000                       		bra.s	loc_179EE
00018136                            ; ===========================================================================
00018136                            
00018136                            loc_179DA:
00018136 5168 0012                  		subq.w	#8,$12(a0)
0001813A 6000                       		bra.s	loc_179EE
0001813C 6000 FE48                  		bra.w	BossDefeated
00018140                            ; ===========================================================================
00018140                            
00018140                            loc_179E0:
00018140 4268 0012                  		clr.w	$12(a0)
00018144 303C 0081                  		move.w	#$81,d0
00018148 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
0001814E                            
0001814E                            loc_179EE:
0001814E 6100 FE78                  		bsr.w	BossMove
00018152 6000 FDB8                  		bra.w	loc_177E6
00018156                            ; ===========================================================================
00018156                            
00018156                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018156 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001815C 6700                       		beq.s	loc_17A10
0001815E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018162 6000                       		bra.s	loc_17A16
00018164                            ; ===========================================================================
00018164                            
00018164                            loc_17A10:
00018164 4A28 0001                  		tst.b	1(a0)
00018168 6A00                       		bpl.s	Obj3D_ShipDel
0001816A                            
0001816A                            loc_17A16:
0001816A 6100 FE5C                  		bsr.w	BossMove
0001816E 6000 FD9C                  		bra.w	loc_177E6
00018172                            ; ===========================================================================
00018172                            
00018172                            Obj3D_ShipDel:
00018172 4EF9 0000 DC3A             		jmp	DeleteObject
00018178                            ; ===========================================================================
00018178                            
00018178                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018178 7000                       		moveq	#0,d0
0001817A 7201                       		moveq	#1,d1
0001817C 2268 0034                  		movea.l	$34(a0),a1
00018180 1029 0025                  		move.b	$25(a1),d0
00018184 5900                       		subq.b	#4,d0
00018186 6600                       		bne.s	loc_17A3E
00018188 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001818E 6600                       		bne.s	loc_17A46
00018190 7204                       		moveq	#4,d1
00018192                            
00018192                            loc_17A3E:
00018192 5D00                       		subq.b	#6,d0
00018194 6B00                       		bmi.s	loc_17A46
00018196 720A                       		moveq	#$A,d1
00018198 6000                       		bra.s	loc_17A5A
0001819A                            ; ===========================================================================
0001819A                            
0001819A                            loc_17A46:
0001819A 4A29 0020                  		tst.b	$20(a1)
0001819E 6600                       		bne.s	loc_17A50
000181A0 7205                       		moveq	#5,d1
000181A2 6000                       		bra.s	loc_17A5A
000181A4                            ; ===========================================================================
000181A4                            
000181A4                            loc_17A50:
000181A4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000181AA 6500                       		bcs.s	loc_17A5A
000181AC 7204                       		moveq	#4,d1
000181AE                            
000181AE                            loc_17A5A:
000181AE 1141 001C                  		move.b	d1,$1C(a0)
000181B2 5500                       		subq.b	#2,d0
000181B4 6600                       		bne.s	Obj3D_FaceDisp
000181B6 117C 0006 001C             		move.b	#6,$1C(a0)
000181BC 4A28 0001                  		tst.b	1(a0)
000181C0 6A00                       		bpl.s	Obj3D_FaceDel
000181C2                            
000181C2                            Obj3D_FaceDisp:
000181C2 6000                       		bra.s	Obj3D_Display
000181C4                            ; ===========================================================================
000181C4                            
000181C4                            Obj3D_FaceDel:
000181C4 4EF9 0000 DC3A             		jmp	DeleteObject
000181CA                            ; ===========================================================================
000181CA                            
000181CA                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000181CA 117C 0007 001C             		move.b	#7,$1C(a0)
000181D0 2268 0034                  		movea.l	$34(a0),a1
000181D4 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000181DA 6600                       		bne.s	loc_17A96
000181DC 117C 000B 001C             		move.b	#$B,$1C(a0)
000181E2 4A28 0001                  		tst.b	1(a0)
000181E6 6A00                       		bpl.s	Obj3D_FlameDel
000181E8 6000                       		bra.s	Obj3D_FlameDisp
000181EA                            ; ===========================================================================
000181EA                            
000181EA                            loc_17A96:
000181EA 3029 0010                  		move.w	$10(a1),d0
000181EE 6700                       		beq.s	Obj3D_FlameDisp
000181F0 117C 0008 001C             		move.b	#8,$1C(a0)
000181F6                            
000181F6                            Obj3D_FlameDisp:
000181F6 6000                       		bra.s	Obj3D_Display
000181F8                            ; ===========================================================================
000181F8                            
000181F8                            Obj3D_FlameDel:
000181F8 4EF9 0000 DC3A             		jmp	DeleteObject
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000181FE 2268 0034                  		movea.l	$34(a0),a1
00018202 3169 0008 0008             		move.w	8(a1),8(a0)
00018208 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001820E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018214 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001821A 4EB9 0000 ACC8             		jsr	AnimateSprite
00018220 1028 0022                  		move.b	$22(a0),d0
00018224 0200 0003                  		andi.b	#3,d0
00018228 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001822E 8128 0001                  		or.b	d0,1(a0)
00018232 4EF9 0000 DBFE             		jmp	DisplaySprite
00018238                            ; ===========================================================================
00018238                            ; ---------------------------------------------------------------------------
00018238                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018238                            ; ---------------------------------------------------------------------------
00018238                            
00018238                            Obj48:					; XREF: Obj_Index
00018238 7000                       		moveq	#0,d0
0001823A 1028 0024                  		move.b	$24(a0),d0
0001823E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018242 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018246                            ; ===========================================================================
00018246 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018248 0000                       		dc.w Obj48_Base-Obj48_Index
0001824A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001824C 0000                       		dc.w loc_17C68-Obj48_Index
0001824E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018250                            ; ===========================================================================
00018250                            
00018250                            Obj48_Main:				; XREF: Obj48_Index
00018250 5428 0024                  		addq.b	#2,$24(a0)
00018254 317C 4080 0026             		move.w	#$4080,$26(a0)
0001825A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018260 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018268 317C 046C 0002             		move.w	#$46C,2(a0)
0001826E 45E8 0028                  		lea	$28(a0),a2
00018272 14FC 0000                  		move.b	#0,(a2)+
00018276 7205                       		moveq	#5,d1
00018278 2248                       		movea.l	a0,a1
0001827A 6000                       		bra.s	loc_17B60
0001827C                            ; ===========================================================================
0001827C                            
0001827C                            Obj48_MakeLinks:
0001827C 4EB9 0000 E09A             		jsr	SingleObjLoad2
00018282 6600                       		bne.s	Obj48_MakeBall
00018284 3368 0008 0008             		move.w	8(a0),8(a1)
0001828A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018290 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018294 137C 0006 0024             		move.b	#6,$24(a1)
0001829A 237C 0000 811C 0004        		move.l	#Map_obj15,4(a1)
000182A2 337C 0380 0002             		move.w	#$380,2(a1)
000182A8 137C 0001 001A             		move.b	#1,$1A(a1)
000182AE 5228 0028                  		addq.b	#1,$28(a0)
000182B2                            
000182B2                            loc_17B60:				; XREF: Obj48_Main
000182B2 3A09                       		move.w	a1,d5
000182B4 0445 D000                  		subi.w	#$D000,d5
000182B8 EC4D                       		lsr.w	#6,d5
000182BA 0245 007F                  		andi.w	#$7F,d5
000182BE 14C5                       		move.b	d5,(a2)+
000182C0 137C 0004 0001             		move.b	#4,1(a1)
000182C6 137C 0008 0019             		move.b	#8,$19(a1)
000182CC 137C 0006 0018             		move.b	#6,$18(a1)
000182D2 2368 0034 0034             		move.l	$34(a0),$34(a1)
000182D8 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000182DC                            
000182DC                            Obj48_MakeBall:
000182DC 137C 0008 0024             		move.b	#8,$24(a1)
000182E2 237C 0000 867A 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000182EA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000182F0 137C 0001 001A             		move.b	#1,$1A(a1)
000182F6 137C 0005 0018             		move.b	#5,$18(a1)
000182FC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018302 4E75                       		rts	
00018304                            ; ===========================================================================
00018304                            
00018304 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001830A                            
0001830A                            ; ===========================================================================
0001830A                            
0001830A                            Obj48_Base:				; XREF: Obj48_Index
0001830A 47F9 0001 8304             		lea	(Obj48_PosData).l,a3
00018310 45E8 0028                  		lea	$28(a0),a2
00018314 7C00                       		moveq	#0,d6
00018316 1C1A                       		move.b	(a2)+,d6
00018318                            
00018318                            loc_17BC6:
00018318 7800                       		moveq	#0,d4
0001831A 181A                       		move.b	(a2)+,d4
0001831C ED4C                       		lsl.w	#6,d4
0001831E 0684 00FF D000             		addi.l	#$FFD000,d4
00018324 2244                       		movea.l	d4,a1
00018326 101B                       		move.b	(a3)+,d0
00018328 B029 003C                  		cmp.b	$3C(a1),d0
0001832C 6700                       		beq.s	loc_17BE0
0001832E 5229 003C                  		addq.b	#1,$3C(a1)
00018332                            
00018332                            loc_17BE0:
00018332 51CE FFE4                  		dbf	d6,loc_17BC6
00018336                            
00018336 B029 003C                  		cmp.b	$3C(a1),d0
0001833A 6600                       		bne.s	loc_17BFA
0001833C 2268 0034                  		movea.l	$34(a0),a1
00018340 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018346 6600                       		bne.s	loc_17BFA
00018348 5428 0024                  		addq.b	#2,$24(a0)
0001834C                            
0001834C                            loc_17BFA:
0001834C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018352 6700                       		beq.s	Obj48_Display
00018354 5268 0032                  		addq.w	#1,$32(a0)
00018358                            
00018358                            Obj48_Display:
00018358 6100 0000                  		bsr.w	sub_17C2A
0001835C 1028 0026                  		move.b	$26(a0),d0
00018360 4EB9 0000 808E             		jsr	(Obj15_Move2).l
00018366 4EF9 0000 DBFE             		jmp	DisplaySprite
0001836C                            ; ===========================================================================
0001836C                            
0001836C                            Obj48_Display2:				; XREF: Obj48_Index
0001836C 6100 0000                  		bsr.w	sub_17C2A
00018370 4EB9 0000 804E             		jsr	(Obj48_Move).l
00018376 4EF9 0000 DBFE             		jmp	DisplaySprite
0001837C                            
0001837C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001837C                            
0001837C                            
0001837C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001837C 2268 0034                  		movea.l	$34(a0),a1
00018380 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018386 6400                       		bcc.s	loc_17C3C
00018388 0868 0000 001A             		bchg	#0,$1A(a0)
0001838E                            
0001838E                            loc_17C3C:
0001838E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018394 3029 000C                  		move.w	$C(a1),d0
00018398 D068 0032                  		add.w	$32(a0),d0
0001839C 3140 0038                  		move.w	d0,$38(a0)
000183A0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000183A6 4A29 0022                  		tst.b	$22(a1)
000183AA 6A00                       		bpl.s	locret_17C66
000183AC 10BC 003F                  		move.b	#$3F,0(a0)
000183B0 117C 0000 0024             		move.b	#0,$24(a0)
000183B6                            
000183B6                            locret_17C66:
000183B6 4E75                       		rts	
000183B8                            ; End of function sub_17C2A
000183B8                            
000183B8                            ; ===========================================================================
000183B8                            
000183B8                            loc_17C68:				; XREF: Obj48_Index
000183B8 2268 0034                  		movea.l	$34(a0),a1
000183BC 4A29 0022                  		tst.b	$22(a1)
000183C0 6A00                       		bpl.s	Obj48_Display3
000183C2 10BC 003F                  		move.b	#$3F,0(a0)
000183C6 117C 0000 0024             		move.b	#0,$24(a0)
000183CC                            
000183CC                            Obj48_Display3:
000183CC 4EF9 0000 DBFE             		jmp	DisplaySprite
000183D2                            ; ===========================================================================
000183D2                            
000183D2                            Obj48_ChkVanish:			; XREF: Obj48_Index
000183D2 7000                       		moveq	#0,d0
000183D4 4A28 001A                  		tst.b	$1A(a0)
000183D8 6600                       		bne.s	Obj48_Vanish
000183DA 5200                       		addq.b	#1,d0
000183DC                            
000183DC                            Obj48_Vanish:
000183DC 1140 001A                  		move.b	d0,$1A(a0)
000183E0 2268 0034                  		movea.l	$34(a0),a1
000183E4 4A29 0022                  		tst.b	$22(a1)
000183E8 6A00                       		bpl.s	Obj48_Display4
000183EA 117C 0000 0020             		move.b	#0,$20(a0)
000183F0 6100 FB94                  		bsr.w	BossDefeated
000183F4 5328 003C                  		subq.b	#1,$3C(a0)
000183F8 6A00                       		bpl.s	Obj48_Display4
000183FA 10BC 003F                  		move.b	#$3F,(a0)
000183FE 117C 0000 0024             		move.b	#0,$24(a0)
00018404                            
00018404                            Obj48_Display4:
00018404 4EF9 0000 DBFE             		jmp	DisplaySprite
0001840A                            ; ===========================================================================
0001840A                            Ani_Eggman:
0001840A                            	include "_anim\Eggman.asm"
0001840A                            ; ---------------------------------------------------------------------------
0001840A                            ; Animation script - Eggman (bosses)
0001840A                            ; ---------------------------------------------------------------------------
0001840A 0000                       		dc.w byte_17CD4-Ani_Eggman
0001840C 0000                       		dc.w byte_17CD8-Ani_Eggman
0001840E 0000                       		dc.w byte_17CDC-Ani_Eggman
00018410 0000                       		dc.w byte_17CE0-Ani_Eggman
00018412 0000                       		dc.w byte_17CE4-Ani_Eggman
00018414 0000                       		dc.w byte_17CE8-Ani_Eggman
00018416 0000                       		dc.w byte_17CEC-Ani_Eggman
00018418 0000                       		dc.w byte_17CF0-Ani_Eggman
0001841A 0000                       		dc.w byte_17CF4-Ani_Eggman
0001841C 0000                       		dc.w byte_17CF8-Ani_Eggman
0001841E 0000                       		dc.w byte_17CFC-Ani_Eggman
00018420 0000                       		dc.w byte_17D00-Ani_Eggman
00018422 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018426 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001842A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001842E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018432 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018436 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001843A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001843E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018442 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018446 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001844A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001844E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001845A                            		even
0001845A                            		even
0001845A                            
0001845A                            ; ---------------------------------------------------------------------------
0001845A                            ; Sprite mappings - Eggman (boss levels)
0001845A                            ; ---------------------------------------------------------------------------
0001845A                            Map_Eggman:
0001845A                            	include "_maps\Eggman.asm"
0001845A                            Map_dc7e:
0001845A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001845C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001845E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018460 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018462 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018464 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018466 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018468 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001846A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001846C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001846E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018470 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018472 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018474 06                         Map_dc7e_1A: 	dc.b $6
00018475 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001847A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001847F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018484 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018489 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001848E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018493 02                         Map_dc7e_39: 	dc.b $2
00018494 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018499 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001849E 02                         Map_dc7e_44: 	dc.b $2
0001849F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000184A4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000184A9 03                         Map_dc7e_4F: 	dc.b $3
000184AA E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000184AF EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000184B4 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000184B9 03                         Map_dc7e_5F: 	dc.b $3
000184BA E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000184BF EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000184C4 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000184C9 03                         Map_dc7e_6F: 	dc.b $3
000184CA E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000184CF EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000184D4 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000184D9 03                         Map_dc7e_7F: 	dc.b $3
000184DA E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000184DF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000184E4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000184E9 04                         Map_dc7e_8F: 	dc.b $4
000184EA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000184EF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000184F4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000184F9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000184FE 01                         Map_dc7e_A4: 	dc.b $1
000184FF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018504 01                         Map_dc7e_AA: 	dc.b $1
00018505 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001850A 00                         Map_dc7e_B0: 	dc.b $0
0001850B 02                         Map_dc7e_B1: 	dc.b $2
0001850C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018511 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018516 02                         Map_dc7e_BC: 	dc.b $2
00018517 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001851C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018522 00                         	even
00018522 00                         	even
00018522                            
00018522                            ; ---------------------------------------------------------------------------
00018522                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018522                            ; ---------------------------------------------------------------------------
00018522                            Map_BossItems:
00018522                            	include "_maps\Boss items.asm"
00018522                            ; ---------------------------------------------------------------------------
00018522                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018522                            ; ---------------------------------------------------------------------------
00018522 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018526 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001852A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001852E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018532 01                         byte_17DE4:	dc.b 1
00018533 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018538 02                         byte_17DEA:	dc.b 2
00018539 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001853E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018543 00                         		dc.b 0
00018544 01                         byte_17DF6:	dc.b 1
00018545 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001854A 01                         byte_17DFC:	dc.b 1
0001854B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018550 01                         byte_17E02:	dc.b 1
00018551 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018556 04                         byte_17E08:	dc.b 4
00018557 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001855C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018561 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018566 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001856B 00                         		dc.b 0
0001856C 02                         byte_17E1E:	dc.b 2
0001856D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018572 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018577 00                         		dc.b 0
00018578 02                         byte_17E2A:	dc.b 2
00018579 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001857E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018584 00                         		even
00018584 00                         		even
00018584                            
00018584                            ; ===========================================================================
00018584                            ; ---------------------------------------------------------------------------
00018584                            ; Object 77 - Eggman (LZ)
00018584                            ; ---------------------------------------------------------------------------
00018584                            
00018584                            Obj77:					; XREF: Obj_Index
00018584 7000                       		moveq	#0,d0
00018586 1028 0024                  		move.b	$24(a0),d0
0001858A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001858E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018592                            ; ===========================================================================
00018592 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018594 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018596 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018598 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001859A                            
0001859A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001859C 0401                       		dc.b 4,	1
0001859E 0607                       		dc.b 6,	7
000185A0                            ; ===========================================================================
000185A0                            
000185A0                            Obj77_Main:				; XREF: Obj77_Index
000185A0 317C 1E10 0008             		move.w	#$1E10,8(a0)
000185A6 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000185AC 3168 0008 0030             		move.w	8(a0),$30(a0)
000185B2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000185B8 117C 000F 0020             		move.b	#$F,$20(a0)
000185BE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000185C4 117C 0004 0018             		move.b	#4,$18(a0)
000185CA 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
000185CE 2248                       		movea.l	a0,a1
000185D0 7202                       		moveq	#2,d1
000185D2 6000                       		bra.s	Obj77_LoadBoss
000185D4                            ; ===========================================================================
000185D4                            
000185D4                            Obj77_Loop:
000185D4 4EB9 0000 E09A             		jsr	SingleObjLoad2
000185DA 6600                       		bne.s	Obj77_ShipMain
000185DC 12BC 0077                  		move.b	#$77,0(a1)
000185E0 3368 0008 0008             		move.w	8(a0),8(a1)
000185E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000185EC                            
000185EC                            Obj77_LoadBoss:				; XREF: Obj77_Main
000185EC 08A8 0000 0022             		bclr	#0,$22(a0)
000185F2 4229 0025                  		clr.b	$25(a1)
000185F6 135A 0024                  		move.b	(a2)+,$24(a1)
000185FA 135A 001C                  		move.b	(a2)+,$1C(a1)
000185FE 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018604 237C 0001 845A 0004        		move.l	#Map_Eggman,4(a1)
0001860C 337C 0400 0002             		move.w	#$400,2(a1)
00018612 137C 0004 0001             		move.b	#4,1(a1)
00018618 137C 0020 0019             		move.b	#$20,$19(a1)
0001861E 2348 0034                  		move.l	a0,$34(a1)
00018622 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018626                            
00018626                            Obj77_ShipMain:
00018626 43F8 D000                  		lea	($FFFFD000).w,a1
0001862A 7000                       		moveq	#0,d0
0001862C 1028 0025                  		move.b	$25(a0),d0
00018630 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018634 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018638 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
0001863E 4EB9 0000 ACC8             		jsr	AnimateSprite
00018644 7003                       		moveq	#3,d0
00018646 C028 0022                  		and.b	$22(a0),d0
0001864A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018650 8128 0001                  		or.b	d0,1(a0)
00018654 4EF9 0000 DBFE             		jmp	DisplaySprite
0001865A                            ; ===========================================================================
0001865A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001865E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018662 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018666 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001866A                            ; ===========================================================================
0001866A                            
0001866A                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001866A 3029 0008                  		move.w	8(a1),d0
0001866E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018672 6500                       		bcs.s	loc_17F38
00018674 317C FE80 0012             		move.w	#-$180,$12(a0)
0001867A 317C 0060 0010             		move.w	#$60,$10(a0)
00018680 5428 0025                  		addq.b	#2,$25(a0)
00018684                            
00018684                            loc_17F38:
00018684 6100 F942                  		bsr.w	BossMove
00018688 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001868E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018694                            
00018694                            loc_17F48:
00018694 4A28 003D                  		tst.b	$3D(a0)
00018698 6600                       		bne.s	loc_17F8E
0001869A 4A28 0022                  		tst.b	$22(a0)
0001869E 6B00                       		bmi.s	loc_17F92
000186A0 4A28 0020                  		tst.b	$20(a0)
000186A4 6600                       		bne.s	locret_17F8C
000186A6 4A28 003E                  		tst.b	$3E(a0)
000186AA 6600                       		bne.s	loc_17F70
000186AC 117C 0020 003E             		move.b	#$20,$3E(a0)
000186B2 303C 00AC                  		move.w	#$AC,d0
000186B6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
000186BC                            
000186BC                            loc_17F70:
000186BC 43F8 FB22                  		lea	($FFFFFB22).w,a1
000186C0 7000                       		moveq	#0,d0
000186C2 4A51                       		tst.w	(a1)
000186C4 6600                       		bne.s	loc_17F7E
000186C6 303C 0EEE                  		move.w	#$EEE,d0
000186CA                            
000186CA                            loc_17F7E:
000186CA 3280                       		move.w	d0,(a1)
000186CC 5328 003E                  		subq.b	#1,$3E(a0)
000186D0 6600                       		bne.s	locret_17F8C
000186D2 117C 000F 0020             		move.b	#$F,$20(a0)
000186D8                            
000186D8                            locret_17F8C:
000186D8 4E75                       		rts	
000186DA                            ; ===========================================================================
000186DA                            
000186DA                            loc_17F8E:				; XREF: loc_17F48
000186DA 6000 F8AA                  		bra.w	BossDefeated
000186DE                            ; ===========================================================================
000186DE                            
000186DE                            loc_17F92:				; XREF: loc_17F48
000186DE 7064                       		moveq	#100,d0
000186E0 6100 0000                  		bsr.w	AddPoints
000186E4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000186EA 4E75                       		rts	
000186EC                            ; ===========================================================================
000186EC                            
000186EC                            loc_17FA0:				; XREF: Obj77_ShipIndex
000186EC 70FE                       		moveq	#-2,d0
000186EE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000186F4 6500                       		bcs.s	loc_17FB6
000186F6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000186FC 4268 0010                  		clr.w	$10(a0)
00018700 5240                       		addq.w	#1,d0
00018702                            
00018702                            loc_17FB6:
00018702 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018708 6E00                       		bgt.s	loc_17FCA
0001870A 317C 0500 0038             		move.w	#$500,$38(a0)
00018710 4268 0012                  		clr.w	$12(a0)
00018714 5240                       		addq.w	#1,d0
00018716                            
00018716                            loc_17FCA:
00018716 6600                       		bne.s	loc_17FDC
00018718 317C 0140 0010             		move.w	#$140,$10(a0)
0001871E 317C FE00 0012             		move.w	#-$200,$12(a0)
00018724 5428 0025                  		addq.b	#2,$25(a0)
00018728                            
00018728                            loc_17FDC:
00018728 6000 FF5A                  		bra.w	loc_17F38
0001872C                            ; ===========================================================================
0001872C                            
0001872C                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001872C 70FE                       		moveq	#-2,d0
0001872E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018734 6500                       		bcs.s	loc_17FF6
00018736 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001873C 4268 0010                  		clr.w	$10(a0)
00018740 5240                       		addq.w	#1,d0
00018742                            
00018742                            loc_17FF6:
00018742 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018748 6E00                       		bgt.s	loc_1800A
0001874A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018750 4268 0012                  		clr.w	$12(a0)
00018754 5240                       		addq.w	#1,d0
00018756                            
00018756                            loc_1800A:
00018756 6600                       		bne.s	loc_1801A
00018758 317C FE80 0012             		move.w	#-$180,$12(a0)
0001875E 5428 0025                  		addq.b	#2,$25(a0)
00018762 4228 003F                  		clr.b	$3F(a0)
00018766                            
00018766                            loc_1801A:
00018766 6000 FF1C                  		bra.w	loc_17F38
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            loc_1801E:				; XREF: Obj77_ShipIndex
0001876A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018770 6E00                       		bgt.s	loc_1804E
00018772 317C 0100 0038             		move.w	#$100,$38(a0)
00018778 317C 0140 0010             		move.w	#$140,$10(a0)
0001877E 317C FF80 0012             		move.w	#-$80,$12(a0)
00018784 4A28 003D                  		tst.b	$3D(a0)
00018788 6700                       		beq.s	loc_18046
0001878A E1E8 0010                  		asl	$10(a0)
0001878E E1E8 0012                  		asl	$12(a0)
00018792                            
00018792                            loc_18046:
00018792 5428 0025                  		addq.b	#2,$25(a0)
00018796 6000 FEEC                  		bra.w	loc_17F38
0001879A                            ; ===========================================================================
0001879A                            
0001879A                            loc_1804E:
0001879A 08E8 0000 0022             		bset	#0,$22(a0)
000187A0 5428 003F                  		addq.b	#2,$3F(a0)
000187A4 1028 003F                  		move.b	$3F(a0),d0
000187A8 4EB9 0000 2C64             		jsr	(CalcSine).l
000187AE 4A41                       		tst.w	d1
000187B0 6A00                       		bpl.s	loc_1806C
000187B2 08A8 0000 0022             		bclr	#0,$22(a0)
000187B8                            
000187B8                            loc_1806C:
000187B8 E840                       		asr.w	#4,d0
000187BA 4840                       		swap	d0
000187BC 4240                       		clr.w	d0
000187BE D0A8 0030                  		add.l	$30(a0),d0
000187C2 4840                       		swap	d0
000187C4 3140 0008                  		move.w	d0,8(a0)
000187C8 3028 0012                  		move.w	$12(a0),d0
000187CC 3238 D00C                  		move.w	($FFFFD00C).w,d1
000187D0 9268 000C                  		sub.w	$C(a0),d1
000187D4 6500                       		bcs.s	loc_180A2
000187D6 0441 0048                  		subi.w	#$48,d1
000187DA 6500                       		bcs.s	loc_180A2
000187DC E240                       		asr.w	#1,d0
000187DE 0441 0028                  		subi.w	#$28,d1
000187E2 6500                       		bcs.s	loc_180A2
000187E4 E240                       		asr.w	#1,d0
000187E6 0441 0028                  		subi.w	#$28,d1
000187EA 6500                       		bcs.s	loc_180A2
000187EC 7000                       		moveq	#0,d0
000187EE                            
000187EE                            loc_180A2:
000187EE 48C0                       		ext.l	d0
000187F0 E180                       		asl.l	#8,d0
000187F2 4A28 003D                  		tst.b	$3D(a0)
000187F6 6700                       		beq.s	loc_180AE
000187F8 D080                       		add.l	d0,d0
000187FA                            
000187FA                            loc_180AE:
000187FA D1A8 0038                  		add.l	d0,$38(a0)
000187FE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018804 6000 FE8E                  		bra.w	loc_17F48
00018808                            ; ===========================================================================
00018808                            
00018808                            loc_180BC:				; XREF: Obj77_ShipIndex
00018808 70FE                       		moveq	#-2,d0
0001880A 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018810 6500                       		bcs.s	loc_180D2
00018812 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018818 4268 0010                  		clr.w	$10(a0)
0001881C 5240                       		addq.w	#1,d0
0001881E                            
0001881E                            loc_180D2:
0001881E 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018824 6E00                       		bgt.s	loc_180E6
00018826 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001882C 4268 0012                  		clr.w	$12(a0)
00018830 5240                       		addq.w	#1,d0
00018832                            
00018832                            loc_180E6:
00018832 6600                       		bne.s	loc_180F2
00018834 5428 0025                  		addq.b	#2,$25(a0)
00018838 08A8 0000 0022             		bclr	#0,$22(a0)
0001883E                            
0001883E                            loc_180F2:
0001883E 6000 FE44                  		bra.w	loc_17F38
00018842                            ; ===========================================================================
00018842                            
00018842                            loc_180F6:				; XREF: Obj77_ShipIndex
00018842 4A28 003D                  		tst.b	$3D(a0)
00018846 6600                       		bne.s	loc_18112
00018848 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001884E 6D00                       		blt.s	loc_18126
00018850 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018856 6E00                       		bgt.s	loc_18126
00018858 117C 0032 003C             		move.b	#$32,$3C(a0)
0001885E                            
0001885E                            loc_18112:
0001885E 303C 0082                  		move.w	#$82,d0
00018862 4EB9 0000 15BA             		jsr	(PlaySound).l	; play LZ music
00018868 08E8 0000 0022             		bset	#0,$22(a0)
0001886E 5428 0025                  		addq.b	#2,$25(a0)
00018872                            
00018872                            loc_18126:
00018872 6000 FE10                  		bra.w	loc_17F38
00018876                            ; ===========================================================================
00018876                            
00018876                            loc_1812A:				; XREF: Obj77_ShipIndex
00018876 4A28 003D                  		tst.b	$3D(a0)
0001887A 6600                       		bne.s	loc_18136
0001887C 5328 003C                  		subq.b	#1,$3C(a0)
00018880 6600                       		bne.s	loc_1814E
00018882                            
00018882                            loc_18136:
00018882 4228 003C                  		clr.b	$3C(a0)
00018886 317C 0400 0010             		move.w	#$400,$10(a0)
0001888C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018892 4228 003D                  		clr.b	$3D(a0)
00018896 5428 0025                  		addq.b	#2,$25(a0)
0001889A                            
0001889A                            loc_1814E:
0001889A 6000 FDE8                  		bra.w	loc_17F38
0001889E                            ; ===========================================================================
0001889E                            
0001889E                            loc_18152:				; XREF: Obj77_ShipIndex
0001889E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
000188A4 6400                       		bcc.s	loc_18160
000188A6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000188AA 6000                       		bra.s	loc_18166
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            loc_18160:
000188AC 4A28 0001                  		tst.b	1(a0)
000188B0 6A00                       		bpl.s	Obj77_ShipDel
000188B2                            
000188B2                            loc_18166:
000188B2 6000 FDD0                  		bra.w	loc_17F38
000188B6                            ; ===========================================================================
000188B6                            
000188B6                            Obj77_ShipDel:
000188B6 4EF9 0000 DC3A             		jmp	DeleteObject
000188BC                            ; ===========================================================================
000188BC                            
000188BC                            Obj77_FaceMain:				; XREF: Obj77_Index
000188BC 2268 0034                  		movea.l	$34(a0),a1
000188C0 1011                       		move.b	(a1),d0
000188C2 B010                       		cmp.b	(a0),d0
000188C4 6600                       		bne.s	Obj77_FaceDel
000188C6 7000                       		moveq	#0,d0
000188C8 1029 0025                  		move.b	$25(a1),d0
000188CC 7201                       		moveq	#1,d1
000188CE 4A28 003D                  		tst.b	$3D(a0)
000188D2 6700                       		beq.s	loc_1818C
000188D4 720A                       		moveq	#$A,d1
000188D6 6000                       		bra.s	loc_181A0
000188D8                            ; ===========================================================================
000188D8                            
000188D8                            loc_1818C:
000188D8 4A29 0020                  		tst.b	$20(a1)
000188DC 6600                       		bne.s	loc_18196
000188DE 7205                       		moveq	#5,d1
000188E0 6000                       		bra.s	loc_181A0
000188E2                            ; ===========================================================================
000188E2                            
000188E2                            loc_18196:
000188E2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000188E8 6500                       		bcs.s	loc_181A0
000188EA 7204                       		moveq	#4,d1
000188EC                            
000188EC                            loc_181A0:
000188EC 1141 001C                  		move.b	d1,$1C(a0)
000188F0 0C00 000E                  		cmpi.b	#$E,d0
000188F4 6600                       		bne.s	loc_181B6
000188F6 117C 0006 001C             		move.b	#6,$1C(a0)
000188FC 4A28 0001                  		tst.b	1(a0)
00018900 6A00                       		bpl.s	Obj77_FaceDel
00018902                            
00018902                            loc_181B6:
00018902 6000                       		bra.s	Obj77_Display
00018904                            ; ===========================================================================
00018904                            
00018904                            Obj77_FaceDel:
00018904 4EF9 0000 DC3A             		jmp	DeleteObject
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            Obj77_FlameMain:			; XREF: Obj77_Index
0001890A 117C 0007 001C             		move.b	#7,$1C(a0)
00018910 2268 0034                  		movea.l	$34(a0),a1
00018914 1011                       		move.b	(a1),d0
00018916 B010                       		cmp.b	(a0),d0
00018918 6600                       		bne.s	Obj77_FlameDel
0001891A 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018920 6600                       		bne.s	loc_181F0
00018922 117C 000B 001C             		move.b	#$B,$1C(a0)
00018928 4A28 0001                  		tst.b	1(a0)
0001892C 6A00                       		bpl.s	Obj77_FlameDel
0001892E 6000                       		bra.s	loc_181F0
00018930                            ; ===========================================================================
00018930 4A69 0010                  		tst.w	$10(a1)
00018934 6700                       		beq.s	loc_181F0
00018936 117C 0008 001C             		move.b	#8,$1C(a0)
0001893C                            
0001893C                            loc_181F0:
0001893C 6000                       		bra.s	Obj77_Display
0001893E                            ; ===========================================================================
0001893E                            
0001893E                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001893E 4EF9 0000 DC3A             		jmp	DeleteObject
00018944                            ; ===========================================================================
00018944                            
00018944                            Obj77_Display:
00018944 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
0001894A 4EB9 0000 ACC8             		jsr	AnimateSprite
00018950 2268 0034                  		movea.l	$34(a0),a1
00018954 3169 0008 0008             		move.w	8(a1),8(a0)
0001895A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018960 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018966 7003                       		moveq	#3,d0
00018968 C028 0022                  		and.b	$22(a0),d0
0001896C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018972 8128 0001                  		or.b	d0,1(a0)
00018976 4EF9 0000 DBFE             		jmp	DisplaySprite
0001897C                            ; ===========================================================================
0001897C                            ; ---------------------------------------------------------------------------
0001897C                            ; Object 73 - Eggman (MZ)
0001897C                            ; ---------------------------------------------------------------------------
0001897C                            
0001897C                            Obj73:					; XREF: Obj_Index
0001897C 7000                       		moveq	#0,d0
0001897E 1028 0024                  		move.b	$24(a0),d0
00018982 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018986 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001898A                            ; ===========================================================================
0001898A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001898C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001898E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018990 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018992 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018994                            
00018994 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018997 0401 04                    		dc.b 4,	1, 4
0001899A 0607 04                    		dc.b 6,	7, 4
0001899D 0800 03                    		dc.b 8,	0, 3
000189A0                            ; ===========================================================================
000189A0                            
000189A0                            Obj73_Main:				; XREF: Obj73_Index
000189A0 3168 0008 0030             		move.w	8(a0),$30(a0)
000189A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000189AC 117C 000F 0020             		move.b	#$F,$20(a0)
000189B2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000189B8 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000189BC 2248                       		movea.l	a0,a1
000189BE 7203                       		moveq	#3,d1
000189C0 6000                       		bra.s	Obj73_LoadBoss
000189C2                            ; ===========================================================================
000189C2                            
000189C2                            Obj73_Loop:
000189C2 4EB9 0000 E09A             		jsr	SingleObjLoad2
000189C8 6600                       		bne.s	Obj73_ShipMain
000189CA 12BC 0073                  		move.b	#$73,0(a1)
000189CE 3368 0008 0008             		move.w	8(a0),8(a1)
000189D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189DA                            
000189DA                            Obj73_LoadBoss:				; XREF: Obj73_Main
000189DA 08A8 0000 0022             		bclr	#0,$22(a0)
000189E0 4229 0025                  		clr.b	$25(a1)
000189E4 135A 0024                  		move.b	(a2)+,$24(a1)
000189E8 135A 001C                  		move.b	(a2)+,$1C(a1)
000189EC 135A 0018                  		move.b	(a2)+,$18(a1)
000189F0 237C 0001 845A 0004        		move.l	#Map_Eggman,4(a1)
000189F8 337C 0400 0002             		move.w	#$400,2(a1)
000189FE 137C 0004 0001             		move.b	#4,1(a1)
00018A04 137C 0020 0019             		move.b	#$20,$19(a1)
00018A0A 2348 0034                  		move.l	a0,$34(a1)
00018A0E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018A12                            
00018A12                            Obj73_ShipMain:
00018A12 7000                       		moveq	#0,d0
00018A14 1028 0025                  		move.b	$25(a0),d0
00018A18 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018A1C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018A20 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
00018A26 4EB9 0000 ACC8             		jsr	AnimateSprite
00018A2C 7003                       		moveq	#3,d0
00018A2E C028 0022                  		and.b	$22(a0),d0
00018A32 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A38 8128 0001                  		or.b	d0,1(a0)
00018A3C 4EF9 0000 DBFE             		jmp	DisplaySprite
00018A42                            ; ===========================================================================
00018A42 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018A44 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018A46 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018A48 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018A4A 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018A4C                            ; ===========================================================================
00018A4C                            
00018A4C                            loc_18302:				; XREF: Obj73_ShipIndex
00018A4C 1028 003F                  		move.b	$3F(a0),d0
00018A50 5428 003F                  		addq.b	#2,$3F(a0)
00018A54 4EB9 0000 2C64             		jsr	(CalcSine).l
00018A5A E440                       		asr.w	#2,d0
00018A5C 3140 0012                  		move.w	d0,$12(a0)
00018A60 317C FF00 0010             		move.w	#-$100,$10(a0)
00018A66 6100 F560                  		bsr.w	BossMove
00018A6A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A70 6600                       		bne.s	loc_18334
00018A72 5428 0025                  		addq.b	#2,$25(a0)
00018A76 4228 0028                  		clr.b	$28(a0)
00018A7A 42A8 0010                  		clr.l	$10(a0)
00018A7E                            
00018A7E                            loc_18334:
00018A7E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018A84 1140 0034                  		move.b	d0,$34(a0)
00018A88                            
00018A88                            loc_1833E:
00018A88 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A8E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A94 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018A9A 6400                       		bcc.s	locret_18390
00018A9C 4A28 0022                  		tst.b	$22(a0)
00018AA0 6B00                       		bmi.s	loc_18392
00018AA2 4A28 0020                  		tst.b	$20(a0)
00018AA6 6600                       		bne.s	locret_18390
00018AA8 4A28 003E                  		tst.b	$3E(a0)
00018AAC 6600                       		bne.s	loc_18374
00018AAE 117C 0028 003E             		move.b	#$28,$3E(a0)
00018AB4 303C 00AC                  		move.w	#$AC,d0
00018AB8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018ABE                            
00018ABE                            loc_18374:
00018ABE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018AC2 7000                       		moveq	#0,d0
00018AC4 4A51                       		tst.w	(a1)
00018AC6 6600                       		bne.s	loc_18382
00018AC8 303C 0EEE                  		move.w	#$EEE,d0
00018ACC                            
00018ACC                            loc_18382:
00018ACC 3280                       		move.w	d0,(a1)
00018ACE 5328 003E                  		subq.b	#1,$3E(a0)
00018AD2 6600                       		bne.s	locret_18390
00018AD4 117C 000F 0020             		move.b	#$F,$20(a0)
00018ADA                            
00018ADA                            locret_18390:
00018ADA 4E75                       		rts	
00018ADC                            ; ===========================================================================
00018ADC                            
00018ADC                            loc_18392:				; XREF: loc_1833E
00018ADC 7064                       		moveq	#100,d0
00018ADE 6100 0000                  		bsr.w	AddPoints
00018AE2 117C 0004 0025             		move.b	#4,$25(a0)
00018AE8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018AEE 4268 0010                  		clr.w	$10(a0)
00018AF2 4E75                       		rts	
00018AF4                            ; ===========================================================================
00018AF4                            
00018AF4                            loc_183AA:				; XREF: Obj73_ShipIndex
00018AF4 7000                       		moveq	#0,d0
00018AF6 1028 0028                  		move.b	$28(a0),d0
00018AFA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018AFE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018B02 0228 0006 0028             		andi.b	#6,$28(a0)
00018B08 6000 FF7E                  		bra.w	loc_1833E
00018B0C                            ; ===========================================================================
00018B0C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018B0E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018B10 0000                       		dc.w loc_183CA-off_183C2
00018B12 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018B14                            ; ===========================================================================
00018B14                            
00018B14                            loc_183CA:				; XREF: off_183C2
00018B14 4A68 0010                  		tst.w	$10(a0)
00018B18 6600                       		bne.s	loc_183FE
00018B1A 7040                       		moveq	#$40,d0
00018B1C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018B22 6700                       		beq.s	loc_183E6
00018B24 6500                       		bcs.s	loc_183DE
00018B26 4440                       		neg.w	d0
00018B28                            
00018B28                            loc_183DE:
00018B28 3140 0012                  		move.w	d0,$12(a0)
00018B2C 6000 F49A                  		bra.w	BossMove
00018B30                            ; ===========================================================================
00018B30                            
00018B30                            loc_183E6:
00018B30 317C 0200 0010             		move.w	#$200,$10(a0)
00018B36 317C 0100 0012             		move.w	#$100,$12(a0)
00018B3C 0828 0000 0022             		btst	#0,$22(a0)
00018B42 6600                       		bne.s	loc_183FE
00018B44 4468 0010                  		neg.w	$10(a0)
00018B48                            
00018B48                            loc_183FE:
00018B48 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018B4E 6400                       		bcc.s	Obj73_MakeLava
00018B50 6100 F476                  		bsr.w	BossMove
00018B54 5968 0012                  		subq.w	#4,$12(a0)
00018B58                            
00018B58                            Obj73_MakeLava:
00018B58 5328 0034                  		subq.b	#1,$34(a0)
00018B5C 6400                       		bcc.s	loc_1845C
00018B5E 4EB9 0000 E084             		jsr	SingleObjLoad
00018B64 6600                       		bne.s	loc_1844A
00018B66 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018B6A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018B70 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018B76 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018B7C 80FC 0050                  		divu.w	#$50,d0
00018B80 4840                       		swap	d0
00018B82 0640 1878                  		addi.w	#$1878,d0
00018B86 3340 0008                  		move.w	d0,8(a1)
00018B8A EE09                       		lsr.b	#7,d1
00018B8C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018B92                            
00018B92                            loc_1844A:
00018B92 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018B98 0200 001F                  		andi.b	#$1F,d0
00018B9C 0600 0040                  		addi.b	#$40,d0
00018BA0 1140 0034                  		move.b	d0,$34(a0)
00018BA4                            
00018BA4                            loc_1845C:
00018BA4 0828 0000 0022             		btst	#0,$22(a0)
00018BAA 6700                       		beq.s	loc_18474
00018BAC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018BB2 6D00                       		blt.s	locret_1849C
00018BB4 317C 1910 0030             		move.w	#$1910,$30(a0)
00018BBA 6000                       		bra.s	loc_18482
00018BBC                            ; ===========================================================================
00018BBC                            
00018BBC                            loc_18474:
00018BBC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018BC2 6E00                       		bgt.s	locret_1849C
00018BC4 317C 1830 0030             		move.w	#$1830,$30(a0)
00018BCA                            
00018BCA                            loc_18482:
00018BCA 4268 0010                  		clr.w	$10(a0)
00018BCE 317C FE80 0012             		move.w	#-$180,$12(a0)
00018BD4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018BDA 6400                       		bcc.s	loc_18498
00018BDC 4468 0012                  		neg.w	$12(a0)
00018BE0                            
00018BE0                            loc_18498:
00018BE0 5428 0028                  		addq.b	#2,$28(a0)
00018BE4                            
00018BE4                            locret_1849C:
00018BE4 4E75                       		rts	
00018BE6                            ; ===========================================================================
00018BE6                            
00018BE6                            Obj73_MakeLava2:			; XREF: off_183C2
00018BE6 6100 F3E0                  		bsr.w	BossMove
00018BEA 3028 0038                  		move.w	$38(a0),d0
00018BEE 0440 022C                  		subi.w	#$22C,d0
00018BF2 6E00                       		bgt.s	locret_184F4
00018BF4 303C 022C                  		move.w	#$22C,d0
00018BF8 4A68 0012                  		tst.w	$12(a0)
00018BFC 6700                       		beq.s	loc_184EA
00018BFE 4268 0012                  		clr.w	$12(a0)
00018C02 317C 0050 003C             		move.w	#$50,$3C(a0)
00018C08 0868 0000 0022             		bchg	#0,$22(a0)
00018C0E 4EB9 0000 E084             		jsr	SingleObjLoad
00018C14 6600                       		bne.s	loc_184EA
00018C16 3368 0030 0008             		move.w	$30(a0),8(a1)
00018C1C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018C22 0669 0018 000C             		addi.w	#$18,$C(a1)
00018C28 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018C2C 137C 0001 0028             		move.b	#1,$28(a1)
00018C32                            
00018C32                            loc_184EA:
00018C32 5368 003C                  		subq.w	#1,$3C(a0)
00018C36 6600                       		bne.s	locret_184F4
00018C38 5428 0028                  		addq.b	#2,$28(a0)
00018C3C                            
00018C3C                            locret_184F4:
00018C3C 4E75                       		rts	
00018C3E                            ; ===========================================================================
00018C3E                            
00018C3E                            loc_184F6:				; XREF: Obj73_ShipIndex
00018C3E 5368 003C                  		subq.w	#1,$3C(a0)
00018C42 6B00                       		bmi.s	loc_18500
00018C44 6000 F340                  		bra.w	BossDefeated
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            loc_18500:
00018C48 08E8 0000 0022             		bset	#0,$22(a0)
00018C4E 08A8 0007 0022             		bclr	#7,$22(a0)
00018C54 4268 0010                  		clr.w	$10(a0)
00018C58 5428 0025                  		addq.b	#2,$25(a0)
00018C5C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C62 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C66 6600                       		bne.s	locret_1852A
00018C68 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C6E 4268 0012                  		clr.w	$12(a0)
00018C72                            
00018C72                            locret_1852A:
00018C72 4E75                       		rts	
00018C74                            ; ===========================================================================
00018C74                            
00018C74                            loc_1852C:				; XREF: Obj73_ShipIndex
00018C74 5268 003C                  		addq.w	#1,$3C(a0)
00018C78 6700                       		beq.s	loc_18544
00018C7A 6A00                       		bpl.s	loc_1854E
00018C7C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018C82 6400                       		bcc.s	loc_18544
00018C84 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C8A 6000                       		bra.s	loc_1857A
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            loc_18544:
00018C8C 4268 0012                  		clr.w	$12(a0)
00018C90 4268 003C                  		clr.w	$3C(a0)
00018C94 6000                       		bra.s	loc_1857A
00018C96                            ; ===========================================================================
00018C96                            
00018C96                            loc_1854E:
00018C96 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C9C 6500                       		bcs.s	loc_18566
00018C9E 6700                       		beq.s	loc_1856C
00018CA0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018CA6 6500                       		bcs.s	loc_1857A
00018CA8 5428 0025                  		addq.b	#2,$25(a0)
00018CAC 6000                       		bra.s	loc_1857A
00018CAE                            ; ===========================================================================
00018CAE                            
00018CAE                            loc_18566:
00018CAE 5168 0012                  		subq.w	#8,$12(a0)
00018CB2 6000                       		bra.s	loc_1857A
00018CB4                            ; ===========================================================================
00018CB4                            
00018CB4                            loc_1856C:
00018CB4 4268 0012                  		clr.w	$12(a0)
00018CB8 303C 0083                  		move.w	#$83,d0
00018CBC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018CC2                            
00018CC2                            loc_1857A:
00018CC2 6100 F304                  		bsr.w	BossMove
00018CC6 6000 FDC0                  		bra.w	loc_1833E
00018CCA                            ; ===========================================================================
00018CCA                            
00018CCA                            loc_18582:				; XREF: Obj73_ShipIndex
00018CCA 317C 0500 0010             		move.w	#$500,$10(a0)
00018CD0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018CD6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018CDC 6400                       		bcc.s	loc_1859C
00018CDE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018CE2 6000                       		bra.s	loc_185A2
00018CE4                            ; ===========================================================================
00018CE4                            
00018CE4                            loc_1859C:
00018CE4 4A28 0001                  		tst.b	1(a0)
00018CE8 6A00                       		bpl.s	Obj73_ShipDel
00018CEA                            
00018CEA                            loc_185A2:
00018CEA 6100 F2DC                  		bsr.w	BossMove
00018CEE 6000 FD98                  		bra.w	loc_1833E
00018CF2                            ; ===========================================================================
00018CF2                            
00018CF2                            Obj73_ShipDel:
00018CF2 4EF9 0000 DC3A             		jmp	DeleteObject
00018CF8                            ; ===========================================================================
00018CF8                            
00018CF8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018CF8 7000                       		moveq	#0,d0
00018CFA 7201                       		moveq	#1,d1
00018CFC 2268 0034                  		movea.l	$34(a0),a1
00018D00 1029 0025                  		move.b	$25(a1),d0
00018D04 5540                       		subq.w	#2,d0
00018D06 6600                       		bne.s	loc_185D2
00018D08 0829 0001 0028             		btst	#1,$28(a1)
00018D0E 6700                       		beq.s	loc_185DA
00018D10 4A69 0012                  		tst.w	$12(a1)
00018D14 6600                       		bne.s	loc_185DA
00018D16 7204                       		moveq	#4,d1
00018D18 6000                       		bra.s	loc_185EE
00018D1A                            ; ===========================================================================
00018D1A                            
00018D1A                            loc_185D2:
00018D1A 5500                       		subq.b	#2,d0
00018D1C 6B00                       		bmi.s	loc_185DA
00018D1E 720A                       		moveq	#$A,d1
00018D20 6000                       		bra.s	loc_185EE
00018D22                            ; ===========================================================================
00018D22                            
00018D22                            loc_185DA:
00018D22 4A29 0020                  		tst.b	$20(a1)
00018D26 6600                       		bne.s	loc_185E4
00018D28 7205                       		moveq	#5,d1
00018D2A 6000                       		bra.s	loc_185EE
00018D2C                            ; ===========================================================================
00018D2C                            
00018D2C                            loc_185E4:
00018D2C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018D32 6500                       		bcs.s	loc_185EE
00018D34 7204                       		moveq	#4,d1
00018D36                            
00018D36                            loc_185EE:
00018D36 1141 001C                  		move.b	d1,$1C(a0)
00018D3A 5900                       		subq.b	#4,d0
00018D3C 6600                       		bne.s	loc_18602
00018D3E 117C 0006 001C             		move.b	#6,$1C(a0)
00018D44 4A28 0001                  		tst.b	1(a0)
00018D48 6A00                       		bpl.s	Obj73_FaceDel
00018D4A                            
00018D4A                            loc_18602:
00018D4A 6000                       		bra.s	Obj73_Display
00018D4C                            ; ===========================================================================
00018D4C                            
00018D4C                            Obj73_FaceDel:
00018D4C 4EF9 0000 DC3A             		jmp	DeleteObject
00018D52                            ; ===========================================================================
00018D52                            
00018D52                            Obj73_FlameMain:			; XREF: Obj73_Index
00018D52 117C 0007 001C             		move.b	#7,$1C(a0)
00018D58 2268 0034                  		movea.l	$34(a0),a1
00018D5C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018D62 6D00                       		blt.s	loc_1862A
00018D64 117C 000B 001C             		move.b	#$B,$1C(a0)
00018D6A 4A28 0001                  		tst.b	1(a0)
00018D6E 6A00                       		bpl.s	Obj73_FlameDel
00018D70 6000                       		bra.s	loc_18636
00018D72                            ; ===========================================================================
00018D72                            
00018D72                            loc_1862A:
00018D72 4A69 0010                  		tst.w	$10(a1)
00018D76 6700                       		beq.s	loc_18636
00018D78 117C 0008 001C             		move.b	#8,$1C(a0)
00018D7E                            
00018D7E                            loc_18636:
00018D7E 6000                       		bra.s	Obj73_Display
00018D80                            ; ===========================================================================
00018D80                            
00018D80                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018D80 4EF9 0000 DC3A             		jmp	DeleteObject
00018D86                            ; ===========================================================================
00018D86                            
00018D86                            Obj73_Display:
00018D86 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
00018D8C 4EB9 0000 ACC8             		jsr	AnimateSprite
00018D92                            
00018D92                            loc_1864A:
00018D92 2268 0034                  		movea.l	$34(a0),a1
00018D96 3169 0008 0008             		move.w	8(a1),8(a0)
00018D9C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018DA2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018DA8 7003                       		moveq	#3,d0
00018DAA C028 0022                  		and.b	$22(a0),d0
00018DAE 0228 00FC 0001             		andi.b	#-4,1(a0)
00018DB4 8128 0001                  		or.b	d0,1(a0)
00018DB8 4EF9 0000 DBFE             		jmp	DisplaySprite
00018DBE                            ; ===========================================================================
00018DBE                            
00018DBE                            Obj73_TubeMain:				; XREF: Obj73_Index
00018DBE 2268 0034                  		movea.l	$34(a0),a1
00018DC2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018DC8 6600                       		bne.s	loc_18688
00018DCA 4A28 0001                  		tst.b	1(a0)
00018DCE 6A00                       		bpl.s	Obj73_TubeDel
00018DD0                            
00018DD0                            loc_18688:
00018DD0 217C 0001 8522 0004        		move.l	#Map_BossItems,4(a0)
00018DD8 317C 246C 0002             		move.w	#$246C,2(a0)
00018DDE 117C 0004 001A             		move.b	#4,$1A(a0)
00018DE4 60AC                       		bra.s	loc_1864A
00018DE6                            ; ===========================================================================
00018DE6                            
00018DE6                            Obj73_TubeDel:
00018DE6 4EF9 0000 DC3A             		jmp	DeleteObject
00018DEC                            ; ===========================================================================
00018DEC                            ; ---------------------------------------------------------------------------
00018DEC                            ; Object 74 - lava that	Eggman drops (MZ)
00018DEC                            ; ---------------------------------------------------------------------------
00018DEC                            
00018DEC                            Obj74:					; XREF: Obj_Index
00018DEC 7000                       		moveq	#0,d0
00018DEE 1028 0024                  		move.b	$24(a0),d0
00018DF2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018DF6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018DFA 4EF9 0000 DBFE             		jmp	DisplaySprite
00018E00                            ; ===========================================================================
00018E00 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018E02 0000                       		dc.w Obj74_Action-Obj74_Index
00018E04 0000                       		dc.w loc_18886-Obj74_Index
00018E06 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018E08                            ; ===========================================================================
00018E08                            
00018E08                            Obj74_Main:				; XREF: Obj74_Index
00018E08 117C 0008 0016             		move.b	#8,$16(a0)
00018E0E 117C 0008 0017             		move.b	#8,$17(a0)
00018E14 217C 0000 B8BC 0004        		move.l	#Map_obj14,4(a0)
00018E1C 317C 0345 0002             		move.w	#$345,2(a0)
00018E22 117C 0004 0001             		move.b	#4,1(a0)
00018E28 117C 0005 0018             		move.b	#5,$18(a0)
00018E2E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018E34 117C 0008 0019             		move.b	#8,$19(a0)
00018E3A 5428 0024                  		addq.b	#2,$24(a0)
00018E3E 4A28 0028                  		tst.b	$28(a0)
00018E42 6600                       		bne.s	loc_1870A
00018E44 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E4A 5428 0024                  		addq.b	#2,$24(a0)
00018E4E 6000 0000                  		bra.w	loc_18886
00018E52                            ; ===========================================================================
00018E52                            
00018E52                            loc_1870A:
00018E52 117C 001E 0029             		move.b	#$1E,$29(a0)
00018E58 303C 00AE                  		move.w	#$AE,d0
00018E5C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018E62                            
00018E62                            Obj74_Action:				; XREF: Obj74_Index
00018E62 7000                       		moveq	#0,d0
00018E64 1028 0025                  		move.b	$25(a0),d0
00018E68 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018E6C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018E70 4EB9 0000 DBD8             		jsr	SpeedToPos
00018E76 43F9 0000 EAB8             		lea	(Ani_obj14).l,a1
00018E7C 4EB9 0000 ACC8             		jsr	AnimateSprite
00018E82 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018E88 6200                       		bhi.s	Obj74_Delete
00018E8A 4E75                       		rts	
00018E8C                            ; ===========================================================================
00018E8C                            
00018E8C                            Obj74_Delete:
00018E8C 4EF9 0000 DC3A             		jmp	DeleteObject
00018E92                            ; ===========================================================================
00018E92 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018E94 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018E96 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018E98 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            Obj74_Drop:				; XREF: Obj74_Index2
00018E9A 08E8 0001 0022             		bset	#1,$22(a0)
00018EA0 5328 0029                  		subq.b	#1,$29(a0)
00018EA4 6A00                       		bpl.s	locret_18780
00018EA6 117C 008B 0020             		move.b	#$8B,$20(a0)
00018EAC 4228 0028                  		clr.b	$28(a0)
00018EB0 0668 0018 0012             		addi.w	#$18,$12(a0)
00018EB6 08A8 0001 0022             		bclr	#1,$22(a0)
00018EBC 6100 C63A                  		bsr.w	ObjHitFloor
00018EC0 4A41                       		tst.w	d1
00018EC2 6A00                       		bpl.s	locret_18780
00018EC4 5428 0025                  		addq.b	#2,$25(a0)
00018EC8                            
00018EC8                            locret_18780:
00018EC8 4E75                       		rts	
00018ECA                            ; ===========================================================================
00018ECA                            
00018ECA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018ECA 5568 000C                  		subq.w	#2,$C(a0)
00018ECE 08E8 0007 0002             		bset	#7,2(a0)
00018ED4 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018EDA 4268 0012                  		clr.w	$12(a0)
00018EDE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EE4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EEA 117C 0003 0029             		move.b	#3,$29(a0)
00018EF0 4EB9 0000 E09A             		jsr	SingleObjLoad2
00018EF6 6600                       		bne.s	loc_187CA
00018EF8 47D1                       		lea	(a1),a3
00018EFA 45D0                       		lea	(a0),a2
00018EFC 7003                       		moveq	#3,d0
00018EFE                            
00018EFE                            Obj74_Loop:
00018EFE 26DA                       		move.l	(a2)+,(a3)+
00018F00 26DA                       		move.l	(a2)+,(a3)+
00018F02 26DA                       		move.l	(a2)+,(a3)+
00018F04 26DA                       		move.l	(a2)+,(a3)+
00018F06 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018F0A                            
00018F0A 4469 0010                  		neg.w	$10(a1)
00018F0E 5429 0025                  		addq.b	#2,$25(a1)
00018F12                            
00018F12                            loc_187CA:
00018F12 5428 0025                  		addq.b	#2,$25(a0)
00018F16 4E75                       		rts	
00018F18                            
00018F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018F18                            
00018F18                            
00018F18                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018F18 4EB9 0000 E09A             		jsr	SingleObjLoad2
00018F1E 6600                       		bne.s	locret_187EE
00018F20 3368 0008 0008             		move.w	8(a0),8(a1)
00018F26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F2C 12BC 0074                  		move.b	#$74,(a1)
00018F30 337C 0067 0028             		move.w	#$67,$28(a1)
00018F36                            
00018F36                            locret_187EE:
00018F36 4E75                       		rts	
00018F38                            ; End of function Obj74_Duplicate2
00018F38                            
00018F38                            ; ===========================================================================
00018F38                            
00018F38                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018F38 6100 C5BE                  		bsr.w	ObjHitFloor
00018F3C 4A41                       		tst.w	d1
00018F3E 6A00                       		bpl.s	loc_18826
00018F40 3028 0008                  		move.w	8(a0),d0
00018F44 0C40 1940                  		cmpi.w	#$1940,d0
00018F48 6E00                       		bgt.s	loc_1882C
00018F4A 3228 0030                  		move.w	$30(a0),d1
00018F4E B240                       		cmp.w	d0,d1
00018F50 6700                       		beq.s	loc_1881E
00018F52 0240 0010                  		andi.w	#$10,d0
00018F56 0241 0010                  		andi.w	#$10,d1
00018F5A B240                       		cmp.w	d0,d1
00018F5C 6700                       		beq.s	loc_1881E
00018F5E 61B8                       		bsr.s	Obj74_Duplicate2
00018F60 3168 0008 0032             		move.w	8(a0),$32(a0)
00018F66                            
00018F66                            loc_1881E:
00018F66 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F6C 4E75                       		rts	
00018F6E                            ; ===========================================================================
00018F6E                            
00018F6E                            loc_18826:
00018F6E 5428 0025                  		addq.b	#2,$25(a0)
00018F72 4E75                       		rts	
00018F74                            ; ===========================================================================
00018F74                            
00018F74                            loc_1882C:
00018F74 5428 0024                  		addq.b	#2,$24(a0)
00018F78 4E75                       		rts	
00018F7A                            ; ===========================================================================
00018F7A                            
00018F7A                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018F7A 08A8 0001 0022             		bclr	#1,$22(a0)
00018F80 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018F86 3028 0008                  		move.w	8(a0),d0
00018F8A 9068 0032                  		sub.w	$32(a0),d0
00018F8E 6A00                       		bpl.s	loc_1884A
00018F90 4440                       		neg.w	d0
00018F92                            
00018F92                            loc_1884A:
00018F92 0C40 0012                  		cmpi.w	#$12,d0
00018F96 6600                       		bne.s	loc_18856
00018F98 08A8 0007 0002             		bclr	#7,2(a0)
00018F9E                            
00018F9E                            loc_18856:
00018F9E 6100 C558                  		bsr.w	ObjHitFloor
00018FA2 4A41                       		tst.w	d1
00018FA4 6A00                       		bpl.s	locret_1887E
00018FA6 5328 0029                  		subq.b	#1,$29(a0)
00018FAA 6700                       		beq.s	Obj74_Delete2
00018FAC 4268 0012                  		clr.w	$12(a0)
00018FB0 3168 0032 0008             		move.w	$32(a0),8(a0)
00018FB6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FBC 08E8 0007 0002             		bset	#7,2(a0)
00018FC2 5528 0025                  		subq.b	#2,$25(a0)
00018FC6                            
00018FC6                            locret_1887E:
00018FC6 4E75                       		rts	
00018FC8                            ; ===========================================================================
00018FC8                            
00018FC8                            Obj74_Delete2:
00018FC8 4EF9 0000 DC3A             		jmp	DeleteObject
00018FCE                            ; ===========================================================================
00018FCE                            
00018FCE                            loc_18886:				; XREF: Obj74_Index
00018FCE 08E8 0007 0002             		bset	#7,2(a0)
00018FD4 5328 0029                  		subq.b	#1,$29(a0)
00018FD8 6600                       		bne.s	Obj74_Animate
00018FDA 117C 0001 001C             		move.b	#1,$1C(a0)
00018FE0 5968 000C                  		subq.w	#4,$C(a0)
00018FE4 4228 0020                  		clr.b	$20(a0)
00018FE8                            
00018FE8                            Obj74_Animate:
00018FE8 43F9 0000 EAB8             		lea	(Ani_obj14).l,a1
00018FEE 4EF9 0000 ACC8             		jmp	AnimateSprite
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            Obj74_Delete3:				; XREF: Obj74_Index
00018FF4 4EF9 0000 DC3A             		jmp	DeleteObject
00018FFA                            ; ===========================================================================
00018FFA                            
00018FFA                            Obj7A_Delete:
00018FFA 4EF9 0000 DC3A             		jmp	DeleteObject
00019000                            ; ===========================================================================
00019000                            ; ---------------------------------------------------------------------------
00019000                            ; Object 7A - Eggman (SLZ)
00019000                            ; ---------------------------------------------------------------------------
00019000                            
00019000                            Obj7A:					; XREF: Obj_Index
00019000 7000                       		moveq	#0,d0
00019002 1028 0024                  		move.b	$24(a0),d0
00019006 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001900A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001900E                            ; ===========================================================================
0001900E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019010 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019012 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019014 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019016 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019018                            
00019018 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001901B 0401 04                    		dc.b 4,	1, 4
0001901E 0607 04                    		dc.b 6,	7, 4
00019021 0800 03                    		dc.b 8,	0, 3
00019024                            ; ===========================================================================
00019024                            
00019024                            Obj7A_Main:				; XREF: Obj7A_Index
00019024 317C 2188 0008             		move.w	#$2188,8(a0)
0001902A 317C 0228 000C             		move.w	#$228,$C(a0)
00019030 3168 0008 0030             		move.w	8(a0),$30(a0)
00019036 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001903C 117C 000F 0020             		move.b	#$F,$20(a0)
00019042 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019048 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001904C 2248                       		movea.l	a0,a1
0001904E 7203                       		moveq	#3,d1
00019050 6000                       		bra.s	Obj7A_LoadBoss
00019052                            ; ===========================================================================
00019052                            
00019052                            Obj7A_Loop:
00019052 4EB9 0000 E09A             		jsr	SingleObjLoad2
00019058 6600                       		bne.s	loc_1895C
0001905A 12BC 007A                  		move.b	#$7A,0(a1)
0001905E 3368 0008 0008             		move.w	8(a0),8(a1)
00019064 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001906A                            
0001906A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001906A 08A8 0000 0022             		bclr	#0,$22(a0)
00019070 4229 0025                  		clr.b	$25(a1)
00019074 135A 0024                  		move.b	(a2)+,$24(a1)
00019078 135A 001C                  		move.b	(a2)+,$1C(a1)
0001907C 135A 0018                  		move.b	(a2)+,$18(a1)
00019080 237C 0001 845A 0004        		move.l	#Map_Eggman,4(a1)
00019088 337C 0400 0002             		move.w	#$400,2(a1)
0001908E 137C 0004 0001             		move.b	#4,1(a1)
00019094 137C 0020 0019             		move.b	#$20,$19(a1)
0001909A 2348 0034                  		move.l	a0,$34(a1)
0001909E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000190A2                            
000190A2                            loc_1895C:
000190A2 43F8 D040                  		lea	($FFFFD040).w,a1
000190A6 45E8 002A                  		lea	$2A(a0),a2
000190AA 705E                       		moveq	#$5E,d0
000190AC 723E                       		moveq	#$3E,d1
000190AE                            
000190AE                            loc_18968:
000190AE B011                       		cmp.b	(a1),d0
000190B0 6600                       		bne.s	loc_18974
000190B2 4A29 0028                  		tst.b	$28(a1)
000190B6 6700                       		beq.s	loc_18974
000190B8 34C9                       		move.w	a1,(a2)+
000190BA                            
000190BA                            loc_18974:
000190BA D2FC 0040                  		adda.w	#$40,a1
000190BE 51C9 FFEE                  		dbf	d1,loc_18968
000190C2                            
000190C2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000190C2 7000                       		moveq	#0,d0
000190C4 1028 0025                  		move.b	$25(a0),d0
000190C8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000190CC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000190D0 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
000190D6 4EB9 0000 ACC8             		jsr	AnimateSprite
000190DC 7003                       		moveq	#3,d0
000190DE C028 0022                  		and.b	$22(a0),d0
000190E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000190E8 8128 0001                  		or.b	d0,1(a0)
000190EC 4EF9 0000 DBFE             		jmp	DisplaySprite
000190F2                            ; ===========================================================================
000190F2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000190F4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000190F6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000190F8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000190FA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000190FC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000190FE                            ; ===========================================================================
000190FE                            
000190FE                            loc_189B8:				; XREF: Obj7A_ShipIndex
000190FE 317C FF00 0010             		move.w	#-$100,$10(a0)
00019104 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001910A 6400                       		bcc.s	loc_189CA
0001910C 5428 0025                  		addq.b	#2,$25(a0)
00019110                            
00019110                            loc_189CA:
00019110 6100 EEB6                  		bsr.w	BossMove
00019114 1028 003F                  		move.b	$3F(a0),d0
00019118 5428 003F                  		addq.b	#2,$3F(a0)
0001911C 4EB9 0000 2C64             		jsr	(CalcSine).l
00019122 EC40                       		asr.w	#6,d0
00019124 D068 0038                  		add.w	$38(a0),d0
00019128 3140 000C                  		move.w	d0,$C(a0)
0001912C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019132 6000                       		bra.s	loc_189FE
00019134                            ; ===========================================================================
00019134                            
00019134                            loc_189EE:
00019134 6100 EE92                  		bsr.w	BossMove
00019138 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001913E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019144                            
00019144                            loc_189FE:
00019144 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001914A 6400                       		bcc.s	locret_18A44
0001914C 4A28 0022                  		tst.b	$22(a0)
00019150 6B00                       		bmi.s	loc_18A46
00019152 4A28 0020                  		tst.b	$20(a0)
00019156 6600                       		bne.s	locret_18A44
00019158 4A28 003E                  		tst.b	$3E(a0)
0001915C 6600                       		bne.s	loc_18A28
0001915E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019164 303C 00AC                  		move.w	#$AC,d0
00019168 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001916E                            
0001916E                            loc_18A28:
0001916E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019172 7000                       		moveq	#0,d0
00019174 4A51                       		tst.w	(a1)
00019176 6600                       		bne.s	loc_18A36
00019178 303C 0EEE                  		move.w	#$EEE,d0
0001917C                            
0001917C                            loc_18A36:
0001917C 3280                       		move.w	d0,(a1)
0001917E 5328 003E                  		subq.b	#1,$3E(a0)
00019182 6600                       		bne.s	locret_18A44
00019184 117C 000F 0020             		move.b	#$F,$20(a0)
0001918A                            
0001918A                            locret_18A44:
0001918A 4E75                       		rts	
0001918C                            ; ===========================================================================
0001918C                            
0001918C                            loc_18A46:
0001918C 7064                       		moveq	#100,d0
0001918E 6100 0000                  		bsr.w	AddPoints
00019192 117C 0006 0025             		move.b	#6,$25(a0)
00019198 117C 0078 003C             		move.b	#$78,$3C(a0)
0001919E 4268 0010                  		clr.w	$10(a0)
000191A2 4E75                       		rts	
000191A4                            ; ===========================================================================
000191A4                            
000191A4                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000191A4 3028 0030                  		move.w	$30(a0),d0
000191A8 317C 0200 0010             		move.w	#$200,$10(a0)
000191AE 0828 0000 0022             		btst	#0,$22(a0)
000191B4 6600                       		bne.s	loc_18A7C
000191B6 4468 0010                  		neg.w	$10(a0)
000191BA 0C40 2008                  		cmpi.w	#$2008,d0
000191BE 6E00                       		bgt.s	loc_18A88
000191C0 6000                       		bra.s	loc_18A82
000191C2                            ; ===========================================================================
000191C2                            
000191C2                            loc_18A7C:
000191C2 0C40 2138                  		cmpi.w	#$2138,d0
000191C6 6D00                       		blt.s	loc_18A88
000191C8                            
000191C8                            loc_18A82:
000191C8 0868 0000 0022             		bchg	#0,$22(a0)
000191CE                            
000191CE                            loc_18A88:
000191CE 3028 0008                  		move.w	8(a0),d0
000191D2 72FF                       		moveq	#-1,d1
000191D4 7402                       		moveq	#2,d2
000191D6 45E8 002A                  		lea	$2A(a0),a2
000191DA 7828                       		moveq	#$28,d4
000191DC 4A68 0010                  		tst.w	$10(a0)
000191E0 6A00                       		bpl.s	loc_18A9E
000191E2 4444                       		neg.w	d4
000191E4                            
000191E4                            loc_18A9E:
000191E4 321A                       		move.w	(a2)+,d1
000191E6 2641                       		movea.l	d1,a3
000191E8 082B 0003 0022             		btst	#3,$22(a3)
000191EE 6600                       		bne.s	loc_18AB4
000191F0 362B 0008                  		move.w	8(a3),d3
000191F4 D644                       		add.w	d4,d3
000191F6 9640                       		sub.w	d0,d3
000191F8 6700                       		beq.s	loc_18AC0
000191FA                            
000191FA                            loc_18AB4:
000191FA 51CA FFE8                  		dbf	d2,loc_18A9E
000191FE                            
000191FE 1142 0028                  		move.b	d2,$28(a0)
00019202 6000 FF0C                  		bra.w	loc_189CA
00019206                            ; ===========================================================================
00019206                            
00019206                            loc_18AC0:
00019206 1142 0028                  		move.b	d2,$28(a0)
0001920A 5428 0025                  		addq.b	#2,$25(a0)
0001920E 117C 0028 003C             		move.b	#$28,$3C(a0)
00019214 6000 FEFA                  		bra.w	loc_189CA
00019218                            ; ===========================================================================
00019218                            
00019218                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019218 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001921E 6600                       		bne.s	loc_18B36
00019220 70FF                       		moveq	#-1,d0
00019222 1028 0028                  		move.b	$28(a0),d0
00019226 4880                       		ext.w	d0
00019228 6B00                       		bmi.s	loc_18B40
0001922A 5540                       		subq.w	#2,d0
0001922C 4440                       		neg.w	d0
0001922E D040                       		add.w	d0,d0
00019230 43E8 002A                  		lea	$2A(a0),a1
00019234 3031 0000                  		move.w	(a1,d0.w),d0
00019238 2440                       		movea.l	d0,a2
0001923A 43F8 D040                  		lea	($FFFFD040).w,a1
0001923E 723E                       		moveq	#$3E,d1
00019240                            
00019240                            loc_18AFA:
00019240 B0A9 003C                  		cmp.l	$3C(a1),d0
00019244 6700                       		beq.s	loc_18B40
00019246 D2FC 0040                  		adda.w	#$40,a1
0001924A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001924E                            
0001924E 2F08                       		move.l	a0,-(sp)
00019250 41D2                       		lea	(a2),a0
00019252 4EB9 0000 E09A             		jsr	SingleObjLoad2
00019258 205F                       		movea.l	(sp)+,a0
0001925A 6600                       		bne.s	loc_18B40
0001925C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019260 3368 0008 0008             		move.w	8(a0),8(a1)
00019266 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001926C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019272 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019278 234A 003C                  		move.l	a2,$3C(a1)
0001927C                            
0001927C                            loc_18B36:
0001927C 5328 003C                  		subq.b	#1,$3C(a0)
00019280 6700                       		beq.s	loc_18B40
00019282 6000 FEC0                  		bra.w	loc_189FE
00019286                            ; ===========================================================================
00019286                            
00019286                            loc_18B40:
00019286 5528 0025                  		subq.b	#2,$25(a0)
0001928A 6000 FE84                  		bra.w	loc_189CA
0001928E                            ; ===========================================================================
0001928E                            
0001928E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001928E 5328 003C                  		subq.b	#1,$3C(a0)
00019292 6B00                       		bmi.s	loc_18B52
00019294 6000 ECF0                  		bra.w	BossDefeated
00019298                            ; ===========================================================================
00019298                            
00019298                            loc_18B52:
00019298 5428 0025                  		addq.b	#2,$25(a0)
0001929C 4268 0012                  		clr.w	$12(a0)
000192A0 08E8 0000 0022             		bset	#0,$22(a0)
000192A6 08A8 0007 0022             		bclr	#7,$22(a0)
000192AC 4268 0010                  		clr.w	$10(a0)
000192B0 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000192B6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000192BA 6600                       		bne.s	loc_18B7C
000192BC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000192C2                            
000192C2                            loc_18B7C:
000192C2 6000 FE80                  		bra.w	loc_189FE
000192C6                            ; ===========================================================================
000192C6                            
000192C6                            loc_18B80:				; XREF: Obj7A_ShipIndex
000192C6 5228 003C                  		addq.b	#1,$3C(a0)
000192CA 6700                       		beq.s	loc_18B90
000192CC 6A00                       		bpl.s	loc_18B96
000192CE 0668 0018 0012             		addi.w	#$18,$12(a0)
000192D4 6000                       		bra.s	loc_18BC2
000192D6                            ; ===========================================================================
000192D6                            
000192D6                            loc_18B90:
000192D6 4268 0012                  		clr.w	$12(a0)
000192DA 6000                       		bra.s	loc_18BC2
000192DC                            ; ===========================================================================
000192DC                            
000192DC                            loc_18B96:
000192DC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000192E2 6500                       		bcs.s	loc_18BAE
000192E4 6700                       		beq.s	loc_18BB4
000192E6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000192EC 6500                       		bcs.s	loc_18BC2
000192EE 5428 0025                  		addq.b	#2,$25(a0)
000192F2 6000                       		bra.s	loc_18BC2
000192F4                            ; ===========================================================================
000192F4                            
000192F4                            loc_18BAE:
000192F4 5168 0012                  		subq.w	#8,$12(a0)
000192F8 6000                       		bra.s	loc_18BC2
000192FA                            ; ===========================================================================
000192FA                            
000192FA                            loc_18BB4:
000192FA 4268 0012                  		clr.w	$12(a0)
000192FE 303C 0084                  		move.w	#$84,d0
00019302 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
00019308                            
00019308                            loc_18BC2:
00019308 6000 FE2A                  		bra.w	loc_189EE
0001930C                            ; ===========================================================================
0001930C                            
0001930C                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001930C 317C 0400 0010             		move.w	#$400,$10(a0)
00019312 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019318 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001931E 6400                       		bcc.s	loc_18BE0
00019320 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019324 6000                       		bra.s	loc_18BE8
00019326                            ; ===========================================================================
00019326                            
00019326                            loc_18BE0:
00019326 4A28 0001                  		tst.b	1(a0)
0001932A 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001932E                            
0001932E                            loc_18BE8:
0001932E 6100 EC98                  		bsr.w	BossMove
00019332 6000 FDDC                  		bra.w	loc_189CA
00019336                            ; ===========================================================================
00019336                            
00019336                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019336 7000                       		moveq	#0,d0
00019338 7201                       		moveq	#1,d1
0001933A 2268 0034                  		movea.l	$34(a0),a1
0001933E 1029 0025                  		move.b	$25(a1),d0
00019342 0C00 0006                  		cmpi.b	#6,d0
00019346 6B00                       		bmi.s	loc_18C06
00019348 720A                       		moveq	#$A,d1
0001934A 6000                       		bra.s	loc_18C1A
0001934C                            ; ===========================================================================
0001934C                            
0001934C                            loc_18C06:
0001934C 4A29 0020                  		tst.b	$20(a1)
00019350 6600                       		bne.s	loc_18C10
00019352 7205                       		moveq	#5,d1
00019354 6000                       		bra.s	loc_18C1A
00019356                            ; ===========================================================================
00019356                            
00019356                            loc_18C10:
00019356 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001935C 6500                       		bcs.s	loc_18C1A
0001935E 7204                       		moveq	#4,d1
00019360                            
00019360                            loc_18C1A:
00019360 1141 001C                  		move.b	d1,$1C(a0)
00019364 0C00 000A                  		cmpi.b	#$A,d0
00019368 6600                       		bne.s	loc_18C32
0001936A 117C 0006 001C             		move.b	#6,$1C(a0)
00019370 4A28 0001                  		tst.b	1(a0)
00019374 6A00 FC84                  		bpl.w	Obj7A_Delete
00019378                            
00019378                            loc_18C32:
00019378 6000                       		bra.s	loc_18C6C
0001937A                            ; ===========================================================================
0001937A                            
0001937A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001937A 117C 0008 001C             		move.b	#8,$1C(a0)
00019380 2268 0034                  		movea.l	$34(a0),a1
00019384 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001938A 6600                       		bne.s	loc_18C56
0001938C 4A28 0001                  		tst.b	1(a0)
00019390 6A00 FC68                  		bpl.w	Obj7A_Delete
00019394 117C 000B 001C             		move.b	#$B,$1C(a0)
0001939A 6000                       		bra.s	loc_18C6C
0001939C                            ; ===========================================================================
0001939C                            
0001939C                            loc_18C56:
0001939C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000193A2 6E00                       		bgt.s	loc_18C6C
000193A4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000193AA 6D00                       		blt.s	loc_18C6C
000193AC 117C 0007 001C             		move.b	#7,$1C(a0)
000193B2                            
000193B2                            loc_18C6C:
000193B2 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
000193B8 4EB9 0000 ACC8             		jsr	AnimateSprite
000193BE                            
000193BE                            loc_18C78:
000193BE 2268 0034                  		movea.l	$34(a0),a1
000193C2 3169 0008 0008             		move.w	8(a1),8(a0)
000193C8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000193CE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000193D4 7003                       		moveq	#3,d0
000193D6 C028 0022                  		and.b	$22(a0),d0
000193DA 0228 00FC 0001             		andi.b	#-4,1(a0)
000193E0 8128 0001                  		or.b	d0,1(a0)
000193E4 4EF9 0000 DBFE             		jmp	DisplaySprite
000193EA                            ; ===========================================================================
000193EA                            
000193EA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000193EA 2268 0034                  		movea.l	$34(a0),a1
000193EE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000193F4 6600                       		bne.s	loc_18CB8
000193F6 4A28 0001                  		tst.b	1(a0)
000193FA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000193FE                            
000193FE                            loc_18CB8:
000193FE 217C 0001 8522 0004        		move.l	#Map_BossItems,4(a0)
00019406 317C 246C 0002             		move.w	#$246C,2(a0)
0001940C 117C 0003 001A             		move.b	#3,$1A(a0)
00019412 60AA                       		bra.s	loc_18C78
00019414                            ; ===========================================================================
00019414                            ; ---------------------------------------------------------------------------
00019414                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019414                            ; ---------------------------------------------------------------------------
00019414                            
00019414                            Obj7B:					; XREF: Obj_Index
00019414 7000                       		moveq	#0,d0
00019416 1028 0024                  		move.b	$24(a0),d0
0001941A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001941E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019422 3028 0030                  		move.w	$30(a0),d0
00019426 0240 FF80                  		andi.w	#$FF80,d0
0001942A 3238 F700                  		move.w	($FFFFF700).w,d1
0001942E 0441 0080                  		subi.w	#$80,d1
00019432 0241 FF80                  		andi.w	#$FF80,d1
00019436 9041                       		sub.w	d1,d0
00019438 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001943C 0C40 0280                  		cmpi.w	#$280,d0
00019440 6200 FBB8                  		bhi.w	Obj7A_Delete
00019444 4EF9 0000 DBFE             		jmp	DisplaySprite
0001944A                            ; ===========================================================================
0001944A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001944C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001944E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019450 0000                       		dc.w loc_18EAA-Obj7B_Index
00019452 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019454 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019456                            ; ===========================================================================
00019456                            
00019456                            Obj7B_Main:				; XREF: Obj7B_Index
00019456 217C 0001 1FC4 0004        		move.l	#Map_obj5Ea,4(a0)
0001945E 317C 0518 0002             		move.w	#$518,2(a0)
00019464 117C 0001 001A             		move.b	#1,$1A(a0)
0001946A 0028 0004 0001             		ori.b	#4,1(a0)
00019470 117C 0004 0018             		move.b	#4,$18(a0)
00019476 117C 008B 0020             		move.b	#$8B,$20(a0)
0001947C 117C 000C 0019             		move.b	#$C,$19(a0)
00019482 2268 003C                  		movea.l	$3C(a0),a1
00019486 3169 0008 0030             		move.w	8(a1),$30(a0)
0001948C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019492 08E8 0000 0022             		bset	#0,$22(a0)
00019498 3028 0008                  		move.w	8(a0),d0
0001949C B069 0008                  		cmp.w	8(a1),d0
000194A0 6E00                       		bgt.s	loc_18D68
000194A2 08A8 0000 0022             		bclr	#0,$22(a0)
000194A8 117C 0002 003A             		move.b	#2,$3A(a0)
000194AE                            
000194AE                            loc_18D68:
000194AE 5428 0024                  		addq.b	#2,$24(a0)
000194B2                            
000194B2                            Obj7B_Fall:				; XREF: Obj7B_Index
000194B2 4EB9 0000 DBAC             		jsr	ObjectFall
000194B8 2268 003C                  		movea.l	$3C(a0),a1
000194BC 45F9 0000 0000             		lea	(word_19018).l,a2
000194C2 7000                       		moveq	#0,d0
000194C4 1029 001A                  		move.b	$1A(a1),d0
000194C8 3228 0008                  		move.w	8(a0),d1
000194CC 9268 0030                  		sub.w	$30(a0),d1
000194D0 6400                       		bcc.s	loc_18D8E
000194D2 5440                       		addq.w	#2,d0
000194D4                            
000194D4                            loc_18D8E:
000194D4 D040                       		add.w	d0,d0
000194D6 3228 0034                  		move.w	$34(a0),d1
000194DA D272 0000                  		add.w	(a2,d0.w),d1
000194DE B268 000C                  		cmp.w	$C(a0),d1
000194E2 6E00                       		bgt.s	locret_18DC4
000194E4 2268 003C                  		movea.l	$3C(a0),a1
000194E8 7202                       		moveq	#2,d1
000194EA 0828 0000 0022             		btst	#0,$22(a0)
000194F0 6700                       		beq.s	loc_18DAE
000194F2 7200                       		moveq	#0,d1
000194F4                            
000194F4                            loc_18DAE:
000194F4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000194FA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019500 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019506 6000 0000                  		bra.w	loc_18FA2
0001950A                            ; ===========================================================================
0001950A                            
0001950A                            locret_18DC4:
0001950A 4E75                       		rts	
0001950C                            ; ===========================================================================
0001950C                            
0001950C                            loc_18DC6:				; XREF: Obj7B_Index
0001950C 2268 003C                  		movea.l	$3C(a0),a1
00019510 7000                       		moveq	#0,d0
00019512 1028 003A                  		move.b	$3A(a0),d0
00019516 9029 003A                  		sub.b	$3A(a1),d0
0001951A 6700                       		beq.s	loc_18E2A
0001951C 6400                       		bcc.s	loc_18DDA
0001951E 4400                       		neg.b	d0
00019520                            
00019520                            loc_18DDA:
00019520 323C F7E8                  		move.w	#-$818,d1
00019524 343C FEEC                  		move.w	#-$114,d2
00019528 0C00 0001                  		cmpi.b	#1,d0
0001952C 6700                       		beq.s	loc_18E00
0001952E 323C F6A0                  		move.w	#-$960,d1
00019532 343C FF0C                  		move.w	#-$F4,d2
00019536 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001953C 6D00                       		blt.s	loc_18E00
0001953E 323C F5E0                  		move.w	#-$A20,d1
00019542 343C FF80                  		move.w	#-$80,d2
00019546                            
00019546                            loc_18E00:
00019546 3141 0012                  		move.w	d1,$12(a0)
0001954A 3142 0010                  		move.w	d2,$10(a0)
0001954E 3028 0008                  		move.w	8(a0),d0
00019552 9068 0030                  		sub.w	$30(a0),d0
00019556 6400                       		bcc.s	loc_18E16
00019558 4468 0010                  		neg.w	$10(a0)
0001955C                            
0001955C                            loc_18E16:
0001955C 117C 0001 001A             		move.b	#1,$1A(a0)
00019562 317C 0020 0028             		move.w	#$20,$28(a0)
00019568 5428 0024                  		addq.b	#2,$24(a0)
0001956C 6000 0000                  		bra.w	loc_18EAA
00019570                            ; ===========================================================================
00019570                            
00019570                            loc_18E2A:				; XREF: loc_18DC6
00019570 45F9 0000 0000             		lea	(word_19018).l,a2
00019576 7000                       		moveq	#0,d0
00019578 1029 001A                  		move.b	$1A(a1),d0
0001957C 343C 0028                  		move.w	#$28,d2
00019580 3228 0008                  		move.w	8(a0),d1
00019584 9268 0030                  		sub.w	$30(a0),d1
00019588 6400                       		bcc.s	loc_18E48
0001958A 4442                       		neg.w	d2
0001958C 5440                       		addq.w	#2,d0
0001958E                            
0001958E                            loc_18E48:
0001958E D040                       		add.w	d0,d0
00019590 3228 0034                  		move.w	$34(a0),d1
00019594 D272 0000                  		add.w	(a2,d0.w),d1
00019598 3141 000C                  		move.w	d1,$C(a0)
0001959C D468 0030                  		add.w	$30(a0),d2
000195A0 3142 0008                  		move.w	d2,8(a0)
000195A4 4268 000E                  		clr.w	$E(a0)
000195A8 4268 000A                  		clr.w	$A(a0)
000195AC 5368 0028                  		subq.w	#1,$28(a0)
000195B0 6600                       		bne.s	loc_18E7A
000195B2 317C 0020 0028             		move.w	#$20,$28(a0)
000195B8 117C 0008 0024             		move.b	#8,$24(a0)
000195BE 4E75                       		rts	
000195C0                            ; ===========================================================================
000195C0                            
000195C0                            loc_18E7A:
000195C0 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000195C6 6600                       		bne.s	loc_18E88
000195C8 117C 0005 001F             		move.b	#5,$1F(a0)
000195CE                            
000195CE                            loc_18E88:
000195CE 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000195D4 6600                       		bne.s	loc_18E96
000195D6 117C 0002 001F             		move.b	#2,$1F(a0)
000195DC                            
000195DC                            loc_18E96:
000195DC 5328 001E                  		subq.b	#1,$1E(a0)
000195E0 6E00                       		bgt.s	locret_18EA8
000195E2 0868 0000 001A             		bchg	#0,$1A(a0)
000195E8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000195EE                            
000195EE                            locret_18EA8:
000195EE 4E75                       		rts	
000195F0                            ; ===========================================================================
000195F0                            
000195F0                            loc_18EAA:				; XREF: Obj7B_Index
000195F0 43F8 D040                  		lea	($FFFFD040).w,a1
000195F4 707A                       		moveq	#$7A,d0
000195F6 7240                       		moveq	#$40,d1
000195F8 743E                       		moveq	#$3E,d2
000195FA                            
000195FA                            loc_18EB4:
000195FA B011                       		cmp.b	(a1),d0
000195FC 6700                       		beq.s	loc_18EC0
000195FE D2C1                       		adda.w	d1,a1
00019600 51CA FFF8                  		dbf	d2,loc_18EB4
00019604                            
00019604 6000                       		bra.s	loc_18F38
00019606                            ; ===========================================================================
00019606                            
00019606                            loc_18EC0:
00019606 3029 0008                  		move.w	8(a1),d0
0001960A 3229 000C                  		move.w	$C(a1),d1
0001960E 3428 0008                  		move.w	8(a0),d2
00019612 3628 000C                  		move.w	$C(a0),d3
00019616 45FA 0000                  		lea	byte_19022(pc),a2
0001961A 47FA 0000                  		lea	byte_19026(pc),a3
0001961E 181A                       		move.b	(a2)+,d4
00019620 4884                       		ext.w	d4
00019622 D044                       		add.w	d4,d0
00019624 181B                       		move.b	(a3)+,d4
00019626 4884                       		ext.w	d4
00019628 D444                       		add.w	d4,d2
0001962A B440                       		cmp.w	d0,d2
0001962C 6500                       		bcs.s	loc_18F38
0001962E 181A                       		move.b	(a2)+,d4
00019630 4884                       		ext.w	d4
00019632 D044                       		add.w	d4,d0
00019634 181B                       		move.b	(a3)+,d4
00019636 4884                       		ext.w	d4
00019638 D444                       		add.w	d4,d2
0001963A B042                       		cmp.w	d2,d0
0001963C 6500                       		bcs.s	loc_18F38
0001963E 181A                       		move.b	(a2)+,d4
00019640 4884                       		ext.w	d4
00019642 D244                       		add.w	d4,d1
00019644 181B                       		move.b	(a3)+,d4
00019646 4884                       		ext.w	d4
00019648 D644                       		add.w	d4,d3
0001964A B641                       		cmp.w	d1,d3
0001964C 6500                       		bcs.s	loc_18F38
0001964E 181A                       		move.b	(a2)+,d4
00019650 4884                       		ext.w	d4
00019652 D244                       		add.w	d4,d1
00019654 181B                       		move.b	(a3)+,d4
00019656 4884                       		ext.w	d4
00019658 D644                       		add.w	d4,d3
0001965A B243                       		cmp.w	d3,d1
0001965C 6500                       		bcs.s	loc_18F38
0001965E 5428 0024                  		addq.b	#2,$24(a0)
00019662 4268 0028                  		clr.w	$28(a0)
00019666 4229 0020                  		clr.b	$20(a1)
0001966A 5329 0021                  		subq.b	#1,$21(a1)
0001966E 6600                       		bne.s	loc_18F38
00019670 08E9 0007 0022             		bset	#7,$22(a1)
00019676 4268 0010                  		clr.w	$10(a0)
0001967A 4268 0012                  		clr.w	$12(a0)
0001967E                            
0001967E                            loc_18F38:
0001967E 4A68 0012                  		tst.w	$12(a0)
00019682 6A00                       		bpl.s	loc_18F5C
00019684 4EB9 0000 DBAC             		jsr	ObjectFall
0001968A 3028 0034                  		move.w	$34(a0),d0
0001968E 0440 002F                  		subi.w	#$2F,d0
00019692 B068 000C                  		cmp.w	$C(a0),d0
00019696 6E00                       		bgt.s	loc_18F58
00019698 4EB9 0000 DBAC             		jsr	ObjectFall
0001969E                            
0001969E                            loc_18F58:
0001969E 6000 FF20                  		bra.w	loc_18E7A
000196A2                            ; ===========================================================================
000196A2                            
000196A2                            loc_18F5C:
000196A2 4EB9 0000 DBAC             		jsr	ObjectFall
000196A8 2268 003C                  		movea.l	$3C(a0),a1
000196AC 45F9 0000 0000             		lea	(word_19018).l,a2
000196B2 7000                       		moveq	#0,d0
000196B4 1029 001A                  		move.b	$1A(a1),d0
000196B8 3228 0008                  		move.w	8(a0),d1
000196BC 9268 0030                  		sub.w	$30(a0),d1
000196C0 6400                       		bcc.s	loc_18F7E
000196C2 5440                       		addq.w	#2,d0
000196C4                            
000196C4                            loc_18F7E:
000196C4 D040                       		add.w	d0,d0
000196C6 3228 0034                  		move.w	$34(a0),d1
000196CA D272 0000                  		add.w	(a2,d0.w),d1
000196CE B268 000C                  		cmp.w	$C(a0),d1
000196D2 6ECA                       		bgt.s	loc_18F58
000196D4 2268 003C                  		movea.l	$3C(a0),a1
000196D8 7202                       		moveq	#2,d1
000196DA 4A68 0010                  		tst.w	$10(a0)
000196DE 6B00                       		bmi.s	loc_18F9C
000196E0 7200                       		moveq	#0,d1
000196E2                            
000196E2                            loc_18F9C:
000196E2 317C 0000 0028             		move.w	#0,$28(a0)
000196E8                            
000196E8                            loc_18FA2:
000196E8 1341 003A                  		move.b	d1,$3A(a1)
000196EC 1141 003A                  		move.b	d1,$3A(a0)
000196F0 B229 001A                  		cmp.b	$1A(a1),d1
000196F4 6700                       		beq.s	loc_19008
000196F6 08A9 0003 0022             		bclr	#3,$22(a1)
000196FC 6700                       		beq.s	loc_19008
000196FE 4229 0025                  		clr.b	$25(a1)
00019702 137C 0002 0024             		move.b	#2,$24(a1)
00019708 45F8 D000                  		lea	($FFFFD000).w,a2
0001970C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019712 446A 0012                  		neg.w	$12(a2)
00019716 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001971C 6600                       		bne.s	loc_18FDC
0001971E E0EA 0012                  		asr	$12(a2)
00019722                            
00019722                            loc_18FDC:
00019722 08EA 0001 0022             		bset	#1,$22(a2)
00019728 08AA 0003 0022             		bclr	#3,$22(a2)
0001972E 422A 003C                  		clr.b	$3C(a2)
00019732 2F08                       		move.l	a0,-(sp)
00019734 41D2                       		lea	(a2),a0
00019736 4EBA A30A                  		jsr	Obj01_ChkRoll
0001973A 205F                       		movea.l	(sp)+,a0
0001973C 157C 0002 0024             		move.b	#2,$24(a2)
00019742 303C 00CC                  		move.w	#$CC,d0
00019746 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001974C                            
0001974C                            loc_19008:
0001974C 4268 0010                  		clr.w	$10(a0)
00019750 4268 0012                  		clr.w	$12(a0)
00019754 5428 0024                  		addq.b	#2,$24(a0)
00019758 6000 FE66                  		bra.w	loc_18E7A
0001975C                            ; ===========================================================================
0001975C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019766                            		even
00019766 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001976A                            		even
0001976A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001976E                            		even
0001976E                            ; ===========================================================================
0001976E                            
0001976E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001976E 10BC 003F                  		move.b	#$3F,(a0)
00019772 4228 0024                  		clr.b	$24(a0)
00019776 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001977C 6700                       		beq.s	Obj7B_MakeFrag
0001977E 4E75                       		rts	
00019780                            ; ===========================================================================
00019780                            
00019780                            Obj7B_MakeFrag:
00019780 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019786 7203                       		moveq	#3,d1
00019788 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001978C                            
0001978C                            Obj7B_Loop:
0001978C 4EB9 0000 E084             		jsr	SingleObjLoad
00019792 6600                       		bne.s	loc_1909A
00019794 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019798 137C 000A 0024             		move.b	#$A,$24(a1)
0001979E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000197A6 137C 0003 0018             		move.b	#3,$18(a1)
000197AC 337C 0518 0002             		move.w	#$518,2(a1)
000197B2 3368 0008 0008             		move.w	8(a0),8(a1)
000197B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000197BE 335A 0010                  		move.w	(a2)+,$10(a1)
000197C2 335A 0012                  		move.w	(a2)+,$12(a1)
000197C6 137C 0098 0020             		move.b	#$98,$20(a1)
000197CC 0029 0004 0001             		ori.b	#4,1(a1)
000197D2 08E9 0007 0001             		bset	#7,1(a1)
000197D8 137C 000C 0019             		move.b	#$C,$19(a1)
000197DE                            
000197DE                            loc_1909A:
000197DE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000197E2                            
000197E2 4E75                       		rts	
000197E4                            ; ===========================================================================
000197E4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000197E8 FF60 FDC0                  		dc.w $FF60, $FDC0
000197EC 0100 FCC0                  		dc.w $100, $FCC0
000197F0 00A0 FDC0                  		dc.w $A0, $FDC0
000197F4                            ; ===========================================================================
000197F4                            
000197F4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000197F4 4EB9 0000 DBD8             		jsr	SpeedToPos
000197FA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019800 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019806 0668 0018 0012             		addi.w	#$18,$12(a0)
0001980C 7004                       		moveq	#4,d0
0001980E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019812 E448                       		lsr.w	#2,d0
00019814 1140 001A                  		move.b	d0,$1A(a0)
00019818 4A28 0001                  		tst.b	1(a0)
0001981C 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019820 4E75                       		rts	
00019822                            ; ===========================================================================
00019822                            ; ---------------------------------------------------------------------------
00019822                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019822                            ; ---------------------------------------------------------------------------
00019822                            Map_obj7B:
00019822                            	include "_maps\obj7B.asm"
00019822                            ; ---------------------------------------------------------------------------
00019822                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019822                            ; ---------------------------------------------------------------------------
00019822 0000                       		dc.w byte_190E2-Map_obj7B
00019824 0000                       		dc.w byte_190E8-Map_obj7B
00019826 01                         byte_190E2:	dc.b 1
00019827 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001982C 01                         byte_190E8:	dc.b 1
0001982D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019832                            		even
00019832                            		even
00019832                            
00019832                            ; ===========================================================================
00019832                            ; ---------------------------------------------------------------------------
00019832                            ; Object 75 - Eggman (SYZ)
00019832                            ; ---------------------------------------------------------------------------
00019832                            
00019832                            Obj75:					; XREF: Obj_Index
00019832 7000                       		moveq	#0,d0
00019834 1028 0024                  		move.b	$24(a0),d0
00019838 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001983C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019840                            ; ===========================================================================
00019840 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019842 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019844 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019846 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019848 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001984A                            
0001984A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001984D 0401 05                    		dc.b 4,	1, 5
00019850 0607 05                    		dc.b 6,	7, 5
00019853 0800 05                    		dc.b 8,	0, 5
00019856                            ; ===========================================================================
00019856                            
00019856                            Obj75_Main:				; XREF: Obj75_Index
00019856 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001985C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019862 3168 0008 0030             		move.w	8(a0),$30(a0)
00019868 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001986E 117C 000F 0020             		move.b	#$F,$20(a0)
00019874 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001987A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001987E 2248                       		movea.l	a0,a1
00019880 7203                       		moveq	#3,d1
00019882 6000                       		bra.s	Obj75_LoadBoss
00019884                            ; ===========================================================================
00019884                            
00019884                            Obj75_Loop:
00019884 4EB9 0000 E09A             		jsr	SingleObjLoad2
0001988A 6600                       		bne.s	Obj75_ShipMain
0001988C 12BC 0075                  		move.b	#$75,(a1)
00019890 3368 0008 0008             		move.w	8(a0),8(a1)
00019896 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001989C                            
0001989C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001989C 08A8 0000 0022             		bclr	#0,$22(a0)
000198A2 4229 0025                  		clr.b	$25(a1)
000198A6 135A 0024                  		move.b	(a2)+,$24(a1)
000198AA 135A 001C                  		move.b	(a2)+,$1C(a1)
000198AE 135A 0018                  		move.b	(a2)+,$18(a1)
000198B2 237C 0001 845A 0004        		move.l	#Map_Eggman,4(a1)
000198BA 337C 0400 0002             		move.w	#$400,2(a1)
000198C0 137C 0004 0001             		move.b	#4,1(a1)
000198C6 137C 0020 0019             		move.b	#$20,$19(a1)
000198CC 2348 0034                  		move.l	a0,$34(a1)
000198D0 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000198D4                            
000198D4                            Obj75_ShipMain:				; XREF: Obj75_Index
000198D4 7000                       		moveq	#0,d0
000198D6 1028 0025                  		move.b	$25(a0),d0
000198DA 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000198DE 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000198E2 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
000198E8 4EB9 0000 ACC8             		jsr	AnimateSprite
000198EE 7003                       		moveq	#3,d0
000198F0 C028 0022                  		and.b	$22(a0),d0
000198F4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198FA 8128 0001                  		or.b	d0,1(a0)
000198FE 4EF9 0000 DBFE             		jmp	DisplaySprite
00019904                            ; ===========================================================================
00019904 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019908 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001990C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019910                            ; ===========================================================================
00019910                            
00019910                            loc_191CC:				; XREF: Obj75_ShipIndex
00019910 317C FF00 0010             		move.w	#-$100,$10(a0)
00019916 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001991C 6400                       		bcc.s	loc_191DE
0001991E 5428 0025                  		addq.b	#2,$25(a0)
00019922                            
00019922                            loc_191DE:
00019922 1028 003F                  		move.b	$3F(a0),d0
00019926 5428 003F                  		addq.b	#2,$3F(a0)
0001992A 4EB9 0000 2C64             		jsr	(CalcSine).l
00019930 E440                       		asr.w	#2,d0
00019932 3140 0012                  		move.w	d0,$12(a0)
00019936                            
00019936                            loc_191F2:
00019936 6100 E690                  		bsr.w	BossMove
0001993A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019940 3168 0030 0008             		move.w	$30(a0),8(a0)
00019946                            
00019946                            loc_19202:
00019946 3028 0008                  		move.w	8(a0),d0
0001994A 0440 2C00                  		subi.w	#$2C00,d0
0001994E EA48                       		lsr.w	#5,d0
00019950 1140 0034                  		move.b	d0,$34(a0)
00019954 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001995A 6400                       		bcc.s	locret_19256
0001995C 4A28 0022                  		tst.b	$22(a0)
00019960 6B00                       		bmi.s	loc_19258
00019962 4A28 0020                  		tst.b	$20(a0)
00019966 6600                       		bne.s	locret_19256
00019968 4A28 003E                  		tst.b	$3E(a0)
0001996C 6600                       		bne.s	loc_1923A
0001996E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019974 303C 00AC                  		move.w	#$AC,d0
00019978 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001997E                            
0001997E                            loc_1923A:
0001997E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019982 7000                       		moveq	#0,d0
00019984 4A51                       		tst.w	(a1)
00019986 6600                       		bne.s	loc_19248
00019988 303C 0EEE                  		move.w	#$EEE,d0
0001998C                            
0001998C                            loc_19248:
0001998C 3280                       		move.w	d0,(a1)
0001998E 5328 003E                  		subq.b	#1,$3E(a0)
00019992 6600                       		bne.s	locret_19256
00019994 117C 000F 0020             		move.b	#$F,$20(a0)
0001999A                            
0001999A                            locret_19256:
0001999A 4E75                       		rts	
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            loc_19258:				; XREF: loc_19202
0001999C 7064                       		moveq	#100,d0
0001999E 6100 0000                  		bsr.w	AddPoints
000199A2 117C 0006 0025             		move.b	#6,$25(a0)
000199A8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000199AE 4268 0010                  		clr.w	$10(a0)
000199B2 4E75                       		rts	
000199B4                            ; ===========================================================================
000199B4                            
000199B4                            loc_19270:				; XREF: Obj75_ShipIndex
000199B4 3028 0030                  		move.w	$30(a0),d0
000199B8 317C 0140 0010             		move.w	#$140,$10(a0)
000199BE 0828 0000 0022             		btst	#0,$22(a0)
000199C4 6600                       		bne.s	loc_1928E
000199C6 4468 0010                  		neg.w	$10(a0)
000199CA 0C40 2C08                  		cmpi.w	#$2C08,d0
000199CE 6E00                       		bgt.s	loc_1929E
000199D0 6000                       		bra.s	loc_19294
000199D2                            ; ===========================================================================
000199D2                            
000199D2                            loc_1928E:
000199D2 0C40 2D38                  		cmpi.w	#$2D38,d0
000199D6 6D00                       		blt.s	loc_1929E
000199D8                            
000199D8                            loc_19294:
000199D8 0868 0000 0022             		bchg	#0,$22(a0)
000199DE 4228 003D                  		clr.b	$3D(a0)
000199E2                            
000199E2                            loc_1929E:
000199E2 0440 2C10                  		subi.w	#$2C10,d0
000199E6 0240 001F                  		andi.w	#$1F,d0
000199EA 0440 001F                  		subi.w	#$1F,d0
000199EE 6A00                       		bpl.s	loc_192AE
000199F0 4440                       		neg.w	d0
000199F2                            
000199F2                            loc_192AE:
000199F2 5340                       		subq.w	#1,d0
000199F4 6E00                       		bgt.s	loc_192E8
000199F6 4A28 003D                  		tst.b	$3D(a0)
000199FA 6600                       		bne.s	loc_192E8
000199FC 3238 D008                  		move.w	($FFFFD008).w,d1
00019A00 0441 2C00                  		subi.w	#$2C00,d1
00019A04 EA41                       		asr.w	#5,d1
00019A06 B228 0034                  		cmp.b	$34(a0),d1
00019A0A 6600                       		bne.s	loc_192E8
00019A0C 7000                       		moveq	#0,d0
00019A0E 1028 0034                  		move.b	$34(a0),d0
00019A12 EB40                       		asl.w	#5,d0
00019A14 0640 2C10                  		addi.w	#$2C10,d0
00019A18 3140 0030                  		move.w	d0,$30(a0)
00019A1C 6100 0000                  		bsr.w	Obj75_FindBlocks
00019A20 5428 0025                  		addq.b	#2,$25(a0)
00019A24 4268 0028                  		clr.w	$28(a0)
00019A28 4268 0010                  		clr.w	$10(a0)
00019A2C                            
00019A2C                            loc_192E8:
00019A2C 6000 FEF4                  		bra.w	loc_191DE
00019A30                            ; ===========================================================================
00019A30                            
00019A30                            loc_192EC:				; XREF: Obj75_ShipIndex
00019A30 7000                       		moveq	#0,d0
00019A32 1028 0028                  		move.b	$28(a0),d0
00019A36 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019A3A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019A3E                            ; ===========================================================================
00019A3E 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019A40 0000                       		dc.w loc_19348-off_192FA
00019A42 0000                       		dc.w loc_1938E-off_192FA
00019A44 0000                       		dc.w loc_193D0-off_192FA
00019A46                            ; ===========================================================================
00019A46                            
00019A46                            loc_19302:				; XREF: off_192FA
00019A46 317C 0180 0012             		move.w	#$180,$12(a0)
00019A4C 3028 0038                  		move.w	$38(a0),d0
00019A50 0C40 0556                  		cmpi.w	#$556,d0
00019A54 6500                       		bcs.s	loc_19344
00019A56 317C 0556 0038             		move.w	#$556,$38(a0)
00019A5C 4268 003C                  		clr.w	$3C(a0)
00019A60 70FF                       		moveq	#-1,d0
00019A62 3028 0036                  		move.w	$36(a0),d0
00019A66 6700                       		beq.s	loc_1933C
00019A68 2240                       		movea.l	d0,a1
00019A6A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019A70 117C 00FF 0029             		move.b	#-1,$29(a0)
00019A76 2348 0034                  		move.l	a0,$34(a1)
00019A7A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019A80                            
00019A80                            loc_1933C:
00019A80 4268 0012                  		clr.w	$12(a0)
00019A84 5428 0028                  		addq.b	#2,$28(a0)
00019A88                            
00019A88                            loc_19344:
00019A88 6000 FEAC                  		bra.w	loc_191F2
00019A8C                            ; ===========================================================================
00019A8C                            
00019A8C                            loc_19348:				; XREF: off_192FA
00019A8C 5368 003C                  		subq.w	#1,$3C(a0)
00019A90 6A00                       		bpl.s	loc_19366
00019A92 5428 0028                  		addq.b	#2,$28(a0)
00019A96 317C F800 0012             		move.w	#-$800,$12(a0)
00019A9C 4A68 0036                  		tst.w	$36(a0)
00019AA0 6600                       		bne.s	loc_19362
00019AA2 E0E8 0012                  		asr	$12(a0)
00019AA6                            
00019AA6                            loc_19362:
00019AA6 7000                       		moveq	#0,d0
00019AA8 6000                       		bra.s	loc_1937C
00019AAA                            ; ===========================================================================
00019AAA                            
00019AAA                            loc_19366:
00019AAA 7000                       		moveq	#0,d0
00019AAC 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019AB2 6E00                       		bgt.s	loc_1937C
00019AB4 7002                       		moveq	#2,d0
00019AB6 0828 0001 003D             		btst	#1,$3D(a0)
00019ABC 6700                       		beq.s	loc_1937C
00019ABE 4440                       		neg.w	d0
00019AC0                            
00019AC0                            loc_1937C:
00019AC0 D068 0038                  		add.w	$38(a0),d0
00019AC4 3140 000C                  		move.w	d0,$C(a0)
00019AC8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019ACE 6000 FE76                  		bra.w	loc_19202
00019AD2                            ; ===========================================================================
00019AD2                            
00019AD2                            loc_1938E:				; XREF: off_192FA
00019AD2 303C 04DA                  		move.w	#$4DA,d0
00019AD6 4A68 0036                  		tst.w	$36(a0)
00019ADA 6700                       		beq.s	loc_1939C
00019ADC 0440 0018                  		subi.w	#$18,d0
00019AE0                            
00019AE0                            loc_1939C:
00019AE0 B068 0038                  		cmp.w	$38(a0),d0
00019AE4 6D00                       		blt.s	loc_193BE
00019AE6 317C 0008 003C             		move.w	#8,$3C(a0)
00019AEC 4A68 0036                  		tst.w	$36(a0)
00019AF0 6700                       		beq.s	loc_193B4
00019AF2 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019AF8                            
00019AF8                            loc_193B4:
00019AF8 5428 0028                  		addq.b	#2,$28(a0)
00019AFC 4268 0012                  		clr.w	$12(a0)
00019B00 6000                       		bra.s	loc_193CC
00019B02                            ; ===========================================================================
00019B02                            
00019B02                            loc_193BE:
00019B02 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019B08 6C00                       		bge.s	loc_193CC
00019B0A 0668 000C 0012             		addi.w	#$C,$12(a0)
00019B10                            
00019B10                            loc_193CC:
00019B10 6000 FE24                  		bra.w	loc_191F2
00019B14                            ; ===========================================================================
00019B14                            
00019B14                            loc_193D0:				; XREF: off_192FA
00019B14 5368 003C                  		subq.w	#1,$3C(a0)
00019B18 6E00                       		bgt.s	loc_19406
00019B1A 6B00                       		bmi.s	loc_193EE
00019B1C 70FF                       		moveq	#-1,d0
00019B1E 3028 0036                  		move.w	$36(a0),d0
00019B22 6700                       		beq.s	loc_193E8
00019B24 2240                       		movea.l	d0,a1
00019B26 137C 000A 0029             		move.b	#$A,$29(a1)
00019B2C                            
00019B2C                            loc_193E8:
00019B2C 4268 0036                  		clr.w	$36(a0)
00019B30 6000                       		bra.s	loc_19406
00019B32                            ; ===========================================================================
00019B32                            
00019B32                            loc_193EE:
00019B32 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019B38 6600                       		bne.s	loc_19406
00019B3A 4228 0029                  		clr.b	$29(a0)
00019B3E 5528 0025                  		subq.b	#2,$25(a0)
00019B42 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019B48 6000                       		bra.s	loc_19446
00019B4A                            ; ===========================================================================
00019B4A                            
00019B4A                            loc_19406:
00019B4A 7001                       		moveq	#1,d0
00019B4C 4A68 0036                  		tst.w	$36(a0)
00019B50 6700                       		beq.s	loc_19410
00019B52 7002                       		moveq	#2,d0
00019B54                            
00019B54                            loc_19410:
00019B54 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019B5A 6700                       		beq.s	loc_19424
00019B5C 6D00                       		blt.s	loc_1941C
00019B5E 4440                       		neg.w	d0
00019B60                            
00019B60                            loc_1941C:
00019B60 4A68 0036                  		tst.w	$36(a0)
00019B64 D168 0038                  		add.w	d0,$38(a0)
00019B68                            
00019B68                            loc_19424:
00019B68 7000                       		moveq	#0,d0
00019B6A 4A68 0036                  		tst.w	$36(a0)
00019B6E 6700                       		beq.s	loc_19438
00019B70 7002                       		moveq	#2,d0
00019B72 0828 0000 003D             		btst	#0,$3D(a0)
00019B78 6700                       		beq.s	loc_19438
00019B7A 4440                       		neg.w	d0
00019B7C                            
00019B7C                            loc_19438:
00019B7C D068 0038                  		add.w	$38(a0),d0
00019B80 3140 000C                  		move.w	d0,$C(a0)
00019B84 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B8A                            
00019B8A                            loc_19446:
00019B8A 6000 FDBA                  		bra.w	loc_19202
00019B8E                            
00019B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B8E                            
00019B8E                            
00019B8E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019B8E 4268 0036                  		clr.w	$36(a0)
00019B92 43F8 D040                  		lea	($FFFFD040).w,a1
00019B96 703E                       		moveq	#$3E,d0
00019B98 7276                       		moveq	#$76,d1
00019B9A 1428 0034                  		move.b	$34(a0),d2
00019B9E                            
00019B9E                            Obj75_FindLoop:
00019B9E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019BA0 6600                       		bne.s	loc_1946A	; if not, branch
00019BA2 B429 0028                  		cmp.b	$28(a1),d2
00019BA6 6600                       		bne.s	loc_1946A
00019BA8 3149 0036                  		move.w	a1,$36(a0)
00019BAC 6000                       		bra.s	locret_19472
00019BAE                            ; ===========================================================================
00019BAE                            
00019BAE                            loc_1946A:
00019BAE 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019BB2 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019BB6                            
00019BB6                            locret_19472:
00019BB6 4E75                       		rts	
00019BB8                            ; End of function Obj75_FindBlocks
00019BB8                            
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            loc_19474:				; XREF: Obj75_ShipIndex
00019BB8 5368 003C                  		subq.w	#1,$3C(a0)
00019BBC 6B00                       		bmi.s	loc_1947E
00019BBE 6000 E3C6                  		bra.w	BossDefeated
00019BC2                            ; ===========================================================================
00019BC2                            
00019BC2                            loc_1947E:
00019BC2 5428 0025                  		addq.b	#2,$25(a0)
00019BC6 4268 0012                  		clr.w	$12(a0)
00019BCA 08E8 0000 0022             		bset	#0,$22(a0)
00019BD0 08A8 0007 0022             		bclr	#7,$22(a0)
00019BD6 4268 0010                  		clr.w	$10(a0)
00019BDA 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019BE0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019BE4 6600                       		bne.s	loc_194A8
00019BE6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019BEC                            
00019BEC                            loc_194A8:
00019BEC 6000 FD58                  		bra.w	loc_19202
00019BF0                            ; ===========================================================================
00019BF0                            
00019BF0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019BF0 5268 003C                  		addq.w	#1,$3C(a0)
00019BF4 6700                       		beq.s	loc_194BC
00019BF6 6A00                       		bpl.s	loc_194C2
00019BF8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BFE 6000                       		bra.s	loc_194EE
00019C00                            ; ===========================================================================
00019C00                            
00019C00                            loc_194BC:
00019C00 4268 0012                  		clr.w	$12(a0)
00019C04 6000                       		bra.s	loc_194EE
00019C06                            ; ===========================================================================
00019C06                            
00019C06                            loc_194C2:
00019C06 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019C0C 6500                       		bcs.s	loc_194DA
00019C0E 6700                       		beq.s	loc_194E0
00019C10 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019C16 6500                       		bcs.s	loc_194EE
00019C18 5428 0025                  		addq.b	#2,$25(a0)
00019C1C 6000                       		bra.s	loc_194EE
00019C1E                            ; ===========================================================================
00019C1E                            
00019C1E                            loc_194DA:
00019C1E 5168 0012                  		subq.w	#8,$12(a0)
00019C22 6000                       		bra.s	loc_194EE
00019C24                            ; ===========================================================================
00019C24                            
00019C24                            loc_194E0:
00019C24 4268 0012                  		clr.w	$12(a0)
00019C28 303C 0085                  		move.w	#$85,d0
00019C2C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019C32                            
00019C32                            loc_194EE:
00019C32 6000 FD02                  		bra.w	loc_191F2
00019C36                            ; ===========================================================================
00019C36                            
00019C36                            loc_194F2:				; XREF: Obj75_ShipIndex
00019C36 317C 0400 0010             		move.w	#$400,$10(a0)
00019C3C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019C42 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019C48 6400                       		bcc.s	loc_1950C
00019C4A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019C4E 6000                       		bra.s	loc_19512
00019C50                            ; ===========================================================================
00019C50                            
00019C50                            loc_1950C:
00019C50 4A28 0001                  		tst.b	1(a0)
00019C54 6A00                       		bpl.s	Obj75_ShipDelete
00019C56                            
00019C56                            loc_19512:
00019C56 6100 E370                  		bsr.w	BossMove
00019C5A 6000 FCC6                  		bra.w	loc_191DE
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E                            Obj75_ShipDelete:
00019C5E 4EF9 0000 DC3A             		jmp	DeleteObject
00019C64                            ; ===========================================================================
00019C64                            
00019C64                            Obj75_FaceMain:				; XREF: Obj75_Index
00019C64 7201                       		moveq	#1,d1
00019C66 2268 0034                  		movea.l	$34(a0),a1
00019C6A 7000                       		moveq	#0,d0
00019C6C 1029 0025                  		move.b	$25(a1),d0
00019C70 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019C74 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019C78 1141 001C                  		move.b	d1,$1C(a0)
00019C7C 1010                       		move.b	(a0),d0
00019C7E B011                       		cmp.b	(a1),d0
00019C80 6600                       		bne.s	Obj75_FaceDelete
00019C82 6000                       		bra.s	loc_195BE
00019C84                            ; ===========================================================================
00019C84                            
00019C84                            Obj75_FaceDelete:
00019C84 4EF9 0000 DC3A             		jmp	DeleteObject
00019C8A                            ; ===========================================================================
00019C8A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019C8E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019C92 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019C96                            ; ===========================================================================
00019C96                            
00019C96                            loc_19552:				; XREF: off_19546
00019C96 720A                       		moveq	#$A,d1
00019C98 4E75                       		rts	
00019C9A                            ; ===========================================================================
00019C9A                            
00019C9A                            loc_19556:				; XREF: off_19546
00019C9A 7206                       		moveq	#6,d1
00019C9C 4E75                       		rts	
00019C9E                            ; ===========================================================================
00019C9E                            
00019C9E                            loc_1955A:				; XREF: off_19546
00019C9E 7000                       		moveq	#0,d0
00019CA0 1029 0028                  		move.b	$28(a1),d0
00019CA4 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019CA8 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019CAC                            ; ===========================================================================
00019CAC 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019CB0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019CB4                            ; ===========================================================================
00019CB4                            
00019CB4                            loc_19570:				; XREF: off_19568
00019CB4 6000                       		bra.s	loc_19574
00019CB6                            ; ===========================================================================
00019CB6                            
00019CB6                            loc_19572:				; XREF: off_19568
00019CB6 7206                       		moveq	#6,d1
00019CB8                            
00019CB8                            loc_19574:				; XREF: off_19546
00019CB8 4A29 0020                  		tst.b	$20(a1)
00019CBC 6600                       		bne.s	loc_1957E
00019CBE 7205                       		moveq	#5,d1
00019CC0 4E75                       		rts	
00019CC2                            ; ===========================================================================
00019CC2                            
00019CC2                            loc_1957E:
00019CC2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019CC8 6500                       		bcs.s	locret_19588
00019CCA 7204                       		moveq	#4,d1
00019CCC                            
00019CCC                            locret_19588:
00019CCC 4E75                       		rts	
00019CCE                            ; ===========================================================================
00019CCE                            
00019CCE                            Obj75_FlameMain:			; XREF: Obj75_Index
00019CCE 117C 0007 001C             		move.b	#7,$1C(a0)
00019CD4 2268 0034                  		movea.l	$34(a0),a1
00019CD8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019CDE 6600                       		bne.s	loc_195AA
00019CE0 117C 000B 001C             		move.b	#$B,$1C(a0)
00019CE6 4A28 0001                  		tst.b	1(a0)
00019CEA 6A00                       		bpl.s	Obj75_FlameDelete
00019CEC 6000                       		bra.s	loc_195B6
00019CEE                            ; ===========================================================================
00019CEE                            
00019CEE                            loc_195AA:
00019CEE 4A69 0010                  		tst.w	$10(a1)
00019CF2 6700                       		beq.s	loc_195B6
00019CF4 117C 0008 001C             		move.b	#8,$1C(a0)
00019CFA                            
00019CFA                            loc_195B6:
00019CFA 6000                       		bra.s	loc_195BE
00019CFC                            ; ===========================================================================
00019CFC                            
00019CFC                            Obj75_FlameDelete:
00019CFC 4EF9 0000 DC3A             		jmp	DeleteObject
00019D02                            ; ===========================================================================
00019D02                            
00019D02                            loc_195BE:
00019D02 43F9 0001 840A             		lea	(Ani_Eggman).l,a1
00019D08 4EB9 0000 ACC8             		jsr	AnimateSprite
00019D0E 2268 0034                  		movea.l	$34(a0),a1
00019D12 3169 0008 0008             		move.w	8(a1),8(a0)
00019D18 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D1E                            
00019D1E                            loc_195DA:
00019D1E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019D24 7003                       		moveq	#3,d0
00019D26 C028 0022                  		and.b	$22(a0),d0
00019D2A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D30 8128 0001                  		or.b	d0,1(a0)
00019D34 4EF9 0000 DBFE             		jmp	DisplaySprite
00019D3A                            ; ===========================================================================
00019D3A                            
00019D3A                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019D3A 217C 0001 8522 0004        		move.l	#Map_BossItems,4(a0)
00019D42 317C 246C 0002             		move.w	#$246C,2(a0)
00019D48 117C 0005 001A             		move.b	#5,$1A(a0)
00019D4E 2268 0034                  		movea.l	$34(a0),a1
00019D52 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019D58 6600                       		bne.s	loc_1961C
00019D5A 4A28 0001                  		tst.b	1(a0)
00019D5E 6A00                       		bpl.s	Obj75_SpikeDelete
00019D60                            
00019D60                            loc_1961C:
00019D60 3169 0008 0008             		move.w	8(a1),8(a0)
00019D66 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D6C 3028 003C                  		move.w	$3C(a0),d0
00019D70 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019D76 6600                       		bne.s	loc_19652
00019D78 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019D7E 6700                       		beq.s	loc_1964C
00019D80 4A29 0028                  		tst.b	$28(a1)
00019D84 6600                       		bne.s	loc_19658
00019D86 0C40 0094                  		cmpi.w	#$94,d0
00019D8A 6C00                       		bge.s	loc_19658
00019D8C 5E40                       		addq.w	#7,d0
00019D8E 6000                       		bra.s	loc_19658
00019D90                            ; ===========================================================================
00019D90                            
00019D90                            loc_1964C:
00019D90 4A69 003C                  		tst.w	$3C(a1)
00019D94 6A00                       		bpl.s	loc_19658
00019D96                            
00019D96                            loc_19652:
00019D96 4A40                       		tst.w	d0
00019D98 6F00                       		ble.s	loc_19658
00019D9A 5B40                       		subq.w	#5,d0
00019D9C                            
00019D9C                            loc_19658:
00019D9C 3140 003C                  		move.w	d0,$3C(a0)
00019DA0 E440                       		asr.w	#2,d0
00019DA2 D168 000C                  		add.w	d0,$C(a0)
00019DA6 117C 0008 0019             		move.b	#8,$19(a0)
00019DAC 117C 000C 0016             		move.b	#$C,$16(a0)
00019DB2 4228 0020                  		clr.b	$20(a0)
00019DB6 2268 0034                  		movea.l	$34(a0),a1
00019DBA 4A29 0020                  		tst.b	$20(a1)
00019DBE 6700                       		beq.s	loc_19688
00019DC0 4A29 0029                  		tst.b	$29(a1)
00019DC4 6600                       		bne.s	loc_19688
00019DC6 117C 0084 0020             		move.b	#$84,$20(a0)
00019DCC                            
00019DCC                            loc_19688:
00019DCC 6000 FF50                  		bra.w	loc_195DA
00019DD0                            ; ===========================================================================
00019DD0                            
00019DD0                            Obj75_SpikeDelete:
00019DD0 4EF9 0000 DC3A             		jmp	DeleteObject
00019DD6                            ; ===========================================================================
00019DD6                            ; ---------------------------------------------------------------------------
00019DD6                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019DD6                            ; ---------------------------------------------------------------------------
00019DD6                            
00019DD6                            Obj76:					; XREF: Obj_Index
00019DD6 7000                       		moveq	#0,d0
00019DD8 1028 0024                  		move.b	$24(a0),d0
00019DDC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019DE0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019DE4                            ; ===========================================================================
00019DE4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019DE6 0000                       		dc.w Obj76_Action-Obj76_Index
00019DE8 0000                       		dc.w loc_19762-Obj76_Index
00019DEA                            ; ===========================================================================
00019DEA                            
00019DEA                            Obj76_Main:				; XREF: Obj76_Index
00019DEA 7800                       		moveq	#0,d4
00019DEC 3A3C 2C10                  		move.w	#$2C10,d5
00019DF0 7C09                       		moveq	#9,d6
00019DF2 43D0                       		lea	(a0),a1
00019DF4 6000                       		bra.s	Obj76_MakeBlock
00019DF6                            ; ===========================================================================
00019DF6                            
00019DF6                            Obj76_Loop:
00019DF6 4EB9 0000 E084             		jsr	SingleObjLoad
00019DFC 6600                       		bne.s	Obj76_ExitLoop
00019DFE                            
00019DFE                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019DFE 12BC 0076                  		move.b	#$76,(a1)
00019E02 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019E0A 337C 4000 0002             		move.w	#$4000,2(a1)
00019E10 137C 0004 0001             		move.b	#4,1(a1)
00019E16 137C 0010 0019             		move.b	#$10,$19(a1)
00019E1C 137C 0010 0016             		move.b	#$10,$16(a1)
00019E22 137C 0003 0018             		move.b	#3,$18(a1)
00019E28 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019E2C 337C 0582 000C             		move.w	#$582,$C(a1)
00019E32 3344 0028                  		move.w	d4,$28(a1)
00019E36 0644 0101                  		addi.w	#$101,d4
00019E3A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019E3E 5429 0024                  		addq.b	#2,$24(a1)
00019E42 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019E46                            
00019E46                            Obj76_ExitLoop:
00019E46 4E75                       		rts	
00019E48                            ; ===========================================================================
00019E48                            
00019E48                            Obj76_Action:				; XREF: Obj76_Index
00019E48 1028 0029                  		move.b	$29(a0),d0
00019E4C B028 0028                  		cmp.b	$28(a0),d0
00019E50 6700                       		beq.s	Obj76_Solid
00019E52 4A00                       		tst.b	d0
00019E54 6B00                       		bmi.s	loc_19718
00019E56                            
00019E56                            loc_19712:
00019E56 6100 0000                  		bsr.w	Obj76_Break
00019E5A 6000                       		bra.s	Obj76_Display
00019E5C                            ; ===========================================================================
00019E5C                            
00019E5C                            loc_19718:
00019E5C 2268 0034                  		movea.l	$34(a0),a1
00019E60 4A29 0021                  		tst.b	$21(a1)
00019E64 67F0                       		beq.s	loc_19712
00019E66 3169 0008 0008             		move.w	8(a1),8(a0)
00019E6C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E72 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019E78 B2C8                       		cmpa.w	a0,a1
00019E7A 6500                       		bcs.s	Obj76_Display
00019E7C 3029 0012                  		move.w	$12(a1),d0
00019E80 48C0                       		ext.l	d0
00019E82 E080                       		asr.l	#8,d0
00019E84 D168 000C                  		add.w	d0,$C(a0)
00019E88 6000                       		bra.s	Obj76_Display
00019E8A                            ; ===========================================================================
00019E8A                            
00019E8A                            Obj76_Solid:				; XREF: Obj76_Action
00019E8A 323C 001B                  		move.w	#$1B,d1
00019E8E 343C 0010                  		move.w	#$10,d2
00019E92 363C 0011                  		move.w	#$11,d3
00019E96 3828 0008                  		move.w	8(a0),d4
00019E9A 4EB9 0000 FFCE             		jsr	SolidObject
00019EA0                            
00019EA0                            Obj76_Display:				; XREF: Obj76_Action
00019EA0 4EF9 0000 DBFE             		jmp	DisplaySprite
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            loc_19762:				; XREF: Obj76_Index
00019EA6 4A28 0001                  		tst.b	1(a0)
00019EAA 6A00                       		bpl.s	Obj76_Delete
00019EAC 4EB9 0000 DBAC             		jsr	ObjectFall
00019EB2 4EF9 0000 DBFE             		jmp	DisplaySprite
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            Obj76_Delete:
00019EB8 4EF9 0000 DC3A             		jmp	DeleteObject
00019EBE                            
00019EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019EBE                            
00019EBE                            
00019EBE                            Obj76_Break:				; XREF: Obj76_Action
00019EBE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019EC2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019EC6 7801                       		moveq	#1,d4
00019EC8 7203                       		moveq	#3,d1
00019ECA 7438                       		moveq	#$38,d2
00019ECC 5428 0024                  		addq.b	#2,$24(a0)
00019ED0 117C 0008 0019             		move.b	#8,$19(a0)
00019ED6 117C 0008 0016             		move.b	#8,$16(a0)
00019EDC 43D0                       		lea	(a0),a1
00019EDE 6000                       		bra.s	Obj76_MakeFrag
00019EE0                            ; ===========================================================================
00019EE0                            
00019EE0                            Obj76_LoopFrag:
00019EE0 4EB9 0000 E09A             		jsr	SingleObjLoad2
00019EE6 6600                       		bne.s	loc_197D4
00019EE8                            
00019EE8                            Obj76_MakeFrag:
00019EE8 45D0                       		lea	(a0),a2
00019EEA 47D1                       		lea	(a1),a3
00019EEC 7603                       		moveq	#3,d3
00019EEE                            
00019EEE                            loc_197AA:
00019EEE 26DA                       		move.l	(a2)+,(a3)+
00019EF0 26DA                       		move.l	(a2)+,(a3)+
00019EF2 26DA                       		move.l	(a2)+,(a3)+
00019EF4 26DA                       		move.l	(a2)+,(a3)+
00019EF6 51CB FFF6                  		dbf	d3,loc_197AA
00019EFA                            
00019EFA 335C 0010                  		move.w	(a4)+,$10(a1)
00019EFE 335C 0012                  		move.w	(a4)+,$12(a1)
00019F02 361D                       		move.w	(a5)+,d3
00019F04 D769 0008                  		add.w	d3,8(a1)
00019F08 361D                       		move.w	(a5)+,d3
00019F0A D769 000C                  		add.w	d3,$C(a1)
00019F0E 1344 001A                  		move.b	d4,$1A(a1)
00019F12 5244                       		addq.w	#1,d4
00019F14 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019F18                            
00019F18                            loc_197D4:
00019F18 303C 00CB                  		move.w	#$CB,d0
00019F1C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
00019F22                            ; End of function Obj76_Break
00019F22                            
00019F22                            ; ===========================================================================
00019F22 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019F26 0180 FE00                  		dc.w $180, $FE00
00019F2A FF00 FF00                  		dc.w $FF00, $FF00
00019F2E 0100 FF00                  		dc.w $100, $FF00
00019F32 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019F36 0010 0000                  		dc.w $10, 0
00019F3A 0000 0010                  		dc.w 0,	$10
00019F3E 0010 0010                  		dc.w $10, $10
00019F42                            ; ---------------------------------------------------------------------------
00019F42                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019F42                            ; ---------------------------------------------------------------------------
00019F42                            Map_obj76:
00019F42                            	include "_maps\obj76.asm"
00019F42                            ; ---------------------------------------------------------------------------
00019F42                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019F42                            ; ---------------------------------------------------------------------------
00019F42 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019F46 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019F4A 0000                       		dc.w byte_19826-Map_obj76
00019F4C 02                         byte_19808:	dc.b 2
00019F4D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019F52 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019F57 00                         		dc.b 0
00019F58 01                         byte_19814:	dc.b 1
00019F59 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019F5E 01                         byte_1981A:	dc.b 1
00019F5F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019F64 01                         byte_19820:	dc.b 1
00019F65 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019F6A 01                         byte_19826:	dc.b 1
00019F6B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019F70                            		even
00019F70                            		even
00019F70                            
00019F70                            ; ===========================================================================
00019F70                            
00019F70                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019F70 4EF9 0000 DC3A             		jmp	DeleteObject
00019F76                            ; ===========================================================================
00019F76                            ; ---------------------------------------------------------------------------
00019F76                            ; Object 82 - Eggman (SBZ2)
00019F76                            ; ---------------------------------------------------------------------------
00019F76                            
00019F76                            Obj82:					; XREF: Obj_Index
00019F76 7000                       		moveq	#0,d0
00019F78 1028 0024                  		move.b	$24(a0),d0
00019F7C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019F80 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019F84                            ; ===========================================================================
00019F84 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019F86 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019F88 0000                       		dc.w Obj82_Switch-Obj82_Index
00019F8A                            
00019F8A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019F8D 0400 03                    		dc.b 4,	0, 3
00019F90                            ; ===========================================================================
00019F90                            
00019F90                            Obj82_Main:				; XREF: Obj82_Index
00019F90 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019F94 317C 2160 0008             		move.w	#$2160,8(a0)
00019F9A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019FA0 117C 000F 0020             		move.b	#$F,$20(a0)
00019FA6 117C 0010 0021             		move.b	#$10,$21(a0)
00019FAC 08A8 0000 0022             		bclr	#0,$22(a0)
00019FB2 4228 0025                  		clr.b	$25(a0)
00019FB6 115A 0024                  		move.b	(a2)+,$24(a0)
00019FBA 115A 001C                  		move.b	(a2)+,$1C(a0)
00019FBE 115A 0018                  		move.b	(a2)+,$18(a0)
00019FC2 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019FCA 317C 0400 0002             		move.w	#$400,2(a0)
00019FD0 117C 0004 0001             		move.b	#4,1(a0)
00019FD6 08E8 0007 0001             		bset	#7,1(a0)
00019FDC 117C 0020 0019             		move.b	#$20,$19(a0)
00019FE2 4EB9 0000 E09A             		jsr	SingleObjLoad2
00019FE8 6600                       		bne.s	Obj82_Eggman
00019FEA 2348 0034                  		move.l	a0,$34(a1)
00019FEE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019FF2 337C 2130 0008             		move.w	#$2130,8(a1)
00019FF8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019FFE 4228 0025                  		clr.b	$25(a0)
0001A002 135A 0024                  		move.b	(a2)+,$24(a1)
0001A006 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A00A 135A 0018                  		move.b	(a2)+,$18(a1)
0001A00E 237C 0000 C3F2 0004        		move.l	#Map_obj32,4(a1)
0001A016 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A01C 137C 0004 0001             		move.b	#4,1(a1)
0001A022 08E9 0007 0001             		bset	#7,1(a1)
0001A028 137C 0010 0019             		move.b	#$10,$19(a1)
0001A02E 137C 0000 001A             		move.b	#0,$1A(a1)
0001A034                            
0001A034                            Obj82_Eggman:				; XREF: Obj82_Index
0001A034 7000                       		moveq	#0,d0
0001A036 1028 0025                  		move.b	$25(a0),d0
0001A03A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A03E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A042 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A046 4EB9 0000 ACC8             		jsr	AnimateSprite
0001A04C 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A052                            ; ===========================================================================
0001A052 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A054 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A056 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A058 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A05A                            ; ===========================================================================
0001A05A                            
0001A05A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A05A 3028 0008                  		move.w	8(a0),d0
0001A05E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A062 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A066 6400                       		bcc.s	loc_19934	; if not, branch
0001A068 5428 0025                  		addq.b	#2,$25(a0)
0001A06C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A072 117C 0001 001C             		move.b	#1,$1C(a0)
0001A078                            
0001A078                            loc_19934:				; XREF: Obj82_EggIndex
0001A078 4EF9 0000 DBD8             		jmp	SpeedToPos
0001A07E                            ; ===========================================================================
0001A07E                            
0001A07E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A07E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A082 6600                       		bne.s	loc_19954	; if time remains, branch
0001A084 5428 0025                  		addq.b	#2,$25(a0)
0001A088 117C 0002 001C             		move.b	#2,$1C(a0)
0001A08E 5868 000C                  		addq.w	#4,$C(a0)
0001A092 317C 000F 003C             		move.w	#15,$3C(a0)
0001A098                            
0001A098                            loc_19954:
0001A098 60DE                       		bra.s	loc_19934
0001A09A                            ; ===========================================================================
0001A09A                            
0001A09A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A09A 5368 003C                  		subq.w	#1,$3C(a0)
0001A09E 6E00                       		bgt.s	loc_199D0
0001A0A0 6600                       		bne.s	loc_1996A
0001A0A2 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A0A8 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A0AE                            
0001A0AE                            loc_1996A:
0001A0AE 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A0B4 6E00                       		bgt.s	loc_19976
0001A0B6 4268 0010                  		clr.w	$10(a0)
0001A0BA                            
0001A0BA                            loc_19976:
0001A0BA 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A0C0 4A68 0012                  		tst.w	$12(a0)
0001A0C4 6B00                       		bmi.s	Obj82_FindBlocks
0001A0C6 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A0CC 6500                       		bcs.s	Obj82_FindBlocks
0001A0CE 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A0D4 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A0DA 6500                       		bcs.s	Obj82_FindBlocks
0001A0DC 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A0E2 4268 0012                  		clr.w	$12(a0)
0001A0E6                            
0001A0E6                            Obj82_FindBlocks:
0001A0E6 3028 0010                  		move.w	$10(a0),d0
0001A0EA 8068 0012                  		or.w	$12(a0),d0
0001A0EE 6600                       		bne.s	loc_199D0
0001A0F0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A0F4 703E                       		moveq	#$3E,d0
0001A0F6 7240                       		moveq	#$40,d1
0001A0F8                            
0001A0F8                            Obj82_FindLoop:	
0001A0F8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A0FA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A0FE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A102                            
0001A102 6600                       		bne.s	loc_199D0
0001A104 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A10A 5428 0025                  		addq.b	#2,$25(a0)
0001A10E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A114                            
0001A114                            loc_199D0:
0001A114 6000 FF62                  		bra.w	loc_19934
0001A118                            ; ===========================================================================
0001A118                            
0001A118                            Obj82_Switch:				; XREF: Obj82_Index
0001A118 7000                       		moveq	#0,d0
0001A11A 1028 0025                  		move.b	$25(a0),d0
0001A11E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A122 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A126                            ; ===========================================================================
0001A126 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A128 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A12A                            ; ===========================================================================
0001A12A                            
0001A12A                            loc_199E6:				; XREF: Obj82_SwIndex
0001A12A 2268 0034                  		movea.l	$34(a0),a1
0001A12E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A134 6600                       		bne.s	Obj82_SwDisplay
0001A136 117C 0001 001A             		move.b	#1,$1A(a0)
0001A13C 5428 0025                  		addq.b	#2,$25(a0)
0001A140                            
0001A140                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A140 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A146                            ; ===========================================================================
0001A146                            Ani_obj82:
0001A146                            	include "_anim\obj82.asm"
0001A146                            ; ---------------------------------------------------------------------------
0001A146                            ; Animation script - Eggman (SBZ2)
0001A146                            ; ---------------------------------------------------------------------------
0001A146 0000                       		dc.w byte_19A10-Ani_obj82
0001A148 0000                       		dc.w byte_19A14-Ani_obj82
0001A14A 0000                       		dc.w byte_19A18-Ani_obj82
0001A14C 0000                       		dc.w byte_19A20-Ani_obj82
0001A14E 0000                       		dc.w byte_19A24-Ani_obj82
0001A150 0000                       		dc.w byte_19A2A-Ani_obj82
0001A152 0000                       		dc.w byte_19A30-Ani_obj82
0001A154 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A158 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A15C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A164 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A168 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A16E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A174 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A178                            		even
0001A178                            		even
0001A178                            
0001A178                            ; ---------------------------------------------------------------------------
0001A178                            ; Sprite mappings - Eggman (SBZ2)
0001A178                            ; ---------------------------------------------------------------------------
0001A178                            Map_obj82:
0001A178                            	include "_maps\obj82.asm"
0001A178                            ; ================================================================================
0001A178                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A178                            ; ================================================================================
0001A178                            
0001A178                            DATAA16Z12RYSAF:
0001A178 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A17C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A180 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A184 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A188 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A18C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A18E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A18F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A194 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A199 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A19E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A19F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A1A4 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A1A9 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A1AE FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A1B3 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A1B4 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A1B9 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A1BE 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A1C3 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A1C8 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A1C9 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A1CE 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A1D3 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A1D8 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A1D9 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A1DE 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A1E3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A1E8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A1ED 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A1EE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A1F3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A1F8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A1FD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A202 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A203 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A208 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A20D 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A212 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A217 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A21C F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A221 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A226 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A227 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A22C E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A231 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A236 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A23B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A23C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A241 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A246 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A24B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A250 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A255 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A256 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A25B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A260 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A265 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A26A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A26F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A274 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A279 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A27E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A27F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A284 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A289 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A28E                            	even
0001A28E                            	even
0001A28E                            
0001A28E                            ; ===========================================================================
0001A28E                            ; ---------------------------------------------------------------------------
0001A28E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A28E                            ; ---------------------------------------------------------------------------
0001A28E                            
0001A28E                            Obj83:					; XREF: Obj_Index
0001A28E 7000                       		moveq	#0,d0
0001A290 1028 0024                  		move.b	$24(a0),d0
0001A294 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A298 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A29C                            ; ===========================================================================
0001A29C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A29E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A2A0 0000                       		dc.w loc_19C36-Obj83_Index
0001A2A2 0000                       		dc.w loc_19C62-Obj83_Index
0001A2A4 0000                       		dc.w loc_19C72-Obj83_Index
0001A2A6 0000                       		dc.w loc_19C80-Obj83_Index
0001A2A8                            ; ===========================================================================
0001A2A8                            
0001A2A8                            Obj83_Main:				; XREF: Obj83_Index
0001A2A8 317C 2080 0008             		move.w	#$2080,8(a0)
0001A2AE 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A2B4 117C 0080 0019             		move.b	#$80,$19(a0)
0001A2BA 117C 0010 0016             		move.b	#$10,$16(a0)
0001A2C0 117C 0004 0001             		move.b	#4,1(a0)
0001A2C6 08E8 0007 0001             		bset	#7,1(a0)
0001A2CC 7800                       		moveq	#0,d4
0001A2CE 3A3C 2010                  		move.w	#$2010,d5
0001A2D2 7C07                       		moveq	#7,d6
0001A2D4 45E8 0030                  		lea	$30(a0),a2
0001A2D8                            
0001A2D8                            Obj83_MakeBlock:
0001A2D8 4EB9 0000 E084             		jsr	SingleObjLoad
0001A2DE 6600                       		bne.s	Obj83_ExitMake
0001A2E0 34C9                       		move.w	a1,(a2)+
0001A2E2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A2E6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A2EE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A2F4 137C 0004 0001             		move.b	#4,1(a1)
0001A2FA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A300 137C 0010 0016             		move.b	#$10,$16(a1)
0001A306 137C 0003 0018             		move.b	#3,$18(a1)
0001A30C 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A310 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A316 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A31A 137C 0008 0024             		move.b	#8,$24(a1)
0001A320 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A324                            
0001A324                            Obj83_ExitMake:
0001A324 5428 0024                  		addq.b	#2,$24(a0)
0001A328 4E75                       		rts	
0001A32A                            ; ===========================================================================
0001A32A                            
0001A32A                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A32A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A330 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A332 4228 001A                  		clr.b	$1A(a0)
0001A336 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A33A                            
0001A33A                            Obj83_Solid:
0001A33A 7000                       		moveq	#0,d0
0001A33C 1028 001A                  		move.b	$1A(a0),d0
0001A340 4400                       		neg.b	d0
0001A342 4880                       		ext.w	d0
0001A344 5040                       		addq.w	#8,d0
0001A346 E940                       		asl.w	#4,d0
0001A348 383C 2100                  		move.w	#$2100,d4
0001A34C 9840                       		sub.w	d0,d4
0001A34E 1140 0019                  		move.b	d0,$19(a0)
0001A352 3144 0008                  		move.w	d4,8(a0)
0001A356 720B                       		moveq	#$B,d1
0001A358 D240                       		add.w	d0,d1
0001A35A 7410                       		moveq	#$10,d2
0001A35C 7611                       		moveq	#$11,d3
0001A35E 4EF9 0000 FFCE             		jmp	SolidObject
0001A364                            ; ===========================================================================
0001A364                            
0001A364                            loc_19C36:				; XREF: Obj83_Index
0001A364 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A36A 6400                       		bcc.s	Obj83_Solid2
0001A36C 70FF                       		moveq	#-1,d0
0001A36E 1028 001A                  		move.b	$1A(a0),d0
0001A372 4880                       		ext.w	d0
0001A374 D040                       		add.w	d0,d0
0001A376 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A37A 2240                       		movea.l	d0,a1
0001A37C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A382 5228 001A                  		addq.b	#1,$1A(a0)
0001A386 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A38C 6700                       		beq.s	loc_19C62
0001A38E                            
0001A38E                            Obj83_Solid2:
0001A38E 60AA                       		bra.s	Obj83_Solid
0001A390                            ; ===========================================================================
0001A390                            
0001A390                            loc_19C62:				; XREF: Obj83_Index
0001A390 08A8 0003 0022             		bclr	#3,$22(a0)
0001A396 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A39C 6000 FBD2                  		bra.w	loc_1982C
0001A3A0                            ; ===========================================================================
0001A3A0                            
0001A3A0                            loc_19C72:				; XREF: Obj83_Index
0001A3A0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A3A6 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A3A8 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A3AE                            ; ===========================================================================
0001A3AE                            
0001A3AE                            loc_19C80:				; XREF: Obj83_Index
0001A3AE 4A28 0001                  		tst.b	1(a0)
0001A3B2 6A00 FBBC                  		bpl.w	loc_1982C
0001A3B6 4EB9 0000 DBAC             		jsr	ObjectFall
0001A3BC 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A3C2                            ; ===========================================================================
0001A3C2                            
0001A3C2                            Obj83_Break:				; XREF: loc_19C72
0001A3C2 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A3C6 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A3CA 7801                       		moveq	#1,d4
0001A3CC 7203                       		moveq	#3,d1
0001A3CE 7438                       		moveq	#$38,d2
0001A3D0 5428 0024                  		addq.b	#2,$24(a0)
0001A3D4 117C 0008 0019             		move.b	#8,$19(a0)
0001A3DA 117C 0008 0016             		move.b	#8,$16(a0)
0001A3E0 43D0                       		lea	(a0),a1
0001A3E2 6000                       		bra.s	Obj83_MakeFrag
0001A3E4                            ; ===========================================================================
0001A3E4                            
0001A3E4                            Obj83_LoopFrag:
0001A3E4 4EB9 0000 E09A             		jsr	SingleObjLoad2
0001A3EA 6600                       		bne.s	Obj83_BreakSnd
0001A3EC                            
0001A3EC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A3EC 45D0                       		lea	(a0),a2
0001A3EE 47D1                       		lea	(a1),a3
0001A3F0 7603                       		moveq	#3,d3
0001A3F2                            
0001A3F2                            loc_19CC4:
0001A3F2 26DA                       		move.l	(a2)+,(a3)+
0001A3F4 26DA                       		move.l	(a2)+,(a3)+
0001A3F6 26DA                       		move.l	(a2)+,(a3)+
0001A3F8 26DA                       		move.l	(a2)+,(a3)+
0001A3FA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A3FE                            
0001A3FE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A402 361D                       		move.w	(a5)+,d3
0001A404 D769 0008                  		add.w	d3,8(a1)
0001A408 361D                       		move.w	(a5)+,d3
0001A40A D769 000C                  		add.w	d3,$C(a1)
0001A40E 1344 001A                  		move.b	d4,$1A(a1)
0001A412 5244                       		addq.w	#1,d4
0001A414 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A418                            
0001A418                            Obj83_BreakSnd:
0001A418 303C 00CB                  		move.w	#$CB,d0
0001A41C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A422 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A428                            ; ===========================================================================
0001A428 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A42C 0120 00C0                  		dc.w $120, $C0
0001A430 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A434 0010 0000                  		dc.w $10, 0
0001A438 0000 0010                  		dc.w 0,	$10
0001A43C 0010 0010                  		dc.w $10, $10
0001A440                            ; ---------------------------------------------------------------------------
0001A440                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A440                            ; ---------------------------------------------------------------------------
0001A440                            Map_obj83:
0001A440                            	include "_maps\obj83.asm"
0001A440                            ; ---------------------------------------------------------------------------
0001A440                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A440                            ; ---------------------------------------------------------------------------
0001A440 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A444 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A448 0000                       		dc.w byte_19D46-Map_obj83
0001A44A 01                         byte_19D1C:	dc.b 1
0001A44B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A450 02                         byte_19D22:	dc.b 2
0001A451 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A456 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A45B 00                         		dc.b 0
0001A45C 02                         byte_19D2E:	dc.b 2
0001A45D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A462 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A467 00                         		dc.b 0
0001A468 02                         byte_19D3A:	dc.b 2
0001A469 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A46E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A473 00                         		dc.b 0
0001A474 02                         byte_19D46:	dc.b 2
0001A475 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A47A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A480 00                         		even
0001A480 00                         		even
0001A480                            
0001A480                            ; ===========================================================================
0001A480                            ; ---------------------------------------------------------------------------
0001A480                            ; Object 85 - Eggman (FZ)
0001A480                            ; ---------------------------------------------------------------------------
0001A480                            
0001A480                            Obj85_Delete:
0001A480 4EF9 0000 DC3A             		jmp	DeleteObject
0001A486                            ; ===========================================================================
0001A486                            
0001A486                            Obj85:					; XREF: Obj_Index
0001A486 7000                       		moveq	#0,d0
0001A488 1028 0024                  		move.b	$24(a0),d0
0001A48C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A490 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A494                            ; ===========================================================================
0001A494 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A496 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A498 0000                       		dc.w loc_1A38E-Obj85_Index
0001A49A 0000                       		dc.w loc_1A346-Obj85_Index
0001A49C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A49E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A4A0 0000                       		dc.w loc_1A264-Obj85_Index
0001A4A2                            
0001A4A2 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A4A8 0001 A178                  		dc.l Map_obj82		; mappings pointer
0001A4AC 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A4B2 0000 0000                  		dc.l Map_obj84
0001A4B6 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A4BC 0000 0000                  		dc.l Map_FZBoss
0001A4C0 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A4C6 0001 A178                  		dc.l Map_obj82
0001A4CA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A4D0 0001 845A                  		dc.l Map_Eggman
0001A4D4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A4DA 0001 845A                  		dc.l Map_Eggman
0001A4DE                            
0001A4DE 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A4E3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A4E8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A4ED 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A4F2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A4F7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A4FC                            ; ===========================================================================
0001A4FC                            
0001A4FC                            Obj85_Main:				; XREF: Obj85_Index
0001A4FC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A500 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A504 2248                       		movea.l	a0,a1
0001A506 7205                       		moveq	#5,d1
0001A508 6000                       		bra.s	Obj85_LoadBoss
0001A50A                            ; ===========================================================================
0001A50A                            
0001A50A                            Obj85_Loop:
0001A50A 4EB9 0000 E09A             		jsr	SingleObjLoad2
0001A510 6600                       		bne.s	loc_19E20
0001A512                            
0001A512                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A512 12BC 0085                  		move.b	#$85,(a1)
0001A516 335A 0008                  		move.w	(a2)+,8(a1)
0001A51A 335A 000C                  		move.w	(a2)+,$C(a1)
0001A51E 335A 0002                  		move.w	(a2)+,2(a1)
0001A522 235A 0004                  		move.l	(a2)+,4(a1)
0001A526 135B 0024                  		move.b	(a3)+,$24(a1)
0001A52A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A52E 135B 0018                  		move.b	(a3)+,$18(a1)
0001A532 135B 0017                  		move.b	(a3)+,$17(a1)
0001A536 135B 0016                  		move.b	(a3)+,$16(a1)
0001A53A 137C 0004 0001             		move.b	#4,1(a1)
0001A540 08E8 0007 0001             		bset	#7,1(a0)
0001A546 2348 0034                  		move.l	a0,$34(a1)
0001A54A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A54E                            
0001A54E                            loc_19E20:
0001A54E 45E8 0036                  		lea	$36(a0),a2
0001A552 4EB9 0000 E084             		jsr	SingleObjLoad
0001A558 6600                       		bne.s	loc_19E5A
0001A55A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A55E 3489                       		move.w	a1,(a2)
0001A560 2348 0034                  		move.l	a0,$34(a1)
0001A564 45E8 0038                  		lea	$38(a0),a2
0001A568 7400                       		moveq	#0,d2
0001A56A 7203                       		moveq	#3,d1
0001A56C                            
0001A56C                            loc_19E3E:
0001A56C 4EB9 0000 E09A             		jsr	SingleObjLoad2
0001A572 6600                       		bne.s	loc_19E5A
0001A574 34C9                       		move.w	a1,(a2)+
0001A576 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A57A 2348 0034                  		move.l	a0,$34(a1)
0001A57E 1342 0028                  		move.b	d2,$28(a1)
0001A582 5442                       		addq.w	#2,d2
0001A584 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A588                            
0001A588                            loc_19E5A:
0001A588 317C 0000 0034             		move.w	#0,$34(a0)
0001A58E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A594 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A59A                            
0001A59A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A59A 7000                       		moveq	#0,d0
0001A59C 1028 0034                  		move.b	$34(a0),d0
0001A5A0 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A5A4 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A5A8 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A5AE                            ; ===========================================================================
0001A5AE 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A5B2 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A5B6 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A5BA 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A5BE                            ; ===========================================================================
0001A5BE                            
0001A5BE                            loc_19E90:				; XREF: off_19E80
0001A5BE 4AB8 F680                  		tst.l	($FFFFF680).w
0001A5C2 6600                       		bne.s	loc_19EA2
0001A5C4 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A5CA 6500                       		bcs.s	loc_19EA2
0001A5CC 5428 0034                  		addq.b	#2,$34(a0)
0001A5D0                            
0001A5D0                            loc_19EA2:
0001A5D0 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A5D4 4E75                       		rts	
0001A5D6                            ; ===========================================================================
0001A5D6                            
0001A5D6                            loc_19EA8:				; XREF: off_19E80
0001A5D6 4A68 0030                  		tst.w	$30(a0)
0001A5DA 6A00                       		bpl.s	loc_19F10
0001A5DC 4268 0030                  		clr.w	$30(a0)
0001A5E0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001A5E6 0240 000C                  		andi.w	#$C,d0
0001A5EA 3200                       		move.w	d0,d1
0001A5EC 5441                       		addq.w	#2,d1
0001A5EE 4A80                       		tst.l	d0
0001A5F0 6A00                       		bpl.s	loc_19EC6
0001A5F2 C141                       		exg	d1,d0
0001A5F4                            
0001A5F4                            loc_19EC6:
0001A5F4 43FA 0000                  		lea	word_19FD6(pc),a1
0001A5F8 3031 0000                  		move.w	(a1,d0.w),d0
0001A5FC 3231 1000                  		move.w	(a1,d1.w),d1
0001A600 3140 0030                  		move.w	d0,$30(a0)
0001A604 74FF                       		moveq	#-1,d2
0001A606 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A60A 2242                       		movea.l	d2,a1
0001A60C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A612 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A618 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A61C 2242                       		movea.l	d2,a1
0001A61E 137C 0001 0029             		move.b	#1,$29(a1)
0001A624 337C 0000 0030             		move.w	#0,$30(a1)
0001A62A 317C 0001 0032             		move.w	#1,$32(a0)
0001A630 4228 0035                  		clr.b	$35(a0)
0001A634 303C 00B7                  		move.w	#$B7,d0
0001A638 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A63E                            
0001A63E                            loc_19F10:
0001A63E 4A68 0032                  		tst.w	$32(a0)
0001A642 6B00 0000                  		bmi.w	loc_19FA6
0001A646 08A8 0000 0022             		bclr	#0,$22(a0)
0001A64C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A650 9068 0008                  		sub.w	8(a0),d0
0001A654 6500                       		bcs.s	loc_19F2E
0001A656 08E8 0000 0022             		bset	#0,$22(a0)
0001A65C                            
0001A65C                            loc_19F2E:
0001A65C 323C 002B                  		move.w	#$2B,d1
0001A660 343C 0014                  		move.w	#$14,d2
0001A664 363C 0014                  		move.w	#$14,d3
0001A668 3828 0008                  		move.w	8(a0),d4
0001A66C 4EB9 0000 FFCE             		jsr	SolidObject
0001A672 4A44                       		tst.w	d4
0001A674 6E00                       		bgt.s	loc_19F50
0001A676                            
0001A676                            loc_19F48:
0001A676 4A28 0035                  		tst.b	$35(a0)
0001A67A 6600                       		bne.s	loc_19F88
0001A67C 6000                       		bra.s	loc_19F96
0001A67E                            ; ===========================================================================
0001A67E                            
0001A67E                            loc_19F50:
0001A67E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A682 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A688 66EC                       		bne.s	loc_19F48
0001A68A 303C 0300                  		move.w	#$300,d0
0001A68E 0828 0000 0022             		btst	#0,$22(a0)
0001A694 6600                       		bne.s	loc_19F6A
0001A696 4440                       		neg.w	d0
0001A698                            
0001A698                            loc_19F6A:
0001A698 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A69C 4A28 0035                  		tst.b	$35(a0)
0001A6A0 6600                       		bne.s	loc_19F88
0001A6A2 5328 0021                  		subq.b	#1,$21(a0)
0001A6A6 117C 0064 0035             		move.b	#$64,$35(a0)
0001A6AC 303C 00AC                  		move.w	#$AC,d0
0001A6B0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A6B6                            
0001A6B6                            loc_19F88:
0001A6B6 5328 0035                  		subq.b	#1,$35(a0)
0001A6BA 6700                       		beq.s	loc_19F96
0001A6BC 117C 0003 001C             		move.b	#3,$1C(a0)
0001A6C2 6000                       		bra.s	loc_19F9C
0001A6C4                            ; ===========================================================================
0001A6C4                            
0001A6C4                            loc_19F96:
0001A6C4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A6CA                            
0001A6CA                            loc_19F9C:
0001A6CA 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A6CE 4EF9 0000 ACC8             		jmp	AnimateSprite
0001A6D4                            ; ===========================================================================
0001A6D4                            
0001A6D4                            loc_19FA6:
0001A6D4 4A28 0021                  		tst.b	$21(a0)
0001A6D8 6700                       		beq.s	loc_19FBC
0001A6DA 5428 0034                  		addq.b	#2,$34(a0)
0001A6DE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A6E4 4268 0032                  		clr.w	$32(a0)
0001A6E8 4E75                       		rts	
0001A6EA                            ; ===========================================================================
0001A6EA                            
0001A6EA                            loc_19FBC:
0001A6EA 117C 0006 0034             		move.b	#6,$34(a0)
0001A6F0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A6F6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A6FC 117C 0014 0016             		move.b	#$14,$16(a0)
0001A702 4E75                       		rts	
0001A704                            ; ===========================================================================
0001A704 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A714                            ; ===========================================================================
0001A714                            
0001A714                            loc_19FE6:				; XREF: off_19E80
0001A714 70FF                       		moveq	#-1,d0
0001A716 3028 0036                  		move.w	$36(a0),d0
0001A71A 2240                       		movea.l	d0,a1
0001A71C 4A68 0030                  		tst.w	$30(a0)
0001A720 6A00                       		bpl.s	loc_1A000
0001A722 4268 0030                  		clr.w	$30(a0)
0001A726 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A72C 6100                       		bsr.s	loc_1A020
0001A72E                            
0001A72E                            loc_1A000:
0001A72E 700F                       		moveq	#$F,d0
0001A730 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A734 6600                       		bne.s	loc_1A00A
0001A736 6100                       		bsr.s	loc_1A020
0001A738                            
0001A738                            loc_1A00A:
0001A738 4A68 0032                  		tst.w	$32(a0)
0001A73C 6700                       		beq.s	locret_1A01E
0001A73E 5528 0034                  		subq.b	#2,$34(a0)
0001A742 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A748 4268 0032                  		clr.w	$32(a0)
0001A74C                            
0001A74C                            locret_1A01E:
0001A74C 4E75                       		rts	
0001A74E                            ; ===========================================================================
0001A74E                            
0001A74E                            loc_1A020:
0001A74E 303C 00B1                  		move.w	#$B1,d0
0001A752 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A758                            ; ===========================================================================
0001A758                            
0001A758                            loc_1A02A:				; XREF: off_19E80
0001A758 117C 0030 0017             		move.b	#$30,$17(a0)
0001A75E 08E8 0000 0022             		bset	#0,$22(a0)
0001A764 4EB9 0000 DBD8             		jsr	SpeedToPos
0001A76A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A770 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A776 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A77C 6500                       		bcs.s	loc_1A070
0001A77E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A784 5428 0034                  		addq.b	#2,$34(a0)
0001A788 117C 0020 0017             		move.b	#$20,$17(a0)
0001A78E 317C 0100 0010             		move.w	#$100,$10(a0)
0001A794 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A79A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A79E                            
0001A79E                            loc_1A070:
0001A79E 6000 0000                  		bra.w	loc_1A166
0001A7A2                            ; ===========================================================================
0001A7A2                            
0001A7A2                            loc_1A074:				; XREF: off_19E80
0001A7A2 08E8 0000 0022             		bset	#0,$22(a0)
0001A7A8 117C 0004 001C             		move.b	#4,$1C(a0)
0001A7AE 4EB9 0000 DBD8             		jsr	SpeedToPos
0001A7B4 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A7BA 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A7C0 6500                       		bcs.s	loc_1A09A
0001A7C2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A7C8                            
0001A7C8                            loc_1A09A:
0001A7C8 317C 0400 0010             		move.w	#$400,$10(a0)
0001A7CE 3028 0008                  		move.w	8(a0),d0
0001A7D2 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A7D6 6A00                       		bpl.s	loc_1A0B4
0001A7D8 317C 0500 0010             		move.w	#$500,$10(a0)
0001A7DE 6000 0000                  		bra.w	loc_1A0F2
0001A7E2                            ; ===========================================================================
0001A7E2                            
0001A7E2                            loc_1A0B4:
0001A7E2 0440 0070                  		subi.w	#$70,d0
0001A7E6 6500                       		bcs.s	loc_1A0F2
0001A7E8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A7EE 5140                       		subq.w	#8,d0
0001A7F0 6500                       		bcs.s	loc_1A0F2
0001A7F2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A7F8 5140                       		subq.w	#8,d0
0001A7FA 6500                       		bcs.s	loc_1A0F2
0001A7FC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A802 5140                       		subq.w	#8,d0
0001A804 6500                       		bcs.s	loc_1A0F2
0001A806 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A80C 5140                       		subq.w	#8,d0
0001A80E 6500                       		bcs.s	loc_1A0F2
0001A810 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A816 0440 0038                  		subi.w	#$38,d0
0001A81A 6500                       		bcs.s	loc_1A0F2
0001A81C 4268 0010                  		clr.w	$10(a0)
0001A820                            
0001A820                            loc_1A0F2:
0001A820 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A826 6500                       		bcs.s	loc_1A110
0001A828 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A82E 317C 0240 0010             		move.w	#$240,$10(a0)
0001A834 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A83A 5428 0034                  		addq.b	#2,$34(a0)
0001A83E                            
0001A83E                            loc_1A110:
0001A83E 6000                       		bra.s	loc_1A15C
0001A840                            ; ===========================================================================
0001A840                            
0001A840                            loc_1A112:				; XREF: off_19E80
0001A840 4EB9 0000 DBD8             		jsr	SpeedToPos
0001A846 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A84C 6500                       		bcs.s	loc_1A124
0001A84E 4268 0010                  		clr.w	$10(a0)
0001A852                            
0001A852                            loc_1A124:
0001A852 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A858 4A68 0012                  		tst.w	$12(a0)
0001A85C 6B00                       		bmi.s	loc_1A142
0001A85E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A864 6500                       		bcs.s	loc_1A142
0001A866 317C 0592 000C             		move.w	#$592,$C(a0)
0001A86C 4268 0012                  		clr.w	$12(a0)
0001A870                            
0001A870                            loc_1A142:
0001A870 3028 0010                  		move.w	$10(a0),d0
0001A874 8068 0012                  		or.w	$12(a0),d0
0001A878 6600                       		bne.s	loc_1A15C
0001A87A 5428 0034                  		addq.b	#2,$34(a0)
0001A87E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A884 117C 0001 0021             		move.b	#1,$21(a0)
0001A88A                            
0001A88A                            loc_1A15C:
0001A88A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A88E 4EB9 0000 ACC8             		jsr	AnimateSprite
0001A894                            
0001A894                            loc_1A166:
0001A894 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A89A 6C00                       		bge.s	loc_1A172
0001A89C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A8A0                            
0001A8A0                            loc_1A172:
0001A8A0 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A8A6 6C00                       		bge.s	locret_1A190
0001A8A8 323C 001B                  		move.w	#$1B,d1
0001A8AC 343C 0070                  		move.w	#$70,d2
0001A8B0 363C 0071                  		move.w	#$71,d3
0001A8B4 3828 0008                  		move.w	8(a0),d4
0001A8B8 4EF9 0000 FFCE             		jmp	SolidObject
0001A8BE                            ; ===========================================================================
0001A8BE                            
0001A8BE                            locret_1A190:
0001A8BE 4E75                       		rts	
0001A8C0                            ; ===========================================================================
0001A8C0                            
0001A8C0                            loc_1A192:				; XREF: off_19E80
0001A8C0 217C 0001 845A 0004        		move.l	#Map_Eggman,4(a0)
0001A8C8 317C 0400 0002             		move.w	#$400,2(a0)
0001A8CE 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8D4 08E8 0000 0022             		bset	#0,$22(a0)
0001A8DA 4EB9 0000 DBD8             		jsr	SpeedToPos
0001A8E0 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A8E6 6400                       		bcc.s	loc_1A1D0
0001A8E8 317C 0180 0010             		move.w	#$180,$10(a0)
0001A8EE 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A8F4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A8FA 5428 0034                  		addq.b	#2,$34(a0)
0001A8FE                            
0001A8FE                            loc_1A1D0:
0001A8FE 6000 FF8A                  		bra.w	loc_1A15C
0001A902                            ; ===========================================================================
0001A902                            
0001A902                            loc_1A1D4:				; XREF: off_19E80
0001A902 08E8 0000 0022             		bset	#0,$22(a0)
0001A908 4EB9 0000 DBD8             		jsr	SpeedToPos
0001A90E 4A68 0030                  		tst.w	$30(a0)
0001A912 6600                       		bne.s	loc_1A1FC
0001A914 4A28 0020                  		tst.b	$20(a0)
0001A918 6600                       		bne.s	loc_1A216
0001A91A 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A920 303C 00AC                  		move.w	#$AC,d0
0001A924 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A92A                            
0001A92A                            loc_1A1FC:
0001A92A 5368 0030                  		subq.w	#1,$30(a0)
0001A92E 6600                       		bne.s	loc_1A216
0001A930 4A28 0022                  		tst.b	$22(a0)
0001A934 6A00                       		bpl.s	loc_1A210
0001A936 317C 0060 0012             		move.w	#$60,$12(a0)
0001A93C 6000                       		bra.s	loc_1A216
0001A93E                            ; ===========================================================================
0001A93E                            
0001A93E                            loc_1A210:
0001A93E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A944                            
0001A944                            loc_1A216:
0001A944 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A94A 6D00                       		blt.s	loc_1A23A
0001A94C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A952 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A958 4278 D014                  		clr.w	($FFFFD014).w
0001A95C 4A68 0012                  		tst.w	$12(a0)
0001A960 6A00                       		bpl.s	loc_1A248
0001A962 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A968                            
0001A968                            loc_1A23A:
0001A968 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A96E 6D00                       		blt.s	loc_1A248
0001A970 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A976                            
0001A976                            loc_1A248:
0001A976 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A97C 6500                       		bcs.s	loc_1A260
0001A97E 4A28 0001                  		tst.b	1(a0)
0001A982 6B00                       		bmi.s	loc_1A260
0001A984 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A98A 6000 FAF4                  		bra.w	Obj85_Delete
0001A98E                            ; ===========================================================================
0001A98E                            
0001A98E                            loc_1A260:
0001A98E 6000 FEFA                  		bra.w	loc_1A15C
0001A992                            ; ===========================================================================
0001A992                            
0001A992                            loc_1A264:				; XREF: Obj85_Index
0001A992 2268 0034                  		movea.l	$34(a0),a1
0001A996 1011                       		move.b	(a1),d0
0001A998 B010                       		cmp.b	(a0),d0
0001A99A 6600 FAE4                  		bne.w	Obj85_Delete
0001A99E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A9A4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A9AA 6C00                       		bge.s	loc_1A280
0001A9AC 6000                       		bra.s	loc_1A2A6
0001A9AE                            ; ===========================================================================
0001A9AE                            
0001A9AE                            loc_1A280:
0001A9AE 4A69 0010                  		tst.w	$10(a1)
0001A9B2 6700                       		beq.s	loc_1A28C
0001A9B4 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A9BA                            
0001A9BA                            loc_1A28C:
0001A9BA 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A9BE 4EB9 0000 ACC8             		jsr	AnimateSprite
0001A9C4                            
0001A9C4                            loc_1A296:
0001A9C4 2268 0034                  		movea.l	$34(a0),a1
0001A9C8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A9CE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A9D4                            
0001A9D4                            loc_1A2A6:
0001A9D4 2268 0034                  		movea.l	$34(a0),a1
0001A9D8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A9DE 7003                       		moveq	#3,d0
0001A9E0 C028 0022                  		and.b	$22(a0),d0
0001A9E4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A9EA 8128 0001                  		or.b	d0,1(a0)
0001A9EE 4EF9 0000 DBFE             		jmp	DisplaySprite
0001A9F4                            ; ===========================================================================
0001A9F4                            
0001A9F4                            loc_1A2C6:				; XREF: Obj85_Index
0001A9F4 2268 0034                  		movea.l	$34(a0),a1
0001A9F8 1011                       		move.b	(a1),d0
0001A9FA B010                       		cmp.b	(a0),d0
0001A9FC 6600 FA82                  		bne.w	Obj85_Delete
0001AA00 0CA9 0001 845A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AA08 6700                       		beq.s	loc_1A2E4
0001AA0A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AA10 60C2                       		bra.s	loc_1A2A6
0001AA12                            ; ===========================================================================
0001AA12                            
0001AA12                            loc_1A2E4:
0001AA12 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA18 4A29 0021                  		tst.b	$21(a1)
0001AA1C 6F00                       		ble.s	loc_1A312
0001AA1E 117C 0006 001C             		move.b	#6,$1C(a0)
0001AA24 217C 0001 845A 0004        		move.l	#Map_Eggman,4(a0)
0001AA2C 317C 0400 0002             		move.w	#$400,2(a0)
0001AA32 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001AA36 4EB9 0000 ACC8             		jsr	AnimateSprite
0001AA3C 6000 FF86                  		bra.w	loc_1A296
0001AA40                            ; ===========================================================================
0001AA40                            
0001AA40                            loc_1A312:
0001AA40 4A28 0001                  		tst.b	1(a0)
0001AA44 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AA48 6100 D53C                  		bsr.w	BossDefeated
0001AA4C 117C 0002 0018             		move.b	#2,$18(a0)
0001AA52 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA58 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AA60 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AA66 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AA6A 4EB9 0000 ACC8             		jsr	AnimateSprite
0001AA70 6000 FF52                  		bra.w	loc_1A296
0001AA74                            ; ===========================================================================
0001AA74                            
0001AA74                            loc_1A346:				; XREF: Obj85_Index
0001AA74 08E8 0000 0022             		bset	#0,$22(a0)
0001AA7A 2268 0034                  		movea.l	$34(a0),a1
0001AA7E 0CA9 0001 845A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AA86 6700                       		beq.s	loc_1A35E
0001AA88 6000 FF4A                  		bra.w	loc_1A2A6
0001AA8C                            ; ===========================================================================
0001AA8C                            
0001AA8C                            loc_1A35E:
0001AA8C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA92 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA98 4A28 001E                  		tst.b	$1E(a0)
0001AA9C 6600                       		bne.s	loc_1A376
0001AA9E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AAA4                            
0001AAA4                            loc_1A376:
0001AAA4 5328 001E                  		subq.b	#1,$1E(a0)
0001AAA8 6E00                       		bgt.s	loc_1A38A
0001AAAA 5228 001A                  		addq.b	#1,$1A(a0)
0001AAAE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AAB4 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AAB8                            
0001AAB8                            loc_1A38A:
0001AAB8 6000 FF0A                  		bra.w	loc_1A296
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            loc_1A38E:				; XREF: Obj85_Index
0001AABC 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AAC2 3038 D008                  		move.w	($FFFFD008).w,d0
0001AAC6 9068 0008                  		sub.w	8(a0),d0
0001AACA 6500                       		bcs.s	loc_1A3A6
0001AACC 4A28 0001                  		tst.b	1(a0)
0001AAD0 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AAD4                            
0001AAD4                            loc_1A3A6:
0001AAD4 4EF9 0000 DBFE             		jmp	DisplaySprite
0001AADA                            ; ===========================================================================
0001AADA                            
0001AADA                            loc_1A3AC:				; XREF: Obj85_Index
0001AADA 117C 0000 001A             		move.b	#0,$1A(a0)
0001AAE0 08E8 0000 0022             		bset	#0,$22(a0)
0001AAE6 2268 0034                  		movea.l	$34(a0),a1
0001AAEA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AAF0 6600                       		bne.s	loc_1A3D0
0001AAF2 0CA9 0001 845A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AAFA 6700 F984                  		beq.w	Obj85_Delete
0001AAFE                            
0001AAFE                            loc_1A3D0:
0001AAFE 6000 FED4                  		bra.w	loc_1A2A6
0001AB02                            ; ===========================================================================
0001AB02                            Ani_obj85:
0001AB02                            	include "_anim\obj85.asm"
0001AB02                            ; ---------------------------------------------------------------------------
0001AB02                            ; Animation script - Eggman (FZ)
0001AB02                            ; ---------------------------------------------------------------------------
0001AB02 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AB04 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AB08                            		even
0001AB08                            		even
0001AB08                            
0001AB08                            Map_Eggman2:
0001AB08                            	include "_maps\Eggman2.asm"
0001AB08                            ; ---------------------------------------------------------------------------
0001AB08                            ; Sprite mappings - Eggman (FZ)
0001AB08                            ; ---------------------------------------------------------------------------
0001AB08 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AB0A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AB0C 06                         byte_1A3DE:	dc.b 6
0001AB0D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AB12 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AB17 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AB1C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AB21 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AB26 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AB2B 06                         byte_1A3FD:	dc.b 6
0001AB2C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AB31 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AB36 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AB3B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AB40 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AB45 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AB4A                            		even
0001AB4A                            		even
0001AB4A                            
0001AB4A                            Map_FZBoss:
0001AB4A                            	include "_maps\FZ boss.asm"
0001AB4A                            ; ---------------------------------------------------------------------------
0001AB4A                            ; Sprite mappings - boss (FZ)
0001AB4A                            ; ---------------------------------------------------------------------------
0001AB4A 0000                       		dc.w byte_1A422-Map_FZBoss
0001AB4C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AB4E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AB50 02                         byte_1A422:	dc.b 2
0001AB51 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AB56 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AB5B 03                         byte_1A42D:	dc.b 3
0001AB5C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AB61 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AB66 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AB6B 02                         byte_1A43D:	dc.b 2
0001AB6C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AB71 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AB76                            		even
0001AB76                            		even
0001AB76                            
0001AB76                            ; ===========================================================================
0001AB76                            
0001AB76                            Obj84_Delete:
0001AB76 4EF9 0000 DC3A             		jmp	DeleteObject
0001AB7C                            ; ===========================================================================
0001AB7C                            ; ---------------------------------------------------------------------------
0001AB7C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AB7C                            ; ---------------------------------------------------------------------------
0001AB7C                            
0001AB7C                            Obj84:					; XREF: Obj_Index
0001AB7C 7000                       		moveq	#0,d0
0001AB7E 1028 0024                  		move.b	$24(a0),d0
0001AB82 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AB86 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AB8A                            ; ===========================================================================
0001AB8A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AB8C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AB8E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AB90                            
0001AB90 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AB94 2550 0620                  		dc.w $2550, $620
0001AB98 2490 04C0                  		dc.w $2490, $4C0
0001AB9C 2510 04C0                  		dc.w $2510, $4C0
0001ABA0                            ; ===========================================================================
0001ABA0                            
0001ABA0                            Obj84_Main:				; XREF: Obj84_Index
0001ABA0 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001ABA4 7000                       		moveq	#0,d0
0001ABA6 1028 0028                  		move.b	$28(a0),d0
0001ABAA D040                       		add.w	d0,d0
0001ABAC D2C0                       		adda.w	d0,a1
0001ABAE 117C 0004 0001             		move.b	#4,1(a0)
0001ABB4 08E8 0007 0001             		bset	#7,1(a0)
0001ABBA 08E8 0004 0001             		bset	#4,1(a0)
0001ABC0 317C 0300 0002             		move.w	#$300,2(a0)
0001ABC6 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ABCE 3159 0008                  		move.w	(a1)+,8(a0)
0001ABD2 3151 000C                  		move.w	(a1),$C(a0)
0001ABD6 3159 0038                  		move.w	(a1)+,$38(a0)
0001ABDA 117C 0020 0016             		move.b	#$20,$16(a0)
0001ABE0 117C 0060 0017             		move.b	#$60,$17(a0)
0001ABE6 117C 0020 0019             		move.b	#$20,$19(a0)
0001ABEC 117C 0060 0016             		move.b	#$60,$16(a0)
0001ABF2 117C 0003 0018             		move.b	#3,$18(a0)
0001ABF8 5428 0024                  		addq.b	#2,$24(a0)
0001ABFC                            
0001ABFC                            loc_1A4CE:				; XREF: Obj84_Index
0001ABFC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AC02 6F00                       		ble.s	loc_1A4DC
0001AC04 08E8 0001 0001             		bset	#1,1(a0)
0001AC0A                            
0001AC0A                            loc_1A4DC:
0001AC0A 42A8 003C                  		clr.l	$3C(a0)
0001AC0E 4A28 0029                  		tst.b	$29(a0)
0001AC12 6700                       		beq.s	loc_1A4EA
0001AC14 5428 0024                  		addq.b	#2,$24(a0)
0001AC18                            
0001AC18                            loc_1A4EA:
0001AC18 2028 003C                  		move.l	$3C(a0),d0
0001AC1C 2228 0038                  		move.l	$38(a0),d1
0001AC20 D280                       		add.l	d0,d1
0001AC22 4841                       		swap	d1
0001AC24 3141 000C                  		move.w	d1,$C(a0)
0001AC28 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AC2E 6600                       		bne.s	loc_1A524
0001AC30 4A68 0030                  		tst.w	$30(a0)
0001AC34 6A00                       		bpl.s	loc_1A524
0001AC36 70F6                       		moveq	#-$A,d0
0001AC38 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AC3E 6F00                       		ble.s	loc_1A514
0001AC40 700E                       		moveq	#$E,d0
0001AC42                            
0001AC42                            loc_1A514:
0001AC42 D240                       		add.w	d0,d1
0001AC44 2268 0034                  		movea.l	$34(a0),a1
0001AC48 3341 000C                  		move.w	d1,$C(a1)
0001AC4C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC52                            
0001AC52                            loc_1A524:
0001AC52 323C 002B                  		move.w	#$2B,d1
0001AC56 343C 0060                  		move.w	#$60,d2
0001AC5A 363C 0061                  		move.w	#$61,d3
0001AC5E 3828 0008                  		move.w	8(a0),d4
0001AC62 4EB9 0000 FFCE             		jsr	SolidObject
0001AC68 7000                       		moveq	#0,d0
0001AC6A 3228 003C                  		move.w	$3C(a0),d1
0001AC6E 6A00                       		bpl.s	loc_1A550
0001AC70 4441                       		neg.w	d1
0001AC72 5141                       		subq.w	#8,d1
0001AC74 6500                       		bcs.s	loc_1A55C
0001AC76 5200                       		addq.b	#1,d0
0001AC78 E841                       		asr.w	#4,d1
0001AC7A D041                       		add.w	d1,d0
0001AC7C 6000                       		bra.s	loc_1A55C
0001AC7E                            ; ===========================================================================
0001AC7E                            
0001AC7E                            loc_1A550:
0001AC7E 0441 0027                  		subi.w	#$27,d1
0001AC82 6500                       		bcs.s	loc_1A55C
0001AC84 5200                       		addq.b	#1,d0
0001AC86 E841                       		asr.w	#4,d1
0001AC88 D041                       		add.w	d1,d0
0001AC8A                            
0001AC8A                            loc_1A55C:
0001AC8A 1140 001A                  		move.b	d0,$1A(a0)
0001AC8E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC92 9068 0008                  		sub.w	8(a0),d0
0001AC96 6B00                       		bmi.s	loc_1A578
0001AC98 0440 0140                  		subi.w	#$140,d0
0001AC9C 6B00                       		bmi.s	loc_1A578
0001AC9E 4A28 0001                  		tst.b	1(a0)
0001ACA2 6A00 FED2                  		bpl.w	Obj84_Delete
0001ACA6                            
0001ACA6                            loc_1A578:
0001ACA6 4EF9 0000 DBFE             		jmp	DisplaySprite
0001ACAC                            ; ===========================================================================
0001ACAC                            
0001ACAC                            loc_1A57E:				; XREF: Obj84_Index
0001ACAC 7000                       		moveq	#0,d0
0001ACAE 1028 0028                  		move.b	$28(a0),d0
0001ACB2 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001ACB6 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001ACBA 6000 FF5C                  		bra.w	loc_1A4EA
0001ACBE                            ; ===========================================================================
0001ACBE 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001ACC0 0000                       		dc.w loc_1A598-off_1A590
0001ACC2 0000                       		dc.w loc_1A604-off_1A590
0001ACC4 0000                       		dc.w loc_1A604-off_1A590
0001ACC6                            ; ===========================================================================
0001ACC6                            
0001ACC6                            loc_1A598:				; XREF: off_1A590
0001ACC6 4A28 0029                  		tst.b	$29(a0)
0001ACCA 6600                       		bne.s	loc_1A5D4
0001ACCC 2268 0034                  		movea.l	$34(a0),a1
0001ACD0 4A29 0021                  		tst.b	$21(a1)
0001ACD4 6600                       		bne.s	loc_1A5B4
0001ACD6 6100 D2AE                  		bsr.w	BossDefeated
0001ACDA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ACE2                            
0001ACE2                            loc_1A5B4:
0001ACE2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ACEA 6400                       		bcc.s	locret_1A602
0001ACEC 42A8 003C                  		clr.l	$3C(a0)
0001ACF0 2268 0034                  		movea.l	$34(a0),a1
0001ACF4 5369 0032                  		subq.w	#1,$32(a1)
0001ACF8 4269 0030                  		clr.w	$30(a1)
0001ACFC 5528 0024                  		subq.b	#2,$24(a0)
0001AD00 4E75                       		rts	
0001AD02                            ; ===========================================================================
0001AD02                            
0001AD02                            loc_1A5D4:
0001AD02 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AD08 6C00                       		bge.s	loc_1A5E4
0001AD0A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AD12                            
0001AD12                            loc_1A5E4:
0001AD12 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AD1A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AD20 6E00                       		bgt.s	locret_1A602
0001AD22 4268 003E                  		clr.w	$3E(a0)
0001AD26 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AD2C 4228 0029                  		clr.b	$29(a0)
0001AD30                            
0001AD30                            locret_1A602:
0001AD30 4E75                       		rts	
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            loc_1A604:				; XREF: off_1A590
0001AD32 08E8 0001 0001             		bset	#1,1(a0)
0001AD38 4A28 0029                  		tst.b	$29(a0)
0001AD3C 6600                       		bne.s	loc_1A646
0001AD3E 2268 0034                  		movea.l	$34(a0),a1
0001AD42 4A29 0021                  		tst.b	$21(a1)
0001AD46 6600                       		bne.s	loc_1A626
0001AD48 6100 D23C                  		bsr.w	BossDefeated
0001AD4C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AD54                            
0001AD54                            loc_1A626:
0001AD54 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AD5C 6400                       		bcc.s	locret_1A674
0001AD5E 42A8 003C                  		clr.l	$3C(a0)
0001AD62 2268 0034                  		movea.l	$34(a0),a1
0001AD66 5369 0032                  		subq.w	#1,$32(a1)
0001AD6A 4269 0030                  		clr.w	$30(a1)
0001AD6E 5528 0024                  		subq.b	#2,$24(a0)
0001AD72 4E75                       		rts	
0001AD74                            ; ===========================================================================
0001AD74                            
0001AD74                            loc_1A646:
0001AD74 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AD7A 6D00                       		blt.s	loc_1A656
0001AD7C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AD84                            
0001AD84                            loc_1A656:
0001AD84 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AD8C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AD92 6D00                       		blt.s	locret_1A674
0001AD94 4268 003E                  		clr.w	$3E(a0)
0001AD98 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AD9E 4228 0029                  		clr.b	$29(a0)
0001ADA2                            
0001ADA2                            locret_1A674:
0001ADA2 4E75                       		rts	
0001ADA4                            ; ===========================================================================
0001ADA4                            ; ---------------------------------------------------------------------------
0001ADA4                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001ADA4                            ; ---------------------------------------------------------------------------
0001ADA4                            Map_obj84:
0001ADA4                            	include "_maps\obj84.asm"
0001ADA4                            ; ---------------------------------------------------------------------------
0001ADA4                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001ADA4                            ; ---------------------------------------------------------------------------
0001ADA4 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001ADA8 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001ADAC 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001ADB0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001ADB4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001ADB8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001ADBC 06                         byte_1A68E:	dc.b 6
0001ADBD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADC2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADC7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADCC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADD1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADD6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADDB 08                         byte_1A6AD:	dc.b 8
0001ADDC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADE1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADE6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADEB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADF0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADF5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADFA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADFF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE04 0A                         byte_1A6D6:	dc.b $A
0001AE05 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE0A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE0F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE14 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE19 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE1E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE23 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE28 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE2D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE32 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE37 0C                         byte_1A709:	dc.b $C
0001AE38 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE3D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE42 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE47 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE4C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE51 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE56 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE5B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE60 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE65 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE6A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AE6F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AE74 0D                         byte_1A746:	dc.b $D
0001AE75 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE7A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE7F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE84 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE89 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE8E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE93 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE98 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE9D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEA2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AEA7 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AEAC 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AEB1 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AEB6 0E                         byte_1A788:	dc.b $E
0001AEB7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEBC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEC1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEC6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AECB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AED0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AED5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEDA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEDF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEE4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AEE9 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AEEE 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AEF3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AEF8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AEFD 02                         byte_1A7CF:	dc.b 2
0001AEFE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AF03 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AF08                            		even
0001AF08                            		even
0001AF08                            
0001AF08                            ; ===========================================================================
0001AF08                            ; ---------------------------------------------------------------------------
0001AF08                            ; Object 86 - energy balls (FZ)
0001AF08                            ; ---------------------------------------------------------------------------
0001AF08                            
0001AF08                            Obj86:					; XREF: Obj_Index
0001AF08 7000                       		moveq	#0,d0
0001AF0A 1028 0024                  		move.b	$24(a0),d0
0001AF0E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AF12 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AF16                            ; ===========================================================================
0001AF16 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AF18 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AF1A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AF1C 0000                       		dc.w loc_1A962-Obj86_Index
0001AF1E 0000                       		dc.w loc_1A982-Obj86_Index
0001AF20                            ; ===========================================================================
0001AF20                            
0001AF20                            Obj86_Main:				; XREF: Obj86_Index
0001AF20 317C 2588 0008             		move.w	#$2588,8(a0)
0001AF26 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AF2C 317C 0300 0002             		move.w	#$300,2(a0)
0001AF32 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AF3A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF40 117C 0003 0018             		move.b	#3,$18(a0)
0001AF46 117C 0008 0017             		move.b	#8,$17(a0)
0001AF4C 117C 0008 0016             		move.b	#8,$16(a0)
0001AF52 117C 0004 0001             		move.b	#4,1(a0)
0001AF58 08E8 0007 0001             		bset	#7,1(a0)
0001AF5E 5428 0024                  		addq.b	#2,$24(a0)
0001AF62                            
0001AF62                            Obj86_Generator:			; XREF: Obj86_Index
0001AF62 2268 0034                  		movea.l	$34(a0),a1
0001AF66 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AF6C 6600                       		bne.s	loc_1A850
0001AF6E 10BC 003F                  		move.b	#$3F,(a0)
0001AF72 117C 0000 0024             		move.b	#0,$24(a0)
0001AF78 4EF9 0000 DBFE             		jmp	DisplaySprite
0001AF7E                            ; ===========================================================================
0001AF7E                            
0001AF7E                            loc_1A850:
0001AF7E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF84 4A28 0029                  		tst.b	$29(a0)
0001AF88 6700                       		beq.s	loc_1A86C
0001AF8A 5428 0024                  		addq.b	#2,$24(a0)
0001AF8E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AF94 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AF9A                            
0001AF9A                            loc_1A86C:
0001AF9A 323C 0013                  		move.w	#$13,d1
0001AF9E 343C 0008                  		move.w	#8,d2
0001AFA2 363C 0011                  		move.w	#$11,d3
0001AFA6 3828 0008                  		move.w	8(a0),d4
0001AFAA 4EB9 0000 FFCE             		jsr	SolidObject
0001AFB0 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFB4 9068 0008                  		sub.w	8(a0),d0
0001AFB8 6B00                       		bmi.s	loc_1A89A
0001AFBA 0440 0140                  		subi.w	#$140,d0
0001AFBE 6B00                       		bmi.s	loc_1A89A
0001AFC0 4A28 0001                  		tst.b	1(a0)
0001AFC4 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AFC8                            
0001AFC8                            loc_1A89A:
0001AFC8 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AFCC 4EB9 0000 ACC8             		jsr	AnimateSprite
0001AFD2 4EF9 0000 DBFE             		jmp	DisplaySprite
0001AFD8                            ; ===========================================================================
0001AFD8                            
0001AFD8                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AFD8 4A28 0029                  		tst.b	$29(a0)
0001AFDC 6700 0000                  		beq.w	loc_1A954
0001AFE0 4228 0029                  		clr.b	$29(a0)
0001AFE4 D068 0030                  		add.w	$30(a0),d0
0001AFE8 0240 001E                  		andi.w	#$1E,d0
0001AFEC D4C0                       		adda.w	d0,a2
0001AFEE 5868 0030                  		addq.w	#4,$30(a0)
0001AFF2 4268 0032                  		clr.w	$32(a0)
0001AFF6 7403                       		moveq	#3,d2
0001AFF8                            
0001AFF8                            Obj86_Loop:
0001AFF8 4EB9 0000 E09A             		jsr	SingleObjLoad2
0001AFFE 6600 0000                  		bne.w	loc_1A954
0001B002 12BC 0086                  		move.b	#$86,(a1)
0001B006 3368 0008 0008             		move.w	8(a0),8(a1)
0001B00C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B012 137C 0008 0024             		move.b	#8,$24(a1)
0001B018 337C 2300 0002             		move.w	#$2300,2(a1)
0001B01E 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B026 137C 000C 0016             		move.b	#$C,$16(a1)
0001B02C 137C 000C 0017             		move.b	#$C,$17(a1)
0001B032 137C 0000 0020             		move.b	#0,$20(a1)
0001B038 137C 0003 0018             		move.b	#3,$18(a1)
0001B03E 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B044 137C 0004 0001             		move.b	#4,1(a1)
0001B04A 08E9 0007 0001             		bset	#7,1(a1)
0001B050 2348 0034                  		move.l	a0,$34(a1)
0001B054 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B05A 3228 0032                  		move.w	$32(a0),d1
0001B05E C3FC FFB1                  		muls.w	#-$4F,d1
0001B062 0641 2578                  		addi.w	#$2578,d1
0001B066 0240 001F                  		andi.w	#$1F,d0
0001B06A 0440 0010                  		subi.w	#$10,d0
0001B06E D041                       		add.w	d1,d0
0001B070 3340 0030                  		move.w	d0,$30(a1)
0001B074 5268 0032                  		addq.w	#1,$32(a0)
0001B078 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B07E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B082                            
0001B082                            loc_1A954:
0001B082 4A68 0032                  		tst.w	$32(a0)
0001B086 6600                       		bne.s	loc_1A95E
0001B088 5428 0024                  		addq.b	#2,$24(a0)
0001B08C                            
0001B08C                            loc_1A95E:
0001B08C 6000 FF0C                  		bra.w	loc_1A86C
0001B090                            ; ===========================================================================
0001B090                            
0001B090                            loc_1A962:				; XREF: Obj86_Index
0001B090 117C 0002 001C             		move.b	#2,$1C(a0)
0001B096 4A68 0038                  		tst.w	$38(a0)
0001B09A 6600                       		bne.s	loc_1A97E
0001B09C 117C 0002 0024             		move.b	#2,$24(a0)
0001B0A2 2268 0034                  		movea.l	$34(a0),a1
0001B0A6 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B0AC                            
0001B0AC                            loc_1A97E:
0001B0AC 6000 FEEC                  		bra.w	loc_1A86C
0001B0B0                            ; ===========================================================================
0001B0B0                            
0001B0B0                            loc_1A982:				; XREF: Obj86_Index
0001B0B0 7000                       		moveq	#0,d0
0001B0B2 1028 0025                  		move.b	$25(a0),d0
0001B0B6 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B0BA 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B0BE 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B0C2 4EB9 0000 ACC8             		jsr	AnimateSprite
0001B0C8 4EF9 0000 DBFE             		jmp	DisplaySprite
0001B0CE                            ; ===========================================================================
0001B0CE 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B0D0 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B0D2 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B0D4                            ; ===========================================================================
0001B0D4                            
0001B0D4                            loc_1A9A6:				; XREF: Obj86_Index2
0001B0D4 3028 0030                  		move.w	$30(a0),d0
0001B0D8 9068 0008                  		sub.w	8(a0),d0
0001B0DC E940                       		asl.w	#4,d0
0001B0DE 3140 0010                  		move.w	d0,$10(a0)
0001B0E2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B0E8 5428 0025                  		addq.b	#2,$25(a0)
0001B0EC 4E75                       		rts	
0001B0EE                            ; ===========================================================================
0001B0EE                            
0001B0EE                            loc_1A9C0:				; XREF: Obj86_Index2
0001B0EE 4A68 0010                  		tst.w	$10(a0)
0001B0F2 6700                       		beq.s	loc_1A9E6
0001B0F4 4EB9 0000 DBD8             		jsr	SpeedToPos
0001B0FA 3028 0008                  		move.w	8(a0),d0
0001B0FE 9068 0030                  		sub.w	$30(a0),d0
0001B102 6400                       		bcc.s	loc_1A9E6
0001B104 4268 0010                  		clr.w	$10(a0)
0001B108 D168 0008                  		add.w	d0,8(a0)
0001B10C 2268 0034                  		movea.l	$34(a0),a1
0001B110 5369 0032                  		subq.w	#1,$32(a1)
0001B114                            
0001B114                            loc_1A9E6:
0001B114 117C 0000 001C             		move.b	#0,$1C(a0)
0001B11A 5368 0028                  		subq.w	#1,$28(a0)
0001B11E 6600                       		bne.s	locret_1AA1C
0001B120 5428 0025                  		addq.b	#2,$25(a0)
0001B124 117C 0001 001C             		move.b	#1,$1C(a0)
0001B12A 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B130 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B136 7000                       		moveq	#0,d0
0001B138 3038 D008                  		move.w	($FFFFD008).w,d0
0001B13C 9068 0008                  		sub.w	8(a0),d0
0001B140 3140 0010                  		move.w	d0,$10(a0)
0001B144 317C 0140 0012             		move.w	#$140,$12(a0)
0001B14A                            
0001B14A                            locret_1AA1C:
0001B14A 4E75                       		rts	
0001B14C                            ; ===========================================================================
0001B14C                            
0001B14C                            loc_1AA1E:				; XREF: Obj86_Index2
0001B14C 4EB9 0000 DBD8             		jsr	SpeedToPos
0001B152 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B158 6400                       		bcc.s	loc_1AA34
0001B15A 5368 0028                  		subq.w	#1,$28(a0)
0001B15E 6700                       		beq.s	loc_1AA34
0001B160 4E75                       		rts	
0001B162                            ; ===========================================================================
0001B162                            
0001B162                            loc_1AA34:
0001B162 2268 0034                  		movea.l	$34(a0),a1
0001B166 5369 0038                  		subq.w	#1,$38(a1)
0001B16A 6000 FA0A                  		bra.w	Obj84_Delete
0001B16E                            ; ===========================================================================
0001B16E                            Ani_obj86:
0001B16E                            	include "_anim\obj86.asm"
0001B16E                            ; ---------------------------------------------------------------------------
0001B16E                            ; Animation script - energy ball launcher (FZ)
0001B16E                            ; ---------------------------------------------------------------------------
0001B16E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B170 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B172 0000                       		dc.w byte_1AA50-Ani_obj86
0001B174 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B178 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B17E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B184                            		even
0001B184                            		even
0001B184                            
0001B184                            ; ---------------------------------------------------------------------------
0001B184                            ; Sprite mappings - energy ball	launcher (FZ)
0001B184                            ; ---------------------------------------------------------------------------
0001B184                            Map_obj86:
0001B184                            	include "_maps\obj86.asm"
0001B184                            ; ---------------------------------------------------------------------------
0001B184                            ; Sprite mappings - energy ball	launcher (FZ)
0001B184                            ; ---------------------------------------------------------------------------
0001B184 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B188 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B18C 01                         byte_1AA5E:	dc.b 1
0001B18D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B192 01                         byte_1AA64:	dc.b 1
0001B193 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B198 01                         byte_1AA6A:	dc.b 1
0001B199 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B19E 01                         byte_1AA70:	dc.b 1
0001B19F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B1A4                            		even
0001B1A4                            		even
0001B1A4                            
0001B1A4                            Ani_obj86a:
0001B1A4                            	include "_anim\obj86a.asm"
0001B1A4                            ; ---------------------------------------------------------------------------
0001B1A4                            ; Animation script - energy balls (FZ)
0001B1A4                            ; ---------------------------------------------------------------------------
0001B1A4 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B1A6 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B1A8 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B1B7 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B1C6 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B1CA 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B1D4                            		even
0001B1D4                            		even
0001B1D4                            
0001B1D4                            ; ---------------------------------------------------------------------------
0001B1D4                            ; Sprite mappings - energy balls (FZ)
0001B1D4                            ; ---------------------------------------------------------------------------
0001B1D4                            Map_obj86a:
0001B1D4                            	include "_maps\obj86a.asm"
0001B1D4                            ; ---------------------------------------------------------------------------
0001B1D4                            ; Sprite mappings - energy balls (FZ)
0001B1D4                            ; ---------------------------------------------------------------------------
0001B1D4 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B1D8 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B1DC 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B1E0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B1E4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B1E8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B1EA 02                         byte_1AABC:	dc.b 2
0001B1EB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B1F0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B1F5 02                         byte_1AAC7:	dc.b 2
0001B1F6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B1FB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B200 02                         byte_1AAD2:	dc.b 2
0001B201 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B206 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B20B 02                         byte_1AADD:	dc.b 2
0001B20C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B211 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B216 02                         byte_1AAE8:	dc.b 2
0001B217 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B21C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B221 02                         byte_1AAF3:	dc.b 2
0001B222 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B227 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B22C 01                         byte_1AAFE:	dc.b 1
0001B22D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B232 01                         byte_1AB04:	dc.b 1
0001B233 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B238 02                         byte_1AB0A:	dc.b 2
0001B239 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B23E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B243 02                         byte_1AB15:	dc.b 2
0001B244 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B249 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B24E 00                         byte_1AB20:	dc.b 0
0001B250 00                         		even
0001B250 00                         		even
0001B250                            
0001B250                            ; ===========================================================================
0001B250                            ; ---------------------------------------------------------------------------
0001B250                            ; Object 3E - prison capsule
0001B250                            ; ---------------------------------------------------------------------------
0001B250                            
0001B250                            Obj3E:					; XREF: Obj_Index
0001B250 7000                       		moveq	#0,d0
0001B252 1028 0024                  		move.b	$24(a0),d0
0001B256 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B25A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B25E 3028 0008                  		move.w	8(a0),d0
0001B262 0240 FF80                  		andi.w	#$FF80,d0
0001B266 3238 F700                  		move.w	($FFFFF700).w,d1
0001B26A 0441 0080                  		subi.w	#$80,d1
0001B26E 0241 FF80                  		andi.w	#$FF80,d1
0001B272 9041                       		sub.w	d1,d0
0001B274 0C40 0280                  		cmpi.w	#$280,d0
0001B278 6200                       		bhi.s	Obj3E_Delete
0001B27A 4EF9 0000 DBFE             		jmp	DisplaySprite
0001B280                            ; ===========================================================================
0001B280                            
0001B280                            Obj3E_Delete:
0001B280 4EF9 0000 DC3A             		jmp	DeleteObject
0001B286                            ; ===========================================================================
0001B286 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B288 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B28A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B28C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B28E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B290 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B292 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B294 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B296                            
0001B296 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B29A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B29E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B2A2 0810 0305                  		dc.b 8,	$10, 3,	5
0001B2A6                            ; ===========================================================================
0001B2A6                            
0001B2A6                            Obj3E_Main:				; XREF: Obj3E_Index
0001B2A6 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B2AE 317C 049D 0002             		move.w	#$49D,2(a0)
0001B2B4 117C 0004 0001             		move.b	#4,1(a0)
0001B2BA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B2C0 7000                       		moveq	#0,d0
0001B2C2 1028 0028                  		move.b	$28(a0),d0
0001B2C6 E548                       		lsl.w	#2,d0
0001B2C8 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B2CC 1159 0024                  		move.b	(a1)+,$24(a0)
0001B2D0 1159 0019                  		move.b	(a1)+,$19(a0)
0001B2D4 1159 0018                  		move.b	(a1)+,$18(a0)
0001B2D8 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B2DC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B2E0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B2E2 117C 0006 0020             		move.b	#6,$20(a0)
0001B2E8 117C 0008 0021             		move.b	#8,$21(a0)
0001B2EE                            
0001B2EE                            Obj3E_Not02:
0001B2EE 4E75                       		rts	
0001B2F0                            ; ===========================================================================
0001B2F0                            
0001B2F0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B2F0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B2F6 6700                       		beq.s	Obj3E_ChkOpened
0001B2F8 323C 002B                  		move.w	#$2B,d1
0001B2FC 343C 0018                  		move.w	#$18,d2
0001B300 363C 0018                  		move.w	#$18,d3
0001B304 3828 0008                  		move.w	8(a0),d4
0001B308 4EF9 0000 FFCE             		jmp	SolidObject
0001B30E                            ; ===========================================================================
0001B30E                            
0001B30E                            Obj3E_ChkOpened:
0001B30E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B312 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B314 4228 0025                  		clr.b	$25(a0)
0001B318 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B31E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B324                            
0001B324                            Obj3E_DoOpen:
0001B324 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B32A 4E75                       		rts	
0001B32C                            ; ===========================================================================
0001B32C                            
0001B32C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B32C 323C 0017                  		move.w	#$17,d1
0001B330 343C 0008                  		move.w	#8,d2
0001B334 363C 0008                  		move.w	#8,d3
0001B338 3828 0008                  		move.w	8(a0),d4
0001B33C 4EB9 0000 FFCE             		jsr	SolidObject
0001B342 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B348 4EB9 0000 ACC8             		jsr	AnimateSprite
0001B34E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B354 4A28 0025                  		tst.b	$25(a0)
0001B358 6700                       		beq.s	locret_1AC60
0001B35A 5068 000C                  		addq.w	#8,$C(a0)
0001B35E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B364 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B36A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B36E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B372 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B378 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B37E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B380 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B386 6000                       		bra.s	Obj3E_ContinueCode
0001B388                            
0001B388                            Obj3E_MoveLeft:
0001B388 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B38E                            
0001B38E                            Obj3E_ContinueCode:
0001B38E 4228 0025                  		clr.b	$25(a0)
0001B392 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B398 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B39E                            
0001B39E                            locret_1AC60:
0001B39E 4E75                       		rts	
0001B3A0                            ; ===========================================================================
0001B3A0                            
0001B3A0                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B3A0 7007                       		moveq	#7,d0
0001B3A2 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B3A6 6600                       		bne.s	loc_1ACA0
0001B3A8 4EB9 0000 E084             		jsr	SingleObjLoad
0001B3AE 6600                       		bne.s	loc_1ACA0
0001B3B0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B3B4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B3C0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B3C6 7200                       		moveq	#0,d1
0001B3C8 1200                       		move.b	d0,d1
0001B3CA E409                       		lsr.b	#2,d1
0001B3CC 0441 0020                  		subi.w	#$20,d1
0001B3D0 D369 0008                  		add.w	d1,8(a1)
0001B3D4 E048                       		lsr.w	#8,d0
0001B3D6 E608                       		lsr.b	#3,d0
0001B3D8 D169 000C                  		add.w	d0,$C(a1)
0001B3DC                            
0001B3DC                            loc_1ACA0:
0001B3DC 5368 001E                  		subq.w	#1,$1E(a0)
0001B3E0 6700                       		beq.s	Obj3E_MakeAnimal
0001B3E2 4E75                       		rts	
0001B3E4                            ; ===========================================================================
0001B3E4                            
0001B3E4                            Obj3E_MakeAnimal:
0001B3E4 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B3EA 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B3F0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B3F6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B3FC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B402 7C07                       		moveq	#7,d6
0001B404 3A3C 009A                  		move.w	#$9A,d5
0001B408 78E4                       		moveq	#-$1C,d4
0001B40A                            
0001B40A                            Obj3E_Loop:
0001B40A 4EB9 0000 E084             		jsr	SingleObjLoad
0001B410 6600                       		bne.s	locret_1ACF8
0001B412 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B416 3368 0008 0008             		move.w	8(a0),8(a1)
0001B41C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B422 D969 0008                  		add.w	d4,8(a1)
0001B426 5E44                       		addq.w	#7,d4
0001B428 3345 0036                  		move.w	d5,$36(a1)
0001B42C 5145                       		subq.w	#8,d5
0001B42E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B432                            
0001B432                            locret_1ACF8:
0001B432 4E75                       		rts	
0001B434                            ; ===========================================================================
0001B434                            
0001B434                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B434 7007                       		moveq	#7,d0
0001B436 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B43A 6600                       		bne.s	loc_1AD38
0001B43C 4EB9 0000 E084             		jsr	SingleObjLoad
0001B442 6600                       		bne.s	loc_1AD38
0001B444 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B448 3368 0008 0008             		move.w	8(a0),8(a1)
0001B44E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B454 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B45A 0240 001F                  		andi.w	#$1F,d0
0001B45E 5D40                       		subq.w	#6,d0
0001B460 4A41                       		tst.w	d1
0001B462 6A00                       		bpl.s	loc_1AD2E
0001B464 4440                       		neg.w	d0
0001B466                            
0001B466                            loc_1AD2E:
0001B466 D169 0008                  		add.w	d0,8(a1)
0001B46A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B470                            
0001B470                            loc_1AD38:
0001B470 5368 001E                  		subq.w	#1,$1E(a0)
0001B474 6600                       		bne.s	locret_1AD48
0001B476 5428 0024                  		addq.b	#2,$24(a0)
0001B47A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B480                            
0001B480                            locret_1AD48:
0001B480 4E75                       		rts	
0001B482                            ; ===========================================================================
0001B482                            
0001B482                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B482 703E                       		moveq	#$3E,d0
0001B484 7228                       		moveq	#$28,d1
0001B486 7440                       		moveq	#$40,d2
0001B488 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B48C                            
0001B48C                            Obj3E_FindObj28:
0001B48C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B48E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B490 D2C2                       		adda.w	d2,a1		; next object RAM
0001B492 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B496                            
0001B496 4EB9 0000 F28A             		jsr	GotThroughAct
0001B49C 4EF9 0000 DC3A             		jmp	DeleteObject
0001B4A2                            ; ===========================================================================
0001B4A2                            
0001B4A2                            Obj3E_Obj28Found:
0001B4A2 4E75                       		rts	
0001B4A4                            ; ===========================================================================
0001B4A4                            Ani_obj3E:
0001B4A4                            	include "_anim\obj3E.asm"
0001B4A4                            ; ---------------------------------------------------------------------------
0001B4A4                            ; Animation script - prison capsule
0001B4A4                            ; ---------------------------------------------------------------------------
0001B4A4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B4A6 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B4A8 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B4AC                            		even
0001B4AC                            		even
0001B4AC                            
0001B4AC                            ; ---------------------------------------------------------------------------
0001B4AC                            ; Sprite mappings - prison capsule
0001B4AC                            ; ---------------------------------------------------------------------------
0001B4AC                            Map_obj3E:
0001B4AC                            	include "_maps\obj3E.asm"
0001B4AC                            ; ---------------------------------------------------------------------------
0001B4AC                            ; Sprite mappings - prison capsule
0001B4AC                            ; ---------------------------------------------------------------------------
0001B4AC 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B4B0 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B4B4 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B4B8 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B4BA 07                         byte_1AD82:	dc.b 7
0001B4BB E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B4C0 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B4C5 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B4CA F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B4CF F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B4D4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B4D9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B4DE 01                         byte_1ADA6:	dc.b 1
0001B4DF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B4E4 06                         byte_1ADAC:	dc.b 6
0001B4E5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B4EA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B4EF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B4F4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B4F9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B4FE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B503 01                         byte_1ADCB:	dc.b 1
0001B504 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B509 02                         byte_1ADD1:	dc.b 2
0001B50A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B50F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B514 01                         byte_1ADDC:	dc.b 1
0001B515 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B51A 00                         byte_1ADE2:	dc.b 0
0001B51C 00                         		even
0001B51C 00                         		even
0001B51C                            
0001B51C                            ; ---------------------------------------------------------------------------
0001B51C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B51C                            ; ---------------------------------------------------------------------------
0001B51C                            
0001B51C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B51C                            
0001B51C                            
0001B51C                            TouchResponse:				; XREF: Obj01
0001B51C 4E71                       		nop	
0001B51E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B522 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B526 5142                       		subq.w	#8,d2
0001B528 7A00                       		moveq	#0,d5
0001B52A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B52E 5705                       		subq.b	#3,d5
0001B530 9645                       		sub.w	d5,d3
0001B532 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B538 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B53A 0643 000C                  		addi.w	#$C,d3
0001B53E 7A0A                       		moveq	#$A,d5
0001B540                            
0001B540                            Touch_NoDuck:
0001B540 383C 0010                  		move.w	#$10,d4
0001B544 DA45                       		add.w	d5,d5
0001B546 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B54A 3C3C 005F                  		move.w	#$5F,d6
0001B54E                            
0001B54E                            Touch_Loop:
0001B54E 4A29 0001                  		tst.b	1(a1)
0001B552 6A00                       		bpl.s	Touch_NextObj
0001B554 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B558 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B55A                            
0001B55A                            Touch_NextObj:
0001B55A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B55E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B562                            
0001B562 7000                       		moveq	#0,d0
0001B564 4E75                       		rts	
0001B566                            ; ===========================================================================
0001B566 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B568 0C14                       		dc.b   $C, $14
0001B56A 140C                       		dc.b  $14,  $C
0001B56C 0410                       		dc.b	4, $10
0001B56E 0C12                       		dc.b   $C, $12
0001B570 1010                       		dc.b  $10, $10
0001B572 0606                       		dc.b	6,   6
0001B574 180C                       		dc.b  $18,  $C
0001B576 0C10                       		dc.b   $C, $10
0001B578 100C                       		dc.b  $10,  $C
0001B57A 0808                       		dc.b	8,   8
0001B57C 1410                       		dc.b  $14, $10
0001B57E 1408                       		dc.b  $14,   8
0001B580 0E0E                       		dc.b   $E,  $E
0001B582 1818                       		dc.b  $18, $18
0001B584 2810                       		dc.b  $28, $10
0001B586 1018                       		dc.b  $10, $18
0001B588 0810                       		dc.b	8, $10
0001B58A 2070                       		dc.b  $20, $70
0001B58C 4020                       		dc.b  $40, $20
0001B58E 8020                       		dc.b  $80, $20
0001B590 2020                       		dc.b  $20, $20
0001B592 0808                       		dc.b	8,   8
0001B594 0404                       		dc.b	4,   4
0001B596 2008                       		dc.b  $20,   8
0001B598 0C0C                       		dc.b   $C,  $C
0001B59A 0804                       		dc.b	8,   4
0001B59C 1804                       		dc.b  $18,   4
0001B59E 2804                       		dc.b  $28,   4
0001B5A0 0408                       		dc.b	4,   8
0001B5A2 0418                       		dc.b	4, $18
0001B5A4 0428                       		dc.b	4, $28
0001B5A6 0420                       		dc.b	4, $20
0001B5A8 1818                       		dc.b  $18, $18
0001B5AA 0C18                       		dc.b   $C, $18
0001B5AC 4808                       		dc.b  $48,   8
0001B5AE                            ; ===========================================================================
0001B5AE                            
0001B5AE                            Touch_Height:				; XREF: TouchResponse
0001B5AE 0240 003F                  		andi.w	#$3F,d0
0001B5B2 D040                       		add.w	d0,d0
0001B5B4 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B5B8 7200                       		moveq	#0,d1
0001B5BA 121A                       		move.b	(a2)+,d1
0001B5BC 3029 0008                  		move.w	8(a1),d0
0001B5C0 9041                       		sub.w	d1,d0
0001B5C2 9042                       		sub.w	d2,d0
0001B5C4 6400                       		bcc.s	loc_1AE98
0001B5C6 D241                       		add.w	d1,d1
0001B5C8 D041                       		add.w	d1,d0
0001B5CA 6500                       		bcs.s	Touch_Width
0001B5CC 6000 FF8C                  		bra.w	Touch_NextObj
0001B5D0                            ; ===========================================================================
0001B5D0                            
0001B5D0                            loc_1AE98:
0001B5D0 B044                       		cmp.w	d4,d0
0001B5D2 6200 FF86                  		bhi.w	Touch_NextObj
0001B5D6                            
0001B5D6                            Touch_Width:
0001B5D6 7200                       		moveq	#0,d1
0001B5D8 121A                       		move.b	(a2)+,d1
0001B5DA 3029 000C                  		move.w	$C(a1),d0
0001B5DE 9041                       		sub.w	d1,d0
0001B5E0 9043                       		sub.w	d3,d0
0001B5E2 6400                       		bcc.s	loc_1AEB6
0001B5E4 D241                       		add.w	d1,d1
0001B5E6 D240                       		add.w	d0,d1
0001B5E8 6500                       		bcs.s	Touch_ChkValue
0001B5EA 6000 FF6E                  		bra.w	Touch_NextObj
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_1AEB6:
0001B5EE B045                       		cmp.w	d5,d0
0001B5F0 6200 FF68                  		bhi.w	Touch_NextObj
0001B5F4                            
0001B5F4                            Touch_ChkValue:
0001B5F4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B5F8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B5FC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B600 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B604 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B608 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B60A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B60E                            
0001B60E                            ; touch	response is $40-$7F
0001B60E                            
0001B60E 1029 0020                  		move.b	$20(a1),d0
0001B612 0200 003F                  		andi.b	#$3F,d0
0001B616 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B61A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B61C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B622 6400 0000                  		bcc.w	locret_1AEF2
0001B626 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B62A                            
0001B62A                            locret_1AEF2:
0001B62A 4E75                       		rts	
0001B62C                            ; ===========================================================================
0001B62C                            
0001B62C                            Touch_Monitor:
0001B62C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B630 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B632 3028 000C                  		move.w	$C(a0),d0
0001B636 0440 0010                  		subi.w	#$10,d0
0001B63A B069 000C                  		cmp.w	$C(a1),d0
0001B63E 6500                       		bcs.s	locret_1AF2E
0001B640 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B644 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B64A 4A29 0025                  		tst.b	$25(a1)
0001B64E 6600                       		bne.s	locret_1AF2E
0001B650 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B654 4E75                       		rts	
0001B656                            ; ===========================================================================
0001B656                            
0001B656                            loc_1AF1E:
0001B656 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B65C 6600                       		bne.s	locret_1AF2E
0001B65E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B662 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B666                            
0001B666                            locret_1AF2E:
0001B666 4E75                       		rts	
0001B668                            ; ===========================================================================
0001B668                            
0001B668                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B668 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B66C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B66E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B674 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B678                            
0001B678                            loc_1AF40:
0001B678 4A29 0021                  		tst.b	$21(a1)
0001B67C 6700                       		beq.s	Touch_KillEnemy
0001B67E 4468 0010                  		neg.w	$10(a0)
0001B682 4468 0012                  		neg.w	$12(a0)
0001B686 E0E8 0010                  		asr	$10(a0)
0001B68A E0E8 0012                  		asr	$12(a0)
0001B68E 137C 0000 0020             		move.b	#0,$20(a1)
0001B694 5329 0021                  		subq.b	#1,$21(a1)
0001B698 6600                       		bne.s	locret_1AF68
0001B69A 08E9 0007 0022             		bset	#7,$22(a1)
0001B6A0                            
0001B6A0                            locret_1AF68:
0001B6A0 4E75                       		rts	
0001B6A2                            ; ===========================================================================
0001B6A2                            
0001B6A2                            Touch_KillEnemy:
0001B6A2 08E9 0007 0022             		bset	#7,$22(a1)
0001B6A8 7000                       		moveq	#0,d0
0001B6AA 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B6AE 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B6B2 0C40 0006                  		cmpi.w	#6,d0
0001B6B6 6500                       		bcs.s	loc_1AF82
0001B6B8 7006                       		moveq	#6,d0
0001B6BA                            
0001B6BA                            loc_1AF82:
0001B6BA 3340 003E                  		move.w	d0,$3E(a1)
0001B6BE 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B6C2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B6C8 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B6CA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B6CE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B6D4                            
0001B6D4                            loc_1AF9C:
0001B6D4 6100 0000                  		bsr.w	AddPoints
0001B6D8 7400                       		moveq	#0,d2	; GMZ
0001B6DA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B6DC 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B6DE                            
0001B6DE                            TouchKE_Explode:
0001B6DE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B6E2 137C 0000 0024             		move.b	#0,$24(a1)
0001B6E8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B6EC                            
0001B6EC                            TouchKE_NextExplosion:
0001B6EC 5802                       		addq.b	#4,d2
0001B6EE 4EB9 0000 E084             		jsr	SingleObjLoad
0001B6F4 6600                       		bne.s	TouchKE_NoExplosion
0001B6F6 336A 0008 0008             		move.w	8(a2),8(a1)
0001B6FC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B702 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B706                            
0001B706                            TouchKE_NoExplosion:
0001B706 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B708 4A68 0012                  		tst.w	$12(a0)
0001B70C 6B00                       		bmi.s	loc_1AFC2
0001B70E 3028 000C                  		move.w	$C(a0),d0
0001B712 B069 000C                  		cmp.w	$C(a1),d0
0001B716 6400                       		bcc.s	loc_1AFCA
0001B718 4468 0012                  		neg.w	$12(a0)
0001B71C 4E75                       		rts	
0001B71E                            ; ===========================================================================
0001B71E                            
0001B71E                            loc_1AFC2:
0001B71E 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B724 4E75                       		rts	
0001B726                            ; ===========================================================================
0001B726                            
0001B726                            loc_1AFCA:
0001B726 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B72C 4E75                       		rts	
0001B72E                            ; ===========================================================================
0001B72E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B736                            ; ===========================================================================
0001B736                            
0001B736                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B736 08E9 0007 0022             		bset	#7,$22(a1)
0001B73C                            
0001B73C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B73C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B740 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B742                            
0001B742                            loc_1AFE6:				; XREF: Touch_Hurt
0001B742 70FF                       		moveq	#-1,d0
0001B744 4E75                       		rts	
0001B746                            ; ===========================================================================
0001B746                            
0001B746                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B746 4E71                       		nop	
0001B748 4A68 0030                  		tst.w	$30(a0)
0001B74C 66F4                       		bne.s	loc_1AFE6
0001B74E 2449                       		movea.l	a1,a2
0001B750                            
0001B750                            ; End of function TouchResponse
0001B750                            ; continue straight to HurtSonic
0001B750                            
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            ; Hurting Sonic	subroutine
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            
0001B750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B750                            
0001B750                            
0001B750                            HurtSonic:
0001B750 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B754 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B756 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B75A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B75E 4EB9 0000 E084             		jsr	SingleObjLoad
0001B764 6600                       		bne.s	Hurt_Shield
0001B766 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B76A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B770 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B776                            
0001B776                            Hurt_Shield:
0001B776 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B77C 117C 0004 0024             		move.b	#4,$24(a0)
0001B782 6100 86B8                  		bsr.w	Sonic_ResetOnFloor
0001B786 08E8 0001 0022             		bset	#1,$22(a0)
0001B78C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B792 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B798 0828 0006 0022             		btst	#6,$22(a0)
0001B79E 6700                       		beq.s	Hurt_Reverse
0001B7A0 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B7A6 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B7AC                            
0001B7AC                            Hurt_Reverse:
0001B7AC 3028 0008                  		move.w	8(a0),d0
0001B7B0 B06A 0008                  		cmp.w	8(a2),d0
0001B7B4 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B7B6 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B7BA                            
0001B7BA                            Hurt_ChkSpikes:
0001B7BA 317C 0000 0014             		move.w	#0,$14(a0)
0001B7C0 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B7C6 317C 0078 0030             		move.w	#$78,$30(a0)
0001B7CC 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B7D0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B7D4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B7D6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B7DA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B7DC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B7E0                            
0001B7E0                            Hurt_Sound:
0001B7E0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B7E6 70FF                       		moveq	#-1,d0
0001B7E8 4E75                       		rts	
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            Hurt_NoRings:
0001B7EA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B7EE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B7F2                            ; End of function HurtSonic
0001B7F2                            
0001B7F2                            ; ---------------------------------------------------------------------------
0001B7F2                            ; Subroutine to	kill Sonic
0001B7F2                            ; ---------------------------------------------------------------------------
0001B7F2                            
0001B7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7F2                            
0001B7F2                            
0001B7F2                            KillSonic:
0001B7F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B7F6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B7F8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B7FE 117C 0006 0024             		move.b	#6,$24(a0)
0001B804 6100 8636                  		bsr.w	Sonic_ResetOnFloor
0001B808 08E8 0001 0022             		bset	#1,$22(a0)
0001B80E 317C F900 0012             		move.w	#-$700,$12(a0)
0001B814 317C 0000 0010             		move.w	#0,$10(a0)
0001B81A 317C 0000 0014             		move.w	#0,$14(a0)
0001B820 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B826 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B82C 08E8 0007 0002             		bset	#7,2(a0)
0001B832 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B836 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B83A 6600                       		bne.s	Kill_Sound
0001B83C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B840                            
0001B840                            Kill_Sound:
0001B840 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B846                            
0001B846                            Kill_NoDeath:
0001B846 70FF                       		moveq	#-1,d0
0001B848 4E75                       		rts	
0001B84A                            ; End of function KillSonic
0001B84A                            
0001B84A                            
0001B84A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B84A                            
0001B84A                            
0001B84A                            Touch_Special:				; XREF: Touch_ChkValue
0001B84A 1229 0020                  		move.b	$20(a1),d1
0001B84E 0201 003F                  		andi.b	#$3F,d1
0001B852 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B856 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B858 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B85C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B85E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B862 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B864 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B868 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B86A 4E75                       		rts	
0001B86C                            ; ===========================================================================
0001B86C                            
0001B86C                            Touch_CatKiller:			; XREF: Touch_Special
0001B86C 6000 FEC8                  		bra.w	loc_1AFDA
0001B870                            ; ===========================================================================
0001B870                            
0001B870                            Touch_Yadrin:				; XREF: Touch_Special
0001B870 9A40                       		sub.w	d0,d5
0001B872 0C45 0008                  		cmpi.w	#8,d5
0001B876 6400                       		bcc.s	loc_1B144
0001B878 3029 0008                  		move.w	8(a1),d0
0001B87C 5940                       		subq.w	#4,d0
0001B87E 0829 0000 0022             		btst	#0,$22(a1)
0001B884 6700                       		beq.s	loc_1B130
0001B886 0440 0010                  		subi.w	#$10,d0
0001B88A                            
0001B88A                            loc_1B130:
0001B88A 9042                       		sub.w	d2,d0
0001B88C 6400                       		bcc.s	loc_1B13C
0001B88E 0640 0018                  		addi.w	#$18,d0
0001B892 6500                       		bcs.s	loc_1B140
0001B894 6000                       		bra.s	loc_1B144
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            loc_1B13C:
0001B896 B044                       		cmp.w	d4,d0
0001B898 6200                       		bhi.s	loc_1B144
0001B89A                            
0001B89A                            loc_1B140:
0001B89A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B89E                            ; ===========================================================================
0001B89E                            
0001B89E                            loc_1B144:
0001B89E 6000 FDC8                  		bra.w	Touch_Enemy
0001B8A2                            ; ===========================================================================
0001B8A2                            
0001B8A2                            Touch_D7orE1:				; XREF: Touch_Special
0001B8A2 5229 0021                  		addq.b	#1,$21(a1)
0001B8A6 4E75                       		rts	
0001B8A8                            ; End of function Touch_Special
0001B8A8                            
0001B8A8                            ; ---------------------------------------------------------------------------
0001B8A8                            ; Subroutine to	show the special stage layout
0001B8A8                            ; ---------------------------------------------------------------------------
0001B8A8                            
0001B8A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8A8                            
0001B8A8                            
0001B8A8                            SS_ShowLayout:				; XREF: SpecialStage
0001B8A8 6100 0000                  		bsr.w	SS_AniWallsRings
0001B8AC 6100 0000                  		bsr.w	SS_AniItems
0001B8B0 3F05                       		move.w	d5,-(sp)
0001B8B2 43F8 8000                  		lea	($FFFF8000).w,a1
0001B8B6 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8BA 0200 00FC                  		andi.b	#$FC,d0
0001B8BE 4EB9 0000 2C64             		jsr	(CalcSine).l
0001B8C4 3800                       		move.w	d0,d4
0001B8C6 3A01                       		move.w	d1,d5
0001B8C8 C9FC 0018                  		muls.w	#$18,d4
0001B8CC CBFC 0018                  		muls.w	#$18,d5
0001B8D0 7400                       		moveq	#0,d2
0001B8D2 3438 F700                  		move.w	($FFFFF700).w,d2
0001B8D6 84FC 0018                  		divu.w	#$18,d2
0001B8DA 4842                       		swap	d2
0001B8DC 4442                       		neg.w	d2
0001B8DE 0642 FF4C                  		addi.w	#-$B4,d2
0001B8E2 7600                       		moveq	#0,d3
0001B8E4 3638 F704                  		move.w	($FFFFF704).w,d3
0001B8E8 86FC 0018                  		divu.w	#$18,d3
0001B8EC 4843                       		swap	d3
0001B8EE 4443                       		neg.w	d3
0001B8F0 0643 FF4C                  		addi.w	#-$B4,d3
0001B8F4 3E3C 000F                  		move.w	#$F,d7
0001B8F8                            
0001B8F8                            loc_1B19E:
0001B8F8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B8FC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B900 4440                       		neg.w	d0
0001B902 C3C2                       		muls.w	d2,d1
0001B904 C1C3                       		muls.w	d3,d0
0001B906 2C00                       		move.l	d0,d6
0001B908 DC81                       		add.l	d1,d6
0001B90A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B90E C1C2                       		muls.w	d2,d0
0001B910 C3C3                       		muls.w	d3,d1
0001B912 D280                       		add.l	d0,d1
0001B914 2406                       		move.l	d6,d2
0001B916 3C3C 000F                  		move.w	#$F,d6
0001B91A                            
0001B91A                            loc_1B1C0:
0001B91A 2002                       		move.l	d2,d0
0001B91C E080                       		asr.l	#8,d0
0001B91E 32C0                       		move.w	d0,(a1)+
0001B920 2001                       		move.l	d1,d0
0001B922 E080                       		asr.l	#8,d0
0001B924 32C0                       		move.w	d0,(a1)+
0001B926 D485                       		add.l	d5,d2
0001B928 D284                       		add.l	d4,d1
0001B92A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B92E                            
0001B92E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B932 0643 0018                  		addi.w	#$18,d3
0001B936 51CF FFC0                  		dbf	d7,loc_1B19E
0001B93A                            
0001B93A 3A1F                       		move.w	(sp)+,d5
0001B93C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B942 7000                       		moveq	#0,d0
0001B944 3038 F704                  		move.w	($FFFFF704).w,d0
0001B948 80FC 0018                  		divu.w	#$18,d0
0001B94C C0FC 0080                  		mulu.w	#$80,d0
0001B950 D1C0                       		adda.l	d0,a0
0001B952 7000                       		moveq	#0,d0
0001B954 3038 F700                  		move.w	($FFFFF700).w,d0
0001B958 80FC 0018                  		divu.w	#$18,d0
0001B95C D0C0                       		adda.w	d0,a0
0001B95E 49F8 8000                  		lea	($FFFF8000).w,a4
0001B962 3E3C 000F                  		move.w	#$F,d7
0001B966                            
0001B966                            loc_1B20C:
0001B966 3C3C 000F                  		move.w	#$F,d6
0001B96A                            
0001B96A                            loc_1B210:
0001B96A 7000                       		moveq	#0,d0
0001B96C 1018                       		move.b	(a0)+,d0
0001B96E 6700                       		beq.s	loc_1B268
0001B970 0C00 004E                  		cmpi.b	#$4E,d0
0001B974 6200                       		bhi.s	loc_1B268
0001B976 3614                       		move.w	(a4),d3
0001B978 0643 0120                  		addi.w	#$120,d3
0001B97C 0C43 0070                  		cmpi.w	#$70,d3
0001B980 6500                       		bcs.s	loc_1B268
0001B982 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B986 6400                       		bcc.s	loc_1B268
0001B988 342C 0002                  		move.w	2(a4),d2
0001B98C 0642 00F0                  		addi.w	#$F0,d2
0001B990 0C42 0070                  		cmpi.w	#$70,d2
0001B994 6500                       		bcs.s	loc_1B268
0001B996 0C42 0170                  		cmpi.w	#$170,d2
0001B99A 6400                       		bcc.s	loc_1B268
0001B99C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B9A2 E748                       		lsl.w	#3,d0
0001B9A4 4BF5 0000                  		lea	(a5,d0.w),a5
0001B9A8 225D                       		movea.l	(a5)+,a1
0001B9AA 321D                       		move.w	(a5)+,d1
0001B9AC D241                       		add.w	d1,d1
0001B9AE D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B9B2 365D                       		movea.w	(a5)+,a3
0001B9B4 7200                       		moveq	#0,d1
0001B9B6 1219                       		move.b	(a1)+,d1
0001B9B8 5301                       		subq.b	#1,d1
0001B9BA 6B00                       		bmi.s	loc_1B268
0001B9BC 4EB9 0000 DD5C             		jsr	sub_D762
0001B9C2                            
0001B9C2                            loc_1B268:
0001B9C2 584C                       		addq.w	#4,a4
0001B9C4 51CE FFA4                  		dbf	d6,loc_1B210
0001B9C8                            
0001B9C8 41E8 0070                  		lea	$70(a0),a0
0001B9CC 51CF FF98                  		dbf	d7,loc_1B20C
0001B9D0                            
0001B9D0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B9D4 0C05 0050                  		cmpi.b	#$50,d5
0001B9D8 6700                       		beq.s	loc_1B288
0001B9DA 24BC 0000 0000             		move.l	#0,(a2)
0001B9E0 4E75                       		rts	
0001B9E2                            ; ===========================================================================
0001B9E2                            
0001B9E2                            loc_1B288:
0001B9E2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B9E8 4E75                       		rts	
0001B9EA                            ; End of function SS_ShowLayout
0001B9EA                            
0001B9EA                            ; ---------------------------------------------------------------------------
0001B9EA                            ; Subroutine to	animate	walls and rings	in the special stage
0001B9EA                            ; ---------------------------------------------------------------------------
0001B9EA                            
0001B9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9EA                            
0001B9EA                            
0001B9EA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B9EA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B9F0 7000                       		moveq	#0,d0
0001B9F2 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9F6 E408                       		lsr.b	#2,d0
0001B9F8 0240 000F                  		andi.w	#$F,d0
0001B9FC 7223                       		moveq	#$23,d1
0001B9FE                            
0001B9FE                            loc_1B2A4:
0001B9FE 3280                       		move.w	d0,(a1)
0001BA00 5049                       		addq.w	#8,a1
0001BA02 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BA06                            
0001BA06 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BA0C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BA10 6A00                       		bpl.s	loc_1B2C8
0001BA12 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BA18 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BA1C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BA22                            
0001BA22                            loc_1B2C8:
0001BA22 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BA28 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BA2C 6A00                       		bpl.s	loc_1B2E4
0001BA2E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BA34 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BA38 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BA3E                            
0001BA3E                            loc_1B2E4:
0001BA3E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BA42 1340 0138                  		move.b	d0,$138(a1)
0001BA46 1340 0160                  		move.b	d0,$160(a1)
0001BA4A 1340 0148                  		move.b	d0,$148(a1)
0001BA4E 1340 0150                  		move.b	d0,$150(a1)
0001BA52 1340 01D8                  		move.b	d0,$1D8(a1)
0001BA56 1340 01E0                  		move.b	d0,$1E0(a1)
0001BA5A 1340 01E8                  		move.b	d0,$1E8(a1)
0001BA5E 1340 01F0                  		move.b	d0,$1F0(a1)
0001BA62 1340 01F8                  		move.b	d0,$1F8(a1)
0001BA66 1340 0200                  		move.b	d0,$200(a1)
0001BA6A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BA6E 6A00                       		bpl.s	loc_1B326
0001BA70 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BA76 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BA7A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BA80                            
0001BA80                            loc_1B326:
0001BA80 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BA84 1340 0168                  		move.b	d0,$168(a1)
0001BA88 1340 0170                  		move.b	d0,$170(a1)
0001BA8C 1340 0178                  		move.b	d0,$178(a1)
0001BA90 1340 0180                  		move.b	d0,$180(a1)
0001BA94 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BA98 6A00                       		bpl.s	loc_1B350
0001BA9A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BAA0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BAA4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BAAA                            
0001BAAA                            loc_1B350:
0001BAAA 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BAB0 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BAB6 7000                       		moveq	#0,d0
0001BAB8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BABC D040                       		add.w	d0,d0
0001BABE 41F0 0000                  		lea	(a0,d0.w),a0
0001BAC2 3290                       		move.w	(a0),(a1)
0001BAC4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BACA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BAD0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BAD6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BADC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BAE2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BAE8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BAEE D0FC 0020                  		adda.w	#$20,a0
0001BAF2 D2FC 0048                  		adda.w	#$48,a1
0001BAF6 3290                       		move.w	(a0),(a1)
0001BAF8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BAFE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB04 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB0A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB10 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB16 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB1C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB22 D0FC 0020                  		adda.w	#$20,a0
0001BB26 D2FC 0048                  		adda.w	#$48,a1
0001BB2A 3290                       		move.w	(a0),(a1)
0001BB2C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB32 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB38 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB3E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB44 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB4A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB50 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB56 D0FC 0020                  		adda.w	#$20,a0
0001BB5A D2FC 0048                  		adda.w	#$48,a1
0001BB5E 3290                       		move.w	(a0),(a1)
0001BB60 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB66 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB6C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB72 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB78 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB7E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB84 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB8A D0FC 0020                  		adda.w	#$20,a0
0001BB8E D2FC 0048                  		adda.w	#$48,a1
0001BB92 4E75                       		rts	
0001BB94                            ; End of function SS_AniWallsRings
0001BB94                            
0001BB94                            ; ===========================================================================
0001BB94 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BBA4 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BBB4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BBC4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BBD4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BBE4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BBF4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BC04 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BC14                            ; ---------------------------------------------------------------------------
0001BC14                            ; Subroutine to	remove items when you collect them in the special stage
0001BC14                            ; ---------------------------------------------------------------------------
0001BC14                            
0001BC14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC14                            
0001BC14                            
0001BC14                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BC14 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BC1A 303C 001F                  		move.w	#$1F,d0
0001BC1E                            
0001BC1E                            loc_1B4C4:
0001BC1E 4A12                       		tst.b	(a2)
0001BC20 6700                       		beq.s	locret_1B4CE
0001BC22 504A                       		addq.w	#8,a2
0001BC24 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BC28                            
0001BC28                            locret_1B4CE:
0001BC28 4E75                       		rts	
0001BC2A                            ; End of function SS_RemoveCollectedItem
0001BC2A                            
0001BC2A                            ; ---------------------------------------------------------------------------
0001BC2A                            ; Subroutine to	animate	special	stage items when you touch them
0001BC2A                            ; ---------------------------------------------------------------------------
0001BC2A                            
0001BC2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC2A                            
0001BC2A                            
0001BC2A                            SS_AniItems:				; XREF: SS_ShowLayout
0001BC2A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BC30 3E3C 001F                  		move.w	#$1F,d7
0001BC34                            
0001BC34                            loc_1B4DA:
0001BC34 7000                       		moveq	#0,d0
0001BC36 1010                       		move.b	(a0),d0
0001BC38 6700                       		beq.s	loc_1B4E8
0001BC3A E548                       		lsl.w	#2,d0
0001BC3C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BC40 4E91                       		jsr	(a1)
0001BC42                            
0001BC42                            loc_1B4E8:
0001BC42 5048                       		addq.w	#8,a0
0001BC44                            
0001BC44                            loc_1B4EA:
0001BC44 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BC48                            
0001BC48 4E75                       		rts	
0001BC4A                            ; End of function SS_AniItems
0001BC4A                            
0001BC4A                            ; ===========================================================================
0001BC4A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BC4E 0000 0000                  		dc.l SS_AniBumper
0001BC52 0000 0000                  		dc.l SS_Ani1Up
0001BC56 0000 0000                  		dc.l SS_AniReverse
0001BC5A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BC5E 0000 0000                  		dc.l SS_AniGlassBlock
0001BC62                            ; ===========================================================================
0001BC62                            
0001BC62                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BC62 5328 0002                  		subq.b	#1,2(a0)
0001BC66 6A00                       		bpl.s	locret_1B530
0001BC68 117C 0005 0002             		move.b	#5,2(a0)
0001BC6E 7000                       		moveq	#0,d0
0001BC70 1028 0003                  		move.b	3(a0),d0
0001BC74 5228 0003                  		addq.b	#1,3(a0)
0001BC78 2268 0004                  		movea.l	4(a0),a1
0001BC7C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BC80 1280                       		move.b	d0,(a1)
0001BC82 6600                       		bne.s	locret_1B530
0001BC84 4290                       		clr.l	(a0)
0001BC86 42A8 0004                  		clr.l	4(a0)
0001BC8A                            
0001BC8A                            locret_1B530:
0001BC8A 4E75                       		rts	
0001BC8C                            ; ===========================================================================
0001BC8C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BC92                            ; ===========================================================================
0001BC92                            
0001BC92                            SS_AniBumper:				; XREF: SS_AniIndex
0001BC92 5328 0002                  		subq.b	#1,2(a0)
0001BC96 6A00                       		bpl.s	locret_1B566
0001BC98 117C 0007 0002             		move.b	#7,2(a0)
0001BC9E 7000                       		moveq	#0,d0
0001BCA0 1028 0003                  		move.b	3(a0),d0
0001BCA4 5228 0003                  		addq.b	#1,3(a0)
0001BCA8 2268 0004                  		movea.l	4(a0),a1
0001BCAC 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BCB0 6600                       		bne.s	loc_1B564
0001BCB2 4290                       		clr.l	(a0)
0001BCB4 42A8 0004                  		clr.l	4(a0)
0001BCB8 12BC 0025                  		move.b	#$25,(a1)
0001BCBC 4E75                       		rts	
0001BCBE                            ; ===========================================================================
0001BCBE                            
0001BCBE                            loc_1B564:
0001BCBE 1280                       		move.b	d0,(a1)
0001BCC0                            
0001BCC0                            locret_1B566:
0001BCC0 4E75                       		rts	
0001BCC2                            ; ===========================================================================
0001BCC2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BCC8                            ; ===========================================================================
0001BCC8                            
0001BCC8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BCC8 5328 0002                  		subq.b	#1,2(a0)
0001BCCC 6A00                       		bpl.s	locret_1B596
0001BCCE 117C 0005 0002             		move.b	#5,2(a0)
0001BCD4 7000                       		moveq	#0,d0
0001BCD6 1028 0003                  		move.b	3(a0),d0
0001BCDA 5228 0003                  		addq.b	#1,3(a0)
0001BCDE 2268 0004                  		movea.l	4(a0),a1
0001BCE2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BCE6 1280                       		move.b	d0,(a1)
0001BCE8 6600                       		bne.s	locret_1B596
0001BCEA 4290                       		clr.l	(a0)
0001BCEC 42A8 0004                  		clr.l	4(a0)
0001BCF0                            
0001BCF0                            locret_1B596:
0001BCF0 4E75                       		rts	
0001BCF2                            ; ===========================================================================
0001BCF2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BCF8                            ; ===========================================================================
0001BCF8                            
0001BCF8                            SS_AniReverse:				; XREF: SS_AniIndex
0001BCF8 5328 0002                  		subq.b	#1,2(a0)
0001BCFC 6A00                       		bpl.s	locret_1B5CC
0001BCFE 117C 0007 0002             		move.b	#7,2(a0)
0001BD04 7000                       		moveq	#0,d0
0001BD06 1028 0003                  		move.b	3(a0),d0
0001BD0A 5228 0003                  		addq.b	#1,3(a0)
0001BD0E 2268 0004                  		movea.l	4(a0),a1
0001BD12 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BD16 6600                       		bne.s	loc_1B5CA
0001BD18 4290                       		clr.l	(a0)
0001BD1A 42A8 0004                  		clr.l	4(a0)
0001BD1E 12BC 002B                  		move.b	#$2B,(a1)
0001BD22 4E75                       		rts	
0001BD24                            ; ===========================================================================
0001BD24                            
0001BD24                            loc_1B5CA:
0001BD24 1280                       		move.b	d0,(a1)
0001BD26                            
0001BD26                            locret_1B5CC:
0001BD26 4E75                       		rts	
0001BD28                            ; ===========================================================================
0001BD28 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BD2E                            ; ===========================================================================
0001BD2E                            
0001BD2E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BD2E 5328 0002                  		subq.b	#1,2(a0)
0001BD32 6A00                       		bpl.s	locret_1B60C
0001BD34 117C 0005 0002             		move.b	#5,2(a0)
0001BD3A 7000                       		moveq	#0,d0
0001BD3C 1028 0003                  		move.b	3(a0),d0
0001BD40 5228 0003                  		addq.b	#1,3(a0)
0001BD44 2268 0004                  		movea.l	4(a0),a1
0001BD48 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BD4C 1280                       		move.b	d0,(a1)
0001BD4E 6600                       		bne.s	locret_1B60C
0001BD50 4290                       		clr.l	(a0)
0001BD52 42A8 0004                  		clr.l	4(a0)
0001BD56 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BD5C 303C 00A8                  		move.w	#$A8,d0
0001BD60 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BD66                            
0001BD66                            locret_1B60C:
0001BD66 4E75                       		rts	
0001BD68                            ; ===========================================================================
0001BD68 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BD6E                            ; ===========================================================================
0001BD6E                            
0001BD6E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BD6E 5328 0002                  		subq.b	#1,2(a0)
0001BD72 6A00                       		bpl.s	locret_1B640
0001BD74 117C 0001 0002             		move.b	#1,2(a0)
0001BD7A 7000                       		moveq	#0,d0
0001BD7C 1028 0003                  		move.b	3(a0),d0
0001BD80 5228 0003                  		addq.b	#1,3(a0)
0001BD84 2268 0004                  		movea.l	4(a0),a1
0001BD88 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BD8C 1280                       		move.b	d0,(a1)
0001BD8E 6600                       		bne.s	locret_1B640
0001BD90 12A8 0004                  		move.b	4(a0),(a1)
0001BD94 4290                       		clr.l	(a0)
0001BD96 42A8 0004                  		clr.l	4(a0)
0001BD9A                            
0001BD9A                            locret_1B640:
0001BD9A 4E75                       		rts	
0001BD9C                            ; ===========================================================================
0001BD9C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BDA6                            ; ---------------------------------------------------------------------------
0001BDA6                            ; Special stage	layout pointers
0001BDA6                            ; ---------------------------------------------------------------------------
0001BDA6                            SS_LayoutIndex:
0001BDA6                            	include "_inc\Special stage layout pointers.asm"
0001BDA6                            ; ---------------------------------------------------------------------------
0001BDA6                            ; Special stage	layout pointers
0001BDA6                            ; ---------------------------------------------------------------------------
0001BDA6 0000 0000                  	dc.l SS_1
0001BDAA 0000 0000                  	dc.l SS_2
0001BDAE 0000 0000                  	dc.l SS_3
0001BDB2 0000 0000                  	dc.l SS_4
0001BDB6 0000 0000                  	dc.l SS_5
0001BDBA 0000 0000                  	dc.l SS_6
0001BDBE                            	even
0001BDBE                            	even
0001BDBE                            
0001BDBE                            ; ---------------------------------------------------------------------------
0001BDBE                            ; Special stage	start locations
0001BDBE                            ; ---------------------------------------------------------------------------
0001BDBE                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BDD6                            		even
0001BDD6                            
0001BDD6                            ; ---------------------------------------------------------------------------
0001BDD6                            ; Subroutine to	load special stage layout
0001BDD6                            ; ---------------------------------------------------------------------------
0001BDD6                            
0001BDD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDD6                            
0001BDD6                            
0001BDD6                            SS_Load:				; XREF: SpecialStage
0001BDD6 7000                       		moveq	#0,d0
0001BDD8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BDDC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BDE0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BDE6 6500                       		bcs.s	SS_ChkEmldNum
0001BDE8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BDEE                            
0001BDEE                            SS_ChkEmldNum:
0001BDEE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BDF4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BDF6 7200                       		moveq	#0,d1
0001BDF8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BDFC 5301                       		subq.b	#1,d1
0001BDFE 6500                       		bcs.s	SS_LoadData
0001BE00 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BE04                            
0001BE04                            SS_ChkEmldLoop:	
0001BE04 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BE08 6600                       		bne.s	SS_ChkEmldRepeat
0001BE0A 60CA                       		bra.s	SS_Load
0001BE0C                            ; ===========================================================================
0001BE0C                            
0001BE0C                            SS_ChkEmldRepeat:
0001BE0C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BE10                            
0001BE10                            SS_LoadData:
0001BE10 E548                       		lsl.w	#2,d0
0001BE12 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BE16 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BE1A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BE1E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BE22 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BE28 303C 0000                  		move.w	#0,d0
0001BE2C 4EB9 0000 1942             		jsr	(EniDec).l
0001BE32 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BE38 303C 0FFF                  		move.w	#$FFF,d0
0001BE3C                            
0001BE3C                            SS_ClrRAM3:
0001BE3C 4299                       		clr.l	(a1)+
0001BE3E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BE42                            
0001BE42 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BE48 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BE4E 723F                       		moveq	#$3F,d1
0001BE50                            
0001BE50                            loc_1B6F6:
0001BE50 743F                       		moveq	#$3F,d2
0001BE52                            
0001BE52                            loc_1B6F8:
0001BE52 12D8                       		move.b	(a0)+,(a1)+
0001BE54 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BE58                            
0001BE58 43E9 0040                  		lea	$40(a1),a1
0001BE5C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BE60                            
0001BE60 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BE66 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BE6C 724D                       		moveq	#$4D,d1
0001BE6E                            
0001BE6E                            loc_1B714:
0001BE6E 22D8                       		move.l	(a0)+,(a1)+
0001BE70 32FC 0000                  		move.w	#0,(a1)+
0001BE74 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BE7A 32D8                       		move.w	(a0)+,(a1)+
0001BE7C 51C9 FFF0                  		dbf	d1,loc_1B714
0001BE80                            
0001BE80 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BE86 323C 003F                  		move.w	#$3F,d1
0001BE8A                            
0001BE8A                            loc_1B730:
0001BE8A                            
0001BE8A 4299                       		clr.l	(a1)+
0001BE8C 51C9 FFFC                  		dbf	d1,loc_1B730
0001BE90                            
0001BE90 4E75                       		rts	
0001BE92                            ; End of function SS_Load
0001BE92                            
0001BE92                            ; ===========================================================================
0001BE92                            ; ---------------------------------------------------------------------------
0001BE92                            ; Special stage	mappings and VRAM pointers
0001BE92                            ; ---------------------------------------------------------------------------
0001BE92                            SS_MapIndex:
0001BE92                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BE92                            ; ---------------------------------------------------------------------------
0001BE92                            ; Special stage	mappings and VRAM pointers
0001BE92                            ; ---------------------------------------------------------------------------
0001BE92 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BE96 0142                       	dc.w $142		; VRAM setting
0001BE98 0000 0000                  	dc.l Map_SSWalls
0001BE9C 0142                       	dc.w $142
0001BE9E 0000 0000                  	dc.l Map_SSWalls
0001BEA2 0142                       	dc.w $142
0001BEA4 0000 0000                  	dc.l Map_SSWalls
0001BEA8 0142                       	dc.w $142
0001BEAA 0000 0000                  	dc.l Map_SSWalls
0001BEAE 0142                       	dc.w $142
0001BEB0 0000 0000                  	dc.l Map_SSWalls
0001BEB4 0142                       	dc.w $142
0001BEB6 0000 0000                  	dc.l Map_SSWalls
0001BEBA 0142                       	dc.w $142
0001BEBC 0000 0000                  	dc.l Map_SSWalls
0001BEC0 0142                       	dc.w $142
0001BEC2 0000 0000                  	dc.l Map_SSWalls
0001BEC6 0142                       	dc.w $142
0001BEC8 0000 0000                  	dc.l Map_SSWalls
0001BECC 2142                       	dc.w $2142
0001BECE 0000 0000                  	dc.l Map_SSWalls
0001BED2 2142                       	dc.w $2142
0001BED4 0000 0000                  	dc.l Map_SSWalls
0001BED8 2142                       	dc.w $2142
0001BEDA 0000 0000                  	dc.l Map_SSWalls
0001BEDE 2142                       	dc.w $2142
0001BEE0 0000 0000                  	dc.l Map_SSWalls
0001BEE4 2142                       	dc.w $2142
0001BEE6 0000 0000                  	dc.l Map_SSWalls
0001BEEA 2142                       	dc.w $2142
0001BEEC 0000 0000                  	dc.l Map_SSWalls
0001BEF0 2142                       	dc.w $2142
0001BEF2 0000 0000                  	dc.l Map_SSWalls
0001BEF6 2142                       	dc.w $2142
0001BEF8 0000 0000                  	dc.l Map_SSWalls
0001BEFC 2142                       	dc.w $2142
0001BEFE 0000 0000                  	dc.l Map_SSWalls
0001BF02 4142                       	dc.w $4142
0001BF04 0000 0000                  	dc.l Map_SSWalls
0001BF08 4142                       	dc.w $4142
0001BF0A 0000 0000                  	dc.l Map_SSWalls
0001BF0E 4142                       	dc.w $4142
0001BF10 0000 0000                  	dc.l Map_SSWalls
0001BF14 4142                       	dc.w $4142
0001BF16 0000 0000                  	dc.l Map_SSWalls
0001BF1A 4142                       	dc.w $4142
0001BF1C 0000 0000                  	dc.l Map_SSWalls
0001BF20 4142                       	dc.w $4142
0001BF22 0000 0000                  	dc.l Map_SSWalls
0001BF26 4142                       	dc.w $4142
0001BF28 0000 0000                  	dc.l Map_SSWalls
0001BF2C 4142                       	dc.w $4142
0001BF2E 0000 0000                  	dc.l Map_SSWalls
0001BF32 4142                       	dc.w $4142
0001BF34 0000 0000                  	dc.l Map_SSWalls
0001BF38 6142                       	dc.w $6142
0001BF3A 0000 0000                  	dc.l Map_SSWalls
0001BF3E 6142                       	dc.w $6142
0001BF40 0000 0000                  	dc.l Map_SSWalls
0001BF44 6142                       	dc.w $6142
0001BF46 0000 0000                  	dc.l Map_SSWalls
0001BF4A 6142                       	dc.w $6142
0001BF4C 0000 0000                  	dc.l Map_SSWalls
0001BF50 6142                       	dc.w $6142
0001BF52 0000 0000                  	dc.l Map_SSWalls
0001BF56 6142                       	dc.w $6142
0001BF58 0000 0000                  	dc.l Map_SSWalls
0001BF5C 6142                       	dc.w $6142
0001BF5E 0000 0000                  	dc.l Map_SSWalls
0001BF62 6142                       	dc.w $6142
0001BF64 0000 0000                  	dc.l Map_SSWalls
0001BF68 6142                       	dc.w $6142
0001BF6A 0000 F0F2                  	dc.l Map_obj47
0001BF6E 023B                       	dc.w $23B
0001BF70 0000 0000                  	dc.l Map_SS_R
0001BF74 0570                       	dc.w $570
0001BF76 0000 0000                  	dc.l Map_SS_R
0001BF7A 0251                       	dc.w $251
0001BF7C 0000 0000                  	dc.l Map_SS_R
0001BF80 0370                       	dc.w $370
0001BF82 0000 0000                  	dc.l Map_SS_Up
0001BF86 0263                       	dc.w $263
0001BF88 0000 0000                  	dc.l Map_SS_Down
0001BF8C 0263                       	dc.w $263
0001BF8E 0000 0000                  	dc.l Map_SS_R
0001BF92 22F0                       	dc.w $22F0
0001BF94 0000 0000                  	dc.l Map_SS_Glass
0001BF98 0470                       	dc.w $470
0001BF9A 0000 0000                  	dc.l Map_SS_Glass
0001BF9E 05F0                       	dc.w $5F0
0001BFA0 0000 0000                  	dc.l Map_SS_Glass
0001BFA4 65F0                       	dc.w $65F0
0001BFA6 0000 0000                  	dc.l Map_SS_Glass
0001BFAA 25F0                       	dc.w $25F0
0001BFAC 0000 0000                  	dc.l Map_SS_Glass
0001BFB0 45F0                       	dc.w $45F0
0001BFB2 0000 0000                  	dc.l Map_SS_R
0001BFB6 02F0                       	dc.w $2F0
0001BFB8 0100 F0F2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BFBC 023B                       	dc.w $23B
0001BFBE 0200 F0F2                  	dc.l Map_obj47+$2000000
0001BFC2 023B                       	dc.w $23B
0001BFC4 0000 0000                  	dc.l Map_SS_R
0001BFC8 0797                       	dc.w $797
0001BFCA 0000 0000                  	dc.l Map_SS_R
0001BFCE 07A0                       	dc.w $7A0
0001BFD0 0000 0000                  	dc.l Map_SS_R
0001BFD4 07A9                       	dc.w $7A9
0001BFD6 0000 0000                  	dc.l Map_SS_R
0001BFDA 0797                       	dc.w $797
0001BFDC 0000 0000                  	dc.l Map_SS_R
0001BFE0 07A0                       	dc.w $7A0
0001BFE2 0000 0000                  	dc.l Map_SS_R
0001BFE6 07A9                       	dc.w $7A9
0001BFE8 0000 A466                  	dc.l Map_obj25
0001BFEC 27B2                       	dc.w $27B2
0001BFEE 0000 0000                  	dc.l Map_SS_Chaos3
0001BFF2 0770                       	dc.w $770
0001BFF4 0000 0000                  	dc.l Map_SS_Chaos3
0001BFF8 2770                       	dc.w $2770
0001BFFA 0000 0000                  	dc.l Map_SS_Chaos3
0001BFFE 4770                       	dc.w $4770
0001C000 0000 0000                  	dc.l Map_SS_Chaos3
0001C004 6770                       	dc.w $6770
0001C006 0000 0000                  	dc.l Map_SS_Chaos1
0001C00A 0770                       	dc.w $770
0001C00C 0000 0000                  	dc.l Map_SS_Chaos2
0001C010 0770                       	dc.w $770
0001C012 0000 0000                  	dc.l Map_SS_R
0001C016 04F0                       	dc.w $4F0
0001C018 0400 A466                  	dc.l Map_obj25+$4000000
0001C01C 27B2                       	dc.w $27B2
0001C01E 0500 A466                  	dc.l Map_obj25+$5000000
0001C022 27B2                       	dc.w $27B2
0001C024 0600 A466                  	dc.l Map_obj25+$6000000
0001C028 27B2                       	dc.w $27B2
0001C02A 0700 A466                  	dc.l Map_obj25+$7000000
0001C02E 27B2                       	dc.w $27B2
0001C030 0000 0000                  	dc.l Map_SS_Glass
0001C034 23F0                       	dc.w $23F0
0001C036 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C03A 23F0                       	dc.w $23F0
0001C03C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C040 23F0                       	dc.w $23F0
0001C042 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C046 23F0                       	dc.w $23F0
0001C048 0000 0000                  	dc.l Map_SS_R+$2000000
0001C04C 04F0                       	dc.w $4F0
0001C04E 0000 0000                  	dc.l Map_SS_Glass
0001C052 05F0                       	dc.w $5F0
0001C054 0000 0000                  	dc.l Map_SS_Glass
0001C058 65F0                       	dc.w $65F0
0001C05A 0000 0000                  	dc.l Map_SS_Glass
0001C05E 25F0                       	dc.w $25F0
0001C060 0000 0000                  	dc.l Map_SS_Glass
0001C064 45F0                       	dc.w $45F0
0001C064 45F0                       	dc.w $45F0
0001C066                            
0001C066                            ; ---------------------------------------------------------------------------
0001C066                            ; Sprite mappings - special stage "R" block
0001C066                            ; ---------------------------------------------------------------------------
0001C066                            Map_SS_R:
0001C066                            	include "_maps\SSRblock.asm"
0001C066                            ; ---------------------------------------------------------------------------
0001C066                            ; Sprite mappings - special stage "R" block
0001C066                            ; ---------------------------------------------------------------------------
0001C066 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C06A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C06C 01                         byte_1B912:	dc.b 1
0001C06D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C072 01                         byte_1B918:	dc.b 1
0001C073 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C078 00                         byte_1B91E:	dc.b 0
0001C07A 00                         		even
0001C07A 00                         		even
0001C07A                            
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A                            Map_SS_Glass:
0001C07A                            	include "_maps\SSglassblock.asm"
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C07E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C082 01                         byte_1B928:	dc.b 1
0001C083 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C088 01                         byte_1B92E:	dc.b 1
0001C089 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C08E 01                         byte_1B934:	dc.b 1
0001C08F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C094 01                         byte_1B93A:	dc.b 1
0001C095 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C09A                            		even
0001C09A                            		even
0001C09A                            
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            ; Sprite mappings - special stage "UP" block
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            Map_SS_Up:
0001C09A                            	include "_maps\SSUPblock.asm"
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            ; Sprite mappings - special stage "UP" block
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C09C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C09E 01                         byte_1B944:	dc.b 1
0001C09F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C0A4 01                         byte_1B94A:	dc.b 1
0001C0A5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C0AA                            		even
0001C0AA                            		even
0001C0AA                            
0001C0AA                            ; ---------------------------------------------------------------------------
0001C0AA                            ; Sprite mappings - special stage "DOWN" block
0001C0AA                            ; ---------------------------------------------------------------------------
0001C0AA                            Map_SS_Down:
0001C0AA                            	include "_maps\SSDOWNblock.asm"
0001C0AA                            ; ---------------------------------------------------------------------------
0001C0AA                            ; Sprite mappings - special stage "DOWN" block
0001C0AA                            ; ---------------------------------------------------------------------------
0001C0AA 0000                       		dc.w byte_1B954-Map_SS_Down
0001C0AC 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C0AE 01                         byte_1B954:	dc.b 1
0001C0AF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C0B4 01                         byte_1B95A:	dc.b 1
0001C0B5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C0BA                            		even
0001C0BA                            		even
0001C0BA                            
0001C0BA                            ; ---------------------------------------------------------------------------
0001C0BA                            ; Sprite mappings - special stage chaos	emeralds
0001C0BA                            ; ---------------------------------------------------------------------------
0001C0BA 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C0BC 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C0BE 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C0C0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C0C2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C0C4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C0C6 01                         byte_1B96C:	dc.b 1
0001C0C7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C0CC 01                         byte_1B972:	dc.b 1
0001C0CD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C0D2 01                         byte_1B978:	dc.b 1
0001C0D3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C0D8 01                         byte_1B97E:	dc.b 1
0001C0D9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C0DE                            		even
0001C0DE                            ; ===========================================================================
0001C0DE                            ; ---------------------------------------------------------------------------
0001C0DE                            ; Object 09 - Sonic (special stage)
0001C0DE                            ; ---------------------------------------------------------------------------
0001C0DE                            
0001C0DE                            Obj09:					; XREF: Obj_Index
0001C0DE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C0E2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C0E4 6100 0000                  		bsr.w	SS_FixCamera
0001C0E8 6000 0000                  		bra.w	DebugMode
0001C0EC                            ; ===========================================================================
0001C0EC                            
0001C0EC                            Obj09_Normal:
0001C0EC 7000                       		moveq	#0,d0
0001C0EE 1028 0024                  		move.b	$24(a0),d0
0001C0F2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C0F6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C0FA                            ; ===========================================================================
0001C0FA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C0FC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C0FE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C100 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C102                            ; ===========================================================================
0001C102                            
0001C102                            Obj09_Main:				; XREF: Obj09_Index
0001C102 5428 0024                  		addq.b	#2,$24(a0)
0001C106 117C 000E 0016             		move.b	#$E,$16(a0)
0001C10C 117C 0007 0017             		move.b	#7,$17(a0)
0001C112 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C11A 317C 0780 0002             		move.w	#$780,2(a0)
0001C120 117C 0004 0001             		move.b	#4,1(a0)
0001C126 117C 0000 0018             		move.b	#0,$18(a0)
0001C12C 117C 0002 001C             		move.b	#2,$1C(a0)
0001C132 08E8 0002 0022             		bset	#2,$22(a0)
0001C138 08E8 0001 0022             		bset	#1,$22(a0)
0001C13E                            
0001C13E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C13E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C142 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C144 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C14A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C14C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C152                            
0001C152                            Obj09_NoDebug:
0001C152 117C 0000 0030             		move.b	#0,$30(a0)
0001C158 7000                       		moveq	#0,d0
0001C15A 1028 0022                  		move.b	$22(a0),d0
0001C15E 0240 0002                  		andi.w	#2,d0
0001C162 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C166 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C16A 4EBA 818A                  		jsr	LoadSonicDynPLC
0001C16E 4EF9 0000 DBFE             		jmp	DisplaySprite
0001C174                            ; ===========================================================================
0001C174 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C176 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C178                            ; ===========================================================================
0001C178                            
0001C178                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C178 6100 0000                  		bsr.w	Obj09_Jump
0001C17C 6100 0000                  		bsr.w	Obj09_Move
0001C180 6100 0000                  		bsr.w	Obj09_Fall
0001C184 6000                       		bra.s	Obj09_Display
0001C186                            ; ===========================================================================
0001C186                            
0001C186                            Obj09_InAir:				; XREF: Obj09_Modes
0001C186 6100 0000                  		bsr.w	nullsub_2
0001C18A 6100 0000                  		bsr.w	Obj09_Move
0001C18E 6100 0000                  		bsr.w	Obj09_Fall
0001C192                            
0001C192                            Obj09_Display:				; XREF: Obj09_OnWall
0001C192 6100 0000                  		bsr.w	Obj09_ChkItems
0001C196 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C19A 4EB9 0000 DBD8             		jsr	SpeedToPos
0001C1A0 6100 0000                  		bsr.w	SS_FixCamera
0001C1A4 3038 F780                  		move.w	($FFFFF780).w,d0
0001C1A8 D078 F782                  		add.w	($FFFFF782).w,d0
0001C1AC 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C1B0 4EB9 0001 4060             		jsr	Sonic_Animate
0001C1B6 4E75                       		rts	
0001C1B8                            
0001C1B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B8                            
0001C1B8                            
0001C1B8                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C1B8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C1BE 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C1C0 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C1C4                            
0001C1C4                            Obj09_ChkRight:
0001C1C4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C1CA 6700                       		beq.s	loc_1BA78	; if not, branch
0001C1CC 6100 0000                  		bsr.w	Obj09_MoveRight
0001C1D0                            
0001C1D0                            loc_1BA78:
0001C1D0 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1D4 0200 000C                  		andi.b	#$C,d0
0001C1D8 6600                       		bne.s	loc_1BAA8
0001C1DA 3028 0014                  		move.w	$14(a0),d0
0001C1DE 6700                       		beq.s	loc_1BAA8
0001C1E0 6B00                       		bmi.s	loc_1BA9A
0001C1E2 0440 000C                  		subi.w	#$C,d0
0001C1E6 6400                       		bcc.s	loc_1BA94
0001C1E8 303C 0000                  		move.w	#0,d0
0001C1EC                            
0001C1EC                            loc_1BA94:
0001C1EC 3140 0014                  		move.w	d0,$14(a0)
0001C1F0 6000                       		bra.s	loc_1BAA8
0001C1F2                            ; ===========================================================================
0001C1F2                            
0001C1F2                            loc_1BA9A:
0001C1F2 0640 000C                  		addi.w	#$C,d0
0001C1F6 6400                       		bcc.s	loc_1BAA4
0001C1F8 303C 0000                  		move.w	#0,d0
0001C1FC                            
0001C1FC                            loc_1BAA4:
0001C1FC 3140 0014                  		move.w	d0,$14(a0)
0001C200                            
0001C200                            loc_1BAA8:
0001C200 1038 F780                  		move.b	($FFFFF780).w,d0
0001C204 0600 0020                  		addi.b	#$20,d0
0001C208 0200 00C0                  		andi.b	#$C0,d0
0001C20C 4400                       		neg.b	d0
0001C20E 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C214 C3E8 0014                  		muls.w	$14(a0),d1
0001C218 D3A8 0008                  		add.l	d1,8(a0)
0001C21C C1E8 0014                  		muls.w	$14(a0),d0
0001C220 D1A8 000C                  		add.l	d0,$C(a0)
0001C224 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C228 2428 000C                  		move.l	$C(a0),d2
0001C22C 2628 0008                  		move.l	8(a0),d3
0001C230 6100 0000                  		bsr.w	sub_1BCE8
0001C234 6700                       		beq.s	loc_1BAF2
0001C236 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C23A 93A8 0008                  		sub.l	d1,8(a0)
0001C23E 91A8 000C                  		sub.l	d0,$C(a0)
0001C242 317C 0000 0014             		move.w	#0,$14(a0)
0001C248 4E75                       		rts	
0001C24A                            ; ===========================================================================
0001C24A                            
0001C24A                            loc_1BAF2:
0001C24A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C24E 4E75                       		rts	
0001C250                            ; End of function Obj09_Move
0001C250                            
0001C250                            
0001C250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C250                            
0001C250                            
0001C250                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C250 08E8 0000 0022             		bset	#0,$22(a0)
0001C256 3028 0014                  		move.w	$14(a0),d0
0001C25A 6700                       		beq.s	loc_1BB06
0001C25C 6A00                       		bpl.s	loc_1BB1A
0001C25E                            
0001C25E                            loc_1BB06:
0001C25E 0440 000C                  		subi.w	#$C,d0
0001C262 0C40 F800                  		cmpi.w	#-$800,d0
0001C266 6E00                       		bgt.s	loc_1BB14
0001C268 303C F800                  		move.w	#-$800,d0
0001C26C                            
0001C26C                            loc_1BB14:
0001C26C 3140 0014                  		move.w	d0,$14(a0)
0001C270 4E75                       		rts	
0001C272                            ; ===========================================================================
0001C272                            
0001C272                            loc_1BB1A:
0001C272 0440 0040                  		subi.w	#$40,d0
0001C276 6400                       		bcc.s	loc_1BB22
0001C278 4E71                       		nop	
0001C27A                            
0001C27A                            loc_1BB22:
0001C27A 3140 0014                  		move.w	d0,$14(a0)
0001C27E 4E75                       		rts	
0001C280                            ; End of function Obj09_MoveLeft
0001C280                            
0001C280                            
0001C280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C280                            
0001C280                            
0001C280                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C280 08A8 0000 0022             		bclr	#0,$22(a0)
0001C286 3028 0014                  		move.w	$14(a0),d0
0001C28A 6B00                       		bmi.s	loc_1BB48
0001C28C 0640 000C                  		addi.w	#$C,d0
0001C290 0C40 0800                  		cmpi.w	#$800,d0
0001C294 6D00                       		blt.s	loc_1BB42
0001C296 303C 0800                  		move.w	#$800,d0
0001C29A                            
0001C29A                            loc_1BB42:
0001C29A 3140 0014                  		move.w	d0,$14(a0)
0001C29E 6000                       		bra.s	locret_1BB54
0001C2A0                            ; ===========================================================================
0001C2A0                            
0001C2A0                            loc_1BB48:
0001C2A0 0640 0040                  		addi.w	#$40,d0
0001C2A4 6400                       		bcc.s	loc_1BB50
0001C2A6 4E71                       		nop	
0001C2A8                            
0001C2A8                            loc_1BB50:
0001C2A8 3140 0014                  		move.w	d0,$14(a0)
0001C2AC                            
0001C2AC                            locret_1BB54:
0001C2AC 4E75                       		rts	
0001C2AE                            ; End of function Obj09_MoveRight
0001C2AE                            
0001C2AE                            
0001C2AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2AE                            
0001C2AE                            
0001C2AE                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C2AE 1038 F603                  		move.b	($FFFFF603).w,d0
0001C2B2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C2B6 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C2B8 1038 F780                  		move.b	($FFFFF780).w,d0
0001C2BC 0200 00FC                  		andi.b	#$FC,d0
0001C2C0 4400                       		neg.b	d0
0001C2C2 0400 0040                  		subi.b	#$40,d0
0001C2C6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C2CC C3FC 0680                  		muls.w	#$680,d1
0001C2D0 E081                       		asr.l	#8,d1
0001C2D2 3141 0010                  		move.w	d1,$10(a0)
0001C2D6 C1FC 0680                  		muls.w	#$680,d0
0001C2DA E080                       		asr.l	#8,d0
0001C2DC 3140 0012                  		move.w	d0,$12(a0)
0001C2E0 08E8 0001 0022             		bset	#1,$22(a0)
0001C2E6 303C 00A0                  		move.w	#$A0,d0
0001C2EA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C2F0                            
0001C2F0                            Obj09_NoJump:
0001C2F0 4E75                       		rts	
0001C2F2                            ; End of function Obj09_Jump
0001C2F2                            
0001C2F2                            
0001C2F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2F2                            
0001C2F2                            
0001C2F2                            nullsub_2:				; XREF: Obj09_InAir
0001C2F2 4E75                       		rts	
0001C2F4                            ; End of function nullsub_2
0001C2F4                            
0001C2F4                            ; ===========================================================================
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4 323C FC00                  		move.w	#-$400,d1
0001C2F8 B268 0012                  		cmp.w	$12(a0),d1
0001C2FC 6F00                       		ble.s	locret_1BBB4
0001C2FE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C302 0200 0070                  		andi.b	#$70,d0
0001C306 6600                       		bne.s	locret_1BBB4
0001C308 3141 0012                  		move.w	d1,$12(a0)
0001C30C                            
0001C30C                            locret_1BBB4:
0001C30C 4E75                       		rts	
0001C30E                            ; ---------------------------------------------------------------------------
0001C30E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C30E                            ; ---------------------------------------------------------------------------
0001C30E                            
0001C30E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C30E                            
0001C30E                            
0001C30E                            SS_FixCamera:				; XREF: Obj09
0001C30E 3428 000C                  		move.w	$C(a0),d2
0001C312 3628 0008                  		move.w	8(a0),d3
0001C316 3038 F700                  		move.w	($FFFFF700).w,d0
0001C31A 0443 00A0                  		subi.w	#$A0,d3
0001C31E 6500                       		bcs.s	loc_1BBCE
0001C320 9043                       		sub.w	d3,d0
0001C322 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C326                            
0001C326                            loc_1BBCE:
0001C326 3038 F704                  		move.w	($FFFFF704).w,d0
0001C32A 0442 0070                  		subi.w	#$70,d2
0001C32E 6500                       		bcs.s	locret_1BBDE
0001C330 9042                       		sub.w	d2,d0
0001C332 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C336                            
0001C336                            locret_1BBDE:
0001C336 4E75                       		rts	
0001C338                            ; End of function SS_FixCamera
0001C338                            
0001C338                            ; ===========================================================================
0001C338                            
0001C338                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C338 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C33E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C344 6600                       		bne.s	loc_1BBF4
0001C346 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C34C                            
0001C34C                            loc_1BBF4:
0001C34C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C352 6D00                       		blt.s	loc_1BC12
0001C354 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C35A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C360 5428 0024                  		addq.b	#2,$24(a0)
0001C364 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C36A                            
0001C36A                            loc_1BC12:
0001C36A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C36E D078 F782                  		add.w	($FFFFF782).w,d0
0001C372 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C376 4EB9 0001 4060             		jsr	Sonic_Animate
0001C37C 4EB9 0001 42F6             		jsr	LoadSonicDynPLC
0001C382 6100 FF8A                  		bsr.w	SS_FixCamera
0001C386 4EF9 0000 DBFE             		jmp	DisplaySprite
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C38C 5368 0038                  		subq.w	#1,$38(a0)
0001C390 6600                       		bne.s	loc_1BC40
0001C392 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C398                            
0001C398                            loc_1BC40:
0001C398 4EB9 0001 4060             		jsr	Sonic_Animate
0001C39E 4EB9 0001 42F6             		jsr	LoadSonicDynPLC
0001C3A4 6100 FF68                  		bsr.w	SS_FixCamera
0001C3A8 4EF9 0000 DBFE             		jmp	DisplaySprite
0001C3AE                            
0001C3AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3AE                            
0001C3AE                            
0001C3AE                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C3AE 2428 000C                  		move.l	$C(a0),d2
0001C3B2 2628 0008                  		move.l	8(a0),d3
0001C3B6 1038 F780                  		move.b	($FFFFF780).w,d0
0001C3BA 0200 00FC                  		andi.b	#$FC,d0
0001C3BE 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C3C4 3828 0010                  		move.w	$10(a0),d4
0001C3C8 48C4                       		ext.l	d4
0001C3CA E184                       		asl.l	#8,d4
0001C3CC C1FC 002A                  		muls.w	#$2A,d0
0001C3D0 D084                       		add.l	d4,d0
0001C3D2 3828 0012                  		move.w	$12(a0),d4
0001C3D6 48C4                       		ext.l	d4
0001C3D8 E184                       		asl.l	#8,d4
0001C3DA C3FC 002A                  		muls.w	#$2A,d1
0001C3DE D284                       		add.l	d4,d1
0001C3E0 D680                       		add.l	d0,d3
0001C3E2 6100 0000                  		bsr.w	sub_1BCE8
0001C3E6 6700                       		beq.s	loc_1BCB0
0001C3E8 9680                       		sub.l	d0,d3
0001C3EA 7000                       		moveq	#0,d0
0001C3EC 3140 0010                  		move.w	d0,$10(a0)
0001C3F0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C3F6 D481                       		add.l	d1,d2
0001C3F8 6100 0000                  		bsr.w	sub_1BCE8
0001C3FC 6700                       		beq.s	loc_1BCC6
0001C3FE 9481                       		sub.l	d1,d2
0001C400 7200                       		moveq	#0,d1
0001C402 3141 0012                  		move.w	d1,$12(a0)
0001C406 4E75                       		rts	
0001C408                            ; ===========================================================================
0001C408                            
0001C408                            loc_1BCB0:
0001C408 D481                       		add.l	d1,d2
0001C40A 6100 0000                  		bsr.w	sub_1BCE8
0001C40E 6700                       		beq.s	loc_1BCD4
0001C410 9481                       		sub.l	d1,d2
0001C412 7200                       		moveq	#0,d1
0001C414 3141 0012                  		move.w	d1,$12(a0)
0001C418 08A8 0001 0022             		bclr	#1,$22(a0)
0001C41E                            
0001C41E                            loc_1BCC6:
0001C41E E080                       		asr.l	#8,d0
0001C420 E081                       		asr.l	#8,d1
0001C422 3140 0010                  		move.w	d0,$10(a0)
0001C426 3141 0012                  		move.w	d1,$12(a0)
0001C42A 4E75                       		rts	
0001C42C                            ; ===========================================================================
0001C42C                            
0001C42C                            loc_1BCD4:
0001C42C E080                       		asr.l	#8,d0
0001C42E E081                       		asr.l	#8,d1
0001C430 3140 0010                  		move.w	d0,$10(a0)
0001C434 3141 0012                  		move.w	d1,$12(a0)
0001C438 08E8 0001 0022             		bset	#1,$22(a0)
0001C43E 4E75                       		rts	
0001C440                            ; End of function Obj09_Fall
0001C440                            
0001C440                            
0001C440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C440                            
0001C440                            
0001C440                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C440 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C446 7800                       		moveq	#0,d4
0001C448 4842                       		swap	d2
0001C44A 3802                       		move.w	d2,d4
0001C44C 4842                       		swap	d2
0001C44E 0644 0044                  		addi.w	#$44,d4
0001C452 88FC 0018                  		divu.w	#$18,d4
0001C456 C8FC 0080                  		mulu.w	#$80,d4
0001C45A D3C4                       		adda.l	d4,a1
0001C45C 7800                       		moveq	#0,d4
0001C45E 4843                       		swap	d3
0001C460 3803                       		move.w	d3,d4
0001C462 4843                       		swap	d3
0001C464 0644 0014                  		addi.w	#$14,d4
0001C468 88FC 0018                  		divu.w	#$18,d4
0001C46C D2C4                       		adda.w	d4,a1
0001C46E 7A00                       		moveq	#0,d5
0001C470 1819                       		move.b	(a1)+,d4
0001C472 6100                       		bsr.s	sub_1BD30
0001C474 1819                       		move.b	(a1)+,d4
0001C476 6100                       		bsr.s	sub_1BD30
0001C478 D2FC 007E                  		adda.w	#$7E,a1
0001C47C 1819                       		move.b	(a1)+,d4
0001C47E 6100                       		bsr.s	sub_1BD30
0001C480 1819                       		move.b	(a1)+,d4
0001C482 6100                       		bsr.s	sub_1BD30
0001C484 4A05                       		tst.b	d5
0001C486 4E75                       		rts	
0001C488                            ; End of function sub_1BCE8
0001C488                            
0001C488                            
0001C488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C488                            
0001C488                            
0001C488                            sub_1BD30:				; XREF: sub_1BCE8
0001C488 6700                       		beq.s	locret_1BD44
0001C48A 0C04 0028                  		cmpi.b	#$28,d4
0001C48E 6700                       		beq.s	locret_1BD44
0001C490 0C04 003A                  		cmpi.b	#$3A,d4
0001C494 6500                       		bcs.s	loc_1BD46
0001C496 0C04 004B                  		cmpi.b	#$4B,d4
0001C49A 6400                       		bcc.s	loc_1BD46
0001C49C                            
0001C49C                            locret_1BD44:
0001C49C 4E75                       		rts	
0001C49E                            ; ===========================================================================
0001C49E                            
0001C49E                            loc_1BD46:
0001C49E 1144 0030                  		move.b	d4,$30(a0)
0001C4A2 2149 0032                  		move.l	a1,$32(a0)
0001C4A6 7AFF                       		moveq	#-1,d5
0001C4A8 4E75                       		rts	
0001C4AA                            ; End of function sub_1BD30
0001C4AA                            
0001C4AA                            
0001C4AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4AA                            
0001C4AA                            
0001C4AA                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C4AA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C4B0 7800                       		moveq	#0,d4
0001C4B2 3828 000C                  		move.w	$C(a0),d4
0001C4B6 0644 0050                  		addi.w	#$50,d4
0001C4BA 88FC 0018                  		divu.w	#$18,d4
0001C4BE C8FC 0080                  		mulu.w	#$80,d4
0001C4C2 D3C4                       		adda.l	d4,a1
0001C4C4 7800                       		moveq	#0,d4
0001C4C6 3828 0008                  		move.w	8(a0),d4
0001C4CA 0644 0020                  		addi.w	#$20,d4
0001C4CE 88FC 0018                  		divu.w	#$18,d4
0001C4D2 D2C4                       		adda.w	d4,a1
0001C4D4 1811                       		move.b	(a1),d4
0001C4D6 6600                       		bne.s	Obj09_ChkCont
0001C4D8 4A28 003A                  		tst.b	$3A(a0)
0001C4DC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C4E0 7800                       		moveq	#0,d4
0001C4E2 4E75                       		rts	
0001C4E4                            ; ===========================================================================
0001C4E4                            
0001C4E4                            Obj09_ChkCont:
0001C4E4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C4E8 6600                       		bne.s	Obj09_Chk1Up
0001C4EA 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C4EE 6600                       		bne.s	Obj09_GetCont
0001C4F0 14BC 0001                  		move.b	#1,(a2)
0001C4F4 2549 0004                  		move.l	a1,4(a2)
0001C4F8                            
0001C4F8                            Obj09_GetCont:
0001C4F8 4EB9 0000 A14E             		jsr	CollectRing
0001C4FE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C504 6500                       		bcs.s	Obj09_NoCont
0001C506 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C50C 6600                       		bne.s	Obj09_NoCont
0001C50E 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C512 303C 00BF                  		move.w	#$BF,d0
0001C516 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C51C                            
0001C51C                            Obj09_NoCont:
0001C51C 7800                       		moveq	#0,d4
0001C51E 4E75                       		rts	
0001C520                            ; ===========================================================================
0001C520                            
0001C520                            Obj09_Chk1Up:
0001C520 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C524 6600                       		bne.s	Obj09_ChkEmer
0001C526 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C52A 6600                       		bne.s	Obj09_Get1Up
0001C52C 14BC 0003                  		move.b	#3,(a2)
0001C530 2549 0004                  		move.l	a1,4(a2)
0001C534                            
0001C534                            Obj09_Get1Up:
0001C534 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C538 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C53C 303C 0088                  		move.w	#$88,d0
0001C540 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C546 7800                       		moveq	#0,d4
0001C548 4E75                       		rts	
0001C54A                            ; ===========================================================================
0001C54A                            
0001C54A                            Obj09_ChkEmer:
0001C54A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C54E 6500                       		bcs.s	Obj09_ChkGhost
0001C550 0C04 0040                  		cmpi.b	#$40,d4
0001C554 6200                       		bhi.s	Obj09_ChkGhost
0001C556 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C55A 6600                       		bne.s	Obj09_GetEmer
0001C55C 14BC 0005                  		move.b	#5,(a2)
0001C560 2549 0004                  		move.l	a1,4(a2)
0001C564                            
0001C564                            Obj09_GetEmer:
0001C564 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C56A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C56C 0404 003B                  		subi.b	#$3B,d4
0001C570 7000                       		moveq	#0,d0
0001C572 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C576 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C57A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C57E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C582                            
0001C582                            Obj09_NoEmer:
0001C582 303C 0093                  		move.w	#$93,d0
0001C586 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C58C 7800                       		moveq	#0,d4
0001C58E 4E75                       		rts	
0001C590                            ; ===========================================================================
0001C590                            
0001C590                            Obj09_ChkGhost:
0001C590 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C594 6600                       		bne.s	Obj09_ChkGhostTag
0001C596 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C59C                            
0001C59C                            Obj09_ChkGhostTag:
0001C59C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C5A0 6600                       		bne.s	Obj09_NoGhost
0001C5A2 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C5A8 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C5AA 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C5B0                            
0001C5B0                            Obj09_NoGhost:
0001C5B0 78FF                       		moveq	#-1,d4
0001C5B2 4E75                       		rts	
0001C5B4                            ; ===========================================================================
0001C5B4                            
0001C5B4                            Obj09_MakeGhostSolid:
0001C5B4 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C5BA 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C5BC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C5C2 723F                       		moveq	#$3F,d1
0001C5C4                            
0001C5C4                            Obj09_GhostLoop2:
0001C5C4 743F                       		moveq	#$3F,d2
0001C5C6                            
0001C5C6                            Obj09_GhostLoop:
0001C5C6 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C5CA 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C5CC 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C5D0                            
0001C5D0                            Obj09_NoReplace:
0001C5D0 5249                       		addq.w	#1,a1
0001C5D2 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C5D6 43E9 0040                  		lea	$40(a1),a1
0001C5DA 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C5DE                            
0001C5DE                            Obj09_GhostNotSolid:
0001C5DE 4228 003A                  		clr.b	$3A(a0)
0001C5E2 7800                       		moveq	#0,d4
0001C5E4 4E75                       		rts	
0001C5E6                            ; End of function Obj09_ChkItems
0001C5E6                            
0001C5E6                            
0001C5E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5E6                            
0001C5E6                            
0001C5E6                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C5E6 1028 0030                  		move.b	$30(a0),d0
0001C5EA 6600                       		bne.s	Obj09_ChkBumper
0001C5EC 5328 0036                  		subq.b	#1,$36(a0)
0001C5F0 6A00                       		bpl.s	loc_1BEA0
0001C5F2 117C 0000 0036             		move.b	#0,$36(a0)
0001C5F8                            
0001C5F8                            loc_1BEA0:
0001C5F8 5328 0037                  		subq.b	#1,$37(a0)
0001C5FC 6A00                       		bpl.s	locret_1BEAC
0001C5FE 117C 0000 0037             		move.b	#0,$37(a0)
0001C604                            
0001C604                            locret_1BEAC:
0001C604 4E75                       		rts	
0001C606                            ; ===========================================================================
0001C606                            
0001C606                            Obj09_ChkBumper:
0001C606 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C60A 6600                       		bne.s	Obj09_GOAL
0001C60C 2228 0032                  		move.l	$32(a0),d1
0001C610 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C616 3401                       		move.w	d1,d2
0001C618 0241 007F                  		andi.w	#$7F,d1
0001C61C C2FC 0018                  		mulu.w	#$18,d1
0001C620 0441 0014                  		subi.w	#$14,d1
0001C624 EE4A                       		lsr.w	#7,d2
0001C626 0242 007F                  		andi.w	#$7F,d2
0001C62A C4FC 0018                  		mulu.w	#$18,d2
0001C62E 0442 0044                  		subi.w	#$44,d2
0001C632 9268 0008                  		sub.w	8(a0),d1
0001C636 9468 000C                  		sub.w	$C(a0),d2
0001C63A 4EB9 0000 2F32             		jsr	(CalcAngle).l
0001C640 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C646 C3FC F900                  		muls.w	#-$700,d1
0001C64A E081                       		asr.l	#8,d1
0001C64C 3141 0010                  		move.w	d1,$10(a0)
0001C650 C1FC F900                  		muls.w	#-$700,d0
0001C654 E080                       		asr.l	#8,d0
0001C656 3140 0012                  		move.w	d0,$12(a0)
0001C65A 08E8 0001 0022             		bset	#1,$22(a0)
0001C660 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C664 6600                       		bne.s	Obj09_BumpSnd
0001C666 14BC 0002                  		move.b	#2,(a2)
0001C66A 2028 0032                  		move.l	$32(a0),d0
0001C66E 5380                       		subq.l	#1,d0
0001C670 2540 0004                  		move.l	d0,4(a2)
0001C674                            
0001C674                            Obj09_BumpSnd:
0001C674 303C 00B4                  		move.w	#$B4,d0
0001C678 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C67E                            ; ===========================================================================
0001C67E                            
0001C67E                            Obj09_GOAL:
0001C67E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C682 6600                       		bne.s	Obj09_UPblock
0001C684 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C688 303C 00A8                  		move.w	#$A8,d0		; change item
0001C68C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C692 4E75                       		rts	
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            Obj09_UPblock:
0001C694 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C698 6600                       		bne.s	Obj09_DOWNblock
0001C69A 4A28 0036                  		tst.b	$36(a0)
0001C69E 6600 0000                  		bne.w	Obj09_NoGlass
0001C6A2 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C6A8 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C6AE 6700                       		beq.s	Obj09_UPsnd
0001C6B0 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C6B4 2268 0032                  		movea.l	$32(a0),a1
0001C6B8 5389                       		subq.l	#1,a1
0001C6BA 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C6BE                            
0001C6BE                            Obj09_UPsnd:
0001C6BE 303C 00A9                  		move.w	#$A9,d0
0001C6C2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C6C8                            ; ===========================================================================
0001C6C8                            
0001C6C8                            Obj09_DOWNblock:
0001C6C8 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C6CC 6600                       		bne.s	Obj09_Rblock
0001C6CE 4A28 0036                  		tst.b	$36(a0)
0001C6D2 6600 0000                  		bne.w	Obj09_NoGlass
0001C6D6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C6DC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C6E2 6600                       		bne.s	Obj09_DOWNsnd
0001C6E4 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C6E8 2268 0032                  		movea.l	$32(a0),a1
0001C6EC 5389                       		subq.l	#1,a1
0001C6EE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C6F2                            
0001C6F2                            Obj09_DOWNsnd:
0001C6F2 303C 00A9                  		move.w	#$A9,d0
0001C6F6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C6FC                            ; ===========================================================================
0001C6FC                            
0001C6FC                            Obj09_Rblock:
0001C6FC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C700 6600                       		bne.s	Obj09_ChkGlass
0001C702 4A28 0037                  		tst.b	$37(a0)
0001C706 6600 0000                  		bne.w	Obj09_NoGlass
0001C70A 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C710 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C714 6600                       		bne.s	Obj09_RevStage
0001C716 14BC 0004                  		move.b	#4,(a2)
0001C71A 2028 0032                  		move.l	$32(a0),d0
0001C71E 5380                       		subq.l	#1,d0
0001C720 2540 0004                  		move.l	d0,4(a2)
0001C724                            
0001C724                            Obj09_RevStage:
0001C724 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C728 303C 00A9                  		move.w	#$A9,d0
0001C72C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C732                            ; ===========================================================================
0001C732                            
0001C732                            Obj09_ChkGlass:
0001C732 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C736 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C738 0C00 002E                  		cmpi.b	#$2E,d0
0001C73C 6700                       		beq.s	Obj09_Glass
0001C73E 0C00 002F                  		cmpi.b	#$2F,d0
0001C742 6700                       		beq.s	Obj09_Glass
0001C744 0C00 0030                  		cmpi.b	#$30,d0
0001C748 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C74A                            
0001C74A                            Obj09_Glass:
0001C74A 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C74E 6600                       		bne.s	Obj09_GlassSnd
0001C750 14BC 0006                  		move.b	#6,(a2)
0001C754 2268 0032                  		movea.l	$32(a0),a1
0001C758 5389                       		subq.l	#1,a1
0001C75A 2549 0004                  		move.l	a1,4(a2)
0001C75E 1011                       		move.b	(a1),d0
0001C760 5200                       		addq.b	#1,d0		; change glass type when touched
0001C762 0C00 0030                  		cmpi.b	#$30,d0
0001C766 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C768 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C76A                            
0001C76A                            Obj09_GlassUpdate:
0001C76A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C76E                            
0001C76E                            Obj09_GlassSnd:
0001C76E 303C 00BA                  		move.w	#$BA,d0
0001C772 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C778                            ; ===========================================================================
0001C778                            
0001C778                            Obj09_NoGlass:
0001C778 4E75                       		rts	
0001C77A                            ; End of function Obj09_ChkItems2
0001C77A                            
0001C77A                            ; ===========================================================================
0001C77A                            ; ---------------------------------------------------------------------------
0001C77A                            ; Object 10 - blank
0001C77A                            ; ---------------------------------------------------------------------------
0001C77A                            
0001C77A                            Obj10:					; XREF: Obj_Index
0001C77A 4E75                       		rts	
0001C77C                            ; ---------------------------------------------------------------------------
0001C77C                            ; Subroutine to	animate	level graphics
0001C77C                            ; ---------------------------------------------------------------------------
0001C77C                            
0001C77C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C77C                            
0001C77C                            
0001C77C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C77C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C780 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C782 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C788 6100 0000                  		bsr.w	AniArt_GiantRing
0001C78C 7000                       		moveq	#0,d0
0001C78E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C792 D040                       		add.w	d0,d0
0001C794 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C798 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C79C                            ; ===========================================================================
0001C79C                            
0001C79C                            AniArt_Pause:
0001C79C 4E75                       		rts	
0001C79E                            ; End of function AniArt_Load
0001C79E                            
0001C79E                            ; ===========================================================================
0001C79E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C7A2 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C7A6 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C7AA 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C7AC                            ; ===========================================================================
0001C7AC                            ; ---------------------------------------------------------------------------
0001C7AC                            ; Animated pattern routine - Green Hill
0001C7AC                            ; ---------------------------------------------------------------------------
0001C7AC                            
0001C7AC                            AniArt_GHZ:				; XREF: AniArt_Index
0001C7AC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C7B0 6A00                       		bpl.s	loc_1C08A
0001C7B2 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C7B8 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C7BE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C7C2 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C7C6 0240 0001                  		andi.w	#1,d0
0001C7CA 6700                       		beq.s	loc_1C078
0001C7CC 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C7D0                            
0001C7D0                            loc_1C078:
0001C7D0 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C7DA 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C7DE 6000 0000                  		bra.w	LoadTiles
0001C7E2                            ; ===========================================================================
0001C7E2                            
0001C7E2                            loc_1C08A:
0001C7E2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C7E6 6A00                       		bpl.s	loc_1C0C0
0001C7E8 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C7EE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C7F4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C7F8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C7FC 0240 0001                  		andi.w	#1,d0
0001C800 6700                       		beq.s	loc_1C0AE
0001C802 43E9 0200                  		lea	$200(a1),a1
0001C806                            
0001C806                            loc_1C0AE:
0001C806 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C810 323C 000F                  		move.w	#$F,d1
0001C814 6000 0000                  		bra.w	LoadTiles
0001C818                            ; ===========================================================================
0001C818                            
0001C818                            loc_1C0C0:
0001C818 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C81C 6A00                       		bpl.s	locret_1C10C
0001C81E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C824 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C828 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C82C 0240 0003                  		andi.w	#3,d0
0001C830 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C834 0800 0000                  		btst	#0,d0
0001C838 6600                       		bne.s	loc_1C0E8
0001C83A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C840                            
0001C840                            loc_1C0E8:
0001C840 EF48                       		lsl.w	#7,d0
0001C842 3200                       		move.w	d0,d1
0001C844 D040                       		add.w	d0,d0
0001C846 D041                       		add.w	d1,d0
0001C848 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C852 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C858 43F1 0000                  		lea	(a1,d0.w),a1
0001C85C 323C 000B                  		move.w	#$B,d1
0001C860 6100 0000                  		bsr.w	LoadTiles
0001C864                            
0001C864                            locret_1C10C:
0001C864 4E75                       		rts	
0001C866                            ; ===========================================================================
0001C866 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C86A                            ; ===========================================================================
0001C86A                            ; ---------------------------------------------------------------------------
0001C86A                            ; Animated pattern routine - Marble
0001C86A                            ; ---------------------------------------------------------------------------
0001C86A                            
0001C86A                            AniArt_MZ:				; XREF: AniArt_Index
0001C86A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C86E 6A00                       		bpl.s	loc_1C150
0001C870 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C876 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C87C 7000                       		moveq	#0,d0
0001C87E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C882 5200                       		addq.b	#1,d0
0001C884 0C00 0003                  		cmpi.b	#3,d0
0001C888 6600                       		bne.s	loc_1C134
0001C88A 7000                       		moveq	#0,d0
0001C88C                            
0001C88C                            loc_1C134:
0001C88C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C890 C0FC 0100                  		mulu.w	#$100,d0
0001C894 D2C0                       		adda.w	d0,a1
0001C896 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C8A0 323C 0007                  		move.w	#7,d1
0001C8A4 6100 0000                  		bsr.w	LoadTiles
0001C8A8                            
0001C8A8                            loc_1C150:
0001C8A8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8AC 6A00                       		bpl.s	loc_1C1AE
0001C8AE 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C8B4 7000                       		moveq	#0,d0
0001C8B6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C8BA 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C8C0 EE58                       		ror.w	#7,d0
0001C8C2 D8C0                       		adda.w	d0,a4
0001C8C4 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C8CE 7600                       		moveq	#0,d3
0001C8D0 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C8D4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8D8 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C8DC 343C 0003                  		move.w	#3,d2
0001C8E0                            
0001C8E0                            loc_1C188:
0001C8E0 3003                       		move.w	d3,d0
0001C8E2 D040                       		add.w	d0,d0
0001C8E4 0240 001E                  		andi.w	#$1E,d0
0001C8E8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C8EE 3033 0000                  		move.w	(a3,d0.w),d0
0001C8F2 47F3 0000                  		lea	(a3,d0.w),a3
0001C8F6 224C                       		movea.l	a4,a1
0001C8F8 323C 001F                  		move.w	#$1F,d1
0001C8FC 4E93                       		jsr	(a3)
0001C8FE 5843                       		addq.w	#4,d3
0001C900 51CA FFDE                  		dbf	d2,loc_1C188
0001C904 4E75                       		rts	
0001C906                            ; ===========================================================================
0001C906                            
0001C906                            loc_1C1AE:
0001C906 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C90A 6A00 0000                  		bpl.w	locret_1C1EA
0001C90E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C914 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C91A 7000                       		moveq	#0,d0
0001C91C 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C920 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C924 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C92A C0FC 00C0                  		mulu.w	#$C0,d0
0001C92E D2C0                       		adda.w	d0,a1
0001C930 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C93A 323C 0005                  		move.w	#5,d1
0001C93E 6000 0000                  		bra.w	LoadTiles
0001C942                            ; ===========================================================================
0001C942                            
0001C942                            locret_1C1EA:
0001C942 4E75                       		rts	
0001C944                            ; ===========================================================================
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            ; Animated pattern routine - Scrap Brain
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            
0001C944                            AniArt_SBZ:				; XREF: AniArt_Index
0001C944 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C948 6700                       		beq.s	loc_1C1F8
0001C94A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C94E 6000                       		bra.s	loc_1C250
0001C950                            ; ===========================================================================
0001C950                            
0001C950                            loc_1C1F8:
0001C950 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C954 6A00                       		bpl.s	loc_1C250
0001C956 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C95C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C962 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C96C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C970 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C974 0240 0007                  		andi.w	#7,d0
0001C978 6700                       		beq.s	loc_1C234
0001C97A 5340                       		subq.w	#1,d0
0001C97C C0FC 0180                  		mulu.w	#$180,d0
0001C980 43F1 0000                  		lea	(a1,d0.w),a1
0001C984 323C 000B                  		move.w	#$B,d1
0001C988 6000 0000                  		bra.w	LoadTiles
0001C98C                            ; ===========================================================================
0001C98C                            
0001C98C                            loc_1C234:
0001C98C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C992                            
0001C992                            loc_1C23A:
0001C992 323C 0005                  		move.w	#5,d1
0001C996 6100 0000                  		bsr.w	LoadTiles
0001C99A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C9A0 323C 0005                  		move.w	#5,d1
0001C9A4 6000 0000                  		bra.w	LoadTiles
0001C9A8                            ; ===========================================================================
0001C9A8                            
0001C9A8                            loc_1C250:
0001C9A8 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C9AC 6700                       		beq.s	loc_1C25C
0001C9AE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C9B2 6000                       		bra.s	locret_1C2A0
0001C9B4                            ; ===========================================================================
0001C9B4                            
0001C9B4                            loc_1C25C:
0001C9B4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9B8 6A00                       		bpl.s	locret_1C2A0
0001C9BA 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C9C0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C9C6 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C9D0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9D4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9D8 0240 0007                  		andi.w	#7,d0
0001C9DC 6700                       		beq.s	loc_1C298
0001C9DE 5340                       		subq.w	#1,d0
0001C9E0 C0FC 0180                  		mulu.w	#$180,d0
0001C9E4 43F1 0000                  		lea	(a1,d0.w),a1
0001C9E8 323C 000B                  		move.w	#$B,d1
0001C9EC 6000 0000                  		bra.w	LoadTiles
0001C9F0                            ; ===========================================================================
0001C9F0                            
0001C9F0                            loc_1C298:
0001C9F0 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C9F6 609A                       		bra.s	loc_1C23A
0001C9F8                            ; ===========================================================================
0001C9F8                            
0001C9F8                            locret_1C2A0:
0001C9F8 4E75                       		rts	
0001C9FA                            ; ===========================================================================
0001C9FA                            ; ---------------------------------------------------------------------------
0001C9FA                            ; Animated pattern routine - ending sequence
0001C9FA                            ; ---------------------------------------------------------------------------
0001C9FA                            
0001C9FA                            AniArt_Ending:				; XREF: AniArt_Index
0001C9FA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9FE 6A00                       		bpl.s	loc_1C2F4
0001CA00 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CA06 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CA0C 45F8 9400                  		lea	($FFFF9400).w,a2
0001CA10 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CA14 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA18 0240 0001                  		andi.w	#1,d0
0001CA1C 6700                       		beq.s	loc_1C2CE
0001CA1E 43E9 0200                  		lea	$200(a1),a1
0001CA22 45EA 0200                  		lea	$200(a2),a2
0001CA26                            
0001CA26                            loc_1C2CE:
0001CA26 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CA30 323C 000F                  		move.w	#$F,d1
0001CA34 6100 0000                  		bsr.w	LoadTiles
0001CA38 224A                       		movea.l	a2,a1
0001CA3A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CA44 323C 000F                  		move.w	#$F,d1
0001CA48 6000 0000                  		bra.w	LoadTiles
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            loc_1C2F4:
0001CA4C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA50 6A00                       		bpl.s	loc_1C33C
0001CA52 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA58 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CA5C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CA60 0240 0007                  		andi.w	#7,d0
0001CA64 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CA68 EF48                       		lsl.w	#7,d0
0001CA6A 3200                       		move.w	d0,d1
0001CA6C D040                       		add.w	d0,d0
0001CA6E D041                       		add.w	d1,d0
0001CA70 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA7A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA80 43F1 0000                  		lea	(a1,d0.w),a1
0001CA84 323C 000B                  		move.w	#$B,d1
0001CA88 6000 0000                  		bra.w	LoadTiles
0001CA8C                            ; ===========================================================================
0001CA8C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CA94                            ; ===========================================================================
0001CA94                            
0001CA94                            loc_1C33C:
0001CA94 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CA98 6A00                       		bpl.s	loc_1C37A
0001CA9A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CAA0 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CAA4 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CAA8 0240 0003                  		andi.w	#3,d0
0001CAAC 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CAB0 E148                       		lsl.w	#8,d0
0001CAB2 D040                       		add.w	d0,d0
0001CAB4 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CABE 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CAC2 43F1 0000                  		lea	(a1,d0.w),a1
0001CAC6 323C 000F                  		move.w	#$F,d1
0001CACA 6000 0000                  		bra.w	LoadTiles
0001CACE                            ; ===========================================================================
0001CACE 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CAD2                            ; ===========================================================================
0001CAD2                            
0001CAD2                            loc_1C37A:
0001CAD2 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CAD6 6A00                       		bpl.s	locret_1C3B4
0001CAD8 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CADE 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CAE2 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CAE6 0240 0003                  		andi.w	#3,d0
0001CAEA 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CAEE E148                       		lsl.w	#8,d0
0001CAF0 D040                       		add.w	d0,d0
0001CAF2 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CAFC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CB00 43F1 0000                  		lea	(a1,d0.w),a1
0001CB04 323C 000F                  		move.w	#$F,d1
0001CB08 6000 0000                  		bra.w	LoadTiles
0001CB0C                            ; ===========================================================================
0001CB0C                            
0001CB0C                            locret_1C3B4:
0001CB0C 4E75                       		rts	
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            AniArt_none:				; XREF: AniArt_Index
0001CB0E 4E75                       		rts	
0001CB10                            
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CB10                            ; ---------------------------------------------------------------------------
0001CB10                            
0001CB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB10                            
0001CB10                            
0001CB10                            LoadTiles:
0001CB10 2C99                       		move.l	(a1)+,(a6)
0001CB12 2C99                       		move.l	(a1)+,(a6)
0001CB14 2C99                       		move.l	(a1)+,(a6)
0001CB16 2C99                       		move.l	(a1)+,(a6)
0001CB18 2C99                       		move.l	(a1)+,(a6)
0001CB1A 2C99                       		move.l	(a1)+,(a6)
0001CB1C 2C99                       		move.l	(a1)+,(a6)
0001CB1E 2C99                       		move.l	(a1)+,(a6)
0001CB20 51C9 FFEE                  		dbf	d1,LoadTiles
0001CB24 4E75                       		rts	
0001CB26                            ; End of function LoadTiles
0001CB26                            
0001CB26                            ; ===========================================================================
0001CB26                            ; ---------------------------------------------------------------------------
0001CB26                            ; Animated pattern routine - more Marble Zone
0001CB26                            ; ---------------------------------------------------------------------------
0001CB26 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CB2A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CB2E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CB32 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CB36 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CB3A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CB3E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CB42 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CB46                            ; ===========================================================================
0001CB46                            
0001CB46                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CB46 2C91                       		move.l	(a1),(a6)
0001CB48 43E9 0010                  		lea	$10(a1),a1
0001CB4C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CB50 4E75                       		rts	
0001CB52                            ; ===========================================================================
0001CB52                            
0001CB52                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CB52 2029 0002                  		move.l	2(a1),d0
0001CB56 1029 0001                  		move.b	1(a1),d0
0001CB5A E098                       		ror.l	#8,d0
0001CB5C 2C80                       		move.l	d0,(a6)
0001CB5E 43E9 0010                  		lea	$10(a1),a1
0001CB62 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CB66 4E75                       		rts	
0001CB68                            ; ===========================================================================
0001CB68                            
0001CB68                            loc_1C410:				; XREF: AniArt_MZextra
0001CB68 2CA9 0002                  		move.l	2(a1),(a6)
0001CB6C 43E9 0010                  		lea	$10(a1),a1
0001CB70 51C9 FFF6                  		dbf	d1,loc_1C410
0001CB74 4E75                       		rts	
0001CB76                            ; ===========================================================================
0001CB76                            
0001CB76                            loc_1C41E:				; XREF: AniArt_MZextra
0001CB76 2029 0004                  		move.l	4(a1),d0
0001CB7A 1029 0003                  		move.b	3(a1),d0
0001CB7E E098                       		ror.l	#8,d0
0001CB80 2C80                       		move.l	d0,(a6)
0001CB82 43E9 0010                  		lea	$10(a1),a1
0001CB86 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CB8A 4E75                       		rts	
0001CB8C                            ; ===========================================================================
0001CB8C                            
0001CB8C                            loc_1C434:				; XREF: AniArt_MZextra
0001CB8C 2CA9 0004                  		move.l	4(a1),(a6)
0001CB90 43E9 0010                  		lea	$10(a1),a1
0001CB94 51C9 FFF6                  		dbf	d1,loc_1C434
0001CB98 4E75                       		rts	
0001CB9A                            ; ===========================================================================
0001CB9A                            
0001CB9A                            loc_1C442:				; XREF: AniArt_MZextra
0001CB9A 2029 0006                  		move.l	6(a1),d0
0001CB9E 1029 0005                  		move.b	5(a1),d0
0001CBA2 E098                       		ror.l	#8,d0
0001CBA4 2C80                       		move.l	d0,(a6)
0001CBA6 43E9 0010                  		lea	$10(a1),a1
0001CBAA 51C9 FFEE                  		dbf	d1,loc_1C442
0001CBAE 4E75                       		rts	
0001CBB0                            ; ===========================================================================
0001CBB0                            
0001CBB0                            loc_1C458:				; XREF: AniArt_MZextra
0001CBB0 2CA9 0006                  		move.l	6(a1),(a6)
0001CBB4 43E9 0010                  		lea	$10(a1),a1
0001CBB8 51C9 FFF6                  		dbf	d1,loc_1C458
0001CBBC 4E75                       		rts	
0001CBBE                            ; ===========================================================================
0001CBBE                            
0001CBBE                            loc_1C466:				; XREF: AniArt_MZextra
0001CBBE 2029 0008                  		move.l	8(a1),d0
0001CBC2 1029 0007                  		move.b	7(a1),d0
0001CBC6 E098                       		ror.l	#8,d0
0001CBC8 2C80                       		move.l	d0,(a6)
0001CBCA 43E9 0010                  		lea	$10(a1),a1
0001CBCE 51C9 FFEE                  		dbf	d1,loc_1C466
0001CBD2 4E75                       		rts	
0001CBD4                            ; ===========================================================================
0001CBD4                            
0001CBD4                            loc_1C47C:				; XREF: AniArt_MZextra
0001CBD4 2CA9 0008                  		move.l	8(a1),(a6)
0001CBD8 43E9 0010                  		lea	$10(a1),a1
0001CBDC 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CBE0 4E75                       		rts	
0001CBE2                            ; ===========================================================================
0001CBE2                            
0001CBE2                            loc_1C48A:				; XREF: AniArt_MZextra
0001CBE2 2029 000A                  		move.l	$A(a1),d0
0001CBE6 1029 0009                  		move.b	9(a1),d0
0001CBEA E098                       		ror.l	#8,d0
0001CBEC 2C80                       		move.l	d0,(a6)
0001CBEE 43E9 0010                  		lea	$10(a1),a1
0001CBF2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CBF6 4E75                       		rts	
0001CBF8                            ; ===========================================================================
0001CBF8                            
0001CBF8                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CBF8 2CA9 000A                  		move.l	$A(a1),(a6)
0001CBFC 43E9 0010                  		lea	$10(a1),a1
0001CC00 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CC04 4E75                       		rts	
0001CC06                            ; ===========================================================================
0001CC06                            
0001CC06                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CC06 2029 000C                  		move.l	$C(a1),d0
0001CC0A 1029 000B                  		move.b	$B(a1),d0
0001CC0E E098                       		ror.l	#8,d0
0001CC10 2C80                       		move.l	d0,(a6)
0001CC12 43E9 0010                  		lea	$10(a1),a1
0001CC16 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CC1A 4E75                       		rts	
0001CC1C                            ; ===========================================================================
0001CC1C                            
0001CC1C                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CC1C 2CA9 000C                  		move.l	$C(a1),(a6)
0001CC20 43E9 0010                  		lea	$10(a1),a1
0001CC24 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CC28 4E75                       		rts	
0001CC2A                            ; ===========================================================================
0001CC2A                            
0001CC2A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CC2A 2029 000C                  		move.l	$C(a1),d0
0001CC2E E198                       		rol.l	#8,d0
0001CC30 1011                       		move.b	0(a1),d0
0001CC32 2C80                       		move.l	d0,(a6)
0001CC34 43E9 0010                  		lea	$10(a1),a1
0001CC38 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CC3C 4E75                       		rts	
0001CC3E                            ; ===========================================================================
0001CC3E                            
0001CC3E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CC3E 3CA9 000E                  		move.w	$E(a1),(a6)
0001CC42 3C91                       		move.w	0(a1),(a6)
0001CC44 43E9 0010                  		lea	$10(a1),a1
0001CC48 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CC4C 4E75                       		rts	
0001CC4E                            ; ===========================================================================
0001CC4E                            
0001CC4E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CC4E 2011                       		move.l	0(a1),d0
0001CC50 1029 000F                  		move.b	$F(a1),d0
0001CC54 E098                       		ror.l	#8,d0
0001CC56 2C80                       		move.l	d0,(a6)
0001CC58 43E9 0010                  		lea	$10(a1),a1
0001CC5C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CC60 4E75                       		rts	
0001CC62                            
0001CC62                            ; ---------------------------------------------------------------------------
0001CC62                            ; Animated pattern routine - giant ring
0001CC62                            ; ---------------------------------------------------------------------------
0001CC62                            
0001CC62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC62                            
0001CC62                            
0001CC62                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CC62 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CC66 6600                       		bne.s	loc_1C518
0001CC68 4E75                       		rts	
0001CC6A                            ; ===========================================================================
0001CC6A                            
0001CC6A                            loc_1C518:
0001CC6A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CC70 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CC76 7000                       		moveq	#0,d0
0001CC78 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CC7C 43F1 0000                  		lea	(a1,d0.w),a1
0001CC80 0640 8000                  		addi.w	#$8000,d0
0001CC84 E588                       		lsl.l	#2,d0
0001CC86 E448                       		lsr.w	#2,d0
0001CC88 0040 4000                  		ori.w	#$4000,d0
0001CC8C 4840                       		swap	d0
0001CC8E 2D40 0004                  		move.l	d0,4(a6)
0001CC92 323C 000D                  		move.w	#$D,d1
0001CC96 6000 FE78                  		bra.w	LoadTiles
0001CC9A                            ; End of function AniArt_GiantRing
0001CC9A                            
0001CC9A                            ; ===========================================================================
0001CC9A                            ; ---------------------------------------------------------------------------
0001CC9A                            ; Object 21 - SCORE, TIME, RINGS
0001CC9A                            ; ---------------------------------------------------------------------------
0001CC9A                            
0001CC9A                            Obj21:					; XREF: Obj_Index
0001CC9A 7000                       		moveq	#0,d0
0001CC9C 1028 0024                  		move.b	$24(a0),d0
0001CCA0 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CCA4 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CCA8                            ; ===========================================================================
0001CCA8 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CCAA 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CCAC                            ; ===========================================================================
0001CCAC                            
0001CCAC                            Obj21_Main:				; XREF: Obj21_Main
0001CCAC 5428 0024                  		addq.b	#2,$24(a0)
0001CCB0 317C 0090 0008             		move.w	#$90,8(a0)
0001CCB6 317C 0108 000A             		move.w	#$108,$A(a0)
0001CCBC 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CCC4 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CCCA 117C 0000 0001             		move.b	#0,1(a0)
0001CCD0 117C 0000 0018             		move.b	#0,$18(a0)
0001CCD6                            
0001CCD6                            Obj21_Flash:				; XREF: Obj21_Main
0001CCD6 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CCDA 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CCDC 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CCE0 4EF9 0000 DBFE             		jmp	DisplaySprite
0001CCE6                            ; ===========================================================================
0001CCE6                            
0001CCE6                            Obj21_Flash2:
0001CCE6 7000                       		moveq	#0,d0
0001CCE8 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CCEE 6600                       		bne.s	Obj21_Display
0001CCF0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CCF2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CCF8 6600                       		bne.s	Obj21_Display	; if not, branch
0001CCFA 5440                       		addq.w	#2,d0		; make time counter flash red
0001CCFC                            
0001CCFC                            Obj21_Display:
0001CCFC 1140 001A                  		move.b	d0,$1A(a0)
0001CD00 4EF9 0000 DBFE             		jmp	DisplaySprite
0001CD06                            ; ===========================================================================
0001CD06                            ; ---------------------------------------------------------------------------
0001CD06                            ; Sprite mappings - SCORE, TIME, RINGS
0001CD06                            ; ---------------------------------------------------------------------------
0001CD06                            Map_obj21:
0001CD06                            	include "_maps\obj21.asm"
0001CD06                            ; ---------------------------------------------------------------------------
0001CD06                            ; Sprite mappings - SCORE, TIME, RINGS
0001CD06                            ; ---------------------------------------------------------------------------
0001CD06 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CD0A 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CD0E 0A                         byte_1C5BC:	dc.b $A
0001CD0F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD14 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD19 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD1E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CD23 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD28 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CD2D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CD32 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD37 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD3C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD41 00                         		dc.b 0
0001CD42 0A                         byte_1C5F0:	dc.b $A
0001CD43 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD48 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD4D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD52 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CD57 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD5C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CD61 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CD66 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD6B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD70 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD75 00                         		dc.b 0
0001CD76 0A                         byte_1C624:	dc.b $A
0001CD77 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD7C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD81 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD86 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CD8B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD90 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CD95 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CD9A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD9F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDA4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDA9 00                         		dc.b 0
0001CDAA 0A                         byte_1C658:	dc.b $A
0001CDAB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CDB0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CDB5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CDBA 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CDBF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CDC4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CDC9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CDCE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CDD3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDD8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDDE 00                         		even
0001CDDE 00                         		even
0001CDDE                            
0001CDDE                            ; ---------------------------------------------------------------------------
0001CDDE                            ; Add points subroutine
0001CDDE                            ; ---------------------------------------------------------------------------
0001CDDE                            
0001CDDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDDE                            
0001CDDE                            
0001CDDE                            AddPoints:
0001CDDE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CDE4 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CDE8 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CDEC D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CDEE 223C 000F 423F             		move.l	#999999,d1
0001CDF4 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CDF6 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CDFA 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CDFC 2481                       		move.l	d1,(a2)
0001CDFE                            
0001CDFE                            loc_1C6AC:
0001CDFE 2013                       		move.l	(a3),d0
0001CE00 B092                       		cmp.l	(a2),d0
0001CE02 6500 0000                  		bcs.w	locret_1C6B6
0001CE06 2480                       		move.l	d0,(a2)
0001CE08                            
0001CE08                            locret_1C6B6:
0001CE08 4E75                       		rts	
0001CE0A                            ; End of function AddPoints
0001CE0A                            
0001CE0A                            ; ---------------------------------------------------------------------------
0001CE0A                            ; Subroutine to	update the HUD
0001CE0A                            ; ---------------------------------------------------------------------------
0001CE0A                            
0001CE0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE0A                            
0001CE0A                            
0001CE0A                            HudUpdate:
0001CE0A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CE0E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CE12 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CE16 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CE18 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CE1C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CE22 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CE26 6100 0000                  		bsr.w	Hud_Score
0001CE2A                            
0001CE2A                            Hud_ChkRings:
0001CE2A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CE2E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CE30 6A00                       		bpl.s	loc_1C6E4
0001CE32 6100 0000                  		bsr.w	Hud_LoadZero
0001CE36                            
0001CE36                            loc_1C6E4:
0001CE36 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CE3A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CE40 7200                       		moveq	#0,d1
0001CE42 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CE46 6100 0000                  		bsr.w	Hud_Rings
0001CE4A                            
0001CE4A                            Hud_ChkTime:
0001CE4A 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CE4E 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CE50 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CE54 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CE56 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CE5A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CE60 6700                       		beq.s	TimeOver	; if yes, branch
0001CE62 5221                       		addq.b	#1,-(a1)
0001CE64 0C11 003C                  		cmpi.b	#60,(a1)
0001CE68 6500                       		bcs.s	Hud_ChkLives
0001CE6A 12BC 0000                  		move.b	#0,(a1)
0001CE6E 5221                       		addq.b	#1,-(a1)
0001CE70 0C11 003C                  		cmpi.b	#60,(a1)
0001CE74 6500                       		bcs.s	loc_1C734
0001CE76 12BC 0000                  		move.b	#0,(a1)
0001CE7A 5221                       		addq.b	#1,-(a1)
0001CE7C 0C11 0009                  		cmpi.b	#9,(a1)
0001CE80 6500                       		bcs.s	loc_1C734
0001CE82 12BC 0009                  		move.b	#9,(a1)
0001CE86                            
0001CE86                            loc_1C734:
0001CE86 203C 5E40 0003             		move.l	#$5E400003,d0
0001CE8C 7200                       		moveq	#0,d1
0001CE8E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CE92 6100 0000                  		bsr.w	Hud_Mins
0001CE96 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CE9C 7200                       		moveq	#0,d1
0001CE9E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CEA2 6100 0000                  		bsr.w	Hud_Secs
0001CEA6                            
0001CEA6                            Hud_ChkLives:
0001CEA6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CEAA 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CEAC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CEB0 6100 0000                  		bsr.w	Hud_Lives
0001CEB4                            
0001CEB4                            Hud_ChkBonus:
0001CEB4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CEB8 6700                       		beq.s	Hud_End		; if not, branch
0001CEBA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CEBE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CEC8 7200                       		moveq	#0,d1
0001CECA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CECE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CED2 7200                       		moveq	#0,d1
0001CED4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CED8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CEDC                            
0001CEDC                            Hud_End:
0001CEDC 4E75                       		rts	
0001CEDE                            ; ===========================================================================
0001CEDE                            
0001CEDE                            TimeOver:				; XREF: Hud_ChkTime
0001CEDE 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CEE2 41F8 D000                  		lea	($FFFFD000).w,a0
0001CEE6 2448                       		movea.l	a0,a2
0001CEE8 6100 E908                  		bsr.w	KillSonic
0001CEEC 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CEF2 4E75                       		rts	
0001CEF4                            ; ===========================================================================
0001CEF4                            
0001CEF4                            HudDebug:				; XREF: HudUpdate
0001CEF4 6100 0000                  		bsr.w	HudDb_XY
0001CEF8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CEFC 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CEFE 6A00                       		bpl.s	HudDb_Rings
0001CF00 6100 0000                  		bsr.w	Hud_LoadZero
0001CF04                            
0001CF04                            HudDb_Rings:
0001CF04 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF08 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CF0E 7200                       		moveq	#0,d1
0001CF10 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CF14 6100 0000                  		bsr.w	Hud_Rings
0001CF18                            
0001CF18                            HudDb_ObjCount:
0001CF18 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CF1E 7200                       		moveq	#0,d1
0001CF20 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CF24 6100 0000                  		bsr.w	Hud_Secs
0001CF28 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CF2C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CF2E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CF32 6100 0000                  		bsr.w	Hud_Lives
0001CF36                            
0001CF36                            HudDb_ChkBonus:
0001CF36 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CF3A 6700                       		beq.s	HudDb_End	; if not, branch
0001CF3C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CF40 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CF4A 7200                       		moveq	#0,d1
0001CF4C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CF50 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF54 7200                       		moveq	#0,d1
0001CF56 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CF5A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF5E                            
0001CF5E                            HudDb_End:
0001CF5E 4E75                       		rts	
0001CF60                            ; End of function HudUpdate
0001CF60                            
0001CF60                            ; ---------------------------------------------------------------------------
0001CF60                            ; Subroutine to	load "0" on the	HUD
0001CF60                            ; ---------------------------------------------------------------------------
0001CF60                            
0001CF60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF60                            
0001CF60                            
0001CF60                            Hud_LoadZero:				; XREF: HudUpdate
0001CF60 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CF6A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CF6E 343C 0002                  		move.w	#2,d2
0001CF72 6000                       		bra.s	loc_1C83E
0001CF74                            ; End of function Hud_LoadZero
0001CF74                            
0001CF74                            ; ---------------------------------------------------------------------------
0001CF74                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CF74                            ; ---------------------------------------------------------------------------
0001CF74                            
0001CF74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF74                            
0001CF74                            
0001CF74                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CF74 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF7A 6100 0000                  		bsr.w	Hud_Lives
0001CF7E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CF88 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CF8C 343C 000E                  		move.w	#$E,d2
0001CF90                            
0001CF90                            loc_1C83E:				; XREF: Hud_LoadZero
0001CF90 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF94                            
0001CF94                            loc_1C842:
0001CF94 323C 000F                  		move.w	#$F,d1
0001CF98 101A                       		move.b	(a2)+,d0
0001CF9A 6B00                       		bmi.s	loc_1C85E
0001CF9C 4880                       		ext.w	d0
0001CF9E EB48                       		lsl.w	#5,d0
0001CFA0 47F1 0000                  		lea	(a1,d0.w),a3
0001CFA4                            
0001CFA4                            loc_1C852:
0001CFA4 2C9B                       		move.l	(a3)+,(a6)
0001CFA6 51C9 FFFC                  		dbf	d1,loc_1C852
0001CFAA                            
0001CFAA                            loc_1C858:
0001CFAA 51CA FFE8                  		dbf	d2,loc_1C842
0001CFAE                            
0001CFAE 4E75                       		rts	
0001CFB0                            ; ===========================================================================
0001CFB0                            
0001CFB0                            loc_1C85E:
0001CFB0 2CBC 0000 0000             		move.l	#0,(a6)
0001CFB6 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CFBA                            
0001CFBA 60EE                       		bra.s	loc_1C858
0001CFBC                            ; End of function Hud_Base
0001CFBC                            
0001CFBC                            ; ===========================================================================
0001CFBC 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CFC8 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CFCC                            ; ---------------------------------------------------------------------------
0001CFCC                            ; Subroutine to	load debug mode	numbers	patterns
0001CFCC                            ; ---------------------------------------------------------------------------
0001CFCC                            
0001CFCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFCC                            
0001CFCC                            
0001CFCC                            HudDb_XY:				; XREF: HudDebug
0001CFCC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CFD6 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CFDA 4841                       		swap	d1
0001CFDC 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CFE0 6100                       		bsr.s	HudDb_XY2
0001CFE2 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CFE6 4841                       		swap	d1
0001CFE8 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CFEC                            ; End of function HudDb_XY
0001CFEC                            
0001CFEC                            
0001CFEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFEC                            
0001CFEC                            
0001CFEC                            HudDb_XY2:
0001CFEC 7C07                       		moveq	#7,d6
0001CFEE 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001CFF4                            
0001CFF4                            HudDb_XYLoop:
0001CFF4 E959                       		rol.w	#4,d1
0001CFF6 3401                       		move.w	d1,d2
0001CFF8 0242 000F                  		andi.w	#$F,d2
0001CFFC 0C42 000A                  		cmpi.w	#$A,d2
0001D000 6500                       		bcs.s	loc_1C8B2
0001D002 5E42                       		addq.w	#7,d2
0001D004                            
0001D004                            loc_1C8B2:
0001D004 EB4A                       		lsl.w	#5,d2
0001D006 47F1 2000                  		lea	(a1,d2.w),a3
0001D00A 2C9B                       		move.l	(a3)+,(a6)
0001D00C 2C9B                       		move.l	(a3)+,(a6)
0001D00E 2C9B                       		move.l	(a3)+,(a6)
0001D010 2C9B                       		move.l	(a3)+,(a6)
0001D012 2C9B                       		move.l	(a3)+,(a6)
0001D014 2C9B                       		move.l	(a3)+,(a6)
0001D016 2C9B                       		move.l	(a3)+,(a6)
0001D018 2C9B                       		move.l	(a3)+,(a6)
0001D01A 4841                       		swap	d1
0001D01C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D020                            
0001D020 4E75                       		rts	
0001D022                            ; End of function HudDb_XY2
0001D022                            
0001D022                            ; ---------------------------------------------------------------------------
0001D022                            ; Subroutine to	load rings numbers patterns
0001D022                            ; ---------------------------------------------------------------------------
0001D022                            
0001D022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D022                            
0001D022                            
0001D022                            Hud_Rings:				; XREF: HudUpdate
0001D022 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D028 7C02                       		moveq	#2,d6
0001D02A 6000                       		bra.s	Hud_LoadArt
0001D02C                            ; End of function Hud_Rings
0001D02C                            
0001D02C                            ; ---------------------------------------------------------------------------
0001D02C                            ; Subroutine to	load score numbers patterns
0001D02C                            ; ---------------------------------------------------------------------------
0001D02C                            
0001D02C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D02C                            
0001D02C                            
0001D02C                            Hud_Score:				; XREF: HudUpdate
0001D02C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D032 7C05                       		moveq	#5,d6
0001D034                            
0001D034                            Hud_LoadArt:
0001D034 7800                       		moveq	#0,d4
0001D036 43FA 0000                  		lea	Art_Hud(pc),a1
0001D03A                            
0001D03A                            Hud_ScoreLoop:
0001D03A 7400                       		moveq	#0,d2
0001D03C 261A                       		move.l	(a2)+,d3
0001D03E                            
0001D03E                            loc_1C8EC:
0001D03E 9283                       		sub.l	d3,d1
0001D040 6500                       		bcs.s	loc_1C8F4
0001D042 5242                       		addq.w	#1,d2
0001D044 60F8                       		bra.s	loc_1C8EC
0001D046                            ; ===========================================================================
0001D046                            
0001D046                            loc_1C8F4:
0001D046 D283                       		add.l	d3,d1
0001D048 4A42                       		tst.w	d2
0001D04A 6700                       		beq.s	loc_1C8FE
0001D04C 383C 0001                  		move.w	#1,d4
0001D050                            
0001D050                            loc_1C8FE:
0001D050 4A44                       		tst.w	d4
0001D052 6700                       		beq.s	loc_1C92C
0001D054 ED4A                       		lsl.w	#6,d2
0001D056 2D40 0004                  		move.l	d0,4(a6)
0001D05A 47F1 2000                  		lea	(a1,d2.w),a3
0001D05E 2C9B                       		move.l	(a3)+,(a6)
0001D060 2C9B                       		move.l	(a3)+,(a6)
0001D062 2C9B                       		move.l	(a3)+,(a6)
0001D064 2C9B                       		move.l	(a3)+,(a6)
0001D066 2C9B                       		move.l	(a3)+,(a6)
0001D068 2C9B                       		move.l	(a3)+,(a6)
0001D06A 2C9B                       		move.l	(a3)+,(a6)
0001D06C 2C9B                       		move.l	(a3)+,(a6)
0001D06E 2C9B                       		move.l	(a3)+,(a6)
0001D070 2C9B                       		move.l	(a3)+,(a6)
0001D072 2C9B                       		move.l	(a3)+,(a6)
0001D074 2C9B                       		move.l	(a3)+,(a6)
0001D076 2C9B                       		move.l	(a3)+,(a6)
0001D078 2C9B                       		move.l	(a3)+,(a6)
0001D07A 2C9B                       		move.l	(a3)+,(a6)
0001D07C 2C9B                       		move.l	(a3)+,(a6)
0001D07E                            
0001D07E                            loc_1C92C:
0001D07E 0680 0040 0000             		addi.l	#$400000,d0
0001D084 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D088                            
0001D088 4E75                       		rts	
0001D08A                            ; End of function Hud_Score
0001D08A                            
0001D08A                            ; ---------------------------------------------------------------------------
0001D08A                            ; Subroutine to	load countdown numbers on the continue screen
0001D08A                            ; ---------------------------------------------------------------------------
0001D08A                            
0001D08A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D08A                            
0001D08A                            
0001D08A                            ContScrCounter:				; XREF: ContinueScreen
0001D08A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D094 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D09A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D0A0 7C01                       		moveq	#1,d6
0001D0A2 7800                       		moveq	#0,d4
0001D0A4 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D0A8                            
0001D0A8                            ContScr_Loop:
0001D0A8 7400                       		moveq	#0,d2
0001D0AA 261A                       		move.l	(a2)+,d3
0001D0AC                            
0001D0AC                            loc_1C95A:
0001D0AC 9283                       		sub.l	d3,d1
0001D0AE 6500                       		bcs.s	loc_1C962
0001D0B0 5242                       		addq.w	#1,d2
0001D0B2 60F8                       		bra.s	loc_1C95A
0001D0B4                            ; ===========================================================================
0001D0B4                            
0001D0B4                            loc_1C962:
0001D0B4 D283                       		add.l	d3,d1
0001D0B6 ED4A                       		lsl.w	#6,d2
0001D0B8 47F1 2000                  		lea	(a1,d2.w),a3
0001D0BC 2C9B                       		move.l	(a3)+,(a6)
0001D0BE 2C9B                       		move.l	(a3)+,(a6)
0001D0C0 2C9B                       		move.l	(a3)+,(a6)
0001D0C2 2C9B                       		move.l	(a3)+,(a6)
0001D0C4 2C9B                       		move.l	(a3)+,(a6)
0001D0C6 2C9B                       		move.l	(a3)+,(a6)
0001D0C8 2C9B                       		move.l	(a3)+,(a6)
0001D0CA 2C9B                       		move.l	(a3)+,(a6)
0001D0CC 2C9B                       		move.l	(a3)+,(a6)
0001D0CE 2C9B                       		move.l	(a3)+,(a6)
0001D0D0 2C9B                       		move.l	(a3)+,(a6)
0001D0D2 2C9B                       		move.l	(a3)+,(a6)
0001D0D4 2C9B                       		move.l	(a3)+,(a6)
0001D0D6 2C9B                       		move.l	(a3)+,(a6)
0001D0D8 2C9B                       		move.l	(a3)+,(a6)
0001D0DA 2C9B                       		move.l	(a3)+,(a6)
0001D0DC 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D0E0                            
0001D0E0 4E75                       		rts	
0001D0E2                            ; End of function ContScrCounter
0001D0E2                            
0001D0E2                            ; ===========================================================================
0001D0E2                            ; ---------------------------------------------------------------------------
0001D0E2                            ; HUD counter sizes
0001D0E2                            ; ---------------------------------------------------------------------------
0001D0E2 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D0E6 0000 2710                  Hud_10000:	dc.l 10000
0001D0EA 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D0EE 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D0F2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D0F6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D0FA                            
0001D0FA                            ; ---------------------------------------------------------------------------
0001D0FA                            ; Subroutine to	load time numbers patterns
0001D0FA                            ; ---------------------------------------------------------------------------
0001D0FA                            
0001D0FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0FA                            
0001D0FA                            
0001D0FA                            Hud_Mins:				; XREF: Hud_ChkTime
0001D0FA 45F9 0001 D0F6             		lea	(Hud_1).l,a2
0001D100 7C00                       		moveq	#0,d6
0001D102 6000                       		bra.s	loc_1C9BA
0001D104                            ; End of function Hud_Mins
0001D104                            
0001D104                            
0001D104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D104                            
0001D104                            
0001D104                            Hud_Secs:				; XREF: Hud_ChkTime
0001D104 45F9 0001 D0F2             		lea	(Hud_10).l,a2
0001D10A 7C01                       		moveq	#1,d6
0001D10C                            
0001D10C                            loc_1C9BA:
0001D10C 7800                       		moveq	#0,d4
0001D10E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D112                            
0001D112                            Hud_TimeLoop:
0001D112 7400                       		moveq	#0,d2
0001D114 261A                       		move.l	(a2)+,d3
0001D116                            
0001D116                            loc_1C9C4:
0001D116 9283                       		sub.l	d3,d1
0001D118 6500                       		bcs.s	loc_1C9CC
0001D11A 5242                       		addq.w	#1,d2
0001D11C 60F8                       		bra.s	loc_1C9C4
0001D11E                            ; ===========================================================================
0001D11E                            
0001D11E                            loc_1C9CC:
0001D11E D283                       		add.l	d3,d1
0001D120 4A42                       		tst.w	d2
0001D122 6700                       		beq.s	loc_1C9D6
0001D124 383C 0001                  		move.w	#1,d4
0001D128                            
0001D128                            loc_1C9D6:
0001D128 ED4A                       		lsl.w	#6,d2
0001D12A 2D40 0004                  		move.l	d0,4(a6)
0001D12E 47F1 2000                  		lea	(a1,d2.w),a3
0001D132 2C9B                       		move.l	(a3)+,(a6)
0001D134 2C9B                       		move.l	(a3)+,(a6)
0001D136 2C9B                       		move.l	(a3)+,(a6)
0001D138 2C9B                       		move.l	(a3)+,(a6)
0001D13A 2C9B                       		move.l	(a3)+,(a6)
0001D13C 2C9B                       		move.l	(a3)+,(a6)
0001D13E 2C9B                       		move.l	(a3)+,(a6)
0001D140 2C9B                       		move.l	(a3)+,(a6)
0001D142 2C9B                       		move.l	(a3)+,(a6)
0001D144 2C9B                       		move.l	(a3)+,(a6)
0001D146 2C9B                       		move.l	(a3)+,(a6)
0001D148 2C9B                       		move.l	(a3)+,(a6)
0001D14A 2C9B                       		move.l	(a3)+,(a6)
0001D14C 2C9B                       		move.l	(a3)+,(a6)
0001D14E 2C9B                       		move.l	(a3)+,(a6)
0001D150 2C9B                       		move.l	(a3)+,(a6)
0001D152 0680 0040 0000             		addi.l	#$400000,d0
0001D158 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D15C                            
0001D15C 4E75                       		rts	
0001D15E                            ; End of function Hud_Secs
0001D15E                            
0001D15E                            ; ---------------------------------------------------------------------------
0001D15E                            ; Subroutine to	load time/ring bonus numbers patterns
0001D15E                            ; ---------------------------------------------------------------------------
0001D15E                            
0001D15E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D15E                            
0001D15E                            
0001D15E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D15E 45F9 0001 D0EA             		lea	(Hud_1000).l,a2
0001D164 7C03                       		moveq	#3,d6
0001D166 7800                       		moveq	#0,d4
0001D168 43FA 0000                  		lea	Art_Hud(pc),a1
0001D16C                            
0001D16C                            Hud_BonusLoop:
0001D16C 7400                       		moveq	#0,d2
0001D16E 261A                       		move.l	(a2)+,d3
0001D170                            
0001D170                            loc_1CA1E:
0001D170 9283                       		sub.l	d3,d1
0001D172 6500                       		bcs.s	loc_1CA26
0001D174 5242                       		addq.w	#1,d2
0001D176 60F8                       		bra.s	loc_1CA1E
0001D178                            ; ===========================================================================
0001D178                            
0001D178                            loc_1CA26:
0001D178 D283                       		add.l	d3,d1
0001D17A 4A42                       		tst.w	d2
0001D17C 6700                       		beq.s	loc_1CA30
0001D17E 383C 0001                  		move.w	#1,d4
0001D182                            
0001D182                            loc_1CA30:
0001D182 4A44                       		tst.w	d4
0001D184 6700                       		beq.s	Hud_ClrBonus
0001D186 ED4A                       		lsl.w	#6,d2
0001D188 47F1 2000                  		lea	(a1,d2.w),a3
0001D18C 2C9B                       		move.l	(a3)+,(a6)
0001D18E 2C9B                       		move.l	(a3)+,(a6)
0001D190 2C9B                       		move.l	(a3)+,(a6)
0001D192 2C9B                       		move.l	(a3)+,(a6)
0001D194 2C9B                       		move.l	(a3)+,(a6)
0001D196 2C9B                       		move.l	(a3)+,(a6)
0001D198 2C9B                       		move.l	(a3)+,(a6)
0001D19A 2C9B                       		move.l	(a3)+,(a6)
0001D19C 2C9B                       		move.l	(a3)+,(a6)
0001D19E 2C9B                       		move.l	(a3)+,(a6)
0001D1A0 2C9B                       		move.l	(a3)+,(a6)
0001D1A2 2C9B                       		move.l	(a3)+,(a6)
0001D1A4 2C9B                       		move.l	(a3)+,(a6)
0001D1A6 2C9B                       		move.l	(a3)+,(a6)
0001D1A8 2C9B                       		move.l	(a3)+,(a6)
0001D1AA 2C9B                       		move.l	(a3)+,(a6)
0001D1AC                            
0001D1AC                            loc_1CA5A:
0001D1AC 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D1B0                            
0001D1B0 4E75                       		rts	
0001D1B2                            ; ===========================================================================
0001D1B2                            
0001D1B2                            Hud_ClrBonus:
0001D1B2 7A0F                       		moveq	#$F,d5
0001D1B4                            
0001D1B4                            Hud_ClrBonusLoop:
0001D1B4 2CBC 0000 0000             		move.l	#0,(a6)
0001D1BA 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D1BE                            
0001D1BE 60EC                       		bra.s	loc_1CA5A
0001D1C0                            ; End of function Hud_TimeRingBonus
0001D1C0                            
0001D1C0                            ; ---------------------------------------------------------------------------
0001D1C0                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D1C0                            ; ---------------------------------------------------------------------------
0001D1C0                            
0001D1C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1C0                            
0001D1C0                            
0001D1C0                            Hud_Lives:				; XREF: Hud_ChkLives
0001D1C0 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D1C6 7200                       		moveq	#0,d1
0001D1C8 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D1CC 45F9 0001 D0F2             		lea	(Hud_10).l,a2
0001D1D2 7C01                       		moveq	#1,d6
0001D1D4 7800                       		moveq	#0,d4
0001D1D6 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D1DA                            
0001D1DA                            Hud_LivesLoop:
0001D1DA 2D40 0004                  		move.l	d0,4(a6)
0001D1DE 7400                       		moveq	#0,d2
0001D1E0 261A                       		move.l	(a2)+,d3
0001D1E2                            
0001D1E2                            loc_1CA90:
0001D1E2 9283                       		sub.l	d3,d1
0001D1E4 6500                       		bcs.s	loc_1CA98
0001D1E6 5242                       		addq.w	#1,d2
0001D1E8 60F8                       		bra.s	loc_1CA90
0001D1EA                            ; ===========================================================================
0001D1EA                            
0001D1EA                            loc_1CA98:
0001D1EA D283                       		add.l	d3,d1
0001D1EC 4A42                       		tst.w	d2
0001D1EE 6700                       		beq.s	loc_1CAA2
0001D1F0 383C 0001                  		move.w	#1,d4
0001D1F4                            
0001D1F4                            loc_1CAA2:
0001D1F4 4A44                       		tst.w	d4
0001D1F6 6700                       		beq.s	Hud_ClrLives
0001D1F8                            
0001D1F8                            loc_1CAA6:
0001D1F8 EB4A                       		lsl.w	#5,d2
0001D1FA 47F1 2000                  		lea	(a1,d2.w),a3
0001D1FE 2C9B                       		move.l	(a3)+,(a6)
0001D200 2C9B                       		move.l	(a3)+,(a6)
0001D202 2C9B                       		move.l	(a3)+,(a6)
0001D204 2C9B                       		move.l	(a3)+,(a6)
0001D206 2C9B                       		move.l	(a3)+,(a6)
0001D208 2C9B                       		move.l	(a3)+,(a6)
0001D20A 2C9B                       		move.l	(a3)+,(a6)
0001D20C 2C9B                       		move.l	(a3)+,(a6)
0001D20E                            
0001D20E                            loc_1CABC:
0001D20E 0680 0040 0000             		addi.l	#$400000,d0
0001D214 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D218                            
0001D218 4E75                       		rts	
0001D21A                            ; ===========================================================================
0001D21A                            
0001D21A                            Hud_ClrLives:
0001D21A 4A46                       		tst.w	d6
0001D21C 67DA                       		beq.s	loc_1CAA6
0001D21E 7A07                       		moveq	#7,d5
0001D220                            
0001D220                            Hud_ClrLivesLoop:
0001D220 2CBC 0000 0000             		move.l	#0,(a6)
0001D226 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D22A 60E2                       		bra.s	loc_1CABC
0001D22C                            ; End of function Hud_Lives
0001D22C                            
0001D22C                            ; ===========================================================================
0001D22C                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D52C                            		even
0001D52C                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D66C                            		even
0001D66C                            ; ===========================================================================
0001D66C                            ; ---------------------------------------------------------------------------
0001D66C                            ; When debug mode is currently in use
0001D66C                            ; ---------------------------------------------------------------------------
0001D66C                            
0001D66C                            DebugMode:				; XREF: Obj01; Obj09
0001D66C 7000                       		moveq	#0,d0
0001D66E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D672 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D676 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D67A                            ; ===========================================================================
0001D67A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D67C 0000                       		dc.w Debug_Skip-Debug_Index
0001D67E                            ; ===========================================================================
0001D67E                            
0001D67E                            Debug_Main:				; XREF: Debug_Index
0001D67E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D682 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D688 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D68E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D694 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D69A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D6A0 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D6A6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D6AC 117C 0000 001A             		move.b	#0,$1A(a0)
0001D6B2 117C 0000 001C             		move.b	#0,$1C(a0)
0001D6B8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D6BE 6600                       		bne.s	Debug_Zone	; if not, branch
0001D6C0 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D6C6 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D6CC 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D6CE 6000                       		bra.s	Debug_UseList
0001D6D0                            ; ===========================================================================
0001D6D0                            
0001D6D0                            Debug_Zone:
0001D6D0 7000                       		moveq	#0,d0
0001D6D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D6D6                            
0001D6D6                            Debug_UseList:
0001D6D6 45F9 0000 0000             		lea	(DebugList).l,a2
0001D6DC D040                       		add.w	d0,d0
0001D6DE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D6E2 3C1A                       		move.w	(a2)+,d6
0001D6E4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6E8 6200                       		bhi.s	loc_1CF9E
0001D6EA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D6F0                            
0001D6F0                            loc_1CF9E:
0001D6F0 6100 0000                  		bsr.w	Debug_ShowItem
0001D6F4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D6FA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D700                            
0001D700                            Debug_Skip:				; XREF: Debug_Index
0001D700 7006                       		moveq	#6,d0
0001D702 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D708 6700                       		beq.s	loc_1CFBE
0001D70A 7000                       		moveq	#0,d0
0001D70C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D710                            
0001D710                            loc_1CFBE:
0001D710 45F9 0000 0000             		lea	(DebugList).l,a2
0001D716 D040                       		add.w	d0,d0
0001D718 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D71C 3C1A                       		move.w	(a2)+,d6
0001D71E 6100 0000                  		bsr.w	Debug_Control
0001D722 4EF9 0000 DBFE             		jmp	DisplaySprite
0001D728                            
0001D728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D728                            
0001D728                            
0001D728                            Debug_Control:
0001D728 7800                       		moveq	#0,d4
0001D72A 323C 0001                  		move.w	#1,d1
0001D72E 1838 F605                  		move.b	($FFFFF605).w,d4
0001D732 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D736 6600                       		bne.s	loc_1D018	; if yes, branch
0001D738 1038 F604                  		move.b	($FFFFF604).w,d0
0001D73C 0240 000F                  		andi.w	#$F,d0
0001D740 6600                       		bne.s	loc_1D000
0001D742 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D748 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D74E 6000 0000                  		bra.w	Debug_BackItem
0001D752                            ; ===========================================================================
0001D752                            
0001D752                            loc_1D000:
0001D752 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D756 6600                       		bne.s	loc_1D01C
0001D758 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D75E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D762 6600                       		bne.s	loc_1D018
0001D764 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D76A                            
0001D76A                            loc_1D018:
0001D76A 1838 F604                  		move.b	($FFFFF604).w,d4
0001D76E                            
0001D76E                            loc_1D01C:
0001D76E 7200                       		moveq	#0,d1
0001D770 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D774 5241                       		addq.w	#1,d1
0001D776 4841                       		swap	d1
0001D778 E881                       		asr.l	#4,d1
0001D77A 2428 000C                  		move.l	$C(a0),d2
0001D77E 2628 0008                  		move.l	8(a0),d3
0001D782 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D786 6700                       		beq.s	loc_1D03C	; if not, branch
0001D788 9481                       		sub.l	d1,d2
0001D78A 6400                       		bcc.s	loc_1D03C
0001D78C 7400                       		moveq	#0,d2
0001D78E                            
0001D78E                            loc_1D03C:
0001D78E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D792 6700                       		beq.s	loc_1D052	; if not, branch
0001D794 D481                       		add.l	d1,d2
0001D796 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D79C 6500                       		bcs.s	loc_1D052
0001D79E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D7A4                            
0001D7A4                            loc_1D052:
0001D7A4 0804 0002                  		btst	#2,d4
0001D7A8 6700                       		beq.s	loc_1D05E
0001D7AA 9681                       		sub.l	d1,d3
0001D7AC 6400                       		bcc.s	loc_1D05E
0001D7AE 7600                       		moveq	#0,d3
0001D7B0                            
0001D7B0                            loc_1D05E:
0001D7B0 0804 0003                  		btst	#3,d4
0001D7B4 6700                       		beq.s	loc_1D066
0001D7B6 D681                       		add.l	d1,d3
0001D7B8                            
0001D7B8                            loc_1D066:
0001D7B8 2142 000C                  		move.l	d2,$C(a0)
0001D7BC 2143 0008                  		move.l	d3,8(a0)
0001D7C0                            
0001D7C0                            Debug_BackItem:
0001D7C0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D7C6 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D7C8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D7CE 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D7D0 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D7D4 6400                       		bcc.s	Debug_NoLoop
0001D7D6 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D7DA 6000                       		bra.s	Debug_NoLoop
0001D7DC                            ; ===========================================================================
0001D7DC                            
0001D7DC                            Debug_NextItem:
0001D7DC 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D7E2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D7E4 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D7E8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D7EC 6200                       		bhi.s	Debug_NoLoop
0001D7EE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D7F4                            
0001D7F4                            Debug_NoLoop:
0001D7F4 6000 0000                  		bra.w	Debug_ShowItem
0001D7F8                            ; ===========================================================================
0001D7F8                            
0001D7F8                            Debug_MakeItem:
0001D7F8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D7FE 6700                       		beq.s	Debug_Exit	; if not, branch
0001D800 4EB9 0000 E084             		jsr	SingleObjLoad
0001D806 6600                       		bne.s	Debug_Exit
0001D808 3368 0008 0008             		move.w	8(a0),8(a1)
0001D80E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D814 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D818 1368 0001 0001             		move.b	1(a0),1(a1)
0001D81E 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D824 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D82A 7000                       		moveq	#0,d0
0001D82C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D830 E748                       		lsl.w	#3,d0
0001D832 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D838 4E75                       		rts	
0001D83A                            ; ===========================================================================
0001D83A                            
0001D83A                            Debug_Exit:
0001D83A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D840 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D842 7000                       		moveq	#0,d0
0001D844 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D848 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D850 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D856 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D85A 3140 000A                  		move.w	d0,$A(a0)
0001D85E 3140 000E                  		move.w	d0,$E(a0)
0001D862 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D868 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D86E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D874 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D876 4278 F780                  		clr.w	($FFFFF780).w
0001D87A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D880 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D888 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D88E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D894 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D89A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D8A0                            
0001D8A0                            Debug_DoNothing:
0001D8A0 4E75                       		rts	
0001D8A2                            ; End of function Debug_Control
0001D8A2                            
0001D8A2                            
0001D8A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8A2                            
0001D8A2                            
0001D8A2                            Debug_ShowItem:				; XREF: Debug_Main
0001D8A2 7000                       		moveq	#0,d0
0001D8A4 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D8A8 E748                       		lsl.w	#3,d0
0001D8AA 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D8B0 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D8B6 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D8BC 4E75                       		rts	
0001D8BE                            ; End of function Debug_ShowItem
0001D8BE                            
0001D8BE                            ; ===========================================================================
0001D8BE                            ; ---------------------------------------------------------------------------
0001D8BE                            ; Debug	list pointers
0001D8BE                            ; ---------------------------------------------------------------------------
0001D8BE                            DebugList:
0001D8BE                            	include "_inc\Debug list pointers.asm"
0001D8BE                            ; ---------------------------------------------------------------------------
0001D8BE                            ; Debug	list pointers
0001D8BE                            ; ---------------------------------------------------------------------------
0001D8BE 0000                       	dc.w Debug_GHZ-DebugList
0001D8C0 0000                       	dc.w Debug_LZ-DebugList
0001D8C2 0000                       	dc.w Debug_MZ-DebugList
0001D8C4 0000                       	dc.w Debug_SLZ-DebugList
0001D8C6 0000                       	dc.w Debug_SYZ-DebugList
0001D8C8 0000                       	dc.w Debug_SBZ-DebugList
0001D8CA 0000                       	dc.w Debug_Ending-DebugList
0001D8CA 0000                       	dc.w Debug_Ending-DebugList
0001D8CC                            
0001D8CC                            ; ---------------------------------------------------------------------------
0001D8CC                            ; Debug	list - Green Hill
0001D8CC                            ; ---------------------------------------------------------------------------
0001D8CC                            Debug_GHZ:
0001D8CC                            	include "_inc\Debug list - GHZ.asm"
0001D8CC                            ; ---------------------------------------------------------------------------
0001D8CC                            ; Debug	list - Green Hill
0001D8CC                            ; ---------------------------------------------------------------------------
0001D8CC 0010                       	dc.w $10			; number of items in list
0001D8CE 2500 A466                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D8D2 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D8D6 2600 AA6C                  	dc.l Map_obj26+$26000000
0001D8DA 0000 0680                  	dc.b 0,	0, 6, $80
0001D8DE 1F00 9C5E                  	dc.l Map_obj1F+$1F000000
0001D8E2 0000 0400                  	dc.b 0,	0, 4, 0
0001D8E6 2200 9F1A                  	dc.l Map_obj22+$22000000
0001D8EA 0000 0444                  	dc.b 0,	0, 4, $44
0001D8EE 2B00 B0E0                  	dc.l Map_obj2B+$2B000000
0001D8F2 0000 047B                  	dc.b 0,	0, 4, $7B
0001D8F6 3600 D5E6                  	dc.l Map_obj36+$36000000
0001D8FA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8FE 1800 860C                  	dc.l Map_obj18+$18000000
0001D902 0000 4000                  	dc.b 0,	0, $40,	0
0001D906 3B00 D70C                  	dc.l Map_obj3B+$3B000000
0001D90A 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D90E 4000 FD98                  	dc.l Map_obj40+$40000000
0001D912 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D916 4100 E312                  	dc.l Map_obj41+$41000000
0001D91A 0000 0523                  	dc.b 0,	0, 5, $23
0001D91E 4200 E538                  	dc.l Map_obj42+$42000000
0001D922 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D926 4400 E846                  	dc.l Map_obj44+$44000000
0001D92A 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D92E 1900 867A                  	dc.l Map_obj48+$19000000
0001D932 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D936 7901 77D6                  	dc.l Map_obj79+$79000000
0001D93A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D93E 4B00 A4A6                  	dc.l Map_obj4B+$4B000000
0001D942 0000 2400                  	dc.b 0,	0, $24,	0
0001D946 7D01 7926                  	dc.l Map_obj7D+$7D000000
0001D94A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D94E                            	even
0001D94E                            	even
0001D94E                            
0001D94E                            ; ---------------------------------------------------------------------------
0001D94E                            ; Debug	list - Labyrinth
0001D94E                            ; ---------------------------------------------------------------------------
0001D94E                            Debug_LZ:
0001D94E                            	include "_inc\Debug list - LZ.asm"
0001D94E                            ; ---------------------------------------------------------------------------
0001D94E                            ; Debug	list - Labyrinth
0001D94E                            ; ---------------------------------------------------------------------------
0001D94E 0019                       	dc.w $19
0001D950 2500 A466                  	dc.l Map_obj25+$25000000
0001D954 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D958 2600 AA6C                  	dc.l Map_obj26+$26000000
0001D95C 0000 0680                  	dc.b 0,	0, 6, $80
0001D960 4100 E312                  	dc.l Map_obj41+$41000000
0001D964 0000 0523                  	dc.b 0,	0, 5, $23
0001D968 2C00 B186                  	dc.l Map_obj2C+$2C000000
0001D96C 0800 2486                  	dc.b 8,	0, $24,	$86
0001D970 2D00 B37A                  	dc.l Map_obj2D+$2D000000
0001D974 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D978 1601 256C                  	dc.l Map_obj16+$16000000
0001D97C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D980 1601 256C                  	dc.l Map_obj16+$16000000
0001D984 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D988 3300 C832                  	dc.l Map_obj33+$33000000
0001D98C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D990 3200 C3F2                  	dc.l Map_obj32+$32000000
0001D994 0000 0513                  	dc.b 0,	0, 5, $13
0001D998 3600 D5E6                  	dc.l Map_obj36+$36000000
0001D99C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9A0 5201 068E                  	dc.l Map_obj52a+$52000000
0001D9A4 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D9A8 6101 2794                  	dc.l Map_obj61+$61000000
0001D9AC 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D9B0 6101 2794                  	dc.l Map_obj61+$61000000
0001D9B4 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D9B8 6101 2794                  	dc.l Map_obj61+$61000000
0001D9BC 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D9C0 6201 28E8                  	dc.l Map_obj62+$62000000
0001D9C4 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D9C8 6101 2794                  	dc.l Map_obj61+$61000000
0001D9CC 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D9D0 6101 2794                  	dc.l Map_obj61+$61000000
0001D9D4 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D9D8 6301 2C4A                  	dc.l Map_obj63+$63000000
0001D9DC 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D9E0 6001 24B6                  	dc.l Map_obj60+$60000000
0001D9E4 0000 0467                  	dc.b 0,	0, 4, $67
0001D9E8 6401 2F90                  	dc.l Map_obj64+$64000000
0001D9EC 8413 8348                  	dc.b $84, $13, $83, $48
0001D9F0 6501 3118                  	dc.l Map_obj65+$65000000
0001D9F4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D9F8 6501 3118                  	dc.l Map_obj65+$65000000
0001D9FC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DA00 0B01 1906                  	dc.l Map_obj0B+$B000000
0001DA04 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DA08 0C01 19D6                  	dc.l Map_obj0C+$C000000
0001DA0C 0200 4328                  	dc.b 2,	0, $43,	$28
0001DA10 7901 77D6                  	dc.l Map_obj79+$79000000
0001DA14 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA18                            	even
0001DA18                            	even
0001DA18                            
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            ; Debug	list - Marble
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            Debug_MZ:
0001DA18                            	include "_inc\Debug list - MZ.asm"
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            ; Debug	list - Marble
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18 0012                       	dc.w $12
0001DA1A 2500 A466                  	dc.l Map_obj25+$25000000
0001DA1E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA22 2600 AA6C                  	dc.l Map_obj26+$26000000
0001DA26 0000 0680                  	dc.b 0,	0, 6, $80
0001DA2A 2200 9F1A                  	dc.l Map_obj22+$22000000
0001DA2E 0000 0444                  	dc.b 0,	0, 4, $44
0001DA32 3600 D5E6                  	dc.l Map_obj36+$36000000
0001DA36 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA3A 4100 E312                  	dc.l Map_obj41+$41000000
0001DA3E 0000 0523                  	dc.b 0,	0, 5, $23
0001DA42 1300 B8BC                  	dc.l Map_obj14+$13000000
0001DA46 0000 0345                  	dc.b 0,	0, 3, $45
0001DA4A 4600 EEF8                  	dc.l Map_obj46+$46000000
0001DA4E 0000 4000                  	dc.b 0,	0, $40,	0
0001DA52 4C00 F844                  	dc.l Map_obj4C+$4C000000
0001DA56 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DA5A 4E00 FB28                  	dc.l Map_obj4E+$4E000000
0001DA5E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DA62 3300 C832                  	dc.l Map_obj33+$33000000
0001DA66 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DA6A 5000 FF26                  	dc.l Map_obj50+$50000000
0001DA6E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA72 5101 03C2                  	dc.l Map_obj51+$51000000
0001DA76 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DA7A 5201 0638                  	dc.l Map_obj52+$52000000
0001DA7E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DA82 5300 8C12                  	dc.l Map_obj53+$53000000
0001DA86 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DA8A 5400 F80A                  	dc.l Map_obj54+$54000000
0001DA8E 0000 8680                  	dc.b 0,	0, $86,	$80
0001DA92 5501 082C                  	dc.l Map_obj55+$55000000
0001DA96 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA9A 7801 7450                  	dc.l Map_obj78+$78000000
0001DA9E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DAA2 7901 77D6                  	dc.l Map_obj79+$79000000
0001DAA6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAAA                            	even
0001DAAA                            	even
0001DAAA                            
0001DAAA                            ; ---------------------------------------------------------------------------
0001DAAA                            ; Debug	list - Star Light
0001DAAA                            ; ---------------------------------------------------------------------------
0001DAAA                            Debug_SLZ:
0001DAAA                            	include "_inc\Debug list - SLZ.asm"
0001DAAA                            ; ---------------------------------------------------------------------------
0001DAAA                            ; Debug	list - Star Light
0001DAAA                            ; ---------------------------------------------------------------------------
0001DAAA 000F                       	dc.w $F
0001DAAC 2500 A466                  	dc.l Map_obj25+$25000000
0001DAB0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAB4 2600 AA6C                  	dc.l Map_obj26+$26000000
0001DAB8 0000 0680                  	dc.b 0,	0, 6, $80
0001DABC 5901 132E                  	dc.l Map_obj59+$59000000
0001DAC0 0000 4000                  	dc.b 0,	0, $40,	0
0001DAC4 5300 8C12                  	dc.l Map_obj53+$53000000
0001DAC8 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DACC 1800 866A                  	dc.l Map_obj18b+$18000000
0001DAD0 0000 4000                  	dc.b 0,	0, $40,	0
0001DAD4 5A01 1468                  	dc.l Map_obj5A+$5A000000
0001DAD8 0000 4000                  	dc.b 0,	0, $40,	0
0001DADC 5B01 1620                  	dc.l Map_obj5B+$5B000000
0001DAE0 0000 4000                  	dc.b 0,	0, $40,	0
0001DAE4 5D01 1BF0                  	dc.l Map_obj5D+$5D000000
0001DAE8 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DAEC 5E01 1F82                  	dc.l Map_obj5E+$5E000000
0001DAF0 0000 0374                  	dc.b 0,	0, 3, $74
0001DAF4 4100 E312                  	dc.l Map_obj41+$41000000
0001DAF8 0000 0523                  	dc.b 0,	0, 5, $23
0001DAFC 1300 B8BC                  	dc.l Map_obj14+$13000000
0001DB00 0000 0480                  	dc.b 0,	0, 4, $80
0001DB04 1C00 8D22                  	dc.l Map_obj1C+$1C000000
0001DB08 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DB0C 5F01 2200                  	dc.l Map_obj5F+$5F000000
0001DB10 0000 0400                  	dc.b 0,	0, 4, 0
0001DB14 6001 24B6                  	dc.l Map_obj60+$60000000
0001DB18 0000 2429                  	dc.b 0,	0, $24,	$29
0001DB1C 7901 77D6                  	dc.l Map_obj79+$79000000
0001DB20 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB24                            	even
0001DB24                            	even
0001DB24                            
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            ; Debug	list - Spring Yard
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            Debug_SYZ:
0001DB24                            	include "_inc\Debug list - SYZ.asm"
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            ; Debug	list - Spring Yard
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24 000F                       	dc.w $F
0001DB26 2500 A466                  	dc.l Map_obj25+$25000000
0001DB2A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB2E 2600 AA6C                  	dc.l Map_obj26+$26000000
0001DB32 0000 0680                  	dc.b 0,	0, 6, $80
0001DB36 3600 D5E6                  	dc.l Map_obj36+$36000000
0001DB3A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB3E 4100 E312                  	dc.l Map_obj41+$41000000
0001DB42 0000 0523                  	dc.b 0,	0, 5, $23
0001DB46 4300 E798                  	dc.l Map_obj43+$43000000
0001DB4A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DB4E 1200 EF76                  	dc.l Map_obj12+$12000000
0001DB52 0000 0000                  	dc.b 0,	0, 0, 0
0001DB56 4700 F0F2                  	dc.l Map_obj47+$47000000
0001DB5A 0000 0380                  	dc.b 0,	0, 3, $80
0001DB5E 1F00 9C5E                  	dc.l Map_obj1F+$1F000000
0001DB62 0000 0400                  	dc.b 0,	0, 4, 0
0001DB66 2200 9F1A                  	dc.l Map_obj22+$22000000
0001DB6A 0000 0444                  	dc.b 0,	0, 4, $44
0001DB6E 5000 FF26                  	dc.l Map_obj50+$50000000
0001DB72 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB76 1800 8658                  	dc.l Map_obj18a+$18000000
0001DB7A 0000 4000                  	dc.b 0,	0, $40,	0
0001DB7E 5601 0CEE                  	dc.l Map_obj56+$56000000
0001DB82 0000 4000                  	dc.b 0,	0, $40,	0
0001DB86 3200 C3F2                  	dc.l Map_obj32+$32000000
0001DB8A 0000 0513                  	dc.b 0,	0, 5, $13
0001DB8E 7801 7450                  	dc.l Map_obj78+$78000000
0001DB92 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DB96 7901 77D6                  	dc.l Map_obj79+$79000000
0001DB9A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB9E                            	even
0001DB9E                            	even
0001DB9E                            
0001DB9E                            ; ---------------------------------------------------------------------------
0001DB9E                            ; Debug	list - Scrap Brain
0001DB9E                            ; ---------------------------------------------------------------------------
0001DB9E                            Debug_SBZ:
0001DB9E                            	include "_inc\Debug list - SBZ.asm"
0001DB9E                            ; ---------------------------------------------------------------------------
0001DB9E                            ; Debug	list - Scrap Brain
0001DB9E                            ; ---------------------------------------------------------------------------
0001DB9E 001D                       	dc.w $1D
0001DBA0 2500 A466                  	dc.l Map_obj25+$25000000
0001DBA4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBA8 2600 AA6C                  	dc.l Map_obj26+$26000000
0001DBAC 0000 0680                  	dc.b 0,	0, 6, $80
0001DBB0 5F01 2200                  	dc.l Map_obj5F+$5F000000
0001DBB4 0000 0400                  	dc.b 0,	0, 4, 0
0001DBB8 6001 24B6                  	dc.l Map_obj60+$60000000
0001DBBC 0000 0429                  	dc.b 0,	0, 4, $29
0001DBC0 7801 7450                  	dc.l Map_obj78+$78000000
0001DBC4 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DBC8 1501 108A                  	dc.l Map_obj15b+$15000000
0001DBCC 0702 4391                  	dc.b 7,	2, $43,	$91
0001DBD0 6701 5D64                  	dc.l Map_obj67+$67000000
0001DBD4 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DBD8 5201 0638                  	dc.l Map_obj52+$52000000
0001DBDC 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DBE0 3200 C3F2                  	dc.l Map_obj32+$32000000
0001DBE4 0000 0513                  	dc.b 0,	0, 5, $13
0001DBE8 6901 5FBE                  	dc.l Map_obj69+$69000000
0001DBEC 0300 4492                  	dc.b 3,	0, $44,	$92
0001DBF0 6901 6018                  	dc.l Map_obj69a+$69000000
0001DBF4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DBF8 6A01 6276                  	dc.l Map_obj6A+$6A000000
0001DBFC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DC00 5300 8C12                  	dc.l Map_obj53+$53000000
0001DC04 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DC08 5201 0638                  	dc.l Map_obj52+$52000000
0001DC0C 3903 4460                  	dc.b $39, 3, $44, $60
0001DC10 6B01 6646                  	dc.l Map_obj6B+$6B000000
0001DC14 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DC18 2A00 8EB8                  	dc.l Map_obj2A+$2A000000
0001DC1C 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DC20 6B01 6646                  	dc.l Map_obj6B+$6B000000
0001DC24 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DC28 6A01 6276                  	dc.l Map_obj6A+$6A000000
0001DC2C 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DC30 6B01 6646                  	dc.l Map_obj6B+$6B000000
0001DC34 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DC38 6A01 6276                  	dc.l Map_obj6A+$6A000000
0001DC3C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DC40 6B01 6646                  	dc.l Map_obj6B+$6B000000
0001DC44 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DC48 6C01 6808                  	dc.l Map_obj6C+$6C000000
0001DC4C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DC50 6D00 EBE8                  	dc.l Map_obj6D+$6D000000
0001DC54 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DC58 6D00 EBE8                  	dc.l Map_obj6D+$6D000000
0001DC5C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DC60 6E01 68BE                  	dc.l Map_obj6E+$6E000000
0001DC64 0400 047E                  	dc.b 4,	0, 4, $7E
0001DC68 7001 6D14                  	dc.l Map_obj70+$70000000
0001DC6C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DC70 7101 1A96                  	dc.l Map_obj71+$71000000
0001DC74 1100 8680                  	dc.b $11, 0, $86, $80
0001DC78 1E00 9376                  	dc.l Map_obj1E+$1E000000
0001DC7C 0400 2302                  	dc.b 4,	0, $23,	2
0001DC80 7901 77D6                  	dc.l Map_obj79+$79000000
0001DC84 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC88                            	even
0001DC88                            	even
0001DC88                            
0001DC88                            ; ---------------------------------------------------------------------------
0001DC88                            ; Debug	list - ending sequence / special stage
0001DC88                            ; ---------------------------------------------------------------------------
0001DC88                            Debug_Ending:
0001DC88                            	include "_inc\Debug list - Ending and SS.asm"
0001DC88                            ; ---------------------------------------------------------------------------
0001DC88                            ; Debug	list - ending sequence / special stage
0001DC88                            ; ---------------------------------------------------------------------------
0001DC88 000D                       	dc.w $D
0001DC8A 2500 A466                  	dc.l Map_obj25+$25000000
0001DC8E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC92 4700 F0F2                  	dc.l Map_obj47+$47000000
0001DC96 0000 0380                  	dc.b 0,	0, 3, $80
0001DC9A 2800 9990                  	dc.l Map_obj28a+$28000000
0001DC9E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DCA2 2800 9990                  	dc.l Map_obj28a+$28000000
0001DCA6 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DCAA 2800 9990                  	dc.l Map_obj28a+$28000000
0001DCAE 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DCB2 2800 9978                  	dc.l Map_obj28+$28000000
0001DCB6 0D00 0553                  	dc.b $D, 0, 5, $53
0001DCBA 2800 9978                  	dc.l Map_obj28+$28000000
0001DCBE 0E00 0553                  	dc.b $E, 0, 5, $53
0001DCC2 2800 9978                  	dc.l Map_obj28+$28000000
0001DCC6 0F00 0573                  	dc.b $F, 0, 5, $73
0001DCCA 2800 9978                  	dc.l Map_obj28+$28000000
0001DCCE 1000 0573                  	dc.b $10, 0, 5,	$73
0001DCD2 2800 9990                  	dc.l Map_obj28a+$28000000
0001DCD6 1100 0585                  	dc.b $11, 0, 5,	$85
0001DCDA 2800 99A8                  	dc.l Map_obj28b+$28000000
0001DCDE 1200 0593                  	dc.b $12, 0, 5,	$93
0001DCE2 2800 9990                  	dc.l Map_obj28a+$28000000
0001DCE6 1300 0565                  	dc.b $13, 0, 5,	$65
0001DCEA 2800 99A8                  	dc.l Map_obj28b+$28000000
0001DCEE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DCF2                            	even
0001DCF2                            	even
0001DCF2                            
0001DCF2                            ; ---------------------------------------------------------------------------
0001DCF2                            ; Main level load blocks
0001DCF2                            ; ---------------------------------------------------------------------------
0001DCF2                            MainLoadBlocks:
0001DCF2                            	include "_inc\Main level load blocks.asm"
0001DCF2                            ; ---------------------------------------------------------------------------
0001DCF2                            ; Main level load blocks
0001DCF2                            ;
0001DCF2                            ; ===FORMAT===
0001DCF2                            ; level	patterns + (1st	PLC num	* 10^6)
0001DCF2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DCF2                            ; 256x256 mappings
0001DCF2                            ; blank, music (unused), pal index (unused), pal index
0001DCF2                            ; ---------------------------------------------------------------------------
0001DCF2 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DCF6 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DCFA 0000 0000                  	dc.l Blk256_GHZ
0001DCFE 0081 0404                  	dc.b 0,	$81, 4,	4
0001DD02 0000 0000                  	dc.l Nem_LZ+$6000000
0001DD06 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DD0A 0000 0000                  	dc.l Blk256_LZ
0001DD0E 0082 0505                  	dc.b 0,	$82, 5,	5
0001DD12 0000 0000                  	dc.l Nem_MZ+$8000000
0001DD16 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DD1A 0000 0000                  	dc.l Blk256_MZ
0001DD1E 0083 0606                  	dc.b 0,	$83, 6,	6
0001DD22 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DD26 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DD2A 0000 0000                  	dc.l Blk256_SLZ
0001DD2E 0084 0707                  	dc.b 0,	$84, 7,	7
0001DD32 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DD36 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DD3A 0000 0000                  	dc.l Blk256_SYZ
0001DD3E 0085 0808                  	dc.b 0,	$85, 8,	8
0001DD42 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DD46 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DD4A 0000 0000                  	dc.l Blk256_SBZ
0001DD4E 0086 0909                  	dc.b 0,	$86, 9,	9
0001DD52 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DD56 0000 0000                  	dc.l Blk16_GHZ
0001DD5A 0000 0000                  	dc.l Blk256_GHZ
0001DD5E 0086 1313                  	dc.b 0,	$86, $13, $13
0001DD62                            	even
0001DD62                            	even
0001DD62                            
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Pattern load cues
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ArtLoadCues:
0001DD62                            	include "_inc\Pattern load cues.asm"
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Pattern load cues - index
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DD66 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DD6A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DD6E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DD72 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DD76 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DD7A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DD7E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DD82 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DD86 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DD8A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DD8E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DD92 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DD96 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DD9A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DD9E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DDA2                            ; ---------------------------------------------------------------------------
0001DDA2                            ; Pattern load cues - standard block 1
0001DDA2                            ; ---------------------------------------------------------------------------
0001DDA2 0004                       PLC_Main:	dc.w 4
0001DDA4 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DDA8 F400                       		dc.w $F400
0001DDAA 0000 0000                  		dc.l Nem_Hud		; HUD
0001DDAE D940                       		dc.w $D940
0001DDB0 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DDB4 FA80                       		dc.w $FA80
0001DDB6 0000 0000                  		dc.l Nem_Ring		; rings
0001DDBA F640                       		dc.w $F640
0001DDBC 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DDC0 F2E0                       		dc.w $F2E0
0001DDC2                            ; ---------------------------------------------------------------------------
0001DDC2                            ; Pattern load cues - standard block 2
0001DDC2                            ; ---------------------------------------------------------------------------
0001DDC2 0002                       PLC_Main2:	dc.w 2
0001DDC4 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DDC8 D000                       		dc.w $D000
0001DDCA 0000 0000                  		dc.l Nem_Shield		; shield
0001DDCE A820                       		dc.w $A820
0001DDD0 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DDD4 AB80                       		dc.w $AB80
0001DDD6                            ; ---------------------------------------------------------------------------
0001DDD6                            ; Pattern load cues - explosion
0001DDD6                            ; ---------------------------------------------------------------------------
0001DDD6 0000                       PLC_Explode:	dc.w 0
0001DDD8 0000 0000                  		dc.l Nem_Explode	; explosion
0001DDDC B400                       		dc.w $B400
0001DDDE                            ; ---------------------------------------------------------------------------
0001DDDE                            ; Pattern load cues - game/time	over
0001DDDE                            ; ---------------------------------------------------------------------------
0001DDDE 0000                       PLC_GameOver:	dc.w 0
0001DDE0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DDE4 ABC0                       		dc.w $ABC0
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6                            ; Pattern load cues - Green Hill
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6 000B                       PLC_GHZ:	dc.w $B
0001DDE8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DDEC 0000                       		dc.w 0
0001DDEE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DDF2 39A0                       		dc.w $39A0
0001DDF4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DDF8 6B00                       		dc.w $6B00
0001DDFA 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DDFE 7A00                       		dc.w $7A00
0001DE00 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE04 8000                       		dc.w $8000
0001DE06 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE0A 8880                       		dc.w $8880
0001DE0C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DE10 8F60                       		dc.w $8F60
0001DE12 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DE16 9360                       		dc.w $9360
0001DE18 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DE1C 9E00                       		dc.w $9E00
0001DE1E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE22 A360                       		dc.w $A360
0001DE24 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE28 A460                       		dc.w $A460
0001DE2A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE2E A660                       		dc.w $A660
0001DE30 0005                       PLC_GHZ2:	dc.w 5
0001DE32 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DE36 7000                       		dc.w $7000
0001DE38 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DE3C 71C0                       		dc.w $71C0
0001DE3E 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DE42 7300                       		dc.w $7300
0001DE44 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DE48 7540                       		dc.w $7540
0001DE4A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DE4E A1E0                       		dc.w $A1E0
0001DE50 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DE54 6980                       		dc.w $6980
0001DE56                            ; ---------------------------------------------------------------------------
0001DE56                            ; Pattern load cues - Labyrinth
0001DE56                            ; ---------------------------------------------------------------------------
0001DE56 000B                       PLC_LZ:		dc.w $B
0001DE58 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DE5C 0000                       		dc.w 0
0001DE5E 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DE62 3C00                       		dc.w $3C00
0001DE64 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DE68 3E00                       		dc.w $3E00
0001DE6A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DE6E 4B20                       		dc.w $4B20
0001DE70 0000 0000                  		dc.l Nem_Water		; water	surface
0001DE74 6000                       		dc.w $6000
0001DE76 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DE7A 6200                       		dc.w $6200
0001DE7C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DE80 6500                       		dc.w $6500
0001DE82 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DE86 6900                       		dc.w $6900
0001DE88 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DE8C 7780                       		dc.w $7780
0001DE8E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DE92 7880                       		dc.w $7880
0001DE94 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DE98 7980                       		dc.w $7980
0001DE9A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DE9E 94C0                       		dc.w $94C0
0001DEA0 000C                       PLC_LZ2:	dc.w $C
0001DEA2 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DEA6 7BC0                       		dc.w $7BC0
0001DEA8 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DEAC 7CC0                       		dc.w $7CC0
0001DEAE 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DEB2 7EC0                       		dc.w $7EC0
0001DEB4 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DEB8 5D20                       		dc.w $5D20
0001DEBA 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DEBE 8800                       		dc.w $8800
0001DEC0 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DEC4 89E0                       		dc.w $89E0
0001DEC6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DECA 8CE0                       		dc.w $8CE0
0001DECC 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DED0 90C0                       		dc.w $90C0
0001DED2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DED6 A1E0                       		dc.w $A1E0
0001DED8 0000 0000                  		dc.l Nem_Cork		; cork block
0001DEDC A000                       		dc.w $A000
0001DEDE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEE2 A360                       		dc.w $A360
0001DEE4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEE8 A460                       		dc.w $A460
0001DEEA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEEE A660                       		dc.w $A660
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            ; Pattern load cues - Marble
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0 0009                       PLC_MZ:		dc.w 9
0001DEF2 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DEF6 0000                       		dc.w 0
0001DEF8 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DEFC 6000                       		dc.w $6000
0001DEFE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DF02 68A0                       		dc.w $68A0
0001DF04 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF08 7000                       		dc.w $7000
0001DF0A 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DF0E 71C0                       		dc.w $71C0
0001DF10 0000 0000                  		dc.l Nem_Lava		; lava
0001DF14 7500                       		dc.w $7500
0001DF16 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF1A 8880                       		dc.w $8880
0001DF1C 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DF20 8F60                       		dc.w $8F60
0001DF22 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DF26 9700                       		dc.w $9700
0001DF28 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DF2C 9FE0                       		dc.w $9FE0
0001DF2E 0004                       PLC_MZ2:	dc.w 4
0001DF30 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DF34 A260                       		dc.w $A260
0001DF36 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF3A A360                       		dc.w $A360
0001DF3C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF40 A460                       		dc.w $A460
0001DF42 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF46 A660                       		dc.w $A660
0001DF48 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DF4C 5700                       		dc.w $5700
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            ; Pattern load cues - Star Light
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E 0008                       PLC_SLZ:	dc.w 8
0001DF50 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DF54 0000                       		dc.w 0
0001DF56 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF5A 8000                       		dc.w $8000
0001DF5C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF60 8520                       		dc.w $8520
0001DF62 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DF66 9000                       		dc.w $9000
0001DF68 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DF6C 9C00                       		dc.w $9C00
0001DF6E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DF72 A260                       		dc.w $A260
0001DF74 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF78 A360                       		dc.w $A360
0001DF7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF7E A460                       		dc.w $A460
0001DF80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF84 A660                       		dc.w $A660
0001DF86 0005                       PLC_SLZ2:	dc.w 5
0001DF88 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DF8C 6E80                       		dc.w $6E80
0001DF8E 0000 0000                  		dc.l Nem_Fan		; fan
0001DF92 7400                       		dc.w $7400
0001DF94 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DF98 7980                       		dc.w $7980
0001DF9A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DF9E 7B80                       		dc.w $7B80
0001DFA0 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DFA4 9B00                       		dc.w $9B00
0001DFA6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DFAA 9E00                       		dc.w $9E00
0001DFAC                            ; ---------------------------------------------------------------------------
0001DFAC                            ; Pattern load cues - Spring Yard
0001DFAC                            ; ---------------------------------------------------------------------------
0001DFAC 0004                       PLC_SYZ:	dc.w 4
0001DFAE 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DFB2 0000                       		dc.w 0
0001DFB4 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DFB8 8000                       		dc.w $8000
0001DFBA 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DFBE 8880                       		dc.w $8880
0001DFC0 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DFC4 8F60                       		dc.w $8F60
0001DFC6 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DFCA 9700                       		dc.w $9700
0001DFCC 0007                       PLC_SYZ2:	dc.w 7
0001DFCE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFD2 7000                       		dc.w $7000
0001DFD4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DFD8 72C0                       		dc.w $72C0
0001DFDA 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DFDE 7740                       		dc.w $7740
0001DFE0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DFE4 9FE0                       		dc.w $9FE0
0001DFE6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFEA A1E0                       		dc.w $A1E0
0001DFEC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFF0 A360                       		dc.w $A360
0001DFF2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFF6 A460                       		dc.w $A460
0001DFF8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFFC A660                       		dc.w $A660
0001DFFE                            ; ---------------------------------------------------------------------------
0001DFFE                            ; Pattern load cues - Scrap Brain
0001DFFE                            ; ---------------------------------------------------------------------------
0001DFFE 000B                       PLC_SBZ:	dc.w $B
0001E000 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E004 0000                       		dc.w 0
0001E006 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E00A 5800                       		dc.w $5800
0001E00C 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E010 5D00                       		dc.w $5D00
0001E012 0000 0000                  		dc.l Nem_Girder		; girder
0001E016 5E00                       		dc.w $5E00
0001E018 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E01C 6040                       		dc.w $6040
0001E01E 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E022 6880                       		dc.w $6880
0001E024 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E028 6900                       		dc.w $6900
0001E02A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E02E 7220                       		dc.w $7220
0001E030 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E034 76A0                       		dc.w $76A0
0001E036 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E03A 7B20                       		dc.w $7B20
0001E03C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E040 7EA0                       		dc.w $7EA0
0001E042 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E046 9860                       		dc.w $9860
0001E048 000C                       PLC_SBZ2:	dc.w $C
0001E04A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E04E 5600                       		dc.w $5600
0001E050 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E054 8000                       		dc.w $8000
0001E056 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E05A 8520                       		dc.w $8520
0001E05C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E060 8C00                       		dc.w $8C00
0001E062 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E066 8DE0                       		dc.w $8DE0
0001E068 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E06C 8FC0                       		dc.w $8FC0
0001E06E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E072 9240                       		dc.w $9240
0001E074 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E078 7F20                       		dc.w $7F20
0001E07A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E07E 9BE0                       		dc.w $9BE0
0001E080 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E084 A1E0                       		dc.w $A1E0
0001E086 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E08A A360                       		dc.w $A360
0001E08C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E090 A460                       		dc.w $A460
0001E092 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E096 A660                       		dc.w $A660
0001E098                            ; ---------------------------------------------------------------------------
0001E098                            ; Pattern load cues - title card
0001E098                            ; ---------------------------------------------------------------------------
0001E098 0000                       PLC_TitleCard:	dc.w 0
0001E09A 0000 0000                  		dc.l Nem_TitleCard
0001E09E B000                       		dc.w $B000
0001E0A0                            ; ---------------------------------------------------------------------------
0001E0A0                            ; Pattern load cues - act 3 boss
0001E0A0                            ; ---------------------------------------------------------------------------
0001E0A0 0005                       PLC_Boss:	dc.w 5
0001E0A2 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E0A6 8000                       		dc.w $8000
0001E0A8 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E0AC 8D80                       		dc.w $8D80
0001E0AE 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E0B2 93A0                       		dc.w $93A0
0001E0B4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E0B8 A300                       		dc.w $A300
0001E0BA 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E0BE A300                       		dc.w $A300
0001E0C0 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E0C4 A540                       		dc.w $A540
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6                            ; Pattern load cues - act 1/2 signpost
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6 0002                       PLC_Signpost:	dc.w 2
0001E0C8 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E0CC D000                       		dc.w $D000
0001E0CE 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E0D2 96C0                       		dc.w $96C0
0001E0D4 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E0D8 8C40                       		dc.w $8C40
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA                            ; Pattern load cues - beta special stage warp effect
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA 0000                       PLC_Warp:	dc.w 0
0001E0DC 0000 0000                  		dc.l Nem_Warp
0001E0E0 A820                       		dc.w $A820
0001E0E2                            ; ---------------------------------------------------------------------------
0001E0E2                            ; Pattern load cues - special stage
0001E0E2                            ; ---------------------------------------------------------------------------
0001E0E2 0010                       PLC_SpeStage:	dc.w $10
0001E0E4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E0E8 0000                       		dc.w 0
0001E0EA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E0EE 0A20                       		dc.w $A20
0001E0F0 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E0F4 2840                       		dc.w $2840
0001E0F6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0FA 4760                       		dc.w $4760
0001E0FC 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E100 4A20                       		dc.w $4A20
0001E102 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E106 4C60                       		dc.w $4C60
0001E108 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E10C 5E00                       		dc.w $5E00
0001E10E 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E112 6E00                       		dc.w $6E00
0001E114 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E118 7E00                       		dc.w $7E00
0001E11A 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E11E 8E00                       		dc.w $8E00
0001E120 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E124 9E00                       		dc.w $9E00
0001E126 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E12A AE00                       		dc.w $AE00
0001E12C 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E130 BE00                       		dc.w $BE00
0001E132 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E136 EE00                       		dc.w $EE00
0001E138 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E13C F2E0                       		dc.w $F2E0
0001E13E 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E142 F400                       		dc.w $F400
0001E144 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E148 F520                       		dc.w $F520
0001E14A 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E14E F2E0                       		dc.w $F2E0
0001E150 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E154 F400                       		dc.w $F400
0001E156 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E15A F520                       		dc.w $F520
0001E15C                            ; ---------------------------------------------------------------------------
0001E15C                            ; Pattern load cues - GHZ animals
0001E15C                            ; ---------------------------------------------------------------------------
0001E15C 0001                       PLC_GHZAnimals:	dc.w 1
0001E15E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E162 B000                       		dc.w $B000
0001E164 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E168 B240                       		dc.w $B240
0001E16A                            ; ---------------------------------------------------------------------------
0001E16A                            ; Pattern load cues - LZ animals
0001E16A                            ; ---------------------------------------------------------------------------
0001E16A 0001                       PLC_LZAnimals:	dc.w 1
0001E16C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E170 B000                       		dc.w $B000
0001E172 0000 0000                  		dc.l Nem_Seal		; seal
0001E176 B240                       		dc.w $B240
0001E178                            ; ---------------------------------------------------------------------------
0001E178                            ; Pattern load cues - MZ animals
0001E178                            ; ---------------------------------------------------------------------------
0001E178 0001                       PLC_MZAnimals:	dc.w 1
0001E17A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E17E B000                       		dc.w $B000
0001E180 0000 0000                  		dc.l Nem_Seal		; seal
0001E184 B240                       		dc.w $B240
0001E186                            ; ---------------------------------------------------------------------------
0001E186                            ; Pattern load cues - SLZ animals
0001E186                            ; ---------------------------------------------------------------------------
0001E186 0001                       PLC_SLZAnimals:	dc.w 1
0001E188 0000 0000                  		dc.l Nem_Pig		; pig
0001E18C B000                       		dc.w $B000
0001E18E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E192 B240                       		dc.w $B240
0001E194                            ; ---------------------------------------------------------------------------
0001E194                            ; Pattern load cues - SYZ animals
0001E194                            ; ---------------------------------------------------------------------------
0001E194 0001                       PLC_SYZAnimals:	dc.w 1
0001E196 0000 0000                  		dc.l Nem_Pig		; pig
0001E19A B000                       		dc.w $B000
0001E19C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E1A0 B240                       		dc.w $B240
0001E1A2                            ; ---------------------------------------------------------------------------
0001E1A2                            ; Pattern load cues - SBZ animals
0001E1A2                            ; ---------------------------------------------------------------------------
0001E1A2 0001                       PLC_SBZAnimals:	dc.w 1
0001E1A4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E1A8 B000                       		dc.w $B000
0001E1AA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E1AE B240                       		dc.w $B240
0001E1B0                            ; ---------------------------------------------------------------------------
0001E1B0                            ; Pattern load cues - special stage results screen
0001E1B0                            ; ---------------------------------------------------------------------------
0001E1B0 0001                       PLC_SpeStResult:dc.w 1
0001E1B2 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E1B6 A820                       		dc.w $A820
0001E1B8 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E1BC AA20                       		dc.w $AA20
0001E1BE                            ; ---------------------------------------------------------------------------
0001E1BE                            ; Pattern load cues - ending sequence
0001E1BE                            ; ---------------------------------------------------------------------------
0001E1BE 000E                       PLC_Ending:	dc.w $E
0001E1C0 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E1C4 0000                       		dc.w 0
0001E1C6 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E1CA 39A0                       		dc.w $39A0
0001E1CC 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E1D0 6B00                       		dc.w $6B00
0001E1D2 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E1D6 7400                       		dc.w $7400
0001E1D8 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E1DC 78A0                       		dc.w $78A0
0001E1DE 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E1E2 7C20                       		dc.w $7C20
0001E1E4 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E1E8 A480                       		dc.w $A480
0001E1EA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E1EE AA60                       		dc.w $AA60
0001E1F0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E1F4 ACA0                       		dc.w $ACA0
0001E1F6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E1FA AE60                       		dc.w $AE60
0001E1FC 0000 0000                  		dc.l Nem_Seal		; seal
0001E200 B0A0                       		dc.w $B0A0
0001E202 0000 0000                  		dc.l Nem_Pig		; pig
0001E206 B260                       		dc.w $B260
0001E208 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E20C B4A0                       		dc.w $B4A0
0001E20E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E212 B660                       		dc.w $B660
0001E214 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E218 B8A0                       		dc.w $B8A0
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A 0002                       PLC_TryAgain:	dc.w 2
0001E21C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E220 78A0                       		dc.w $78A0
0001E222 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E226 7C20                       		dc.w $7C20
0001E228 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E22C B400                       		dc.w $B400
0001E22E                            ; ---------------------------------------------------------------------------
0001E22E                            ; Pattern load cues - Eggman on SBZ 2
0001E22E                            ; ---------------------------------------------------------------------------
0001E22E 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E230 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E234 A300                       		dc.w $A300
0001E236 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E23A 8000                       		dc.w $8000
0001E23C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E240 9400                       		dc.w $9400
0001E242                            ; ---------------------------------------------------------------------------
0001E242                            ; Pattern load cues - final boss
0001E242                            ; ---------------------------------------------------------------------------
0001E242 0004                       PLC_FZBoss:	dc.w 4
0001E244 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E248 7400                       		dc.w $7400
0001E24A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E24E 6000                       		dc.w $6000
0001E250 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E254 8000                       		dc.w $8000
0001E256 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E25A 8E00                       		dc.w $8E00
0001E25C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E260 A540                       		dc.w $A540
0001E262                            		even
0001E262                            		even
0001E262                            
0001E262                            		incbin	misc\padding.bin
0001E350                            		even
0001E350                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E7A6                            		even
0001E7A6                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E83E                            		even
0001E83E                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E952                            		even
0001E952                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F81C                            		even
0001F81C                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023922                            		even
00023922                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023956                            		even
00023956                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023A14                            		even
00023A14                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023EBC                            		even
00023EBC                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00023F1A                            		even
00023F1A                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024B20                            		even
00024B20                            ; ---------------------------------------------------------------------------
00024B20                            ; Sprite mappings - Sonic
00024B20                            ; ---------------------------------------------------------------------------
00024B20                            Map_Sonic:
00024B20                            	include "_maps\Sonic.asm"
00024B20                            Map_6d2d:
00024B20 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024B22 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024B24 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024B26 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024B28 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024B2A 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024B2C 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024B2E 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024B30 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024B32 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024B34 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024B36 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024B38 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024B3A 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024B3C 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024B3E 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024B40 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024B42 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024B44 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024B46 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024B48 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024B4A 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024B4C 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024B4E 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024B50 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024B52 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024B54 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024B56 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024B58 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024B5A 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024B5C 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024B5E 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024B60 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024B62 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024B64 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024B66 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024B68 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024B6A 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024B6C 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024B6E 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024B70 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024B72 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024B74 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024B76 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024B78 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024B7A 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024B7C 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024B7E 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024B80 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024B82 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024B84 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024B86 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024B88 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024B8A 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024B8C 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024B8E 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024B90 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024B92 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024B94 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024B96 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024B98 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024B9A 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024B9C 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024B9E 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024BA0 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024BA2 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024BA4 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024BA6 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024BA8 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024BAA 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024BAC 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024BAE 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024BB0 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024BB2 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024BB4 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024BB6 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024BB8 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024BBA 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024BBC 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024BBE 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024BC0 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024BC2 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024BC4 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024BC6 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024BC8 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024BCA 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024BCC 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024BCE 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024BD0 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024BD2 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024BD4 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024BD6 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024BD8 00                         Map_6d2d_B8: 	dc.b $0
00024BD9 02                         Map_6d2d_B9: 	dc.b $2
00024BDA ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024BDF 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024BE4 03                         Map_6d2d_C4: 	dc.b $3
00024BE5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024BEA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024BEF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024BF4 03                         Map_6d2d_D4: 	dc.b $3
00024BF5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024BFA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024BFF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C04 03                         Map_6d2d_E4: 	dc.b $3
00024C05 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C0A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C0F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C14 03                         Map_6d2d_F4: 	dc.b $3
00024C15 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024C1A 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024C1F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C24 04                         Map_6d2d_104: 	dc.b $4
00024C25 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024C2A FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024C2F FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024C34 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024C39 02                         Map_6d2d_119: 	dc.b $2
00024C3A EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024C3F FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024C44 02                         Map_6d2d_124: 	dc.b $2
00024C45 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024C4A FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024C4F 04                         Map_6d2d_12F: 	dc.b $4
00024C50 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024C55 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024C5A FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024C5F 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024C64 02                         Map_6d2d_144: 	dc.b $2
00024C65 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024C6A EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024C6F 03                         Map_6d2d_14F: 	dc.b $3
00024C70 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024C75 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024C7A 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024C7F 05                         Map_6d2d_15F: 	dc.b $5
00024C80 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024C85 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024C8A FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024C8F 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024C94 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024C99 06                         Map_6d2d_179: 	dc.b $6
00024C9A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024C9F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024CA4 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024CA9 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024CAE FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024CB3 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024CB8 04                         Map_6d2d_198: 	dc.b $4
00024CB9 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024CBE ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024CC3 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024CC8 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024CCD 05                         Map_6d2d_1AD: 	dc.b $5
00024CCE EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024CD3 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024CD8 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024CDD 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024CE2 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024CE7 04                         Map_6d2d_1C7: 	dc.b $4
00024CE8 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024CED EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024CF2 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024CF7 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024CFC 05                         Map_6d2d_1DC: 	dc.b $5
00024CFD ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D02 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D07 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024D0C FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024D11 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024D16 04                         Map_6d2d_1F6: 	dc.b $4
00024D17 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024D1C EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024D21 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024D26 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024D2B 02                         Map_6d2d_20B: 	dc.b $2
00024D2C F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024D31 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024D36 02                         Map_6d2d_216: 	dc.b $2
00024D37 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024D3C F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024D41 04                         Map_6d2d_221: 	dc.b $4
00024D42 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024D47 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024D4C FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024D51 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024D56 02                         Map_6d2d_236: 	dc.b $2
00024D57 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024D5C F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024D61 03                         Map_6d2d_241: 	dc.b $3
00024D62 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024D67 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024D6C F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024D71 06                         Map_6d2d_251: 	dc.b $6
00024D72 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024D77 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024D7C F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024D81 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024D86 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024D8B FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024D90 06                         Map_6d2d_270: 	dc.b $6
00024D91 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024D96 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024D9B EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024DA0 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024DA5 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024DAA 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024DAF 04                         Map_6d2d_28F: 	dc.b $4
00024DB0 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024DB5 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024DBA EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024DBF 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024DC4 05                         Map_6d2d_2A4: 	dc.b $5
00024DC5 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024DCA ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024DCF F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024DD4 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024DD9 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024DDE 04                         Map_6d2d_2BE: 	dc.b $4
00024DDF FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024DE4 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024DE9 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024DEE 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024DF3 05                         Map_6d2d_2D3: 	dc.b $5
00024DF4 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024DF9 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024DFE F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024E03 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E08 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024E0D 02                         Map_6d2d_2ED: 	dc.b $2
00024E0E EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E13 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E18 02                         Map_6d2d_2F8: 	dc.b $2
00024E19 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E1E FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E23 02                         Map_6d2d_303: 	dc.b $2
00024E24 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E29 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E2E 02                         Map_6d2d_30E: 	dc.b $2
00024E2F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E34 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E39 04                         Map_6d2d_319: 	dc.b $4
00024E3A EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024E3F EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024E44 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024E49 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024E4E 03                         Map_6d2d_32E: 	dc.b $3
00024E4F EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024E54 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024E59 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024E5E 04                         Map_6d2d_33E: 	dc.b $4
00024E5F EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024E64 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024E69 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024E6E FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024E73 03                         Map_6d2d_353: 	dc.b $3
00024E74 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024E79 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024E7E FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024E83 02                         Map_6d2d_363: 	dc.b $2
00024E84 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024E89 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024E8E 02                         Map_6d2d_36E: 	dc.b $2
00024E8F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024E94 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024E99 02                         Map_6d2d_379: 	dc.b $2
00024E9A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024E9F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024EA4 02                         Map_6d2d_384: 	dc.b $2
00024EA5 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024EAA F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024EAF 04                         Map_6d2d_38F: 	dc.b $4
00024EB0 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024EB5 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024EBA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024EBF 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024EC4 02                         Map_6d2d_3A4: 	dc.b $2
00024EC5 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024ECA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024ECF 04                         Map_6d2d_3AF: 	dc.b $4
00024ED0 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024ED5 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024EDA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024EDF 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024EE4 02                         Map_6d2d_3C4: 	dc.b $2
00024EE5 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024EEA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024EEF 01                         Map_6d2d_3CF: 	dc.b $1
00024EF0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024EF5 01                         Map_6d2d_3D5: 	dc.b $1
00024EF6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024EFB 01                         Map_6d2d_3DB: 	dc.b $1
00024EFC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F01 01                         Map_6d2d_3E1: 	dc.b $1
00024F02 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F07 01                         Map_6d2d_3E7: 	dc.b $1
00024F08 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F0D 02                         Map_6d2d_3ED: 	dc.b $2
00024F0E F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024F13 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00024F18 01                         Map_6d2d_3F8: 	dc.b $1
00024F19 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F1E 02                         Map_6d2d_3FE: 	dc.b $2
00024F1F EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024F24 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00024F29 01                         Map_6d2d_409: 	dc.b $1
00024F2A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F2F 02                         Map_6d2d_40F: 	dc.b $2
00024F30 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024F35 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00024F3A 04                         Map_6d2d_41A: 	dc.b $4
00024F3B ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024F40 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024F45 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00024F4A 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00024F4F 06                         Map_6d2d_42F: 	dc.b $6
00024F50 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024F55 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024F5A 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024F5F 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024F64 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024F69 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024F6E 02                         Map_6d2d_44E: 	dc.b $2
00024F6F 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00024F74 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00024F79 02                         Map_6d2d_459: 	dc.b $2
00024F7A 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00024F7F EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00024F84 04                         Map_6d2d_464: 	dc.b $4
00024F85 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024F8A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00024F8F 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00024F94 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00024F99 02                         Map_6d2d_479: 	dc.b $2
00024F9A F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00024F9F F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00024FA4 03                         Map_6d2d_484: 	dc.b $3
00024FA5 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00024FAA FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00024FAF 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00024FB4 04                         Map_6d2d_494: 	dc.b $4
00024FB5 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024FBA F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00024FBF 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00024FC4 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00024FC9 03                         Map_6d2d_4A9: 	dc.b $3
00024FCA E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00024FCF 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00024FD4 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00024FD9 04                         Map_6d2d_4B9: 	dc.b $4
00024FDA F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024FDF 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024FE4 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00024FE9 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00024FEE 04                         Map_6d2d_4CE: 	dc.b $4
00024FEF F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024FF4 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024FF9 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00024FFE F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025003 05                         Map_6d2d_4E3: 	dc.b $5
00025004 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025009 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002500E 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025013 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025018 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002501D 05                         Map_6d2d_4FD: 	dc.b $5
0002501E E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025023 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025028 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002502D 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025032 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025037 02                         Map_6d2d_517: 	dc.b $2
00025038 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002503D 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025042 03                         Map_6d2d_522: 	dc.b $3
00025043 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025048 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002504D 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025052 02                         Map_6d2d_532: 	dc.b $2
00025053 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025058 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002505D 03                         Map_6d2d_53D: 	dc.b $3
0002505E EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025063 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025068 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002506D 02                         Map_6d2d_54D: 	dc.b $2
0002506E EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025073 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025078 03                         Map_6d2d_558: 	dc.b $3
00025079 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002507E 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025083 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025088 03                         Map_6d2d_568: 	dc.b $3
00025089 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002508E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025093 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025098 05                         Map_6d2d_578: 	dc.b $5
00025099 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002509E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000250A3 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000250A8 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000250AD 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000250B2 05                         Map_6d2d_592: 	dc.b $5
000250B3 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000250B8 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000250BD F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000250C2 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000250C7 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000250CC 02                         Map_6d2d_5AC: 	dc.b $2
000250CD EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000250D2 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000250D7 03                         Map_6d2d_5B7: 	dc.b $3
000250D8 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000250DD F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000250E2 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000250E7 01                         Map_6d2d_5C7: 	dc.b $1
000250E8 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000250ED 01                         Map_6d2d_5CD: 	dc.b $1
000250EE F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000250F3 01                         Map_6d2d_5D3: 	dc.b $1
000250F4 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000250F9 04                         Map_6d2d_5D9: 	dc.b $4
000250FA F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000250FF F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025104 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025109 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002510E 03                         Map_6d2d_5EE: 	dc.b $3
0002510F F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025114 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025119 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002511E 03                         Map_6d2d_5FE: 	dc.b $3
0002511F F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025124 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025129 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002512E 03                         Map_6d2d_60E: 	dc.b $3
0002512F EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025134 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025139 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002513E 02                         Map_6d2d_61E: 	dc.b $2
0002513F F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025144 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00025149 02                         Map_6d2d_629: 	dc.b $2
0002514A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002514F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025154 03                         Map_6d2d_634: 	dc.b $3
00025155 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002515A 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002515F 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025164 02                         Map_6d2d_644: 	dc.b $2
00025165 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002516A EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002516F 04                         Map_6d2d_64F: 	dc.b $4
00025170 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025175 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002517A F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002517F 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025184                            	even
00025184                            	even
00025184                            
00025184                            ; ---------------------------------------------------------------------------
00025184                            ; Uncompressed graphics	loading	array for Sonic
00025184                            ; ---------------------------------------------------------------------------
00025184                            SonicDynPLC:
00025184                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025184                            DPLC_2d5b:
00025184 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025186 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
00025188 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
0002518A 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
0002518C 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
0002518E 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
00025190 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025192 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025194 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025196 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
00025198 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
0002519A 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
0002519C 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
0002519E 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
000251A0 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
000251A2 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
000251A4 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
000251A6 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
000251A8 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
000251AA 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
000251AC 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
000251AE 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
000251B0 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
000251B2 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
000251B4 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
000251B6 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
000251B8 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
000251BA 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
000251BC 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
000251BE 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
000251C0 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
000251C2 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
000251C4 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
000251C6 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
000251C8 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
000251CA 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
000251CC 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
000251CE 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
000251D0 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
000251D2 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
000251D4 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
000251D6 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
000251D8 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
000251DA 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
000251DC 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
000251DE 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
000251E0 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
000251E2 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
000251E4 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
000251E6 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
000251E8 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
000251EA 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
000251EC 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
000251EE 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
000251F0 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
000251F2 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
000251F4 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
000251F6 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
000251F8 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
000251FA 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
000251FC 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
000251FE 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
00025200 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025202 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025204 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
00025206 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
00025208 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
0002520A 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
0002520C 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
0002520E 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
00025210 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025212 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025214 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
00025216 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
00025218 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
0002521A 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
0002521C 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
0002521E 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
00025220 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025222 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025224 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
00025226 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
00025228 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
0002522A 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
0002522C 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
0002522E 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
00025230 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
00025232 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
00025234 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
00025236 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
00025238 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
0002523A 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
0002523C 00                         DPLC_2d5b_B8: 	dc.b $0
0002523D 02                         DPLC_2d5b_B9: 	dc.b $2
0002523E F000                       	dc.b $F0, $0
00025240 1010                       	dc.b $10, $10
00025242 03                         DPLC_2d5b_BE: 	dc.b $3
00025243 5012                       	dc.b $50, $12
00025245 5018                       	dc.b $50, $18
00025247 201E                       	dc.b $20, $1E
00025249 03                         DPLC_2d5b_C5: 	dc.b $3
0002524A 5021                       	dc.b $50, $21
0002524C 5018                       	dc.b $50, $18
0002524E 201E                       	dc.b $20, $1E
00025250 03                         DPLC_2d5b_CC: 	dc.b $3
00025251 5021                       	dc.b $50, $21
00025253 5018                       	dc.b $50, $18
00025255 2027                       	dc.b $20, $27
00025257 03                         DPLC_2d5b_D3: 	dc.b $3
00025258 802A                       	dc.b $80, $2A
0002525A 2033                       	dc.b $20, $33
0002525C 2036                       	dc.b $20, $36
0002525E 04                         DPLC_2d5b_DA: 	dc.b $4
0002525F 7039                       	dc.b $70, $39
00025261 5041                       	dc.b $50, $41
00025263 5047                       	dc.b $50, $47
00025265 104D                       	dc.b $10, $4D
00025267 02                         DPLC_2d5b_E3: 	dc.b $2
00025268 7039                       	dc.b $70, $39
0002526A B04F                       	dc.b $B0, $4F
0002526C 02                         DPLC_2d5b_E8: 	dc.b $2
0002526D 505B                       	dc.b $50, $5B
0002526F 8061                       	dc.b $80, $61
00025271 04                         DPLC_2d5b_ED: 	dc.b $4
00025272 505B                       	dc.b $50, $5B
00025274 506A                       	dc.b $50, $6A
00025276 5070                       	dc.b $50, $70
00025278 1076                       	dc.b $10, $76
0002527A 02                         DPLC_2d5b_F6: 	dc.b $2
0002527B F4F0                       	dc.b $F4, $F0
0002527D 1500                       	dc.b $15, $0
0002527F 03                         DPLC_2d5b_FB: 	dc.b $3
00025280 7039                       	dc.b $70, $39
00025282 3078                       	dc.b $30, $78
00025284 507C                       	dc.b $50, $7C
00025286 05                         DPLC_2d5b_102: 	dc.b $5
00025287 5082                       	dc.b $50, $82
00025289 5088                       	dc.b $50, $88
0002528B 208E                       	dc.b $20, $8E
0002528D 5091                       	dc.b $50, $91
0002528F 0097                       	dc.b $0, $97
00025291 06                         DPLC_2d5b_10D: 	dc.b $6
00025292 5082                       	dc.b $50, $82
00025294 1098                       	dc.b $10, $98
00025296 309A                       	dc.b $30, $9A
00025298 509E                       	dc.b $50, $9E
0002529A 30A4                       	dc.b $30, $A4
0002529C 00A8                       	dc.b $0, $A8
0002529E 04                         DPLC_2d5b_11A: 	dc.b $4
0002529F 50A9                       	dc.b $50, $A9
000252A1 10AF                       	dc.b $10, $AF
000252A3 70B1                       	dc.b $70, $B1
000252A5 20B9                       	dc.b $20, $B9
000252A7 05                         DPLC_2d5b_123: 	dc.b $5
000252A8 50BC                       	dc.b $50, $BC
000252AA 30C2                       	dc.b $30, $C2
000252AC 70C6                       	dc.b $70, $C6
000252AE 20CE                       	dc.b $20, $CE
000252B0 10D1                       	dc.b $10, $D1
000252B2 04                         DPLC_2d5b_12E: 	dc.b $4
000252B3 50BC                       	dc.b $50, $BC
000252B5 10D3                       	dc.b $10, $D3
000252B7 70D5                       	dc.b $70, $D5
000252B9 20DD                       	dc.b $20, $DD
000252BB 05                         DPLC_2d5b_137: 	dc.b $5
000252BC 5082                       	dc.b $50, $82
000252BE 1098                       	dc.b $10, $98
000252C0 008E                       	dc.b $0, $8E
000252C2 70E0                       	dc.b $70, $E0
000252C4 20E8                       	dc.b $20, $E8
000252C6 04                         DPLC_2d5b_142: 	dc.b $4
000252C7 70EB                       	dc.b $70, $EB
000252C9 50F3                       	dc.b $50, $F3
000252CB 10F9                       	dc.b $10, $F9
000252CD 50FB                       	dc.b $50, $FB
000252CF 02                         DPLC_2d5b_14B: 	dc.b $2
000252D0 70EB                       	dc.b $70, $EB
000252D2 B101                       	dc.b $B1, $1
000252D4 02                         DPLC_2d5b_150: 	dc.b $2
000252D5 510D                       	dc.b $51, $D
000252D7 8113                       	dc.b $81, $13
000252D9 04                         DPLC_2d5b_155: 	dc.b $4
000252DA 510D                       	dc.b $51, $D
000252DC 511C                       	dc.b $51, $1C
000252DE 1122                       	dc.b $11, $22
000252E0 5124                       	dc.b $51, $24
000252E2 02                         DPLC_2d5b_15E: 	dc.b $2
000252E3 510D                       	dc.b $51, $D
000252E5 B12A                       	dc.b $B1, $2A
000252E7 03                         DPLC_2d5b_163: 	dc.b $3
000252E8 70EB                       	dc.b $70, $EB
000252EA 0101                       	dc.b $1, $1
000252EC 8136                       	dc.b $81, $36
000252EE 06                         DPLC_2d5b_16A: 	dc.b $6
000252EF 513F                       	dc.b $51, $3F
000252F1 1145                       	dc.b $11, $45
000252F3 1147                       	dc.b $11, $47
000252F5 8149                       	dc.b $81, $49
000252F7 0152                       	dc.b $1, $52
000252F9 0153                       	dc.b $1, $53
000252FB 06                         DPLC_2d5b_177: 	dc.b $6
000252FC 513F                       	dc.b $51, $3F
000252FE 2154                       	dc.b $21, $54
00025300 1157                       	dc.b $11, $57
00025302 1159                       	dc.b $11, $59
00025304 815B                       	dc.b $81, $5B
00025306 0152                       	dc.b $1, $52
00025308 04                         DPLC_2d5b_184: 	dc.b $4
00025309 5164                       	dc.b $51, $64
0002530B 116A                       	dc.b $11, $6A
0002530D 816C                       	dc.b $81, $6C
0002530F 1175                       	dc.b $11, $75
00025311 05                         DPLC_2d5b_18D: 	dc.b $5
00025312 5177                       	dc.b $51, $77
00025314 217D                       	dc.b $21, $7D
00025316 1180                       	dc.b $11, $80
00025318 7182                       	dc.b $71, $82
0002531A 218A                       	dc.b $21, $8A
0002531C 04                         DPLC_2d5b_198: 	dc.b $4
0002531D 5177                       	dc.b $51, $77
0002531F 118D                       	dc.b $11, $8D
00025321 818F                       	dc.b $81, $8F
00025323 1198                       	dc.b $11, $98
00025325 05                         DPLC_2d5b_1A1: 	dc.b $5
00025326 513F                       	dc.b $51, $3F
00025328 819A                       	dc.b $81, $9A
0002532A 1159                       	dc.b $11, $59
0002532C 11A3                       	dc.b $11, $A3
0002532E 0152                       	dc.b $1, $52
00025330 02                         DPLC_2d5b_1AC: 	dc.b $2
00025331 51A5                       	dc.b $51, $A5
00025333 B1AB                       	dc.b $B1, $AB
00025335 02                         DPLC_2d5b_1B1: 	dc.b $2
00025336 505B                       	dc.b $50, $5B
00025338 B1B7                       	dc.b $B1, $B7
0002533A 02                         DPLC_2d5b_1B6: 	dc.b $2
0002533B 51A5                       	dc.b $51, $A5
0002533D B1C3                       	dc.b $B1, $C3
0002533F 02                         DPLC_2d5b_1BB: 	dc.b $2
00025340 505B                       	dc.b $50, $5B
00025342 B1CF                       	dc.b $B1, $CF
00025344 04                         DPLC_2d5b_1C0: 	dc.b $4
00025345 51DB                       	dc.b $51, $DB
00025347 11E1                       	dc.b $11, $E1
00025349 B1E3                       	dc.b $B1, $E3
0002534B 01EF                       	dc.b $1, $EF
0002534D 03                         DPLC_2d5b_1C9: 	dc.b $3
0002534E 51F0                       	dc.b $51, $F0
00025350 11F6                       	dc.b $11, $F6
00025352 B1F8                       	dc.b $B1, $F8
00025354 04                         DPLC_2d5b_1D0: 	dc.b $4
00025355 51DB                       	dc.b $51, $DB
00025357 1204                       	dc.b $12, $4
00025359 B206                       	dc.b $B2, $6
0002535B 01EF                       	dc.b $1, $EF
0002535D 03                         DPLC_2d5b_1D9: 	dc.b $3
0002535E 51F0                       	dc.b $51, $F0
00025360 11F6                       	dc.b $11, $F6
00025362 B212                       	dc.b $B2, $12
00025364 02                         DPLC_2d5b_1E0: 	dc.b $2
00025365 521E                       	dc.b $52, $1E
00025367 B224                       	dc.b $B2, $24
00025369 02                         DPLC_2d5b_1E5: 	dc.b $2
0002536A 510D                       	dc.b $51, $D
0002536C B230                       	dc.b $B2, $30
0002536E 02                         DPLC_2d5b_1EA: 	dc.b $2
0002536F 521E                       	dc.b $52, $1E
00025371 B23C                       	dc.b $B2, $3C
00025373 02                         DPLC_2d5b_1EF: 	dc.b $2
00025374 510D                       	dc.b $51, $D
00025376 B248                       	dc.b $B2, $48
00025378 04                         DPLC_2d5b_1F4: 	dc.b $4
00025379 5254                       	dc.b $52, $54
0002537B 125A                       	dc.b $12, $5A
0002537D B25C                       	dc.b $B2, $5C
0002537F 0268                       	dc.b $2, $68
00025381 02                         DPLC_2d5b_1FD: 	dc.b $2
00025382 7269                       	dc.b $72, $69
00025384 B271                       	dc.b $B2, $71
00025386 04                         DPLC_2d5b_202: 	dc.b $4
00025387 5254                       	dc.b $52, $54
00025389 127D                       	dc.b $12, $7D
0002538B B27F                       	dc.b $B2, $7F
0002538D 0268                       	dc.b $2, $68
0002538F 02                         DPLC_2d5b_20B: 	dc.b $2
00025390 7269                       	dc.b $72, $69
00025392 B28B                       	dc.b $B2, $8B
00025394 01                         DPLC_2d5b_210: 	dc.b $1
00025395 F297                       	dc.b $F2, $97
00025397 01                         DPLC_2d5b_213: 	dc.b $1
00025398 F2A7                       	dc.b $F2, $A7
0002539A 01                         DPLC_2d5b_216: 	dc.b $1
0002539B F2B7                       	dc.b $F2, $B7
0002539D 01                         DPLC_2d5b_219: 	dc.b $1
0002539E F2C7                       	dc.b $F2, $C7
000253A0 01                         DPLC_2d5b_21C: 	dc.b $1
000253A1 F2D7                       	dc.b $F2, $D7
000253A3 02                         DPLC_2d5b_21F: 	dc.b $2
000253A4 B2E7                       	dc.b $B2, $E7
000253A6 22F3                       	dc.b $22, $F3
000253A8 01                         DPLC_2d5b_224: 	dc.b $1
000253A9 F2F6                       	dc.b $F2, $F6
000253AB 02                         DPLC_2d5b_227: 	dc.b $2
000253AC B306                       	dc.b $B3, $6
000253AE 2312                       	dc.b $23, $12
000253B0 01                         DPLC_2d5b_22C: 	dc.b $1
000253B1 F315                       	dc.b $F3, $15
000253B3 02                         DPLC_2d5b_22F: 	dc.b $2
000253B4 5325                       	dc.b $53, $25
000253B6 B32B                       	dc.b $B3, $2B
000253B8 04                         DPLC_2d5b_234: 	dc.b $4
000253B9 5337                       	dc.b $53, $37
000253BB 733D                       	dc.b $73, $3D
000253BD 1345                       	dc.b $13, $45
000253BF 0347                       	dc.b $3, $47
000253C1 02                         DPLC_2d5b_23D: 	dc.b $2
000253C2 D348                       	dc.b $D3, $48
000253C4 34EC                       	dc.b $34, $EC
000253C6 02                         DPLC_2d5b_242: 	dc.b $2
000253C7 F528                       	dc.b $F5, $28
000253C9 0538                       	dc.b $5, $38
000253CB 02                         DPLC_2d5b_247: 	dc.b $2
000253CC F539                       	dc.b $F5, $39
000253CE 0549                       	dc.b $5, $49
000253D0 02                         DPLC_2d5b_24C: 	dc.b $2
000253D1 E356                       	dc.b $E3, $56
000253D3 054A                       	dc.b $5, $4A
000253D5 01                         DPLC_2d5b_251: 	dc.b $1
000253D6 8365                       	dc.b $83, $65
000253D8 03                         DPLC_2d5b_254: 	dc.b $3
000253D9 736E                       	dc.b $73, $6E
000253DB 0376                       	dc.b $3, $76
000253DD 3377                       	dc.b $33, $77
000253DF 02                         DPLC_2d5b_25B: 	dc.b $2
000253E0 E37B                       	dc.b $E3, $7B
000253E2 054A                       	dc.b $5, $4A
000253E4 03                         DPLC_2d5b_260: 	dc.b $3
000253E5 B38A                       	dc.b $B3, $8A
000253E7 1396                       	dc.b $13, $96
000253E9 0398                       	dc.b $3, $98
000253EB 04                         DPLC_2d5b_267: 	dc.b $4
000253EC B399                       	dc.b $B3, $99
000253EE 33A5                       	dc.b $33, $A5
000253F0 03A9                       	dc.b $3, $A9
000253F2 03AA                       	dc.b $3, $AA
000253F4 04                         DPLC_2d5b_270: 	dc.b $4
000253F5 B3AB                       	dc.b $B3, $AB
000253F7 33B7                       	dc.b $33, $B7
000253F9 03BB                       	dc.b $3, $BB
000253FB 03BC                       	dc.b $3, $BC
000253FD 05                         DPLC_2d5b_279: 	dc.b $5
000253FE 83BD                       	dc.b $83, $BD
00025400 13C6                       	dc.b $13, $C6
00025402 53C8                       	dc.b $53, $C8
00025404 13CE                       	dc.b $13, $CE
00025406 03D0                       	dc.b $3, $D0
00025408 05                         DPLC_2d5b_284: 	dc.b $5
00025409 83D1                       	dc.b $83, $D1
0002540B 13DA                       	dc.b $13, $DA
0002540D 53C8                       	dc.b $53, $C8
0002540F 13CE                       	dc.b $13, $CE
00025411 03D0                       	dc.b $3, $D0
00025413 02                         DPLC_2d5b_28F: 	dc.b $2
00025414 83DC                       	dc.b $83, $DC
00025416 73E5                       	dc.b $73, $E5
00025418 03                         DPLC_2d5b_294: 	dc.b $3
00025419 83ED                       	dc.b $83, $ED
0002541B 23F6                       	dc.b $23, $F6
0002541D 13F9                       	dc.b $13, $F9
0002541F 02                         DPLC_2d5b_29B: 	dc.b $2
00025420 83FB                       	dc.b $83, $FB
00025422 7404                       	dc.b $74, $4
00025424 03                         DPLC_2d5b_2A0: 	dc.b $3
00025425 83ED                       	dc.b $83, $ED
00025427 240C                       	dc.b $24, $C
00025429 140F                       	dc.b $14, $F
0002542B 02                         DPLC_2d5b_2A7: 	dc.b $2
0002542C 5411                       	dc.b $54, $11
0002542E B417                       	dc.b $B4, $17
00025430 03                         DPLC_2d5b_2AC: 	dc.b $3
00025431 8423                       	dc.b $84, $23
00025433 342C                       	dc.b $34, $2C
00025435 0430                       	dc.b $4, $30
00025437 03                         DPLC_2d5b_2B3: 	dc.b $3
00025438 7431                       	dc.b $74, $31
0002543A 1439                       	dc.b $14, $39
0002543C B43B                       	dc.b $B4, $3B
0002543E 05                         DPLC_2d5b_2BA: 	dc.b $5
0002543F 7447                       	dc.b $74, $47
00025441 144F                       	dc.b $14, $4F
00025443 5451                       	dc.b $54, $51
00025445 3457                       	dc.b $34, $57
00025447 045B                       	dc.b $4, $5B
00025449 05                         DPLC_2d5b_2C5: 	dc.b $5
0002544A 745C                       	dc.b $74, $5C
0002544C 144F                       	dc.b $14, $4F
0002544E 5464                       	dc.b $54, $64
00025450 3457                       	dc.b $34, $57
00025452 045B                       	dc.b $4, $5B
00025454 02                         DPLC_2d5b_2D0: 	dc.b $2
00025455 246A                       	dc.b $24, $6A
00025457 F46D                       	dc.b $F4, $6D
00025459 03                         DPLC_2d5b_2D5: 	dc.b $3
0002545A 247D                       	dc.b $24, $7D
0002545C B480                       	dc.b $B4, $80
0002545E 248C                       	dc.b $24, $8C
00025460 01                         DPLC_2d5b_2DC: 	dc.b $1
00025461 B48F                       	dc.b $B4, $8F
00025463 01                         DPLC_2d5b_2DF: 	dc.b $1
00025464 549B                       	dc.b $54, $9B
00025466 01                         DPLC_2d5b_2E2: 	dc.b $1
00025467 14A1                       	dc.b $14, $A1
00025469 02                         DPLC_2d5b_2E5: 	dc.b $2
0002546A E356                       	dc.b $E3, $56
0002546C 054A                       	dc.b $5, $4A
0002546E 03                         DPLC_2d5b_2EA: 	dc.b $3
0002546F 736E                       	dc.b $73, $6E
00025471 0376                       	dc.b $3, $76
00025473 3377                       	dc.b $33, $77
00025475 03                         DPLC_2d5b_2F1: 	dc.b $3
00025476 B4A3                       	dc.b $B4, $A3
00025478 14AF                       	dc.b $14, $AF
0002547A 34B1                       	dc.b $34, $B1
0002547C 03                         DPLC_2d5b_2F8: 	dc.b $3
0002547D 54B5                       	dc.b $54, $B5
0002547F B4BB                       	dc.b $B4, $BB
00025481 1074                       	dc.b $10, $74
00025483 02                         DPLC_2d5b_2FF: 	dc.b $2
00025484 F4C7                       	dc.b $F4, $C7
00025486 24D7                       	dc.b $24, $D7
00025488 02                         DPLC_2d5b_304: 	dc.b $2
00025489 F4DA                       	dc.b $F4, $DA
0002548B 14EA                       	dc.b $14, $EA
0002548D 02                         DPLC_2d5b_309: 	dc.b $2
0002548E F502                       	dc.b $F5, $2
00025490 2512                       	dc.b $25, $12
00025492 02                         DPLC_2d5b_30E: 	dc.b $2
00025493 F515                       	dc.b $F5, $15
00025495 2525                       	dc.b $25, $25
00025497 02                         DPLC_2d5b_313: 	dc.b $2
00025498 F54B                       	dc.b $F5, $4B
0002549A 755B                       	dc.b $75, $5B
0002549C                            	even
0002549C                            	even
0002549C                            
0002549C                            ; ---------------------------------------------------------------------------
0002549C                            ; Uncompressed graphics	- Sonic
0002549C                            ; ---------------------------------------------------------------------------
0002549C                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000300BC                            		even
000300BC                            ; ---------------------------------------------------------------------------
000300BC                            ; Compressed graphics - various
000300BC                            ; ---------------------------------------------------------------------------
000300BC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000301C0                            		even
000301C0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000301FA                            		even
000301FA                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030390                            		even
00030390                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000304D8                            		even
000304D8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000305E2                            		even
000305E2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030634                            		even
00030634                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003087C                            		even
0003087C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030A02                            		even
00030A02                            ; ---------------------------------------------------------------------------
00030A02                            ; Sprite mappings - walls of the special stage
00030A02                            ; ---------------------------------------------------------------------------
00030A02                            Map_SSWalls:
00030A02                            	include "_maps\SSwalls.asm"
00030A02                            ; ---------------------------------------------------------------------------
00030A02                            ; Sprite mappings - walls of the special stage
00030A02                            ; ---------------------------------------------------------------------------
00030A02 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030A06 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030A0A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030A0E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030A12 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030A16 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030A1A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030A1E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030A22 01                         byte_2C584:	dc.b 1
00030A23 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030A28 01                         byte_2C58A:	dc.b 1
00030A29 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030A2E 01                         byte_2C590:	dc.b 1
00030A2F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030A34 01                         byte_2C596:	dc.b 1
00030A35 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030A3A 01                         byte_2C59C:	dc.b 1
00030A3B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030A40 01                         byte_2C5A2:	dc.b 1
00030A41 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030A46 01                         byte_2C5A8:	dc.b 1
00030A47 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030A4C 01                         byte_2C5AE:	dc.b 1
00030A4D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030A52 01                         byte_2C5B4:	dc.b 1
00030A53 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030A58 01                         byte_2C5BA:	dc.b 1
00030A59 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030A5E 01                         byte_2C5C0:	dc.b 1
00030A5F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030A64 01                         byte_2C5C6:	dc.b 1
00030A65 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030A6A 01                         byte_2C5CC:	dc.b 1
00030A6B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030A70 01                         byte_2C5D2:	dc.b 1
00030A71 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030A76 01                         byte_2C5D8:	dc.b 1
00030A77 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030A7C 01                         byte_2C5DE:	dc.b 1
00030A7D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030A82                            		even
00030A82                            		even
00030A82                            ; ---------------------------------------------------------------------------
00030A82                            ; Compressed graphics - special stage
00030A82                            ; ---------------------------------------------------------------------------
00030A82                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000313BA                            		even
000313BA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031508                            		even
00031508                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003299A                            		even
0003299A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032C9A                            		even
00032C9A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003318E                            		even
0003318E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003327C                            		even
0003327C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003334C                            		even
0003334C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033442                            		even
00033442                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000334A0                            		even
000334A0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033532                            		even
00033532                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000335F4                            		even
000335F4                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000336C2                            		even
000336C2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003378E                            		even
0003378E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033856                            		even
00033856                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033920                            		even
00033920                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000339F0                            		even
000339F0                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033BE4                            		even
00033BE4                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033D4C                            		even
00033D4C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033DFC                            		even
00033DFC                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033ED6                            		even
00033ED6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00033F5A                            		even
00033F5A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000340D8                            		even
000340D8                            ; ---------------------------------------------------------------------------
000340D8                            ; Compressed graphics - GHZ stuff
000340D8                            ; ---------------------------------------------------------------------------
000340D8                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034122                            		even
00034122                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003423C                            		even
0003423C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034328                            		even
00034328                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034370                            		even
00034370                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003450E                            		even
0003450E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003458A                            		even
0003458A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003479E                            		even
0003479E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000348CA                            		even
000348CA                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000349F8                            		even
000349F8                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034A96                            		even
00034A96                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034AF6                            		even
00034AF6                            ; ---------------------------------------------------------------------------
00034AF6                            ; Compressed graphics - LZ stuff
00034AF6                            ; ---------------------------------------------------------------------------
00034AF6                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034C1A                            		even
00034C1A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003540E                            		even
0003540E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003558E                            		even
0003558E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000356F8                            		even
000356F8                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035D4E                            		even
00035D4E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035E04                            		even
00035E04                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035EA6                            		even
00035EA6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036002                            		even
00036002                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036066                            		even
00036066                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000361B8                            		even
000361B8                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003669A                            		even
0003669A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003680A                            		even
0003680A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036AC2                            		even
00036AC2                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036BFA                            		even
00036BFA                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036D24                            		even
00036D24                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036E34                            		even
00036E34                            ; ---------------------------------------------------------------------------
00036E34                            ; Compressed graphics - MZ stuff
00036E34                            ; ---------------------------------------------------------------------------
00036E34                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000370C2                            		even
000370C2                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037180                            		even
00037180                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037238                            		even
00037238                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003728C                            		even
0003728C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003755E 00                         		even
0003755E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037E74                            		even
00037E74                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00037FD8                            		even
00037FD8                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038060                            		even
00038060                            ; ---------------------------------------------------------------------------
00038060                            ; Compressed graphics - SLZ stuff
00038060                            ; ---------------------------------------------------------------------------
00038060                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003829C                            		even
0003829C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000383E2                            		even
000383E2                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038626                            		even
00038626                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038688                            		even
00038688                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003876A                            		even
0003876A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003894C                            		even
0003894C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038A58                            		even
00038A58                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038AFC                            		even
00038AFC                            ; ---------------------------------------------------------------------------
00038AFC                            ; Compressed graphics - SYZ stuff
00038AFC                            ; ---------------------------------------------------------------------------
00038AFC                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038C66                            		even
00038C66                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038CC8                            		even
00038CC8                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038DAA                            		even
00038DAA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039038                            		even
00039038                            ; ---------------------------------------------------------------------------
00039038                            ; Compressed graphics - SBZ stuff
00039038                            ; ---------------------------------------------------------------------------
00039038                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003908C                            		even
0003908C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039328                            		even
00039328                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003952C                            		even
0003952C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000396CA                            		even
000396CA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000399FA                            		even
000399FA                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039BD8                            		even
00039BD8                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039C30                            		even
00039C30                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039DFA 00                         		even
00039DFA                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039EF8                            		even
00039EF8                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A084                            		even
0003A084                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A0D4                            		even
0003A0D4                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A12C                            		even
0003A12C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A228                            		even
0003A228                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A33E                            		even
0003A33E                            ; ---------------------------------------------------------------------------
0003A33E                            ; Compressed graphics - enemies
0003A33E                            ; ---------------------------------------------------------------------------
0003A33E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A6FE                            		even
0003A6FE                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A8A8 00                         		even
0003A8A8                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AC6A 00                         		even
0003AC6A                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AE52                            		even
0003AE52                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B00A 00                         		even
0003B00A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B272                            		even
0003B272                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B4FC                            		even
0003B4FC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BB20                            		even
0003BB20                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BD16                            		even
0003BD16                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C334                            		even
0003C334                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C734 00                         		even
0003C734                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CA30                            		even
0003CA30                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CC78                            		even
0003CC78                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003CF10                            		even
0003CF10                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D0EE                            		even
0003D0EE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D27C                            		even
0003D27C                            ; ---------------------------------------------------------------------------
0003D27C                            ; Compressed graphics - various
0003D27C                            ; ---------------------------------------------------------------------------
0003D27C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D88A                            		even
0003D88A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003D980                            		even
0003D980                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DA86                            		even
0003DA86                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DB7A                            		even
0003DB7A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E0BE                            		even
0003E0BE                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E724                            		even
0003E724                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E7D4                            		even
0003E7D4                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003E966                            		even
0003E966                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EA68                            		even
0003EA68                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003EB44                            		even
0003EB44                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003EFC0                            		even
0003EFC0                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F080                            		even
0003F080                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F1F4                            		even
0003F1F4                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F4F6                            		even
0003F4F6                            ; ---------------------------------------------------------------------------
0003F4F6                            ; Compressed graphics - continue screen
0003F4F6                            ; ---------------------------------------------------------------------------
0003F4F6                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F7A6                            		even
0003F7A6                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003F9E0                            		even
0003F9E0                            ; ---------------------------------------------------------------------------
0003F9E0                            ; Compressed graphics - animals
0003F9E0                            ; ---------------------------------------------------------------------------
0003F9E0                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FB38                            		even
0003FB38                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FC94                            		even
0003FC94                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FE10                            		even
0003FE10                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003FF2C                            		even
0003FF2C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040062                            		even
00040062                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004019C                            		even
0004019C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000402F8                            		even
000402F8                            ; ---------------------------------------------------------------------------
000402F8                            ; Compressed graphics - primary patterns and block mappings
000402F8                            ; ---------------------------------------------------------------------------
000402F8                            Blk16_GHZ:	incbin	map16\ghz.bin
00040C0C                            		even
00040C0C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0004251A                            		even
0004251A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0004389A                            		even
0004389A                            Blk256_GHZ:	incbin	map256\ghz.bin
00045B98                            		even
00045B98                            Blk16_LZ:	incbin	map16\lz.bin
000462D2                            		even
000462D2                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
000486D4                            		even
000486D4                            Blk256_LZ:	incbin	map256\lz.bin
0004B054                            		even
0004B054                            Blk16_MZ:	incbin	map16\mz.bin
0004B7B0                            		even
0004B7B0                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E038                            		even
0004E038                            Blk256_MZ:	incbin	map256\mz.bin
0004F7BC                            		even
0004F7BC                            Blk16_SLZ:	incbin	map16\slz.bin
0004FE86                            		even
0004FE86                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051DDA                            		even
00051DDA                            Blk256_SLZ:	incbin	map256\slz.bin
00052454                            		even
00052454                            Blk16_SYZ:	incbin	map16\syz.bin
0005307A                            		even
0005307A                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005760C                            		even
0005760C                            Blk256_SYZ:	incbin	map256\syz.bin
00059668                            		even
00059668                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A5B0                            		even
0005A5B0                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005CF74                            		even
0005CF74                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FA6A                            		even
0005FA6A                            ; ---------------------------------------------------------------------------
0005FA6A                            ; Compressed graphics - bosses and ending sequence
0005FA6A                            ; ---------------------------------------------------------------------------
0005FA6A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060284 00                         		even
00060284                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006056E                            		even
0006056E                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060DF2                            		even
00060DF2                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061B48 00                         		even
00061B48                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000622B0                            		even
000622B0                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00062830                            		even
00062830                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062950                            		even
00062950                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062B4E                            		even
00062B4E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063D2C                            		even
00063D2C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064670                            		even
00064670                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00064A46                            		even
00064A46                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00064FD6                            		even
00064FD6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006525E                            		even
0006525E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006584C 00                         		even
0006584C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065AD4                            		even
00065AD4                            		incbin	misc\padding2.bin
00065BD8                            		even
00065BD8                            ; ---------------------------------------------------------------------------
00065BD8                            ; Collision data
00065BD8                            ; ---------------------------------------------------------------------------
00065BD8                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065CD8                            		even
00065CD8                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066CD8                            		even
00066CD8                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067CD8                            		even
00067CD8                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00067E90 00                         		even
00067E90                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00067FF8                            		even
00067FF8                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068188                            		even
00068188                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006837C                            		even
0006837C                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068582                            		even
00068582                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00068820                            		even
00068820                            ; ---------------------------------------------------------------------------
00068820                            ; Special layouts
00068820                            ; ---------------------------------------------------------------------------
00068820                            SS_1:		incbin	sslayout\1.bin
00068A9A                            		even
00068A9A                            SS_2:		incbin	sslayout\2.bin
00068EAC                            		even
00068EAC                            SS_3:		incbin	sslayout\3.bin
00069208                            		even
00069208                            SS_4:		incbin	sslayout\4.bin
000696E2                            		even
000696E2                            SS_5:		incbin	sslayout\5.bin
00069BB4                            		even
00069BB4                            SS_6:		incbin	sslayout\6.bin
00069EC4                            		even
00069EC4                            ; ---------------------------------------------------------------------------
00069EC4                            ; Animated uncompressed graphics
00069EC4                            ; ---------------------------------------------------------------------------
00069EC4                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A0C4                            		even
0006A0C4                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006A4C4                            		even
0006A4C4                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006A944                            		even
0006A944                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006AC44                            		even
0006AC44                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006B244                            		even
0006B244                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006B544                            		even
0006B544                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006BFC4                            		even
0006BFC4                            
0006BFC4                            ; ---------------------------------------------------------------------------
0006BFC4                            ; Level	layout index
0006BFC4                            ; ---------------------------------------------------------------------------
0006BFC4 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006BFCA 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006BFD0 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006BFD6 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006BFDC 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006BFE2 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006BFE8 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006BFEE 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006BFF4 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006BFFA 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C000 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C006 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C00C 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C012 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C018 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C01E 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C024 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C02A 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C030 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C036 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C03C 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C042 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C048 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C04E 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C054 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C05A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C060 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C066 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C06C                            
0006C06C                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C15E                            		even
0006C15E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C162                            Level_GHZ2:	incbin	levels\ghz2.bin
0006C22A                            		even
0006C22A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006C22E                            Level_GHZ3:	incbin	levels\ghz3.bin
0006C350                            		even
0006C350                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006C372                            		even
0006C372 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006C376 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006C37A                            
0006C37A                            Level_LZ1:	incbin	levels\lz1.bin
0006C47C                            		even
0006C47C                            Level_LZbg:	incbin	levels\lzbg.bin
0006C57E                            		even
0006C57E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006C582                            Level_LZ2:	incbin	levels\lz2.bin
0006C61C                            		even
0006C61C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006C620                            Level_LZ3:	incbin	levels\lz3.bin
0006C73A                            		even
0006C73A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C73E                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C7F8                            		even
0006C7F8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C7FC                            
0006C7FC                            Level_MZ1:	incbin	levels\mz1.bin
0006C89A                            		even
0006C89A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006C914                            		even
0006C914                            Level_MZ2:	incbin	levels\mz2.bin
0006C9B8                            		even
0006C9B8                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006CA4A                            		even
0006CA4A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006CA4E                            Level_MZ3:	incbin	levels\mz3.bin
0006CB30                            		even
0006CB30                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006CBD4 00                         		even
0006CBD4 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006CBD8 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006CBDC                            
0006CBDC                            Level_SLZ1:	incbin	levels\slz1.bin
0006CCEE                            		even
0006CCEE                            Level_SLZbg:	incbin	levels\slzbg.bin
0006CD08                            		even
0006CD08                            Level_SLZ2:	incbin	levels\slz2.bin
0006CDF8                            		even
0006CDF8                            Level_SLZ3:	incbin	levels\slz3.bin
0006CF12                            		even
0006CF12 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006CF16                            
0006CF16                            Level_SYZ1:	incbin	levels\syz1.bin
0006CFD2 00                         		even
0006CFD2                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D00C                            		even
0006D00C 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D010                            Level_SYZ2:	incbin	levels\syz2.bin
0006D114                            		even
0006D114 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D118                            Level_SYZ3:	incbin	levels\syz3.bin
0006D272 00                         		even
0006D272 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006D276 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006D27A                            
0006D27A                            Level_SBZ1:	incbin	levels\sbz1.bin
0006D39C                            		even
0006D39C                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006D3DA                            		even
0006D3DA                            Level_SBZ2:	incbin	levels\sbz2.bin
0006D51C                            		even
0006D51C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D686                            		even
0006D686 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D68A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D68E                            Level_End:	incbin	levels\ending.bin
0006D6BE 00                         		even
0006D6BE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D6C2                            
0006D6C2                            ; ---------------------------------------------------------------------------
0006D6C2                            ; Animated uncompressed giant ring graphics
0006D6C2                            ; ---------------------------------------------------------------------------
0006D6C2                            Art_BigRing:	incbin	artunc\bigring.bin
0006E302                            		even
0006E302                            
0006E302                            		incbin	misc\padding3.bin
0006E39E                            		even
0006E39E                            
0006E39E                            ; ---------------------------------------------------------------------------
0006E39E                            ; Sprite locations index
0006E39E                            ; ---------------------------------------------------------------------------
0006E39E 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3A2 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3A6 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3AA 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3AE 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3B2 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3B6 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3BA 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3BE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3C2 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3C6 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3CA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3CE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3D2 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3D6 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3DA 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3DE 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3E2 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3E6 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3EA 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3EE 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3F2 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3F6 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3FA 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E3FE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E402 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E406 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E40A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E40E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E412 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006E416 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006E41A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E41E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E422 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006E426 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006E42A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E42E FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006E434                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006EC7A                            		even
0006EC7A                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006ED2E                            		even
0006ED2E                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006F772                            		even
0006F772                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006FB1A                            		even
0006FB1A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006FE50                            		even
0006FE50                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007039C                            		even
0007039C                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00070834                            		even
00070834                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00070866                            		even
00070866                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00070898                            		even
00070898                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000708CA                            		even
000708CA                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000708FC                            		even
000708FC                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00070946                            		even
00070946                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00070984                            		even
00070984                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070CF0                            		even
00070CF0                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007119A                            		even
0007119A                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071710                            		even
00071710                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007173A                            		even
0007173A                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071BA2                            		even
00071BA2                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072184                            		even
00072184                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000727F6                            		even
000727F6                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00072D60                            		even
00072D60                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073366                            		even
00073366                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073AA4                            		even
00073AA4                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074182                            		even
00074182                            ObjPos_FZ:	incbin	objpos\fz.bin
00074194                            		even
00074194                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000741C6                            		even
000741C6                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000741F8                            		even
000741F8                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007422A                            		even
0007422A                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007425C                            		even
0007425C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007428E                            		even
0007428E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000742C6                            		even
000742C6                            ObjPos_End:	incbin	objpos\ending.bin
00074422                            		even
00074422 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074428                            ; ---------------------------------------------------------------------------
00074428                            		incbin	misc\padding4.bin
00074A52                            		even
00074A52                            
00074A52 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00074A56 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00074A5A 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00074A5E 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00074A62 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074A66 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074A6A                            ; ---------------------------------------------------------------------------
00074A6A                            ; PSG instruments used in music
00074A6A                            ; ---------------------------------------------------------------------------
00074A6A 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074A76 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074A82 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00074A8E                            PSG1:		incbin	sound\psg1.bin
00074AA5                            PSG2:		incbin	sound\psg2.bin
00074AAC                            PSG3:		incbin	sound\psg3.bin
00074ABD                            PSG4:		incbin	sound\psg4.bin
00074AC8                            PSG6:		incbin	sound\psg6.bin
00074AD7                            PSG5:		incbin	sound\psg5.bin
00074B01                            PSG7:		incbin	sound\psg7.bin
00074B1D                            PSG8:		incbin	sound\psg8.bin
00074B45                            PSG9:		incbin	sound\psg9.bin
00074B56                            
00074B56 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00074B5E                            ; ---------------------------------------------------------------------------
00074B5E                            ; Music	Pointers
00074B5E                            ; ---------------------------------------------------------------------------
00074B5E 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074B66 0000 0000 0000 0000        		dc.l Music83, Music84
00074B6E 0000 0000 0000 0000        		dc.l Music85, Music86
00074B76 0000 0000 0000 0000        		dc.l Music87, Music88
00074B7E 0000 0000 0000 0000        		dc.l Music89, Music8A
00074B86 0000 0000 0000 0000        		dc.l Music8B, Music8C
00074B8E 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074B96 0000 0000 0000 0000        		dc.l Music8F, Music90
00074B9E 0000 0000 0000 0000        		dc.l Music91, Music92
00074BA6 0000 0000 0000 0000        		dc.l Music93, Music94
00074BAE 0000 0000 0000 0000        		dc.l Music95, Music96
00074BB6 0000 0000 0000 0000        		dc.l Music97, Music98
00074BBE 0000 0000 0000 0000        		dc.l Music99, Music9A
00074BC6 0000 0000 0000 0000        		dc.l Music9B, Music9C
00074BCE 0000 0000 0000 0000        		dc.l Music9D, Music9E
00074BD6 0000 0000                  		dc.l Music9F
00074BDA                            ; ---------------------------------------------------------------------------
00074BDA                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074BDA                            ; ---------------------------------------------------------------------------
00074BDA 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074BEA 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074BFA 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074C0A 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074C1A 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074C2A 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074C3A 9090 9090                  		dc.b $90, $90, $90, $90
00074C3E                            
00074C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074C3E                            
00074C3E                            
00074C3E                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00074C3E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00074C46 4E71                       		nop	
00074C48 4E71                       		nop	
00074C4A 4E71                       		nop	
00074C4C                            
00074C4C                            loc_71B5A:
00074C4C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00074C54 66F6                       		bne.s	loc_71B5A
00074C56                            
00074C56 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00074C5E 6700                       		beq.s	loc_71B82
00074C60 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074C68 4E71                       		nop	
00074C6A 4E71                       		nop	
00074C6C 4E71                       		nop	
00074C6E 4E71                       		nop	
00074C70 4E71                       		nop	
00074C72 60CA                       		bra.s	sub_71B4C
00074C74                            ; ===========================================================================
00074C74                            
00074C74                            loc_71B82:
00074C74 4DF9 00FF F000             		lea	($FFF000).l,a6
00074C7A 422E 000E                  		clr.b	$E(a6)
00074C7E 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00074C82 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00074C86 532E 0001                  		subq.b	#1,1(a6)
00074C8A 6600                       		bne.s	loc_71B9E
00074C8C 4EBA 0000                  		jsr	sub_7260C(pc)
00074C90                            
00074C90                            loc_71B9E:
00074C90 102E 0004                  		move.b	4(a6),d0
00074C94 6700                       		beq.s	loc_71BA8
00074C96 4EBA 0000                  		jsr	sub_72504(pc)
00074C9A                            
00074C9A                            loc_71BA8:
00074C9A 4A2E 0024                  		tst.b	$24(a6)
00074C9E 6700                       		beq.s	loc_71BB2
00074CA0 4EBA 0000                  		jsr	sub_7267C(pc)
00074CA4                            
00074CA4                            loc_71BB2:
00074CA4 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074CA8 6700                       		beq.s	loc_71BBC	; if not, branch
00074CAA 4EBA 0000                  		jsr	Sound_Play(pc)
00074CAE                            
00074CAE                            loc_71BBC:
00074CAE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074CB4 6700                       		beq.s	loc_71BC8
00074CB6 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074CBA                            
00074CBA                            loc_71BC8:
00074CBA 4BEE 0040                  		lea	$40(a6),a5
00074CBE 4A15                       		tst.b	(a5)
00074CC0 6A00                       		bpl.s	loc_71BD4
00074CC2 4EBA 0000                  		jsr	sub_71C4E(pc)
00074CC6                            
00074CC6                            loc_71BD4:
00074CC6 422E 0008                  		clr.b	8(a6)
00074CCA 7E05                       		moveq	#5,d7
00074CCC                            
00074CCC                            loc_71BDA:
00074CCC DAFC 0030                  		adda.w	#$30,a5
00074CD0 4A15                       		tst.b	(a5)
00074CD2 6A00                       		bpl.s	loc_71BE6
00074CD4 4EBA 0000                  		jsr	sub_71CCA(pc)
00074CD8                            
00074CD8                            loc_71BE6:
00074CD8 51CF FFF2                  		dbf	d7,loc_71BDA
00074CDC                            
00074CDC 7E02                       		moveq	#2,d7
00074CDE                            
00074CDE                            loc_71BEC:
00074CDE DAFC 0030                  		adda.w	#$30,a5
00074CE2 4A15                       		tst.b	(a5)
00074CE4 6A00                       		bpl.s	loc_71BF8
00074CE6 4EBA 0000                  		jsr	sub_72850(pc)
00074CEA                            
00074CEA                            loc_71BF8:
00074CEA 51CF FFF2                  		dbf	d7,loc_71BEC
00074CEE                            
00074CEE 1D7C 0080 000E             		move.b	#$80,$E(a6)
00074CF4 7E02                       		moveq	#2,d7
00074CF6                            
00074CF6                            loc_71C04:
00074CF6 DAFC 0030                  		adda.w	#$30,a5
00074CFA 4A15                       		tst.b	(a5)
00074CFC 6A00                       		bpl.s	loc_71C10
00074CFE 4EBA 0000                  		jsr	sub_71CCA(pc)
00074D02                            
00074D02                            loc_71C10:
00074D02 51CF FFF2                  		dbf	d7,loc_71C04
00074D06                            
00074D06 7E02                       		moveq	#2,d7
00074D08                            
00074D08                            loc_71C16:
00074D08 DAFC 0030                  		adda.w	#$30,a5
00074D0C 4A15                       		tst.b	(a5)
00074D0E 6A00                       		bpl.s	loc_71C22
00074D10 4EBA 0000                  		jsr	sub_72850(pc)
00074D14                            
00074D14                            loc_71C22:
00074D14 51CF FFF2                  		dbf	d7,loc_71C16
00074D18 1D7C 0040 000E             		move.b	#$40,$E(a6)
00074D1E DAFC 0030                  		adda.w	#$30,a5
00074D22 4A15                       		tst.b	(a5)
00074D24 6A00                       		bpl.s	loc_71C38
00074D26 4EBA 0000                  		jsr	sub_71CCA(pc)
00074D2A                            
00074D2A                            loc_71C38:
00074D2A DAFC 0030                  		adda.w	#$30,a5
00074D2E 4A15                       		tst.b	(a5)
00074D30 6A00                       		bpl.s	loc_71C44
00074D32 4EBA 0000                  		jsr	sub_72850(pc)
00074D36                            
00074D36                            loc_71C44:
00074D36 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074D3E 4E75                       		rts	
00074D40                            ; End of function sub_71B4C
00074D40                            
00074D40                            
00074D40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074D40                            
00074D40                            
00074D40                            sub_71C4E:				; XREF: sub_71B4C
00074D40 532D 000E                  		subq.b	#1,$E(a5)
00074D44 6600                       		bne.s	locret_71CAA
00074D46 1D7C 0080 0008             		move.b	#$80,8(a6)
00074D4C 286D 0004                  		movea.l	4(a5),a4
00074D50                            
00074D50                            loc_71C5E:
00074D50 7A00                       		moveq	#0,d5
00074D52 1A1C                       		move.b	(a4)+,d5
00074D54 0C05 00E0                  		cmpi.b	#-$20,d5
00074D58 6500                       		bcs.s	loc_71C6E
00074D5A 4EBA 0000                  		jsr	sub_72A5A(pc)
00074D5E 60F0                       		bra.s	loc_71C5E
00074D60                            ; ===========================================================================
00074D60                            
00074D60                            loc_71C6E:
00074D60 4A05                       		tst.b	d5
00074D62 6A00                       		bpl.s	loc_71C84
00074D64 1B45 0010                  		move.b	d5,$10(a5)
00074D68 1A1C                       		move.b	(a4)+,d5
00074D6A 6A00                       		bpl.s	loc_71C84
00074D6C 534C                       		subq.w	#1,a4
00074D6E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074D74 6000                       		bra.s	loc_71C88
00074D76                            ; ===========================================================================
00074D76                            
00074D76                            loc_71C84:
00074D76 4EBA 0000                  		jsr	sub_71D40(pc)
00074D7A                            
00074D7A                            loc_71C88:
00074D7A 2B4C 0004                  		move.l	a4,4(a5)
00074D7E 0815 0002                  		btst	#2,(a5)
00074D82 6600                       		bne.s	locret_71CAA
00074D84 7000                       		moveq	#0,d0
00074D86 102D 0010                  		move.b	$10(a5),d0
00074D8A 0C00 0080                  		cmpi.b	#$80,d0
00074D8E 6700                       		beq.s	locret_71CAA
00074D90 0800 0003                  		btst	#3,d0
00074D94 6600                       		bne.s	loc_71CAC
00074D96 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00074D9C                            
00074D9C                            locret_71CAA:
00074D9C 4E75                       		rts	
00074D9E                            ; ===========================================================================
00074D9E                            
00074D9E                            loc_71CAC:
00074D9E 0400 0088                  		subi.b	#$88,d0
00074DA2 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074DA6 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074DAC 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074DB4 4E75                       		rts	
00074DB6                            ; End of function sub_71C4E
00074DB6                            
00074DB6                            ; ===========================================================================
00074DB6 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074DBC                            
00074DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DBC                            
00074DBC                            
00074DBC                            sub_71CCA:				; XREF: sub_71B4C
00074DBC 532D 000E                  		subq.b	#1,$E(a5)
00074DC0 6600                       		bne.s	loc_71CE0
00074DC2 0895 0004                  		bclr	#4,(a5)
00074DC6 4EBA 0000                  		jsr	sub_71CEC(pc)
00074DCA 4EBA 0000                  		jsr	sub_71E18(pc)
00074DCE 6000 0000                  		bra.w	loc_726E2
00074DD2                            ; ===========================================================================
00074DD2                            
00074DD2                            loc_71CE0:
00074DD2 4EBA 0000                  		jsr	sub_71D9E(pc)
00074DD6 4EBA 0000                  		jsr	sub_71DC6(pc)
00074DDA 6000 0000                  		bra.w	loc_71E24
00074DDE                            ; End of function sub_71CCA
00074DDE                            
00074DDE                            
00074DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DDE                            
00074DDE                            
00074DDE                            sub_71CEC:				; XREF: sub_71CCA
00074DDE 286D 0004                  		movea.l	4(a5),a4
00074DE2 0895 0001                  		bclr	#1,(a5)
00074DE6                            
00074DE6                            loc_71CF4:
00074DE6 7A00                       		moveq	#0,d5
00074DE8 1A1C                       		move.b	(a4)+,d5
00074DEA 0C05 00E0                  		cmpi.b	#-$20,d5
00074DEE 6500                       		bcs.s	loc_71D04
00074DF0 4EBA 0000                  		jsr	sub_72A5A(pc)
00074DF4 60F0                       		bra.s	loc_71CF4
00074DF6                            ; ===========================================================================
00074DF6                            
00074DF6                            loc_71D04:
00074DF6 4EBA 0000                  		jsr	sub_726FE(pc)
00074DFA 4A05                       		tst.b	d5
00074DFC 6A00                       		bpl.s	loc_71D1A
00074DFE 4EBA 0000                  		jsr	sub_71D22(pc)
00074E02 1A1C                       		move.b	(a4)+,d5
00074E04 6A00                       		bpl.s	loc_71D1A
00074E06 534C                       		subq.w	#1,a4
00074E08 6000 0000                  		bra.w	sub_71D60
00074E0C                            ; ===========================================================================
00074E0C                            
00074E0C                            loc_71D1A:
00074E0C 4EBA 0000                  		jsr	sub_71D40(pc)
00074E10 6000 0000                  		bra.w	sub_71D60
00074E14                            ; End of function sub_71CEC
00074E14                            
00074E14                            
00074E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E14                            
00074E14                            
00074E14                            sub_71D22:				; XREF: sub_71CEC
00074E14 0405 0080                  		subi.b	#$80,d5
00074E18 6700                       		beq.s	loc_71D58
00074E1A DA2D 0008                  		add.b	8(a5),d5
00074E1E 0245 007F                  		andi.w	#$7F,d5
00074E22 E34D                       		lsl.w	#1,d5
00074E24 41FA 0000                  		lea	word_72790(pc),a0
00074E28 3C30 5000                  		move.w	(a0,d5.w),d6
00074E2C 3B46 0010                  		move.w	d6,$10(a5)
00074E30 4E75                       		rts	
00074E32                            ; End of function sub_71D22
00074E32                            
00074E32                            
00074E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E32                            
00074E32                            
00074E32                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074E32 1005                       		move.b	d5,d0
00074E34 122D 0002                  		move.b	2(a5),d1
00074E38                            
00074E38                            loc_71D46:
00074E38 5301                       		subq.b	#1,d1
00074E3A 6700                       		beq.s	loc_71D4E
00074E3C D005                       		add.b	d5,d0
00074E3E 60F8                       		bra.s	loc_71D46
00074E40                            ; ===========================================================================
00074E40                            
00074E40                            loc_71D4E:
00074E40 1B40 000F                  		move.b	d0,$F(a5)
00074E44 1B40 000E                  		move.b	d0,$E(a5)
00074E48 4E75                       		rts	
00074E4A                            ; End of function sub_71D40
00074E4A                            
00074E4A                            ; ===========================================================================
00074E4A                            
00074E4A                            loc_71D58:				; XREF: sub_71D22
00074E4A 08D5 0001                  		bset	#1,(a5)
00074E4E 426D 0010                  		clr.w	$10(a5)
00074E52                            
00074E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E52                            
00074E52                            
00074E52                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00074E52 2B4C 0004                  		move.l	a4,4(a5)
00074E56 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074E5C 0815 0004                  		btst	#4,(a5)
00074E60 6600                       		bne.s	locret_71D9C
00074E62 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00074E68 422D 000C                  		clr.b	$C(a5)
00074E6C 0815 0003                  		btst	#3,(a5)
00074E70 6700                       		beq.s	locret_71D9C
00074E72 206D 0014                  		movea.l	$14(a5),a0
00074E76 1B58 0018                  		move.b	(a0)+,$18(a5)
00074E7A 1B58 0019                  		move.b	(a0)+,$19(a5)
00074E7E 1B58 001A                  		move.b	(a0)+,$1A(a5)
00074E82 1018                       		move.b	(a0)+,d0
00074E84 E208                       		lsr.b	#1,d0
00074E86 1B40 001B                  		move.b	d0,$1B(a5)
00074E8A 426D 001C                  		clr.w	$1C(a5)
00074E8E                            
00074E8E                            locret_71D9C:
00074E8E 4E75                       		rts	
00074E90                            ; End of function sub_71D60
00074E90                            
00074E90                            
00074E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E90                            
00074E90                            
00074E90                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00074E90 4A2D 0012                  		tst.b	$12(a5)
00074E94 6700                       		beq.s	locret_71DC4
00074E96 532D 0012                  		subq.b	#1,$12(a5)
00074E9A 6600                       		bne.s	locret_71DC4
00074E9C 08D5 0001                  		bset	#1,(a5)
00074EA0 4A2D 0001                  		tst.b	1(a5)
00074EA4 6B00 0000                  		bmi.w	loc_71DBE
00074EA8 4EBA 0000                  		jsr	sub_726FE(pc)
00074EAC 584F                       		addq.w	#4,sp
00074EAE 4E75                       		rts	
00074EB0                            ; ===========================================================================
00074EB0                            
00074EB0                            loc_71DBE:
00074EB0 4EBA 0000                  		jsr	sub_729A0(pc)
00074EB4 584F                       		addq.w	#4,sp
00074EB6                            
00074EB6                            locret_71DC4:
00074EB6 4E75                       		rts	
00074EB8                            ; End of function sub_71D9E
00074EB8                            
00074EB8                            
00074EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074EB8                            
00074EB8                            
00074EB8                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00074EB8 584F                       		addq.w	#4,sp
00074EBA 0815 0003                  		btst	#3,(a5)
00074EBE 6700                       		beq.s	locret_71E16
00074EC0 4A2D 0018                  		tst.b	$18(a5)
00074EC4 6700                       		beq.s	loc_71DDA
00074EC6 532D 0018                  		subq.b	#1,$18(a5)
00074ECA 4E75                       		rts	
00074ECC                            ; ===========================================================================
00074ECC                            
00074ECC                            loc_71DDA:
00074ECC 532D 0019                  		subq.b	#1,$19(a5)
00074ED0 6700                       		beq.s	loc_71DE2
00074ED2 4E75                       		rts	
00074ED4                            ; ===========================================================================
00074ED4                            
00074ED4                            loc_71DE2:
00074ED4 206D 0014                  		movea.l	$14(a5),a0
00074ED8 1B68 0001 0019             		move.b	1(a0),$19(a5)
00074EDE 4A2D 001B                  		tst.b	$1B(a5)
00074EE2 6600                       		bne.s	loc_71DFE
00074EE4 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00074EEA 442D 001A                  		neg.b	$1A(a5)
00074EEE 4E75                       		rts	
00074EF0                            ; ===========================================================================
00074EF0                            
00074EF0                            loc_71DFE:
00074EF0 532D 001B                  		subq.b	#1,$1B(a5)
00074EF4 1C2D 001A                  		move.b	$1A(a5),d6
00074EF8 4886                       		ext.w	d6
00074EFA DC6D 001C                  		add.w	$1C(a5),d6
00074EFE 3B46 001C                  		move.w	d6,$1C(a5)
00074F02 DC6D 0010                  		add.w	$10(a5),d6
00074F06 594F                       		subq.w	#4,sp
00074F08                            
00074F08                            locret_71E16:
00074F08 4E75                       		rts	
00074F0A                            ; End of function sub_71DC6
00074F0A                            
00074F0A                            
00074F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F0A                            
00074F0A                            
00074F0A                            sub_71E18:				; XREF: sub_71CCA
00074F0A 0815 0001                  		btst	#1,(a5)
00074F0E 6600                       		bne.s	locret_71E48
00074F10 3C2D 0010                  		move.w	$10(a5),d6
00074F14 6700                       		beq.s	loc_71E4A
00074F16                            
00074F16                            loc_71E24:				; XREF: sub_71CCA
00074F16 102D 001E                  		move.b	$1E(a5),d0
00074F1A 4880                       		ext.w	d0
00074F1C DC40                       		add.w	d0,d6
00074F1E 0815 0002                  		btst	#2,(a5)
00074F22 6600                       		bne.s	locret_71E48
00074F24 3206                       		move.w	d6,d1
00074F26 E049                       		lsr.w	#8,d1
00074F28 103C 00A4                  		move.b	#-$5C,d0
00074F2C 4EBA 0000                  		jsr	sub_72722(pc)
00074F30 1206                       		move.b	d6,d1
00074F32 103C 00A0                  		move.b	#-$60,d0
00074F36 4EBA 0000                  		jsr	sub_72722(pc)
00074F3A                            
00074F3A                            locret_71E48:
00074F3A 4E75                       		rts	
00074F3C                            ; ===========================================================================
00074F3C                            
00074F3C                            loc_71E4A:
00074F3C 08D5 0001                  		bset	#1,(a5)
00074F40 4E75                       		rts	
00074F42                            ; End of function sub_71E18
00074F42                            
00074F42                            ; ===========================================================================
00074F42                            
00074F42                            loc_71E50:				; XREF: sub_71B4C
00074F42 6B00                       		bmi.s	loc_71E94
00074F44 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00074F4A 6700 0000                  		beq.w	loc_71EFE
00074F4E 1D7C 0002 0003             		move.b	#2,3(a6)
00074F54 7602                       		moveq	#2,d3
00074F56 103C 00B4                  		move.b	#-$4C,d0
00074F5A 7200                       		moveq	#0,d1
00074F5C                            
00074F5C                            loc_71E6A:
00074F5C 4EBA 0000                  		jsr	sub_7272E(pc)
00074F60 4EBA 0000                  		jsr	sub_72764(pc)
00074F64 5200                       		addq.b	#1,d0
00074F66 51CB FFF4                  		dbf	d3,loc_71E6A
00074F6A                            
00074F6A 7602                       		moveq	#2,d3
00074F6C 7028                       		moveq	#$28,d0
00074F6E                            
00074F6E                            loc_71E7C:
00074F6E 1203                       		move.b	d3,d1
00074F70 4EBA 0000                  		jsr	sub_7272E(pc)
00074F74 5801                       		addq.b	#4,d1
00074F76 4EBA 0000                  		jsr	sub_7272E(pc)
00074F7A 51CB FFF2                  		dbf	d3,loc_71E7C
00074F7E                            
00074F7E 4EBA 0000                  		jsr	sub_729B6(pc)
00074F82 6000 FDB2                  		bra.w	loc_71C44
00074F86                            ; ===========================================================================
00074F86                            
00074F86                            loc_71E94:				; XREF: loc_71E50
00074F86 422E 0003                  		clr.b	3(a6)
00074F8A 7630                       		moveq	#$30,d3
00074F8C 4BEE 0040                  		lea	$40(a6),a5
00074F90 7806                       		moveq	#6,d4
00074F92                            
00074F92                            loc_71EA0:
00074F92 0815 0007                  		btst	#7,(a5)
00074F96 6700                       		beq.s	loc_71EB8
00074F98 0815 0002                  		btst	#2,(a5)
00074F9C 6600                       		bne.s	loc_71EB8
00074F9E 103C 00B4                  		move.b	#-$4C,d0
00074FA2 122D 000A                  		move.b	$A(a5),d1
00074FA6 4EBA 0000                  		jsr	sub_72722(pc)
00074FAA                            
00074FAA                            loc_71EB8:
00074FAA DAC3                       		adda.w	d3,a5
00074FAC 51CC FFE4                  		dbf	d4,loc_71EA0
00074FB0                            
00074FB0 4BEE 0220                  		lea	$220(a6),a5
00074FB4 7802                       		moveq	#2,d4
00074FB6                            
00074FB6                            loc_71EC4:
00074FB6 0815 0007                  		btst	#7,(a5)
00074FBA 6700                       		beq.s	loc_71EDC
00074FBC 0815 0002                  		btst	#2,(a5)
00074FC0 6600                       		bne.s	loc_71EDC
00074FC2 103C 00B4                  		move.b	#-$4C,d0
00074FC6 122D 000A                  		move.b	$A(a5),d1
00074FCA 4EBA 0000                  		jsr	sub_72722(pc)
00074FCE                            
00074FCE                            loc_71EDC:
00074FCE DAC3                       		adda.w	d3,a5
00074FD0 51CC FFE4                  		dbf	d4,loc_71EC4
00074FD4                            
00074FD4 4BEE 0340                  		lea	$340(a6),a5
00074FD8 0815 0007                  		btst	#7,(a5)
00074FDC 6700                       		beq.s	loc_71EFE
00074FDE 0815 0002                  		btst	#2,(a5)
00074FE2 6600                       		bne.s	loc_71EFE
00074FE4 103C 00B4                  		move.b	#-$4C,d0
00074FE8 122D 000A                  		move.b	$A(a5),d1
00074FEC 4EBA 0000                  		jsr	sub_72722(pc)
00074FF0                            
00074FF0                            loc_71EFE:
00074FF0 6000 FD44                  		bra.w	loc_71C44
00074FF4                            
00074FF4                            ; ---------------------------------------------------------------------------
00074FF4                            ; Subroutine to	play a sound or	music track
00074FF4                            ; ---------------------------------------------------------------------------
00074FF4                            
00074FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FF4                            
00074FF4                            
00074FF4                            Sound_Play:				; XREF: sub_71B4C
00074FF4 2079 0007 4A52             		movea.l	(Go_SoundTypes).l,a0
00074FFA 43EE 000A                  		lea	$A(a6),a1	; load music track number
00074FFE 1616                       		move.b	0(a6),d3
00075000 7802                       		moveq	#2,d4
00075002                            
00075002                            loc_71F12:
00075002 1011                       		move.b	(a1),d0		; move track number to d0
00075004 1200                       		move.b	d0,d1
00075006 4219                       		clr.b	(a1)+
00075008 0400 0081                  		subi.b	#$81,d0
0007500C 6500                       		bcs.s	loc_71F3E
0007500E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075014 6700                       		beq.s	loc_71F2C
00075016 1D41 000A                  		move.b	d1,$A(a6)
0007501A 6000                       		bra.s	loc_71F3E
0007501C                            ; ===========================================================================
0007501C                            
0007501C                            loc_71F2C:
0007501C 0240 007F                  		andi.w	#$7F,d0
00075020 1430 0000                  		move.b	(a0,d0.w),d2
00075024 B403                       		cmp.b	d3,d2
00075026 6500                       		bcs.s	loc_71F3E
00075028 1602                       		move.b	d2,d3
0007502A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007502E                            
0007502E                            loc_71F3E:
0007502E 51CC FFD2                  		dbf	d4,loc_71F12
00075032                            
00075032 4A03                       		tst.b	d3
00075034 6B00                       		bmi.s	locret_71F4A
00075036 1C83                       		move.b	d3,0(a6)
00075038                            
00075038                            locret_71F4A:
00075038 4E75                       		rts	
0007503A                            ; End of function Sound_Play
0007503A                            
0007503A                            
0007503A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007503A                            
0007503A                            
0007503A                            Sound_ChkValue:				; XREF: sub_71B4C
0007503A 7E00                       		moveq	#0,d7
0007503C 1E2E 0009                  		move.b	9(a6),d7
00075040 6700 0000                  		beq.w	Sound_E4
00075044 6A00                       		bpl.s	locret_71F8C
00075046 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007504C 0C07 009F                  		cmpi.b	#$9F,d7
00075050 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075054 0C07 00A0                  		cmpi.b	#$A0,d7
00075058 6500 0000                  		bcs.w	locret_71F8C
0007505C 0C07 00CF                  		cmpi.b	#$CF,d7
00075060 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075064 0C07 00D0                  		cmpi.b	#$D0,d7
00075068 6500 0000                  		bcs.w	locret_71F8C
0007506C 0C07 00E0                  		cmpi.b	#$E0,d7
00075070 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075074 0C07 00E5                  		cmpi.b	#$E5,d7
00075078 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007507A                            
0007507A                            locret_71F8C:
0007507A 4E75                       		rts	
0007507C                            ; ===========================================================================
0007507C                            
0007507C                            Sound_E0toE5				; XREF: Sound_ChkValue
0007507C 0407 00E0                  		subi.b	#$E0,d7
00075080 E54F                       		lsl.w	#2,d7
00075082 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075086                            ; ===========================================================================
00075086                            
00075086                            Sound_ExIndex:
00075086 6000 0000                  		bra.w	Sound_E0
0007508A                            ; ===========================================================================
0007508A 6000 0000                  		bra.w	Sound_E1
0007508E                            ; ===========================================================================
0007508E 6000 0000                  		bra.w	Sound_E2
00075092                            ; ===========================================================================
00075092 6000 0000                  		bra.w	Sound_E3
00075096                            ; ===========================================================================
00075096 6000 0000                  		bra.w	Sound_E4
0007509A                            ; ===========================================================================
0007509A 6000 0000                  		bra.w	Sound_E5
0007509E                            ; ===========================================================================
0007509E                            ; ---------------------------------------------------------------------------
0007509E                            ; Play "Say-gaa" PCM sound
0007509E                            ; ---------------------------------------------------------------------------
0007509E                            
0007509E                            Sound_E1:				  
0007509E 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000750A4 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000750AA 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000750B2                            PlayPCM_Loop:	  
000750B2 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000750B8 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000750BC 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000750C0 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000750C2 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000750C4 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000750C8 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000750CE 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000750D2 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000750D8 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000750DA 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000750DC                            return_PlayPCM: 
000750DC 584F                       		addq.w	#4,sp 
000750DE 4E75                       		rts
000750E0                            		
000750E0                            ; ---------------------------------------------------------------------------
000750E0                            ; Play you are an idiot pcm sound
000750E0                            ; ---------------------------------------------------------------------------
000750E0                            
000750E0                            Sound_E5:  
000750E0 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000750E6 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
000750EC 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000750F4                            PlayPCM_LoopE5:	  
000750F4                            
000750F4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000750FA                            		
000750FA 5278 FE24                  		addq.w	#1,($FFFFFE24).w
000750FE                            		
000750FE 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075102 0200 000F                  		andi.b	#$F,d0
00075106 6700                       		beq.s	SfxE5SwapPalette
00075108                            		
00075108 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007510C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075110 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075112 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075114 60DE                       		bra.s	PlayPCM_LoopE5
00075116                            		
00075116                            SfxE5SwapPalette:
00075116                            		
00075116                            		
00075116                            		
00075116 4BF9 00C0 0004             		lea	($C00004).l,a5
0007511C 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075122                            		
00075122                            		
00075122 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075128 6700                       		beq.s	@not_black
0007512A 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075130 6000                       		bra.s	@merge
00075132                            	@not_black:
00075132 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075138                            	@merge:
00075138 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007513C 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075140 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075146 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007514A                            		
0007514A 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007514E 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075152 60A0                       		bra.s	PlayPCM_LoopE5
00075154                            		
00075154                            ; ===========================================================================
00075154                            ; ---------------------------------------------------------------------------
00075154                            ; Play music track $81-$9F
00075154                            ; ---------------------------------------------------------------------------
00075154                            
00075154                            Sound_81to9F:				; XREF: Sound_ChkValue
00075154 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075158 6600                       		bne.s	loc_72024	; if not, branch
0007515A 4A2E 0027                  		tst.b	$27(a6)
0007515E 6600 0000                  		bne.w	loc_721B6
00075162 4BEE 0040                  		lea	$40(a6),a5
00075166 7009                       		moveq	#9,d0
00075168                            
00075168                            loc_71FE6:
00075168 0895 0002                  		bclr	#2,(a5)
0007516C DAFC 0030                  		adda.w	#$30,a5
00075170 51C8 FFF6                  		dbf	d0,loc_71FE6
00075174                            
00075174 4BEE 0220                  		lea	$220(a6),a5
00075178 7005                       		moveq	#5,d0
0007517A                            
0007517A                            loc_71FF8:
0007517A 0895 0007                  		bclr	#7,(a5)
0007517E DAFC 0030                  		adda.w	#$30,a5
00075182 51C8 FFF6                  		dbf	d0,loc_71FF8
00075186 4216                       		clr.b	0(a6)
00075188 204E                       		movea.l	a6,a0
0007518A 43EE 03A0                  		lea	$3A0(a6),a1
0007518E 303C 0087                  		move.w	#$87,d0
00075192                            
00075192                            loc_72012:
00075192 22D8                       		move.l	(a0)+,(a1)+
00075194 51C8 FFFC                  		dbf	d0,loc_72012
00075198                            
00075198 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007519E 4216                       		clr.b	0(a6)
000751A0 6000                       		bra.s	loc_7202C
000751A2                            ; ===========================================================================
000751A2                            
000751A2                            loc_72024:
000751A2 422E 0027                  		clr.b	$27(a6)
000751A6 422E 0026                  		clr.b	$26(a6)
000751AA                            
000751AA                            loc_7202C:
000751AA 4EBA 0000                  		jsr	sub_725CA(pc)
000751AE 2879 0007 4A62             		movea.l	(off_719A0).l,a4
000751B4 0407 0081                  		subi.b	#$81,d7
000751B8 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000751BE 2879 0007 4A5A             		movea.l	(Go_MusicIndex).l,a4
000751C4 E54F                       		lsl.w	#2,d7
000751C6 2874 7000                  		movea.l	(a4,d7.w),a4
000751CA 7000                       		moveq	#0,d0
000751CC 3014                       		move.w	(a4),d0
000751CE D08C                       		add.l	a4,d0
000751D0 2D40 0018                  		move.l	d0,$18(a6)
000751D4 102C 0005                  		move.b	5(a4),d0
000751D8 1D40 0028                  		move.b	d0,$28(a6)
000751DC 4A2E 002A                  		tst.b	$2A(a6)
000751E0 6700                       		beq.s	loc_72068
000751E2 102E 0029                  		move.b	$29(a6),d0
000751E6                            
000751E6                            loc_72068:
000751E6 1D40 0002                  		move.b	d0,2(a6)
000751EA 1D40 0001                  		move.b	d0,1(a6)
000751EE 7200                       		moveq	#0,d1
000751F0 264C                       		movea.l	a4,a3
000751F2 5C4C                       		addq.w	#6,a4
000751F4 7E00                       		moveq	#0,d7
000751F6 1E2B 0002                  		move.b	2(a3),d7
000751FA 6700 0000                  		beq.w	loc_72114
000751FE 5307                       		subq.b	#1,d7
00075200 123C 00C0                  		move.b	#-$40,d1
00075204 182B 0004                  		move.b	4(a3),d4
00075208 7C30                       		moveq	#$30,d6
0007520A 1A3C 0001                  		move.b	#1,d5
0007520E 43EE 0040                  		lea	$40(a6),a1
00075212 45FA 0000                  		lea	byte_721BA(pc),a2
00075216                            
00075216                            loc_72098:
00075216 08D1 0007                  		bset	#7,(a1)
0007521A 135A 0001                  		move.b	(a2)+,1(a1)
0007521E 1344 0002                  		move.b	d4,2(a1)
00075222 1346 000D                  		move.b	d6,$D(a1)
00075226 1341 000A                  		move.b	d1,$A(a1)
0007522A 1345 000E                  		move.b	d5,$E(a1)
0007522E 7000                       		moveq	#0,d0
00075230 301C                       		move.w	(a4)+,d0
00075232 D08B                       		add.l	a3,d0
00075234 2340 0004                  		move.l	d0,4(a1)
00075238 335C 0008                  		move.w	(a4)+,8(a1)
0007523C D2C6                       		adda.w	d6,a1
0007523E 51CF FFD6                  		dbf	d7,loc_72098
00075242 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075248 6600                       		bne.s	loc_720D8
0007524A 702B                       		moveq	#$2B,d0
0007524C 7200                       		moveq	#0,d1
0007524E 4EBA 0000                  		jsr	sub_7272E(pc)
00075252 6000 0000                  		bra.w	loc_72114
00075256                            ; ===========================================================================
00075256                            
00075256                            loc_720D8:
00075256 7028                       		moveq	#$28,d0
00075258 7206                       		moveq	#6,d1
0007525A 4EBA 0000                  		jsr	sub_7272E(pc)
0007525E 103C 0042                  		move.b	#$42,d0
00075262 727F                       		moveq	#$7F,d1
00075264 4EBA 0000                  		jsr	sub_72764(pc)
00075268 103C 004A                  		move.b	#$4A,d0
0007526C 727F                       		moveq	#$7F,d1
0007526E 4EBA 0000                  		jsr	sub_72764(pc)
00075272 103C 0046                  		move.b	#$46,d0
00075276 727F                       		moveq	#$7F,d1
00075278 4EBA 0000                  		jsr	sub_72764(pc)
0007527C 103C 004E                  		move.b	#$4E,d0
00075280 727F                       		moveq	#$7F,d1
00075282 4EBA 0000                  		jsr	sub_72764(pc)
00075286 103C 00B6                  		move.b	#-$4A,d0
0007528A 123C 00C0                  		move.b	#-$40,d1
0007528E 4EBA 0000                  		jsr	sub_72764(pc)
00075292                            
00075292                            loc_72114:
00075292 7E00                       		moveq	#0,d7
00075294 1E2B 0003                  		move.b	3(a3),d7
00075298 6700                       		beq.s	loc_72154
0007529A 5307                       		subq.b	#1,d7
0007529C 43EE 0190                  		lea	$190(a6),a1
000752A0 45FA 0000                  		lea	byte_721C2(pc),a2
000752A4                            
000752A4                            loc_72126:
000752A4 08D1 0007                  		bset	#7,(a1)
000752A8 135A 0001                  		move.b	(a2)+,1(a1)
000752AC 1344 0002                  		move.b	d4,2(a1)
000752B0 1346 000D                  		move.b	d6,$D(a1)
000752B4 1345 000E                  		move.b	d5,$E(a1)
000752B8 7000                       		moveq	#0,d0
000752BA 301C                       		move.w	(a4)+,d0
000752BC D08B                       		add.l	a3,d0
000752BE 2340 0004                  		move.l	d0,4(a1)
000752C2 335C 0008                  		move.w	(a4)+,8(a1)
000752C6 101C                       		move.b	(a4)+,d0
000752C8 135C 000B                  		move.b	(a4)+,$B(a1)
000752CC D2C6                       		adda.w	d6,a1
000752CE 51CF FFD4                  		dbf	d7,loc_72126
000752D2                            
000752D2                            loc_72154:
000752D2 43EE 0220                  		lea	$220(a6),a1
000752D6 7E05                       		moveq	#5,d7
000752D8                            
000752D8                            loc_7215A:
000752D8 4A11                       		tst.b	(a1)
000752DA 6A00 0000                  		bpl.w	loc_7217C
000752DE 7000                       		moveq	#0,d0
000752E0 1029 0001                  		move.b	1(a1),d0
000752E4 6B00                       		bmi.s	loc_7216E
000752E6 5500                       		subq.b	#2,d0
000752E8 E508                       		lsl.b	#2,d0
000752EA 6000                       		bra.s	loc_72170
000752EC                            ; ===========================================================================
000752EC                            
000752EC                            loc_7216E:
000752EC E608                       		lsr.b	#3,d0
000752EE                            
000752EE                            loc_72170:
000752EE 41FA 0000                  		lea	dword_722CC(pc),a0
000752F2 2070 0000                  		movea.l	(a0,d0.w),a0
000752F6 08D0 0002                  		bset	#2,(a0)
000752FA                            
000752FA                            loc_7217C:
000752FA D2C6                       		adda.w	d6,a1
000752FC 51CF FFDA                  		dbf	d7,loc_7215A
00075300                            
00075300 4A6E 0340                  		tst.w	$340(a6)
00075304 6A00                       		bpl.s	loc_7218E
00075306 08EE 0002 0100             		bset	#2,$100(a6)
0007530C                            
0007530C                            loc_7218E:
0007530C 4A6E 0370                  		tst.w	$370(a6)
00075310 6A00                       		bpl.s	loc_7219A
00075312 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075318                            
00075318                            loc_7219A:
00075318 4BEE 0070                  		lea	$70(a6),a5
0007531C 7805                       		moveq	#5,d4
0007531E                            
0007531E                            loc_721A0:
0007531E 4EBA 0000                  		jsr	sub_726FE(pc)
00075322 DAC6                       		adda.w	d6,a5
00075324 51CC FFF8                  		dbf	d4,loc_721A0
00075328 7802                       		moveq	#2,d4
0007532A                            
0007532A                            loc_721AC:
0007532A 4EBA 0000                  		jsr	sub_729A0(pc)
0007532E DAC6                       		adda.w	d6,a5
00075330 51CC FFF8                  		dbf	d4,loc_721AC
00075334                            
00075334                            loc_721B6:
00075334 584F                       		addq.w	#4,sp
00075336 4E75                       		rts	
00075338                            ; ===========================================================================
00075338 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075340                            		even
00075340 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075344                            		even
00075344                            ; ===========================================================================
00075344                            ; ---------------------------------------------------------------------------
00075344                            ; Play normal sound effect
00075344                            ; ---------------------------------------------------------------------------
00075344                            
00075344                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075344 4A2E 0027                  		tst.b	$27(a6)
00075348 6600 0000                  		bne.w	loc_722C6
0007534C 4A2E 0004                  		tst.b	4(a6)
00075350 6600 0000                  		bne.w	loc_722C6
00075354 4A2E 0024                  		tst.b	$24(a6)
00075358 6600 0000                  		bne.w	loc_722C6
0007535C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075360 6600                       		bne.s	Sound_notB5	; if not, branch
00075362 4A2E 002B                  		tst.b	$2B(a6)
00075366 6600                       		bne.s	loc_721EE
00075368 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007536C                            
0007536C                            loc_721EE:
0007536C 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075372                            
00075372                            Sound_notB5:
00075372 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075376 6600                       		bne.s	Sound_notA7	; if not, branch
00075378 4A2E 002C                  		tst.b	$2C(a6)
0007537C 6600 0000                  		bne.w	locret_722C4
00075380 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075386                            
00075386                            Sound_notA7:
00075386 2079 0007 4A5E             		movea.l	(Go_SoundIndex).l,a0
0007538C 0407 00A0                  		subi.b	#$A0,d7
00075390 E54F                       		lsl.w	#2,d7
00075392 2670 7000                  		movea.l	(a0,d7.w),a3
00075396 224B                       		movea.l	a3,a1
00075398 7200                       		moveq	#0,d1
0007539A 3219                       		move.w	(a1)+,d1
0007539C D28B                       		add.l	a3,d1
0007539E 1A19                       		move.b	(a1)+,d5
000753A0 1E19                       		move.b	(a1)+,d7
000753A2 5307                       		subq.b	#1,d7
000753A4 7C30                       		moveq	#$30,d6
000753A6                            
000753A6                            loc_72228:
000753A6 7600                       		moveq	#0,d3
000753A8 1629 0001                  		move.b	1(a1),d3
000753AC 1803                       		move.b	d3,d4
000753AE 6B00                       		bmi.s	loc_72244
000753B0 5543                       		subq.w	#2,d3
000753B2 E54B                       		lsl.w	#2,d3
000753B4 4BFA 0000                  		lea	dword_722CC(pc),a5
000753B8 2A75 3000                  		movea.l	(a5,d3.w),a5
000753BC 08D5 0002                  		bset	#2,(a5)
000753C0 6000                       		bra.s	loc_7226E
000753C2                            ; ===========================================================================
000753C2                            
000753C2                            loc_72244:
000753C2 E64B                       		lsr.w	#3,d3
000753C4 4BFA 0000                  		lea	dword_722CC(pc),a5
000753C8 2A75 3000                  		movea.l	(a5,d3.w),a5
000753CC 08D5 0002                  		bset	#2,(a5)
000753D0 0C04 00C0                  		cmpi.b	#$C0,d4
000753D4 6600                       		bne.s	loc_7226E
000753D6 1004                       		move.b	d4,d0
000753D8 0000 001F                  		ori.b	#$1F,d0
000753DC 13C0 00C0 0011             		move.b	d0,($C00011).l
000753E2 0840 0005                  		bchg	#5,d0
000753E6 13C0 00C0 0011             		move.b	d0,($C00011).l
000753EC                            
000753EC                            loc_7226E:
000753EC 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000753F0 244D                       		movea.l	a5,a2
000753F2 700B                       		moveq	#$B,d0
000753F4                            
000753F4                            loc_72276:
000753F4 429A                       		clr.l	(a2)+
000753F6 51C8 FFFC                  		dbf	d0,loc_72276
000753FA                            
000753FA 3A99                       		move.w	(a1)+,(a5)
000753FC 1B45 0002                  		move.b	d5,2(a5)
00075400 7000                       		moveq	#0,d0
00075402 3019                       		move.w	(a1)+,d0
00075404 D08B                       		add.l	a3,d0
00075406 2B40 0004                  		move.l	d0,4(a5)
0007540A 3B59 0008                  		move.w	(a1)+,8(a5)
0007540E 1B7C 0001 000E             		move.b	#1,$E(a5)
00075414 1B46 000D                  		move.b	d6,$D(a5)
00075418 4A04                       		tst.b	d4
0007541A 6B00                       		bmi.s	loc_722A8
0007541C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075422 2B41 0020                  		move.l	d1,$20(a5)
00075426                            
00075426                            loc_722A8:
00075426 51CF FF7E                  		dbf	d7,loc_72228
0007542A                            
0007542A 4A2E 0250                  		tst.b	$250(a6)
0007542E 6A00                       		bpl.s	loc_722B8
00075430 08EE 0002 0340             		bset	#2,$340(a6)
00075436                            
00075436                            loc_722B8:
00075436 4A2E 0310                  		tst.b	$310(a6)
0007543A 6A00                       		bpl.s	locret_722C4
0007543C 08EE 0002 0370             		bset	#2,$370(a6)
00075442                            
00075442                            locret_722C4:
00075442 4E75                       		rts	
00075444                            ; ===========================================================================
00075444                            
00075444                            loc_722C6:
00075444 4216                       		clr.b	0(a6)
00075446 4E75                       		rts	
00075448                            ; ===========================================================================
00075448 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007544C 0000 0000                  		dc.l 0
00075450 00FF F100                  		dc.l $FFF100
00075454 00FF F130                  		dc.l $FFF130
00075458 00FF F190                  		dc.l $FFF190
0007545C 00FF F1C0                  		dc.l $FFF1C0
00075460 00FF F1F0                  		dc.l $FFF1F0
00075464 00FF F1F0                  		dc.l $FFF1F0
00075468 00FF F220                  dword_722EC:	dc.l $FFF220
0007546C 0000 0000                  		dc.l 0
00075470 00FF F250                  		dc.l $FFF250
00075474 00FF F280                  		dc.l $FFF280
00075478 00FF F2B0                  		dc.l $FFF2B0
0007547C 00FF F2E0                  		dc.l $FFF2E0
00075480 00FF F310                  		dc.l $FFF310
00075484 00FF F310                  		dc.l $FFF310
00075488                            ; ===========================================================================
00075488                            ; ---------------------------------------------------------------------------
00075488                            ; Play GHZ waterfall sound
00075488                            ; ---------------------------------------------------------------------------
00075488                            
00075488                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075488 4A2E 0027                  		tst.b	$27(a6)
0007548C 6600 0000                  		bne.w	locret_723C6
00075490 4A2E 0004                  		tst.b	4(a6)
00075494 6600 0000                  		bne.w	locret_723C6
00075498 4A2E 0024                  		tst.b	$24(a6)
0007549C 6600 0000                  		bne.w	locret_723C6
000754A0 2079 0007 4A56             		movea.l	(Go_SoundD0).l,a0
000754A6 0407 00D0                  		subi.b	#$D0,d7
000754AA E54F                       		lsl.w	#2,d7
000754AC 2670 7000                  		movea.l	(a0,d7.w),a3
000754B0 224B                       		movea.l	a3,a1
000754B2 7000                       		moveq	#0,d0
000754B4 3019                       		move.w	(a1)+,d0
000754B6 D08B                       		add.l	a3,d0
000754B8 2D40 0020                  		move.l	d0,$20(a6)
000754BC 1A19                       		move.b	(a1)+,d5
000754BE 1E19                       		move.b	(a1)+,d7
000754C0 5307                       		subq.b	#1,d7
000754C2 7C30                       		moveq	#$30,d6
000754C4                            
000754C4                            loc_72348:
000754C4 1829 0001                  		move.b	1(a1),d4
000754C8 6B00                       		bmi.s	loc_7235A
000754CA 08EE 0002 0100             		bset	#2,$100(a6)
000754D0 4BEE 0340                  		lea	$340(a6),a5
000754D4 6000                       		bra.s	loc_72364
000754D6                            ; ===========================================================================
000754D6                            
000754D6                            loc_7235A:
000754D6 08EE 0002 01F0             		bset	#2,$1F0(a6)
000754DC 4BEE 0370                  		lea	$370(a6),a5
000754E0                            
000754E0                            loc_72364:
000754E0 244D                       		movea.l	a5,a2
000754E2 700B                       		moveq	#$B,d0
000754E4                            
000754E4                            loc_72368:
000754E4 429A                       		clr.l	(a2)+
000754E6 51C8 FFFC                  		dbf	d0,loc_72368
000754EA                            
000754EA 3A99                       		move.w	(a1)+,(a5)
000754EC 1B45 0002                  		move.b	d5,2(a5)
000754F0 7000                       		moveq	#0,d0
000754F2 3019                       		move.w	(a1)+,d0
000754F4 D08B                       		add.l	a3,d0
000754F6 2B40 0004                  		move.l	d0,4(a5)
000754FA 3B59 0008                  		move.w	(a1)+,8(a5)
000754FE 1B7C 0001 000E             		move.b	#1,$E(a5)
00075504 1B46 000D                  		move.b	d6,$D(a5)
00075508 4A04                       		tst.b	d4
0007550A 6B00                       		bmi.s	loc_72396
0007550C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075512                            
00075512                            loc_72396:
00075512 51CF FFB0                  		dbf	d7,loc_72348
00075516                            
00075516 4A2E 0250                  		tst.b	$250(a6)
0007551A 6A00                       		bpl.s	loc_723A6
0007551C 08EE 0002 0340             		bset	#2,$340(a6)
00075522                            
00075522                            loc_723A6:
00075522 4A2E 0310                  		tst.b	$310(a6)
00075526 6A00                       		bpl.s	locret_723C6
00075528 08EE 0002 0370             		bset	#2,$370(a6)
0007552E 0004 001F                  		ori.b	#$1F,d4
00075532 13C4 00C0 0011             		move.b	d4,($C00011).l
00075538 0844 0005                  		bchg	#5,d4
0007553C 13C4 00C0 0011             		move.b	d4,($C00011).l
00075542                            
00075542                            locret_723C6:
00075542 4E75                       		rts	
00075544                            ; End of function Sound_ChkValue
00075544                            
00075544                            ; ===========================================================================
00075544 00FF F100                  		dc.l $FFF100
00075548 00FF F1F0                  		dc.l $FFF1F0
0007554C 00FF F250                  		dc.l $FFF250
00075550 00FF F310                  		dc.l $FFF310
00075554 00FF F340                  		dc.l $FFF340
00075558 00FF F370                  		dc.l $FFF370
0007555C                            
0007555C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007555C                            
0007555C                            
0007555C                            Snd_FadeOut1:				; XREF: Sound_E0
0007555C 4216                       		clr.b	0(a6)
0007555E 4BEE 0220                  		lea	$220(a6),a5
00075562 7E05                       		moveq	#5,d7
00075564                            
00075564                            loc_723EA:
00075564 4A15                       		tst.b	(a5)
00075566 6A00 0000                  		bpl.w	loc_72472
0007556A 0895 0007                  		bclr	#7,(a5)
0007556E 7600                       		moveq	#0,d3
00075570 162D 0001                  		move.b	1(a5),d3
00075574 6B00                       		bmi.s	loc_7243C
00075576 4EBA 0000                  		jsr	sub_726FE(pc)
0007557A 0C03 0004                  		cmpi.b	#4,d3
0007557E 6600                       		bne.s	loc_72416
00075580 4A2E 0340                  		tst.b	$340(a6)
00075584 6A00                       		bpl.s	loc_72416
00075586 4BEE 0340                  		lea	$340(a6),a5
0007558A 226E 0020                  		movea.l	$20(a6),a1
0007558E 6000                       		bra.s	loc_72428
00075590                            ; ===========================================================================
00075590                            
00075590                            loc_72416:
00075590 5503                       		subq.b	#2,d3
00075592 E50B                       		lsl.b	#2,d3
00075594 41FA FEB2                  		lea	dword_722CC(pc),a0
00075598 264D                       		movea.l	a5,a3
0007559A 2A70 3000                  		movea.l	(a0,d3.w),a5
0007559E 226E 0018                  		movea.l	$18(a6),a1
000755A2                            
000755A2                            loc_72428:
000755A2 0895 0002                  		bclr	#2,(a5)
000755A6 08D5 0001                  		bset	#1,(a5)
000755AA 102D 000B                  		move.b	$B(a5),d0
000755AE 4EBA 0000                  		jsr	sub_72C4E(pc)
000755B2 2A4B                       		movea.l	a3,a5
000755B4 6000                       		bra.s	loc_72472
000755B6                            ; ===========================================================================
000755B6                            
000755B6                            loc_7243C:
000755B6 4EBA 0000                  		jsr	sub_729A0(pc)
000755BA 41EE 0370                  		lea	$370(a6),a0
000755BE 0C03 00E0                  		cmpi.b	#$E0,d3
000755C2 6700                       		beq.s	loc_7245A
000755C4 0C03 00C0                  		cmpi.b	#$C0,d3
000755C8 6700                       		beq.s	loc_7245A
000755CA E60B                       		lsr.b	#3,d3
000755CC 41FA FE7A                  		lea	dword_722CC(pc),a0
000755D0 2070 3000                  		movea.l	(a0,d3.w),a0
000755D4                            
000755D4                            loc_7245A:
000755D4 0890 0002                  		bclr	#2,(a0)
000755D8 08D0 0001                  		bset	#1,(a0)
000755DC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000755E2 6600                       		bne.s	loc_72472
000755E4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000755EC                            
000755EC                            loc_72472:
000755EC DAFC 0030                  		adda.w	#$30,a5
000755F0 51CF FF72                  		dbf	d7,loc_723EA
000755F4                            
000755F4 4E75                       		rts	
000755F6                            ; End of function Snd_FadeOut1
000755F6                            
000755F6                            
000755F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000755F6                            
000755F6                            
000755F6                            Snd_FadeOut2:				; XREF: Sound_E0
000755F6 4BEE 0340                  		lea	$340(a6),a5
000755FA 4A15                       		tst.b	(a5)
000755FC 6A00                       		bpl.s	loc_724AE
000755FE 0895 0007                  		bclr	#7,(a5)
00075602 0815 0002                  		btst	#2,(a5)
00075606 6600                       		bne.s	loc_724AE
00075608 4EBA 0000                  		jsr	loc_7270A(pc)
0007560C 4BEE 0100                  		lea	$100(a6),a5
00075610 0895 0002                  		bclr	#2,(a5)
00075614 08D5 0001                  		bset	#1,(a5)
00075618 4A15                       		tst.b	(a5)
0007561A 6A00                       		bpl.s	loc_724AE
0007561C 226E 0018                  		movea.l	$18(a6),a1
00075620 102D 000B                  		move.b	$B(a5),d0
00075624 4EBA 0000                  		jsr	sub_72C4E(pc)
00075628                            
00075628                            loc_724AE:
00075628 4BEE 0370                  		lea	$370(a6),a5
0007562C 4A15                       		tst.b	(a5)
0007562E 6A00                       		bpl.s	locret_724E4
00075630 0895 0007                  		bclr	#7,(a5)
00075634 0815 0002                  		btst	#2,(a5)
00075638 6600                       		bne.s	locret_724E4
0007563A 4EBA 0000                  		jsr	loc_729A6(pc)
0007563E 4BEE 01F0                  		lea	$1F0(a6),a5
00075642 0895 0002                  		bclr	#2,(a5)
00075646 08D5 0001                  		bset	#1,(a5)
0007564A 4A15                       		tst.b	(a5)
0007564C 6A00                       		bpl.s	locret_724E4
0007564E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075654 6600                       		bne.s	locret_724E4
00075656 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007565E                            
0007565E                            locret_724E4:
0007565E 4E75                       		rts	
00075660                            ; End of function Snd_FadeOut2
00075660                            
00075660                            ; ===========================================================================
00075660                            ; ---------------------------------------------------------------------------
00075660                            ; Fade out music
00075660                            ; ---------------------------------------------------------------------------
00075660                            
00075660                            Sound_E0:				; XREF: Sound_ExIndex
00075660 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075664 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075668 1D7C 0003 0006             		move.b	#3,6(a6)
0007566E 1D7C 0028 0004             		move.b	#$28,4(a6)
00075674 422E 0040                  		clr.b	$40(a6)
00075678 422E 002A                  		clr.b	$2A(a6)
0007567C 4E75                       		rts	
0007567E                            
0007567E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007567E                            
0007567E                            
0007567E                            sub_72504:				; XREF: sub_71B4C
0007567E 102E 0006                  		move.b	6(a6),d0
00075682 6700                       		beq.s	loc_72510
00075684 532E 0006                  		subq.b	#1,6(a6)
00075688 4E75                       		rts	
0007568A                            ; ===========================================================================
0007568A                            
0007568A                            loc_72510:
0007568A 532E 0004                  		subq.b	#1,4(a6)
0007568E 6700 0000                  		beq.w	Sound_E4
00075692 1D7C 0003 0006             		move.b	#3,6(a6)
00075698 4BEE 0070                  		lea	$70(a6),a5
0007569C 7E05                       		moveq	#5,d7
0007569E                            
0007569E                            loc_72524:
0007569E 4A15                       		tst.b	(a5)
000756A0 6A00                       		bpl.s	loc_72538
000756A2 522D 0009                  		addq.b	#1,9(a5)
000756A6 6A00                       		bpl.s	loc_72534
000756A8 0895 0007                  		bclr	#7,(a5)
000756AC 6000                       		bra.s	loc_72538
000756AE                            ; ===========================================================================
000756AE                            
000756AE                            loc_72534:
000756AE 4EBA 0000                  		jsr	sub_72CB4(pc)
000756B2                            
000756B2                            loc_72538:
000756B2 DAFC 0030                  		adda.w	#$30,a5
000756B6 51CF FFE6                  		dbf	d7,loc_72524
000756BA                            
000756BA 7E02                       		moveq	#2,d7
000756BC                            
000756BC                            loc_72542:
000756BC 4A15                       		tst.b	(a5)
000756BE 6A00                       		bpl.s	loc_72560
000756C0 522D 0009                  		addq.b	#1,9(a5)
000756C4 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000756CA 6500                       		bcs.s	loc_72558
000756CC 0895 0007                  		bclr	#7,(a5)
000756D0 6000                       		bra.s	loc_72560
000756D2                            ; ===========================================================================
000756D2                            
000756D2                            loc_72558:
000756D2 1C2D 0009                  		move.b	9(a5),d6
000756D6 4EBA 0000                  		jsr	sub_7296A(pc)
000756DA                            
000756DA                            loc_72560:
000756DA DAFC 0030                  		adda.w	#$30,a5
000756DE 51CF FFDC                  		dbf	d7,loc_72542
000756E2                            
000756E2 4E75                       		rts	
000756E4                            ; End of function sub_72504
000756E4                            
000756E4                            
000756E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756E4                            
000756E4                            
000756E4                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000756E4 7602                       		moveq	#2,d3
000756E6 7028                       		moveq	#$28,d0
000756E8                            
000756E8                            loc_7256E:
000756E8 1203                       		move.b	d3,d1
000756EA 4EBA 0000                  		jsr	sub_7272E(pc)
000756EE 5801                       		addq.b	#4,d1
000756F0 4EBA 0000                  		jsr	sub_7272E(pc)
000756F4 51CB FFF2                  		dbf	d3,loc_7256E
000756F8                            
000756F8 7040                       		moveq	#$40,d0
000756FA 727F                       		moveq	#$7F,d1
000756FC 7802                       		moveq	#2,d4
000756FE                            
000756FE                            loc_72584:
000756FE 7603                       		moveq	#3,d3
00075700                            
00075700                            loc_72586:
00075700 4EBA 0000                  		jsr	sub_7272E(pc)
00075704 4EBA 0000                  		jsr	sub_72764(pc)
00075708 5840                       		addq.w	#4,d0
0007570A 51CB FFF4                  		dbf	d3,loc_72586
0007570E                            
0007570E 0400 000F                  		subi.b	#$F,d0
00075712 51CC FFEA                  		dbf	d4,loc_72584
00075716                            
00075716 4E75                       		rts	
00075718                            ; End of function sub_7256A
00075718                            
00075718                            ; ===========================================================================
00075718                            ; ---------------------------------------------------------------------------
00075718                            ; Stop music
00075718                            ; ---------------------------------------------------------------------------
00075718                            
00075718                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075718 702B                       		moveq	#$2B,d0
0007571A 123C 0080                  		move.b	#$80,d1
0007571E 4EBA 0000                  		jsr	sub_7272E(pc)
00075722 7027                       		moveq	#$27,d0
00075724 7200                       		moveq	#0,d1
00075726 4EBA 0000                  		jsr	sub_7272E(pc)
0007572A 204E                       		movea.l	a6,a0
0007572C 303C 00E3                  		move.w	#$E3,d0
00075730                            
00075730                            loc_725B6:
00075730 4298                       		clr.l	(a0)+
00075732 51C8 FFFC                  		dbf	d0,loc_725B6
00075736                            
00075736 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007573C 4EBA FFA6                  		jsr	sub_7256A(pc)
00075740 6000 0000                  		bra.w	sub_729B6
00075744                            
00075744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075744                            
00075744                            
00075744                            sub_725CA:				; XREF: Sound_ChkValue
00075744 204E                       		movea.l	a6,a0
00075746 1216                       		move.b	0(a6),d1
00075748 142E 0027                  		move.b	$27(a6),d2
0007574C 162E 002A                  		move.b	$2A(a6),d3
00075750 182E 0026                  		move.b	$26(a6),d4
00075754 3A2E 000A                  		move.w	$A(a6),d5
00075758 303C 0087                  		move.w	#$87,d0
0007575C                            
0007575C                            loc_725E4:
0007575C 4298                       		clr.l	(a0)+
0007575E 51C8 FFFC                  		dbf	d0,loc_725E4
00075762                            
00075762 1C81                       		move.b	d1,0(a6)
00075764 1D42 0027                  		move.b	d2,$27(a6)
00075768 1D43 002A                  		move.b	d3,$2A(a6)
0007576C 1D44 0026                  		move.b	d4,$26(a6)
00075770 3D45 000A                  		move.w	d5,$A(a6)
00075774 1D7C 0080 0009             		move.b	#$80,9(a6)
0007577A 4EBA FF68                  		jsr	sub_7256A(pc)
0007577E 6000 0000                  		bra.w	sub_729B6
00075782                            ; End of function sub_725CA
00075782                            
00075782                            
00075782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075782                            
00075782                            
00075782                            sub_7260C:				; XREF: sub_71B4C
00075782 1D6E 0002 0001             		move.b	2(a6),1(a6)
00075788 41EE 004E                  		lea	$4E(a6),a0
0007578C 7030                       		moveq	#$30,d0
0007578E 7209                       		moveq	#9,d1
00075790                            
00075790                            loc_7261A:
00075790 5210                       		addq.b	#1,(a0)
00075792 D0C0                       		adda.w	d0,a0
00075794 51C9 FFFA                  		dbf	d1,loc_7261A
00075798                            
00075798 4E75                       		rts	
0007579A                            ; End of function sub_7260C
0007579A                            
0007579A                            ; ===========================================================================
0007579A                            ; ---------------------------------------------------------------------------
0007579A                            ; Speed	up music
0007579A                            ; ---------------------------------------------------------------------------
0007579A                            
0007579A                            Sound_E2:				; XREF: Sound_ExIndex
0007579A 4A2E 0027                  		tst.b	$27(a6)
0007579E 6600                       		bne.s	loc_7263E
000757A0 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000757A6 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000757AC 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000757B2 4E75                       		rts	
000757B4                            ; ===========================================================================
000757B4                            
000757B4                            loc_7263E:
000757B4 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000757BA 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000757C0 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000757C6 4E75                       		rts	
000757C8                            ; ===========================================================================
000757C8                            ; ---------------------------------------------------------------------------
000757C8                            ; Change music back to normal speed
000757C8                            ; ---------------------------------------------------------------------------
000757C8                            
000757C8                            Sound_E3:				; XREF: Sound_ExIndex
000757C8 4A2E 0027                  		tst.b	$27(a6)
000757CC 6600                       		bne.s	loc_7266A
000757CE 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000757D4 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000757DA 422E 002A                  		clr.b	$2A(a6)
000757DE 4E75                       		rts	
000757E0                            ; ===========================================================================
000757E0                            
000757E0                            loc_7266A:
000757E0 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000757E6 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000757EC 422E 03CA                  		clr.b	$3CA(a6)
000757F0 4E75                       		rts	
000757F2                            
000757F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757F2                            
000757F2                            
000757F2                            sub_7267C:				; XREF: sub_71B4C
000757F2 4A2E 0025                  		tst.b	$25(a6)
000757F6 6700                       		beq.s	loc_72688
000757F8 532E 0025                  		subq.b	#1,$25(a6)
000757FC 4E75                       		rts	
000757FE                            ; ===========================================================================
000757FE                            
000757FE                            loc_72688:
000757FE 4A2E 0026                  		tst.b	$26(a6)
00075802 6700                       		beq.s	loc_726D6
00075804 532E 0026                  		subq.b	#1,$26(a6)
00075808 1D7C 0002 0025             		move.b	#2,$25(a6)
0007580E 4BEE 0070                  		lea	$70(a6),a5
00075812 7E05                       		moveq	#5,d7
00075814                            
00075814                            loc_7269E:
00075814 4A15                       		tst.b	(a5)
00075816 6A00                       		bpl.s	loc_726AA
00075818 532D 0009                  		subq.b	#1,9(a5)
0007581C 4EBA 0000                  		jsr	sub_72CB4(pc)
00075820                            
00075820                            loc_726AA:
00075820 DAFC 0030                  		adda.w	#$30,a5
00075824 51CF FFEE                  		dbf	d7,loc_7269E
00075828 7E02                       		moveq	#2,d7
0007582A                            
0007582A                            loc_726B4:
0007582A 4A15                       		tst.b	(a5)
0007582C 6A00                       		bpl.s	loc_726CC
0007582E 532D 0009                  		subq.b	#1,9(a5)
00075832 1C2D 0009                  		move.b	9(a5),d6
00075836 0C06 0010                  		cmpi.b	#$10,d6
0007583A 6500                       		bcs.s	loc_726C8
0007583C 7C0F                       		moveq	#$F,d6
0007583E                            
0007583E                            loc_726C8:
0007583E 4EBA 0000                  		jsr	sub_7296A(pc)
00075842                            
00075842                            loc_726CC:
00075842 DAFC 0030                  		adda.w	#$30,a5
00075846 51CF FFE2                  		dbf	d7,loc_726B4
0007584A 4E75                       		rts	
0007584C                            ; ===========================================================================
0007584C                            
0007584C                            loc_726D6:
0007584C 08AE 0002 0040             		bclr	#2,$40(a6)
00075852 422E 0024                  		clr.b	$24(a6)
00075856 4E75                       		rts	
00075858                            ; End of function sub_7267C
00075858                            
00075858                            ; ===========================================================================
00075858                            
00075858                            loc_726E2:				; XREF: sub_71CCA
00075858 0815 0001                  		btst	#1,(a5)
0007585C 6600                       		bne.s	locret_726FC
0007585E 0815 0002                  		btst	#2,(a5)
00075862 6600                       		bne.s	locret_726FC
00075864 7028                       		moveq	#$28,d0
00075866 122D 0001                  		move.b	1(a5),d1
0007586A 0001 00F0                  		ori.b	#-$10,d1
0007586E 6000 0000                  		bra.w	sub_7272E
00075872                            ; ===========================================================================
00075872                            
00075872                            locret_726FC:
00075872 4E75                       		rts	
00075874                            
00075874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075874                            
00075874                            
00075874                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00075874 0815 0004                  		btst	#4,(a5)
00075878 6600                       		bne.s	locret_72714
0007587A 0815 0002                  		btst	#2,(a5)
0007587E 6600                       		bne.s	locret_72714
00075880                            
00075880                            loc_7270A:				; XREF: Snd_FadeOut2
00075880 7028                       		moveq	#$28,d0
00075882 122D 0001                  		move.b	1(a5),d1
00075886 6000 0000                  		bra.w	sub_7272E
0007588A                            ; ===========================================================================
0007588A                            
0007588A                            locret_72714:
0007588A 4E75                       		rts	
0007588C                            ; End of function sub_726FE
0007588C                            
0007588C                            ; ===========================================================================
0007588C                            
0007588C                            loc_72716:				; XREF: sub_72A5A
0007588C 0815 0002                  		btst	#2,(a5)
00075890 6600                       		bne.s	locret_72720
00075892 6000 0000                  		bra.w	sub_72722
00075896                            ; ===========================================================================
00075896                            
00075896                            locret_72720:
00075896 4E75                       		rts	
00075898                            
00075898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075898                            
00075898                            
00075898                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00075898 082D 0002 0001             		btst	#2,1(a5)
0007589E 6600                       		bne.s	loc_7275A
000758A0 D02D 0001                  		add.b	1(a5),d0
000758A4                            ; End of function sub_72722
000758A4                            
000758A4                            
000758A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758A4                            
000758A4                            
000758A4                            sub_7272E:				; XREF: loc_71E6A
000758A4 1439 00A0 4000             		move.b	($A04000).l,d2
000758AA 0802 0007                  		btst	#7,d2
000758AE 66F4                       		bne.s	sub_7272E
000758B0 13C0 00A0 4000             		move.b	d0,($A04000).l
000758B6 4E71                       		nop	
000758B8 4E71                       		nop	
000758BA 4E71                       		nop	
000758BC                            
000758BC                            loc_72746:
000758BC 1439 00A0 4000             		move.b	($A04000).l,d2
000758C2 0802 0007                  		btst	#7,d2
000758C6 66F4                       		bne.s	loc_72746
000758C8                            
000758C8 13C1 00A0 4001             		move.b	d1,($A04001).l
000758CE 4E75                       		rts	
000758D0                            ; End of function sub_7272E
000758D0                            
000758D0                            ; ===========================================================================
000758D0                            
000758D0                            loc_7275A:				; XREF: sub_72722
000758D0 142D 0001                  		move.b	1(a5),d2
000758D4 0882 0002                  		bclr	#2,d2
000758D8 D002                       		add.b	d2,d0
000758DA                            
000758DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758DA                            
000758DA                            
000758DA                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000758DA 1439 00A0 4000             		move.b	($A04000).l,d2
000758E0 0802 0007                  		btst	#7,d2
000758E4 66F4                       		bne.s	sub_72764
000758E6 13C0 00A0 4002             		move.b	d0,($A04002).l
000758EC 4E71                       		nop	
000758EE 4E71                       		nop	
000758F0 4E71                       		nop	
000758F2                            
000758F2                            loc_7277C:
000758F2 1439 00A0 4000             		move.b	($A04000).l,d2
000758F8 0802 0007                  		btst	#7,d2
000758FC 66F4                       		bne.s	loc_7277C
000758FE                            
000758FE 13C1 00A0 4003             		move.b	d1,($A04003).l
00075904 4E75                       		rts	
00075906                            ; End of function sub_72764
00075906                            
00075906                            ; ===========================================================================
00075906 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00075918 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007592A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007593A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007594A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007595A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007596A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007597A 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007598A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007599A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000759AA 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000759BA 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000759C6                            
000759C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759C6                            
000759C6                            
000759C6                            sub_72850:				; XREF: sub_71B4C
000759C6 532D 000E                  		subq.b	#1,$E(a5)
000759CA 6600                       		bne.s	loc_72866
000759CC 0895 0004                  		bclr	#4,(a5)
000759D0 4EBA 0000                  		jsr	sub_72878(pc)
000759D4 4EBA 0000                  		jsr	sub_728DC(pc)
000759D8 6000 0000                  		bra.w	loc_7292E
000759DC                            ; ===========================================================================
000759DC                            
000759DC                            loc_72866:
000759DC 4EBA F4B2                  		jsr	sub_71D9E(pc)
000759E0 4EBA 0000                  		jsr	sub_72926(pc)
000759E4 4EBA F4D2                  		jsr	sub_71DC6(pc)
000759E8 4EBA 0000                  		jsr	sub_728E2(pc)
000759EC 4E75                       		rts	
000759EE                            ; End of function sub_72850
000759EE                            
000759EE                            
000759EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759EE                            
000759EE                            
000759EE                            sub_72878:				; XREF: sub_72850
000759EE 0895 0001                  		bclr	#1,(a5)
000759F2 286D 0004                  		movea.l	4(a5),a4
000759F6                            
000759F6                            loc_72880:
000759F6 7A00                       		moveq	#0,d5
000759F8 1A1C                       		move.b	(a4)+,d5
000759FA 0C05 00E0                  		cmpi.b	#$E0,d5
000759FE 6500                       		bcs.s	loc_72890
00075A00 4EBA 0000                  		jsr	sub_72A5A(pc)
00075A04 60F0                       		bra.s	loc_72880
00075A06                            ; ===========================================================================
00075A06                            
00075A06                            loc_72890:
00075A06 4A05                       		tst.b	d5
00075A08 6A00                       		bpl.s	loc_728A4
00075A0A 4EBA 0000                  		jsr	sub_728AC(pc)
00075A0E 1A1C                       		move.b	(a4)+,d5
00075A10 4A05                       		tst.b	d5
00075A12 6A00                       		bpl.s	loc_728A4
00075A14 534C                       		subq.w	#1,a4
00075A16 6000 F43A                  		bra.w	sub_71D60
00075A1A                            ; ===========================================================================
00075A1A                            
00075A1A                            loc_728A4:
00075A1A 4EBA F416                  		jsr	sub_71D40(pc)
00075A1E 6000 F432                  		bra.w	sub_71D60
00075A22                            ; End of function sub_72878
00075A22                            
00075A22                            
00075A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A22                            
00075A22                            
00075A22                            sub_728AC:				; XREF: sub_72878
00075A22 0405 0081                  		subi.b	#$81,d5
00075A26 6500                       		bcs.s	loc_728CA
00075A28 DA2D 0008                  		add.b	8(a5),d5
00075A2C 0245 007F                  		andi.w	#$7F,d5
00075A30 E34D                       		lsl.w	#1,d5
00075A32 41FA 0000                  		lea	word_729CE(pc),a0
00075A36 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075A3C 6000 F414                  		bra.w	sub_71D60
00075A40                            ; ===========================================================================
00075A40                            
00075A40                            loc_728CA:
00075A40 08D5 0001                  		bset	#1,(a5)
00075A44 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075A4A 4EBA F406                  		jsr	sub_71D60(pc)
00075A4E 6000 0000                  		bra.w	sub_729A0
00075A52                            ; End of function sub_728AC
00075A52                            
00075A52                            
00075A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A52                            
00075A52                            
00075A52                            sub_728DC:				; XREF: sub_72850
00075A52 3C2D 0010                  		move.w	$10(a5),d6
00075A56 6B00                       		bmi.s	loc_72920
00075A58                            ; End of function sub_728DC
00075A58                            
00075A58                            
00075A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A58                            
00075A58                            
00075A58                            sub_728E2:				; XREF: sub_72850
00075A58 102D 001E                  		move.b	$1E(a5),d0
00075A5C 4880                       		ext.w	d0
00075A5E DC40                       		add.w	d0,d6
00075A60 0815 0002                  		btst	#2,(a5)
00075A64 6600                       		bne.s	locret_7291E
00075A66 0815 0001                  		btst	#1,(a5)
00075A6A 6600                       		bne.s	locret_7291E
00075A6C 102D 0001                  		move.b	1(a5),d0
00075A70 0C00 00E0                  		cmpi.b	#$E0,d0
00075A74 6600                       		bne.s	loc_72904
00075A76 103C 00C0                  		move.b	#$C0,d0
00075A7A                            
00075A7A                            loc_72904:
00075A7A 3206                       		move.w	d6,d1
00075A7C 0201 000F                  		andi.b	#$F,d1
00075A80 8001                       		or.b	d1,d0
00075A82 E84E                       		lsr.w	#4,d6
00075A84 0206 003F                  		andi.b	#$3F,d6
00075A88 13C0 00C0 0011             		move.b	d0,($C00011).l
00075A8E 13C6 00C0 0011             		move.b	d6,($C00011).l
00075A94                            
00075A94                            locret_7291E:
00075A94 4E75                       		rts	
00075A96                            ; End of function sub_728E2
00075A96                            
00075A96                            ; ===========================================================================
00075A96                            
00075A96                            loc_72920:				; XREF: sub_728DC
00075A96 08D5 0001                  		bset	#1,(a5)
00075A9A 4E75                       		rts	
00075A9C                            
00075A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A9C                            
00075A9C                            
00075A9C                            sub_72926:				; XREF: sub_72850
00075A9C 4A2D 000B                  		tst.b	$B(a5)
00075AA0 6700 0000                  		beq.w	locret_7298A
00075AA4                            
00075AA4                            loc_7292E:				; XREF: sub_72850
00075AA4 1C2D 0009                  		move.b	9(a5),d6
00075AA8 7000                       		moveq	#0,d0
00075AAA 102D 000B                  		move.b	$B(a5),d0
00075AAE 6700                       		beq.s	sub_7296A
00075AB0 2079 0007 4A66             		movea.l	(Go_PSGIndex).l,a0
00075AB6 5340                       		subq.w	#1,d0
00075AB8 E548                       		lsl.w	#2,d0
00075ABA 2070 0000                  		movea.l	(a0,d0.w),a0
00075ABE 102D 000C                  		move.b	$C(a5),d0
00075AC2 1030 0000                  		move.b	(a0,d0.w),d0
00075AC6 522D 000C                  		addq.b	#1,$C(a5)
00075ACA 0800 0007                  		btst	#7,d0
00075ACE 6700                       		beq.s	loc_72960
00075AD0 0C00 0080                  		cmpi.b	#$80,d0
00075AD4 6700                       		beq.s	loc_7299A
00075AD6                            
00075AD6                            loc_72960:
00075AD6 DC40                       		add.w	d0,d6
00075AD8 0C06 0010                  		cmpi.b	#$10,d6
00075ADC 6500                       		bcs.s	sub_7296A
00075ADE 7C0F                       		moveq	#$F,d6
00075AE0                            ; End of function sub_72926
00075AE0                            
00075AE0                            
00075AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AE0                            
00075AE0                            
00075AE0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075AE0 0815 0001                  		btst	#1,(a5)
00075AE4 6600                       		bne.s	locret_7298A
00075AE6 0815 0002                  		btst	#2,(a5)
00075AEA 6600                       		bne.s	locret_7298A
00075AEC 0815 0004                  		btst	#4,(a5)
00075AF0 6600                       		bne.s	loc_7298C
00075AF2                            
00075AF2                            loc_7297C:
00075AF2 8C2D 0001                  		or.b	1(a5),d6
00075AF6 0606 0010                  		addi.b	#$10,d6
00075AFA 13C6 00C0 0011             		move.b	d6,($C00011).l
00075B00                            
00075B00                            locret_7298A:
00075B00 4E75                       		rts	
00075B02                            ; ===========================================================================
00075B02                            
00075B02                            loc_7298C:
00075B02 4A2D 0013                  		tst.b	$13(a5)
00075B06 67EA                       		beq.s	loc_7297C
00075B08 4A2D 0012                  		tst.b	$12(a5)
00075B0C 66E4                       		bne.s	loc_7297C
00075B0E 4E75                       		rts	
00075B10                            ; End of function sub_7296A
00075B10                            
00075B10                            ; ===========================================================================
00075B10                            
00075B10                            loc_7299A:				; XREF: sub_72926
00075B10 532D 000C                  		subq.b	#1,$C(a5)
00075B14 4E75                       		rts	
00075B16                            
00075B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B16                            
00075B16                            
00075B16                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075B16 0815 0002                  		btst	#2,(a5)
00075B1A 6600                       		bne.s	locret_729B4
00075B1C                            
00075B1C                            loc_729A6:				; XREF: Snd_FadeOut2
00075B1C 102D 0001                  		move.b	1(a5),d0
00075B20 0000 001F                  		ori.b	#$1F,d0
00075B24 13C0 00C0 0011             		move.b	d0,($C00011).l
00075B2A                            
00075B2A                            locret_729B4:
00075B2A 4E75                       		rts	
00075B2C                            ; End of function sub_729A0
00075B2C                            
00075B2C                            
00075B2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B2C                            
00075B2C                            
00075B2C                            sub_729B6:				; XREF: loc_71E7C
00075B2C 41F9 00C0 0011             		lea	($C00011).l,a0
00075B32 10BC 009F                  		move.b	#$9F,(a0)
00075B36 10BC 00BF                  		move.b	#$BF,(a0)
00075B3A 10BC 00DF                  		move.b	#$DF,(a0)
00075B3E 10BC 00FF                  		move.b	#$FF,(a0)
00075B42 4E75                       		rts	
00075B44                            ; End of function sub_729B6
00075B44                            
00075B44                            ; ===========================================================================
00075B44 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00075B56 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00075B68 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00075B7C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00075B90 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075BA4 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075BB8 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075BCC 0011 0000                  		dc.w $11, 0
00075BD0                            
00075BD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BD0                            
00075BD0                            
00075BD0                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075BD0 0445 00E0                  		subi.w	#$E0,d5
00075BD4 E54D                       		lsl.w	#2,d5
00075BD6 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075BDA                            ; End of function sub_72A5A
00075BDA                            
00075BDA                            ; ===========================================================================
00075BDA                            
00075BDA                            loc_72A64:
00075BDA 6000 0000                  		bra.w	loc_72ACC
00075BDE                            ; ===========================================================================
00075BDE 6000 0000                  		bra.w	loc_72AEC
00075BE2                            ; ===========================================================================
00075BE2 6000 0000                  		bra.w	loc_72AF2
00075BE6                            ; ===========================================================================
00075BE6 6000 0000                  		bra.w	loc_72AF8
00075BEA                            ; ===========================================================================
00075BEA 6000 0000                  		bra.w	loc_72B14
00075BEE                            ; ===========================================================================
00075BEE 6000 0000                  		bra.w	loc_72B9E
00075BF2                            ; ===========================================================================
00075BF2 6000 0000                  		bra.w	loc_72BA4
00075BF6                            ; ===========================================================================
00075BF6 6000 0000                  		bra.w	loc_72BAE
00075BFA                            ; ===========================================================================
00075BFA 6000 0000                  		bra.w	loc_72BB4
00075BFE                            ; ===========================================================================
00075BFE 6000 0000                  		bra.w	loc_72BBE
00075C02                            ; ===========================================================================
00075C02 6000 0000                  		bra.w	loc_72BC6
00075C06                            ; ===========================================================================
00075C06 6000 0000                  		bra.w	loc_72BD0
00075C0A                            ; ===========================================================================
00075C0A 6000 0000                  		bra.w	loc_72BE6
00075C0E                            ; ===========================================================================
00075C0E 6000 0000                  		bra.w	loc_72BEE
00075C12                            ; ===========================================================================
00075C12 6000 0000                  		bra.w	loc_72BF4
00075C16                            ; ===========================================================================
00075C16 6000 0000                  		bra.w	loc_72C26
00075C1A                            ; ===========================================================================
00075C1A 6000 0000                  		bra.w	loc_72D30
00075C1E                            ; ===========================================================================
00075C1E 6000 0000                  		bra.w	loc_72D52
00075C22                            ; ===========================================================================
00075C22 6000 0000                  		bra.w	loc_72D58
00075C26                            ; ===========================================================================
00075C26 6000 0000                  		bra.w	loc_72E06
00075C2A                            ; ===========================================================================
00075C2A 6000 0000                  		bra.w	loc_72E20
00075C2E                            ; ===========================================================================
00075C2E 6000 0000                  		bra.w	loc_72E26
00075C32                            ; ===========================================================================
00075C32 6000 0000                  		bra.w	loc_72E2C
00075C36                            ; ===========================================================================
00075C36 6000 0000                  		bra.w	loc_72E38
00075C3A                            ; ===========================================================================
00075C3A 6000 0000                  		bra.w	loc_72E52
00075C3E                            ; ===========================================================================
00075C3E 6000 0000                  		bra.w	loc_72E64
00075C42                            ; ===========================================================================
00075C42                            
00075C42                            loc_72ACC:				; XREF: loc_72A64
00075C42 121C                       		move.b	(a4)+,d1
00075C44 4A2D 0001                  		tst.b	1(a5)
00075C48 6B00                       		bmi.s	locret_72AEA
00075C4A 102D 000A                  		move.b	$A(a5),d0
00075C4E 0200 0037                  		andi.b	#$37,d0
00075C52 8200                       		or.b	d0,d1
00075C54 1B41 000A                  		move.b	d1,$A(a5)
00075C58 103C 00B4                  		move.b	#$B4,d0
00075C5C 6000 FC2E                  		bra.w	loc_72716
00075C60                            ; ===========================================================================
00075C60                            
00075C60                            locret_72AEA:
00075C60 4E75                       		rts	
00075C62                            ; ===========================================================================
00075C62                            
00075C62                            loc_72AEC:				; XREF: loc_72A64
00075C62 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00075C66 4E75                       		rts	
00075C68                            ; ===========================================================================
00075C68                            
00075C68                            loc_72AF2:				; XREF: loc_72A64
00075C68 1D5C 0007                  		move.b	(a4)+,7(a6)
00075C6C 4E75                       		rts	
00075C6E                            ; ===========================================================================
00075C6E                            
00075C6E                            loc_72AF8:				; XREF: loc_72A64
00075C6E 7000                       		moveq	#0,d0
00075C70 102D 000D                  		move.b	$D(a5),d0
00075C74 2875 0000                  		movea.l	(a5,d0.w),a4
00075C78 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00075C80 544C                       		addq.w	#2,a4
00075C82 5800                       		addq.b	#4,d0
00075C84 1B40 000D                  		move.b	d0,$D(a5)
00075C88 4E75                       		rts	
00075C8A                            ; ===========================================================================
00075C8A                            
00075C8A                            loc_72B14:				; XREF: loc_72A64
00075C8A 204E                       		movea.l	a6,a0
00075C8C 43EE 03A0                  		lea	$3A0(a6),a1
00075C90 303C 0087                  		move.w	#$87,d0
00075C94                            
00075C94                            loc_72B1E:
00075C94 20D9                       		move.l	(a1)+,(a0)+
00075C96 51C8 FFFC                  		dbf	d0,loc_72B1E
00075C9A                            
00075C9A 08EE 0002 0040             		bset	#2,$40(a6)
00075CA0 264D                       		movea.l	a5,a3
00075CA2 1C3C 0028                  		move.b	#$28,d6
00075CA6 9C2E 0026                  		sub.b	$26(a6),d6
00075CAA 7E05                       		moveq	#5,d7
00075CAC 4BEE 0070                  		lea	$70(a6),a5
00075CB0                            
00075CB0                            loc_72B3A:
00075CB0 0815 0007                  		btst	#7,(a5)
00075CB4 6700                       		beq.s	loc_72B5C
00075CB6 08D5 0001                  		bset	#1,(a5)
00075CBA DD2D 0009                  		add.b	d6,9(a5)
00075CBE 0815 0002                  		btst	#2,(a5)
00075CC2 6600                       		bne.s	loc_72B5C
00075CC4 7000                       		moveq	#0,d0
00075CC6 102D 000B                  		move.b	$B(a5),d0
00075CCA 226E 0018                  		movea.l	$18(a6),a1
00075CCE 4EBA 0000                  		jsr	sub_72C4E(pc)
00075CD2                            
00075CD2                            loc_72B5C:
00075CD2 DAFC 0030                  		adda.w	#$30,a5
00075CD6 51CF FFD8                  		dbf	d7,loc_72B3A
00075CDA                            
00075CDA 7E02                       		moveq	#2,d7
00075CDC                            
00075CDC                            loc_72B66:
00075CDC 0815 0007                  		btst	#7,(a5)
00075CE0 6700                       		beq.s	loc_72B78
00075CE2 08D5 0001                  		bset	#1,(a5)
00075CE6 4EBA FE2E                  		jsr	sub_729A0(pc)
00075CEA DD2D 0009                  		add.b	d6,9(a5)
00075CEE                            
00075CEE                            loc_72B78:
00075CEE DAFC 0030                  		adda.w	#$30,a5
00075CF2 51CF FFE8                  		dbf	d7,loc_72B66
00075CF6 2A4B                       		movea.l	a3,a5
00075CF8 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075CFE 1D7C 0028 0026             		move.b	#$28,$26(a6)
00075D04 422E 0027                  		clr.b	$27(a6)
00075D08 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075D10 504F                       		addq.w	#8,sp
00075D12 4E75                       		rts	
00075D14                            ; ===========================================================================
00075D14                            
00075D14                            loc_72B9E:				; XREF: loc_72A64
00075D14 1B5C 0002                  		move.b	(a4)+,2(a5)
00075D18 4E75                       		rts	
00075D1A                            ; ===========================================================================
00075D1A                            
00075D1A                            loc_72BA4:				; XREF: loc_72A64
00075D1A 101C                       		move.b	(a4)+,d0
00075D1C D12D 0009                  		add.b	d0,9(a5)
00075D20 6000 0000                  		bra.w	sub_72CB4
00075D24                            ; ===========================================================================
00075D24                            
00075D24                            loc_72BAE:				; XREF: loc_72A64
00075D24 08D5 0004                  		bset	#4,(a5)
00075D28 4E75                       		rts	
00075D2A                            ; ===========================================================================
00075D2A                            
00075D2A                            loc_72BB4:				; XREF: loc_72A64
00075D2A 1B54 0012                  		move.b	(a4),$12(a5)
00075D2E 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075D32 4E75                       		rts	
00075D34                            ; ===========================================================================
00075D34                            
00075D34                            loc_72BBE:				; XREF: loc_72A64
00075D34 101C                       		move.b	(a4)+,d0
00075D36 D12D 0008                  		add.b	d0,8(a5)
00075D3A 4E75                       		rts	
00075D3C                            ; ===========================================================================
00075D3C                            
00075D3C                            loc_72BC6:				; XREF: loc_72A64
00075D3C 1D54 0002                  		move.b	(a4),2(a6)
00075D40 1D5C 0001                  		move.b	(a4)+,1(a6)
00075D44 4E75                       		rts	
00075D46                            ; ===========================================================================
00075D46                            
00075D46                            loc_72BD0:				; XREF: loc_72A64
00075D46 41EE 0040                  		lea	$40(a6),a0
00075D4A 101C                       		move.b	(a4)+,d0
00075D4C 7230                       		moveq	#$30,d1
00075D4E 7409                       		moveq	#9,d2
00075D50                            
00075D50                            loc_72BDA:
00075D50 1140 0002                  		move.b	d0,2(a0)
00075D54 D0C1                       		adda.w	d1,a0
00075D56 51CA FFF8                  		dbf	d2,loc_72BDA
00075D5A                            
00075D5A 4E75                       		rts	
00075D5C                            ; ===========================================================================
00075D5C                            
00075D5C                            loc_72BE6:				; XREF: loc_72A64
00075D5C 101C                       		move.b	(a4)+,d0
00075D5E D12D 0009                  		add.b	d0,9(a5)
00075D62 4E75                       		rts	
00075D64                            ; ===========================================================================
00075D64                            
00075D64                            loc_72BEE:				; XREF: loc_72A64
00075D64 422E 002C                  		clr.b	$2C(a6)
00075D68 4E75                       		rts	
00075D6A                            ; ===========================================================================
00075D6A                            
00075D6A                            loc_72BF4:				; XREF: loc_72A64
00075D6A 0895 0007                  		bclr	#7,(a5)
00075D6E 0895 0004                  		bclr	#4,(a5)
00075D72 4EBA FB00                  		jsr	sub_726FE(pc)
00075D76 4A2E 0250                  		tst.b	$250(a6)
00075D7A 6B00                       		bmi.s	loc_72C22
00075D7C 264D                       		movea.l	a5,a3
00075D7E 4BEE 0100                  		lea	$100(a6),a5
00075D82 226E 0018                  		movea.l	$18(a6),a1
00075D86 0895 0002                  		bclr	#2,(a5)
00075D8A 08D5 0001                  		bset	#1,(a5)
00075D8E 102D 000B                  		move.b	$B(a5),d0
00075D92 4EBA 0000                  		jsr	sub_72C4E(pc)
00075D96 2A4B                       		movea.l	a3,a5
00075D98                            
00075D98                            loc_72C22:
00075D98 504F                       		addq.w	#8,sp
00075D9A 4E75                       		rts	
00075D9C                            ; ===========================================================================
00075D9C                            
00075D9C                            loc_72C26:				; XREF: loc_72A64
00075D9C 7000                       		moveq	#0,d0
00075D9E 101C                       		move.b	(a4)+,d0
00075DA0 1B40 000B                  		move.b	d0,$B(a5)
00075DA4 0815 0002                  		btst	#2,(a5)
00075DA8 6600 0000                  		bne.w	locret_72CAA
00075DAC 226E 0018                  		movea.l	$18(a6),a1
00075DB0 4A2E 000E                  		tst.b	$E(a6)
00075DB4 6700                       		beq.s	sub_72C4E
00075DB6 226D 0020                  		movea.l	$20(a5),a1
00075DBA 4A2E 000E                  		tst.b	$E(a6)
00075DBE 6B00                       		bmi.s	sub_72C4E
00075DC0 226E 0020                  		movea.l	$20(a6),a1
00075DC4                            
00075DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DC4                            
00075DC4                            
00075DC4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075DC4 5340                       		subq.w	#1,d0
00075DC6 6B00                       		bmi.s	loc_72C5C
00075DC8 323C 0019                  		move.w	#$19,d1
00075DCC                            
00075DCC                            loc_72C56:
00075DCC D2C1                       		adda.w	d1,a1
00075DCE 51C8 FFFC                  		dbf	d0,loc_72C56
00075DD2                            
00075DD2                            loc_72C5C:
00075DD2 1219                       		move.b	(a1)+,d1
00075DD4 1B41 001F                  		move.b	d1,$1F(a5)
00075DD8 1801                       		move.b	d1,d4
00075DDA 103C 00B0                  		move.b	#$B0,d0
00075DDE 4EBA FAB8                  		jsr	sub_72722(pc)
00075DE2 45FA 0000                  		lea	byte_72D18(pc),a2
00075DE6 7613                       		moveq	#$13,d3
00075DE8                            
00075DE8                            loc_72C72:
00075DE8 101A                       		move.b	(a2)+,d0
00075DEA 1219                       		move.b	(a1)+,d1
00075DEC 4EBA FAAA                  		jsr	sub_72722(pc)
00075DF0 51CB FFF6                  		dbf	d3,loc_72C72
00075DF4 7A03                       		moveq	#3,d5
00075DF6 0244 0007                  		andi.w	#7,d4
00075DFA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075DFE 162D 0009                  		move.b	9(a5),d3
00075E02                            
00075E02                            loc_72C8C:
00075E02 101A                       		move.b	(a2)+,d0
00075E04 1219                       		move.b	(a1)+,d1
00075E06 E20C                       		lsr.b	#1,d4
00075E08 6400                       		bcc.s	loc_72C96
00075E0A D203                       		add.b	d3,d1
00075E0C                            
00075E0C                            loc_72C96:
00075E0C 4EBA FA8A                  		jsr	sub_72722(pc)
00075E10 51CD FFF0                  		dbf	d5,loc_72C8C
00075E14 103C 00B4                  		move.b	#$B4,d0
00075E18 122D 000A                  		move.b	$A(a5),d1
00075E1C 4EBA FA7A                  		jsr	sub_72722(pc)
00075E20                            
00075E20                            locret_72CAA:
00075E20 4E75                       		rts	
00075E22                            ; End of function sub_72C4E
00075E22                            
00075E22                            ; ===========================================================================
00075E22 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075E2A                            
00075E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E2A                            
00075E2A                            
00075E2A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075E2A 0815 0002                  		btst	#2,(a5)
00075E2E 6600                       		bne.s	locret_72D16
00075E30 7000                       		moveq	#0,d0
00075E32 102D 000B                  		move.b	$B(a5),d0
00075E36 226E 0018                  		movea.l	$18(a6),a1
00075E3A 4A2E 000E                  		tst.b	$E(a6)
00075E3E 6700                       		beq.s	loc_72CD8
00075E40 226E 0020                  		movea.l	$20(a6),a1
00075E44 4A2E 000E                  		tst.b	$E(a6)
00075E48 6B00                       		bmi.s	loc_72CD8
00075E4A 226E 0020                  		movea.l	$20(a6),a1
00075E4E                            
00075E4E                            loc_72CD8:
00075E4E 5340                       		subq.w	#1,d0
00075E50 6B00                       		bmi.s	loc_72CE6
00075E52 323C 0019                  		move.w	#$19,d1
00075E56                            
00075E56                            loc_72CE0:
00075E56 D2C1                       		adda.w	d1,a1
00075E58 51C8 FFFC                  		dbf	d0,loc_72CE0
00075E5C                            
00075E5C                            loc_72CE6:
00075E5C D2FC 0015                  		adda.w	#$15,a1
00075E60 45FA 0000                  		lea	byte_72D2C(pc),a2
00075E64 102D 001F                  		move.b	$1F(a5),d0
00075E68 0240 0007                  		andi.w	#7,d0
00075E6C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00075E70 162D 0009                  		move.b	9(a5),d3
00075E74 6B00                       		bmi.s	locret_72D16
00075E76 7A03                       		moveq	#3,d5
00075E78                            
00075E78                            loc_72D02:
00075E78 101A                       		move.b	(a2)+,d0
00075E7A 1219                       		move.b	(a1)+,d1
00075E7C E20C                       		lsr.b	#1,d4
00075E7E 6400                       		bcc.s	loc_72D12
00075E80 D203                       		add.b	d3,d1
00075E82 6500                       		bcs.s	loc_72D12
00075E84 4EBA FA12                  		jsr	sub_72722(pc)
00075E88                            
00075E88                            loc_72D12:
00075E88 51CD FFEE                  		dbf	d5,loc_72D02
00075E8C                            
00075E8C                            locret_72D16:
00075E8C 4E75                       		rts	
00075E8E                            ; End of function sub_72CB4
00075E8E                            
00075E8E                            ; ===========================================================================
00075E8E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00075E98 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00075EA2 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00075EA6                            ; ===========================================================================
00075EA6                            
00075EA6                            loc_72D30:				; XREF: loc_72A64
00075EA6 08D5 0003                  		bset	#3,(a5)
00075EAA 2B4C 0014                  		move.l	a4,$14(a5)
00075EAE 1B5C 0018                  		move.b	(a4)+,$18(a5)
00075EB2 1B5C 0019                  		move.b	(a4)+,$19(a5)
00075EB6 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00075EBA 101C                       		move.b	(a4)+,d0
00075EBC E208                       		lsr.b	#1,d0
00075EBE 1B40 001B                  		move.b	d0,$1B(a5)
00075EC2 426D 001C                  		clr.w	$1C(a5)
00075EC6 4E75                       		rts	
00075EC8                            ; ===========================================================================
00075EC8                            
00075EC8                            loc_72D52:				; XREF: loc_72A64
00075EC8 08D5 0003                  		bset	#3,(a5)
00075ECC 4E75                       		rts	
00075ECE                            ; ===========================================================================
00075ECE                            
00075ECE                            loc_72D58:				; XREF: loc_72A64
00075ECE 0895 0007                  		bclr	#7,(a5)
00075ED2 0895 0004                  		bclr	#4,(a5)
00075ED6 4A2D 0001                  		tst.b	1(a5)
00075EDA 6B00                       		bmi.s	loc_72D74
00075EDC 4A2E 0008                  		tst.b	8(a6)
00075EE0 6B00 0000                  		bmi.w	loc_72E02
00075EE4 4EBA F98E                  		jsr	sub_726FE(pc)
00075EE8 6000                       		bra.s	loc_72D78
00075EEA                            ; ===========================================================================
00075EEA                            
00075EEA                            loc_72D74:
00075EEA 4EBA FC2A                  		jsr	sub_729A0(pc)
00075EEE                            
00075EEE                            loc_72D78:
00075EEE 4A2E 000E                  		tst.b	$E(a6)
00075EF2 6A00 0000                  		bpl.w	loc_72E02
00075EF6 4216                       		clr.b	0(a6)
00075EF8 7000                       		moveq	#0,d0
00075EFA 102D 0001                  		move.b	1(a5),d0
00075EFE 6B00                       		bmi.s	loc_72DCC
00075F00 41FA F546                  		lea	dword_722CC(pc),a0
00075F04 264D                       		movea.l	a5,a3
00075F06 0C00 0004                  		cmpi.b	#4,d0
00075F0A 6600                       		bne.s	loc_72DA8
00075F0C 4A2E 0340                  		tst.b	$340(a6)
00075F10 6A00                       		bpl.s	loc_72DA8
00075F12 4BEE 0340                  		lea	$340(a6),a5
00075F16 226E 0020                  		movea.l	$20(a6),a1
00075F1A 6000                       		bra.s	loc_72DB8
00075F1C                            ; ===========================================================================
00075F1C                            
00075F1C                            loc_72DA8:
00075F1C 5500                       		subq.b	#2,d0
00075F1E E508                       		lsl.b	#2,d0
00075F20 2A70 0000                  		movea.l	(a0,d0.w),a5
00075F24 4A15                       		tst.b	(a5)
00075F26 6A00                       		bpl.s	loc_72DC8
00075F28 226E 0018                  		movea.l	$18(a6),a1
00075F2C                            
00075F2C                            loc_72DB8:
00075F2C 0895 0002                  		bclr	#2,(a5)
00075F30 08D5 0001                  		bset	#1,(a5)
00075F34 102D 000B                  		move.b	$B(a5),d0
00075F38 4EBA FE8A                  		jsr	sub_72C4E(pc)
00075F3C                            
00075F3C                            loc_72DC8:
00075F3C 2A4B                       		movea.l	a3,a5
00075F3E 6000                       		bra.s	loc_72E02
00075F40                            ; ===========================================================================
00075F40                            
00075F40                            loc_72DCC:
00075F40 41EE 0370                  		lea	$370(a6),a0
00075F44 4A10                       		tst.b	(a0)
00075F46 6A00                       		bpl.s	loc_72DE0
00075F48 0C00 00E0                  		cmpi.b	#$E0,d0
00075F4C 6700                       		beq.s	loc_72DEA
00075F4E 0C00 00C0                  		cmpi.b	#$C0,d0
00075F52 6700                       		beq.s	loc_72DEA
00075F54                            
00075F54                            loc_72DE0:
00075F54 41FA F4F2                  		lea	dword_722CC(pc),a0
00075F58 E608                       		lsr.b	#3,d0
00075F5A 2070 0000                  		movea.l	(a0,d0.w),a0
00075F5E                            
00075F5E                            loc_72DEA:
00075F5E 0890 0002                  		bclr	#2,(a0)
00075F62 08D0 0001                  		bset	#1,(a0)
00075F66 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075F6C 6600                       		bne.s	loc_72E02
00075F6E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075F76                            
00075F76                            loc_72E02:
00075F76 504F                       		addq.w	#8,sp
00075F78 4E75                       		rts	
00075F7A                            ; ===========================================================================
00075F7A                            
00075F7A                            loc_72E06:				; XREF: loc_72A64
00075F7A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00075F80 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00075F84 0815 0002                  		btst	#2,(a5)
00075F88 6600                       		bne.s	locret_72E1E
00075F8A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00075F92                            
00075F92                            locret_72E1E:
00075F92 4E75                       		rts	
00075F94                            ; ===========================================================================
00075F94                            
00075F94                            loc_72E20:				; XREF: loc_72A64
00075F94 0895 0003                  		bclr	#3,(a5)
00075F98 4E75                       		rts	
00075F9A                            ; ===========================================================================
00075F9A                            
00075F9A                            loc_72E26:				; XREF: loc_72A64
00075F9A 1B5C 000B                  		move.b	(a4)+,$B(a5)
00075F9E 4E75                       		rts	
00075FA0                            ; ===========================================================================
00075FA0                            
00075FA0                            loc_72E2C:				; XREF: loc_72A64
00075FA0 101C                       		move.b	(a4)+,d0
00075FA2 E148                       		lsl.w	#8,d0
00075FA4 101C                       		move.b	(a4)+,d0
00075FA6 D8C0                       		adda.w	d0,a4
00075FA8 534C                       		subq.w	#1,a4
00075FAA 4E75                       		rts	
00075FAC                            ; ===========================================================================
00075FAC                            
00075FAC                            loc_72E38:				; XREF: loc_72A64
00075FAC 7000                       		moveq	#0,d0
00075FAE 101C                       		move.b	(a4)+,d0
00075FB0 121C                       		move.b	(a4)+,d1
00075FB2 4A35 0024                  		tst.b	$24(a5,d0.w)
00075FB6 6600                       		bne.s	loc_72E48
00075FB8 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00075FBC                            
00075FBC                            loc_72E48:
00075FBC 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00075FC0 66DE                       		bne.s	loc_72E2C
00075FC2 544C                       		addq.w	#2,a4
00075FC4 4E75                       		rts	
00075FC6                            ; ===========================================================================
00075FC6                            
00075FC6                            loc_72E52:				; XREF: loc_72A64
00075FC6 7000                       		moveq	#0,d0
00075FC8 102D 000D                  		move.b	$D(a5),d0
00075FCC 5900                       		subq.b	#4,d0
00075FCE 2B8C 0000                  		move.l	a4,(a5,d0.w)
00075FD2 1B40 000D                  		move.b	d0,$D(a5)
00075FD6 60C8                       		bra.s	loc_72E2C
00075FD8                            ; ===========================================================================
00075FD8                            
00075FD8                            loc_72E64:				; XREF: loc_72A64
00075FD8 103C 0088                  		move.b	#$88,d0
00075FDC 123C 000F                  		move.b	#$F,d1
00075FE0 4EBA F8C2                  		jsr	sub_7272E(pc)
00075FE4 103C 008C                  		move.b	#$8C,d0
00075FE8 123C 000F                  		move.b	#$F,d1
00075FEC 6000 F8B6                  		bra.w	sub_7272E
00075FF0                            ; ===========================================================================
00075FF0                            Kos_Z80:	incbin	sound\z80_1.bin
000760A0 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000760A2 21                         		dc.b $21
000760A3 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000760A5                            		incbin	sound\z80_2.bin
00077750                            		even
00077750                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007DF50                            		even
0007DF50                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000877EE                            		even
000877EE                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00087D7C                            		even
00087D7C                            Music84:	include	sound\music84.asm ; Star Light Act 1
00087D7C                            music84_Header:
00087D7C =00000001                  smpsHeaderStartSong = 1
00087D7C 0000                       	smpsHeaderVoice     music84_Voices
00087D7E 0603                       	smpsHeaderChan      $06, $03
00087D80 0205                       	smpsHeaderTempo     $02, $05
00087D82                            
00087D86 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00087D8A 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00087D8E 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00087D92 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00087D96 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00087D9A 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00087DA0 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00087DA6 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00087DAC                            
00087DAC                            ; FM1 Data
00087DAC                            music84_FM1:
00087DAC E0C0                       	smpsPan             panCenter, $00
00087DB0 E107                       	smpsAlterNote       $07
00087DB2 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00087DB6 E106                       	smpsAlterNote       $06
00087DB8 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00087DBC E10B                       	smpsAlterNote       $0B
00087DBE 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00087DC4 E10C                       	smpsAlterNote       $0C
00087DC6 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087DC9 E10B                       	smpsAlterNote       $0B
00087DCB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087DCE E109                       	smpsAlterNote       $09
00087DD0 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00087DD5 E108                       	smpsAlterNote       $08
00087DD7 8001                       	dc.b	nRst, $01
00087DD9 E10B                       	smpsAlterNote       $0B
00087DDB 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00087DE1 E107                       	smpsAlterNote       $07
00087DE3 9B03                       	dc.b	nD2, $03
00087DE5                            
00087DE5                            music84_Jump04:
00087DE5 E107                       	smpsAlterNote       $07
00087DE7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087DEB E10B                       	smpsAlterNote       $0B
00087DED A202 8001                  	dc.b	nA2, $02, nRst, $01
00087DF1 E107                       	smpsAlterNote       $07
00087DF3 9B03                       	dc.b	nD2, $03
00087DF5 E11A                       	smpsAlterNote       $1A
00087DF7 A301                       	dc.b	nBb2, $01
00087DF9 E1F2                       	smpsAlterNote       $F2
00087DFB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087DFE E1FF                       	smpsAlterNote       $FF
00087E00 E701                       	dc.b	smpsNoAttack, $01
00087E02 E111                       	smpsAlterNote       $11
00087E04 E701                       	dc.b	smpsNoAttack, $01
00087E06 E106                       	smpsAlterNote       $06
00087E08 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087E0B E107                       	smpsAlterNote       $07
00087E0D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087E11 E108                       	smpsAlterNote       $08
00087E13 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087E1B E109                       	smpsAlterNote       $09
00087E1D A003                       	dc.b	nG2, $03
00087E1F E10C                       	smpsAlterNote       $0C
00087E21 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087E25 E1FD                       	smpsAlterNote       $FD
00087E27 A401                       	dc.b	nB2, $01
00087E29 E109                       	smpsAlterNote       $09
00087E2B E701                       	dc.b	smpsNoAttack, $01
00087E2D E106                       	smpsAlterNote       $06
00087E2F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087E32 E109                       	smpsAlterNote       $09
00087E34 A007                       	dc.b	nG2, $07
00087E36 E108                       	smpsAlterNote       $08
00087E38 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087E3C E107                       	smpsAlterNote       $07
00087E3E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087E44 E10B                       	smpsAlterNote       $0B
00087E46 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E4A E107                       	smpsAlterNote       $07
00087E4C 9B03                       	dc.b	nD2, $03
00087E4E E11A                       	smpsAlterNote       $1A
00087E50 A301                       	dc.b	nBb2, $01
00087E52 E1F9                       	smpsAlterNote       $F9
00087E54 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087E57 E107                       	smpsAlterNote       $07
00087E59 E701                       	dc.b	smpsNoAttack, $01
00087E5B E111                       	smpsAlterNote       $11
00087E5D E701                       	dc.b	smpsNoAttack, $01
00087E5F E106                       	smpsAlterNote       $06
00087E61 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00087E66 E107                       	smpsAlterNote       $07
00087E68 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087E70 E1EC                       	smpsAlterNote       $EC
00087E72 A101                       	dc.b	nAb2, $01
00087E74 E108                       	smpsAlterNote       $08
00087E76 E701                       	dc.b	smpsNoAttack, $01
00087E78 E116                       	smpsAlterNote       $16
00087E7A E701                       	dc.b	smpsNoAttack, $01
00087E7C E1F5                       	smpsAlterNote       $F5
00087E7E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087E81 E10B                       	smpsAlterNote       $0B
00087E83 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087E87 E107                       	smpsAlterNote       $07
00087E89 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087E8F E109                       	smpsAlterNote       $09
00087E91 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087E95 E10B                       	smpsAlterNote       $0B
00087E97 9603                       	dc.b	nA1, $03
00087E99 E107                       	smpsAlterNote       $07
00087E9B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00087EA1 E10B                       	smpsAlterNote       $0B
00087EA3 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087EA7 E107                       	smpsAlterNote       $07
00087EA9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087EAD E11A                       	smpsAlterNote       $1A
00087EAF A301                       	dc.b	nBb2, $01
00087EB1 E1F9                       	smpsAlterNote       $F9
00087EB3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087EB6 E107                       	smpsAlterNote       $07
00087EB8 E701                       	dc.b	smpsNoAttack, $01
00087EBA E1FB                       	smpsAlterNote       $FB
00087EBC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087EBF E106                       	smpsAlterNote       $06
00087EC1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087EC5 E107                       	smpsAlterNote       $07
00087EC7 9B03                       	dc.b	nD2, $03
00087EC9 E108                       	smpsAlterNote       $08
00087ECB 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00087ED1 E109                       	smpsAlterNote       $09
00087ED3 A002 8001                  	dc.b	nG2, $02, nRst, $01
00087ED7 E10C                       	smpsAlterNote       $0C
00087ED9 A303                       	dc.b	nBb2, $03
00087EDB E1F0                       	smpsAlterNote       $F0
00087EDD A401                       	dc.b	nB2, $01
00087EDF E1FD                       	smpsAlterNote       $FD
00087EE1 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00087EE6 E106                       	smpsAlterNote       $06
00087EE8 8001                       	dc.b	nRst, $01
00087EEA E109                       	smpsAlterNote       $09
00087EEC A006 8001                  	dc.b	nG2, $06, nRst, $01
00087EF0 E108                       	smpsAlterNote       $08
00087EF2 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00087EF6 E107                       	smpsAlterNote       $07
00087EF8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087EFE E10B                       	smpsAlterNote       $0B
00087F00 A203                       	dc.b	nA2, $03
00087F02 E107                       	smpsAlterNote       $07
00087F04 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F08 E1F2                       	smpsAlterNote       $F2
00087F0A A401                       	dc.b	nB2, $01
00087F0C E1FF                       	smpsAlterNote       $FF
00087F0E E701                       	dc.b	smpsNoAttack, $01
00087F10 E107                       	smpsAlterNote       $07
00087F12 E701                       	dc.b	smpsNoAttack, $01
00087F14 E1FB                       	smpsAlterNote       $FB
00087F16 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087F19 E106                       	smpsAlterNote       $06
00087F1B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087F1F E107                       	smpsAlterNote       $07
00087F21 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00087F2B E117                       	smpsAlterNote       $17
00087F2D A001                       	dc.b	nG2, $01
00087F2F E1FA                       	smpsAlterNote       $FA
00087F31 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087F34 E108                       	smpsAlterNote       $08
00087F36 E701                       	dc.b	smpsNoAttack, $01
00087F38 E1E7                       	smpsAlterNote       $E7
00087F3A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087F3D E103                       	smpsAlterNote       $03
00087F3F E701                       	dc.b	smpsNoAttack, $01
00087F41 E10B                       	smpsAlterNote       $0B
00087F43 E702                       	dc.b	smpsNoAttack, $02
00087F45 E107                       	smpsAlterNote       $07
00087F47 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00087F4F E106                       	smpsAlterNote       $06
00087F51 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00087F57 E10C                       	smpsAlterNote       $0C
00087F59 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00087F5F E109                       	smpsAlterNote       $09
00087F61 9E03                       	dc.b	nF2, $03
00087F63 E10C                       	smpsAlterNote       $0C
00087F65 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087F69 E1EA                       	smpsAlterNote       $EA
00087F6B A201                       	dc.b	nA2, $01
00087F6D E106                       	smpsAlterNote       $06
00087F6F E701                       	dc.b	smpsNoAttack, $01
00087F71 E1E2                       	smpsAlterNote       $E2
00087F73 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F76 E1F0                       	smpsAlterNote       $F0
00087F78 E701                       	dc.b	smpsNoAttack, $01
00087F7A E10C                       	smpsAlterNote       $0C
00087F7C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00087F88 E116                       	smpsAlterNote       $16
00087F8A 9C01                       	dc.b	nEb2, $01
00087F8C E105                       	smpsAlterNote       $05
00087F8E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087F91 E1F1                       	smpsAlterNote       $F1
00087F93 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087F96 E1FF                       	smpsAlterNote       $FF
00087F98 E701                       	dc.b	smpsNoAttack, $01
00087F9A E109                       	smpsAlterNote       $09
00087F9C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087FA0 E10C                       	smpsAlterNote       $0C
00087FA2 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00087FAE 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00087FB4 E109                       	smpsAlterNote       $09
00087FB6 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087FBA E10C                       	smpsAlterNote       $0C
00087FBC 9703                       	dc.b	nBb1, $03
00087FBE E11A                       	smpsAlterNote       $1A
00087FC0 A101                       	dc.b	nAb2, $01
00087FC2 E1FB                       	smpsAlterNote       $FB
00087FC4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087FC7 E10A                       	smpsAlterNote       $0A
00087FC9 E701                       	dc.b	smpsNoAttack, $01
00087FCB E1E8                       	smpsAlterNote       $E8
00087FCD E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087FD0 E106                       	smpsAlterNote       $06
00087FD2 E701                       	dc.b	smpsNoAttack, $01
00087FD4 E10C                       	smpsAlterNote       $0C
00087FD6 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00087FE2 E1F9                       	smpsAlterNote       $F9
00087FE4 9D01                       	dc.b	nE2, $01
00087FE6 E108                       	smpsAlterNote       $08
00087FE8 E701                       	dc.b	smpsNoAttack, $01
00087FEA E1F6                       	smpsAlterNote       $F6
00087FEC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087FEF E109                       	smpsAlterNote       $09
00087FF1 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00087FF5 E10C                       	smpsAlterNote       $0C
00087FF7 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00088003 E108                       	smpsAlterNote       $08
00088005 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008800B E106                       	smpsAlterNote       $06
0008800D A403 8001                  	dc.b	nB2, $03, nRst, $01
00088011 E108                       	smpsAlterNote       $08
00088013 9D03                       	dc.b	nE2, $03
00088015 E1EB                       	smpsAlterNote       $EB
00088017 A801                       	dc.b	nEb3, $01
00088019 E109                       	smpsAlterNote       $09
0008801B E701                       	dc.b	smpsNoAttack, $01
0008801D E1FA                       	smpsAlterNote       $FA
0008801F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088022 E108                       	smpsAlterNote       $08
00088024 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00088030 E1E9                       	smpsAlterNote       $E9
00088032 A301                       	dc.b	nBb2, $01
00088034 E107                       	smpsAlterNote       $07
00088036 E701                       	dc.b	smpsNoAttack, $01
00088038 E1F0                       	smpsAlterNote       $F0
0008803A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008803D E1F7                       	smpsAlterNote       $F7
0008803F E701                       	dc.b	smpsNoAttack, $01
00088041 E107                       	smpsAlterNote       $07
00088043 E701                       	dc.b	smpsNoAttack, $01
00088045 E106                       	smpsAlterNote       $06
00088047 E701                       	dc.b	smpsNoAttack, $01
00088049 E108                       	smpsAlterNote       $08
0008804B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00088051 E106                       	smpsAlterNote       $06
00088053 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088057 E108                       	smpsAlterNote       $08
00088059 9D03                       	dc.b	nE2, $03
0008805B E10B                       	smpsAlterNote       $0B
0008805D 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00088065 E108                       	smpsAlterNote       $08
00088067 9D03                       	dc.b	nE2, $03
00088069 E10B                       	smpsAlterNote       $0B
0008806B 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008806F E113                       	smpsAlterNote       $13
00088071 A001                       	dc.b	nG2, $01
00088073 E118                       	smpsAlterNote       $18
00088075 E701                       	dc.b	smpsNoAttack, $01
00088077 E1E9                       	smpsAlterNote       $E9
00088079 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008807C E1F3                       	smpsAlterNote       $F3
0008807E E701                       	dc.b	smpsNoAttack, $01
00088080 E1FD                       	smpsAlterNote       $FD
00088082 E701                       	dc.b	smpsNoAttack, $01
00088084 E102                       	smpsAlterNote       $02
00088086 E701                       	dc.b	smpsNoAttack, $01
00088088 E107                       	smpsAlterNote       $07
0008808A 8001                       	dc.b	nRst, $01
0008808C E10B                       	smpsAlterNote       $0B
0008808E 9603                       	dc.b	nA1, $03
00088090 E10C                       	smpsAlterNote       $0C
00088092 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00088098 E10B                       	smpsAlterNote       $0B
0008809A 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000880A6 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000880AC E107                       	smpsAlterNote       $07
000880AE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000880B4 E10B                       	smpsAlterNote       $0B
000880B6 A203                       	dc.b	nA2, $03
000880B8 E107                       	smpsAlterNote       $07
000880BA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000880BE E1F2                       	smpsAlterNote       $F2
000880C0 A401                       	dc.b	nB2, $01
000880C2 E1FF                       	smpsAlterNote       $FF
000880C4 E701                       	dc.b	smpsNoAttack, $01
000880C6 E107                       	smpsAlterNote       $07
000880C8 E701                       	dc.b	smpsNoAttack, $01
000880CA E1FB                       	smpsAlterNote       $FB
000880CC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000880CF E106                       	smpsAlterNote       $06
000880D1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000880D5 E107                       	smpsAlterNote       $07
000880D7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000880DB E108                       	smpsAlterNote       $08
000880DD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000880E3 E109                       	smpsAlterNote       $09
000880E5 A003 8001                  	dc.b	nG2, $03, nRst, $01
000880E9 E10C                       	smpsAlterNote       $0C
000880EB A302 8001                  	dc.b	nBb2, $02, nRst, $01
000880EF E1F0                       	smpsAlterNote       $F0
000880F1 A401                       	dc.b	nB2, $01
000880F3 E109                       	smpsAlterNote       $09
000880F5 E701                       	dc.b	smpsNoAttack, $01
000880F7 E106                       	smpsAlterNote       $06
000880F9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000880FC E109                       	smpsAlterNote       $09
000880FE A007                       	dc.b	nG2, $07
00088100 E108                       	smpsAlterNote       $08
00088102 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088106 E107                       	smpsAlterNote       $07
00088108 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008810E E10B                       	smpsAlterNote       $0B
00088110 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088114 E107                       	smpsAlterNote       $07
00088116 9B03                       	dc.b	nD2, $03
00088118 E11A                       	smpsAlterNote       $1A
0008811A A301                       	dc.b	nBb2, $01
0008811C E1F2                       	smpsAlterNote       $F2
0008811E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088121 E1FF                       	smpsAlterNote       $FF
00088123 E701                       	dc.b	smpsNoAttack, $01
00088125 E111                       	smpsAlterNote       $11
00088127 E701                       	dc.b	smpsNoAttack, $01
00088129 E106                       	smpsAlterNote       $06
0008812B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008812E E107                       	smpsAlterNote       $07
00088130 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008813C E117                       	smpsAlterNote       $17
0008813E A001                       	dc.b	nG2, $01
00088140 E1FA                       	smpsAlterNote       $FA
00088142 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088145 E116                       	smpsAlterNote       $16
00088147 E701                       	dc.b	smpsNoAttack, $01
00088149 E1F5                       	smpsAlterNote       $F5
0008814B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008814E E103                       	smpsAlterNote       $03
00088150 E701                       	dc.b	smpsNoAttack, $01
00088152 E10B                       	smpsAlterNote       $0B
00088154 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088158 E107                       	smpsAlterNote       $07
0008815A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088160 E109                       	smpsAlterNote       $09
00088162 9E03                       	dc.b	nF2, $03
00088164 E10B                       	smpsAlterNote       $0B
00088166 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008816A E107                       	smpsAlterNote       $07
0008816C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088172 E10B                       	smpsAlterNote       $0B
00088174 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088178 E107                       	smpsAlterNote       $07
0008817A 9B03                       	dc.b	nD2, $03
0008817C E11A                       	smpsAlterNote       $1A
0008817E A301                       	dc.b	nBb2, $01
00088180 E1F9                       	smpsAlterNote       $F9
00088182 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088185 E107                       	smpsAlterNote       $07
00088187 E701                       	dc.b	smpsNoAttack, $01
00088189 E111                       	smpsAlterNote       $11
0008818B E701                       	dc.b	smpsNoAttack, $01
0008818D E106                       	smpsAlterNote       $06
0008818F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088194 E107                       	smpsAlterNote       $07
00088196 9B03                       	dc.b	nD2, $03
00088198 E108                       	smpsAlterNote       $08
0008819A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000881A0 E109                       	smpsAlterNote       $09
000881A2 A003                       	dc.b	nG2, $03
000881A4 E10C                       	smpsAlterNote       $0C
000881A6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000881AA E1FD                       	smpsAlterNote       $FD
000881AC A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000881B1 E106                       	smpsAlterNote       $06
000881B3 8001                       	dc.b	nRst, $01
000881B5 E109                       	smpsAlterNote       $09
000881B7 A006 8001                  	dc.b	nG2, $06, nRst, $01
000881BB E108                       	smpsAlterNote       $08
000881BD 9C03                       	dc.b	nEb2, $03
000881BF E107                       	smpsAlterNote       $07
000881C1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000881C7 E10B                       	smpsAlterNote       $0B
000881C9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000881CD E107                       	smpsAlterNote       $07
000881CF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000881D3 E11A                       	smpsAlterNote       $1A
000881D5 A301                       	dc.b	nBb2, $01
000881D7 E1F9                       	smpsAlterNote       $F9
000881D9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000881DC E107                       	smpsAlterNote       $07
000881DE E701                       	dc.b	smpsNoAttack, $01
000881E0 E1FB                       	smpsAlterNote       $FB
000881E2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000881E5 E106                       	smpsAlterNote       $06
000881E7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000881EB E107                       	smpsAlterNote       $07
000881ED 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000881F5 E1EC                       	smpsAlterNote       $EC
000881F7 A101                       	dc.b	nAb2, $01
000881F9 E108                       	smpsAlterNote       $08
000881FB E701                       	dc.b	smpsNoAttack, $01
000881FD E1E7                       	smpsAlterNote       $E7
000881FF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088202 E1F5                       	smpsAlterNote       $F5
00088204 E701                       	dc.b	smpsNoAttack, $01
00088206 E10B                       	smpsAlterNote       $0B
00088208 E702                       	dc.b	smpsNoAttack, $02
0008820A E107                       	smpsAlterNote       $07
0008820C 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088212 E106                       	smpsAlterNote       $06
00088214 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008821A E10C                       	smpsAlterNote       $0C
0008821C 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088224 E109                       	smpsAlterNote       $09
00088226 9E03                       	dc.b	nF2, $03
00088228 E10C                       	smpsAlterNote       $0C
0008822A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008822E E1EA                       	smpsAlterNote       $EA
00088230 A201                       	dc.b	nA2, $01
00088232 E106                       	smpsAlterNote       $06
00088234 E701                       	dc.b	smpsNoAttack, $01
00088236 E114                       	smpsAlterNote       $14
00088238 E701                       	dc.b	smpsNoAttack, $01
0008823A E1F0                       	smpsAlterNote       $F0
0008823C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008823F E10C                       	smpsAlterNote       $0C
00088241 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008824D 9703                       	dc.b	nBb1, $03
0008824F E116                       	smpsAlterNote       $16
00088251 9C01                       	dc.b	nEb2, $01
00088253 E105                       	smpsAlterNote       $05
00088255 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088258 E113                       	smpsAlterNote       $13
0008825A E701                       	dc.b	smpsNoAttack, $01
0008825C E1FF                       	smpsAlterNote       $FF
0008825E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088261 E109                       	smpsAlterNote       $09
00088263 E703                       	dc.b	smpsNoAttack, $03
00088265 E10C                       	smpsAlterNote       $0C
00088267 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088273 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008827B E109                       	smpsAlterNote       $09
0008827D 9E03                       	dc.b	nF2, $03
0008827F E10C                       	smpsAlterNote       $0C
00088281 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088285 E1EC                       	smpsAlterNote       $EC
00088287 A201                       	dc.b	nA2, $01
00088289 E10A                       	smpsAlterNote       $0A
0008828B E701                       	dc.b	smpsNoAttack, $01
0008828D E1E8                       	smpsAlterNote       $E8
0008828F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088292 E1F7                       	smpsAlterNote       $F7
00088294 E701                       	dc.b	smpsNoAttack, $01
00088296 E10C                       	smpsAlterNote       $0C
00088298 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000882A4 E1EA                       	smpsAlterNote       $EA
000882A6 9D01                       	dc.b	nE2, $01
000882A8 E108                       	smpsAlterNote       $08
000882AA E701                       	dc.b	smpsNoAttack, $01
000882AC E1F6                       	smpsAlterNote       $F6
000882AE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000882B1 E105                       	smpsAlterNote       $05
000882B3 E701                       	dc.b	smpsNoAttack, $01
000882B5 E109                       	smpsAlterNote       $09
000882B7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000882BB E10C                       	smpsAlterNote       $0C
000882BD 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000882C9 E108                       	smpsAlterNote       $08
000882CB 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000882D1 E106                       	smpsAlterNote       $06
000882D3 A403 8001                  	dc.b	nB2, $03, nRst, $01
000882D7 E108                       	smpsAlterNote       $08
000882D9 9D03                       	dc.b	nE2, $03
000882DB E1EB                       	smpsAlterNote       $EB
000882DD A801                       	dc.b	nEb3, $01
000882DF E109                       	smpsAlterNote       $09
000882E1 E701                       	dc.b	smpsNoAttack, $01
000882E3 E1EB                       	smpsAlterNote       $EB
000882E5 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000882E8 E108                       	smpsAlterNote       $08
000882EA E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000882F6 E1E9                       	smpsAlterNote       $E9
000882F8 A301                       	dc.b	nBb2, $01
000882FA E1F8                       	smpsAlterNote       $F8
000882FC E701                       	dc.b	smpsNoAttack, $01
000882FE E116                       	smpsAlterNote       $16
00088300 E701                       	dc.b	smpsNoAttack, $01
00088302 E1F7                       	smpsAlterNote       $F7
00088304 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088307 E107                       	smpsAlterNote       $07
00088309 E701                       	dc.b	smpsNoAttack, $01
0008830B E1EE                       	smpsAlterNote       $EE
0008830D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088310 E106                       	smpsAlterNote       $06
00088312 8001                       	dc.b	nRst, $01
00088314 E108                       	smpsAlterNote       $08
00088316 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008831C E106                       	smpsAlterNote       $06
0008831E A402 8001                  	dc.b	nB2, $02, nRst, $01
00088322 E108                       	smpsAlterNote       $08
00088324 9D03                       	dc.b	nE2, $03
00088326 E10B                       	smpsAlterNote       $0B
00088328 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008832E E108                       	smpsAlterNote       $08
00088330 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00088334 E10B                       	smpsAlterNote       $0B
00088336 9603                       	dc.b	nA1, $03
00088338 E10E                       	smpsAlterNote       $0E
0008833A A001                       	dc.b	nG2, $01
0008833C E118                       	smpsAlterNote       $18
0008833E E701                       	dc.b	smpsNoAttack, $01
00088340 E1E9                       	smpsAlterNote       $E9
00088342 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088345 E1EE                       	smpsAlterNote       $EE
00088347 E701                       	dc.b	smpsNoAttack, $01
00088349 E1F8                       	smpsAlterNote       $F8
0008834B E701                       	dc.b	smpsNoAttack, $01
0008834D E102                       	smpsAlterNote       $02
0008834F E701                       	dc.b	smpsNoAttack, $01
00088351 E107                       	smpsAlterNote       $07
00088353 8001                       	dc.b	nRst, $01
00088355 E10B                       	smpsAlterNote       $0B
00088357 9603                       	dc.b	nA1, $03
00088359 E10C                       	smpsAlterNote       $0C
0008835B 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00088361 E10B                       	smpsAlterNote       $0B
00088363 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008836F 8001 9603                  	dc.b	nRst, $01, nA1, $03
00088373 E10C                       	smpsAlterNote       $0C
00088375 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00088381 8001                       	dc.b	nRst, $01
00088383 E10B                       	smpsAlterNote       $0B
00088385 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008838D E107                       	smpsAlterNote       $07
0008838F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088393 E10B                       	smpsAlterNote       $0B
00088395 9603                       	dc.b	nA1, $03
00088397 E109                       	smpsAlterNote       $09
00088399 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008839D E108                       	smpsAlterNote       $08
0008839F 9D06                       	dc.b	nE2, $06
000883A1 E107                       	smpsAlterNote       $07
000883A3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000883A7 E106                       	smpsAlterNote       $06
000883A9 9903                       	dc.b	nC2, $03
000883AB E10C                       	smpsAlterNote       $0C
000883AD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000883B1 E10B                       	smpsAlterNote       $0B
000883B3 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000883BF 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000883C9 E10C                       	smpsAlterNote       $0C
000883CB 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000883D7 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000883E3 8001                       	dc.b	nRst, $01
000883E5 E10B                       	smpsAlterNote       $0B
000883E7 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000883F3 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000883FF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008840B 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088415 E10C                       	smpsAlterNote       $0C
00088417 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00088423 E10B                       	smpsAlterNote       $0B
00088425 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008842D E107                       	smpsAlterNote       $07
0008842F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088433 E10B                       	smpsAlterNote       $0B
00088435 9603                       	dc.b	nA1, $03
00088437 E109                       	smpsAlterNote       $09
00088439 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008843D E108                       	smpsAlterNote       $08
0008843F 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00088443 E107                       	smpsAlterNote       $07
00088445 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088449 E106                       	smpsAlterNote       $06
0008844B 9903                       	dc.b	nC2, $03
0008844D E10C                       	smpsAlterNote       $0C
0008844F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088453 E10B                       	smpsAlterNote       $0B
00088455 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088461 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008846B E10C                       	smpsAlterNote       $0C
0008846D 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00088479 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088485 8001                       	dc.b	nRst, $01
00088487 E10B                       	smpsAlterNote       $0B
00088489 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088495 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008849F E10C                       	smpsAlterNote       $0C
000884A1 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000884AD 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000884B9 E10B                       	smpsAlterNote       $0B
000884BB 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000884C7 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000884D1 E10C                       	smpsAlterNote       $0C
000884D3 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000884DF 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000884EB E10B                       	smpsAlterNote       $0B
000884ED 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000884F9 8001                       	dc.b	nRst, $01
000884FB E1EC                       	smpsAlterNote       $EC
000884FD A101                       	dc.b	nAb2, $01
000884FF E1FA                       	smpsAlterNote       $FA
00088501 E701                       	dc.b	smpsNoAttack, $01
00088503 E116                       	smpsAlterNote       $16
00088505 E701                       	dc.b	smpsNoAttack, $01
00088507 E1F5                       	smpsAlterNote       $F5
00088509 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008850C E10B                       	smpsAlterNote       $0B
0008850E E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008851A 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00088526 E107                       	smpsAlterNote       $07
00088528 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008852E E10B                       	smpsAlterNote       $0B
00088530 A203                       	dc.b	nA2, $03
00088532 E107                       	smpsAlterNote       $07
00088534 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088538 E1F3                       	smpsAlterNote       $F3
0008853A A401                       	dc.b	nB2, $01
0008853C E102                       	smpsAlterNote       $02
0008853E E701                       	dc.b	smpsNoAttack, $01
00088540 E109                       	smpsAlterNote       $09
00088542 E701                       	dc.b	smpsNoAttack, $01
00088544 E102                       	smpsAlterNote       $02
00088546 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088549 E106                       	smpsAlterNote       $06
0008854B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008854F E107                       	smpsAlterNote       $07
00088551 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088555 E108                       	smpsAlterNote       $08
00088557 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008855D E109                       	smpsAlterNote       $09
0008855F A003 8001                  	dc.b	nG2, $03, nRst, $01
00088563 E1F2                       	smpsAlterNote       $F2
00088565 A401                       	dc.b	nB2, $01
00088567 E1FF                       	smpsAlterNote       $FF
00088569 E701                       	dc.b	smpsNoAttack, $01
0008856B E111                       	smpsAlterNote       $11
0008856D E701                       	dc.b	smpsNoAttack, $01
0008856F E1FB                       	smpsAlterNote       $FB
00088571 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088574 E106                       	smpsAlterNote       $06
00088576 E702                       	dc.b	smpsNoAttack, $02
00088578 E109                       	smpsAlterNote       $09
0008857A A007                       	dc.b	nG2, $07
0008857C E108                       	smpsAlterNote       $08
0008857E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088582 E107                       	smpsAlterNote       $07
00088584 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008858A E10B                       	smpsAlterNote       $0B
0008858C A202 8001                  	dc.b	nA2, $02, nRst, $01
00088590 E107                       	smpsAlterNote       $07
00088592 9B03                       	dc.b	nD2, $03
00088594 E11A                       	smpsAlterNote       $1A
00088596 A301                       	dc.b	nBb2, $01
00088598 E1F2                       	smpsAlterNote       $F2
0008859A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008859D E1FF                       	smpsAlterNote       $FF
0008859F E701                       	dc.b	smpsNoAttack, $01
000885A1 E111                       	smpsAlterNote       $11
000885A3 E701                       	dc.b	smpsNoAttack, $01
000885A5 E106                       	smpsAlterNote       $06
000885A7 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000885AA E107                       	smpsAlterNote       $07
000885AC 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000885B8 E117                       	smpsAlterNote       $17
000885BA A001                       	dc.b	nG2, $01
000885BC E1FA                       	smpsAlterNote       $FA
000885BE E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000885C1 E116                       	smpsAlterNote       $16
000885C3 E701                       	dc.b	smpsNoAttack, $01
000885C5 E1F5                       	smpsAlterNote       $F5
000885C7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000885CA E103                       	smpsAlterNote       $03
000885CC E701                       	dc.b	smpsNoAttack, $01
000885CE E10B                       	smpsAlterNote       $0B
000885D0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000885D4 E107                       	smpsAlterNote       $07
000885D6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000885DC E109                       	smpsAlterNote       $09
000885DE 9E03                       	dc.b	nF2, $03
000885E0 E10B                       	smpsAlterNote       $0B
000885E2 9603 8001                  	dc.b	nA1, $03, nRst, $01
000885E6 E107                       	smpsAlterNote       $07
000885E8 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000885EE E10B                       	smpsAlterNote       $0B
000885F0 A203 8001                  	dc.b	nA2, $03, nRst, $01
000885F4 E107                       	smpsAlterNote       $07
000885F6 9B03                       	dc.b	nD2, $03
000885F8 E11A                       	smpsAlterNote       $1A
000885FA A301                       	dc.b	nBb2, $01
000885FC E1F9                       	smpsAlterNote       $F9
000885FE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088601 E1FF                       	smpsAlterNote       $FF
00088603 E701                       	dc.b	smpsNoAttack, $01
00088605 E111                       	smpsAlterNote       $11
00088607 E701                       	dc.b	smpsNoAttack, $01
00088609 E106                       	smpsAlterNote       $06
0008860B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008860E E107                       	smpsAlterNote       $07
00088610 9B03                       	dc.b	nD2, $03
00088612 E108                       	smpsAlterNote       $08
00088614 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008861A E109                       	smpsAlterNote       $09
0008861C A003                       	dc.b	nG2, $03
0008861E E1F0                       	smpsAlterNote       $F0
00088620 A501                       	dc.b	nC3, $01
00088622 E106                       	smpsAlterNote       $06
00088624 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00088628 E109                       	smpsAlterNote       $09
0008862A A006 8001                  	dc.b	nG2, $06, nRst, $01
0008862E E108                       	smpsAlterNote       $08
00088630 9C03                       	dc.b	nEb2, $03
00088632 E107                       	smpsAlterNote       $07
00088634 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008863A E10B                       	smpsAlterNote       $0B
0008863C A203 8001                  	dc.b	nA2, $03, nRst, $01
00088640 E107                       	smpsAlterNote       $07
00088642 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088646 E11A                       	smpsAlterNote       $1A
00088648 A301                       	dc.b	nBb2, $01
0008864A E1F9                       	smpsAlterNote       $F9
0008864C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008864F E107                       	smpsAlterNote       $07
00088651 E701                       	dc.b	smpsNoAttack, $01
00088653 E1FB                       	smpsAlterNote       $FB
00088655 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088658 E106                       	smpsAlterNote       $06
0008865A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008865E E107                       	smpsAlterNote       $07
00088660 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088668 E1EC                       	smpsAlterNote       $EC
0008866A A101                       	dc.b	nAb2, $01
0008866C E108                       	smpsAlterNote       $08
0008866E E701                       	dc.b	smpsNoAttack, $01
00088670 E1E7                       	smpsAlterNote       $E7
00088672 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088675 E1F5                       	smpsAlterNote       $F5
00088677 E701                       	dc.b	smpsNoAttack, $01
00088679 E10B                       	smpsAlterNote       $0B
0008867B E702                       	dc.b	smpsNoAttack, $02
0008867D E107                       	smpsAlterNote       $07
0008867F 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088685 E106                       	smpsAlterNote       $06
00088687 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008868D E10C                       	smpsAlterNote       $0C
0008868F 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088697 E109                       	smpsAlterNote       $09
00088699 9E03                       	dc.b	nF2, $03
0008869B E10C                       	smpsAlterNote       $0C
0008869D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000886A1 E1EA                       	smpsAlterNote       $EA
000886A3 A201                       	dc.b	nA2, $01
000886A5 E106                       	smpsAlterNote       $06
000886A7 E701                       	dc.b	smpsNoAttack, $01
000886A9 E114                       	smpsAlterNote       $14
000886AB E701                       	dc.b	smpsNoAttack, $01
000886AD E1F0                       	smpsAlterNote       $F0
000886AF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000886B2 E10C                       	smpsAlterNote       $0C
000886B4 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000886C0 9703                       	dc.b	nBb1, $03
000886C2 E116                       	smpsAlterNote       $16
000886C4 9C01                       	dc.b	nEb2, $01
000886C6 E105                       	smpsAlterNote       $05
000886C8 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000886CB E113                       	smpsAlterNote       $13
000886CD E701                       	dc.b	smpsNoAttack, $01
000886CF E1FF                       	smpsAlterNote       $FF
000886D1 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000886D4 E109                       	smpsAlterNote       $09
000886D6 E703                       	dc.b	smpsNoAttack, $03
000886D8 E10C                       	smpsAlterNote       $0C
000886DA 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000886E6 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000886EE E109                       	smpsAlterNote       $09
000886F0 9E03                       	dc.b	nF2, $03
000886F2 E10C                       	smpsAlterNote       $0C
000886F4 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000886F8 E1EA                       	smpsAlterNote       $EA
000886FA A201                       	dc.b	nA2, $01
000886FC E106                       	smpsAlterNote       $06
000886FE E701                       	dc.b	smpsNoAttack, $01
00088700 E1E2                       	smpsAlterNote       $E2
00088702 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088705 E1F0                       	smpsAlterNote       $F0
00088707 E701                       	dc.b	smpsNoAttack, $01
00088709 E10C                       	smpsAlterNote       $0C
0008870B E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088717 E116                       	smpsAlterNote       $16
00088719 9C01                       	dc.b	nEb2, $01
0008871B E105                       	smpsAlterNote       $05
0008871D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088720 E1F1                       	smpsAlterNote       $F1
00088722 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088725 E1FF                       	smpsAlterNote       $FF
00088727 E701                       	dc.b	smpsNoAttack, $01
00088729 E109                       	smpsAlterNote       $09
0008872B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008872F E10C                       	smpsAlterNote       $0C
00088731 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008873D E106                       	smpsAlterNote       $06
0008873F 9903                       	dc.b	nC2, $03
00088741 E107                       	smpsAlterNote       $07
00088743 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088747 E109                       	smpsAlterNote       $09
00088749 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008874F E107                       	smpsAlterNote       $07
00088751 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088755 E108                       	smpsAlterNote       $08
00088757 9D03                       	dc.b	nE2, $03
00088759 E10B                       	smpsAlterNote       $0B
0008875B 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00088761 E109                       	smpsAlterNote       $09
00088763 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00088769 E10C                       	smpsAlterNote       $0C
0008876B 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00088771 E106                       	smpsAlterNote       $06
00088773 9903                       	dc.b	nC2, $03
00088775 E11A                       	smpsAlterNote       $1A
00088777 A301                       	dc.b	nBb2, $01
00088779 E1F9                       	smpsAlterNote       $F9
0008877B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008877E E1FF                       	smpsAlterNote       $FF
00088780 E701                       	dc.b	smpsNoAttack, $01
00088782 E111                       	smpsAlterNote       $11
00088784 E701                       	dc.b	smpsNoAttack, $01
00088786 E106                       	smpsAlterNote       $06
00088788 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008878F E109                       	smpsAlterNote       $09
00088791 A003                       	dc.b	nG2, $03
00088793 E106                       	smpsAlterNote       $06
00088795 9907                       	dc.b	nC2, $07
00088797 E107                       	smpsAlterNote       $07
00088799 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000887A1 E10B                       	smpsAlterNote       $0B
000887A3 A203                       	dc.b	nA2, $03
000887A5 E107                       	smpsAlterNote       $07
000887A7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000887AB E1F2                       	smpsAlterNote       $F2
000887AD A401                       	dc.b	nB2, $01
000887AF E1F9                       	smpsAlterNote       $F9
000887B1 E701                       	dc.b	smpsNoAttack, $01
000887B3 E107                       	smpsAlterNote       $07
000887B5 E701                       	dc.b	smpsNoAttack, $01
000887B7 E1FB                       	smpsAlterNote       $FB
000887B9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887BC E106                       	smpsAlterNote       $06
000887BE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887C2 E107                       	smpsAlterNote       $07
000887C4 9B03                       	dc.b	nD2, $03
000887C6 E108                       	smpsAlterNote       $08
000887C8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000887CE E109                       	smpsAlterNote       $09
000887D0 A003 8001                  	dc.b	nG2, $03, nRst, $01
000887D4 E1F2                       	smpsAlterNote       $F2
000887D6 A401                       	dc.b	nB2, $01
000887D8 E1F9                       	smpsAlterNote       $F9
000887DA E701                       	dc.b	smpsNoAttack, $01
000887DC E107                       	smpsAlterNote       $07
000887DE E701                       	dc.b	smpsNoAttack, $01
000887E0 E1FB                       	smpsAlterNote       $FB
000887E2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887E5 E106                       	smpsAlterNote       $06
000887E7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887EB E108                       	smpsAlterNote       $08
000887ED 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000887F1 E10C                       	smpsAlterNote       $0C
000887F3 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000887F7 E107                       	smpsAlterNote       $07
000887F9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000887FF E10B                       	smpsAlterNote       $0B
00088801 A203                       	dc.b	nA2, $03
00088803 E107                       	smpsAlterNote       $07
00088805 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088809 E1F2                       	smpsAlterNote       $F2
0008880B A401                       	dc.b	nB2, $01
0008880D E1FF                       	smpsAlterNote       $FF
0008880F E701                       	dc.b	smpsNoAttack, $01
00088811 E107                       	smpsAlterNote       $07
00088813 E701                       	dc.b	smpsNoAttack, $01
00088815 E1FB                       	smpsAlterNote       $FB
00088817 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008881A E106                       	smpsAlterNote       $06
0008881C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088820 E107                       	smpsAlterNote       $07
00088822 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088826 E108                       	smpsAlterNote       $08
00088828 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008882E E109                       	smpsAlterNote       $09
00088830 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088834 E1F2                       	smpsAlterNote       $F2
00088836 A401                       	dc.b	nB2, $01
00088838 E1FF                       	smpsAlterNote       $FF
0008883A E701                       	dc.b	smpsNoAttack, $01
0008883C E111                       	smpsAlterNote       $11
0008883E E701                       	dc.b	smpsNoAttack, $01
00088840 E1FB                       	smpsAlterNote       $FB
00088842 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088845 E106                       	smpsAlterNote       $06
00088847 E702                       	dc.b	smpsNoAttack, $02
00088849 E108                       	smpsAlterNote       $08
0008884B 9C07                       	dc.b	nEb2, $07
0008884D E10C                       	smpsAlterNote       $0C
0008884F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088853 E107                       	smpsAlterNote       $07
00088855 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008885B E10B                       	smpsAlterNote       $0B
0008885D A202 8001                  	dc.b	nA2, $02, nRst, $01
00088861 E107                       	smpsAlterNote       $07
00088863 9B03                       	dc.b	nD2, $03
00088865 E11A                       	smpsAlterNote       $1A
00088867 A301                       	dc.b	nBb2, $01
00088869 E1F2                       	smpsAlterNote       $F2
0008886B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008886E E1FF                       	smpsAlterNote       $FF
00088870 E701                       	dc.b	smpsNoAttack, $01
00088872 E111                       	smpsAlterNote       $11
00088874 E701                       	dc.b	smpsNoAttack, $01
00088876 E106                       	smpsAlterNote       $06
00088878 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008887B E107                       	smpsAlterNote       $07
0008887D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088881 E108                       	smpsAlterNote       $08
00088883 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008888B E109                       	smpsAlterNote       $09
0008888D A003                       	dc.b	nG2, $03
0008888F E11A                       	smpsAlterNote       $1A
00088891 A301                       	dc.b	nBb2, $01
00088893 E1F2                       	smpsAlterNote       $F2
00088895 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088898 E1FF                       	smpsAlterNote       $FF
0008889A E701                       	dc.b	smpsNoAttack, $01
0008889C E111                       	smpsAlterNote       $11
0008889E E701                       	dc.b	smpsNoAttack, $01
000888A0 E106                       	smpsAlterNote       $06
000888A2 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000888A5 E108                       	smpsAlterNote       $08
000888A7 9C07                       	dc.b	nEb2, $07
000888A9 E10C                       	smpsAlterNote       $0C
000888AB A303 8001                  	dc.b	nBb2, $03, nRst, $01
000888AF E107                       	smpsAlterNote       $07
000888B1 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000888BD 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000888C7 E108                       	smpsAlterNote       $08
000888C9 9C06                       	dc.b	nEb2, $06
000888CB E10C                       	smpsAlterNote       $0C
000888CD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000888D1 E108                       	smpsAlterNote       $08
000888D3 9C03                       	dc.b	nEb2, $03
000888D5 E109                       	smpsAlterNote       $09
000888D7 A003 8001                  	dc.b	nG2, $03, nRst, $01
000888DB E10C                       	smpsAlterNote       $0C
000888DD A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000888E5 E107                       	smpsAlterNote       $07
000888E7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888EB F6F4 F8                    	smpsJump            music84_Jump04
000888EE                            
000888EE                            ; FM2 Data
000888EE                            music84_FM2:
000888EE E0C0                       	smpsPan             panCenter, $00
000888F2 E10B                       	smpsAlterNote       $0B
000888F4 C603 8007                  	dc.b	nA5, $03, nRst, $07
000888F8 E109                       	smpsAlterNote       $09
000888FA C403 800B                  	dc.b	nG5, $03, nRst, $0B
000888FE E108                       	smpsAlterNote       $08
00088900 C103 8004                  	dc.b	nE5, $03, nRst, $04
00088906 E080                       	smpsPan             panLeft, $00
00088908 E10C                       	smpsAlterNote       $0C
0008890A E6F9                       	smpsAlterVol        $F9
0008890C C703                       	dc.b	nBb5, $03
0008890E E10B                       	smpsAlterNote       $0B
00088910 C603 8001                  	dc.b	nA5, $03, nRst, $01
00088914 E109                       	smpsAlterNote       $09
00088916 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008891C E108                       	smpsAlterNote       $08
0008891E C103 8001                  	dc.b	nE5, $03, nRst, $01
00088922 E106                       	smpsAlterNote       $06
00088924 BD03                       	dc.b	nC5, $03
00088926 E10B                       	smpsAlterNote       $0B
00088928 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008892E E0C0                       	smpsPan             panCenter, $00
00088930 E107                       	smpsAlterNote       $07
00088932 E606                       	smpsAlterVol        $06
00088934 BF03                       	dc.b	nD5, $03
00088936                            
00088936                            music84_Jump03:
00088936 E108                       	smpsAlterNote       $08
00088938 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008893C E109                       	smpsAlterNote       $09
0008893E C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00088944 E10B                       	smpsAlterNote       $0B
00088946 C607                       	dc.b	nA5, $07
00088948 E107                       	smpsAlterNote       $07
0008894A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008894E E106                       	smpsAlterNote       $06
00088950 C90D                       	dc.b	nC6, $0D
00088952 E100                       	smpsAlterNote       $00
00088954 E701                       	dc.b	smpsNoAttack, $01
00088956 E1FF                       	smpsAlterNote       $FF
00088958 E701                       	dc.b	smpsNoAttack, $01
0008895A E103                       	smpsAlterNote       $03
0008895C E701                       	dc.b	smpsNoAttack, $01
0008895E E109                       	smpsAlterNote       $09
00088960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088964 E106                       	smpsAlterNote       $06
00088966 E701                       	dc.b	smpsNoAttack, $01
00088968 E100                       	smpsAlterNote       $00
0008896A E701                       	dc.b	smpsNoAttack, $01
0008896C E10C                       	smpsAlterNote       $0C
0008896E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088972 E10B                       	smpsAlterNote       $0B
00088974 C603                       	dc.b	nA5, $03
00088976 E109                       	smpsAlterNote       $09
00088978 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008897C E10B                       	smpsAlterNote       $0B
0008897E C60D                       	dc.b	nA5, $0D
00088980 E105                       	smpsAlterNote       $05
00088982 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088986 E10B                       	smpsAlterNote       $0B
00088988 E701                       	dc.b	smpsNoAttack, $01
0008898A E10E                       	smpsAlterNote       $0E
0008898C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088990 E108                       	smpsAlterNote       $08
00088992 E701                       	dc.b	smpsNoAttack, $01
00088994 E104                       	smpsAlterNote       $04
00088996 E701                       	dc.b	smpsNoAttack, $01
00088998 E105                       	smpsAlterNote       $05
0008899A E701                       	dc.b	smpsNoAttack, $01
0008899C E10B                       	smpsAlterNote       $0B
0008899E E701                       	dc.b	smpsNoAttack, $01
000889A0 E10F                       	smpsAlterNote       $0F
000889A2 E701                       	dc.b	smpsNoAttack, $01
000889A4 E10B                       	smpsAlterNote       $0B
000889A6 E701                       	dc.b	smpsNoAttack, $01
000889A8 E108                       	smpsAlterNote       $08
000889AA E701                       	dc.b	smpsNoAttack, $01
000889AC E104                       	smpsAlterNote       $04
000889AE E701                       	dc.b	smpsNoAttack, $01
000889B0 E108                       	smpsAlterNote       $08
000889B2 E701                       	dc.b	smpsNoAttack, $01
000889B4 E10E                       	smpsAlterNote       $0E
000889B6 E701                       	dc.b	smpsNoAttack, $01
000889B8 E10F                       	smpsAlterNote       $0F
000889BA E701                       	dc.b	smpsNoAttack, $01
000889BC E10B                       	smpsAlterNote       $0B
000889BE E701                       	dc.b	smpsNoAttack, $01
000889C0 E105                       	smpsAlterNote       $05
000889C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889C6 E108                       	smpsAlterNote       $08
000889C8 E701                       	dc.b	smpsNoAttack, $01
000889CA E10E                       	smpsAlterNote       $0E
000889CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889D0 E108                       	smpsAlterNote       $08
000889D2 E701                       	dc.b	smpsNoAttack, $01
000889D4 E105                       	smpsAlterNote       $05
000889D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889DA E10B                       	smpsAlterNote       $0B
000889DC E701                       	dc.b	smpsNoAttack, $01
000889DE E10F                       	smpsAlterNote       $0F
000889E0 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000889E4 E107                       	smpsAlterNote       $07
000889E6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000889EA E108                       	smpsAlterNote       $08
000889EC C103                       	dc.b	nE5, $03
000889EE E109                       	smpsAlterNote       $09
000889F0 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000889F8 E10B                       	smpsAlterNote       $0B
000889FA C606 8001                  	dc.b	nA5, $06, nRst, $01
000889FE E107                       	smpsAlterNote       $07
00088A00 BF03                       	dc.b	nD5, $03
00088A02 E106                       	smpsAlterNote       $06
00088A04 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00088A08 E107                       	smpsAlterNote       $07
00088A0A CB03                       	dc.b	nD6, $03
00088A0C E10C                       	smpsAlterNote       $0C
00088A0E C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088A12 E10B                       	smpsAlterNote       $0B
00088A14 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088A18 E109                       	smpsAlterNote       $09
00088A1A C404                       	dc.b	nG5, $04
00088A1C E10B                       	smpsAlterNote       $0B
00088A1E C60D                       	dc.b	nA5, $0D
00088A20 E108                       	smpsAlterNote       $08
00088A22 E701                       	dc.b	smpsNoAttack, $01
00088A24 E104                       	smpsAlterNote       $04
00088A26 E701                       	dc.b	smpsNoAttack, $01
00088A28 E108                       	smpsAlterNote       $08
00088A2A E701                       	dc.b	smpsNoAttack, $01
00088A2C E10B                       	smpsAlterNote       $0B
00088A2E E701                       	dc.b	smpsNoAttack, $01
00088A30 E10F                       	smpsAlterNote       $0F
00088A32 E701                       	dc.b	smpsNoAttack, $01
00088A34 E10B                       	smpsAlterNote       $0B
00088A36 E701                       	dc.b	smpsNoAttack, $01
00088A38 E105                       	smpsAlterNote       $05
00088A3A E701                       	dc.b	smpsNoAttack, $01
00088A3C E104                       	smpsAlterNote       $04
00088A3E E701                       	dc.b	smpsNoAttack, $01
00088A40 E108                       	smpsAlterNote       $08
00088A42 E701                       	dc.b	smpsNoAttack, $01
00088A44 E10E                       	smpsAlterNote       $0E
00088A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A4A E10B                       	smpsAlterNote       $0B
00088A4C E701                       	dc.b	smpsNoAttack, $01
00088A4E E105                       	smpsAlterNote       $05
00088A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A54 E10B                       	smpsAlterNote       $0B
00088A56 E701                       	dc.b	smpsNoAttack, $01
00088A58 E10E                       	smpsAlterNote       $0E
00088A5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A5E E108                       	smpsAlterNote       $08
00088A60 E701                       	dc.b	smpsNoAttack, $01
00088A62 E104                       	smpsAlterNote       $04
00088A64 E701                       	dc.b	smpsNoAttack, $01
00088A66 E105                       	smpsAlterNote       $05
00088A68 E701                       	dc.b	smpsNoAttack, $01
00088A6A E10B                       	smpsAlterNote       $0B
00088A6C E701                       	dc.b	smpsNoAttack, $01
00088A6E E10F                       	smpsAlterNote       $0F
00088A70 E701                       	dc.b	smpsNoAttack, $01
00088A72 E10B                       	smpsAlterNote       $0B
00088A74 E701                       	dc.b	smpsNoAttack, $01
00088A76 E108                       	smpsAlterNote       $08
00088A78 E701                       	dc.b	smpsNoAttack, $01
00088A7A E105                       	smpsAlterNote       $05
00088A7C 8001                       	dc.b	nRst, $01
00088A7E E109                       	smpsAlterNote       $09
00088A80 C401                       	dc.b	nG5, $01
00088A82 E10B                       	smpsAlterNote       $0B
00088A84 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00088A8D E109                       	smpsAlterNote       $09
00088A8F C404 8001                  	dc.b	nG5, $04, nRst, $01
00088A93 E10B                       	smpsAlterNote       $0B
00088A95 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088A99 E107                       	smpsAlterNote       $07
00088A9B BF0D                       	dc.b	nD5, $0D
00088A9D E101                       	smpsAlterNote       $01
00088A9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AA3 E104                       	smpsAlterNote       $04
00088AA5 E701                       	dc.b	smpsNoAttack, $01
00088AA7 E10A                       	smpsAlterNote       $0A
00088AA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AAD E104                       	smpsAlterNote       $04
00088AAF E701                       	dc.b	smpsNoAttack, $01
00088AB1 E101                       	smpsAlterNote       $01
00088AB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AB7 E107                       	smpsAlterNote       $07
00088AB9 E701                       	dc.b	smpsNoAttack, $01
00088ABB E10B                       	smpsAlterNote       $0B
00088ABD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088AC1 E108                       	smpsAlterNote       $08
00088AC3 C101                       	dc.b	nE5, $01
00088AC5 E109                       	smpsAlterNote       $09
00088AC7 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088ACC E10B                       	smpsAlterNote       $0B
00088ACE C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088AD6 E108                       	smpsAlterNote       $08
00088AD8 CD06                       	dc.b	nE6, $06
00088ADA E109                       	smpsAlterNote       $09
00088ADC CE07                       	dc.b	nF6, $07
00088ADE E108                       	smpsAlterNote       $08
00088AE0 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00088AE4 E106                       	smpsAlterNote       $06
00088AE6 C903                       	dc.b	nC6, $03
00088AE8 E109                       	smpsAlterNote       $09
00088AEA C403 8001                  	dc.b	nG5, $03, nRst, $01
00088AEE E10C                       	smpsAlterNote       $0C
00088AF0 C70D                       	dc.b	nBb5, $0D
00088AF2 E106                       	smpsAlterNote       $06
00088AF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AF8 E109                       	smpsAlterNote       $09
00088AFA E701                       	dc.b	smpsNoAttack, $01
00088AFC E10F                       	smpsAlterNote       $0F
00088AFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B02 E109                       	smpsAlterNote       $09
00088B04 E701                       	dc.b	smpsNoAttack, $01
00088B06 E106                       	smpsAlterNote       $06
00088B08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B0C E10C                       	smpsAlterNote       $0C
00088B0E E701                       	dc.b	smpsNoAttack, $01
00088B10 E110                       	smpsAlterNote       $10
00088B12 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088B16 E10B                       	smpsAlterNote       $0B
00088B18 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00088B1C E105                       	smpsAlterNote       $05
00088B1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B22 E10B                       	smpsAlterNote       $0B
00088B24 E701                       	dc.b	smpsNoAttack, $01
00088B26 E10E                       	smpsAlterNote       $0E
00088B28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B2C E108                       	smpsAlterNote       $08
00088B2E E701                       	dc.b	smpsNoAttack, $01
00088B30 E104                       	smpsAlterNote       $04
00088B32 E701                       	dc.b	smpsNoAttack, $01
00088B34 E105                       	smpsAlterNote       $05
00088B36 E701                       	dc.b	smpsNoAttack, $01
00088B38 E10B                       	smpsAlterNote       $0B
00088B3A E701                       	dc.b	smpsNoAttack, $01
00088B3C E10F                       	smpsAlterNote       $0F
00088B3E E701                       	dc.b	smpsNoAttack, $01
00088B40 E10B                       	smpsAlterNote       $0B
00088B42 E701                       	dc.b	smpsNoAttack, $01
00088B44 E108                       	smpsAlterNote       $08
00088B46 E701                       	dc.b	smpsNoAttack, $01
00088B48 E104                       	smpsAlterNote       $04
00088B4A E701                       	dc.b	smpsNoAttack, $01
00088B4C E108                       	smpsAlterNote       $08
00088B4E E701                       	dc.b	smpsNoAttack, $01
00088B50 E10E                       	smpsAlterNote       $0E
00088B52 E701                       	dc.b	smpsNoAttack, $01
00088B54 E10F                       	smpsAlterNote       $0F
00088B56 E701                       	dc.b	smpsNoAttack, $01
00088B58 E10B                       	smpsAlterNote       $0B
00088B5A E701                       	dc.b	smpsNoAttack, $01
00088B5C E105                       	smpsAlterNote       $05
00088B5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B62 E108                       	smpsAlterNote       $08
00088B64 E701                       	dc.b	smpsNoAttack, $01
00088B66 E10E                       	smpsAlterNote       $0E
00088B68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B6C E108                       	smpsAlterNote       $08
00088B6E E701                       	dc.b	smpsNoAttack, $01
00088B70 E105                       	smpsAlterNote       $05
00088B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B76 E10B                       	smpsAlterNote       $0B
00088B78 E701                       	dc.b	smpsNoAttack, $01
00088B7A E10F                       	smpsAlterNote       $0F
00088B7C E701                       	dc.b	smpsNoAttack, $01
00088B7E E10E                       	smpsAlterNote       $0E
00088B80 E701                       	dc.b	smpsNoAttack, $01
00088B82 E108                       	smpsAlterNote       $08
00088B84 E701                       	dc.b	smpsNoAttack, $01
00088B86 E104                       	smpsAlterNote       $04
00088B88 E701                       	dc.b	smpsNoAttack, $01
00088B8A E108                       	smpsAlterNote       $08
00088B8C E701                       	dc.b	smpsNoAttack, $01
00088B8E E10E                       	smpsAlterNote       $0E
00088B90 E701                       	dc.b	smpsNoAttack, $01
00088B92 E10F                       	smpsAlterNote       $0F
00088B94 E701                       	dc.b	smpsNoAttack, $01
00088B96 E10B                       	smpsAlterNote       $0B
00088B98 E701                       	dc.b	smpsNoAttack, $01
00088B9A E105                       	smpsAlterNote       $05
00088B9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BA0 E108                       	smpsAlterNote       $08
00088BA2 E701                       	dc.b	smpsNoAttack, $01
00088BA4 E10E                       	smpsAlterNote       $0E
00088BA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BAA E108                       	smpsAlterNote       $08
00088BAC E701                       	dc.b	smpsNoAttack, $01
00088BAE E105                       	smpsAlterNote       $05
00088BB0 E701                       	dc.b	smpsNoAttack, $01
00088BB2 E10B                       	smpsAlterNote       $0B
00088BB4 C60D                       	dc.b	nA5, $0D
00088BB6 E108                       	smpsAlterNote       $08
00088BB8 E701                       	dc.b	smpsNoAttack, $01
00088BBA E104                       	smpsAlterNote       $04
00088BBC E701                       	dc.b	smpsNoAttack, $01
00088BBE E105                       	smpsAlterNote       $05
00088BC0 E701                       	dc.b	smpsNoAttack, $01
00088BC2 E10B                       	smpsAlterNote       $0B
00088BC4 E701                       	dc.b	smpsNoAttack, $01
00088BC6 E10F                       	smpsAlterNote       $0F
00088BC8 E701                       	dc.b	smpsNoAttack, $01
00088BCA E10B                       	smpsAlterNote       $0B
00088BCC E701                       	dc.b	smpsNoAttack, $01
00088BCE E108                       	smpsAlterNote       $08
00088BD0 E701                       	dc.b	smpsNoAttack, $01
00088BD2 E104                       	smpsAlterNote       $04
00088BD4 E701                       	dc.b	smpsNoAttack, $01
00088BD6 E108                       	smpsAlterNote       $08
00088BD8 E701                       	dc.b	smpsNoAttack, $01
00088BDA E10E                       	smpsAlterNote       $0E
00088BDC E701                       	dc.b	smpsNoAttack, $01
00088BDE E10F                       	smpsAlterNote       $0F
00088BE0 E701                       	dc.b	smpsNoAttack, $01
00088BE4 E109                       	smpsAlterNote       $09
00088BE6 E6FF                       	smpsAlterVol        $FF
00088BE8 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088BF2 E108                       	smpsAlterNote       $08
00088BF4 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088BFA E107                       	smpsAlterNote       $07
00088BFC E601                       	smpsAlterVol        $01
00088BFE BF03                       	dc.b	nD5, $03
00088C00 E108                       	smpsAlterNote       $08
00088C02 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088C06 E109                       	smpsAlterNote       $09
00088C08 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088C0E E10B                       	smpsAlterNote       $0B
00088C10 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088C14 E107                       	smpsAlterNote       $07
00088C16 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088C1A E106                       	smpsAlterNote       $06
00088C1C C90D                       	dc.b	nC6, $0D
00088C1E E103                       	smpsAlterNote       $03
00088C20 E701                       	dc.b	smpsNoAttack, $01
00088C22 E1FF                       	smpsAlterNote       $FF
00088C24 E701                       	dc.b	smpsNoAttack, $01
00088C26 E103                       	smpsAlterNote       $03
00088C28 E701                       	dc.b	smpsNoAttack, $01
00088C2A E109                       	smpsAlterNote       $09
00088C2C E701                       	dc.b	smpsNoAttack, $01
00088C2E E10A                       	smpsAlterNote       $0A
00088C30 E701                       	dc.b	smpsNoAttack, $01
00088C32 E106                       	smpsAlterNote       $06
00088C34 E701                       	dc.b	smpsNoAttack, $01
00088C36 E100                       	smpsAlterNote       $00
00088C38 E701                       	dc.b	smpsNoAttack, $01
00088C3A E10C                       	smpsAlterNote       $0C
00088C3C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088C40 E10B                       	smpsAlterNote       $0B
00088C42 C603                       	dc.b	nA5, $03
00088C44 E109                       	smpsAlterNote       $09
00088C46 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C4A E10B                       	smpsAlterNote       $0B
00088C4C C60D                       	dc.b	nA5, $0D
00088C4E E105                       	smpsAlterNote       $05
00088C50 E701                       	dc.b	smpsNoAttack, $01
00088C52 E104                       	smpsAlterNote       $04
00088C54 E701                       	dc.b	smpsNoAttack, $01
00088C56 E108                       	smpsAlterNote       $08
00088C58 E701                       	dc.b	smpsNoAttack, $01
00088C5A E10E                       	smpsAlterNote       $0E
00088C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C60 E10B                       	smpsAlterNote       $0B
00088C62 E701                       	dc.b	smpsNoAttack, $01
00088C64 E105                       	smpsAlterNote       $05
00088C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C6A E10B                       	smpsAlterNote       $0B
00088C6C E701                       	dc.b	smpsNoAttack, $01
00088C6E E10E                       	smpsAlterNote       $0E
00088C70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C74 E108                       	smpsAlterNote       $08
00088C76 E701                       	dc.b	smpsNoAttack, $01
00088C78 E104                       	smpsAlterNote       $04
00088C7A E701                       	dc.b	smpsNoAttack, $01
00088C7C E105                       	smpsAlterNote       $05
00088C7E E701                       	dc.b	smpsNoAttack, $01
00088C80 E10B                       	smpsAlterNote       $0B
00088C82 E701                       	dc.b	smpsNoAttack, $01
00088C84 E10F                       	smpsAlterNote       $0F
00088C86 E701                       	dc.b	smpsNoAttack, $01
00088C88 E10B                       	smpsAlterNote       $0B
00088C8A E701                       	dc.b	smpsNoAttack, $01
00088C8C E108                       	smpsAlterNote       $08
00088C8E E701                       	dc.b	smpsNoAttack, $01
00088C90 E104                       	smpsAlterNote       $04
00088C92 E701                       	dc.b	smpsNoAttack, $01
00088C94 E108                       	smpsAlterNote       $08
00088C96 E701                       	dc.b	smpsNoAttack, $01
00088C98 E10E                       	smpsAlterNote       $0E
00088C9A E701                       	dc.b	smpsNoAttack, $01
00088C9C E10F                       	smpsAlterNote       $0F
00088C9E E701                       	dc.b	smpsNoAttack, $01
00088CA0 E10B                       	smpsAlterNote       $0B
00088CA2 E701                       	dc.b	smpsNoAttack, $01
00088CA4 E105                       	smpsAlterNote       $05
00088CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CAA E108                       	smpsAlterNote       $08
00088CAC E701                       	dc.b	smpsNoAttack, $01
00088CAE E10E                       	smpsAlterNote       $0E
00088CB0 E701                       	dc.b	smpsNoAttack, $01
00088CB2 E10F                       	smpsAlterNote       $0F
00088CB4 800F                       	dc.b	nRst, $0F
00088CB6 E107                       	smpsAlterNote       $07
00088CB8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088CBC E108                       	smpsAlterNote       $08
00088CBE C103                       	dc.b	nE5, $03
00088CC0 E109                       	smpsAlterNote       $09
00088CC2 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088CC8 E10B                       	smpsAlterNote       $0B
00088CCA C606 8001                  	dc.b	nA5, $06, nRst, $01
00088CCE E107                       	smpsAlterNote       $07
00088CD0 BF03                       	dc.b	nD5, $03
00088CD2 E106                       	smpsAlterNote       $06
00088CD4 C90E                       	dc.b	nC6, $0E
00088CD6 E107                       	smpsAlterNote       $07
00088CD8 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088CDC E10C                       	smpsAlterNote       $0C
00088CDE C704                       	dc.b	nBb5, $04
00088CE0 E10B                       	smpsAlterNote       $0B
00088CE2 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088CE6 E109                       	smpsAlterNote       $09
00088CE8 C404                       	dc.b	nG5, $04
00088CEA E10B                       	smpsAlterNote       $0B
00088CEC C60D                       	dc.b	nA5, $0D
00088CEE E108                       	smpsAlterNote       $08
00088CF0 E701                       	dc.b	smpsNoAttack, $01
00088CF2 E105                       	smpsAlterNote       $05
00088CF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CF8 E10B                       	smpsAlterNote       $0B
00088CFA E701                       	dc.b	smpsNoAttack, $01
00088CFC E10F                       	smpsAlterNote       $0F
00088CFE E701                       	dc.b	smpsNoAttack, $01
00088D00 E10E                       	smpsAlterNote       $0E
00088D02 E701                       	dc.b	smpsNoAttack, $01
00088D04 E108                       	smpsAlterNote       $08
00088D06 E701                       	dc.b	smpsNoAttack, $01
00088D08 E104                       	smpsAlterNote       $04
00088D0A E701                       	dc.b	smpsNoAttack, $01
00088D0C E108                       	smpsAlterNote       $08
00088D0E E701                       	dc.b	smpsNoAttack, $01
00088D10 E10B                       	smpsAlterNote       $0B
00088D12 E701                       	dc.b	smpsNoAttack, $01
00088D14 E10F                       	smpsAlterNote       $0F
00088D16 E701                       	dc.b	smpsNoAttack, $01
00088D18 E10B                       	smpsAlterNote       $0B
00088D1A E701                       	dc.b	smpsNoAttack, $01
00088D1C E105                       	smpsAlterNote       $05
00088D1E E701                       	dc.b	smpsNoAttack, $01
00088D20 E104                       	smpsAlterNote       $04
00088D22 E701                       	dc.b	smpsNoAttack, $01
00088D24 E108                       	smpsAlterNote       $08
00088D26 E701                       	dc.b	smpsNoAttack, $01
00088D28 E10E                       	smpsAlterNote       $0E
00088D2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D2E E10B                       	smpsAlterNote       $0B
00088D30 E701                       	dc.b	smpsNoAttack, $01
00088D32 E105                       	smpsAlterNote       $05
00088D34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D38 E10B                       	smpsAlterNote       $0B
00088D3A E701                       	dc.b	smpsNoAttack, $01
00088D3C E10E                       	smpsAlterNote       $0E
00088D3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D42 E108                       	smpsAlterNote       $08
00088D44 E701                       	dc.b	smpsNoAttack, $01
00088D46 E105                       	smpsAlterNote       $05
00088D48 8001                       	dc.b	nRst, $01
00088D4A E109                       	smpsAlterNote       $09
00088D4C C402                       	dc.b	nG5, $02
00088D4E E10B                       	smpsAlterNote       $0B
00088D50 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088D59 E109                       	smpsAlterNote       $09
00088D5B C404                       	dc.b	nG5, $04
00088D5D E10B                       	smpsAlterNote       $0B
00088D5F C604 8001                  	dc.b	nA5, $04, nRst, $01
00088D63 E107                       	smpsAlterNote       $07
00088D65 BF0D                       	dc.b	nD5, $0D
00088D67 E101                       	smpsAlterNote       $01
00088D69 E701                       	dc.b	smpsNoAttack, $01
00088D6B E100                       	smpsAlterNote       $00
00088D6D E701                       	dc.b	smpsNoAttack, $01
00088D6F E104                       	smpsAlterNote       $04
00088D71 E701                       	dc.b	smpsNoAttack, $01
00088D73 E10A                       	smpsAlterNote       $0A
00088D75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D79 E107                       	smpsAlterNote       $07
00088D7B E701                       	dc.b	smpsNoAttack, $01
00088D7D E101                       	smpsAlterNote       $01
00088D7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D83 E107                       	smpsAlterNote       $07
00088D85 E701                       	dc.b	smpsNoAttack, $01
00088D87 E10A                       	smpsAlterNote       $0A
00088D89 E701                       	dc.b	smpsNoAttack, $01
00088D8B E10B                       	smpsAlterNote       $0B
00088D8D 8001                       	dc.b	nRst, $01
00088D8F E108                       	smpsAlterNote       $08
00088D91 C101                       	dc.b	nE5, $01
00088D93 E109                       	smpsAlterNote       $09
00088D95 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088D9A E10B                       	smpsAlterNote       $0B
00088D9C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088DA4 E108                       	smpsAlterNote       $08
00088DA6 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088DAA E109                       	smpsAlterNote       $09
00088DAC CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088DB0 E108                       	smpsAlterNote       $08
00088DB2 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088DB6 E106                       	smpsAlterNote       $06
00088DB8 C903                       	dc.b	nC6, $03
00088DBA E109                       	smpsAlterNote       $09
00088DBC C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DC0 E10C                       	smpsAlterNote       $0C
00088DC2 C70D                       	dc.b	nBb5, $0D
00088DC4 E109                       	smpsAlterNote       $09
00088DC6 E701                       	dc.b	smpsNoAttack, $01
00088DC8 E105                       	smpsAlterNote       $05
00088DCA E701                       	dc.b	smpsNoAttack, $01
00088DCC E109                       	smpsAlterNote       $09
00088DCE E701                       	dc.b	smpsNoAttack, $01
00088DD0 E10F                       	smpsAlterNote       $0F
00088DD2 E701                       	dc.b	smpsNoAttack, $01
00088DD4 E110                       	smpsAlterNote       $10
00088DD6 E701                       	dc.b	smpsNoAttack, $01
00088DD8 E10C                       	smpsAlterNote       $0C
00088DDA E701                       	dc.b	smpsNoAttack, $01
00088DDC E106                       	smpsAlterNote       $06
00088DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DE2 E109                       	smpsAlterNote       $09
00088DE4 E701                       	dc.b	smpsNoAttack, $01
00088DE6 E10F                       	smpsAlterNote       $0F
00088DE8 E701                       	dc.b	smpsNoAttack, $01
00088DEA E110                       	smpsAlterNote       $10
00088DEC 8001                       	dc.b	nRst, $01
00088DEE E10B                       	smpsAlterNote       $0B
00088DF0 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088DF6 E105                       	smpsAlterNote       $05
00088DF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DFC E108                       	smpsAlterNote       $08
00088DFE E701                       	dc.b	smpsNoAttack, $01
00088E00 E10E                       	smpsAlterNote       $0E
00088E02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E06 E108                       	smpsAlterNote       $08
00088E08 E701                       	dc.b	smpsNoAttack, $01
00088E0A E105                       	smpsAlterNote       $05
00088E0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E10 E10B                       	smpsAlterNote       $0B
00088E12 E701                       	dc.b	smpsNoAttack, $01
00088E14 E10F                       	smpsAlterNote       $0F
00088E16 E701                       	dc.b	smpsNoAttack, $01
00088E18 E10E                       	smpsAlterNote       $0E
00088E1A E701                       	dc.b	smpsNoAttack, $01
00088E1C E108                       	smpsAlterNote       $08
00088E1E E701                       	dc.b	smpsNoAttack, $01
00088E20 E104                       	smpsAlterNote       $04
00088E22 E701                       	dc.b	smpsNoAttack, $01
00088E24 E108                       	smpsAlterNote       $08
00088E26 E701                       	dc.b	smpsNoAttack, $01
00088E28 E10B                       	smpsAlterNote       $0B
00088E2A E701                       	dc.b	smpsNoAttack, $01
00088E2C E10F                       	smpsAlterNote       $0F
00088E2E E701                       	dc.b	smpsNoAttack, $01
00088E30 E10B                       	smpsAlterNote       $0B
00088E32 E701                       	dc.b	smpsNoAttack, $01
00088E34 E105                       	smpsAlterNote       $05
00088E36 E701                       	dc.b	smpsNoAttack, $01
00088E38 E104                       	smpsAlterNote       $04
00088E3A E701                       	dc.b	smpsNoAttack, $01
00088E3C E108                       	smpsAlterNote       $08
00088E3E E701                       	dc.b	smpsNoAttack, $01
00088E40 E10E                       	smpsAlterNote       $0E
00088E42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E46 E10B                       	smpsAlterNote       $0B
00088E48 E701                       	dc.b	smpsNoAttack, $01
00088E4A E105                       	smpsAlterNote       $05
00088E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E50 E10B                       	smpsAlterNote       $0B
00088E52 E701                       	dc.b	smpsNoAttack, $01
00088E54 E10E                       	smpsAlterNote       $0E
00088E56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E5A E108                       	smpsAlterNote       $08
00088E5C E701                       	dc.b	smpsNoAttack, $01
00088E5E E104                       	smpsAlterNote       $04
00088E60 E701                       	dc.b	smpsNoAttack, $01
00088E62 E105                       	smpsAlterNote       $05
00088E64 E701                       	dc.b	smpsNoAttack, $01
00088E66 E10B                       	smpsAlterNote       $0B
00088E68 E701                       	dc.b	smpsNoAttack, $01
00088E6A E10F                       	smpsAlterNote       $0F
00088E6C E701                       	dc.b	smpsNoAttack, $01
00088E6E E10B                       	smpsAlterNote       $0B
00088E70 E701                       	dc.b	smpsNoAttack, $01
00088E72 E108                       	smpsAlterNote       $08
00088E74 E701                       	dc.b	smpsNoAttack, $01
00088E76 E104                       	smpsAlterNote       $04
00088E78 E701                       	dc.b	smpsNoAttack, $01
00088E7A E108                       	smpsAlterNote       $08
00088E7C E701                       	dc.b	smpsNoAttack, $01
00088E7E E10E                       	smpsAlterNote       $0E
00088E80 E701                       	dc.b	smpsNoAttack, $01
00088E82 E10F                       	smpsAlterNote       $0F
00088E84 E701                       	dc.b	smpsNoAttack, $01
00088E86 E10B                       	smpsAlterNote       $0B
00088E88 E701                       	dc.b	smpsNoAttack, $01
00088E8A E105                       	smpsAlterNote       $05
00088E8C E701                       	dc.b	smpsNoAttack, $01
00088E8E E10B                       	smpsAlterNote       $0B
00088E90 C60E                       	dc.b	nA5, $0E
00088E92 E105                       	smpsAlterNote       $05
00088E94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E98 E10B                       	smpsAlterNote       $0B
00088E9A E701                       	dc.b	smpsNoAttack, $01
00088E9C E10E                       	smpsAlterNote       $0E
00088E9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EA2 E108                       	smpsAlterNote       $08
00088EA4 E701                       	dc.b	smpsNoAttack, $01
00088EA6 E104                       	smpsAlterNote       $04
00088EA8 E701                       	dc.b	smpsNoAttack, $01
00088EAA E105                       	smpsAlterNote       $05
00088EAC E701                       	dc.b	smpsNoAttack, $01
00088EAE E10B                       	smpsAlterNote       $0B
00088EB0 E701                       	dc.b	smpsNoAttack, $01
00088EB2 E10F                       	smpsAlterNote       $0F
00088EB4 E701                       	dc.b	smpsNoAttack, $01
00088EB6 E10B                       	smpsAlterNote       $0B
00088EB8 E701                       	dc.b	smpsNoAttack, $01
00088EBA E108                       	smpsAlterNote       $08
00088EBC E701                       	dc.b	smpsNoAttack, $01
00088EBE E104                       	smpsAlterNote       $04
00088EC0 E701                       	dc.b	smpsNoAttack, $01
00088EC2 E108                       	smpsAlterNote       $08
00088EC4 E701                       	dc.b	smpsNoAttack, $01
00088EC6 E10E                       	smpsAlterNote       $0E
00088EC8 E701                       	dc.b	smpsNoAttack, $01
00088ECA E10F                       	smpsAlterNote       $0F
00088ECC E701                       	dc.b	smpsNoAttack, $01
00088ECE E10B                       	smpsAlterNote       $0B
00088ED0 E701                       	dc.b	smpsNoAttack, $01
00088ED2 E105                       	smpsAlterNote       $05
00088ED4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ED8 E108                       	smpsAlterNote       $08
00088EDA E701                       	dc.b	smpsNoAttack, $01
00088EDC E10E                       	smpsAlterNote       $0E
00088EDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EE2 E108                       	smpsAlterNote       $08
00088EE4 E701                       	dc.b	smpsNoAttack, $01
00088EE6 E105                       	smpsAlterNote       $05
00088EE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EEC E10B                       	smpsAlterNote       $0B
00088EEE E701                       	dc.b	smpsNoAttack, $01
00088EF0 E10F                       	smpsAlterNote       $0F
00088EF2 E701                       	dc.b	smpsNoAttack, $01
00088EF4 E10E                       	smpsAlterNote       $0E
00088EF6 E701                       	dc.b	smpsNoAttack, $01
00088EF8 E108                       	smpsAlterNote       $08
00088EFA E701                       	dc.b	smpsNoAttack, $01
00088EFC E104                       	smpsAlterNote       $04
00088EFE E701                       	dc.b	smpsNoAttack, $01
00088F00 E108                       	smpsAlterNote       $08
00088F02 E701                       	dc.b	smpsNoAttack, $01
00088F04 E10E                       	smpsAlterNote       $0E
00088F06 E701                       	dc.b	smpsNoAttack, $01
00088F08 E10F                       	smpsAlterNote       $0F
00088F0A E701                       	dc.b	smpsNoAttack, $01
00088F0C E10B                       	smpsAlterNote       $0B
00088F0E E701                       	dc.b	smpsNoAttack, $01
00088F10 E105                       	smpsAlterNote       $05
00088F12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F16 E108                       	smpsAlterNote       $08
00088F18 E701                       	dc.b	smpsNoAttack, $01
00088F1A E10E                       	smpsAlterNote       $0E
00088F1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F20 E108                       	smpsAlterNote       $08
00088F22 E701                       	dc.b	smpsNoAttack, $01
00088F24 E105                       	smpsAlterNote       $05
00088F26 E701                       	dc.b	smpsNoAttack, $01
00088F2A E10B                       	smpsAlterNote       $0B
00088F2C E6FD                       	smpsAlterVol        $FD
00088F2E C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F32 E109                       	smpsAlterNote       $09
00088F34 C404                       	dc.b	nG5, $04
00088F36 E10B                       	smpsAlterNote       $0B
00088F38 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F3C E107                       	smpsAlterNote       $07
00088F3E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00088F44 E10B                       	smpsAlterNote       $0B
00088F46 C604                       	dc.b	nA5, $04
00088F48 E109                       	smpsAlterNote       $09
00088F4A C404 8001                  	dc.b	nG5, $04, nRst, $01
00088F4E E10B                       	smpsAlterNote       $0B
00088F50 C604                       	dc.b	nA5, $04
00088F52 E108                       	smpsAlterNote       $08
00088F54 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00088F5C E106                       	smpsAlterNote       $06
00088F5E C904 8001                  	dc.b	nC6, $04, nRst, $01
00088F62 E10C                       	smpsAlterNote       $0C
00088F64 C704                       	dc.b	nBb5, $04
00088F66 E10B                       	smpsAlterNote       $0B
00088F68 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F6C E109                       	smpsAlterNote       $09
00088F6E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00088F78 E10B                       	smpsAlterNote       $0B
00088F7A C60D                       	dc.b	nA5, $0D
00088F7C E108                       	smpsAlterNote       $08
00088F7E E701                       	dc.b	smpsNoAttack, $01
00088F80 E104                       	smpsAlterNote       $04
00088F82 E701                       	dc.b	smpsNoAttack, $01
00088F84 E108                       	smpsAlterNote       $08
00088F86 E701                       	dc.b	smpsNoAttack, $01
00088F88 E10E                       	smpsAlterNote       $0E
00088F8A E701                       	dc.b	smpsNoAttack, $01
00088F8C E10F                       	smpsAlterNote       $0F
00088F8E E701                       	dc.b	smpsNoAttack, $01
00088F90 E10B                       	smpsAlterNote       $0B
00088F92 E701                       	dc.b	smpsNoAttack, $01
00088F94 E105                       	smpsAlterNote       $05
00088F96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F9A E108                       	smpsAlterNote       $08
00088F9C E701                       	dc.b	smpsNoAttack, $01
00088F9E E10E                       	smpsAlterNote       $0E
00088FA0 E701                       	dc.b	smpsNoAttack, $01
00088FA2 E10F                       	smpsAlterNote       $0F
00088FA4 8001                       	dc.b	nRst, $01
00088FA6 E109                       	smpsAlterNote       $09
00088FA8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00088FAE E108                       	smpsAlterNote       $08
00088FB0 C10D                       	dc.b	nE5, $0D
00088FB2 E102                       	smpsAlterNote       $02
00088FB4 E701                       	dc.b	smpsNoAttack, $01
00088FB6 E101                       	smpsAlterNote       $01
00088FB8 E701                       	dc.b	smpsNoAttack, $01
00088FBA E105                       	smpsAlterNote       $05
00088FBC E701                       	dc.b	smpsNoAttack, $01
00088FBE E10B                       	smpsAlterNote       $0B
00088FC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FC4 E108                       	smpsAlterNote       $08
00088FC6 E701                       	dc.b	smpsNoAttack, $01
00088FC8 E102                       	smpsAlterNote       $02
00088FCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FCE E108                       	smpsAlterNote       $08
00088FD0 E701                       	dc.b	smpsNoAttack, $01
00088FD2 E10B                       	smpsAlterNote       $0B
00088FD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FD8 E105                       	smpsAlterNote       $05
00088FDA E701                       	dc.b	smpsNoAttack, $01
00088FDC E101                       	smpsAlterNote       $01
00088FDE E701                       	dc.b	smpsNoAttack, $01
00088FE0 E102                       	smpsAlterNote       $02
00088FE2 E701                       	dc.b	smpsNoAttack, $01
00088FE4 E108                       	smpsAlterNote       $08
00088FE6 E701                       	dc.b	smpsNoAttack, $01
00088FE8 E10C                       	smpsAlterNote       $0C
00088FEA E701                       	dc.b	smpsNoAttack, $01
00088FEC E108                       	smpsAlterNote       $08
00088FEE E701                       	dc.b	smpsNoAttack, $01
00088FF0 E105                       	smpsAlterNote       $05
00088FF2 E701                       	dc.b	smpsNoAttack, $01
00088FF4 E101                       	smpsAlterNote       $01
00088FF6 E701                       	dc.b	smpsNoAttack, $01
00088FF8 E105                       	smpsAlterNote       $05
00088FFA E701                       	dc.b	smpsNoAttack, $01
00088FFC E10B                       	smpsAlterNote       $0B
00088FFE E701                       	dc.b	smpsNoAttack, $01
00089000 E10C                       	smpsAlterNote       $0C
00089002 E701                       	dc.b	smpsNoAttack, $01
00089004 E108                       	smpsAlterNote       $08
00089006 E701                       	dc.b	smpsNoAttack, $01
00089008 E102                       	smpsAlterNote       $02
0008900A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008900E E105                       	smpsAlterNote       $05
00089010 E701                       	dc.b	smpsNoAttack, $01
00089012 E10B                       	smpsAlterNote       $0B
00089014 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089018 E105                       	smpsAlterNote       $05
0008901A E701                       	dc.b	smpsNoAttack, $01
0008901C E102                       	smpsAlterNote       $02
0008901E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089022 E108                       	smpsAlterNote       $08
00089024 E701                       	dc.b	smpsNoAttack, $01
00089026 E10C                       	smpsAlterNote       $0C
00089028 E701                       	dc.b	smpsNoAttack, $01
0008902A E10B                       	smpsAlterNote       $0B
0008902C E701                       	dc.b	smpsNoAttack, $01
0008902E E105                       	smpsAlterNote       $05
00089030 E701                       	dc.b	smpsNoAttack, $01
00089032 E101                       	smpsAlterNote       $01
00089034 E701                       	dc.b	smpsNoAttack, $01
00089036 E105                       	smpsAlterNote       $05
00089038 E701                       	dc.b	smpsNoAttack, $01
0008903A E108                       	smpsAlterNote       $08
0008903C E701                       	dc.b	smpsNoAttack, $01
0008903E E10C                       	smpsAlterNote       $0C
00089040 E701                       	dc.b	smpsNoAttack, $01
00089042 E108                       	smpsAlterNote       $08
00089044 E701                       	dc.b	smpsNoAttack, $01
00089046 E102                       	smpsAlterNote       $02
00089048 E701                       	dc.b	smpsNoAttack, $01
0008904A E101                       	smpsAlterNote       $01
0008904C E701                       	dc.b	smpsNoAttack, $01
0008904E E105                       	smpsAlterNote       $05
00089050 E701                       	dc.b	smpsNoAttack, $01
00089052 E10B                       	smpsAlterNote       $0B
00089054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089058 E108                       	smpsAlterNote       $08
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C E102                       	smpsAlterNote       $02
0008905E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089062 E108                       	smpsAlterNote       $08
00089064 E701                       	dc.b	smpsNoAttack, $01
00089066 E10B                       	smpsAlterNote       $0B
00089068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008906C E105                       	smpsAlterNote       $05
0008906E E701                       	dc.b	smpsNoAttack, $01
00089070 E101                       	smpsAlterNote       $01
00089072 E701                       	dc.b	smpsNoAttack, $01
00089074 E102                       	smpsAlterNote       $02
00089076 E701                       	dc.b	smpsNoAttack, $01
00089078 E108                       	smpsAlterNote       $08
0008907A E701                       	dc.b	smpsNoAttack, $01
0008907C E10C                       	smpsAlterNote       $0C
0008907E E701                       	dc.b	smpsNoAttack, $01
00089080 E108                       	smpsAlterNote       $08
00089082 E701                       	dc.b	smpsNoAttack, $01
00089084 E105                       	smpsAlterNote       $05
00089086 E701                       	dc.b	smpsNoAttack, $01
00089088 E101                       	smpsAlterNote       $01
0008908A E701                       	dc.b	smpsNoAttack, $01
0008908C E105                       	smpsAlterNote       $05
0008908E E701                       	dc.b	smpsNoAttack, $01
00089090 E10B                       	smpsAlterNote       $0B
00089092 E701                       	dc.b	smpsNoAttack, $01
00089094 E10C                       	smpsAlterNote       $0C
00089096 E701                       	dc.b	smpsNoAttack, $01
00089098 E108                       	smpsAlterNote       $08
0008909A E701                       	dc.b	smpsNoAttack, $01
0008909C E102                       	smpsAlterNote       $02
0008909E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890A2 E105                       	smpsAlterNote       $05
000890A4 E701                       	dc.b	smpsNoAttack, $01
000890A6 E10B                       	smpsAlterNote       $0B
000890A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890AC E105                       	smpsAlterNote       $05
000890AE E701                       	dc.b	smpsNoAttack, $01
000890B0 E101                       	smpsAlterNote       $01
000890B2 E701                       	dc.b	smpsNoAttack, $01
000890B4 E102                       	smpsAlterNote       $02
000890B6 E701                       	dc.b	smpsNoAttack, $01
000890B8 E108                       	smpsAlterNote       $08
000890BA E701                       	dc.b	smpsNoAttack, $01
000890BC E10C                       	smpsAlterNote       $0C
000890BE E701                       	dc.b	smpsNoAttack, $01
000890C0 E108                       	smpsAlterNote       $08
000890C2 E701                       	dc.b	smpsNoAttack, $01
000890C4 E105                       	smpsAlterNote       $05
000890C6 E701                       	dc.b	smpsNoAttack, $01
000890C8 E101                       	smpsAlterNote       $01
000890CA E701                       	dc.b	smpsNoAttack, $01
000890CC E105                       	smpsAlterNote       $05
000890CE E701                       	dc.b	smpsNoAttack, $01
000890D0 E10B                       	smpsAlterNote       $0B
000890D2 E701                       	dc.b	smpsNoAttack, $01
000890D4 E10C                       	smpsAlterNote       $0C
000890D6 E701                       	dc.b	smpsNoAttack, $01
000890D8 E108                       	smpsAlterNote       $08
000890DA E701                       	dc.b	smpsNoAttack, $01
000890DC E102                       	smpsAlterNote       $02
000890DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890E2 E105                       	smpsAlterNote       $05
000890E4 E701                       	dc.b	smpsNoAttack, $01
000890E6 E10B                       	smpsAlterNote       $0B
000890E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890EC E105                       	smpsAlterNote       $05
000890EE E701                       	dc.b	smpsNoAttack, $01
000890F0 E102                       	smpsAlterNote       $02
000890F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890F6 E108                       	smpsAlterNote       $08
000890F8 E701                       	dc.b	smpsNoAttack, $01
000890FA E10C                       	smpsAlterNote       $0C
000890FC E701                       	dc.b	smpsNoAttack, $01
000890FE E10B                       	smpsAlterNote       $0B
00089100 E701                       	dc.b	smpsNoAttack, $01
00089102 E105                       	smpsAlterNote       $05
00089104 E701                       	dc.b	smpsNoAttack, $01
00089106 E101                       	smpsAlterNote       $01
00089108 E701                       	dc.b	smpsNoAttack, $01
0008910A E105                       	smpsAlterNote       $05
0008910C E701                       	dc.b	smpsNoAttack, $01
0008910E E108                       	smpsAlterNote       $08
00089110 E701                       	dc.b	smpsNoAttack, $01
00089112 E10C                       	smpsAlterNote       $0C
00089114 E701                       	dc.b	smpsNoAttack, $01
00089118 E10B                       	smpsAlterNote       $0B
0008911A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008911E E109                       	smpsAlterNote       $09
00089120 C404                       	dc.b	nG5, $04
00089122 E10B                       	smpsAlterNote       $0B
00089124 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089128 E107                       	smpsAlterNote       $07
0008912A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00089130 E10B                       	smpsAlterNote       $0B
00089132 C604                       	dc.b	nA5, $04
00089134 E109                       	smpsAlterNote       $09
00089136 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008913A E10B                       	smpsAlterNote       $0B
0008913C C604                       	dc.b	nA5, $04
0008913E E108                       	smpsAlterNote       $08
00089140 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00089146 E106                       	smpsAlterNote       $06
00089148 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008914C E10C                       	smpsAlterNote       $0C
0008914E C704                       	dc.b	nBb5, $04
00089150 E10B                       	smpsAlterNote       $0B
00089152 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089156 E109                       	smpsAlterNote       $09
00089158 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00089162 E10B                       	smpsAlterNote       $0B
00089164 C60D                       	dc.b	nA5, $0D
00089166 E108                       	smpsAlterNote       $08
00089168 E701                       	dc.b	smpsNoAttack, $01
0008916A E104                       	smpsAlterNote       $04
0008916C E701                       	dc.b	smpsNoAttack, $01
0008916E E108                       	smpsAlterNote       $08
00089170 E701                       	dc.b	smpsNoAttack, $01
00089172 E10B                       	smpsAlterNote       $0B
00089174 E701                       	dc.b	smpsNoAttack, $01
00089176 E10F                       	smpsAlterNote       $0F
00089178 E701                       	dc.b	smpsNoAttack, $01
0008917A E10B                       	smpsAlterNote       $0B
0008917C E701                       	dc.b	smpsNoAttack, $01
0008917E E105                       	smpsAlterNote       $05
00089180 E701                       	dc.b	smpsNoAttack, $01
00089182 E104                       	smpsAlterNote       $04
00089184 E701                       	dc.b	smpsNoAttack, $01
00089186 E108                       	smpsAlterNote       $08
00089188 E701                       	dc.b	smpsNoAttack, $01
0008918A E10E                       	smpsAlterNote       $0E
0008918C E701                       	dc.b	smpsNoAttack, $01
0008918E E10F                       	smpsAlterNote       $0F
00089190 8001                       	dc.b	nRst, $01
00089192 E109                       	smpsAlterNote       $09
00089194 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008919A E108                       	smpsAlterNote       $08
0008919C C10D                       	dc.b	nE5, $0D
0008919E E105                       	smpsAlterNote       $05
000891A0 E701                       	dc.b	smpsNoAttack, $01
000891A2 E101                       	smpsAlterNote       $01
000891A4 E701                       	dc.b	smpsNoAttack, $01
000891A6 E105                       	smpsAlterNote       $05
000891A8 E701                       	dc.b	smpsNoAttack, $01
000891AA E10B                       	smpsAlterNote       $0B
000891AC E701                       	dc.b	smpsNoAttack, $01
000891AE E10C                       	smpsAlterNote       $0C
000891B0 E701                       	dc.b	smpsNoAttack, $01
000891B2 E108                       	smpsAlterNote       $08
000891B4 E701                       	dc.b	smpsNoAttack, $01
000891B6 E102                       	smpsAlterNote       $02
000891B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891BC E105                       	smpsAlterNote       $05
000891BE E701                       	dc.b	smpsNoAttack, $01
000891C0 E10B                       	smpsAlterNote       $0B
000891C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891C6 E105                       	smpsAlterNote       $05
000891C8 E701                       	dc.b	smpsNoAttack, $01
000891CA E102                       	smpsAlterNote       $02
000891CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891D0 E108                       	smpsAlterNote       $08
000891D2 E701                       	dc.b	smpsNoAttack, $01
000891D4 E10C                       	smpsAlterNote       $0C
000891D6 E701                       	dc.b	smpsNoAttack, $01
000891D8 E10B                       	smpsAlterNote       $0B
000891DA E701                       	dc.b	smpsNoAttack, $01
000891DC E105                       	smpsAlterNote       $05
000891DE E701                       	dc.b	smpsNoAttack, $01
000891E0 E101                       	smpsAlterNote       $01
000891E2 E701                       	dc.b	smpsNoAttack, $01
000891E4 E105                       	smpsAlterNote       $05
000891E6 E701                       	dc.b	smpsNoAttack, $01
000891E8 E108                       	smpsAlterNote       $08
000891EA E701                       	dc.b	smpsNoAttack, $01
000891EC E10C                       	smpsAlterNote       $0C
000891EE E701                       	dc.b	smpsNoAttack, $01
000891F0 E108                       	smpsAlterNote       $08
000891F2 E701                       	dc.b	smpsNoAttack, $01
000891F4 E102                       	smpsAlterNote       $02
000891F6 E701                       	dc.b	smpsNoAttack, $01
000891F8 E101                       	smpsAlterNote       $01
000891FA E701                       	dc.b	smpsNoAttack, $01
000891FC E105                       	smpsAlterNote       $05
000891FE E701                       	dc.b	smpsNoAttack, $01
00089200 E10B                       	smpsAlterNote       $0B
00089202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089206 E108                       	smpsAlterNote       $08
00089208 E701                       	dc.b	smpsNoAttack, $01
0008920A E102                       	smpsAlterNote       $02
0008920C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089210 E108                       	smpsAlterNote       $08
00089212 E701                       	dc.b	smpsNoAttack, $01
00089214 E10B                       	smpsAlterNote       $0B
00089216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008921A E105                       	smpsAlterNote       $05
0008921C E701                       	dc.b	smpsNoAttack, $01
0008921E E101                       	smpsAlterNote       $01
00089220 E701                       	dc.b	smpsNoAttack, $01
00089222 E102                       	smpsAlterNote       $02
00089224 E701                       	dc.b	smpsNoAttack, $01
00089226 E108                       	smpsAlterNote       $08
00089228 E701                       	dc.b	smpsNoAttack, $01
0008922A E10C                       	smpsAlterNote       $0C
0008922C E701                       	dc.b	smpsNoAttack, $01
0008922E E108                       	smpsAlterNote       $08
00089230 E701                       	dc.b	smpsNoAttack, $01
00089232 E105                       	smpsAlterNote       $05
00089234 E701                       	dc.b	smpsNoAttack, $01
00089236 E101                       	smpsAlterNote       $01
00089238 E701                       	dc.b	smpsNoAttack, $01
0008923A E105                       	smpsAlterNote       $05
0008923C E701                       	dc.b	smpsNoAttack, $01
0008923E E10B                       	smpsAlterNote       $0B
00089240 E701                       	dc.b	smpsNoAttack, $01
00089242 E10C                       	smpsAlterNote       $0C
00089244 E701                       	dc.b	smpsNoAttack, $01
00089246 E108                       	smpsAlterNote       $08
00089248 E701                       	dc.b	smpsNoAttack, $01
0008924A E102                       	smpsAlterNote       $02
0008924C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089250 E108                       	smpsAlterNote       $08
00089252 E701                       	dc.b	smpsNoAttack, $01
00089254 E10B                       	smpsAlterNote       $0B
00089256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008925A E105                       	smpsAlterNote       $05
0008925C E701                       	dc.b	smpsNoAttack, $01
0008925E E101                       	smpsAlterNote       $01
00089260 E701                       	dc.b	smpsNoAttack, $01
00089262 E102                       	smpsAlterNote       $02
00089264 E701                       	dc.b	smpsNoAttack, $01
00089266 E108                       	smpsAlterNote       $08
00089268 E701                       	dc.b	smpsNoAttack, $01
0008926A E10C                       	smpsAlterNote       $0C
0008926C E701                       	dc.b	smpsNoAttack, $01
0008926E E108                       	smpsAlterNote       $08
00089270 E701                       	dc.b	smpsNoAttack, $01
00089272 E105                       	smpsAlterNote       $05
00089274 E701                       	dc.b	smpsNoAttack, $01
00089276 E101                       	smpsAlterNote       $01
00089278 E701                       	dc.b	smpsNoAttack, $01
0008927A E105                       	smpsAlterNote       $05
0008927C E701                       	dc.b	smpsNoAttack, $01
0008927E E10B                       	smpsAlterNote       $0B
00089280 E701                       	dc.b	smpsNoAttack, $01
00089282 E10C                       	smpsAlterNote       $0C
00089284 E701                       	dc.b	smpsNoAttack, $01
00089286 E108                       	smpsAlterNote       $08
00089288 E701                       	dc.b	smpsNoAttack, $01
0008928A E102                       	smpsAlterNote       $02
0008928C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089290 E105                       	smpsAlterNote       $05
00089292 E701                       	dc.b	smpsNoAttack, $01
00089294 E10B                       	smpsAlterNote       $0B
00089296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008929A E105                       	smpsAlterNote       $05
0008929C E701                       	dc.b	smpsNoAttack, $01
0008929E E102                       	smpsAlterNote       $02
000892A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892A4 E108                       	smpsAlterNote       $08
000892A6 E701                       	dc.b	smpsNoAttack, $01
000892A8 E10C                       	smpsAlterNote       $0C
000892AA E701                       	dc.b	smpsNoAttack, $01
000892AC E10B                       	smpsAlterNote       $0B
000892AE E701                       	dc.b	smpsNoAttack, $01
000892B0 E105                       	smpsAlterNote       $05
000892B2 E701                       	dc.b	smpsNoAttack, $01
000892B4 E101                       	smpsAlterNote       $01
000892B6 E701                       	dc.b	smpsNoAttack, $01
000892B8 E105                       	smpsAlterNote       $05
000892BA E701                       	dc.b	smpsNoAttack, $01
000892BC E108                       	smpsAlterNote       $08
000892BE E701                       	dc.b	smpsNoAttack, $01
000892C0 E10C                       	smpsAlterNote       $0C
000892C2 E701                       	dc.b	smpsNoAttack, $01
000892C4 E108                       	smpsAlterNote       $08
000892C6 E701                       	dc.b	smpsNoAttack, $01
000892C8 E102                       	smpsAlterNote       $02
000892CA E701                       	dc.b	smpsNoAttack, $01
000892CC E101                       	smpsAlterNote       $01
000892CE E701                       	dc.b	smpsNoAttack, $01
000892D0 E105                       	smpsAlterNote       $05
000892D2 E701                       	dc.b	smpsNoAttack, $01
000892D4 E10B                       	smpsAlterNote       $0B
000892D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892DA E108                       	smpsAlterNote       $08
000892DC E701                       	dc.b	smpsNoAttack, $01
000892DE E102                       	smpsAlterNote       $02
000892E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892E4 E108                       	smpsAlterNote       $08
000892E6 E701                       	dc.b	smpsNoAttack, $01
000892E8 E10B                       	smpsAlterNote       $0B
000892EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892EE E105                       	smpsAlterNote       $05
000892F0 E701                       	dc.b	smpsNoAttack, $01
000892F2 E102                       	smpsAlterNote       $02
000892F4 8001                       	dc.b	nRst, $01
000892F6 E107                       	smpsAlterNote       $07
000892F8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000892FC E108                       	smpsAlterNote       $08
000892FE C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00089302 E102                       	smpsAlterNote       $02
00089304 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089308 E108                       	smpsAlterNote       $08
0008930A E701                       	dc.b	smpsNoAttack, $01
0008930C E10B                       	smpsAlterNote       $0B
0008930E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089312 E105                       	smpsAlterNote       $05
00089314 E701                       	dc.b	smpsNoAttack, $01
00089316 E101                       	smpsAlterNote       $01
00089318 E701                       	dc.b	smpsNoAttack, $01
0008931A E102                       	smpsAlterNote       $02
0008931C E701                       	dc.b	smpsNoAttack, $01
0008931E E108                       	smpsAlterNote       $08
00089320 E701                       	dc.b	smpsNoAttack, $01
00089322 E10C                       	smpsAlterNote       $0C
00089324 E701                       	dc.b	smpsNoAttack, $01
00089326 E108                       	smpsAlterNote       $08
00089328 E701                       	dc.b	smpsNoAttack, $01
0008932A E105                       	smpsAlterNote       $05
0008932C E701                       	dc.b	smpsNoAttack, $01
0008932E E101                       	smpsAlterNote       $01
00089330 E701                       	dc.b	smpsNoAttack, $01
00089332 E105                       	smpsAlterNote       $05
00089334 E701                       	dc.b	smpsNoAttack, $01
00089336 E10B                       	smpsAlterNote       $0B
00089338 E701                       	dc.b	smpsNoAttack, $01
0008933A E10C                       	smpsAlterNote       $0C
0008933C E701                       	dc.b	smpsNoAttack, $01
0008933E E108                       	smpsAlterNote       $08
00089340 E701                       	dc.b	smpsNoAttack, $01
00089342 E102                       	smpsAlterNote       $02
00089344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089348 E105                       	smpsAlterNote       $05
0008934A E701                       	dc.b	smpsNoAttack, $01
0008934C E10B                       	smpsAlterNote       $0B
0008934E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089352 E105                       	smpsAlterNote       $05
00089354 E701                       	dc.b	smpsNoAttack, $01
00089356 E102                       	smpsAlterNote       $02
00089358 E701                       	dc.b	smpsNoAttack, $01
0008935A E109                       	smpsAlterNote       $09
0008935C C40A C207                  	dc.b	nG5, $0A, nF5, $07
00089360 E108                       	smpsAlterNote       $08
00089362 C10D                       	dc.b	nE5, $0D
00089364 E105                       	smpsAlterNote       $05
00089366 E701                       	dc.b	smpsNoAttack, $01
00089368 E101                       	smpsAlterNote       $01
0008936A E701                       	dc.b	smpsNoAttack, $01
0008936C E102                       	smpsAlterNote       $02
0008936E E701                       	dc.b	smpsNoAttack, $01
00089370 E108                       	smpsAlterNote       $08
00089372 E701                       	dc.b	smpsNoAttack, $01
00089374 E10C                       	smpsAlterNote       $0C
00089376 E701                       	dc.b	smpsNoAttack, $01
00089378 E108                       	smpsAlterNote       $08
0008937A E701                       	dc.b	smpsNoAttack, $01
0008937C E105                       	smpsAlterNote       $05
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E101                       	smpsAlterNote       $01
00089382 E701                       	dc.b	smpsNoAttack, $01
00089384 E105                       	smpsAlterNote       $05
00089386 E701                       	dc.b	smpsNoAttack, $01
00089388 E10B                       	smpsAlterNote       $0B
0008938A E701                       	dc.b	smpsNoAttack, $01
0008938C E10C                       	smpsAlterNote       $0C
0008938E E701                       	dc.b	smpsNoAttack, $01
00089390 E108                       	smpsAlterNote       $08
00089392 E701                       	dc.b	smpsNoAttack, $01
00089394 E102                       	smpsAlterNote       $02
00089396 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008939E E10B                       	smpsAlterNote       $0B
000893A0 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000893A4 E10C                       	smpsAlterNote       $0C
000893A6 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000893AA E10B                       	smpsAlterNote       $0B
000893AC BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000893B2 E107                       	smpsAlterNote       $07
000893B4 BF03                       	dc.b	nD5, $03
000893B6 E108                       	smpsAlterNote       $08
000893B8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000893BC E109                       	smpsAlterNote       $09
000893BE C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000893C4 E10B                       	smpsAlterNote       $0B
000893C6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000893CA E107                       	smpsAlterNote       $07
000893CC BF02 8001                  	dc.b	nD5, $02, nRst, $01
000893D0 E106                       	smpsAlterNote       $06
000893D2 C90D                       	dc.b	nC6, $0D
000893D4 E103                       	smpsAlterNote       $03
000893D6 E701                       	dc.b	smpsNoAttack, $01
000893D8 E1FF                       	smpsAlterNote       $FF
000893DA E701                       	dc.b	smpsNoAttack, $01
000893DC E103                       	smpsAlterNote       $03
000893DE E701                       	dc.b	smpsNoAttack, $01
000893E0 E109                       	smpsAlterNote       $09
000893E2 E701                       	dc.b	smpsNoAttack, $01
000893E4 E10A                       	smpsAlterNote       $0A
000893E6 E701                       	dc.b	smpsNoAttack, $01
000893E8 E106                       	smpsAlterNote       $06
000893EA E701                       	dc.b	smpsNoAttack, $01
000893EC E100                       	smpsAlterNote       $00
000893EE E701                       	dc.b	smpsNoAttack, $01
000893F0 E10C                       	smpsAlterNote       $0C
000893F2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000893F6 E10B                       	smpsAlterNote       $0B
000893F8 C603                       	dc.b	nA5, $03
000893FA E109                       	smpsAlterNote       $09
000893FC C403 8001                  	dc.b	nG5, $03, nRst, $01
00089400 E10B                       	smpsAlterNote       $0B
00089402 C60D                       	dc.b	nA5, $0D
00089404 E105                       	smpsAlterNote       $05
00089406 E701                       	dc.b	smpsNoAttack, $01
00089408 E104                       	smpsAlterNote       $04
0008940A E701                       	dc.b	smpsNoAttack, $01
0008940C E108                       	smpsAlterNote       $08
0008940E E701                       	dc.b	smpsNoAttack, $01
00089410 E10E                       	smpsAlterNote       $0E
00089412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089416 E10B                       	smpsAlterNote       $0B
00089418 E701                       	dc.b	smpsNoAttack, $01
0008941A E105                       	smpsAlterNote       $05
0008941C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089420 E10B                       	smpsAlterNote       $0B
00089422 E701                       	dc.b	smpsNoAttack, $01
00089424 E10E                       	smpsAlterNote       $0E
00089426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008942A E108                       	smpsAlterNote       $08
0008942C E701                       	dc.b	smpsNoAttack, $01
0008942E E104                       	smpsAlterNote       $04
00089430 E701                       	dc.b	smpsNoAttack, $01
00089432 E105                       	smpsAlterNote       $05
00089434 E701                       	dc.b	smpsNoAttack, $01
00089436 E10B                       	smpsAlterNote       $0B
00089438 E701                       	dc.b	smpsNoAttack, $01
0008943A E10F                       	smpsAlterNote       $0F
0008943C E701                       	dc.b	smpsNoAttack, $01
0008943E E10B                       	smpsAlterNote       $0B
00089440 E701                       	dc.b	smpsNoAttack, $01
00089442 E108                       	smpsAlterNote       $08
00089444 E701                       	dc.b	smpsNoAttack, $01
00089446 E104                       	smpsAlterNote       $04
00089448 E701                       	dc.b	smpsNoAttack, $01
0008944A E108                       	smpsAlterNote       $08
0008944C E701                       	dc.b	smpsNoAttack, $01
0008944E E10E                       	smpsAlterNote       $0E
00089450 E701                       	dc.b	smpsNoAttack, $01
00089452 E10F                       	smpsAlterNote       $0F
00089454 E701                       	dc.b	smpsNoAttack, $01
00089456 E10B                       	smpsAlterNote       $0B
00089458 E701                       	dc.b	smpsNoAttack, $01
0008945A E105                       	smpsAlterNote       $05
0008945C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089460 E108                       	smpsAlterNote       $08
00089462 E701                       	dc.b	smpsNoAttack, $01
00089464 E10E                       	smpsAlterNote       $0E
00089466 E701                       	dc.b	smpsNoAttack, $01
00089468 E10F                       	smpsAlterNote       $0F
0008946A 800F                       	dc.b	nRst, $0F
0008946C E107                       	smpsAlterNote       $07
0008946E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089472 E108                       	smpsAlterNote       $08
00089474 C103                       	dc.b	nE5, $03
00089476 E109                       	smpsAlterNote       $09
00089478 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008947E E10B                       	smpsAlterNote       $0B
00089480 C607                       	dc.b	nA5, $07
00089482 E107                       	smpsAlterNote       $07
00089484 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089488 E106                       	smpsAlterNote       $06
0008948A C90D                       	dc.b	nC6, $0D
0008948C E107                       	smpsAlterNote       $07
0008948E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089492 E10C                       	smpsAlterNote       $0C
00089494 C704                       	dc.b	nBb5, $04
00089496 E10B                       	smpsAlterNote       $0B
00089498 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008949C E109                       	smpsAlterNote       $09
0008949E C404                       	dc.b	nG5, $04
000894A0 E10B                       	smpsAlterNote       $0B
000894A2 C60D                       	dc.b	nA5, $0D
000894A4 E108                       	smpsAlterNote       $08
000894A6 E701                       	dc.b	smpsNoAttack, $01
000894A8 E105                       	smpsAlterNote       $05
000894AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894AE E10B                       	smpsAlterNote       $0B
000894B0 E701                       	dc.b	smpsNoAttack, $01
000894B2 E10F                       	smpsAlterNote       $0F
000894B4 E701                       	dc.b	smpsNoAttack, $01
000894B6 E10E                       	smpsAlterNote       $0E
000894B8 E701                       	dc.b	smpsNoAttack, $01
000894BA E108                       	smpsAlterNote       $08
000894BC E701                       	dc.b	smpsNoAttack, $01
000894BE E104                       	smpsAlterNote       $04
000894C0 E701                       	dc.b	smpsNoAttack, $01
000894C2 E108                       	smpsAlterNote       $08
000894C4 E701                       	dc.b	smpsNoAttack, $01
000894C6 E10B                       	smpsAlterNote       $0B
000894C8 E701                       	dc.b	smpsNoAttack, $01
000894CA E10F                       	smpsAlterNote       $0F
000894CC E701                       	dc.b	smpsNoAttack, $01
000894CE E10B                       	smpsAlterNote       $0B
000894D0 E701                       	dc.b	smpsNoAttack, $01
000894D2 E105                       	smpsAlterNote       $05
000894D4 E701                       	dc.b	smpsNoAttack, $01
000894D6 E104                       	smpsAlterNote       $04
000894D8 E701                       	dc.b	smpsNoAttack, $01
000894DA E108                       	smpsAlterNote       $08
000894DC E701                       	dc.b	smpsNoAttack, $01
000894DE E10E                       	smpsAlterNote       $0E
000894E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894E4 E10B                       	smpsAlterNote       $0B
000894E6 E701                       	dc.b	smpsNoAttack, $01
000894E8 E105                       	smpsAlterNote       $05
000894EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894EE E10B                       	smpsAlterNote       $0B
000894F0 E701                       	dc.b	smpsNoAttack, $01
000894F2 E10E                       	smpsAlterNote       $0E
000894F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894F8 E108                       	smpsAlterNote       $08
000894FA E701                       	dc.b	smpsNoAttack, $01
000894FC E105                       	smpsAlterNote       $05
000894FE 8001                       	dc.b	nRst, $01
00089500 E109                       	smpsAlterNote       $09
00089502 C401 8001                  	dc.b	nG5, $01, nRst, $01
00089506 E10B                       	smpsAlterNote       $0B
00089508 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00089510 E109                       	smpsAlterNote       $09
00089512 C404                       	dc.b	nG5, $04
00089514 E10B                       	smpsAlterNote       $0B
00089516 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008951A E107                       	smpsAlterNote       $07
0008951C BF0D                       	dc.b	nD5, $0D
0008951E E101                       	smpsAlterNote       $01
00089520 E701                       	dc.b	smpsNoAttack, $01
00089522 E100                       	smpsAlterNote       $00
00089524 E701                       	dc.b	smpsNoAttack, $01
00089526 E104                       	smpsAlterNote       $04
00089528 E701                       	dc.b	smpsNoAttack, $01
0008952A E10A                       	smpsAlterNote       $0A
0008952C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089530 E107                       	smpsAlterNote       $07
00089532 E701                       	dc.b	smpsNoAttack, $01
00089534 E101                       	smpsAlterNote       $01
00089536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008953A E107                       	smpsAlterNote       $07
0008953C E701                       	dc.b	smpsNoAttack, $01
0008953E E10A                       	smpsAlterNote       $0A
00089540 E701                       	dc.b	smpsNoAttack, $01
00089542 E10B                       	smpsAlterNote       $0B
00089544 8001                       	dc.b	nRst, $01
00089546 E108                       	smpsAlterNote       $08
00089548 8001                       	dc.b	nRst, $01
0008954A E109                       	smpsAlterNote       $09
0008954C 8001 C401                  	dc.b	nRst, $01, nG5, $01
00089550 E10B                       	smpsAlterNote       $0B
00089552 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008955A E108                       	smpsAlterNote       $08
0008955C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089560 E109                       	smpsAlterNote       $09
00089562 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089566 E108                       	smpsAlterNote       $08
00089568 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008956C E106                       	smpsAlterNote       $06
0008956E C903                       	dc.b	nC6, $03
00089570 E109                       	smpsAlterNote       $09
00089572 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089576 E10C                       	smpsAlterNote       $0C
00089578 C70D                       	dc.b	nBb5, $0D
0008957A E109                       	smpsAlterNote       $09
0008957C E701                       	dc.b	smpsNoAttack, $01
0008957E E105                       	smpsAlterNote       $05
00089580 E701                       	dc.b	smpsNoAttack, $01
00089582 E109                       	smpsAlterNote       $09
00089584 E701                       	dc.b	smpsNoAttack, $01
00089586 E10F                       	smpsAlterNote       $0F
00089588 E701                       	dc.b	smpsNoAttack, $01
0008958A E110                       	smpsAlterNote       $10
0008958C E701                       	dc.b	smpsNoAttack, $01
0008958E E10C                       	smpsAlterNote       $0C
00089590 E701                       	dc.b	smpsNoAttack, $01
00089592 E106                       	smpsAlterNote       $06
00089594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089598 E109                       	smpsAlterNote       $09
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C E10F                       	smpsAlterNote       $0F
0008959E E701                       	dc.b	smpsNoAttack, $01
000895A0 E110                       	smpsAlterNote       $10
000895A2 8001                       	dc.b	nRst, $01
000895A4 E10B                       	smpsAlterNote       $0B
000895A6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000895AA E109                       	smpsAlterNote       $09
000895AC C40D                       	dc.b	nG5, $0D
000895AE E103                       	smpsAlterNote       $03
000895B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895B4 E106                       	smpsAlterNote       $06
000895B6 E701                       	dc.b	smpsNoAttack, $01
000895B8 E10C                       	smpsAlterNote       $0C
000895BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895BE E106                       	smpsAlterNote       $06
000895C0 E701                       	dc.b	smpsNoAttack, $01
000895C2 E103                       	smpsAlterNote       $03
000895C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895C8 E109                       	smpsAlterNote       $09
000895CA E701                       	dc.b	smpsNoAttack, $01
000895CC E10D                       	smpsAlterNote       $0D
000895CE E701                       	dc.b	smpsNoAttack, $01
000895D0 E10C                       	smpsAlterNote       $0C
000895D2 E701                       	dc.b	smpsNoAttack, $01
000895D4 E106                       	smpsAlterNote       $06
000895D6 E701                       	dc.b	smpsNoAttack, $01
000895D8 E102                       	smpsAlterNote       $02
000895DA E701                       	dc.b	smpsNoAttack, $01
000895DC E103                       	smpsAlterNote       $03
000895DE 8001                       	dc.b	nRst, $01
000895E0 E10B                       	smpsAlterNote       $0B
000895E2 C60D                       	dc.b	nA5, $0D
000895E4 E108                       	smpsAlterNote       $08
000895E6 E701                       	dc.b	smpsNoAttack, $01
000895E8 E104                       	smpsAlterNote       $04
000895EA E701                       	dc.b	smpsNoAttack, $01
000895EC E108                       	smpsAlterNote       $08
000895EE E701                       	dc.b	smpsNoAttack, $01
000895F0 E10B                       	smpsAlterNote       $0B
000895F2 E701                       	dc.b	smpsNoAttack, $01
000895F4 E10F                       	smpsAlterNote       $0F
000895F6 E701                       	dc.b	smpsNoAttack, $01
000895F8 E10B                       	smpsAlterNote       $0B
000895FA E701                       	dc.b	smpsNoAttack, $01
000895FC E105                       	smpsAlterNote       $05
000895FE E701                       	dc.b	smpsNoAttack, $01
00089600 E104                       	smpsAlterNote       $04
00089602 E701                       	dc.b	smpsNoAttack, $01
00089604 E108                       	smpsAlterNote       $08
00089606 E701                       	dc.b	smpsNoAttack, $01
00089608 E10E                       	smpsAlterNote       $0E
0008960A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008960E E10B                       	smpsAlterNote       $0B
00089610 E701                       	dc.b	smpsNoAttack, $01
00089612 E105                       	smpsAlterNote       $05
00089614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089618 E10C                       	smpsAlterNote       $0C
0008961A C70E                       	dc.b	nBb5, $0E
0008961C E106                       	smpsAlterNote       $06
0008961E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089622 E10C                       	smpsAlterNote       $0C
00089624 E701                       	dc.b	smpsNoAttack, $01
00089626 E10F                       	smpsAlterNote       $0F
00089628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008962C E109                       	smpsAlterNote       $09
0008962E E701                       	dc.b	smpsNoAttack, $01
00089630 E105                       	smpsAlterNote       $05
00089632 E701                       	dc.b	smpsNoAttack, $01
00089634 E106                       	smpsAlterNote       $06
00089636 E701                       	dc.b	smpsNoAttack, $01
00089638 E10C                       	smpsAlterNote       $0C
0008963A E701                       	dc.b	smpsNoAttack, $01
0008963C E110                       	smpsAlterNote       $10
0008963E E701                       	dc.b	smpsNoAttack, $01
00089640 E10C                       	smpsAlterNote       $0C
00089642 E701                       	dc.b	smpsNoAttack, $01
00089644 E109                       	smpsAlterNote       $09
00089646 E701                       	dc.b	smpsNoAttack, $01
00089648 E105                       	smpsAlterNote       $05
0008964A E701                       	dc.b	smpsNoAttack, $01
0008964C E106                       	smpsAlterNote       $06
0008964E 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00089652 E107                       	smpsAlterNote       $07
00089654 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00089659 E108                       	smpsAlterNote       $08
0008965B CD0D                       	dc.b	nE6, $0D
0008965D E107                       	smpsAlterNote       $07
0008965F CB0D                       	dc.b	nD6, $0D
00089661 E104                       	smpsAlterNote       $04
00089663 E701                       	dc.b	smpsNoAttack, $01
00089665 E100                       	smpsAlterNote       $00
00089667 E701                       	dc.b	smpsNoAttack, $01
00089669 E101                       	smpsAlterNote       $01
0008966B E701                       	dc.b	smpsNoAttack, $01
0008966D E107                       	smpsAlterNote       $07
0008966F E701                       	dc.b	smpsNoAttack, $01
00089671 E10B                       	smpsAlterNote       $0B
00089673 E701                       	dc.b	smpsNoAttack, $01
00089675 E107                       	smpsAlterNote       $07
00089677 E701                       	dc.b	smpsNoAttack, $01
00089679 E104                       	smpsAlterNote       $04
0008967B E701                       	dc.b	smpsNoAttack, $01
0008967D E100                       	smpsAlterNote       $00
0008967F E701                       	dc.b	smpsNoAttack, $01
00089681 E104                       	smpsAlterNote       $04
00089683 E701                       	dc.b	smpsNoAttack, $01
00089685 E10A                       	smpsAlterNote       $0A
00089687 E701                       	dc.b	smpsNoAttack, $01
00089689 E10B                       	smpsAlterNote       $0B
0008968B E701                       	dc.b	smpsNoAttack, $01
0008968D E108                       	smpsAlterNote       $08
0008968F CC0D                       	dc.b	nEb6, $0D
00089691 E105                       	smpsAlterNote       $05
00089693 E701                       	dc.b	smpsNoAttack, $01
00089695 E101                       	smpsAlterNote       $01
00089697 E701                       	dc.b	smpsNoAttack, $01
00089699 E102                       	smpsAlterNote       $02
0008969B E701                       	dc.b	smpsNoAttack, $01
0008969D E108                       	smpsAlterNote       $08
0008969F E701                       	dc.b	smpsNoAttack, $01
000896A1 E106                       	smpsAlterNote       $06
000896A3 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000896AF 8001                       	dc.b	nRst, $01
000896B1 E107                       	smpsAlterNote       $07
000896B3 CB0D                       	dc.b	nD6, $0D
000896B5 E104                       	smpsAlterNote       $04
000896B7 E701                       	dc.b	smpsNoAttack, $01
000896B9 E100                       	smpsAlterNote       $00
000896BB E701                       	dc.b	smpsNoAttack, $01
000896BD E104                       	smpsAlterNote       $04
000896BF E701                       	dc.b	smpsNoAttack, $01
000896C1 E107                       	smpsAlterNote       $07
000896C3 E701                       	dc.b	smpsNoAttack, $01
000896C5 E10B                       	smpsAlterNote       $0B
000896C7 E701                       	dc.b	smpsNoAttack, $01
000896C9 E107                       	smpsAlterNote       $07
000896CB E701                       	dc.b	smpsNoAttack, $01
000896CD E101                       	smpsAlterNote       $01
000896CF E701                       	dc.b	smpsNoAttack, $01
000896D1 E100                       	smpsAlterNote       $00
000896D3 E701                       	dc.b	smpsNoAttack, $01
000896D5 E104                       	smpsAlterNote       $04
000896D7 E701                       	dc.b	smpsNoAttack, $01
000896D9 E10A                       	smpsAlterNote       $0A
000896DB E701                       	dc.b	smpsNoAttack, $01
000896DD E10B                       	smpsAlterNote       $0B
000896DF 8001                       	dc.b	nRst, $01
000896E1 E109                       	smpsAlterNote       $09
000896E3 CE0A                       	dc.b	nF6, $0A
000896E5 E108                       	smpsAlterNote       $08
000896E7 CC07                       	dc.b	nEb6, $07
000896E9 E106                       	smpsAlterNote       $06
000896EB C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000896F7 E107                       	smpsAlterNote       $07
000896F9 CB0D                       	dc.b	nD6, $0D
000896FB E101                       	smpsAlterNote       $01
000896FD E701                       	dc.b	smpsNoAttack, $01
000896FF E100                       	smpsAlterNote       $00
00089701 E701                       	dc.b	smpsNoAttack, $01
00089703 E104                       	smpsAlterNote       $04
00089705 E701                       	dc.b	smpsNoAttack, $01
00089707 E10A                       	smpsAlterNote       $0A
00089709 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008970D E107                       	smpsAlterNote       $07
0008970F E701                       	dc.b	smpsNoAttack, $01
00089711 E101                       	smpsAlterNote       $01
00089713 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089717 E107                       	smpsAlterNote       $07
00089719 E701                       	dc.b	smpsNoAttack, $01
0008971B E10A                       	smpsAlterNote       $0A
0008971D E701                       	dc.b	smpsNoAttack, $01
0008971F E10B                       	smpsAlterNote       $0B
00089721 8001                       	dc.b	nRst, $01
00089723 E108                       	smpsAlterNote       $08
00089725 CC0D                       	dc.b	nEb6, $0D
00089727 E102                       	smpsAlterNote       $02
00089729 E701                       	dc.b	smpsNoAttack, $01
0008972B E101                       	smpsAlterNote       $01
0008972D E701                       	dc.b	smpsNoAttack, $01
0008972F E105                       	smpsAlterNote       $05
00089731 E701                       	dc.b	smpsNoAttack, $01
00089733 E108                       	smpsAlterNote       $08
00089735 8001                       	dc.b	nRst, $01
00089737 E106                       	smpsAlterNote       $06
00089739 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00089745 8001                       	dc.b	nRst, $01
00089747 E107                       	smpsAlterNote       $07
00089749 CB0D                       	dc.b	nD6, $0D
0008974B E101                       	smpsAlterNote       $01
0008974D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089751 E104                       	smpsAlterNote       $04
00089753 E701                       	dc.b	smpsNoAttack, $01
00089755 E10A                       	smpsAlterNote       $0A
00089757 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008975B E104                       	smpsAlterNote       $04
0008975D E701                       	dc.b	smpsNoAttack, $01
0008975F E101                       	smpsAlterNote       $01
00089761 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089765 E107                       	smpsAlterNote       $07
00089767 E701                       	dc.b	smpsNoAttack, $01
00089769 E10B                       	smpsAlterNote       $0B
0008976B E701                       	dc.b	smpsNoAttack, $01
0008976D E10A                       	smpsAlterNote       $0A
0008976F E701                       	dc.b	smpsNoAttack, $01
00089771 E104                       	smpsAlterNote       $04
00089773 E701                       	dc.b	smpsNoAttack, $01
00089775 E100                       	smpsAlterNote       $00
00089777 E701                       	dc.b	smpsNoAttack, $01
00089779 E101                       	smpsAlterNote       $01
0008977B 801C                       	dc.b	nRst, $1C
0008977F E107                       	smpsAlterNote       $07
00089781 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089785 E603                       	smpsAlterVol        $03
00089787 F6F1 AD                    	smpsJump            music84_Jump03
0008978A                            
0008978A                            ; FM3 Data
0008978A                            music84_FM3:
0008978A E0C0                       	smpsPan             panCenter, $00
0008978E E109                       	smpsAlterNote       $09
00089790 C203 8007                  	dc.b	nF5, $03, nRst, $07
00089794 E108                       	smpsAlterNote       $08
00089796 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008979A E10B                       	smpsAlterNote       $0B
0008979C BA03 8006                  	dc.b	nA4, $03, nRst, $06
000897A2 E040                       	smpsPan             panRight, $00
000897A4 E110                       	smpsAlterNote       $10
000897A6 E6F9                       	smpsAlterVol        $F9
000897A8 C702 8001                  	dc.b	nBb5, $02, nRst, $01
000897AC E10F                       	smpsAlterNote       $0F
000897AE C603                       	dc.b	nA5, $03
000897B0 E10D                       	smpsAlterNote       $0D
000897B2 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000897B8 E10C                       	smpsAlterNote       $0C
000897BA C103 8001                  	dc.b	nE5, $03, nRst, $01
000897BE E10A                       	smpsAlterNote       $0A
000897C0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000897C4 E10F                       	smpsAlterNote       $0F
000897C6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000897CA E0C0                       	smpsPan             panCenter, $00
000897CE E109                       	smpsAlterNote       $09
000897D0 E609                       	smpsAlterVol        $09
000897D2 B603                       	dc.b	nF4, $03
000897D4                            
000897D4                            music84_Jump02:
000897D4 E70A                       	dc.b	smpsNoAttack, $0A
000897D6 E103                       	smpsAlterNote       $03
000897D8 E701                       	dc.b	smpsNoAttack, $01
000897DA E102                       	smpsAlterNote       $02
000897DC E701                       	dc.b	smpsNoAttack, $01
000897DE E106                       	smpsAlterNote       $06
000897E0 E701                       	dc.b	smpsNoAttack, $01
000897E2 E10C                       	smpsAlterNote       $0C
000897E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897E8 E109                       	smpsAlterNote       $09
000897EA E701                       	dc.b	smpsNoAttack, $01
000897EC E103                       	smpsAlterNote       $03
000897EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897F2 E109                       	smpsAlterNote       $09
000897F4 E701                       	dc.b	smpsNoAttack, $01
000897F6 E10C                       	smpsAlterNote       $0C
000897F8 E701                       	dc.b	smpsNoAttack, $01
000897FA E10D                       	smpsAlterNote       $0D
000897FC 8001                       	dc.b	nRst, $01
000897FE E109                       	smpsAlterNote       $09
00089800 B80D                       	dc.b	nG4, $0D
00089802 E103                       	smpsAlterNote       $03
00089804 E701                       	dc.b	smpsNoAttack, $01
00089806 E102                       	smpsAlterNote       $02
00089808 E701                       	dc.b	smpsNoAttack, $01
0008980A E106                       	smpsAlterNote       $06
0008980C E701                       	dc.b	smpsNoAttack, $01
0008980E E10C                       	smpsAlterNote       $0C
00089810 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089814 E109                       	smpsAlterNote       $09
00089816 E701                       	dc.b	smpsNoAttack, $01
00089818 E103                       	smpsAlterNote       $03
0008981A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008981E E109                       	smpsAlterNote       $09
00089820 E701                       	dc.b	smpsNoAttack, $01
00089822 E10C                       	smpsAlterNote       $0C
00089824 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089828 E106                       	smpsAlterNote       $06
0008982A E701                       	dc.b	smpsNoAttack, $01
0008982C E102                       	smpsAlterNote       $02
0008982E E701                       	dc.b	smpsNoAttack, $01
00089830 E103                       	smpsAlterNote       $03
00089832 E701                       	dc.b	smpsNoAttack, $01
00089834 E109                       	smpsAlterNote       $09
00089836 E701                       	dc.b	smpsNoAttack, $01
00089838 E10D                       	smpsAlterNote       $0D
0008983A E701                       	dc.b	smpsNoAttack, $01
0008983C E109                       	smpsAlterNote       $09
0008983E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089842 E10B                       	smpsAlterNote       $0B
00089844 BA0D                       	dc.b	nA4, $0D
00089846 E105                       	smpsAlterNote       $05
00089848 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008984C E108                       	smpsAlterNote       $08
0008984E E701                       	dc.b	smpsNoAttack, $01
00089850 E10E                       	smpsAlterNote       $0E
00089852 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089856 E108                       	smpsAlterNote       $08
00089858 E701                       	dc.b	smpsNoAttack, $01
0008985A E104                       	smpsAlterNote       $04
0008985C E701                       	dc.b	smpsNoAttack, $01
0008985E E105                       	smpsAlterNote       $05
00089860 E701                       	dc.b	smpsNoAttack, $01
00089862 E10B                       	smpsAlterNote       $0B
00089864 E701                       	dc.b	smpsNoAttack, $01
00089866 E10F                       	smpsAlterNote       $0F
00089868 E701                       	dc.b	smpsNoAttack, $01
0008986A E10B                       	smpsAlterNote       $0B
0008986C E701                       	dc.b	smpsNoAttack, $01
0008986E E108                       	smpsAlterNote       $08
00089870 E701                       	dc.b	smpsNoAttack, $01
00089872 E104                       	smpsAlterNote       $04
00089874 E701                       	dc.b	smpsNoAttack, $01
00089876 E108                       	smpsAlterNote       $08
00089878 E701                       	dc.b	smpsNoAttack, $01
0008987A E10E                       	smpsAlterNote       $0E
0008987C E701                       	dc.b	smpsNoAttack, $01
0008987E E10F                       	smpsAlterNote       $0F
00089880 E701                       	dc.b	smpsNoAttack, $01
00089882 E10B                       	smpsAlterNote       $0B
00089884 E701                       	dc.b	smpsNoAttack, $01
00089886 E105                       	smpsAlterNote       $05
00089888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008988C E108                       	smpsAlterNote       $08
0008988E E701                       	dc.b	smpsNoAttack, $01
00089890 E10E                       	smpsAlterNote       $0E
00089892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089896 E108                       	smpsAlterNote       $08
00089898 E701                       	dc.b	smpsNoAttack, $01
0008989A E105                       	smpsAlterNote       $05
0008989C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A0 E10B                       	smpsAlterNote       $0B
000898A2 E701                       	dc.b	smpsNoAttack, $01
000898A4 E10F                       	smpsAlterNote       $0F
000898A6 E701                       	dc.b	smpsNoAttack, $01
000898A8 E10E                       	smpsAlterNote       $0E
000898AA E701                       	dc.b	smpsNoAttack, $01
000898AC E108                       	smpsAlterNote       $08
000898AE E701                       	dc.b	smpsNoAttack, $01
000898B0 E104                       	smpsAlterNote       $04
000898B2 E701                       	dc.b	smpsNoAttack, $01
000898B4 E105                       	smpsAlterNote       $05
000898B6 8001                       	dc.b	nRst, $01
000898B8 E108                       	smpsAlterNote       $08
000898BA B50A                       	dc.b	nE4, $0A
000898BC E109                       	smpsAlterNote       $09
000898BE B60D                       	dc.b	nF4, $0D
000898C0 E106                       	smpsAlterNote       $06
000898C2 E701                       	dc.b	smpsNoAttack, $01
000898C4 E103                       	smpsAlterNote       $03
000898C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898CA E109                       	smpsAlterNote       $09
000898CC E701                       	dc.b	smpsNoAttack, $01
000898CE E10D                       	smpsAlterNote       $0D
000898D0 E701                       	dc.b	smpsNoAttack, $01
000898D2 E10C                       	smpsAlterNote       $0C
000898D4 E701                       	dc.b	smpsNoAttack, $01
000898D6 E106                       	smpsAlterNote       $06
000898D8 E701                       	dc.b	smpsNoAttack, $01
000898DA E102                       	smpsAlterNote       $02
000898DC E701                       	dc.b	smpsNoAttack, $01
000898DE E106                       	smpsAlterNote       $06
000898E0 E701                       	dc.b	smpsNoAttack, $01
000898E2 E109                       	smpsAlterNote       $09
000898E4 E701                       	dc.b	smpsNoAttack, $01
000898E6 E10D                       	smpsAlterNote       $0D
000898E8 E701                       	dc.b	smpsNoAttack, $01
000898EA E109                       	smpsAlterNote       $09
000898EC B80D                       	dc.b	nG4, $0D
000898EE E106                       	smpsAlterNote       $06
000898F0 E701                       	dc.b	smpsNoAttack, $01
000898F2 E103                       	smpsAlterNote       $03
000898F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F8 E109                       	smpsAlterNote       $09
000898FA E701                       	dc.b	smpsNoAttack, $01
000898FC E10D                       	smpsAlterNote       $0D
000898FE E701                       	dc.b	smpsNoAttack, $01
00089900 E10C                       	smpsAlterNote       $0C
00089902 E701                       	dc.b	smpsNoAttack, $01
00089904 E106                       	smpsAlterNote       $06
00089906 E701                       	dc.b	smpsNoAttack, $01
00089908 E102                       	smpsAlterNote       $02
0008990A E701                       	dc.b	smpsNoAttack, $01
0008990C E106                       	smpsAlterNote       $06
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E109                       	smpsAlterNote       $09
00089912 E701                       	dc.b	smpsNoAttack, $01
00089914 E10D                       	smpsAlterNote       $0D
00089916 E701                       	dc.b	smpsNoAttack, $01
00089918 E109                       	smpsAlterNote       $09
0008991A E701                       	dc.b	smpsNoAttack, $01
0008991C E103                       	smpsAlterNote       $03
0008991E E701                       	dc.b	smpsNoAttack, $01
00089920 E102                       	smpsAlterNote       $02
00089922 E701                       	dc.b	smpsNoAttack, $01
00089924 E106                       	smpsAlterNote       $06
00089926 E701                       	dc.b	smpsNoAttack, $01
00089928 E10C                       	smpsAlterNote       $0C
0008992A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008992E E109                       	smpsAlterNote       $09
00089930 E701                       	dc.b	smpsNoAttack, $01
00089932 E10B                       	smpsAlterNote       $0B
00089934 BA0D                       	dc.b	nA4, $0D
00089936 E108                       	smpsAlterNote       $08
00089938 E701                       	dc.b	smpsNoAttack, $01
0008993A E104                       	smpsAlterNote       $04
0008993C E701                       	dc.b	smpsNoAttack, $01
0008993E E108                       	smpsAlterNote       $08
00089940 E701                       	dc.b	smpsNoAttack, $01
00089942 E10B                       	smpsAlterNote       $0B
00089944 E701                       	dc.b	smpsNoAttack, $01
00089946 E10F                       	smpsAlterNote       $0F
00089948 E701                       	dc.b	smpsNoAttack, $01
0008994A E10B                       	smpsAlterNote       $0B
0008994C E701                       	dc.b	smpsNoAttack, $01
0008994E E105                       	smpsAlterNote       $05
00089950 E701                       	dc.b	smpsNoAttack, $01
00089952 E104                       	smpsAlterNote       $04
00089954 E701                       	dc.b	smpsNoAttack, $01
00089956 E108                       	smpsAlterNote       $08
00089958 E701                       	dc.b	smpsNoAttack, $01
0008995A E10E                       	smpsAlterNote       $0E
0008995C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089960 E10B                       	smpsAlterNote       $0B
00089962 E701                       	dc.b	smpsNoAttack, $01
00089964 E105                       	smpsAlterNote       $05
00089966 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008996A E10B                       	smpsAlterNote       $0B
0008996C E701                       	dc.b	smpsNoAttack, $01
0008996E E10E                       	smpsAlterNote       $0E
00089970 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089974 E108                       	smpsAlterNote       $08
00089976 E701                       	dc.b	smpsNoAttack, $01
00089978 E104                       	smpsAlterNote       $04
0008997A E701                       	dc.b	smpsNoAttack, $01
0008997C E105                       	smpsAlterNote       $05
0008997E E701                       	dc.b	smpsNoAttack, $01
00089980 E10B                       	smpsAlterNote       $0B
00089982 E701                       	dc.b	smpsNoAttack, $01
00089984 E10F                       	smpsAlterNote       $0F
00089986 E701                       	dc.b	smpsNoAttack, $01
00089988 E10B                       	smpsAlterNote       $0B
0008998A E701                       	dc.b	smpsNoAttack, $01
0008998C E108                       	smpsAlterNote       $08
0008998E E701                       	dc.b	smpsNoAttack, $01
00089990 E105                       	smpsAlterNote       $05
00089992 8001                       	dc.b	nRst, $01
00089994 E109                       	smpsAlterNote       $09
00089996 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008999A E108                       	smpsAlterNote       $08
0008999C B506 8001                  	dc.b	nE4, $06, nRst, $01
000899A0 E107                       	smpsAlterNote       $07
000899A2 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000899A6 E108                       	smpsAlterNote       $08
000899A8 B502 8001                  	dc.b	nE4, $02, nRst, $01
000899AC E109                       	smpsAlterNote       $09
000899AE B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000899B4 E10B                       	smpsAlterNote       $0B
000899B6 BA0D                       	dc.b	nA4, $0D
000899B8 E108                       	smpsAlterNote       $08
000899BA E701                       	dc.b	smpsNoAttack, $01
000899BC E104                       	smpsAlterNote       $04
000899BE E701                       	dc.b	smpsNoAttack, $01
000899C0 E108                       	smpsAlterNote       $08
000899C2 E701                       	dc.b	smpsNoAttack, $01
000899C4 E10E                       	smpsAlterNote       $0E
000899C6 E701                       	dc.b	smpsNoAttack, $01
000899C8 E10F                       	smpsAlterNote       $0F
000899CA E701                       	dc.b	smpsNoAttack, $01
000899CC E10B                       	smpsAlterNote       $0B
000899CE E701                       	dc.b	smpsNoAttack, $01
000899D0 E105                       	smpsAlterNote       $05
000899D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899D6 E108                       	smpsAlterNote       $08
000899D8 E701                       	dc.b	smpsNoAttack, $01
000899DA E10E                       	smpsAlterNote       $0E
000899DC E701                       	dc.b	smpsNoAttack, $01
000899DE E10F                       	smpsAlterNote       $0F
000899E0 8001                       	dc.b	nRst, $01
000899E2 E109                       	smpsAlterNote       $09
000899E4 C20D                       	dc.b	nF5, $0D
000899E6 E103                       	smpsAlterNote       $03
000899E8 E701                       	dc.b	smpsNoAttack, $01
000899EA E102                       	smpsAlterNote       $02
000899EC E701                       	dc.b	smpsNoAttack, $01
000899EE E106                       	smpsAlterNote       $06
000899F0 E701                       	dc.b	smpsNoAttack, $01
000899F2 E10C                       	smpsAlterNote       $0C
000899F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899F8 E109                       	smpsAlterNote       $09
000899FA E701                       	dc.b	smpsNoAttack, $01
000899FC E103                       	smpsAlterNote       $03
000899FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A02 E109                       	smpsAlterNote       $09
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E10C                       	smpsAlterNote       $0C
00089A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A0C E106                       	smpsAlterNote       $06
00089A0E E701                       	dc.b	smpsNoAttack, $01
00089A10 E102                       	smpsAlterNote       $02
00089A12 E701                       	dc.b	smpsNoAttack, $01
00089A14 E103                       	smpsAlterNote       $03
00089A16 E701                       	dc.b	smpsNoAttack, $01
00089A18 E109                       	smpsAlterNote       $09
00089A1A E701                       	dc.b	smpsNoAttack, $01
00089A1C E10D                       	smpsAlterNote       $0D
00089A1E E701                       	dc.b	smpsNoAttack, $01
00089A20 E109                       	smpsAlterNote       $09
00089A22 E701                       	dc.b	smpsNoAttack, $01
00089A24 E106                       	smpsAlterNote       $06
00089A26 E701                       	dc.b	smpsNoAttack, $01
00089A28 E102                       	smpsAlterNote       $02
00089A2A E701                       	dc.b	smpsNoAttack, $01
00089A2C E106                       	smpsAlterNote       $06
00089A2E E701                       	dc.b	smpsNoAttack, $01
00089A30 E10C                       	smpsAlterNote       $0C
00089A32 E701                       	dc.b	smpsNoAttack, $01
00089A34 E10D                       	smpsAlterNote       $0D
00089A36 E701                       	dc.b	smpsNoAttack, $01
00089A38 E109                       	smpsAlterNote       $09
00089A3A E701                       	dc.b	smpsNoAttack, $01
00089A3C E103                       	smpsAlterNote       $03
00089A3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A42 E106                       	smpsAlterNote       $06
00089A44 E701                       	dc.b	smpsNoAttack, $01
00089A46 E10C                       	smpsAlterNote       $0C
00089A48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A4C E106                       	smpsAlterNote       $06
00089A4E E701                       	dc.b	smpsNoAttack, $01
00089A50 E103                       	smpsAlterNote       $03
00089A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A56 E109                       	smpsAlterNote       $09
00089A58 E701                       	dc.b	smpsNoAttack, $01
00089A5A E10D                       	smpsAlterNote       $0D
00089A5C E701                       	dc.b	smpsNoAttack, $01
00089A5E E10C                       	smpsAlterNote       $0C
00089A60 E701                       	dc.b	smpsNoAttack, $01
00089A62 E106                       	smpsAlterNote       $06
00089A64 E701                       	dc.b	smpsNoAttack, $01
00089A66 E102                       	smpsAlterNote       $02
00089A68 E701                       	dc.b	smpsNoAttack, $01
00089A6A E106                       	smpsAlterNote       $06
00089A6C E701                       	dc.b	smpsNoAttack, $01
00089A6E E109                       	smpsAlterNote       $09
00089A70 E701                       	dc.b	smpsNoAttack, $01
00089A72 E10D                       	smpsAlterNote       $0D
00089A74 E701                       	dc.b	smpsNoAttack, $01
00089A76 E109                       	smpsAlterNote       $09
00089A78 E701                       	dc.b	smpsNoAttack, $01
00089A7A E103                       	smpsAlterNote       $03
00089A7C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089A80 E109                       	smpsAlterNote       $09
00089A82 C206                       	dc.b	nF5, $06
00089A84 E108                       	smpsAlterNote       $08
00089A86 C10E                       	dc.b	nE5, $0E
00089A88 E102                       	smpsAlterNote       $02
00089A8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A8E E108                       	smpsAlterNote       $08
00089A90 E701                       	dc.b	smpsNoAttack, $01
00089A92 E10B                       	smpsAlterNote       $0B
00089A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A98 E105                       	smpsAlterNote       $05
00089A9A E701                       	dc.b	smpsNoAttack, $01
00089A9C E101                       	smpsAlterNote       $01
00089A9E E701                       	dc.b	smpsNoAttack, $01
00089AA0 E102                       	smpsAlterNote       $02
00089AA2 E701                       	dc.b	smpsNoAttack, $01
00089AA4 E108                       	smpsAlterNote       $08
00089AA6 E701                       	dc.b	smpsNoAttack, $01
00089AA8 E10C                       	smpsAlterNote       $0C
00089AAA E701                       	dc.b	smpsNoAttack, $01
00089AAC E107                       	smpsAlterNote       $07
00089AAE BF0E                       	dc.b	nD5, $0E
00089AB0 E101                       	smpsAlterNote       $01
00089AB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AB6 E107                       	smpsAlterNote       $07
00089AB8 E701                       	dc.b	smpsNoAttack, $01
00089ABA E10A                       	smpsAlterNote       $0A
00089ABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AC0 E104                       	smpsAlterNote       $04
00089AC2 E701                       	dc.b	smpsNoAttack, $01
00089AC4 E100                       	smpsAlterNote       $00
00089AC6 E701                       	dc.b	smpsNoAttack, $01
00089AC8 E104                       	smpsAlterNote       $04
00089ACA E701                       	dc.b	smpsNoAttack, $01
00089ACC E107                       	smpsAlterNote       $07
00089ACE E701                       	dc.b	smpsNoAttack, $01
00089AD0 E10B                       	smpsAlterNote       $0B
00089AD2 E701                       	dc.b	smpsNoAttack, $01
00089AD4 E107                       	smpsAlterNote       $07
00089AD6 E701                       	dc.b	smpsNoAttack, $01
00089AD8 E101                       	smpsAlterNote       $01
00089ADA E701                       	dc.b	smpsNoAttack, $01
00089ADC E100                       	smpsAlterNote       $00
00089ADE E701                       	dc.b	smpsNoAttack, $01
00089AE0 E104                       	smpsAlterNote       $04
00089AE2 E701                       	dc.b	smpsNoAttack, $01
00089AE4 E10A                       	smpsAlterNote       $0A
00089AE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AEA E107                       	smpsAlterNote       $07
00089AEC E701                       	dc.b	smpsNoAttack, $01
00089AEE E101                       	smpsAlterNote       $01
00089AF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AF4 E107                       	smpsAlterNote       $07
00089AF6 E701                       	dc.b	smpsNoAttack, $01
00089AF8 E10A                       	smpsAlterNote       $0A
00089AFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AFE E104                       	smpsAlterNote       $04
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E100                       	smpsAlterNote       $00
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E101                       	smpsAlterNote       $01
00089B08 E701                       	dc.b	smpsNoAttack, $01
00089B0A E107                       	smpsAlterNote       $07
00089B0C E701                       	dc.b	smpsNoAttack, $01
00089B0E E10B                       	smpsAlterNote       $0B
00089B10 E701                       	dc.b	smpsNoAttack, $01
00089B12 E107                       	smpsAlterNote       $07
00089B14 E701                       	dc.b	smpsNoAttack, $01
00089B16 E104                       	smpsAlterNote       $04
00089B18 E701                       	dc.b	smpsNoAttack, $01
00089B1A E100                       	smpsAlterNote       $00
00089B1C E701                       	dc.b	smpsNoAttack, $01
00089B1E E104                       	smpsAlterNote       $04
00089B20 E701                       	dc.b	smpsNoAttack, $01
00089B22 E10A                       	smpsAlterNote       $0A
00089B24 E701                       	dc.b	smpsNoAttack, $01
00089B26 E10B                       	smpsAlterNote       $0B
00089B28 E701                       	dc.b	smpsNoAttack, $01
00089B2A E107                       	smpsAlterNote       $07
00089B2C E701                       	dc.b	smpsNoAttack, $01
00089B2E E101                       	smpsAlterNote       $01
00089B30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B34 E104                       	smpsAlterNote       $04
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B38 E10A                       	smpsAlterNote       $0A
00089B3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B3E E104                       	smpsAlterNote       $04
00089B40 E701                       	dc.b	smpsNoAttack, $01
00089B42 E101                       	smpsAlterNote       $01
00089B44 E701                       	dc.b	smpsNoAttack, $01
00089B48 E107                       	smpsAlterNote       $07
00089B4A E6FF                       	smpsAlterVol        $FF
00089B4C BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00089B58 8004                       	dc.b	nRst, $04
00089B5C E109                       	smpsAlterNote       $09
00089B5E E602                       	smpsAlterVol        $02
00089B60 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00089B66 E108                       	smpsAlterNote       $08
00089B68 B502 8001                  	dc.b	nE4, $02, nRst, $01
00089B6C E109                       	smpsAlterNote       $09
00089B6E B60D                       	dc.b	nF4, $0D
00089B70 E106                       	smpsAlterNote       $06
00089B72 E701                       	dc.b	smpsNoAttack, $01
00089B74 E102                       	smpsAlterNote       $02
00089B76 E701                       	dc.b	smpsNoAttack, $01
00089B78 E106                       	smpsAlterNote       $06
00089B7A E701                       	dc.b	smpsNoAttack, $01
00089B7C E109                       	smpsAlterNote       $09
00089B7E E701                       	dc.b	smpsNoAttack, $01
00089B80 E10D                       	smpsAlterNote       $0D
00089B82 E701                       	dc.b	smpsNoAttack, $01
00089B84 E109                       	smpsAlterNote       $09
00089B86 E701                       	dc.b	smpsNoAttack, $01
00089B88 E103                       	smpsAlterNote       $03
00089B8A E701                       	dc.b	smpsNoAttack, $01
00089B8C E102                       	smpsAlterNote       $02
00089B8E E701                       	dc.b	smpsNoAttack, $01
00089B90 E106                       	smpsAlterNote       $06
00089B92 E701                       	dc.b	smpsNoAttack, $01
00089B94 E10C                       	smpsAlterNote       $0C
00089B96 E701                       	dc.b	smpsNoAttack, $01
00089B98 E10D                       	smpsAlterNote       $0D
00089B9A 8001                       	dc.b	nRst, $01
00089B9C E109                       	smpsAlterNote       $09
00089B9E B80D                       	dc.b	nG4, $0D
00089BA0 E106                       	smpsAlterNote       $06
00089BA2 E701                       	dc.b	smpsNoAttack, $01
00089BA4 E102                       	smpsAlterNote       $02
00089BA6 E701                       	dc.b	smpsNoAttack, $01
00089BA8 E106                       	smpsAlterNote       $06
00089BAA E701                       	dc.b	smpsNoAttack, $01
00089BAC E10C                       	smpsAlterNote       $0C
00089BAE E701                       	dc.b	smpsNoAttack, $01
00089BB0 E10D                       	smpsAlterNote       $0D
00089BB2 E701                       	dc.b	smpsNoAttack, $01
00089BB4 E109                       	smpsAlterNote       $09
00089BB6 E701                       	dc.b	smpsNoAttack, $01
00089BB8 E103                       	smpsAlterNote       $03
00089BBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BBE E106                       	smpsAlterNote       $06
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E10C                       	smpsAlterNote       $0C
00089BC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BC8 E106                       	smpsAlterNote       $06
00089BCA E701                       	dc.b	smpsNoAttack, $01
00089BCC E103                       	smpsAlterNote       $03
00089BCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BD2 E109                       	smpsAlterNote       $09
00089BD4 E701                       	dc.b	smpsNoAttack, $01
00089BD6 E10D                       	smpsAlterNote       $0D
00089BD8 E701                       	dc.b	smpsNoAttack, $01
00089BDA E10C                       	smpsAlterNote       $0C
00089BDC E701                       	dc.b	smpsNoAttack, $01
00089BDE E109                       	smpsAlterNote       $09
00089BE0 8001                       	dc.b	nRst, $01
00089BE2 E10B                       	smpsAlterNote       $0B
00089BE4 BA03                       	dc.b	nA4, $03
00089BE6 E10C                       	smpsAlterNote       $0C
00089BE8 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00089BEC E10B                       	smpsAlterNote       $0B
00089BEE BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00089BF4 E10C                       	smpsAlterNote       $0C
00089BF6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089BFA E10B                       	smpsAlterNote       $0B
00089BFC C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089C02 E10C                       	smpsAlterNote       $0C
00089C04 D303                       	dc.b	nBb6, $03
00089C06 E10B                       	smpsAlterNote       $0B
00089C08 D20D                       	dc.b	nA6, $0D
00089C0A E108                       	smpsAlterNote       $08
00089C0C E701                       	dc.b	smpsNoAttack, $01
00089C0E E104                       	smpsAlterNote       $04
00089C10 E701                       	dc.b	smpsNoAttack, $01
00089C12 E105                       	smpsAlterNote       $05
00089C14 E701                       	dc.b	smpsNoAttack, $01
00089C16 E10B                       	smpsAlterNote       $0B
00089C18 E701                       	dc.b	smpsNoAttack, $01
00089C1A E10F                       	smpsAlterNote       $0F
00089C1C E701                       	dc.b	smpsNoAttack, $01
00089C1E E10B                       	smpsAlterNote       $0B
00089C20 E701                       	dc.b	smpsNoAttack, $01
00089C22 E108                       	smpsAlterNote       $08
00089C24 E701                       	dc.b	smpsNoAttack, $01
00089C26 E104                       	smpsAlterNote       $04
00089C28 E701                       	dc.b	smpsNoAttack, $01
00089C2A E108                       	smpsAlterNote       $08
00089C2C E701                       	dc.b	smpsNoAttack, $01
00089C2E E10E                       	smpsAlterNote       $0E
00089C30 E701                       	dc.b	smpsNoAttack, $01
00089C32 E10F                       	smpsAlterNote       $0F
00089C34 E701                       	dc.b	smpsNoAttack, $01
00089C36 E10B                       	smpsAlterNote       $0B
00089C38 E701                       	dc.b	smpsNoAttack, $01
00089C3A E105                       	smpsAlterNote       $05
00089C3C E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089C42 E109                       	smpsAlterNote       $09
00089C44 CE07                       	dc.b	nF6, $07
00089C46 E108                       	smpsAlterNote       $08
00089C48 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089C4C E109                       	smpsAlterNote       $09
00089C4E CE03 8001                  	dc.b	nF6, $03, nRst, $01
00089C52 E108                       	smpsAlterNote       $08
00089C54 CC0D                       	dc.b	nEb6, $0D
00089C56 E102                       	smpsAlterNote       $02
00089C58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C5C E108                       	smpsAlterNote       $08
00089C5E E701                       	dc.b	smpsNoAttack, $01
00089C60 E10B                       	smpsAlterNote       $0B
00089C62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C66 E105                       	smpsAlterNote       $05
00089C68 E701                       	dc.b	smpsNoAttack, $01
00089C6A E101                       	smpsAlterNote       $01
00089C6C E701                       	dc.b	smpsNoAttack, $01
00089C6E E102                       	smpsAlterNote       $02
00089C70 E701                       	dc.b	smpsNoAttack, $01
00089C72 E108                       	smpsAlterNote       $08
00089C74 E701                       	dc.b	smpsNoAttack, $01
00089C76 E10C                       	smpsAlterNote       $0C
00089C78 E701                       	dc.b	smpsNoAttack, $01
00089C7A E108                       	smpsAlterNote       $08
00089C7C E701                       	dc.b	smpsNoAttack, $01
00089C7E E105                       	smpsAlterNote       $05
00089C80 E701                       	dc.b	smpsNoAttack, $01
00089C82 E101                       	smpsAlterNote       $01
00089C84 E701                       	dc.b	smpsNoAttack, $01
00089C86 E105                       	smpsAlterNote       $05
00089C88 E701                       	dc.b	smpsNoAttack, $01
00089C8A E10B                       	smpsAlterNote       $0B
00089C8C E701                       	dc.b	smpsNoAttack, $01
00089C8E E10C                       	smpsAlterNote       $0C
00089C90 E701                       	dc.b	smpsNoAttack, $01
00089C92 E108                       	smpsAlterNote       $08
00089C94 E701                       	dc.b	smpsNoAttack, $01
00089C96 E107                       	smpsAlterNote       $07
00089C98 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00089CA2 E10B                       	smpsAlterNote       $0B
00089CA4 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089CAE E109                       	smpsAlterNote       $09
00089CB0 C203                       	dc.b	nF5, $03
00089CB2 E108                       	smpsAlterNote       $08
00089CB4 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089CB8 E109                       	smpsAlterNote       $09
00089CBA C20D                       	dc.b	nF5, $0D
00089CBC E108                       	smpsAlterNote       $08
00089CBE C10E                       	dc.b	nE5, $0E
00089CC0 E107                       	smpsAlterNote       $07
00089CC2 BF0D                       	dc.b	nD5, $0D
00089CC4 E104                       	smpsAlterNote       $04
00089CC6 E701                       	dc.b	smpsNoAttack, $01
00089CC8 E100                       	smpsAlterNote       $00
00089CCA E701                       	dc.b	smpsNoAttack, $01
00089CCC E104                       	smpsAlterNote       $04
00089CCE E701                       	dc.b	smpsNoAttack, $01
00089CD0 E107                       	smpsAlterNote       $07
00089CD2 E701                       	dc.b	smpsNoAttack, $01
00089CD4 E10B                       	smpsAlterNote       $0B
00089CD6 E701                       	dc.b	smpsNoAttack, $01
00089CD8 E107                       	smpsAlterNote       $07
00089CDA E701                       	dc.b	smpsNoAttack, $01
00089CDC E101                       	smpsAlterNote       $01
00089CDE E701                       	dc.b	smpsNoAttack, $01
00089CE0 E100                       	smpsAlterNote       $00
00089CE2 E701                       	dc.b	smpsNoAttack, $01
00089CE4 E104                       	smpsAlterNote       $04
00089CE6 E701                       	dc.b	smpsNoAttack, $01
00089CE8 E10A                       	smpsAlterNote       $0A
00089CEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CEE E107                       	smpsAlterNote       $07
00089CF0 E701                       	dc.b	smpsNoAttack, $01
00089CF2 E101                       	smpsAlterNote       $01
00089CF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CF8 E107                       	smpsAlterNote       $07
00089CFA E701                       	dc.b	smpsNoAttack, $01
00089CFC E10A                       	smpsAlterNote       $0A
00089CFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D02 E104                       	smpsAlterNote       $04
00089D04 E701                       	dc.b	smpsNoAttack, $01
00089D06 E100                       	smpsAlterNote       $00
00089D08 E701                       	dc.b	smpsNoAttack, $01
00089D0A E101                       	smpsAlterNote       $01
00089D0C E701                       	dc.b	smpsNoAttack, $01
00089D0E E107                       	smpsAlterNote       $07
00089D10 E701                       	dc.b	smpsNoAttack, $01
00089D12 E10B                       	smpsAlterNote       $0B
00089D14 E701                       	dc.b	smpsNoAttack, $01
00089D16 E107                       	smpsAlterNote       $07
00089D18 E701                       	dc.b	smpsNoAttack, $01
00089D1A E104                       	smpsAlterNote       $04
00089D1C E701                       	dc.b	smpsNoAttack, $01
00089D1E E100                       	smpsAlterNote       $00
00089D20 E701                       	dc.b	smpsNoAttack, $01
00089D22 E104                       	smpsAlterNote       $04
00089D24 E701                       	dc.b	smpsNoAttack, $01
00089D26 E10A                       	smpsAlterNote       $0A
00089D28 E701                       	dc.b	smpsNoAttack, $01
00089D2A E10B                       	smpsAlterNote       $0B
00089D2C E701                       	dc.b	smpsNoAttack, $01
00089D2E E107                       	smpsAlterNote       $07
00089D30 E701                       	dc.b	smpsNoAttack, $01
00089D32 E101                       	smpsAlterNote       $01
00089D34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D38 E104                       	smpsAlterNote       $04
00089D3A E701                       	dc.b	smpsNoAttack, $01
00089D3C E10A                       	smpsAlterNote       $0A
00089D3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D42 E104                       	smpsAlterNote       $04
00089D44 E701                       	dc.b	smpsNoAttack, $01
00089D46 E101                       	smpsAlterNote       $01
00089D48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D4C E107                       	smpsAlterNote       $07
00089D4E E701                       	dc.b	smpsNoAttack, $01
00089D50 E10B                       	smpsAlterNote       $0B
00089D52 E701                       	dc.b	smpsNoAttack, $01
00089D54 E10A                       	smpsAlterNote       $0A
00089D56 E701                       	dc.b	smpsNoAttack, $01
00089D58 E104                       	smpsAlterNote       $04
00089D5A E701                       	dc.b	smpsNoAttack, $01
00089D5C E100                       	smpsAlterNote       $00
00089D5E E701                       	dc.b	smpsNoAttack, $01
00089D60 E104                       	smpsAlterNote       $04
00089D62 E701                       	dc.b	smpsNoAttack, $01
00089D64 E107                       	smpsAlterNote       $07
00089D66 E701                       	dc.b	smpsNoAttack, $01
00089D68 E10B                       	smpsAlterNote       $0B
00089D6A E701                       	dc.b	smpsNoAttack, $01
00089D6C E107                       	smpsAlterNote       $07
00089D6E E701                       	dc.b	smpsNoAttack, $01
00089D70 E101                       	smpsAlterNote       $01
00089D72 E701                       	dc.b	smpsNoAttack, $01
00089D74 E100                       	smpsAlterNote       $00
00089D76 E701                       	dc.b	smpsNoAttack, $01
00089D78 E104                       	smpsAlterNote       $04
00089D7A E701                       	dc.b	smpsNoAttack, $01
00089D7C E10A                       	smpsAlterNote       $0A
00089D7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D82 E107                       	smpsAlterNote       $07
00089D84 E701                       	dc.b	smpsNoAttack, $01
00089D86 E101                       	smpsAlterNote       $01
00089D88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D8C E107                       	smpsAlterNote       $07
00089D8E E701                       	dc.b	smpsNoAttack, $01
00089D90 E10A                       	smpsAlterNote       $0A
00089D92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D96 E104                       	smpsAlterNote       $04
00089D98 E701                       	dc.b	smpsNoAttack, $01
00089D9A E100                       	smpsAlterNote       $00
00089D9C E701                       	dc.b	smpsNoAttack, $01
00089D9E E101                       	smpsAlterNote       $01
00089DA0 E701                       	dc.b	smpsNoAttack, $01
00089DA2 E107                       	smpsAlterNote       $07
00089DA4 E701                       	dc.b	smpsNoAttack, $01
00089DA6 E10B                       	smpsAlterNote       $0B
00089DA8 E701                       	dc.b	smpsNoAttack, $01
00089DAA E107                       	smpsAlterNote       $07
00089DAC E701                       	dc.b	smpsNoAttack, $01
00089DAE E104                       	smpsAlterNote       $04
00089DB0 E701                       	dc.b	smpsNoAttack, $01
00089DB2 E100                       	smpsAlterNote       $00
00089DB4 E701                       	dc.b	smpsNoAttack, $01
00089DB6 E101                       	smpsAlterNote       $01
00089DB8 8001                       	dc.b	nRst, $01
00089DBA E109                       	smpsAlterNote       $09
00089DBC C20D                       	dc.b	nF5, $0D
00089DBE E106                       	smpsAlterNote       $06
00089DC0 E701                       	dc.b	smpsNoAttack, $01
00089DC2 E102                       	smpsAlterNote       $02
00089DC4 E701                       	dc.b	smpsNoAttack, $01
00089DC6 E106                       	smpsAlterNote       $06
00089DC8 E701                       	dc.b	smpsNoAttack, $01
00089DCA E10C                       	smpsAlterNote       $0C
00089DCC E701                       	dc.b	smpsNoAttack, $01
00089DCE E10D                       	smpsAlterNote       $0D
00089DD0 E701                       	dc.b	smpsNoAttack, $01
00089DD2 E109                       	smpsAlterNote       $09
00089DD4 E701                       	dc.b	smpsNoAttack, $01
00089DD6 E103                       	smpsAlterNote       $03
00089DD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DDC E106                       	smpsAlterNote       $06
00089DDE E701                       	dc.b	smpsNoAttack, $01
00089DE0 E10C                       	smpsAlterNote       $0C
00089DE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DE6 E106                       	smpsAlterNote       $06
00089DE8 E701                       	dc.b	smpsNoAttack, $01
00089DEA E103                       	smpsAlterNote       $03
00089DEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DF0 E109                       	smpsAlterNote       $09
00089DF2 E701                       	dc.b	smpsNoAttack, $01
00089DF4 E10D                       	smpsAlterNote       $0D
00089DF6 E701                       	dc.b	smpsNoAttack, $01
00089DF8 E10C                       	smpsAlterNote       $0C
00089DFA E701                       	dc.b	smpsNoAttack, $01
00089DFC E109                       	smpsAlterNote       $09
00089DFE 8001                       	dc.b	nRst, $01
00089E00 E108                       	smpsAlterNote       $08
00089E02 C10D                       	dc.b	nE5, $0D
00089E04 E109                       	smpsAlterNote       $09
00089E06 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089E0A E108                       	smpsAlterNote       $08
00089E0C C10D                       	dc.b	nE5, $0D
00089E0E E102                       	smpsAlterNote       $02
00089E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E14 E105                       	smpsAlterNote       $05
00089E16 E701                       	dc.b	smpsNoAttack, $01
00089E18 E108                       	smpsAlterNote       $08
00089E1A 8001                       	dc.b	nRst, $01
00089E1C E107                       	smpsAlterNote       $07
00089E1E BF0D                       	dc.b	nD5, $0D
00089E20 E108                       	smpsAlterNote       $08
00089E22 C107                       	dc.b	nE5, $07
00089E24 E109                       	smpsAlterNote       $09
00089E26 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00089E2C E10B                       	smpsAlterNote       $0B
00089E2E C603                       	dc.b	nA5, $03
00089E30 E10C                       	smpsAlterNote       $0C
00089E32 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089E38 E10B                       	smpsAlterNote       $0B
00089E3A C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00089E40 E109                       	smpsAlterNote       $09
00089E42 D003                       	dc.b	nG6, $03
00089E44 E108                       	smpsAlterNote       $08
00089E46 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089E4A E10B                       	smpsAlterNote       $0B
00089E4C C601 8001                  	dc.b	nA5, $01, nRst, $01
00089E50 E108                       	smpsAlterNote       $08
00089E52 C102                       	dc.b	nE5, $02
00089E56 E10C                       	smpsAlterNote       $0C
00089E58 E6FB                       	smpsAlterVol        $FB
00089E5A A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00089E66 8001                       	dc.b	nRst, $01
00089E68 E10B                       	smpsAlterNote       $0B
00089E6A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089E72 E107                       	smpsAlterNote       $07
00089E74 A706 8001                  	dc.b	nD3, $06, nRst, $01
00089E78 E10B                       	smpsAlterNote       $0B
00089E7A A203                       	dc.b	nA2, $03
00089E7C E109                       	smpsAlterNote       $09
00089E7E AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089E82 E108                       	smpsAlterNote       $08
00089E84 A906                       	dc.b	nE3, $06
00089E86 E107                       	smpsAlterNote       $07
00089E88 A703 8001                  	dc.b	nD3, $03, nRst, $01
00089E8C E106                       	smpsAlterNote       $06
00089E8E A503                       	dc.b	nC3, $03
00089E90 E10C                       	smpsAlterNote       $0C
00089E92 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089E96 E10B                       	smpsAlterNote       $0B
00089E98 A203 8004                  	dc.b	nA2, $03, nRst, $04
00089E9C E11B                       	smpsAlterNote       $1B
00089E9E C401                       	dc.b	nG5, $01
00089EA0 E1F4                       	smpsAlterNote       $F4
00089EA2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00089EA5 E106                       	smpsAlterNote       $06
00089EA7 E701                       	dc.b	smpsNoAttack, $01
00089EA9 E10F                       	smpsAlterNote       $0F
00089EAB E701                       	dc.b	smpsNoAttack, $01
00089EAD E1E4                       	smpsAlterNote       $E4
00089EAF E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089EB2 E1F6                       	smpsAlterNote       $F6
00089EB4 E701                       	dc.b	smpsNoAttack, $01
00089EB6 E108                       	smpsAlterNote       $08
00089EB8 E701                       	dc.b	smpsNoAttack, $01
00089EBA E10B                       	smpsAlterNote       $0B
00089EBC E706                       	dc.b	smpsNoAttack, $06
00089EBE E105                       	smpsAlterNote       $05
00089EC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EC4 E108                       	smpsAlterNote       $08
00089EC6 E701                       	dc.b	smpsNoAttack, $01
00089EC8 E10E                       	smpsAlterNote       $0E
00089ECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ECE E108                       	smpsAlterNote       $08
00089ED0 E701                       	dc.b	smpsNoAttack, $01
00089ED2 E105                       	smpsAlterNote       $05
00089ED4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ED8 E10B                       	smpsAlterNote       $0B
00089EDA E701                       	dc.b	smpsNoAttack, $01
00089EDC E10F                       	smpsAlterNote       $0F
00089EDE E701                       	dc.b	smpsNoAttack, $01
00089EE0 E10E                       	smpsAlterNote       $0E
00089EE2 E701                       	dc.b	smpsNoAttack, $01
00089EE4 E108                       	smpsAlterNote       $08
00089EE6 E701                       	dc.b	smpsNoAttack, $01
00089EE8 E104                       	smpsAlterNote       $04
00089EEA E701                       	dc.b	smpsNoAttack, $01
00089EEC E108                       	smpsAlterNote       $08
00089EEE E701                       	dc.b	smpsNoAttack, $01
00089EF0 E10B                       	smpsAlterNote       $0B
00089EF2 E701                       	dc.b	smpsNoAttack, $01
00089EF4 E10F                       	smpsAlterNote       $0F
00089EF6 E701                       	dc.b	smpsNoAttack, $01
00089EF8 E10B                       	smpsAlterNote       $0B
00089EFA E701                       	dc.b	smpsNoAttack, $01
00089EFC E105                       	smpsAlterNote       $05
00089EFE E701                       	dc.b	smpsNoAttack, $01
00089F00 E104                       	smpsAlterNote       $04
00089F02 E701                       	dc.b	smpsNoAttack, $01
00089F04 E108                       	smpsAlterNote       $08
00089F06 E701                       	dc.b	smpsNoAttack, $01
00089F08 E10E                       	smpsAlterNote       $0E
00089F0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F0E E10B                       	smpsAlterNote       $0B
00089F10 E701                       	dc.b	smpsNoAttack, $01
00089F12 E105                       	smpsAlterNote       $05
00089F14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F18 E10B                       	smpsAlterNote       $0B
00089F1A E701                       	dc.b	smpsNoAttack, $01
00089F1C E10E                       	smpsAlterNote       $0E
00089F1E E701                       	dc.b	smpsNoAttack, $01
00089F20 E10F                       	smpsAlterNote       $0F
00089F22 8001                       	dc.b	nRst, $01
00089F24 E109                       	smpsAlterNote       $09
00089F26 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089F2C E108                       	smpsAlterNote       $08
00089F2E C101 8001                  	dc.b	nE5, $01, nRst, $01
00089F32 E109                       	smpsAlterNote       $09
00089F34 C202                       	dc.b	nF5, $02
00089F36 E108                       	smpsAlterNote       $08
00089F38 C102                       	dc.b	nE5, $02
00089F3A E107                       	smpsAlterNote       $07
00089F3C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089F40 E108                       	smpsAlterNote       $08
00089F42 C101 8001                  	dc.b	nE5, $01, nRst, $01
00089F46 E107                       	smpsAlterNote       $07
00089F48 BF02                       	dc.b	nD5, $02
00089F4A E106                       	smpsAlterNote       $06
00089F4C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089F50 E107                       	smpsAlterNote       $07
00089F52 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089F56 E106                       	smpsAlterNote       $06
00089F58 BD02                       	dc.b	nC5, $02
00089F5A E10C                       	smpsAlterNote       $0C
00089F5C BB02                       	dc.b	nBb4, $02
00089F5E E106                       	smpsAlterNote       $06
00089F60 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089F64 E10C                       	smpsAlterNote       $0C
00089F66 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089F6A E10B                       	smpsAlterNote       $0B
00089F6C BA02                       	dc.b	nA4, $02
00089F6E E10C                       	smpsAlterNote       $0C
00089F70 BB02                       	dc.b	nBb4, $02
00089F72 E10B                       	smpsAlterNote       $0B
00089F74 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00089F7E E108                       	smpsAlterNote       $08
00089F80 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00089F88 E107                       	smpsAlterNote       $07
00089F8A BE02                       	dc.b	nCs5, $02
00089F8C E10B                       	smpsAlterNote       $0B
00089F8E BA02                       	dc.b	nA4, $02
00089F90 E109                       	smpsAlterNote       $09
00089F92 B802 8001                  	dc.b	nG4, $02, nRst, $01
00089F96 E108                       	smpsAlterNote       $08
00089F98 B501 8001                  	dc.b	nE4, $01, nRst, $01
00089F9C E10B                       	smpsAlterNote       $0B
00089F9E AE02                       	dc.b	nA3, $02
00089FA0 E10C                       	smpsAlterNote       $0C
00089FA2 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00089FAE E10B                       	smpsAlterNote       $0B
00089FB0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089FB8 E107                       	smpsAlterNote       $07
00089FBA A706 8001                  	dc.b	nD3, $06, nRst, $01
00089FBE E10B                       	smpsAlterNote       $0B
00089FC0 A203                       	dc.b	nA2, $03
00089FC2 E109                       	smpsAlterNote       $09
00089FC4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089FC8 E108                       	smpsAlterNote       $08
00089FCA A906 8001                  	dc.b	nE3, $06, nRst, $01
00089FCE E107                       	smpsAlterNote       $07
00089FD0 A702 8001                  	dc.b	nD3, $02, nRst, $01
00089FD4 E106                       	smpsAlterNote       $06
00089FD6 A503                       	dc.b	nC3, $03
00089FD8 E10C                       	smpsAlterNote       $0C
00089FDA A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089FE0 E107                       	smpsAlterNote       $07
00089FE2 B20D                       	dc.b	nCs4, $0D
00089FE4 E104                       	smpsAlterNote       $04
00089FE6 E701                       	dc.b	smpsNoAttack, $01
00089FE8 E100                       	smpsAlterNote       $00
00089FEA E701                       	dc.b	smpsNoAttack, $01
00089FEC E104                       	smpsAlterNote       $04
00089FEE E701                       	dc.b	smpsNoAttack, $01
00089FF0 E10A                       	smpsAlterNote       $0A
00089FF2 E701                       	dc.b	smpsNoAttack, $01
00089FF4 E10B                       	smpsAlterNote       $0B
00089FF6 E701                       	dc.b	smpsNoAttack, $01
00089FF8 E107                       	smpsAlterNote       $07
00089FFA E701                       	dc.b	smpsNoAttack, $01
00089FFC E101                       	smpsAlterNote       $01
00089FFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A002 E104                       	smpsAlterNote       $04
0008A004 E701                       	dc.b	smpsNoAttack, $01
0008A006 E10A                       	smpsAlterNote       $0A
0008A008 E701                       	dc.b	smpsNoAttack, $01
0008A00A E10B                       	smpsAlterNote       $0B
0008A00C 8001                       	dc.b	nRst, $01
0008A00E E107                       	smpsAlterNote       $07
0008A010 B30D                       	dc.b	nD4, $0D
0008A012 E104                       	smpsAlterNote       $04
0008A014 E701                       	dc.b	smpsNoAttack, $01
0008A016 E100                       	smpsAlterNote       $00
0008A018 E701                       	dc.b	smpsNoAttack, $01
0008A01A E104                       	smpsAlterNote       $04
0008A01C E701                       	dc.b	smpsNoAttack, $01
0008A01E E10A                       	smpsAlterNote       $0A
0008A020 E701                       	dc.b	smpsNoAttack, $01
0008A022 E10B                       	smpsAlterNote       $0B
0008A024 E701                       	dc.b	smpsNoAttack, $01
0008A026 E107                       	smpsAlterNote       $07
0008A028 E701                       	dc.b	smpsNoAttack, $01
0008A02A E101                       	smpsAlterNote       $01
0008A02C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A030 E104                       	smpsAlterNote       $04
0008A032 E701                       	dc.b	smpsNoAttack, $01
0008A034 E10A                       	smpsAlterNote       $0A
0008A036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A03A E104                       	smpsAlterNote       $04
0008A03C E701                       	dc.b	smpsNoAttack, $01
0008A03E E101                       	smpsAlterNote       $01
0008A040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A044 E107                       	smpsAlterNote       $07
0008A046 E701                       	dc.b	smpsNoAttack, $01
0008A048 E10B                       	smpsAlterNote       $0B
0008A04A E701                       	dc.b	smpsNoAttack, $01
0008A04C E10A                       	smpsAlterNote       $0A
0008A04E E701                       	dc.b	smpsNoAttack, $01
0008A050 E107                       	smpsAlterNote       $07
0008A052 8001                       	dc.b	nRst, $01
0008A054 E108                       	smpsAlterNote       $08
0008A056 B50D                       	dc.b	nE4, $0D
0008A058 E102                       	smpsAlterNote       $02
0008A05A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A05E E105                       	smpsAlterNote       $05
0008A060 E701                       	dc.b	smpsNoAttack, $01
0008A062 E10B                       	smpsAlterNote       $0B
0008A064 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A068 E105                       	smpsAlterNote       $05
0008A06A E701                       	dc.b	smpsNoAttack, $01
0008A06C E102                       	smpsAlterNote       $02
0008A06E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A072 E108                       	smpsAlterNote       $08
0008A074 E701                       	dc.b	smpsNoAttack, $01
0008A076 E10C                       	smpsAlterNote       $0C
0008A078 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A07C E107                       	smpsAlterNote       $07
0008A07E B30D                       	dc.b	nD4, $0D
0008A080 E101                       	smpsAlterNote       $01
0008A082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A086 E104                       	smpsAlterNote       $04
0008A088 E701                       	dc.b	smpsNoAttack, $01
0008A08A E10A                       	smpsAlterNote       $0A
0008A08C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A090 E104                       	smpsAlterNote       $04
0008A092 E701                       	dc.b	smpsNoAttack, $01
0008A094 E101                       	smpsAlterNote       $01
0008A096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A09A E107                       	smpsAlterNote       $07
0008A09C E701                       	dc.b	smpsNoAttack, $01
0008A09E E10B                       	smpsAlterNote       $0B
0008A0A0 E701                       	dc.b	smpsNoAttack, $01
0008A0A2 E10A                       	smpsAlterNote       $0A
0008A0A4 E701                       	dc.b	smpsNoAttack, $01
0008A0A6 E104                       	smpsAlterNote       $04
0008A0A8 E701                       	dc.b	smpsNoAttack, $01
0008A0AA E100                       	smpsAlterNote       $00
0008A0AC E701                       	dc.b	smpsNoAttack, $01
0008A0AE E104                       	smpsAlterNote       $04
0008A0B0 E701                       	dc.b	smpsNoAttack, $01
0008A0B2 E107                       	smpsAlterNote       $07
0008A0B4 E701                       	dc.b	smpsNoAttack, $01
0008A0B6 E10B                       	smpsAlterNote       $0B
0008A0B8 E701                       	dc.b	smpsNoAttack, $01
0008A0BA E107                       	smpsAlterNote       $07
0008A0BC E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A0C0 E101                       	smpsAlterNote       $01
0008A0C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0C6 E107                       	smpsAlterNote       $07
0008A0C8 E701                       	dc.b	smpsNoAttack, $01
0008A0CA E10A                       	smpsAlterNote       $0A
0008A0CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0D0 E104                       	smpsAlterNote       $04
0008A0D2 E701                       	dc.b	smpsNoAttack, $01
0008A0D4 E100                       	smpsAlterNote       $00
0008A0D6 E701                       	dc.b	smpsNoAttack, $01
0008A0D8 E101                       	smpsAlterNote       $01
0008A0DA E701                       	dc.b	smpsNoAttack, $01
0008A0DC E107                       	smpsAlterNote       $07
0008A0DE E701                       	dc.b	smpsNoAttack, $01
0008A0E0 E10B                       	smpsAlterNote       $0B
0008A0E2 E701                       	dc.b	smpsNoAttack, $01
0008A0E4 E107                       	smpsAlterNote       $07
0008A0E6 B30E                       	dc.b	nD4, $0E
0008A0E8 E101                       	smpsAlterNote       $01
0008A0EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0EE E107                       	smpsAlterNote       $07
0008A0F0 E701                       	dc.b	smpsNoAttack, $01
0008A0F2 E10A                       	smpsAlterNote       $0A
0008A0F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0F8 E104                       	smpsAlterNote       $04
0008A0FA E701                       	dc.b	smpsNoAttack, $01
0008A0FC E100                       	smpsAlterNote       $00
0008A0FE E701                       	dc.b	smpsNoAttack, $01
0008A100 E101                       	smpsAlterNote       $01
0008A102 E701                       	dc.b	smpsNoAttack, $01
0008A104 E107                       	smpsAlterNote       $07
0008A106 E701                       	dc.b	smpsNoAttack, $01
0008A108 E10B                       	smpsAlterNote       $0B
0008A10A E701                       	dc.b	smpsNoAttack, $01
0008A10C E107                       	smpsAlterNote       $07
0008A10E E701                       	dc.b	smpsNoAttack, $01
0008A110 E104                       	smpsAlterNote       $04
0008A112 E701                       	dc.b	smpsNoAttack, $01
0008A114 E100                       	smpsAlterNote       $00
0008A116 E701                       	dc.b	smpsNoAttack, $01
0008A118 E104                       	smpsAlterNote       $04
0008A11A E701                       	dc.b	smpsNoAttack, $01
0008A11C E10A                       	smpsAlterNote       $0A
0008A11E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A122 E107                       	smpsAlterNote       $07
0008A124 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A128 E104                       	smpsAlterNote       $04
0008A12A E701                       	dc.b	smpsNoAttack, $01
0008A12C E100                       	smpsAlterNote       $00
0008A12E E701                       	dc.b	smpsNoAttack, $01
0008A130 E101                       	smpsAlterNote       $01
0008A132 E701                       	dc.b	smpsNoAttack, $01
0008A134 E107                       	smpsAlterNote       $07
0008A136 E701                       	dc.b	smpsNoAttack, $01
0008A138 E10B                       	smpsAlterNote       $0B
0008A13A E701                       	dc.b	smpsNoAttack, $01
0008A13C E107                       	smpsAlterNote       $07
0008A13E E701                       	dc.b	smpsNoAttack, $01
0008A140 E104                       	smpsAlterNote       $04
0008A142 E701                       	dc.b	smpsNoAttack, $01
0008A144 E100                       	smpsAlterNote       $00
0008A146 E701                       	dc.b	smpsNoAttack, $01
0008A148 E104                       	smpsAlterNote       $04
0008A14A E701                       	dc.b	smpsNoAttack, $01
0008A14C E10A                       	smpsAlterNote       $0A
0008A14E E701                       	dc.b	smpsNoAttack, $01
0008A150 E10B                       	smpsAlterNote       $0B
0008A152 E701                       	dc.b	smpsNoAttack, $01
0008A156 E6FF                       	smpsAlterVol        $FF
0008A158 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A164 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A16C E109                       	smpsAlterNote       $09
0008A16E E601                       	smpsAlterVol        $01
0008A170 B60D                       	dc.b	nF4, $0D
0008A172 E106                       	smpsAlterNote       $06
0008A174 E701                       	dc.b	smpsNoAttack, $01
0008A176 E102                       	smpsAlterNote       $02
0008A178 E701                       	dc.b	smpsNoAttack, $01
0008A17A E106                       	smpsAlterNote       $06
0008A17C E701                       	dc.b	smpsNoAttack, $01
0008A17E E109                       	smpsAlterNote       $09
0008A180 E701                       	dc.b	smpsNoAttack, $01
0008A182 E10D                       	smpsAlterNote       $0D
0008A184 E701                       	dc.b	smpsNoAttack, $01
0008A186 E109                       	smpsAlterNote       $09
0008A188 E701                       	dc.b	smpsNoAttack, $01
0008A18A E103                       	smpsAlterNote       $03
0008A18C E701                       	dc.b	smpsNoAttack, $01
0008A18E E102                       	smpsAlterNote       $02
0008A190 E701                       	dc.b	smpsNoAttack, $01
0008A192 E106                       	smpsAlterNote       $06
0008A194 E701                       	dc.b	smpsNoAttack, $01
0008A196 E10C                       	smpsAlterNote       $0C
0008A198 E701                       	dc.b	smpsNoAttack, $01
0008A19A E10D                       	smpsAlterNote       $0D
0008A19C 8001                       	dc.b	nRst, $01
0008A19E E109                       	smpsAlterNote       $09
0008A1A0 B80D                       	dc.b	nG4, $0D
0008A1A2 E106                       	smpsAlterNote       $06
0008A1A4 E701                       	dc.b	smpsNoAttack, $01
0008A1A6 E102                       	smpsAlterNote       $02
0008A1A8 E701                       	dc.b	smpsNoAttack, $01
0008A1AA E106                       	smpsAlterNote       $06
0008A1AC E701                       	dc.b	smpsNoAttack, $01
0008A1AE E109                       	smpsAlterNote       $09
0008A1B0 E701                       	dc.b	smpsNoAttack, $01
0008A1B2 E10D                       	smpsAlterNote       $0D
0008A1B4 E701                       	dc.b	smpsNoAttack, $01
0008A1B6 E109                       	smpsAlterNote       $09
0008A1B8 E701                       	dc.b	smpsNoAttack, $01
0008A1BA E103                       	smpsAlterNote       $03
0008A1BC E701                       	dc.b	smpsNoAttack, $01
0008A1BE E102                       	smpsAlterNote       $02
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E106                       	smpsAlterNote       $06
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E10C                       	smpsAlterNote       $0C
0008A1C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1CC E106                       	smpsAlterNote       $06
0008A1CE E701                       	dc.b	smpsNoAttack, $01
0008A1D0 E103                       	smpsAlterNote       $03
0008A1D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1D6 E109                       	smpsAlterNote       $09
0008A1D8 E701                       	dc.b	smpsNoAttack, $01
0008A1DA E10D                       	smpsAlterNote       $0D
0008A1DC E701                       	dc.b	smpsNoAttack, $01
0008A1DE E10C                       	smpsAlterNote       $0C
0008A1E0 E701                       	dc.b	smpsNoAttack, $01
0008A1E2 E109                       	smpsAlterNote       $09
0008A1E4 8001                       	dc.b	nRst, $01
0008A1E6 E10B                       	smpsAlterNote       $0B
0008A1E8 BA0D                       	dc.b	nA4, $0D
0008A1EA E105                       	smpsAlterNote       $05
0008A1EC E701                       	dc.b	smpsNoAttack, $01
0008A1EE E104                       	smpsAlterNote       $04
0008A1F0 E701                       	dc.b	smpsNoAttack, $01
0008A1F2 E108                       	smpsAlterNote       $08
0008A1F4 E701                       	dc.b	smpsNoAttack, $01
0008A1F6 E10E                       	smpsAlterNote       $0E
0008A1F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1FC E10B                       	smpsAlterNote       $0B
0008A1FE E701                       	dc.b	smpsNoAttack, $01
0008A200 E105                       	smpsAlterNote       $05
0008A202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A206 E10B                       	smpsAlterNote       $0B
0008A208 E701                       	dc.b	smpsNoAttack, $01
0008A20A E10E                       	smpsAlterNote       $0E
0008A20C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A210 E108                       	smpsAlterNote       $08
0008A212 E701                       	dc.b	smpsNoAttack, $01
0008A214 E104                       	smpsAlterNote       $04
0008A216 E701                       	dc.b	smpsNoAttack, $01
0008A218 E105                       	smpsAlterNote       $05
0008A21A E701                       	dc.b	smpsNoAttack, $01
0008A21C E10B                       	smpsAlterNote       $0B
0008A21E E701                       	dc.b	smpsNoAttack, $01
0008A220 E10F                       	smpsAlterNote       $0F
0008A222 E701                       	dc.b	smpsNoAttack, $01
0008A224 E10B                       	smpsAlterNote       $0B
0008A226 E701                       	dc.b	smpsNoAttack, $01
0008A228 E108                       	smpsAlterNote       $08
0008A22A E701                       	dc.b	smpsNoAttack, $01
0008A22C E104                       	smpsAlterNote       $04
0008A22E E701                       	dc.b	smpsNoAttack, $01
0008A230 E108                       	smpsAlterNote       $08
0008A232 E701                       	dc.b	smpsNoAttack, $01
0008A234 E10E                       	smpsAlterNote       $0E
0008A236 E701                       	dc.b	smpsNoAttack, $01
0008A238 E10F                       	smpsAlterNote       $0F
0008A23A E701                       	dc.b	smpsNoAttack, $01
0008A23C E10B                       	smpsAlterNote       $0B
0008A23E E701                       	dc.b	smpsNoAttack, $01
0008A240 E105                       	smpsAlterNote       $05
0008A242 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A246 E108                       	smpsAlterNote       $08
0008A248 E701                       	dc.b	smpsNoAttack, $01
0008A24A E10E                       	smpsAlterNote       $0E
0008A24C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A250 E108                       	smpsAlterNote       $08
0008A252 E701                       	dc.b	smpsNoAttack, $01
0008A254 E105                       	smpsAlterNote       $05
0008A256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A25A E108                       	smpsAlterNote       $08
0008A25C B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008A260 E109                       	smpsAlterNote       $09
0008A262 B60D                       	dc.b	nF4, $0D
0008A264 E103                       	smpsAlterNote       $03
0008A266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A26A E106                       	smpsAlterNote       $06
0008A26C E701                       	dc.b	smpsNoAttack, $01
0008A26E E10C                       	smpsAlterNote       $0C
0008A270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A274 E106                       	smpsAlterNote       $06
0008A276 E701                       	dc.b	smpsNoAttack, $01
0008A278 E103                       	smpsAlterNote       $03
0008A27A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A27E E109                       	smpsAlterNote       $09
0008A280 E701                       	dc.b	smpsNoAttack, $01
0008A282 E10D                       	smpsAlterNote       $0D
0008A284 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A288 E109                       	smpsAlterNote       $09
0008A28A B80D                       	dc.b	nG4, $0D
0008A28C E103                       	smpsAlterNote       $03
0008A28E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A292 E109                       	smpsAlterNote       $09
0008A294 E701                       	dc.b	smpsNoAttack, $01
0008A296 E10C                       	smpsAlterNote       $0C
0008A298 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A29C E106                       	smpsAlterNote       $06
0008A29E E701                       	dc.b	smpsNoAttack, $01
0008A2A0 E102                       	smpsAlterNote       $02
0008A2A2 E701                       	dc.b	smpsNoAttack, $01
0008A2A4 E103                       	smpsAlterNote       $03
0008A2A6 E701                       	dc.b	smpsNoAttack, $01
0008A2A8 E109                       	smpsAlterNote       $09
0008A2AA E701                       	dc.b	smpsNoAttack, $01
0008A2AC E10D                       	smpsAlterNote       $0D
0008A2AE E701                       	dc.b	smpsNoAttack, $01
0008A2B0 E109                       	smpsAlterNote       $09
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 E106                       	smpsAlterNote       $06
0008A2B6 E701                       	dc.b	smpsNoAttack, $01
0008A2B8 E102                       	smpsAlterNote       $02
0008A2BA E701                       	dc.b	smpsNoAttack, $01
0008A2BC E106                       	smpsAlterNote       $06
0008A2BE E701                       	dc.b	smpsNoAttack, $01
0008A2C0 E10C                       	smpsAlterNote       $0C
0008A2C2 E701                       	dc.b	smpsNoAttack, $01
0008A2C4 E10D                       	smpsAlterNote       $0D
0008A2C6 E701                       	dc.b	smpsNoAttack, $01
0008A2C8 E109                       	smpsAlterNote       $09
0008A2CA E701                       	dc.b	smpsNoAttack, $01
0008A2CC E10B                       	smpsAlterNote       $0B
0008A2CE BA0D                       	dc.b	nA4, $0D
0008A2D0 E108                       	smpsAlterNote       $08
0008A2D2 E701                       	dc.b	smpsNoAttack, $01
0008A2D4 E105                       	smpsAlterNote       $05
0008A2D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2DA E10B                       	smpsAlterNote       $0B
0008A2DC E701                       	dc.b	smpsNoAttack, $01
0008A2DE E10F                       	smpsAlterNote       $0F
0008A2E0 E701                       	dc.b	smpsNoAttack, $01
0008A2E2 E10E                       	smpsAlterNote       $0E
0008A2E4 E701                       	dc.b	smpsNoAttack, $01
0008A2E6 E108                       	smpsAlterNote       $08
0008A2E8 E701                       	dc.b	smpsNoAttack, $01
0008A2EA E104                       	smpsAlterNote       $04
0008A2EC E701                       	dc.b	smpsNoAttack, $01
0008A2EE E108                       	smpsAlterNote       $08
0008A2F0 E701                       	dc.b	smpsNoAttack, $01
0008A2F2 E10B                       	smpsAlterNote       $0B
0008A2F4 E701                       	dc.b	smpsNoAttack, $01
0008A2F6 E10F                       	smpsAlterNote       $0F
0008A2F8 E701                       	dc.b	smpsNoAttack, $01
0008A2FA E10B                       	smpsAlterNote       $0B
0008A2FC E701                       	dc.b	smpsNoAttack, $01
0008A2FE E105                       	smpsAlterNote       $05
0008A300 E701                       	dc.b	smpsNoAttack, $01
0008A302 E104                       	smpsAlterNote       $04
0008A304 E701                       	dc.b	smpsNoAttack, $01
0008A306 E108                       	smpsAlterNote       $08
0008A308 E701                       	dc.b	smpsNoAttack, $01
0008A30A E10E                       	smpsAlterNote       $0E
0008A30C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A310 E10B                       	smpsAlterNote       $0B
0008A312 E701                       	dc.b	smpsNoAttack, $01
0008A314 E105                       	smpsAlterNote       $05
0008A316 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A31A E10B                       	smpsAlterNote       $0B
0008A31C E701                       	dc.b	smpsNoAttack, $01
0008A31E E10E                       	smpsAlterNote       $0E
0008A320 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A324 E108                       	smpsAlterNote       $08
0008A326 E701                       	dc.b	smpsNoAttack, $01
0008A328 E105                       	smpsAlterNote       $05
0008A32A 8001                       	dc.b	nRst, $01
0008A32C E109                       	smpsAlterNote       $09
0008A32E B60A                       	dc.b	nF4, $0A
0008A330 E108                       	smpsAlterNote       $08
0008A332 B507                       	dc.b	nE4, $07
0008A334 E107                       	smpsAlterNote       $07
0008A336 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A33A E108                       	smpsAlterNote       $08
0008A33C B503                       	dc.b	nE4, $03
0008A33E E109                       	smpsAlterNote       $09
0008A340 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008A348 E10B                       	smpsAlterNote       $0B
0008A34A BA0D                       	dc.b	nA4, $0D
0008A34C E108                       	smpsAlterNote       $08
0008A34E E701                       	dc.b	smpsNoAttack, $01
0008A350 E104                       	smpsAlterNote       $04
0008A352 E701                       	dc.b	smpsNoAttack, $01
0008A354 E108                       	smpsAlterNote       $08
0008A356 E701                       	dc.b	smpsNoAttack, $01
0008A358 E10B                       	smpsAlterNote       $0B
0008A35A E701                       	dc.b	smpsNoAttack, $01
0008A35C E10F                       	smpsAlterNote       $0F
0008A35E E701                       	dc.b	smpsNoAttack, $01
0008A360 E10B                       	smpsAlterNote       $0B
0008A362 E701                       	dc.b	smpsNoAttack, $01
0008A364 E105                       	smpsAlterNote       $05
0008A366 E701                       	dc.b	smpsNoAttack, $01
0008A368 E104                       	smpsAlterNote       $04
0008A36A E701                       	dc.b	smpsNoAttack, $01
0008A36C E108                       	smpsAlterNote       $08
0008A36E E701                       	dc.b	smpsNoAttack, $01
0008A370 E10E                       	smpsAlterNote       $0E
0008A372 E701                       	dc.b	smpsNoAttack, $01
0008A374 E10F                       	smpsAlterNote       $0F
0008A376 8001                       	dc.b	nRst, $01
0008A378 E109                       	smpsAlterNote       $09
0008A37A C20D                       	dc.b	nF5, $0D
0008A37C E106                       	smpsAlterNote       $06
0008A37E E701                       	dc.b	smpsNoAttack, $01
0008A380 E102                       	smpsAlterNote       $02
0008A382 E701                       	dc.b	smpsNoAttack, $01
0008A384 E106                       	smpsAlterNote       $06
0008A386 E701                       	dc.b	smpsNoAttack, $01
0008A388 E109                       	smpsAlterNote       $09
0008A38A E701                       	dc.b	smpsNoAttack, $01
0008A38C E10D                       	smpsAlterNote       $0D
0008A38E E701                       	dc.b	smpsNoAttack, $01
0008A390 E109                       	smpsAlterNote       $09
0008A392 E701                       	dc.b	smpsNoAttack, $01
0008A394 E103                       	smpsAlterNote       $03
0008A396 E701                       	dc.b	smpsNoAttack, $01
0008A398 E102                       	smpsAlterNote       $02
0008A39A E701                       	dc.b	smpsNoAttack, $01
0008A39C E106                       	smpsAlterNote       $06
0008A39E E701                       	dc.b	smpsNoAttack, $01
0008A3A0 E10C                       	smpsAlterNote       $0C
0008A3A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3A6 E109                       	smpsAlterNote       $09
0008A3A8 E701                       	dc.b	smpsNoAttack, $01
0008A3AA E103                       	smpsAlterNote       $03
0008A3AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3B0 E109                       	smpsAlterNote       $09
0008A3B2 E701                       	dc.b	smpsNoAttack, $01
0008A3B4 E10C                       	smpsAlterNote       $0C
0008A3B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3BA E106                       	smpsAlterNote       $06
0008A3BC E701                       	dc.b	smpsNoAttack, $01
0008A3BE E102                       	smpsAlterNote       $02
0008A3C0 E701                       	dc.b	smpsNoAttack, $01
0008A3C2 E103                       	smpsAlterNote       $03
0008A3C4 E701                       	dc.b	smpsNoAttack, $01
0008A3C6 E109                       	smpsAlterNote       $09
0008A3C8 E701                       	dc.b	smpsNoAttack, $01
0008A3CA E10D                       	smpsAlterNote       $0D
0008A3CC E701                       	dc.b	smpsNoAttack, $01
0008A3CE E109                       	smpsAlterNote       $09
0008A3D0 E701                       	dc.b	smpsNoAttack, $01
0008A3D2 E106                       	smpsAlterNote       $06
0008A3D4 E701                       	dc.b	smpsNoAttack, $01
0008A3D6 E102                       	smpsAlterNote       $02
0008A3D8 E701                       	dc.b	smpsNoAttack, $01
0008A3DA E106                       	smpsAlterNote       $06
0008A3DC E701                       	dc.b	smpsNoAttack, $01
0008A3DE E10C                       	smpsAlterNote       $0C
0008A3E0 E701                       	dc.b	smpsNoAttack, $01
0008A3E2 E10D                       	smpsAlterNote       $0D
0008A3E4 E701                       	dc.b	smpsNoAttack, $01
0008A3E6 E109                       	smpsAlterNote       $09
0008A3E8 E701                       	dc.b	smpsNoAttack, $01
0008A3EA E103                       	smpsAlterNote       $03
0008A3EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3F0 E106                       	smpsAlterNote       $06
0008A3F2 E701                       	dc.b	smpsNoAttack, $01
0008A3F4 E10C                       	smpsAlterNote       $0C
0008A3F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3FA E106                       	smpsAlterNote       $06
0008A3FC E701                       	dc.b	smpsNoAttack, $01
0008A3FE E103                       	smpsAlterNote       $03
0008A400 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A404 E109                       	smpsAlterNote       $09
0008A406 E701                       	dc.b	smpsNoAttack, $01
0008A408 E10D                       	smpsAlterNote       $0D
0008A40A E701                       	dc.b	smpsNoAttack, $01
0008A40C E10C                       	smpsAlterNote       $0C
0008A40E E701                       	dc.b	smpsNoAttack, $01
0008A410 E106                       	smpsAlterNote       $06
0008A412 E701                       	dc.b	smpsNoAttack, $01
0008A414 E103                       	smpsAlterNote       $03
0008A416 8001                       	dc.b	nRst, $01
0008A418 E109                       	smpsAlterNote       $09
0008A41A C206 8001                  	dc.b	nF5, $06, nRst, $01
0008A420 E10C                       	smpsAlterNote       $0C
0008A422 E601                       	smpsAlterVol        $01
0008A424 BB0D                       	dc.b	nBb4, $0D
0008A426 E106                       	smpsAlterNote       $06
0008A428 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A42C E109                       	smpsAlterNote       $09
0008A42E E701                       	dc.b	smpsNoAttack, $01
0008A430 E10F                       	smpsAlterNote       $0F
0008A432 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A436 E109                       	smpsAlterNote       $09
0008A438 E701                       	dc.b	smpsNoAttack, $01
0008A43A E106                       	smpsAlterNote       $06
0008A43C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A440 E10C                       	smpsAlterNote       $0C
0008A442 E701                       	dc.b	smpsNoAttack, $01
0008A444 E110                       	smpsAlterNote       $10
0008A446 E701                       	dc.b	smpsNoAttack, $01
0008A448 E10F                       	smpsAlterNote       $0F
0008A44A E701                       	dc.b	smpsNoAttack, $01
0008A44C E109                       	smpsAlterNote       $09
0008A44E E701                       	dc.b	smpsNoAttack, $01
0008A450 E105                       	smpsAlterNote       $05
0008A452 E701                       	dc.b	smpsNoAttack, $01
0008A454 E106                       	smpsAlterNote       $06
0008A456 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008A45A E103                       	smpsAlterNote       $03
0008A45C E701                       	dc.b	smpsNoAttack, $01
0008A45E E1FF                       	smpsAlterNote       $FF
0008A460 E701                       	dc.b	smpsNoAttack, $01
0008A462 E103                       	smpsAlterNote       $03
0008A464 E701                       	dc.b	smpsNoAttack, $01
0008A466 E106                       	smpsAlterNote       $06
0008A468 E701                       	dc.b	smpsNoAttack, $01
0008A46A E10A                       	smpsAlterNote       $0A
0008A46C E701                       	dc.b	smpsNoAttack, $01
0008A46E E106                       	smpsAlterNote       $06
0008A470 E701                       	dc.b	smpsNoAttack, $01
0008A472 E100                       	smpsAlterNote       $00
0008A474 E701                       	dc.b	smpsNoAttack, $01
0008A476 E1FF                       	smpsAlterNote       $FF
0008A478 E701                       	dc.b	smpsNoAttack, $01
0008A47A E103                       	smpsAlterNote       $03
0008A47C E701                       	dc.b	smpsNoAttack, $01
0008A47E E109                       	smpsAlterNote       $09
0008A480 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A484 E106                       	smpsAlterNote       $06
0008A486 E701                       	dc.b	smpsNoAttack, $01
0008A488 E100                       	smpsAlterNote       $00
0008A48A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A48E E107                       	smpsAlterNote       $07
0008A490 BF0E                       	dc.b	nD5, $0E
0008A492 E101                       	smpsAlterNote       $01
0008A494 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A498 E107                       	smpsAlterNote       $07
0008A49A E701                       	dc.b	smpsNoAttack, $01
0008A49C E10A                       	smpsAlterNote       $0A
0008A49E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4A2 E104                       	smpsAlterNote       $04
0008A4A4 E701                       	dc.b	smpsNoAttack, $01
0008A4A6 E100                       	smpsAlterNote       $00
0008A4A8 E701                       	dc.b	smpsNoAttack, $01
0008A4AA E101                       	smpsAlterNote       $01
0008A4AC E701                       	dc.b	smpsNoAttack, $01
0008A4AE E107                       	smpsAlterNote       $07
0008A4B0 E701                       	dc.b	smpsNoAttack, $01
0008A4B2 E10B                       	smpsAlterNote       $0B
0008A4B4 E701                       	dc.b	smpsNoAttack, $01
0008A4B6 E107                       	smpsAlterNote       $07
0008A4B8 E701                       	dc.b	smpsNoAttack, $01
0008A4BA E104                       	smpsAlterNote       $04
0008A4BC E701                       	dc.b	smpsNoAttack, $01
0008A4BE E100                       	smpsAlterNote       $00
0008A4C0 E701                       	dc.b	smpsNoAttack, $01
0008A4C2 E101                       	smpsAlterNote       $01
0008A4C4 8001                       	dc.b	nRst, $01
0008A4C6 E108                       	smpsAlterNote       $08
0008A4C8 C10C                       	dc.b	nE5, $0C
0008A4CA E109                       	smpsAlterNote       $09
0008A4CC C201 8001                  	dc.b	nF5, $01, nRst, $01
0008A4D0 E10A                       	smpsAlterNote       $0A
0008A4D2 8001                       	dc.b	nRst, $01
0008A4D4 E109                       	smpsAlterNote       $09
0008A4D6 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008A4DA E106                       	smpsAlterNote       $06
0008A4DC E701                       	dc.b	smpsNoAttack, $01
0008A4DE E102                       	smpsAlterNote       $02
0008A4E0 E701                       	dc.b	smpsNoAttack, $01
0008A4E2 E103                       	smpsAlterNote       $03
0008A4E4 E701                       	dc.b	smpsNoAttack, $01
0008A4E6 E109                       	smpsAlterNote       $09
0008A4E8 E701                       	dc.b	smpsNoAttack, $01
0008A4EA E10D                       	smpsAlterNote       $0D
0008A4EC E701                       	dc.b	smpsNoAttack, $01
0008A4EE E109                       	smpsAlterNote       $09
0008A4F0 E701                       	dc.b	smpsNoAttack, $01
0008A4F2 E106                       	smpsAlterNote       $06
0008A4F4 E701                       	dc.b	smpsNoAttack, $01
0008A4F6 E102                       	smpsAlterNote       $02
0008A4F8 E701                       	dc.b	smpsNoAttack, $01
0008A4FA E106                       	smpsAlterNote       $06
0008A4FC E701                       	dc.b	smpsNoAttack, $01
0008A4FE E10C                       	smpsAlterNote       $0C
0008A500 E701                       	dc.b	smpsNoAttack, $01
0008A502 E10D                       	smpsAlterNote       $0D
0008A504 E701                       	dc.b	smpsNoAttack, $01
0008A506 E109                       	smpsAlterNote       $09
0008A508 C40D                       	dc.b	nG5, $0D
0008A50A E106                       	smpsAlterNote       $06
0008A50C E701                       	dc.b	smpsNoAttack, $01
0008A50E E102                       	smpsAlterNote       $02
0008A510 E701                       	dc.b	smpsNoAttack, $01
0008A512 E103                       	smpsAlterNote       $03
0008A514 E701                       	dc.b	smpsNoAttack, $01
0008A516 E109                       	smpsAlterNote       $09
0008A518 E701                       	dc.b	smpsNoAttack, $01
0008A51A E108                       	smpsAlterNote       $08
0008A51C C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008A528 E109                       	smpsAlterNote       $09
0008A52A C20D                       	dc.b	nF5, $0D
0008A52C E106                       	smpsAlterNote       $06
0008A52E E701                       	dc.b	smpsNoAttack, $01
0008A530 E102                       	smpsAlterNote       $02
0008A532 E701                       	dc.b	smpsNoAttack, $01
0008A534 E106                       	smpsAlterNote       $06
0008A536 E701                       	dc.b	smpsNoAttack, $01
0008A538 E109                       	smpsAlterNote       $09
0008A53A E701                       	dc.b	smpsNoAttack, $01
0008A53C E10D                       	smpsAlterNote       $0D
0008A53E E701                       	dc.b	smpsNoAttack, $01
0008A540 E109                       	smpsAlterNote       $09
0008A542 E701                       	dc.b	smpsNoAttack, $01
0008A544 E103                       	smpsAlterNote       $03
0008A546 E701                       	dc.b	smpsNoAttack, $01
0008A548 E102                       	smpsAlterNote       $02
0008A54A E701                       	dc.b	smpsNoAttack, $01
0008A54C E106                       	smpsAlterNote       $06
0008A54E E701                       	dc.b	smpsNoAttack, $01
0008A550 E10C                       	smpsAlterNote       $0C
0008A552 E701                       	dc.b	smpsNoAttack, $01
0008A554 E10D                       	smpsAlterNote       $0D
0008A556 8001                       	dc.b	nRst, $01
0008A558 E112                       	smpsAlterNote       $12
0008A55A C401                       	dc.b	nG5, $01
0008A55C E1EB                       	smpsAlterNote       $EB
0008A55E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A561 E1FD                       	smpsAlterNote       $FD
0008A563 E701                       	dc.b	smpsNoAttack, $01
0008A565 E10F                       	smpsAlterNote       $0F
0008A567 E701                       	dc.b	smpsNoAttack, $01
0008A569 E118                       	smpsAlterNote       $18
0008A56B E701                       	dc.b	smpsNoAttack, $01
0008A56D E1ED                       	smpsAlterNote       $ED
0008A56F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A572 E1FF                       	smpsAlterNote       $FF
0008A574 E701                       	dc.b	smpsNoAttack, $01
0008A576 E10B                       	smpsAlterNote       $0B
0008A578 E703                       	dc.b	smpsNoAttack, $03
0008A57A E109                       	smpsAlterNote       $09
0008A57C C407                       	dc.b	nG5, $07
0008A57E E108                       	smpsAlterNote       $08
0008A580 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008A58C E109                       	smpsAlterNote       $09
0008A58E C20D                       	dc.b	nF5, $0D
0008A590 E103                       	smpsAlterNote       $03
0008A592 E701                       	dc.b	smpsNoAttack, $01
0008A594 E102                       	smpsAlterNote       $02
0008A596 E701                       	dc.b	smpsNoAttack, $01
0008A598 E106                       	smpsAlterNote       $06
0008A59A E701                       	dc.b	smpsNoAttack, $01
0008A59C E10C                       	smpsAlterNote       $0C
0008A59E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5A2 E109                       	smpsAlterNote       $09
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E103                       	smpsAlterNote       $03
0008A5A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5AC E109                       	smpsAlterNote       $09
0008A5AE E701                       	dc.b	smpsNoAttack, $01
0008A5B0 E10C                       	smpsAlterNote       $0C
0008A5B2 E701                       	dc.b	smpsNoAttack, $01
0008A5B4 E10D                       	smpsAlterNote       $0D
0008A5B6 8001                       	dc.b	nRst, $01
0008A5B8 E10B                       	smpsAlterNote       $0B
0008A5BA C609 8001                  	dc.b	nA5, $09, nRst, $01
0008A5BE E109                       	smpsAlterNote       $09
0008A5C0 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008A5C4 E108                       	smpsAlterNote       $08
0008A5C6 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A5D2 8001                       	dc.b	nRst, $01
0008A5D4 E109                       	smpsAlterNote       $09
0008A5D6 C20D                       	dc.b	nF5, $0D
0008A5D8 E103                       	smpsAlterNote       $03
0008A5DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5DE E106                       	smpsAlterNote       $06
0008A5E0 E701                       	dc.b	smpsNoAttack, $01
0008A5E2 E10C                       	smpsAlterNote       $0C
0008A5E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5E8 E106                       	smpsAlterNote       $06
0008A5EA E701                       	dc.b	smpsNoAttack, $01
0008A5EC E103                       	smpsAlterNote       $03
0008A5EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5F2 E109                       	smpsAlterNote       $09
0008A5F4 E701                       	dc.b	smpsNoAttack, $01
0008A5F6 E10D                       	smpsAlterNote       $0D
0008A5F8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A5FE E108                       	smpsAlterNote       $08
0008A600 E6FF                       	smpsAlterVol        $FF
0008A602 A806                       	dc.b	nEb3, $06
0008A604 E10C                       	smpsAlterNote       $0C
0008A606 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A60A E108                       	smpsAlterNote       $08
0008A60C A803                       	dc.b	nEb3, $03
0008A60E E109                       	smpsAlterNote       $09
0008A610 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008A614 E10C                       	smpsAlterNote       $0C
0008A616 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008A620 E109                       	smpsAlterNote       $09
0008A622 E602                       	smpsAlterVol        $02
0008A624 B604                       	dc.b	nF4, $04
0008A626 E602                       	smpsAlterVol        $02
0008A628 F6F1 AA                    	smpsJump            music84_Jump02
0008A62B                            
0008A62B                            ; FM4 Data
0008A62B                            music84_FM4:
0008A62D E040                       	smpsPan             panRight, $00
0008A62F 8003                       	dc.b	nRst, $03
0008A631 E10F                       	smpsAlterNote       $0F
0008A633 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008A637 E10D                       	smpsAlterNote       $0D
0008A639 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008A63D E10C                       	smpsAlterNote       $0C
0008A63F C103 8004                  	dc.b	nE5, $03, nRst, $04
0008A645 E6FE                       	smpsAlterVol        $FE
0008A647 E110                       	smpsAlterNote       $10
0008A649 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A64D E10F                       	smpsAlterNote       $0F
0008A64F C602 8001                  	dc.b	nA5, $02, nRst, $01
0008A653 E10D                       	smpsAlterNote       $0D
0008A655 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008A65E E10C                       	smpsAlterNote       $0C
0008A660 C103                       	dc.b	nE5, $03
0008A662 E10A                       	smpsAlterNote       $0A
0008A664 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008A66A 03                         	dc.b	$03
0008A66B                            
0008A66B                            music84_Jump01:
0008A66B E10B                       	smpsAlterNote       $0B
0008A66D BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A671 E10C                       	smpsAlterNote       $0C
0008A673 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008A677 E10D                       	smpsAlterNote       $0D
0008A679 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A683 E10B                       	smpsAlterNote       $0B
0008A685 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A689 E107                       	smpsAlterNote       $07
0008A68B E701                       	dc.b	smpsNoAttack, $01
0008A68D E103                       	smpsAlterNote       $03
0008A68F E701                       	dc.b	smpsNoAttack, $01
0008A691 E104                       	smpsAlterNote       $04
0008A693 E701                       	dc.b	smpsNoAttack, $01
0008A695 E10A                       	smpsAlterNote       $0A
0008A697 E701                       	dc.b	smpsNoAttack, $01
0008A699 E10E                       	smpsAlterNote       $0E
0008A69B E701                       	dc.b	smpsNoAttack, $01
0008A69D E10A                       	smpsAlterNote       $0A
0008A69F E701                       	dc.b	smpsNoAttack, $01
0008A6A1 E107                       	smpsAlterNote       $07
0008A6A3 E701                       	dc.b	smpsNoAttack, $01
0008A6A5 E104                       	smpsAlterNote       $04
0008A6A7 8001                       	dc.b	nRst, $01
0008A6A9 E110                       	smpsAlterNote       $10
0008A6AB C703                       	dc.b	nBb5, $03
0008A6AD E10F                       	smpsAlterNote       $0F
0008A6AF C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A6B3 E10D                       	smpsAlterNote       $0D
0008A6B5 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008A6BB E10C                       	smpsAlterNote       $0C
0008A6BD E701                       	dc.b	smpsNoAttack, $01
0008A6BF E108                       	smpsAlterNote       $08
0008A6C1 E701                       	dc.b	smpsNoAttack, $01
0008A6C3 E10C                       	smpsAlterNote       $0C
0008A6C5 E701                       	dc.b	smpsNoAttack, $01
0008A6C7 E10F                       	smpsAlterNote       $0F
0008A6C9 E701                       	dc.b	smpsNoAttack, $01
0008A6CB E113                       	smpsAlterNote       $13
0008A6CD E701                       	dc.b	smpsNoAttack, $01
0008A6CF E10F                       	smpsAlterNote       $0F
0008A6D1 E701                       	dc.b	smpsNoAttack, $01
0008A6D3 E109                       	smpsAlterNote       $09
0008A6D5 E701                       	dc.b	smpsNoAttack, $01
0008A6D7 E108                       	smpsAlterNote       $08
0008A6D9 E701                       	dc.b	smpsNoAttack, $01
0008A6DB E10C                       	smpsAlterNote       $0C
0008A6DD E701                       	dc.b	smpsNoAttack, $01
0008A6DF E112                       	smpsAlterNote       $12
0008A6E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6E5 E10C                       	smpsAlterNote       $0C
0008A6E7 E701                       	dc.b	smpsNoAttack, $01
0008A6E9 E109                       	smpsAlterNote       $09
0008A6EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6EF E10F                       	smpsAlterNote       $0F
0008A6F1 E701                       	dc.b	smpsNoAttack, $01
0008A6F3 E113                       	smpsAlterNote       $13
0008A6F5 E701                       	dc.b	smpsNoAttack, $01
0008A6F7 E112                       	smpsAlterNote       $12
0008A6F9 E701                       	dc.b	smpsNoAttack, $01
0008A6FB E10C                       	smpsAlterNote       $0C
0008A6FD E701                       	dc.b	smpsNoAttack, $01
0008A6FF E108                       	smpsAlterNote       $08
0008A701 E701                       	dc.b	smpsNoAttack, $01
0008A703 E10C                       	smpsAlterNote       $0C
0008A705 E701                       	dc.b	smpsNoAttack, $01
0008A707 E10F                       	smpsAlterNote       $0F
0008A709 E701                       	dc.b	smpsNoAttack, $01
0008A70B E113                       	smpsAlterNote       $13
0008A70D E701                       	dc.b	smpsNoAttack, $01
0008A70F E10F                       	smpsAlterNote       $0F
0008A711 E701                       	dc.b	smpsNoAttack, $01
0008A713 E109                       	smpsAlterNote       $09
0008A715 E701                       	dc.b	smpsNoAttack, $01
0008A717 E108                       	smpsAlterNote       $08
0008A719 E701                       	dc.b	smpsNoAttack, $01
0008A71B E10C                       	smpsAlterNote       $0C
0008A71D E701                       	dc.b	smpsNoAttack, $01
0008A71F E112                       	smpsAlterNote       $12
0008A721 E701                       	dc.b	smpsNoAttack, $01
0008A723 E113                       	smpsAlterNote       $13
0008A725 800F                       	dc.b	nRst, $0F
0008A727 E10B                       	smpsAlterNote       $0B
0008A729 BF03                       	dc.b	nD5, $03
0008A72B E10C                       	smpsAlterNote       $0C
0008A72D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A731 E10D                       	smpsAlterNote       $0D
0008A733 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008A73B E10B                       	smpsAlterNote       $0B
0008A73D BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008A747 E110                       	smpsAlterNote       $10
0008A749 C704                       	dc.b	nBb5, $04
0008A74B E10F                       	smpsAlterNote       $0F
0008A74D C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A751 E10D                       	smpsAlterNote       $0D
0008A753 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A759 E109                       	smpsAlterNote       $09
0008A75B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A75F E10F                       	smpsAlterNote       $0F
0008A761 E701                       	dc.b	smpsNoAttack, $01
0008A763 E112                       	smpsAlterNote       $12
0008A765 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A769 E10C                       	smpsAlterNote       $0C
0008A76B E701                       	dc.b	smpsNoAttack, $01
0008A76D E108                       	smpsAlterNote       $08
0008A76F E701                       	dc.b	smpsNoAttack, $01
0008A771 E109                       	smpsAlterNote       $09
0008A773 E701                       	dc.b	smpsNoAttack, $01
0008A775 E10F                       	smpsAlterNote       $0F
0008A777 E701                       	dc.b	smpsNoAttack, $01
0008A779 E113                       	smpsAlterNote       $13
0008A77B E701                       	dc.b	smpsNoAttack, $01
0008A77D E10F                       	smpsAlterNote       $0F
0008A77F E701                       	dc.b	smpsNoAttack, $01
0008A781 E10C                       	smpsAlterNote       $0C
0008A783 E701                       	dc.b	smpsNoAttack, $01
0008A785 E108                       	smpsAlterNote       $08
0008A787 E701                       	dc.b	smpsNoAttack, $01
0008A789 E10C                       	smpsAlterNote       $0C
0008A78B E701                       	dc.b	smpsNoAttack, $01
0008A78D E112                       	smpsAlterNote       $12
0008A78F E701                       	dc.b	smpsNoAttack, $01
0008A791 E113                       	smpsAlterNote       $13
0008A793 E701                       	dc.b	smpsNoAttack, $01
0008A795 E10F                       	smpsAlterNote       $0F
0008A797 E701                       	dc.b	smpsNoAttack, $01
0008A799 E109                       	smpsAlterNote       $09
0008A79B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A79F E10C                       	smpsAlterNote       $0C
0008A7A1 E701                       	dc.b	smpsNoAttack, $01
0008A7A3 E112                       	smpsAlterNote       $12
0008A7A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7A9 E10C                       	smpsAlterNote       $0C
0008A7AB E701                       	dc.b	smpsNoAttack, $01
0008A7AD E109                       	smpsAlterNote       $09
0008A7AF E701                       	dc.b	smpsNoAttack, $01
0008A7B1 E10D                       	smpsAlterNote       $0D
0008A7B3 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A7B7 E10F                       	smpsAlterNote       $0F
0008A7B9 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A7C3 E10D                       	smpsAlterNote       $0D
0008A7C5 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A7CB E10B                       	smpsAlterNote       $0B
0008A7CD BF0D                       	dc.b	nD5, $0D
0008A7CF E108                       	smpsAlterNote       $08
0008A7D1 E701                       	dc.b	smpsNoAttack, $01
0008A7D3 E104                       	smpsAlterNote       $04
0008A7D5 E701                       	dc.b	smpsNoAttack, $01
0008A7D7 E108                       	smpsAlterNote       $08
0008A7D9 E701                       	dc.b	smpsNoAttack, $01
0008A7DB E10B                       	smpsAlterNote       $0B
0008A7DD E701                       	dc.b	smpsNoAttack, $01
0008A7DF E10F                       	smpsAlterNote       $0F
0008A7E1 E701                       	dc.b	smpsNoAttack, $01
0008A7E3 E10B                       	smpsAlterNote       $0B
0008A7E5 E701                       	dc.b	smpsNoAttack, $01
0008A7E7 E105                       	smpsAlterNote       $05
0008A7E9 E701                       	dc.b	smpsNoAttack, $01
0008A7EB E104                       	smpsAlterNote       $04
0008A7ED E701                       	dc.b	smpsNoAttack, $01
0008A7EF E108                       	smpsAlterNote       $08
0008A7F1 E701                       	dc.b	smpsNoAttack, $01
0008A7F3 E10E                       	smpsAlterNote       $0E
0008A7F5 E701                       	dc.b	smpsNoAttack, $01
0008A7F7 E10F                       	smpsAlterNote       $0F
0008A7F9 8001                       	dc.b	nRst, $01
0008A7FB E10C                       	smpsAlterNote       $0C
0008A7FD C101                       	dc.b	nE5, $01
0008A7FF E10D                       	smpsAlterNote       $0D
0008A801 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A807 E10F                       	smpsAlterNote       $0F
0008A809 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A80D E10C                       	smpsAlterNote       $0C
0008A80F CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A813 E10D                       	smpsAlterNote       $0D
0008A815 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A819 E10C                       	smpsAlterNote       $0C
0008A81B CD03                       	dc.b	nE6, $03
0008A81D E10A                       	smpsAlterNote       $0A
0008A81F C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A823 E10D                       	smpsAlterNote       $0D
0008A825 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A82D E109                       	smpsAlterNote       $09
0008A82F E701                       	dc.b	smpsNoAttack, $01
0008A831 E10D                       	smpsAlterNote       $0D
0008A833 E701                       	dc.b	smpsNoAttack, $01
0008A835 E110                       	smpsAlterNote       $10
0008A837 E701                       	dc.b	smpsNoAttack, $01
0008A839 E114                       	smpsAlterNote       $14
0008A83B E701                       	dc.b	smpsNoAttack, $01
0008A83D E110                       	smpsAlterNote       $10
0008A83F E701                       	dc.b	smpsNoAttack, $01
0008A841 E10A                       	smpsAlterNote       $0A
0008A843 E701                       	dc.b	smpsNoAttack, $01
0008A845 E109                       	smpsAlterNote       $09
0008A847 E701                       	dc.b	smpsNoAttack, $01
0008A849 E10D                       	smpsAlterNote       $0D
0008A84B E701                       	dc.b	smpsNoAttack, $01
0008A84D E113                       	smpsAlterNote       $13
0008A84F E701                       	dc.b	smpsNoAttack, $01
0008A851 E114                       	smpsAlterNote       $14
0008A853 8001                       	dc.b	nRst, $01
0008A855 E10F                       	smpsAlterNote       $0F
0008A857 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008A85D E10C                       	smpsAlterNote       $0C
0008A85F E701                       	dc.b	smpsNoAttack, $01
0008A861 E108                       	smpsAlterNote       $08
0008A863 E701                       	dc.b	smpsNoAttack, $01
0008A865 E10C                       	smpsAlterNote       $0C
0008A867 E701                       	dc.b	smpsNoAttack, $01
0008A869 E112                       	smpsAlterNote       $12
0008A86B E701                       	dc.b	smpsNoAttack, $01
0008A86D E113                       	smpsAlterNote       $13
0008A86F E701                       	dc.b	smpsNoAttack, $01
0008A871 E10F                       	smpsAlterNote       $0F
0008A873 E701                       	dc.b	smpsNoAttack, $01
0008A875 E109                       	smpsAlterNote       $09
0008A877 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A87B E10C                       	smpsAlterNote       $0C
0008A87D E701                       	dc.b	smpsNoAttack, $01
0008A87F E112                       	smpsAlterNote       $12
0008A881 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A885 E10C                       	smpsAlterNote       $0C
0008A887 E701                       	dc.b	smpsNoAttack, $01
0008A889 E109                       	smpsAlterNote       $09
0008A88B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A88F E10F                       	smpsAlterNote       $0F
0008A891 E701                       	dc.b	smpsNoAttack, $01
0008A893 E113                       	smpsAlterNote       $13
0008A895 E701                       	dc.b	smpsNoAttack, $01
0008A897 E112                       	smpsAlterNote       $12
0008A899 E701                       	dc.b	smpsNoAttack, $01
0008A89B E10C                       	smpsAlterNote       $0C
0008A89D E701                       	dc.b	smpsNoAttack, $01
0008A89F E108                       	smpsAlterNote       $08
0008A8A1 E701                       	dc.b	smpsNoAttack, $01
0008A8A3 E10C                       	smpsAlterNote       $0C
0008A8A5 E701                       	dc.b	smpsNoAttack, $01
0008A8A7 E10F                       	smpsAlterNote       $0F
0008A8A9 E701                       	dc.b	smpsNoAttack, $01
0008A8AB E113                       	smpsAlterNote       $13
0008A8AD E701                       	dc.b	smpsNoAttack, $01
0008A8AF E10F                       	smpsAlterNote       $0F
0008A8B1 E701                       	dc.b	smpsNoAttack, $01
0008A8B3 E109                       	smpsAlterNote       $09
0008A8B5 E701                       	dc.b	smpsNoAttack, $01
0008A8B7 E108                       	smpsAlterNote       $08
0008A8B9 E701                       	dc.b	smpsNoAttack, $01
0008A8BB E10C                       	smpsAlterNote       $0C
0008A8BD E701                       	dc.b	smpsNoAttack, $01
0008A8BF E112                       	smpsAlterNote       $12
0008A8C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C5 E10F                       	smpsAlterNote       $0F
0008A8C7 E701                       	dc.b	smpsNoAttack, $01
0008A8C9 E109                       	smpsAlterNote       $09
0008A8CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8CF E10F                       	smpsAlterNote       $0F
0008A8D1 E701                       	dc.b	smpsNoAttack, $01
0008A8D3 E113                       	smpsAlterNote       $13
0008A8D5 E701                       	dc.b	smpsNoAttack, $01
0008A8D7 E112                       	smpsAlterNote       $12
0008A8D9 E701                       	dc.b	smpsNoAttack, $01
0008A8DB E10C                       	smpsAlterNote       $0C
0008A8DD E701                       	dc.b	smpsNoAttack, $01
0008A8DF E108                       	smpsAlterNote       $08
0008A8E1 E701                       	dc.b	smpsNoAttack, $01
0008A8E3 E10C                       	smpsAlterNote       $0C
0008A8E5 E701                       	dc.b	smpsNoAttack, $01
0008A8E7 E10F                       	smpsAlterNote       $0F
0008A8E9 E701                       	dc.b	smpsNoAttack, $01
0008A8EB E113                       	smpsAlterNote       $13
0008A8ED E701                       	dc.b	smpsNoAttack, $01
0008A8EF E10F                       	smpsAlterNote       $0F
0008A8F1 E701                       	dc.b	smpsNoAttack, $01
0008A8F3 E109                       	smpsAlterNote       $09
0008A8F5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A8F9 E10F                       	smpsAlterNote       $0F
0008A8FB C60D                       	dc.b	nA5, $0D
0008A8FD E109                       	smpsAlterNote       $09
0008A8FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A903 E10C                       	smpsAlterNote       $0C
0008A905 E701                       	dc.b	smpsNoAttack, $01
0008A907 E112                       	smpsAlterNote       $12
0008A909 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A90D E10C                       	smpsAlterNote       $0C
0008A90F E701                       	dc.b	smpsNoAttack, $01
0008A911 E109                       	smpsAlterNote       $09
0008A913 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A917 E10F                       	smpsAlterNote       $0F
0008A919 E701                       	dc.b	smpsNoAttack, $01
0008A91B E113                       	smpsAlterNote       $13
0008A91D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A923 E10D                       	smpsAlterNote       $0D
0008A925 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008A92D E10C                       	smpsAlterNote       $0C
0008A92F C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008A935 E6FF                       	smpsAlterVol        $FF
0008A937 E10B                       	smpsAlterNote       $0B
0008A939 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A93D E10C                       	smpsAlterNote       $0C
0008A93F C103                       	dc.b	nE5, $03
0008A941 E10D                       	smpsAlterNote       $0D
0008A943 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008A94D E10B                       	smpsAlterNote       $0B
0008A94F BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A953 E107                       	smpsAlterNote       $07
0008A955 E701                       	dc.b	smpsNoAttack, $01
0008A957 E104                       	smpsAlterNote       $04
0008A959 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A95D E10A                       	smpsAlterNote       $0A
0008A95F E701                       	dc.b	smpsNoAttack, $01
0008A961 E10D                       	smpsAlterNote       $0D
0008A963 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A967 E107                       	smpsAlterNote       $07
0008A969 E701                       	dc.b	smpsNoAttack, $01
0008A96B E104                       	smpsAlterNote       $04
0008A96D 8001                       	dc.b	nRst, $01
0008A96F E110                       	smpsAlterNote       $10
0008A971 C703                       	dc.b	nBb5, $03
0008A973 E10F                       	smpsAlterNote       $0F
0008A975 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A979 E10D                       	smpsAlterNote       $0D
0008A97B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008A97F E10C                       	smpsAlterNote       $0C
0008A981 E701                       	dc.b	smpsNoAttack, $01
0008A983 E108                       	smpsAlterNote       $08
0008A985 E701                       	dc.b	smpsNoAttack, $01
0008A987 E109                       	smpsAlterNote       $09
0008A989 E701                       	dc.b	smpsNoAttack, $01
0008A98B E10F                       	smpsAlterNote       $0F
0008A98D E701                       	dc.b	smpsNoAttack, $01
0008A98F E113                       	smpsAlterNote       $13
0008A991 E701                       	dc.b	smpsNoAttack, $01
0008A993 E10F                       	smpsAlterNote       $0F
0008A995 E701                       	dc.b	smpsNoAttack, $01
0008A997 E10C                       	smpsAlterNote       $0C
0008A999 E701                       	dc.b	smpsNoAttack, $01
0008A99B E108                       	smpsAlterNote       $08
0008A99D E701                       	dc.b	smpsNoAttack, $01
0008A99F E10C                       	smpsAlterNote       $0C
0008A9A1 E701                       	dc.b	smpsNoAttack, $01
0008A9A3 E112                       	smpsAlterNote       $12
0008A9A5 E701                       	dc.b	smpsNoAttack, $01
0008A9A7 E113                       	smpsAlterNote       $13
0008A9A9 E701                       	dc.b	smpsNoAttack, $01
0008A9AB E10F                       	smpsAlterNote       $0F
0008A9AD E701                       	dc.b	smpsNoAttack, $01
0008A9AF E109                       	smpsAlterNote       $09
0008A9B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9B5 E10C                       	smpsAlterNote       $0C
0008A9B7 E701                       	dc.b	smpsNoAttack, $01
0008A9B9 E112                       	smpsAlterNote       $12
0008A9BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9BF E10C                       	smpsAlterNote       $0C
0008A9C1 E701                       	dc.b	smpsNoAttack, $01
0008A9C3 E109                       	smpsAlterNote       $09
0008A9C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9C9 E10F                       	smpsAlterNote       $0F
0008A9CB E701                       	dc.b	smpsNoAttack, $01
0008A9CD E113                       	smpsAlterNote       $13
0008A9CF E701                       	dc.b	smpsNoAttack, $01
0008A9D1 E112                       	smpsAlterNote       $12
0008A9D3 E701                       	dc.b	smpsNoAttack, $01
0008A9D5 E10C                       	smpsAlterNote       $0C
0008A9D7 E701                       	dc.b	smpsNoAttack, $01
0008A9D9 E108                       	smpsAlterNote       $08
0008A9DB E701                       	dc.b	smpsNoAttack, $01
0008A9DD E10C                       	smpsAlterNote       $0C
0008A9DF E701                       	dc.b	smpsNoAttack, $01
0008A9E1 E10F                       	smpsAlterNote       $0F
0008A9E3 E701                       	dc.b	smpsNoAttack, $01
0008A9E5 E113                       	smpsAlterNote       $13
0008A9E7 E701                       	dc.b	smpsNoAttack, $01
0008A9E9 E10F                       	smpsAlterNote       $0F
0008A9EB BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008A9EF E110                       	smpsAlterNote       $10
0008A9F1 BB03                       	dc.b	nBb4, $03
0008A9F3 E10F                       	smpsAlterNote       $0F
0008A9F5 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008A9F9 E10B                       	smpsAlterNote       $0B
0008A9FB BF03                       	dc.b	nD5, $03
0008A9FD E10C                       	smpsAlterNote       $0C
0008A9FF C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AA03 E10D                       	smpsAlterNote       $0D
0008AA05 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AA0F E10B                       	smpsAlterNote       $0B
0008AA11 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008AA1D E110                       	smpsAlterNote       $10
0008AA1F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AA23 E10F                       	smpsAlterNote       $0F
0008AA25 C604                       	dc.b	nA5, $04
0008AA27 E10D                       	smpsAlterNote       $0D
0008AA29 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AA2F E109                       	smpsAlterNote       $09
0008AA31 E701                       	dc.b	smpsNoAttack, $01
0008AA33 E108                       	smpsAlterNote       $08
0008AA35 E701                       	dc.b	smpsNoAttack, $01
0008AA37 E10C                       	smpsAlterNote       $0C
0008AA39 E701                       	dc.b	smpsNoAttack, $01
0008AA3B E112                       	smpsAlterNote       $12
0008AA3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA41 E10F                       	smpsAlterNote       $0F
0008AA43 E701                       	dc.b	smpsNoAttack, $01
0008AA45 E109                       	smpsAlterNote       $09
0008AA47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA4B E10F                       	smpsAlterNote       $0F
0008AA4D E701                       	dc.b	smpsNoAttack, $01
0008AA4F E112                       	smpsAlterNote       $12
0008AA51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA55 E10C                       	smpsAlterNote       $0C
0008AA57 E701                       	dc.b	smpsNoAttack, $01
0008AA59 E108                       	smpsAlterNote       $08
0008AA5B E701                       	dc.b	smpsNoAttack, $01
0008AA5D E109                       	smpsAlterNote       $09
0008AA5F E701                       	dc.b	smpsNoAttack, $01
0008AA61 E10F                       	smpsAlterNote       $0F
0008AA63 E701                       	dc.b	smpsNoAttack, $01
0008AA65 E113                       	smpsAlterNote       $13
0008AA67 E701                       	dc.b	smpsNoAttack, $01
0008AA69 E10F                       	smpsAlterNote       $0F
0008AA6B E701                       	dc.b	smpsNoAttack, $01
0008AA6D E10C                       	smpsAlterNote       $0C
0008AA6F E701                       	dc.b	smpsNoAttack, $01
0008AA71 E108                       	smpsAlterNote       $08
0008AA73 E701                       	dc.b	smpsNoAttack, $01
0008AA75 E10C                       	smpsAlterNote       $0C
0008AA77 E701                       	dc.b	smpsNoAttack, $01
0008AA79 E112                       	smpsAlterNote       $12
0008AA7B E701                       	dc.b	smpsNoAttack, $01
0008AA7D E113                       	smpsAlterNote       $13
0008AA7F E701                       	dc.b	smpsNoAttack, $01
0008AA81 E10F                       	smpsAlterNote       $0F
0008AA83 E701                       	dc.b	smpsNoAttack, $01
0008AA85 E109                       	smpsAlterNote       $09
0008AA87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA8B E10C                       	smpsAlterNote       $0C
0008AA8D E701                       	dc.b	smpsNoAttack, $01
0008AA8F E112                       	smpsAlterNote       $12
0008AA91 E701                       	dc.b	smpsNoAttack, $01
0008AA93 E113                       	smpsAlterNote       $13
0008AA95 8001                       	dc.b	nRst, $01
0008AA97 E10F                       	smpsAlterNote       $0F
0008AA99 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008AAA5 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008AAAD E10D                       	smpsAlterNote       $0D
0008AAAF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AAB5 E10B                       	smpsAlterNote       $0B
0008AAB7 BF0D                       	dc.b	nD5, $0D
0008AAB9 E108                       	smpsAlterNote       $08
0008AABB E701                       	dc.b	smpsNoAttack, $01
0008AABD E104                       	smpsAlterNote       $04
0008AABF E701                       	dc.b	smpsNoAttack, $01
0008AAC1 E105                       	smpsAlterNote       $05
0008AAC3 E701                       	dc.b	smpsNoAttack, $01
0008AAC5 E10B                       	smpsAlterNote       $0B
0008AAC7 E701                       	dc.b	smpsNoAttack, $01
0008AAC9 E10F                       	smpsAlterNote       $0F
0008AACB E701                       	dc.b	smpsNoAttack, $01
0008AACD E10B                       	smpsAlterNote       $0B
0008AACF E701                       	dc.b	smpsNoAttack, $01
0008AAD1 E108                       	smpsAlterNote       $08
0008AAD3 E701                       	dc.b	smpsNoAttack, $01
0008AAD5 E104                       	smpsAlterNote       $04
0008AAD7 E701                       	dc.b	smpsNoAttack, $01
0008AAD9 E108                       	smpsAlterNote       $08
0008AADB E701                       	dc.b	smpsNoAttack, $01
0008AADD E10E                       	smpsAlterNote       $0E
0008AADF E701                       	dc.b	smpsNoAttack, $01
0008AAE1 E10F                       	smpsAlterNote       $0F
0008AAE3 E701                       	dc.b	smpsNoAttack, $01
0008AAE5 E10C                       	smpsAlterNote       $0C
0008AAE7 C101                       	dc.b	nE5, $01
0008AAE9 E10D                       	smpsAlterNote       $0D
0008AAEB C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AAF3 E10F                       	smpsAlterNote       $0F
0008AAF5 C607                       	dc.b	nA5, $07
0008AAF7 E10C                       	smpsAlterNote       $0C
0008AAF9 CD07                       	dc.b	nE6, $07
0008AAFB E10D                       	smpsAlterNote       $0D
0008AAFD CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008AB01 E10C                       	smpsAlterNote       $0C
0008AB03 CD03                       	dc.b	nE6, $03
0008AB05 E10A                       	smpsAlterNote       $0A
0008AB07 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008AB0B E10D                       	smpsAlterNote       $0D
0008AB0D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008AB13 E10A                       	smpsAlterNote       $0A
0008AB15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB19 E110                       	smpsAlterNote       $10
0008AB1B E701                       	dc.b	smpsNoAttack, $01
0008AB1D E114                       	smpsAlterNote       $14
0008AB1F E701                       	dc.b	smpsNoAttack, $01
0008AB21 E113                       	smpsAlterNote       $13
0008AB23 E701                       	dc.b	smpsNoAttack, $01
0008AB25 E10D                       	smpsAlterNote       $0D
0008AB27 E701                       	dc.b	smpsNoAttack, $01
0008AB29 E109                       	smpsAlterNote       $09
0008AB2B E701                       	dc.b	smpsNoAttack, $01
0008AB2D E10D                       	smpsAlterNote       $0D
0008AB2F E701                       	dc.b	smpsNoAttack, $01
0008AB31 E110                       	smpsAlterNote       $10
0008AB33 E701                       	dc.b	smpsNoAttack, $01
0008AB35 E114                       	smpsAlterNote       $14
0008AB37 E701                       	dc.b	smpsNoAttack, $01
0008AB39 E10F                       	smpsAlterNote       $0F
0008AB3B C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008AB3F E10C                       	smpsAlterNote       $0C
0008AB41 E701                       	dc.b	smpsNoAttack, $01
0008AB43 E108                       	smpsAlterNote       $08
0008AB45 E701                       	dc.b	smpsNoAttack, $01
0008AB47 E10C                       	smpsAlterNote       $0C
0008AB49 E701                       	dc.b	smpsNoAttack, $01
0008AB4B E10F                       	smpsAlterNote       $0F
0008AB4D E701                       	dc.b	smpsNoAttack, $01
0008AB4F E113                       	smpsAlterNote       $13
0008AB51 E701                       	dc.b	smpsNoAttack, $01
0008AB53 E10F                       	smpsAlterNote       $0F
0008AB55 E701                       	dc.b	smpsNoAttack, $01
0008AB57 E109                       	smpsAlterNote       $09
0008AB59 E701                       	dc.b	smpsNoAttack, $01
0008AB5B E108                       	smpsAlterNote       $08
0008AB5D E701                       	dc.b	smpsNoAttack, $01
0008AB5F E10C                       	smpsAlterNote       $0C
0008AB61 E701                       	dc.b	smpsNoAttack, $01
0008AB63 E112                       	smpsAlterNote       $12
0008AB65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB69 E10F                       	smpsAlterNote       $0F
0008AB6B E701                       	dc.b	smpsNoAttack, $01
0008AB6D E109                       	smpsAlterNote       $09
0008AB6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB73 E10F                       	smpsAlterNote       $0F
0008AB75 E701                       	dc.b	smpsNoAttack, $01
0008AB77 E112                       	smpsAlterNote       $12
0008AB79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB7D E10C                       	smpsAlterNote       $0C
0008AB7F E701                       	dc.b	smpsNoAttack, $01
0008AB81 E108                       	smpsAlterNote       $08
0008AB83 E701                       	dc.b	smpsNoAttack, $01
0008AB85 E109                       	smpsAlterNote       $09
0008AB87 E701                       	dc.b	smpsNoAttack, $01
0008AB89 E10F                       	smpsAlterNote       $0F
0008AB8B E701                       	dc.b	smpsNoAttack, $01
0008AB8D E113                       	smpsAlterNote       $13
0008AB8F E701                       	dc.b	smpsNoAttack, $01
0008AB91 E10F                       	smpsAlterNote       $0F
0008AB93 E701                       	dc.b	smpsNoAttack, $01
0008AB95 E10C                       	smpsAlterNote       $0C
0008AB97 E701                       	dc.b	smpsNoAttack, $01
0008AB99 E108                       	smpsAlterNote       $08
0008AB9B E701                       	dc.b	smpsNoAttack, $01
0008AB9D E10C                       	smpsAlterNote       $0C
0008AB9F E701                       	dc.b	smpsNoAttack, $01
0008ABA1 E112                       	smpsAlterNote       $12
0008ABA3 E701                       	dc.b	smpsNoAttack, $01
0008ABA5 E113                       	smpsAlterNote       $13
0008ABA7 E701                       	dc.b	smpsNoAttack, $01
0008ABA9 E10F                       	smpsAlterNote       $0F
0008ABAB E701                       	dc.b	smpsNoAttack, $01
0008ABAD E109                       	smpsAlterNote       $09
0008ABAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABB3 E10C                       	smpsAlterNote       $0C
0008ABB5 E701                       	dc.b	smpsNoAttack, $01
0008ABB7 E112                       	smpsAlterNote       $12
0008ABB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABBD E10C                       	smpsAlterNote       $0C
0008ABBF E701                       	dc.b	smpsNoAttack, $01
0008ABC1 E109                       	smpsAlterNote       $09
0008ABC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABC7 E10F                       	smpsAlterNote       $0F
0008ABC9 E701                       	dc.b	smpsNoAttack, $01
0008ABCB E113                       	smpsAlterNote       $13
0008ABCD E701                       	dc.b	smpsNoAttack, $01
0008ABCF E112                       	smpsAlterNote       $12
0008ABD1 E701                       	dc.b	smpsNoAttack, $01
0008ABD3 E10C                       	smpsAlterNote       $0C
0008ABD5 E701                       	dc.b	smpsNoAttack, $01
0008ABD7 E109                       	smpsAlterNote       $09
0008ABD9 8001                       	dc.b	nRst, $01
0008ABDB E10F                       	smpsAlterNote       $0F
0008ABDD C60D                       	dc.b	nA5, $0D
0008ABDF E10C                       	smpsAlterNote       $0C
0008ABE1 E701                       	dc.b	smpsNoAttack, $01
0008ABE3 E108                       	smpsAlterNote       $08
0008ABE5 E701                       	dc.b	smpsNoAttack, $01
0008ABE7 E10C                       	smpsAlterNote       $0C
0008ABE9 E701                       	dc.b	smpsNoAttack, $01
0008ABEB E112                       	smpsAlterNote       $12
0008ABED E701                       	dc.b	smpsNoAttack, $01
0008ABEF E113                       	smpsAlterNote       $13
0008ABF1 E701                       	dc.b	smpsNoAttack, $01
0008ABF3 E10F                       	smpsAlterNote       $0F
0008ABF5 E701                       	dc.b	smpsNoAttack, $01
0008ABF7 E109                       	smpsAlterNote       $09
0008ABF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABFD E10C                       	smpsAlterNote       $0C
0008ABFF E701                       	dc.b	smpsNoAttack, $01
0008AC01 E112                       	smpsAlterNote       $12
0008AC03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC07 E10C                       	smpsAlterNote       $0C
0008AC09 E701                       	dc.b	smpsNoAttack, $01
0008AC0B E109                       	smpsAlterNote       $09
0008AC0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC11 E10F                       	smpsAlterNote       $0F
0008AC13 E701                       	dc.b	smpsNoAttack, $01
0008AC15 E113                       	smpsAlterNote       $13
0008AC17 E701                       	dc.b	smpsNoAttack, $01
0008AC19 E112                       	smpsAlterNote       $12
0008AC1B E701                       	dc.b	smpsNoAttack, $01
0008AC1D E10C                       	smpsAlterNote       $0C
0008AC1F E701                       	dc.b	smpsNoAttack, $01
0008AC21 E108                       	smpsAlterNote       $08
0008AC23 E701                       	dc.b	smpsNoAttack, $01
0008AC25 E10C                       	smpsAlterNote       $0C
0008AC27 E701                       	dc.b	smpsNoAttack, $01
0008AC29 E10F                       	smpsAlterNote       $0F
0008AC2B E701                       	dc.b	smpsNoAttack, $01
0008AC2D E113                       	smpsAlterNote       $13
0008AC2F E701                       	dc.b	smpsNoAttack, $01
0008AC31 E10F                       	smpsAlterNote       $0F
0008AC33 E701                       	dc.b	smpsNoAttack, $01
0008AC35 E109                       	smpsAlterNote       $09
0008AC37 E701                       	dc.b	smpsNoAttack, $01
0008AC39 E108                       	smpsAlterNote       $08
0008AC3B E701                       	dc.b	smpsNoAttack, $01
0008AC3D E10C                       	smpsAlterNote       $0C
0008AC3F E701                       	dc.b	smpsNoAttack, $01
0008AC41 E112                       	smpsAlterNote       $12
0008AC43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC47 E10F                       	smpsAlterNote       $0F
0008AC49 E701                       	dc.b	smpsNoAttack, $01
0008AC4B E109                       	smpsAlterNote       $09
0008AC4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC51 E10F                       	smpsAlterNote       $0F
0008AC53 E701                       	dc.b	smpsNoAttack, $01
0008AC55 E112                       	smpsAlterNote       $12
0008AC57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC5B E10C                       	smpsAlterNote       $0C
0008AC5D E701                       	dc.b	smpsNoAttack, $01
0008AC5F E108                       	smpsAlterNote       $08
0008AC61 E701                       	dc.b	smpsNoAttack, $01
0008AC63 E10C                       	smpsAlterNote       $0C
0008AC65 E701                       	dc.b	smpsNoAttack, $01
0008AC67 E10F                       	smpsAlterNote       $0F
0008AC69 E701                       	dc.b	smpsNoAttack, $01
0008AC6B E113                       	smpsAlterNote       $13
0008AC6D E701                       	dc.b	smpsNoAttack, $01
0008AC6F E10F                       	smpsAlterNote       $0F
0008AC71 E701                       	dc.b	smpsNoAttack, $01
0008AC73 E109                       	smpsAlterNote       $09
0008AC75 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AC7B E601                       	smpsAlterVol        $01
0008AC7D E10F                       	smpsAlterNote       $0F
0008AC7F C604                       	dc.b	nA5, $04
0008AC81 E10D                       	smpsAlterNote       $0D
0008AC83 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AC89 E10B                       	smpsAlterNote       $0B
0008AC8B BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008AC93 E10F                       	smpsAlterNote       $0F
0008AC95 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AC99 E10D                       	smpsAlterNote       $0D
0008AC9B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008ACA1 E10C                       	smpsAlterNote       $0C
0008ACA3 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008ACA9 E10A                       	smpsAlterNote       $0A
0008ACAB C904 8001                  	dc.b	nC6, $04, nRst, $01
0008ACAF E110                       	smpsAlterNote       $10
0008ACB1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008ACB5 E10F                       	smpsAlterNote       $0F
0008ACB7 C604                       	dc.b	nA5, $04
0008ACB9 E10D                       	smpsAlterNote       $0D
0008ACBB C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008ACC7 E109                       	smpsAlterNote       $09
0008ACC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACCD E10F                       	smpsAlterNote       $0F
0008ACCF E701                       	dc.b	smpsNoAttack, $01
0008ACD1 E112                       	smpsAlterNote       $12
0008ACD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACD7 E10C                       	smpsAlterNote       $0C
0008ACD9 E701                       	dc.b	smpsNoAttack, $01
0008ACDB E108                       	smpsAlterNote       $08
0008ACDD E701                       	dc.b	smpsNoAttack, $01
0008ACDF E10C                       	smpsAlterNote       $0C
0008ACE1 E701                       	dc.b	smpsNoAttack, $01
0008ACE3 E10F                       	smpsAlterNote       $0F
0008ACE5 E701                       	dc.b	smpsNoAttack, $01
0008ACE7 E113                       	smpsAlterNote       $13
0008ACE9 E701                       	dc.b	smpsNoAttack, $01
0008ACEB E10D                       	smpsAlterNote       $0D
0008ACED C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008ACF3 E10C                       	smpsAlterNote       $0C
0008ACF5 C10D                       	dc.b	nE5, $0D
0008ACF7 E109                       	smpsAlterNote       $09
0008ACF9 E701                       	dc.b	smpsNoAttack, $01
0008ACFB E105                       	smpsAlterNote       $05
0008ACFD E701                       	dc.b	smpsNoAttack, $01
0008ACFF E106                       	smpsAlterNote       $06
0008AD01 E701                       	dc.b	smpsNoAttack, $01
0008AD03 E10C                       	smpsAlterNote       $0C
0008AD05 E701                       	dc.b	smpsNoAttack, $01
0008AD07 E110                       	smpsAlterNote       $10
0008AD09 E701                       	dc.b	smpsNoAttack, $01
0008AD0B E10C                       	smpsAlterNote       $0C
0008AD0D E701                       	dc.b	smpsNoAttack, $01
0008AD0F E109                       	smpsAlterNote       $09
0008AD11 E701                       	dc.b	smpsNoAttack, $01
0008AD13 E105                       	smpsAlterNote       $05
0008AD15 E701                       	dc.b	smpsNoAttack, $01
0008AD17 E109                       	smpsAlterNote       $09
0008AD19 E701                       	dc.b	smpsNoAttack, $01
0008AD1B E10F                       	smpsAlterNote       $0F
0008AD1D E701                       	dc.b	smpsNoAttack, $01
0008AD1F E110                       	smpsAlterNote       $10
0008AD21 E701                       	dc.b	smpsNoAttack, $01
0008AD23 E10C                       	smpsAlterNote       $0C
0008AD25 E701                       	dc.b	smpsNoAttack, $01
0008AD27 E106                       	smpsAlterNote       $06
0008AD29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD2D E109                       	smpsAlterNote       $09
0008AD2F E701                       	dc.b	smpsNoAttack, $01
0008AD31 E10F                       	smpsAlterNote       $0F
0008AD33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD37 E109                       	smpsAlterNote       $09
0008AD39 E701                       	dc.b	smpsNoAttack, $01
0008AD3B E106                       	smpsAlterNote       $06
0008AD3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD41 E10C                       	smpsAlterNote       $0C
0008AD43 E701                       	dc.b	smpsNoAttack, $01
0008AD45 E110                       	smpsAlterNote       $10
0008AD47 E701                       	dc.b	smpsNoAttack, $01
0008AD49 E10F                       	smpsAlterNote       $0F
0008AD4B E701                       	dc.b	smpsNoAttack, $01
0008AD4D E109                       	smpsAlterNote       $09
0008AD4F E701                       	dc.b	smpsNoAttack, $01
0008AD51 E105                       	smpsAlterNote       $05
0008AD53 E701                       	dc.b	smpsNoAttack, $01
0008AD55 E109                       	smpsAlterNote       $09
0008AD57 E701                       	dc.b	smpsNoAttack, $01
0008AD59 E10C                       	smpsAlterNote       $0C
0008AD5B E701                       	dc.b	smpsNoAttack, $01
0008AD5D E110                       	smpsAlterNote       $10
0008AD5F E701                       	dc.b	smpsNoAttack, $01
0008AD61 E10C                       	smpsAlterNote       $0C
0008AD63 E701                       	dc.b	smpsNoAttack, $01
0008AD65 E106                       	smpsAlterNote       $06
0008AD67 E701                       	dc.b	smpsNoAttack, $01
0008AD69 E105                       	smpsAlterNote       $05
0008AD6B E701                       	dc.b	smpsNoAttack, $01
0008AD6D E109                       	smpsAlterNote       $09
0008AD6F E701                       	dc.b	smpsNoAttack, $01
0008AD71 E10F                       	smpsAlterNote       $0F
0008AD73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD77 E10C                       	smpsAlterNote       $0C
0008AD79 E701                       	dc.b	smpsNoAttack, $01
0008AD7B E106                       	smpsAlterNote       $06
0008AD7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD81 E10C                       	smpsAlterNote       $0C
0008AD83 E701                       	dc.b	smpsNoAttack, $01
0008AD85 E10F                       	smpsAlterNote       $0F
0008AD87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD8B E109                       	smpsAlterNote       $09
0008AD8D E701                       	dc.b	smpsNoAttack, $01
0008AD8F E105                       	smpsAlterNote       $05
0008AD91 E701                       	dc.b	smpsNoAttack, $01
0008AD93 E106                       	smpsAlterNote       $06
0008AD95 E701                       	dc.b	smpsNoAttack, $01
0008AD97 E10C                       	smpsAlterNote       $0C
0008AD99 E701                       	dc.b	smpsNoAttack, $01
0008AD9B E110                       	smpsAlterNote       $10
0008AD9D E701                       	dc.b	smpsNoAttack, $01
0008AD9F E10C                       	smpsAlterNote       $0C
0008ADA1 E701                       	dc.b	smpsNoAttack, $01
0008ADA3 E109                       	smpsAlterNote       $09
0008ADA5 E701                       	dc.b	smpsNoAttack, $01
0008ADA7 E105                       	smpsAlterNote       $05
0008ADA9 E701                       	dc.b	smpsNoAttack, $01
0008ADAB E109                       	smpsAlterNote       $09
0008ADAD E701                       	dc.b	smpsNoAttack, $01
0008ADAF E10F                       	smpsAlterNote       $0F
0008ADB1 E701                       	dc.b	smpsNoAttack, $01
0008ADB3 E110                       	smpsAlterNote       $10
0008ADB5 E701                       	dc.b	smpsNoAttack, $01
0008ADB7 E10C                       	smpsAlterNote       $0C
0008ADB9 E701                       	dc.b	smpsNoAttack, $01
0008ADBB E106                       	smpsAlterNote       $06
0008ADBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADC1 E109                       	smpsAlterNote       $09
0008ADC3 E701                       	dc.b	smpsNoAttack, $01
0008ADC5 E10F                       	smpsAlterNote       $0F
0008ADC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADCB E109                       	smpsAlterNote       $09
0008ADCD E701                       	dc.b	smpsNoAttack, $01
0008ADCF E106                       	smpsAlterNote       $06
0008ADD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADD5 E10C                       	smpsAlterNote       $0C
0008ADD7 E701                       	dc.b	smpsNoAttack, $01
0008ADD9 E110                       	smpsAlterNote       $10
0008ADDB E701                       	dc.b	smpsNoAttack, $01
0008ADDD E10F                       	smpsAlterNote       $0F
0008ADDF E701                       	dc.b	smpsNoAttack, $01
0008ADE1 E109                       	smpsAlterNote       $09
0008ADE3 E701                       	dc.b	smpsNoAttack, $01
0008ADE5 E105                       	smpsAlterNote       $05
0008ADE7 E701                       	dc.b	smpsNoAttack, $01
0008ADE9 E109                       	smpsAlterNote       $09
0008ADEB E701                       	dc.b	smpsNoAttack, $01
0008ADED E10C                       	smpsAlterNote       $0C
0008ADEF E701                       	dc.b	smpsNoAttack, $01
0008ADF1 E110                       	smpsAlterNote       $10
0008ADF3 E701                       	dc.b	smpsNoAttack, $01
0008ADF5 E10C                       	smpsAlterNote       $0C
0008ADF7 E701                       	dc.b	smpsNoAttack, $01
0008ADF9 E106                       	smpsAlterNote       $06
0008ADFB E701                       	dc.b	smpsNoAttack, $01
0008ADFD E105                       	smpsAlterNote       $05
0008ADFF E701                       	dc.b	smpsNoAttack, $01
0008AE01 E109                       	smpsAlterNote       $09
0008AE03 E701                       	dc.b	smpsNoAttack, $01
0008AE05 E10F                       	smpsAlterNote       $0F
0008AE07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE0B E109                       	smpsAlterNote       $09
0008AE0D E701                       	dc.b	smpsNoAttack, $01
0008AE0F E106                       	smpsAlterNote       $06
0008AE11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE15 E10C                       	smpsAlterNote       $0C
0008AE17 E701                       	dc.b	smpsNoAttack, $01
0008AE19 E110                       	smpsAlterNote       $10
0008AE1B E701                       	dc.b	smpsNoAttack, $01
0008AE1D E10F                       	smpsAlterNote       $0F
0008AE1F E701                       	dc.b	smpsNoAttack, $01
0008AE21 E109                       	smpsAlterNote       $09
0008AE23 E701                       	dc.b	smpsNoAttack, $01
0008AE25 E105                       	smpsAlterNote       $05
0008AE27 E701                       	dc.b	smpsNoAttack, $01
0008AE29 E109                       	smpsAlterNote       $09
0008AE2B E701                       	dc.b	smpsNoAttack, $01
0008AE2D E10C                       	smpsAlterNote       $0C
0008AE2F E701                       	dc.b	smpsNoAttack, $01
0008AE31 E110                       	smpsAlterNote       $10
0008AE33 E701                       	dc.b	smpsNoAttack, $01
0008AE35 E10C                       	smpsAlterNote       $0C
0008AE37 E701                       	dc.b	smpsNoAttack, $01
0008AE39 E106                       	smpsAlterNote       $06
0008AE3B E701                       	dc.b	smpsNoAttack, $01
0008AE3D E105                       	smpsAlterNote       $05
0008AE3F E701                       	dc.b	smpsNoAttack, $01
0008AE41 E109                       	smpsAlterNote       $09
0008AE43 E701                       	dc.b	smpsNoAttack, $01
0008AE45 E10F                       	smpsAlterNote       $0F
0008AE47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE4B E10C                       	smpsAlterNote       $0C
0008AE4D E701                       	dc.b	smpsNoAttack, $01
0008AE4F E106                       	smpsAlterNote       $06
0008AE51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE55 E10C                       	smpsAlterNote       $0C
0008AE57 E701                       	dc.b	smpsNoAttack, $01
0008AE59 E10F                       	smpsAlterNote       $0F
0008AE5B E701                       	dc.b	smpsNoAttack, $01
0008AE5D E110                       	smpsAlterNote       $10
0008AE5F 8001                       	dc.b	nRst, $01
0008AE61 E10F                       	smpsAlterNote       $0F
0008AE63 C604                       	dc.b	nA5, $04
0008AE65 E10D                       	smpsAlterNote       $0D
0008AE67 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AE6D E10B                       	smpsAlterNote       $0B
0008AE6F BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008AE75 E10F                       	smpsAlterNote       $0F
0008AE77 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AE7B E10D                       	smpsAlterNote       $0D
0008AE7D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AE83 E10C                       	smpsAlterNote       $0C
0008AE85 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008AE8B E10A                       	smpsAlterNote       $0A
0008AE8D C904                       	dc.b	nC6, $04
0008AE8F E110                       	smpsAlterNote       $10
0008AE91 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AE95 E10F                       	smpsAlterNote       $0F
0008AE97 C604                       	dc.b	nA5, $04
0008AE99 E10D                       	smpsAlterNote       $0D
0008AE9B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008AEA7 E109                       	smpsAlterNote       $09
0008AEA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEAD E10F                       	smpsAlterNote       $0F
0008AEAF E701                       	dc.b	smpsNoAttack, $01
0008AEB1 E112                       	smpsAlterNote       $12
0008AEB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEB7 E10C                       	smpsAlterNote       $0C
0008AEB9 E701                       	dc.b	smpsNoAttack, $01
0008AEBB E108                       	smpsAlterNote       $08
0008AEBD E701                       	dc.b	smpsNoAttack, $01
0008AEBF E109                       	smpsAlterNote       $09
0008AEC1 E701                       	dc.b	smpsNoAttack, $01
0008AEC3 E10F                       	smpsAlterNote       $0F
0008AEC5 E701                       	dc.b	smpsNoAttack, $01
0008AEC7 E113                       	smpsAlterNote       $13
0008AEC9 E701                       	dc.b	smpsNoAttack, $01
0008AECB E10D                       	smpsAlterNote       $0D
0008AECD C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008AED3 E10C                       	smpsAlterNote       $0C
0008AED5 C10D                       	dc.b	nE5, $0D
0008AED7 E109                       	smpsAlterNote       $09
0008AED9 E701                       	dc.b	smpsNoAttack, $01
0008AEDB E106                       	smpsAlterNote       $06
0008AEDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEE1 E10C                       	smpsAlterNote       $0C
0008AEE3 E701                       	dc.b	smpsNoAttack, $01
0008AEE5 E110                       	smpsAlterNote       $10
0008AEE7 E701                       	dc.b	smpsNoAttack, $01
0008AEE9 E10F                       	smpsAlterNote       $0F
0008AEEB E701                       	dc.b	smpsNoAttack, $01
0008AEED E109                       	smpsAlterNote       $09
0008AEEF E701                       	dc.b	smpsNoAttack, $01
0008AEF1 E105                       	smpsAlterNote       $05
0008AEF3 E701                       	dc.b	smpsNoAttack, $01
0008AEF5 E109                       	smpsAlterNote       $09
0008AEF7 E701                       	dc.b	smpsNoAttack, $01
0008AEF9 E10C                       	smpsAlterNote       $0C
0008AEFB E701                       	dc.b	smpsNoAttack, $01
0008AEFD E110                       	smpsAlterNote       $10
0008AEFF E701                       	dc.b	smpsNoAttack, $01
0008AF01 E10C                       	smpsAlterNote       $0C
0008AF03 E701                       	dc.b	smpsNoAttack, $01
0008AF05 E106                       	smpsAlterNote       $06
0008AF07 E701                       	dc.b	smpsNoAttack, $01
0008AF09 E105                       	smpsAlterNote       $05
0008AF0B E701                       	dc.b	smpsNoAttack, $01
0008AF0D E109                       	smpsAlterNote       $09
0008AF0F E701                       	dc.b	smpsNoAttack, $01
0008AF11 E10F                       	smpsAlterNote       $0F
0008AF13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF17 E10C                       	smpsAlterNote       $0C
0008AF19 E701                       	dc.b	smpsNoAttack, $01
0008AF1B E106                       	smpsAlterNote       $06
0008AF1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF21 E10C                       	smpsAlterNote       $0C
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 E10F                       	smpsAlterNote       $0F
0008AF27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF2B E109                       	smpsAlterNote       $09
0008AF2D E701                       	dc.b	smpsNoAttack, $01
0008AF2F E105                       	smpsAlterNote       $05
0008AF31 E701                       	dc.b	smpsNoAttack, $01
0008AF33 E106                       	smpsAlterNote       $06
0008AF35 E701                       	dc.b	smpsNoAttack, $01
0008AF37 E10C                       	smpsAlterNote       $0C
0008AF39 E701                       	dc.b	smpsNoAttack, $01
0008AF3B E110                       	smpsAlterNote       $10
0008AF3D E701                       	dc.b	smpsNoAttack, $01
0008AF3F E10C                       	smpsAlterNote       $0C
0008AF41 E701                       	dc.b	smpsNoAttack, $01
0008AF43 E109                       	smpsAlterNote       $09
0008AF45 E701                       	dc.b	smpsNoAttack, $01
0008AF47 E105                       	smpsAlterNote       $05
0008AF49 E701                       	dc.b	smpsNoAttack, $01
0008AF4B E109                       	smpsAlterNote       $09
0008AF4D E701                       	dc.b	smpsNoAttack, $01
0008AF4F E10F                       	smpsAlterNote       $0F
0008AF51 E701                       	dc.b	smpsNoAttack, $01
0008AF53 E110                       	smpsAlterNote       $10
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E10C                       	smpsAlterNote       $0C
0008AF59 E701                       	dc.b	smpsNoAttack, $01
0008AF5B E106                       	smpsAlterNote       $06
0008AF5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF61 E109                       	smpsAlterNote       $09
0008AF63 E701                       	dc.b	smpsNoAttack, $01
0008AF65 E10F                       	smpsAlterNote       $0F
0008AF67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF6B E109                       	smpsAlterNote       $09
0008AF6D E701                       	dc.b	smpsNoAttack, $01
0008AF6F E106                       	smpsAlterNote       $06
0008AF71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF75 E10C                       	smpsAlterNote       $0C
0008AF77 E701                       	dc.b	smpsNoAttack, $01
0008AF79 E110                       	smpsAlterNote       $10
0008AF7B E701                       	dc.b	smpsNoAttack, $01
0008AF7D E10F                       	smpsAlterNote       $0F
0008AF7F E701                       	dc.b	smpsNoAttack, $01
0008AF81 E109                       	smpsAlterNote       $09
0008AF83 E701                       	dc.b	smpsNoAttack, $01
0008AF85 E105                       	smpsAlterNote       $05
0008AF87 E701                       	dc.b	smpsNoAttack, $01
0008AF89 E109                       	smpsAlterNote       $09
0008AF8B E701                       	dc.b	smpsNoAttack, $01
0008AF8D E10F                       	smpsAlterNote       $0F
0008AF8F E701                       	dc.b	smpsNoAttack, $01
0008AF91 E110                       	smpsAlterNote       $10
0008AF93 E701                       	dc.b	smpsNoAttack, $01
0008AF95 E10C                       	smpsAlterNote       $0C
0008AF97 E701                       	dc.b	smpsNoAttack, $01
0008AF99 E106                       	smpsAlterNote       $06
0008AF9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF9F E109                       	smpsAlterNote       $09
0008AFA1 E701                       	dc.b	smpsNoAttack, $01
0008AFA3 E10F                       	smpsAlterNote       $0F
0008AFA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFA9 E109                       	smpsAlterNote       $09
0008AFAB E701                       	dc.b	smpsNoAttack, $01
0008AFAD E106                       	smpsAlterNote       $06
0008AFAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFB3 E10C                       	smpsAlterNote       $0C
0008AFB5 E701                       	dc.b	smpsNoAttack, $01
0008AFB7 E110                       	smpsAlterNote       $10
0008AFB9 E701                       	dc.b	smpsNoAttack, $01
0008AFBB E10F                       	smpsAlterNote       $0F
0008AFBD E701                       	dc.b	smpsNoAttack, $01
0008AFBF E109                       	smpsAlterNote       $09
0008AFC1 E701                       	dc.b	smpsNoAttack, $01
0008AFC3 E105                       	smpsAlterNote       $05
0008AFC5 E701                       	dc.b	smpsNoAttack, $01
0008AFC7 E109                       	smpsAlterNote       $09
0008AFC9 E701                       	dc.b	smpsNoAttack, $01
0008AFCB E10C                       	smpsAlterNote       $0C
0008AFCD E701                       	dc.b	smpsNoAttack, $01
0008AFCF E110                       	smpsAlterNote       $10
0008AFD1 E701                       	dc.b	smpsNoAttack, $01
0008AFD3 E10C                       	smpsAlterNote       $0C
0008AFD5 E701                       	dc.b	smpsNoAttack, $01
0008AFD7 E106                       	smpsAlterNote       $06
0008AFD9 E701                       	dc.b	smpsNoAttack, $01
0008AFDB E105                       	smpsAlterNote       $05
0008AFDD E701                       	dc.b	smpsNoAttack, $01
0008AFDF E109                       	smpsAlterNote       $09
0008AFE1 E701                       	dc.b	smpsNoAttack, $01
0008AFE3 E10F                       	smpsAlterNote       $0F
0008AFE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFE9 E10C                       	smpsAlterNote       $0C
0008AFEB E701                       	dc.b	smpsNoAttack, $01
0008AFED E106                       	smpsAlterNote       $06
0008AFEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFF3 E10C                       	smpsAlterNote       $0C
0008AFF5 E701                       	dc.b	smpsNoAttack, $01
0008AFF7 E10F                       	smpsAlterNote       $0F
0008AFF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFFD E109                       	smpsAlterNote       $09
0008AFFF E701                       	dc.b	smpsNoAttack, $01
0008B001 E105                       	smpsAlterNote       $05
0008B003 E701                       	dc.b	smpsNoAttack, $01
0008B005 E106                       	smpsAlterNote       $06
0008B007 E701                       	dc.b	smpsNoAttack, $01
0008B009 E10C                       	smpsAlterNote       $0C
0008B00B E701                       	dc.b	smpsNoAttack, $01
0008B00D E110                       	smpsAlterNote       $10
0008B00F E701                       	dc.b	smpsNoAttack, $01
0008B011 E10C                       	smpsAlterNote       $0C
0008B013 E701                       	dc.b	smpsNoAttack, $01
0008B015 E109                       	smpsAlterNote       $09
0008B017 E701                       	dc.b	smpsNoAttack, $01
0008B019 E105                       	smpsAlterNote       $05
0008B01B E701                       	dc.b	smpsNoAttack, $01
0008B01D E109                       	smpsAlterNote       $09
0008B01F E701                       	dc.b	smpsNoAttack, $01
0008B021 E10F                       	smpsAlterNote       $0F
0008B023 E701                       	dc.b	smpsNoAttack, $01
0008B025 E110                       	smpsAlterNote       $10
0008B027 E701                       	dc.b	smpsNoAttack, $01
0008B029 E10C                       	smpsAlterNote       $0C
0008B02B E701                       	dc.b	smpsNoAttack, $01
0008B02D E106                       	smpsAlterNote       $06
0008B02F E701                       	dc.b	smpsNoAttack, $01
0008B031 E10B                       	smpsAlterNote       $0B
0008B033 BF02                       	dc.b	nD5, $02
0008B035 E10C                       	smpsAlterNote       $0C
0008B037 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B03D E109                       	smpsAlterNote       $09
0008B03F E701                       	dc.b	smpsNoAttack, $01
0008B041 E105                       	smpsAlterNote       $05
0008B043 E701                       	dc.b	smpsNoAttack, $01
0008B045 E109                       	smpsAlterNote       $09
0008B047 E701                       	dc.b	smpsNoAttack, $01
0008B049 E10F                       	smpsAlterNote       $0F
0008B04B E701                       	dc.b	smpsNoAttack, $01
0008B04D E110                       	smpsAlterNote       $10
0008B04F E701                       	dc.b	smpsNoAttack, $01
0008B051 E10C                       	smpsAlterNote       $0C
0008B053 E701                       	dc.b	smpsNoAttack, $01
0008B055 E106                       	smpsAlterNote       $06
0008B057 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B05B E109                       	smpsAlterNote       $09
0008B05D E701                       	dc.b	smpsNoAttack, $01
0008B05F E10F                       	smpsAlterNote       $0F
0008B061 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B065 E109                       	smpsAlterNote       $09
0008B067 E701                       	dc.b	smpsNoAttack, $01
0008B069 E106                       	smpsAlterNote       $06
0008B06B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B06F E10C                       	smpsAlterNote       $0C
0008B071 E701                       	dc.b	smpsNoAttack, $01
0008B073 E110                       	smpsAlterNote       $10
0008B075 E701                       	dc.b	smpsNoAttack, $01
0008B077 E10F                       	smpsAlterNote       $0F
0008B079 E701                       	dc.b	smpsNoAttack, $01
0008B07B E109                       	smpsAlterNote       $09
0008B07D E701                       	dc.b	smpsNoAttack, $01
0008B07F E105                       	smpsAlterNote       $05
0008B081 E701                       	dc.b	smpsNoAttack, $01
0008B083 E109                       	smpsAlterNote       $09
0008B085 E701                       	dc.b	smpsNoAttack, $01
0008B087 E10C                       	smpsAlterNote       $0C
0008B089 E701                       	dc.b	smpsNoAttack, $01
0008B08B E110                       	smpsAlterNote       $10
0008B08D E701                       	dc.b	smpsNoAttack, $01
0008B08F E10C                       	smpsAlterNote       $0C
0008B091 E701                       	dc.b	smpsNoAttack, $01
0008B093 E106                       	smpsAlterNote       $06
0008B095 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B099 E10D                       	smpsAlterNote       $0D
0008B09B C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B0A3 E10C                       	smpsAlterNote       $0C
0008B0A5 C10D                       	dc.b	nE5, $0D
0008B0A7 E106                       	smpsAlterNote       $06
0008B0A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0AD E109                       	smpsAlterNote       $09
0008B0AF E701                       	dc.b	smpsNoAttack, $01
0008B0B1 E10F                       	smpsAlterNote       $0F
0008B0B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0B7 E109                       	smpsAlterNote       $09
0008B0B9 E701                       	dc.b	smpsNoAttack, $01
0008B0BB E106                       	smpsAlterNote       $06
0008B0BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0C1 E10C                       	smpsAlterNote       $0C
0008B0C3 E701                       	dc.b	smpsNoAttack, $01
0008B0C5 E110                       	smpsAlterNote       $10
0008B0C7 E701                       	dc.b	smpsNoAttack, $01
0008B0C9 E10F                       	smpsAlterNote       $0F
0008B0CB E701                       	dc.b	smpsNoAttack, $01
0008B0CD E109                       	smpsAlterNote       $09
0008B0CF E701                       	dc.b	smpsNoAttack, $01
0008B0D1 E105                       	smpsAlterNote       $05
0008B0D3 E701                       	dc.b	smpsNoAttack, $01
0008B0D5 E106                       	smpsAlterNote       $06
0008B0D7 800F                       	dc.b	nRst, $0F
0008B0DB E6FF                       	smpsAlterVol        $FF
0008B0DD E10F                       	smpsAlterNote       $0F
0008B0DF BA01                       	dc.b	nA4, $01
0008B0E1 E110                       	smpsAlterNote       $10
0008B0E3 BB02                       	dc.b	nBb4, $02
0008B0E5 E10F                       	smpsAlterNote       $0F
0008B0E7 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B0ED E10B                       	smpsAlterNote       $0B
0008B0EF BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B0F3 E10C                       	smpsAlterNote       $0C
0008B0F5 C103                       	dc.b	nE5, $03
0008B0F7 E10D                       	smpsAlterNote       $0D
0008B0F9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B103 E10B                       	smpsAlterNote       $0B
0008B105 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B109 E104                       	smpsAlterNote       $04
0008B10B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10F E10A                       	smpsAlterNote       $0A
0008B111 E701                       	dc.b	smpsNoAttack, $01
0008B113 E10D                       	smpsAlterNote       $0D
0008B115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B119 E107                       	smpsAlterNote       $07
0008B11B E701                       	dc.b	smpsNoAttack, $01
0008B11D E104                       	smpsAlterNote       $04
0008B11F 8001                       	dc.b	nRst, $01
0008B121 E110                       	smpsAlterNote       $10
0008B123 C703                       	dc.b	nBb5, $03
0008B125 E10F                       	smpsAlterNote       $0F
0008B127 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B12B E10D                       	smpsAlterNote       $0D
0008B12D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B131 E10C                       	smpsAlterNote       $0C
0008B133 E701                       	dc.b	smpsNoAttack, $01
0008B135 E108                       	smpsAlterNote       $08
0008B137 E701                       	dc.b	smpsNoAttack, $01
0008B139 E109                       	smpsAlterNote       $09
0008B13B E701                       	dc.b	smpsNoAttack, $01
0008B13D E10F                       	smpsAlterNote       $0F
0008B13F E701                       	dc.b	smpsNoAttack, $01
0008B141 E113                       	smpsAlterNote       $13
0008B143 E701                       	dc.b	smpsNoAttack, $01
0008B145 E10F                       	smpsAlterNote       $0F
0008B147 E701                       	dc.b	smpsNoAttack, $01
0008B149 E10C                       	smpsAlterNote       $0C
0008B14B E701                       	dc.b	smpsNoAttack, $01
0008B14D E108                       	smpsAlterNote       $08
0008B14F E701                       	dc.b	smpsNoAttack, $01
0008B151 E10C                       	smpsAlterNote       $0C
0008B153 E701                       	dc.b	smpsNoAttack, $01
0008B155 E112                       	smpsAlterNote       $12
0008B157 E701                       	dc.b	smpsNoAttack, $01
0008B159 E113                       	smpsAlterNote       $13
0008B15B E701                       	dc.b	smpsNoAttack, $01
0008B15D E10F                       	smpsAlterNote       $0F
0008B15F E701                       	dc.b	smpsNoAttack, $01
0008B161 E109                       	smpsAlterNote       $09
0008B163 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B167 E10C                       	smpsAlterNote       $0C
0008B169 E701                       	dc.b	smpsNoAttack, $01
0008B16B E112                       	smpsAlterNote       $12
0008B16D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B171 E10C                       	smpsAlterNote       $0C
0008B173 E701                       	dc.b	smpsNoAttack, $01
0008B175 E109                       	smpsAlterNote       $09
0008B177 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B17B E10F                       	smpsAlterNote       $0F
0008B17D E701                       	dc.b	smpsNoAttack, $01
0008B17F E113                       	smpsAlterNote       $13
0008B181 E701                       	dc.b	smpsNoAttack, $01
0008B183 E112                       	smpsAlterNote       $12
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E10C                       	smpsAlterNote       $0C
0008B189 E701                       	dc.b	smpsNoAttack, $01
0008B18B E108                       	smpsAlterNote       $08
0008B18D E701                       	dc.b	smpsNoAttack, $01
0008B18F E10C                       	smpsAlterNote       $0C
0008B191 E701                       	dc.b	smpsNoAttack, $01
0008B193 E10F                       	smpsAlterNote       $0F
0008B195 E701                       	dc.b	smpsNoAttack, $01
0008B197 E113                       	smpsAlterNote       $13
0008B199 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008B19D E10B                       	smpsAlterNote       $0B
0008B19F BF03                       	dc.b	nD5, $03
0008B1A1 E10C                       	smpsAlterNote       $0C
0008B1A3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B1A7 E10D                       	smpsAlterNote       $0D
0008B1A9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B1B3 E10B                       	smpsAlterNote       $0B
0008B1B5 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B1C1 E110                       	smpsAlterNote       $10
0008B1C3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B1C7 E10F                       	smpsAlterNote       $0F
0008B1C9 C604                       	dc.b	nA5, $04
0008B1CB E10D                       	smpsAlterNote       $0D
0008B1CD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B1D3 E109                       	smpsAlterNote       $09
0008B1D5 E701                       	dc.b	smpsNoAttack, $01
0008B1D7 E108                       	smpsAlterNote       $08
0008B1D9 E701                       	dc.b	smpsNoAttack, $01
0008B1DB E10C                       	smpsAlterNote       $0C
0008B1DD E701                       	dc.b	smpsNoAttack, $01
0008B1DF E112                       	smpsAlterNote       $12
0008B1E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1E5 E10F                       	smpsAlterNote       $0F
0008B1E7 E701                       	dc.b	smpsNoAttack, $01
0008B1E9 E109                       	smpsAlterNote       $09
0008B1EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1EF E10F                       	smpsAlterNote       $0F
0008B1F1 E701                       	dc.b	smpsNoAttack, $01
0008B1F3 E112                       	smpsAlterNote       $12
0008B1F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1F9 E10C                       	smpsAlterNote       $0C
0008B1FB E701                       	dc.b	smpsNoAttack, $01
0008B1FD E108                       	smpsAlterNote       $08
0008B1FF E701                       	dc.b	smpsNoAttack, $01
0008B201 E109                       	smpsAlterNote       $09
0008B203 E701                       	dc.b	smpsNoAttack, $01
0008B205 E10F                       	smpsAlterNote       $0F
0008B207 E701                       	dc.b	smpsNoAttack, $01
0008B209 E113                       	smpsAlterNote       $13
0008B20B E701                       	dc.b	smpsNoAttack, $01
0008B20D E10F                       	smpsAlterNote       $0F
0008B20F E701                       	dc.b	smpsNoAttack, $01
0008B211 E10C                       	smpsAlterNote       $0C
0008B213 E701                       	dc.b	smpsNoAttack, $01
0008B215 E108                       	smpsAlterNote       $08
0008B217 E701                       	dc.b	smpsNoAttack, $01
0008B219 E10C                       	smpsAlterNote       $0C
0008B21B E701                       	dc.b	smpsNoAttack, $01
0008B21D E112                       	smpsAlterNote       $12
0008B21F E701                       	dc.b	smpsNoAttack, $01
0008B221 E113                       	smpsAlterNote       $13
0008B223 E701                       	dc.b	smpsNoAttack, $01
0008B225 E10F                       	smpsAlterNote       $0F
0008B227 E701                       	dc.b	smpsNoAttack, $01
0008B229 E109                       	smpsAlterNote       $09
0008B22B E701                       	dc.b	smpsNoAttack, $01
0008B22D E10D                       	smpsAlterNote       $0D
0008B22F C402                       	dc.b	nG5, $02
0008B231 E10F                       	smpsAlterNote       $0F
0008B233 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008B23D E10D                       	smpsAlterNote       $0D
0008B23F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B245 E10B                       	smpsAlterNote       $0B
0008B247 BF0D                       	dc.b	nD5, $0D
0008B249 E108                       	smpsAlterNote       $08
0008B24B E701                       	dc.b	smpsNoAttack, $01
0008B24D E104                       	smpsAlterNote       $04
0008B24F E701                       	dc.b	smpsNoAttack, $01
0008B251 E105                       	smpsAlterNote       $05
0008B253 E701                       	dc.b	smpsNoAttack, $01
0008B255 E10B                       	smpsAlterNote       $0B
0008B257 E701                       	dc.b	smpsNoAttack, $01
0008B259 E10F                       	smpsAlterNote       $0F
0008B25B E701                       	dc.b	smpsNoAttack, $01
0008B25D E10B                       	smpsAlterNote       $0B
0008B25F E701                       	dc.b	smpsNoAttack, $01
0008B261 E108                       	smpsAlterNote       $08
0008B263 E701                       	dc.b	smpsNoAttack, $01
0008B265 E104                       	smpsAlterNote       $04
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E108                       	smpsAlterNote       $08
0008B26B E701                       	dc.b	smpsNoAttack, $01
0008B26D E10E                       	smpsAlterNote       $0E
0008B26F E701                       	dc.b	smpsNoAttack, $01
0008B271 E10F                       	smpsAlterNote       $0F
0008B273 E701                       	dc.b	smpsNoAttack, $01
0008B275 E10C                       	smpsAlterNote       $0C
0008B277 C101                       	dc.b	nE5, $01
0008B279 E10D                       	smpsAlterNote       $0D
0008B27B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B283 E10F                       	smpsAlterNote       $0F
0008B285 C607                       	dc.b	nA5, $07
0008B287 E10C                       	smpsAlterNote       $0C
0008B289 CD07                       	dc.b	nE6, $07
0008B28B E10D                       	smpsAlterNote       $0D
0008B28D CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B291 E10C                       	smpsAlterNote       $0C
0008B293 CD03                       	dc.b	nE6, $03
0008B295 E10A                       	smpsAlterNote       $0A
0008B297 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B29B E10D                       	smpsAlterNote       $0D
0008B29D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B2A3 E10A                       	smpsAlterNote       $0A
0008B2A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2A9 E110                       	smpsAlterNote       $10
0008B2AB E701                       	dc.b	smpsNoAttack, $01
0008B2AD E114                       	smpsAlterNote       $14
0008B2AF E701                       	dc.b	smpsNoAttack, $01
0008B2B1 E113                       	smpsAlterNote       $13
0008B2B3 E701                       	dc.b	smpsNoAttack, $01
0008B2B5 E10D                       	smpsAlterNote       $0D
0008B2B7 E701                       	dc.b	smpsNoAttack, $01
0008B2B9 E109                       	smpsAlterNote       $09
0008B2BB E701                       	dc.b	smpsNoAttack, $01
0008B2BD E10D                       	smpsAlterNote       $0D
0008B2BF E701                       	dc.b	smpsNoAttack, $01
0008B2C1 E110                       	smpsAlterNote       $10
0008B2C3 E701                       	dc.b	smpsNoAttack, $01
0008B2C5 E114                       	smpsAlterNote       $14
0008B2C7 E701                       	dc.b	smpsNoAttack, $01
0008B2C9 E10F                       	smpsAlterNote       $0F
0008B2CB C607                       	dc.b	nA5, $07
0008B2CD E10D                       	smpsAlterNote       $0D
0008B2CF C40D                       	dc.b	nG5, $0D
0008B2D1 E10A                       	smpsAlterNote       $0A
0008B2D3 E701                       	dc.b	smpsNoAttack, $01
0008B2D5 E106                       	smpsAlterNote       $06
0008B2D7 E701                       	dc.b	smpsNoAttack, $01
0008B2D9 E10A                       	smpsAlterNote       $0A
0008B2DB E701                       	dc.b	smpsNoAttack, $01
0008B2DD E10D                       	smpsAlterNote       $0D
0008B2DF E701                       	dc.b	smpsNoAttack, $01
0008B2E1 E111                       	smpsAlterNote       $11
0008B2E3 E701                       	dc.b	smpsNoAttack, $01
0008B2E5 E10D                       	smpsAlterNote       $0D
0008B2E7 E701                       	dc.b	smpsNoAttack, $01
0008B2E9 E107                       	smpsAlterNote       $07
0008B2EB E701                       	dc.b	smpsNoAttack, $01
0008B2ED E106                       	smpsAlterNote       $06
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E10A                       	smpsAlterNote       $0A
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E110                       	smpsAlterNote       $10
0008B2F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2FB E10D                       	smpsAlterNote       $0D
0008B2FD E701                       	dc.b	smpsNoAttack, $01
0008B2FF E107                       	smpsAlterNote       $07
0008B301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B305 E10F                       	smpsAlterNote       $0F
0008B307 C60E                       	dc.b	nA5, $0E
0008B309 E109                       	smpsAlterNote       $09
0008B30B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B30F E10F                       	smpsAlterNote       $0F
0008B311 E701                       	dc.b	smpsNoAttack, $01
0008B313 E112                       	smpsAlterNote       $12
0008B315 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B319 E10C                       	smpsAlterNote       $0C
0008B31B E701                       	dc.b	smpsNoAttack, $01
0008B31D E108                       	smpsAlterNote       $08
0008B31F E701                       	dc.b	smpsNoAttack, $01
0008B321 E109                       	smpsAlterNote       $09
0008B323 E701                       	dc.b	smpsNoAttack, $01
0008B325 E10F                       	smpsAlterNote       $0F
0008B327 E701                       	dc.b	smpsNoAttack, $01
0008B329 E113                       	smpsAlterNote       $13
0008B32B E701                       	dc.b	smpsNoAttack, $01
0008B32D E10F                       	smpsAlterNote       $0F
0008B32F E701                       	dc.b	smpsNoAttack, $01
0008B331 E10C                       	smpsAlterNote       $0C
0008B333 E701                       	dc.b	smpsNoAttack, $01
0008B335 E108                       	smpsAlterNote       $08
0008B337 E701                       	dc.b	smpsNoAttack, $01
0008B339 E109                       	smpsAlterNote       $09
0008B33B 8001                       	dc.b	nRst, $01
0008B33D E110                       	smpsAlterNote       $10
0008B33F C70D                       	dc.b	nBb5, $0D
0008B341 E10D                       	smpsAlterNote       $0D
0008B343 E701                       	dc.b	smpsNoAttack, $01
0008B345 E109                       	smpsAlterNote       $09
0008B347 E701                       	dc.b	smpsNoAttack, $01
0008B349 E10D                       	smpsAlterNote       $0D
0008B34B E701                       	dc.b	smpsNoAttack, $01
0008B34D E113                       	smpsAlterNote       $13
0008B34F E701                       	dc.b	smpsNoAttack, $01
0008B351 E114                       	smpsAlterNote       $14
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E110                       	smpsAlterNote       $10
0008B357 E701                       	dc.b	smpsNoAttack, $01
0008B359 E10A                       	smpsAlterNote       $0A
0008B35B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B35F E10D                       	smpsAlterNote       $0D
0008B361 E701                       	dc.b	smpsNoAttack, $01
0008B363 E113                       	smpsAlterNote       $13
0008B365 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B369 E10D                       	smpsAlterNote       $0D
0008B36B E701                       	dc.b	smpsNoAttack, $01
0008B36D E10A                       	smpsAlterNote       $0A
0008B36F E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008B379 E10B                       	smpsAlterNote       $0B
0008B37B 8001                       	dc.b	nRst, $01
0008B37D E10C                       	smpsAlterNote       $0C
0008B37F CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008B383 E10B                       	smpsAlterNote       $0B
0008B385 CB0D                       	dc.b	nD6, $0D
0008B387 E105                       	smpsAlterNote       $05
0008B389 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B38D E108                       	smpsAlterNote       $08
0008B38F E701                       	dc.b	smpsNoAttack, $01
0008B391 E10E                       	smpsAlterNote       $0E
0008B393 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B397 E108                       	smpsAlterNote       $08
0008B399 E701                       	dc.b	smpsNoAttack, $01
0008B39B E105                       	smpsAlterNote       $05
0008B39D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3A1 E10B                       	smpsAlterNote       $0B
0008B3A3 E701                       	dc.b	smpsNoAttack, $01
0008B3A5 E10F                       	smpsAlterNote       $0F
0008B3A7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B3AB E10C                       	smpsAlterNote       $0C
0008B3AD CC0D                       	dc.b	nEb6, $0D
0008B3AF E106                       	smpsAlterNote       $06
0008B3B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3B5 E109                       	smpsAlterNote       $09
0008B3B7 E701                       	dc.b	smpsNoAttack, $01
0008B3B9 E10C                       	smpsAlterNote       $0C
0008B3BB 8001                       	dc.b	nRst, $01
0008B3BD E10A                       	smpsAlterNote       $0A
0008B3BF C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008B3CB CB0E                       	dc.b	nD6, $0E
0008B3CD E105                       	smpsAlterNote       $05
0008B3CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3D3 E10B                       	smpsAlterNote       $0B
0008B3D5 E701                       	dc.b	smpsNoAttack, $01
0008B3D7 E10E                       	smpsAlterNote       $0E
0008B3D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3DD E108                       	smpsAlterNote       $08
0008B3DF E701                       	dc.b	smpsNoAttack, $01
0008B3E1 E104                       	smpsAlterNote       $04
0008B3E3 E701                       	dc.b	smpsNoAttack, $01
0008B3E5 E105                       	smpsAlterNote       $05
0008B3E7 E701                       	dc.b	smpsNoAttack, $01
0008B3E9 E10B                       	smpsAlterNote       $0B
0008B3EB E701                       	dc.b	smpsNoAttack, $01
0008B3ED E10F                       	smpsAlterNote       $0F
0008B3EF E701                       	dc.b	smpsNoAttack, $01
0008B3F1 E10D                       	smpsAlterNote       $0D
0008B3F3 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008B3F7 E10C                       	smpsAlterNote       $0C
0008B3F9 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008B3FD E10A                       	smpsAlterNote       $0A
0008B3FF C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008B40B CB0D                       	dc.b	nD6, $0D
0008B40D E108                       	smpsAlterNote       $08
0008B40F E701                       	dc.b	smpsNoAttack, $01
0008B411 E104                       	smpsAlterNote       $04
0008B413 E701                       	dc.b	smpsNoAttack, $01
0008B415 E105                       	smpsAlterNote       $05
0008B417 E701                       	dc.b	smpsNoAttack, $01
0008B419 E10B                       	smpsAlterNote       $0B
0008B41B E701                       	dc.b	smpsNoAttack, $01
0008B41D E10F                       	smpsAlterNote       $0F
0008B41F E701                       	dc.b	smpsNoAttack, $01
0008B421 E10B                       	smpsAlterNote       $0B
0008B423 E701                       	dc.b	smpsNoAttack, $01
0008B425 E108                       	smpsAlterNote       $08
0008B427 E701                       	dc.b	smpsNoAttack, $01
0008B429 E104                       	smpsAlterNote       $04
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E108                       	smpsAlterNote       $08
0008B42F E701                       	dc.b	smpsNoAttack, $01
0008B431 E10E                       	smpsAlterNote       $0E
0008B433 E701                       	dc.b	smpsNoAttack, $01
0008B435 E10F                       	smpsAlterNote       $0F
0008B437 E701                       	dc.b	smpsNoAttack, $01
0008B439 E10C                       	smpsAlterNote       $0C
0008B43B CC0D                       	dc.b	nEb6, $0D
0008B43D E109                       	smpsAlterNote       $09
0008B43F E701                       	dc.b	smpsNoAttack, $01
0008B441 E105                       	smpsAlterNote       $05
0008B443 E701                       	dc.b	smpsNoAttack, $01
0008B445 E106                       	smpsAlterNote       $06
0008B447 E701                       	dc.b	smpsNoAttack, $01
0008B449 E10C                       	smpsAlterNote       $0C
0008B44B E701                       	dc.b	smpsNoAttack, $01
0008B44D E10A                       	smpsAlterNote       $0A
0008B44F C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008B45B CB0D                       	dc.b	nD6, $0D
0008B45D E108                       	smpsAlterNote       $08
0008B45F E701                       	dc.b	smpsNoAttack, $01
0008B461 E104                       	smpsAlterNote       $04
0008B463 E701                       	dc.b	smpsNoAttack, $01
0008B465 E108                       	smpsAlterNote       $08
0008B467 E701                       	dc.b	smpsNoAttack, $01
0008B469 E10B                       	smpsAlterNote       $0B
0008B46B E701                       	dc.b	smpsNoAttack, $01
0008B46D E10F                       	smpsAlterNote       $0F
0008B46F E701                       	dc.b	smpsNoAttack, $01
0008B471 E10B                       	smpsAlterNote       $0B
0008B473 E701                       	dc.b	smpsNoAttack, $01
0008B475 E105                       	smpsAlterNote       $05
0008B477 E701                       	dc.b	smpsNoAttack, $01
0008B479 E104                       	smpsAlterNote       $04
0008B47B E701                       	dc.b	smpsNoAttack, $01
0008B47D E108                       	smpsAlterNote       $08
0008B47F E701                       	dc.b	smpsNoAttack, $01
0008B481 E10E                       	smpsAlterNote       $0E
0008B483 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B487 E10B                       	smpsAlterNote       $0B
0008B489 E701                       	dc.b	smpsNoAttack, $01
0008B48B E105                       	smpsAlterNote       $05
0008B48D E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008B495 03                         	dc.b	$03
0008B496 E601                       	smpsAlterVol        $01
0008B498 F6F1 D1                    	smpsJump            music84_Jump01
0008B49B                            
0008B49B                            ; FM5 Data
0008B49B                            music84_FM5:
0008B49D E080                       	smpsPan             panLeft, $00
0008B49F 8003                       	dc.b	nRst, $03
0008B4A1 E10D                       	smpsAlterNote       $0D
0008B4A3 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008B4A7 E10C                       	smpsAlterNote       $0C
0008B4A9 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008B4AD E10F                       	smpsAlterNote       $0F
0008B4AF BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008B4B5 E6FE                       	smpsAlterVol        $FE
0008B4B7 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008B4BD E10D                       	smpsAlterNote       $0D
0008B4BF C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008B4C5 E10C                       	smpsAlterNote       $0C
0008B4C7 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B4CB E10A                       	smpsAlterNote       $0A
0008B4CD BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008B4D3 03                         	dc.b	$03
0008B4D4                            
0008B4D4                            music84_Jump00:
0008B4D4 8004                       	dc.b	nRst, $04
0008B4D6 E602                       	smpsAlterVol        $02
0008B4D8 E10D                       	smpsAlterNote       $0D
0008B4DA B60D                       	dc.b	nF4, $0D
0008B4DC E107                       	smpsAlterNote       $07
0008B4DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4E2 E10A                       	smpsAlterNote       $0A
0008B4E4 E701                       	dc.b	smpsNoAttack, $01
0008B4E6 E110                       	smpsAlterNote       $10
0008B4E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4EC E10A                       	smpsAlterNote       $0A
0008B4EE E701                       	dc.b	smpsNoAttack, $01
0008B4F0 E107                       	smpsAlterNote       $07
0008B4F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4F6 E10D                       	smpsAlterNote       $0D
0008B4F8 E701                       	dc.b	smpsNoAttack, $01
0008B4FA E111                       	smpsAlterNote       $11
0008B4FC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B500 E10D                       	smpsAlterNote       $0D
0008B502 B80D                       	dc.b	nG4, $0D
0008B504 E107                       	smpsAlterNote       $07
0008B506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B50A E10A                       	smpsAlterNote       $0A
0008B50C E701                       	dc.b	smpsNoAttack, $01
0008B50E E110                       	smpsAlterNote       $10
0008B510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B514 E10A                       	smpsAlterNote       $0A
0008B516 E701                       	dc.b	smpsNoAttack, $01
0008B518 E107                       	smpsAlterNote       $07
0008B51A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B51E E10D                       	smpsAlterNote       $0D
0008B520 E701                       	dc.b	smpsNoAttack, $01
0008B522 E111                       	smpsAlterNote       $11
0008B524 E701                       	dc.b	smpsNoAttack, $01
0008B526 E110                       	smpsAlterNote       $10
0008B528 E701                       	dc.b	smpsNoAttack, $01
0008B52A E10A                       	smpsAlterNote       $0A
0008B52C E701                       	dc.b	smpsNoAttack, $01
0008B52E E106                       	smpsAlterNote       $06
0008B530 E701                       	dc.b	smpsNoAttack, $01
0008B532 E10A                       	smpsAlterNote       $0A
0008B534 E701                       	dc.b	smpsNoAttack, $01
0008B536 E10D                       	smpsAlterNote       $0D
0008B538 E701                       	dc.b	smpsNoAttack, $01
0008B53A E111                       	smpsAlterNote       $11
0008B53C E701                       	dc.b	smpsNoAttack, $01
0008B53E E10D                       	smpsAlterNote       $0D
0008B540 E701                       	dc.b	smpsNoAttack, $01
0008B542 E10F                       	smpsAlterNote       $0F
0008B544 BA0E                       	dc.b	nA4, $0E
0008B546 E109                       	smpsAlterNote       $09
0008B548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B54C E10F                       	smpsAlterNote       $0F
0008B54E E701                       	dc.b	smpsNoAttack, $01
0008B550 E112                       	smpsAlterNote       $12
0008B552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B556 E10C                       	smpsAlterNote       $0C
0008B558 E701                       	dc.b	smpsNoAttack, $01
0008B55A E108                       	smpsAlterNote       $08
0008B55C E701                       	dc.b	smpsNoAttack, $01
0008B55E E109                       	smpsAlterNote       $09
0008B560 E701                       	dc.b	smpsNoAttack, $01
0008B562 E10F                       	smpsAlterNote       $0F
0008B564 E701                       	dc.b	smpsNoAttack, $01
0008B566 E113                       	smpsAlterNote       $13
0008B568 E701                       	dc.b	smpsNoAttack, $01
0008B56A E10F                       	smpsAlterNote       $0F
0008B56C E701                       	dc.b	smpsNoAttack, $01
0008B56E E109                       	smpsAlterNote       $09
0008B570 E701                       	dc.b	smpsNoAttack, $01
0008B572 E108                       	smpsAlterNote       $08
0008B574 E701                       	dc.b	smpsNoAttack, $01
0008B576 E10C                       	smpsAlterNote       $0C
0008B578 E701                       	dc.b	smpsNoAttack, $01
0008B57A E112                       	smpsAlterNote       $12
0008B57C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B580 E10F                       	smpsAlterNote       $0F
0008B582 E701                       	dc.b	smpsNoAttack, $01
0008B584 E109                       	smpsAlterNote       $09
0008B586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B58A E10F                       	smpsAlterNote       $0F
0008B58C E701                       	dc.b	smpsNoAttack, $01
0008B58E E112                       	smpsAlterNote       $12
0008B590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B594 E10C                       	smpsAlterNote       $0C
0008B596 E701                       	dc.b	smpsNoAttack, $01
0008B598 E108                       	smpsAlterNote       $08
0008B59A E701                       	dc.b	smpsNoAttack, $01
0008B59C E109                       	smpsAlterNote       $09
0008B59E E701                       	dc.b	smpsNoAttack, $01
0008B5A0 E10F                       	smpsAlterNote       $0F
0008B5A2 E701                       	dc.b	smpsNoAttack, $01
0008B5A4 E113                       	smpsAlterNote       $13
0008B5A6 E701                       	dc.b	smpsNoAttack, $01
0008B5A8 E10F                       	smpsAlterNote       $0F
0008B5AA E701                       	dc.b	smpsNoAttack, $01
0008B5AC E10C                       	smpsAlterNote       $0C
0008B5AE E701                       	dc.b	smpsNoAttack, $01
0008B5B0 E108                       	smpsAlterNote       $08
0008B5B2 E701                       	dc.b	smpsNoAttack, $01
0008B5B4 E109                       	smpsAlterNote       $09
0008B5B6 8001                       	dc.b	nRst, $01
0008B5B8 E10C                       	smpsAlterNote       $0C
0008B5BA B50A                       	dc.b	nE4, $0A
0008B5BC E10D                       	smpsAlterNote       $0D
0008B5BE B60D                       	dc.b	nF4, $0D
0008B5C0 E10A                       	smpsAlterNote       $0A
0008B5C2 E701                       	dc.b	smpsNoAttack, $01
0008B5C4 E106                       	smpsAlterNote       $06
0008B5C6 E701                       	dc.b	smpsNoAttack, $01
0008B5C8 E107                       	smpsAlterNote       $07
0008B5CA E701                       	dc.b	smpsNoAttack, $01
0008B5CC E10D                       	smpsAlterNote       $0D
0008B5CE E701                       	dc.b	smpsNoAttack, $01
0008B5D0 E111                       	smpsAlterNote       $11
0008B5D2 E701                       	dc.b	smpsNoAttack, $01
0008B5D4 E10D                       	smpsAlterNote       $0D
0008B5D6 E701                       	dc.b	smpsNoAttack, $01
0008B5D8 E10A                       	smpsAlterNote       $0A
0008B5DA E701                       	dc.b	smpsNoAttack, $01
0008B5DC E106                       	smpsAlterNote       $06
0008B5DE E701                       	dc.b	smpsNoAttack, $01
0008B5E0 E10A                       	smpsAlterNote       $0A
0008B5E2 E701                       	dc.b	smpsNoAttack, $01
0008B5E4 E110                       	smpsAlterNote       $10
0008B5E6 E701                       	dc.b	smpsNoAttack, $01
0008B5E8 E111                       	smpsAlterNote       $11
0008B5EA E701                       	dc.b	smpsNoAttack, $01
0008B5EC E10D                       	smpsAlterNote       $0D
0008B5EE B80D                       	dc.b	nG4, $0D
0008B5F0 E10A                       	smpsAlterNote       $0A
0008B5F2 E701                       	dc.b	smpsNoAttack, $01
0008B5F4 E106                       	smpsAlterNote       $06
0008B5F6 E701                       	dc.b	smpsNoAttack, $01
0008B5F8 E107                       	smpsAlterNote       $07
0008B5FA E701                       	dc.b	smpsNoAttack, $01
0008B5FC E10D                       	smpsAlterNote       $0D
0008B5FE E701                       	dc.b	smpsNoAttack, $01
0008B600 E111                       	smpsAlterNote       $11
0008B602 E701                       	dc.b	smpsNoAttack, $01
0008B604 E10D                       	smpsAlterNote       $0D
0008B606 E701                       	dc.b	smpsNoAttack, $01
0008B608 E10A                       	smpsAlterNote       $0A
0008B60A E701                       	dc.b	smpsNoAttack, $01
0008B60C E106                       	smpsAlterNote       $06
0008B60E E701                       	dc.b	smpsNoAttack, $01
0008B610 E10A                       	smpsAlterNote       $0A
0008B612 E701                       	dc.b	smpsNoAttack, $01
0008B614 E110                       	smpsAlterNote       $10
0008B616 E701                       	dc.b	smpsNoAttack, $01
0008B618 E111                       	smpsAlterNote       $11
0008B61A E701                       	dc.b	smpsNoAttack, $01
0008B61C E10D                       	smpsAlterNote       $0D
0008B61E E701                       	dc.b	smpsNoAttack, $01
0008B620 E107                       	smpsAlterNote       $07
0008B622 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B626 E10A                       	smpsAlterNote       $0A
0008B628 E701                       	dc.b	smpsNoAttack, $01
0008B62A E110                       	smpsAlterNote       $10
0008B62C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B630 E10D                       	smpsAlterNote       $0D
0008B632 8001                       	dc.b	nRst, $01
0008B634 E10F                       	smpsAlterNote       $0F
0008B636 BA0D                       	dc.b	nA4, $0D
0008B638 E10C                       	smpsAlterNote       $0C
0008B63A E701                       	dc.b	smpsNoAttack, $01
0008B63C E108                       	smpsAlterNote       $08
0008B63E E701                       	dc.b	smpsNoAttack, $01
0008B640 E10C                       	smpsAlterNote       $0C
0008B642 E701                       	dc.b	smpsNoAttack, $01
0008B644 E112                       	smpsAlterNote       $12
0008B646 E701                       	dc.b	smpsNoAttack, $01
0008B648 E113                       	smpsAlterNote       $13
0008B64A E701                       	dc.b	smpsNoAttack, $01
0008B64C E10F                       	smpsAlterNote       $0F
0008B64E E701                       	dc.b	smpsNoAttack, $01
0008B650 E109                       	smpsAlterNote       $09
0008B652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B656 E10C                       	smpsAlterNote       $0C
0008B658 E701                       	dc.b	smpsNoAttack, $01
0008B65A E112                       	smpsAlterNote       $12
0008B65C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B660 E10C                       	smpsAlterNote       $0C
0008B662 E701                       	dc.b	smpsNoAttack, $01
0008B664 E109                       	smpsAlterNote       $09
0008B666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B66A E10F                       	smpsAlterNote       $0F
0008B66C E701                       	dc.b	smpsNoAttack, $01
0008B66E E113                       	smpsAlterNote       $13
0008B670 E701                       	dc.b	smpsNoAttack, $01
0008B672 E112                       	smpsAlterNote       $12
0008B674 E701                       	dc.b	smpsNoAttack, $01
0008B676 E10C                       	smpsAlterNote       $0C
0008B678 E701                       	dc.b	smpsNoAttack, $01
0008B67A E108                       	smpsAlterNote       $08
0008B67C E701                       	dc.b	smpsNoAttack, $01
0008B67E E10C                       	smpsAlterNote       $0C
0008B680 E701                       	dc.b	smpsNoAttack, $01
0008B682 E10F                       	smpsAlterNote       $0F
0008B684 E701                       	dc.b	smpsNoAttack, $01
0008B686 E113                       	smpsAlterNote       $13
0008B688 E701                       	dc.b	smpsNoAttack, $01
0008B68A E10F                       	smpsAlterNote       $0F
0008B68C E701                       	dc.b	smpsNoAttack, $01
0008B68E E109                       	smpsAlterNote       $09
0008B690 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B694 E10D                       	smpsAlterNote       $0D
0008B696 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008B69A E10C                       	smpsAlterNote       $0C
0008B69C B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B6A0 E10B                       	smpsAlterNote       $0B
0008B6A2 B30D                       	dc.b	nD4, $0D
0008B6A4 E10C                       	smpsAlterNote       $0C
0008B6A6 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008B6AA E10D                       	smpsAlterNote       $0D
0008B6AC B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008B6B4 E109                       	smpsAlterNote       $09
0008B6B6 E701                       	dc.b	smpsNoAttack, $01
0008B6B8 E108                       	smpsAlterNote       $08
0008B6BA E701                       	dc.b	smpsNoAttack, $01
0008B6BC E10C                       	smpsAlterNote       $0C
0008B6BE E701                       	dc.b	smpsNoAttack, $01
0008B6C0 E112                       	smpsAlterNote       $12
0008B6C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6C6 E10F                       	smpsAlterNote       $0F
0008B6C8 E701                       	dc.b	smpsNoAttack, $01
0008B6CA E109                       	smpsAlterNote       $09
0008B6CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6D0 E10F                       	smpsAlterNote       $0F
0008B6D2 E701                       	dc.b	smpsNoAttack, $01
0008B6D4 E112                       	smpsAlterNote       $12
0008B6D6 E701                       	dc.b	smpsNoAttack, $01
0008B6D8 E113                       	smpsAlterNote       $13
0008B6DA 8001                       	dc.b	nRst, $01
0008B6DC E10D                       	smpsAlterNote       $0D
0008B6DE C20D                       	dc.b	nF5, $0D
0008B6E0 E107                       	smpsAlterNote       $07
0008B6E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6E6 E10A                       	smpsAlterNote       $0A
0008B6E8 E701                       	dc.b	smpsNoAttack, $01
0008B6EA E110                       	smpsAlterNote       $10
0008B6EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6F0 E10A                       	smpsAlterNote       $0A
0008B6F2 E701                       	dc.b	smpsNoAttack, $01
0008B6F4 E107                       	smpsAlterNote       $07
0008B6F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6FA E10D                       	smpsAlterNote       $0D
0008B6FC E701                       	dc.b	smpsNoAttack, $01
0008B6FE E111                       	smpsAlterNote       $11
0008B700 E701                       	dc.b	smpsNoAttack, $01
0008B702 E110                       	smpsAlterNote       $10
0008B704 E701                       	dc.b	smpsNoAttack, $01
0008B706 E10A                       	smpsAlterNote       $0A
0008B708 E701                       	dc.b	smpsNoAttack, $01
0008B70A E106                       	smpsAlterNote       $06
0008B70C E701                       	dc.b	smpsNoAttack, $01
0008B70E E10A                       	smpsAlterNote       $0A
0008B710 E701                       	dc.b	smpsNoAttack, $01
0008B712 E10D                       	smpsAlterNote       $0D
0008B714 E701                       	dc.b	smpsNoAttack, $01
0008B716 E111                       	smpsAlterNote       $11
0008B718 E701                       	dc.b	smpsNoAttack, $01
0008B71A E10D                       	smpsAlterNote       $0D
0008B71C E701                       	dc.b	smpsNoAttack, $01
0008B71E E107                       	smpsAlterNote       $07
0008B720 E701                       	dc.b	smpsNoAttack, $01
0008B722 E106                       	smpsAlterNote       $06
0008B724 E701                       	dc.b	smpsNoAttack, $01
0008B726 E10A                       	smpsAlterNote       $0A
0008B728 E701                       	dc.b	smpsNoAttack, $01
0008B72A E110                       	smpsAlterNote       $10
0008B72C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B730 E10D                       	smpsAlterNote       $0D
0008B732 E701                       	dc.b	smpsNoAttack, $01
0008B734 E107                       	smpsAlterNote       $07
0008B736 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B73A E10D                       	smpsAlterNote       $0D
0008B73C E701                       	dc.b	smpsNoAttack, $01
0008B73E E110                       	smpsAlterNote       $10
0008B740 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B744 E10A                       	smpsAlterNote       $0A
0008B746 E701                       	dc.b	smpsNoAttack, $01
0008B748 E106                       	smpsAlterNote       $06
0008B74A E701                       	dc.b	smpsNoAttack, $01
0008B74C E107                       	smpsAlterNote       $07
0008B74E E701                       	dc.b	smpsNoAttack, $01
0008B750 E10D                       	smpsAlterNote       $0D
0008B752 E701                       	dc.b	smpsNoAttack, $01
0008B754 E111                       	smpsAlterNote       $11
0008B756 E701                       	dc.b	smpsNoAttack, $01
0008B758 E10D                       	smpsAlterNote       $0D
0008B75A E701                       	dc.b	smpsNoAttack, $01
0008B75C E10A                       	smpsAlterNote       $0A
0008B75E E701                       	dc.b	smpsNoAttack, $01
0008B760 E106                       	smpsAlterNote       $06
0008B762 E701                       	dc.b	smpsNoAttack, $01
0008B764 E10A                       	smpsAlterNote       $0A
0008B766 E701                       	dc.b	smpsNoAttack, $01
0008B768 E110                       	smpsAlterNote       $10
0008B76A E701                       	dc.b	smpsNoAttack, $01
0008B76C E111                       	smpsAlterNote       $11
0008B76E E701                       	dc.b	smpsNoAttack, $01
0008B770 E10D                       	smpsAlterNote       $0D
0008B772 E701                       	dc.b	smpsNoAttack, $01
0008B774 E107                       	smpsAlterNote       $07
0008B776 E701                       	dc.b	smpsNoAttack, $01
0008B778 E10D                       	smpsAlterNote       $0D
0008B77A C207                       	dc.b	nF5, $07
0008B77C E10C                       	smpsAlterNote       $0C
0008B77E C10D                       	dc.b	nE5, $0D
0008B780 E109                       	smpsAlterNote       $09
0008B782 E701                       	dc.b	smpsNoAttack, $01
0008B784 E106                       	smpsAlterNote       $06
0008B786 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B78A E10C                       	smpsAlterNote       $0C
0008B78C E701                       	dc.b	smpsNoAttack, $01
0008B78E E110                       	smpsAlterNote       $10
0008B790 E701                       	dc.b	smpsNoAttack, $01
0008B792 E10F                       	smpsAlterNote       $0F
0008B794 E701                       	dc.b	smpsNoAttack, $01
0008B796 E109                       	smpsAlterNote       $09
0008B798 E701                       	dc.b	smpsNoAttack, $01
0008B79A E105                       	smpsAlterNote       $05
0008B79C E701                       	dc.b	smpsNoAttack, $01
0008B79E E109                       	smpsAlterNote       $09
0008B7A0 E701                       	dc.b	smpsNoAttack, $01
0008B7A2 E10C                       	smpsAlterNote       $0C
0008B7A4 E701                       	dc.b	smpsNoAttack, $01
0008B7A6 E110                       	smpsAlterNote       $10
0008B7A8 E701                       	dc.b	smpsNoAttack, $01
0008B7AA E10B                       	smpsAlterNote       $0B
0008B7AC BF0D                       	dc.b	nD5, $0D
0008B7AE E108                       	smpsAlterNote       $08
0008B7B0 E701                       	dc.b	smpsNoAttack, $01
0008B7B2 E105                       	smpsAlterNote       $05
0008B7B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7B8 E10B                       	smpsAlterNote       $0B
0008B7BA E701                       	dc.b	smpsNoAttack, $01
0008B7BC E10F                       	smpsAlterNote       $0F
0008B7BE E701                       	dc.b	smpsNoAttack, $01
0008B7C0 E10E                       	smpsAlterNote       $0E
0008B7C2 E701                       	dc.b	smpsNoAttack, $01
0008B7C4 E108                       	smpsAlterNote       $08
0008B7C6 E701                       	dc.b	smpsNoAttack, $01
0008B7C8 E104                       	smpsAlterNote       $04
0008B7CA E701                       	dc.b	smpsNoAttack, $01
0008B7CC E108                       	smpsAlterNote       $08
0008B7CE E701                       	dc.b	smpsNoAttack, $01
0008B7D0 E10E                       	smpsAlterNote       $0E
0008B7D2 E701                       	dc.b	smpsNoAttack, $01
0008B7D4 E10F                       	smpsAlterNote       $0F
0008B7D6 E701                       	dc.b	smpsNoAttack, $01
0008B7D8 E10B                       	smpsAlterNote       $0B
0008B7DA E701                       	dc.b	smpsNoAttack, $01
0008B7DC E105                       	smpsAlterNote       $05
0008B7DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7E2 E108                       	smpsAlterNote       $08
0008B7E4 E701                       	dc.b	smpsNoAttack, $01
0008B7E6 E10E                       	smpsAlterNote       $0E
0008B7E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7EC E108                       	smpsAlterNote       $08
0008B7EE E701                       	dc.b	smpsNoAttack, $01
0008B7F0 E105                       	smpsAlterNote       $05
0008B7F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7F6 E10B                       	smpsAlterNote       $0B
0008B7F8 E701                       	dc.b	smpsNoAttack, $01
0008B7FA E10F                       	smpsAlterNote       $0F
0008B7FC E701                       	dc.b	smpsNoAttack, $01
0008B7FE E10E                       	smpsAlterNote       $0E
0008B800 E701                       	dc.b	smpsNoAttack, $01
0008B802 E108                       	smpsAlterNote       $08
0008B804 E701                       	dc.b	smpsNoAttack, $01
0008B806 E104                       	smpsAlterNote       $04
0008B808 E701                       	dc.b	smpsNoAttack, $01
0008B80A E108                       	smpsAlterNote       $08
0008B80C E701                       	dc.b	smpsNoAttack, $01
0008B80E E10B                       	smpsAlterNote       $0B
0008B810 E701                       	dc.b	smpsNoAttack, $01
0008B812 E10F                       	smpsAlterNote       $0F
0008B814 E701                       	dc.b	smpsNoAttack, $01
0008B816 E10B                       	smpsAlterNote       $0B
0008B818 E701                       	dc.b	smpsNoAttack, $01
0008B81A E105                       	smpsAlterNote       $05
0008B81C E701                       	dc.b	smpsNoAttack, $01
0008B81E E104                       	smpsAlterNote       $04
0008B820 E701                       	dc.b	smpsNoAttack, $01
0008B822 E108                       	smpsAlterNote       $08
0008B824 E701                       	dc.b	smpsNoAttack, $01
0008B826 E10E                       	smpsAlterNote       $0E
0008B828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B82C E10B                       	smpsAlterNote       $0B
0008B82E E701                       	dc.b	smpsNoAttack, $01
0008B830 E105                       	smpsAlterNote       $05
0008B832 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B836 E10B                       	smpsAlterNote       $0B
0008B838 E701                       	dc.b	smpsNoAttack, $01
0008B83A E10E                       	smpsAlterNote       $0E
0008B83C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B840 E108                       	smpsAlterNote       $08
0008B842 E701                       	dc.b	smpsNoAttack, $01
0008B844 E105                       	smpsAlterNote       $05
0008B846 8001                       	dc.b	nRst, $01
0008B84A E601                       	smpsAlterVol        $01
0008B84C E10B                       	smpsAlterNote       $0B
0008B84E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B85A 8004                       	dc.b	nRst, $04
0008B85E E6FF                       	smpsAlterVol        $FF
0008B860 E10D                       	smpsAlterNote       $0D
0008B862 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008B86A E10C                       	smpsAlterNote       $0C
0008B86C E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008B871 E10D                       	smpsAlterNote       $0D
0008B873 B60D                       	dc.b	nF4, $0D
0008B875 E10A                       	smpsAlterNote       $0A
0008B877 E701                       	dc.b	smpsNoAttack, $01
0008B879 E106                       	smpsAlterNote       $06
0008B87B E701                       	dc.b	smpsNoAttack, $01
0008B87D E10A                       	smpsAlterNote       $0A
0008B87F E701                       	dc.b	smpsNoAttack, $01
0008B881 E110                       	smpsAlterNote       $10
0008B883 E701                       	dc.b	smpsNoAttack, $01
0008B885 E111                       	smpsAlterNote       $11
0008B887 E701                       	dc.b	smpsNoAttack, $01
0008B889 E10D                       	smpsAlterNote       $0D
0008B88B E701                       	dc.b	smpsNoAttack, $01
0008B88D E107                       	smpsAlterNote       $07
0008B88F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B893 E10A                       	smpsAlterNote       $0A
0008B895 E701                       	dc.b	smpsNoAttack, $01
0008B897 E110                       	smpsAlterNote       $10
0008B899 E701                       	dc.b	smpsNoAttack, $01
0008B89B E111                       	smpsAlterNote       $11
0008B89D 8001                       	dc.b	nRst, $01
0008B89F E10D                       	smpsAlterNote       $0D
0008B8A1 B80D                       	dc.b	nG4, $0D
0008B8A3 E10A                       	smpsAlterNote       $0A
0008B8A5 E701                       	dc.b	smpsNoAttack, $01
0008B8A7 E106                       	smpsAlterNote       $06
0008B8A9 E701                       	dc.b	smpsNoAttack, $01
0008B8AB E10A                       	smpsAlterNote       $0A
0008B8AD E701                       	dc.b	smpsNoAttack, $01
0008B8AF E110                       	smpsAlterNote       $10
0008B8B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8B5 E10D                       	smpsAlterNote       $0D
0008B8B7 E701                       	dc.b	smpsNoAttack, $01
0008B8B9 E107                       	smpsAlterNote       $07
0008B8BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8BF E10D                       	smpsAlterNote       $0D
0008B8C1 E701                       	dc.b	smpsNoAttack, $01
0008B8C3 E110                       	smpsAlterNote       $10
0008B8C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8C9 E10A                       	smpsAlterNote       $0A
0008B8CB E701                       	dc.b	smpsNoAttack, $01
0008B8CD E106                       	smpsAlterNote       $06
0008B8CF E701                       	dc.b	smpsNoAttack, $01
0008B8D1 E107                       	smpsAlterNote       $07
0008B8D3 E701                       	dc.b	smpsNoAttack, $01
0008B8D5 E10D                       	smpsAlterNote       $0D
0008B8D7 E701                       	dc.b	smpsNoAttack, $01
0008B8D9 E111                       	smpsAlterNote       $11
0008B8DB E701                       	dc.b	smpsNoAttack, $01
0008B8DD E10D                       	smpsAlterNote       $0D
0008B8DF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B8E3 E10F                       	smpsAlterNote       $0F
0008B8E5 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008B8E9 E110                       	smpsAlterNote       $10
0008B8EB BB03                       	dc.b	nBb4, $03
0008B8ED E10F                       	smpsAlterNote       $0F
0008B8EF BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008B8F5 E110                       	smpsAlterNote       $10
0008B8F7 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008B8FB E10F                       	smpsAlterNote       $0F
0008B8FD C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008B903 E110                       	smpsAlterNote       $10
0008B905 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008B909 E10F                       	smpsAlterNote       $0F
0008B90B D20D                       	dc.b	nA6, $0D
0008B90D E10C                       	smpsAlterNote       $0C
0008B90F E701                       	dc.b	smpsNoAttack, $01
0008B911 E108                       	smpsAlterNote       $08
0008B913 E701                       	dc.b	smpsNoAttack, $01
0008B915 E10C                       	smpsAlterNote       $0C
0008B917 E701                       	dc.b	smpsNoAttack, $01
0008B919 E10F                       	smpsAlterNote       $0F
0008B91B E701                       	dc.b	smpsNoAttack, $01
0008B91D E113                       	smpsAlterNote       $13
0008B91F E701                       	dc.b	smpsNoAttack, $01
0008B921 E10F                       	smpsAlterNote       $0F
0008B923 E701                       	dc.b	smpsNoAttack, $01
0008B925 E109                       	smpsAlterNote       $09
0008B927 E701                       	dc.b	smpsNoAttack, $01
0008B929 E108                       	smpsAlterNote       $08
0008B92B E701                       	dc.b	smpsNoAttack, $01
0008B92D E10C                       	smpsAlterNote       $0C
0008B92F E701                       	dc.b	smpsNoAttack, $01
0008B931 E112                       	smpsAlterNote       $12
0008B933 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B937 E10F                       	smpsAlterNote       $0F
0008B939 E701                       	dc.b	smpsNoAttack, $01
0008B93B E109                       	smpsAlterNote       $09
0008B93D E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008B943 E10D                       	smpsAlterNote       $0D
0008B945 CE07                       	dc.b	nF6, $07
0008B947 E10C                       	smpsAlterNote       $0C
0008B949 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B94D E10D                       	smpsAlterNote       $0D
0008B94F CE03                       	dc.b	nF6, $03
0008B951 E10C                       	smpsAlterNote       $0C
0008B953 CC0D                       	dc.b	nEb6, $0D
0008B955 E109                       	smpsAlterNote       $09
0008B957 E701                       	dc.b	smpsNoAttack, $01
0008B959 E106                       	smpsAlterNote       $06
0008B95B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B95F E10C                       	smpsAlterNote       $0C
0008B961 E701                       	dc.b	smpsNoAttack, $01
0008B963 E110                       	smpsAlterNote       $10
0008B965 E701                       	dc.b	smpsNoAttack, $01
0008B967 E10F                       	smpsAlterNote       $0F
0008B969 E701                       	dc.b	smpsNoAttack, $01
0008B96B E109                       	smpsAlterNote       $09
0008B96D E701                       	dc.b	smpsNoAttack, $01
0008B96F E105                       	smpsAlterNote       $05
0008B971 E701                       	dc.b	smpsNoAttack, $01
0008B973 E109                       	smpsAlterNote       $09
0008B975 E701                       	dc.b	smpsNoAttack, $01
0008B977 E10C                       	smpsAlterNote       $0C
0008B979 E701                       	dc.b	smpsNoAttack, $01
0008B97B E110                       	smpsAlterNote       $10
0008B97D E701                       	dc.b	smpsNoAttack, $01
0008B97F E10C                       	smpsAlterNote       $0C
0008B981 E701                       	dc.b	smpsNoAttack, $01
0008B983 E106                       	smpsAlterNote       $06
0008B985 E701                       	dc.b	smpsNoAttack, $01
0008B987 E105                       	smpsAlterNote       $05
0008B989 E701                       	dc.b	smpsNoAttack, $01
0008B98B E109                       	smpsAlterNote       $09
0008B98D E701                       	dc.b	smpsNoAttack, $01
0008B98F E10F                       	smpsAlterNote       $0F
0008B991 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B995 E10C                       	smpsAlterNote       $0C
0008B997 E701                       	dc.b	smpsNoAttack, $01
0008B999 E10B                       	smpsAlterNote       $0B
0008B99B CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008B9A5 E10F                       	smpsAlterNote       $0F
0008B9A7 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008B9B1 E10D                       	smpsAlterNote       $0D
0008B9B3 C203                       	dc.b	nF5, $03
0008B9B5 E10C                       	smpsAlterNote       $0C
0008B9B7 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B9BB E10D                       	smpsAlterNote       $0D
0008B9BD C20D                       	dc.b	nF5, $0D
0008B9BF E10C                       	smpsAlterNote       $0C
0008B9C1 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008B9C5 E10B                       	smpsAlterNote       $0B
0008B9C7 BF0D                       	dc.b	nD5, $0D
0008B9C9 E108                       	smpsAlterNote       $08
0008B9CB E701                       	dc.b	smpsNoAttack, $01
0008B9CD E104                       	smpsAlterNote       $04
0008B9CF E701                       	dc.b	smpsNoAttack, $01
0008B9D1 E108                       	smpsAlterNote       $08
0008B9D3 E701                       	dc.b	smpsNoAttack, $01
0008B9D5 E10E                       	smpsAlterNote       $0E
0008B9D7 E701                       	dc.b	smpsNoAttack, $01
0008B9D9 E10F                       	smpsAlterNote       $0F
0008B9DB E701                       	dc.b	smpsNoAttack, $01
0008B9DD E10B                       	smpsAlterNote       $0B
0008B9DF E701                       	dc.b	smpsNoAttack, $01
0008B9E1 E105                       	smpsAlterNote       $05
0008B9E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9E7 E108                       	smpsAlterNote       $08
0008B9E9 E701                       	dc.b	smpsNoAttack, $01
0008B9EB E10E                       	smpsAlterNote       $0E
0008B9ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9F1 E108                       	smpsAlterNote       $08
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E105                       	smpsAlterNote       $05
0008B9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9FB E10B                       	smpsAlterNote       $0B
0008B9FD E701                       	dc.b	smpsNoAttack, $01
0008B9FF E10F                       	smpsAlterNote       $0F
0008BA01 E701                       	dc.b	smpsNoAttack, $01
0008BA03 E10E                       	smpsAlterNote       $0E
0008BA05 E701                       	dc.b	smpsNoAttack, $01
0008BA07 E108                       	smpsAlterNote       $08
0008BA09 E701                       	dc.b	smpsNoAttack, $01
0008BA0B E104                       	smpsAlterNote       $04
0008BA0D E701                       	dc.b	smpsNoAttack, $01
0008BA0F E108                       	smpsAlterNote       $08
0008BA11 E701                       	dc.b	smpsNoAttack, $01
0008BA13 E10B                       	smpsAlterNote       $0B
0008BA15 E701                       	dc.b	smpsNoAttack, $01
0008BA17 E10F                       	smpsAlterNote       $0F
0008BA19 E701                       	dc.b	smpsNoAttack, $01
0008BA1B E10B                       	smpsAlterNote       $0B
0008BA1D E701                       	dc.b	smpsNoAttack, $01
0008BA1F E105                       	smpsAlterNote       $05
0008BA21 E701                       	dc.b	smpsNoAttack, $01
0008BA23 E104                       	smpsAlterNote       $04
0008BA25 E701                       	dc.b	smpsNoAttack, $01
0008BA27 E108                       	smpsAlterNote       $08
0008BA29 E701                       	dc.b	smpsNoAttack, $01
0008BA2B E10E                       	smpsAlterNote       $0E
0008BA2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA31 E10B                       	smpsAlterNote       $0B
0008BA33 E701                       	dc.b	smpsNoAttack, $01
0008BA35 E105                       	smpsAlterNote       $05
0008BA37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA3B E10B                       	smpsAlterNote       $0B
0008BA3D E701                       	dc.b	smpsNoAttack, $01
0008BA3F E10E                       	smpsAlterNote       $0E
0008BA41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA45 E108                       	smpsAlterNote       $08
0008BA47 E701                       	dc.b	smpsNoAttack, $01
0008BA49 E104                       	smpsAlterNote       $04
0008BA4B E701                       	dc.b	smpsNoAttack, $01
0008BA4D E105                       	smpsAlterNote       $05
0008BA4F E701                       	dc.b	smpsNoAttack, $01
0008BA51 E10B                       	smpsAlterNote       $0B
0008BA53 E701                       	dc.b	smpsNoAttack, $01
0008BA55 E10F                       	smpsAlterNote       $0F
0008BA57 E701                       	dc.b	smpsNoAttack, $01
0008BA59 E10B                       	smpsAlterNote       $0B
0008BA5B E701                       	dc.b	smpsNoAttack, $01
0008BA5D E108                       	smpsAlterNote       $08
0008BA5F E701                       	dc.b	smpsNoAttack, $01
0008BA61 E104                       	smpsAlterNote       $04
0008BA63 E701                       	dc.b	smpsNoAttack, $01
0008BA65 E108                       	smpsAlterNote       $08
0008BA67 E701                       	dc.b	smpsNoAttack, $01
0008BA69 E10E                       	smpsAlterNote       $0E
0008BA6B E701                       	dc.b	smpsNoAttack, $01
0008BA6D E10F                       	smpsAlterNote       $0F
0008BA6F E701                       	dc.b	smpsNoAttack, $01
0008BA71 E10B                       	smpsAlterNote       $0B
0008BA73 E701                       	dc.b	smpsNoAttack, $01
0008BA75 E105                       	smpsAlterNote       $05
0008BA77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA7B E108                       	smpsAlterNote       $08
0008BA7D E701                       	dc.b	smpsNoAttack, $01
0008BA7F E10E                       	smpsAlterNote       $0E
0008BA81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA85 E108                       	smpsAlterNote       $08
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E105                       	smpsAlterNote       $05
0008BA8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA8F E10B                       	smpsAlterNote       $0B
0008BA91 E701                       	dc.b	smpsNoAttack, $01
0008BA93 E10F                       	smpsAlterNote       $0F
0008BA95 E701                       	dc.b	smpsNoAttack, $01
0008BA97 E10E                       	smpsAlterNote       $0E
0008BA99 E701                       	dc.b	smpsNoAttack, $01
0008BA9B E108                       	smpsAlterNote       $08
0008BA9D E701                       	dc.b	smpsNoAttack, $01
0008BA9F E104                       	smpsAlterNote       $04
0008BAA1 E701                       	dc.b	smpsNoAttack, $01
0008BAA3 E108                       	smpsAlterNote       $08
0008BAA5 E701                       	dc.b	smpsNoAttack, $01
0008BAA7 E10B                       	smpsAlterNote       $0B
0008BAA9 E701                       	dc.b	smpsNoAttack, $01
0008BAAB E10F                       	smpsAlterNote       $0F
0008BAAD E701                       	dc.b	smpsNoAttack, $01
0008BAAF E10B                       	smpsAlterNote       $0B
0008BAB1 E701                       	dc.b	smpsNoAttack, $01
0008BAB3 E105                       	smpsAlterNote       $05
0008BAB5 E701                       	dc.b	smpsNoAttack, $01
0008BAB7 E104                       	smpsAlterNote       $04
0008BAB9 E701                       	dc.b	smpsNoAttack, $01
0008BABB E105                       	smpsAlterNote       $05
0008BABD 8001                       	dc.b	nRst, $01
0008BABF E10D                       	smpsAlterNote       $0D
0008BAC1 C20D                       	dc.b	nF5, $0D
0008BAC3 E107                       	smpsAlterNote       $07
0008BAC5 E701                       	dc.b	smpsNoAttack, $01
0008BAC7 E106                       	smpsAlterNote       $06
0008BAC9 E701                       	dc.b	smpsNoAttack, $01
0008BACB E10A                       	smpsAlterNote       $0A
0008BACD E701                       	dc.b	smpsNoAttack, $01
0008BACF E110                       	smpsAlterNote       $10
0008BAD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAD5 E10D                       	smpsAlterNote       $0D
0008BAD7 E701                       	dc.b	smpsNoAttack, $01
0008BAD9 E107                       	smpsAlterNote       $07
0008BADB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BADF E10D                       	smpsAlterNote       $0D
0008BAE1 E701                       	dc.b	smpsNoAttack, $01
0008BAE3 E110                       	smpsAlterNote       $10
0008BAE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAE9 E10A                       	smpsAlterNote       $0A
0008BAEB E701                       	dc.b	smpsNoAttack, $01
0008BAED E106                       	smpsAlterNote       $06
0008BAEF E701                       	dc.b	smpsNoAttack, $01
0008BAF1 E107                       	smpsAlterNote       $07
0008BAF3 E701                       	dc.b	smpsNoAttack, $01
0008BAF5 E10D                       	smpsAlterNote       $0D
0008BAF7 E701                       	dc.b	smpsNoAttack, $01
0008BAF9 E111                       	smpsAlterNote       $11
0008BAFB E701                       	dc.b	smpsNoAttack, $01
0008BAFD E10D                       	smpsAlterNote       $0D
0008BAFF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BB03 E10C                       	smpsAlterNote       $0C
0008BB05 C10D                       	dc.b	nE5, $0D
0008BB07 E10D                       	smpsAlterNote       $0D
0008BB09 C20A                       	dc.b	nF5, $0A
0008BB0B E10C                       	smpsAlterNote       $0C
0008BB0D C10E                       	dc.b	nE5, $0E
0008BB0F E106                       	smpsAlterNote       $06
0008BB11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB15 E10C                       	smpsAlterNote       $0C
0008BB17 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BB1B E10B                       	smpsAlterNote       $0B
0008BB1D BF0D                       	dc.b	nD5, $0D
0008BB1F E10C                       	smpsAlterNote       $0C
0008BB21 C107                       	dc.b	nE5, $07
0008BB23 E10D                       	smpsAlterNote       $0D
0008BB25 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008BB2F E110                       	smpsAlterNote       $10
0008BB31 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008BB37 E10F                       	smpsAlterNote       $0F
0008BB39 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008BB41 E10D                       	smpsAlterNote       $0D
0008BB43 D003                       	dc.b	nG6, $03
0008BB47 E0C0                       	smpsPan             panCenter, $00
0008BB49 E6FF                       	smpsAlterVol        $FF
0008BB4B AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008BB57 8001                       	dc.b	nRst, $01
0008BB59 E10C                       	smpsAlterNote       $0C
0008BB5B A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008BB65 E604                       	smpsAlterVol        $04
0008BB67 E10B                       	smpsAlterNote       $0B
0008BB69 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008BB6D E10F                       	smpsAlterNote       $0F
0008BB6F AE03                       	dc.b	nA3, $03
0008BB71 E10D                       	smpsAlterNote       $0D
0008BB73 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BB77 E10C                       	smpsAlterNote       $0C
0008BB79 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BB7D E10B                       	smpsAlterNote       $0B
0008BB7F B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BB83 E10A                       	smpsAlterNote       $0A
0008BB85 B103                       	dc.b	nC4, $03
0008BB87 E110                       	smpsAlterNote       $10
0008BB89 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BB8D E10F                       	smpsAlterNote       $0F
0008BB8F AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008BB93 E080                       	smpsPan             panLeft, $00
0008BB95 01                         	dc.b	$01
0008BB98 E6FB                       	smpsAlterVol        $FB
0008BB9A E1E4                       	smpsAlterNote       $E4
0008BB9C C501                       	dc.b	nAb5, $01
0008BB9E E1F4                       	smpsAlterNote       $F4
0008BBA0 E701                       	dc.b	smpsNoAttack, $01
0008BBA2 E104                       	smpsAlterNote       $04
0008BBA4 E701                       	dc.b	smpsNoAttack, $01
0008BBA6 E114                       	smpsAlterNote       $14
0008BBA8 E701                       	dc.b	smpsNoAttack, $01
0008BBAA E11C                       	smpsAlterNote       $1C
0008BBAC E701                       	dc.b	smpsNoAttack, $01
0008BBAE E1EF                       	smpsAlterNote       $EF
0008BBB0 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008BBB3 E1FF                       	smpsAlterNote       $FF
0008BBB5 E701                       	dc.b	smpsNoAttack, $01
0008BBB7 E10F                       	smpsAlterNote       $0F
0008BBB9 C606                       	dc.b	nA5, $06
0008BBBB E109                       	smpsAlterNote       $09
0008BBBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBC1 E10F                       	smpsAlterNote       $0F
0008BBC3 E701                       	dc.b	smpsNoAttack, $01
0008BBC5 E112                       	smpsAlterNote       $12
0008BBC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBCB E10C                       	smpsAlterNote       $0C
0008BBCD E701                       	dc.b	smpsNoAttack, $01
0008BBCF E108                       	smpsAlterNote       $08
0008BBD1 E701                       	dc.b	smpsNoAttack, $01
0008BBD3 E109                       	smpsAlterNote       $09
0008BBD5 E701                       	dc.b	smpsNoAttack, $01
0008BBD7 E10F                       	smpsAlterNote       $0F
0008BBD9 E701                       	dc.b	smpsNoAttack, $01
0008BBDB E113                       	smpsAlterNote       $13
0008BBDD E701                       	dc.b	smpsNoAttack, $01
0008BBDF E10F                       	smpsAlterNote       $0F
0008BBE1 E701                       	dc.b	smpsNoAttack, $01
0008BBE3 E10C                       	smpsAlterNote       $0C
0008BBE5 E701                       	dc.b	smpsNoAttack, $01
0008BBE7 E108                       	smpsAlterNote       $08
0008BBE9 E701                       	dc.b	smpsNoAttack, $01
0008BBEB E10C                       	smpsAlterNote       $0C
0008BBED E701                       	dc.b	smpsNoAttack, $01
0008BBEF E112                       	smpsAlterNote       $12
0008BBF1 E701                       	dc.b	smpsNoAttack, $01
0008BBF3 E113                       	smpsAlterNote       $13
0008BBF5 E701                       	dc.b	smpsNoAttack, $01
0008BBF7 E10F                       	smpsAlterNote       $0F
0008BBF9 E701                       	dc.b	smpsNoAttack, $01
0008BBFB E109                       	smpsAlterNote       $09
0008BBFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC01 E10C                       	smpsAlterNote       $0C
0008BC03 E701                       	dc.b	smpsNoAttack, $01
0008BC05 E112                       	smpsAlterNote       $12
0008BC07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC0B E10C                       	smpsAlterNote       $0C
0008BC0D E701                       	dc.b	smpsNoAttack, $01
0008BC0F E109                       	smpsAlterNote       $09
0008BC11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC15 E10F                       	smpsAlterNote       $0F
0008BC17 E701                       	dc.b	smpsNoAttack, $01
0008BC19 E113                       	smpsAlterNote       $13
0008BC1B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC1F E10D                       	smpsAlterNote       $0D
0008BC21 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008BC27 E10C                       	smpsAlterNote       $0C
0008BC29 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BC2D E10D                       	smpsAlterNote       $0D
0008BC2F C201 8001                  	dc.b	nF5, $01, nRst, $01
0008BC33 E10C                       	smpsAlterNote       $0C
0008BC35 C102                       	dc.b	nE5, $02
0008BC37 E10B                       	smpsAlterNote       $0B
0008BC39 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008BC3D E10C                       	smpsAlterNote       $0C
0008BC3F C101 8001                  	dc.b	nE5, $01, nRst, $01
0008BC43 E10B                       	smpsAlterNote       $0B
0008BC45 BF02                       	dc.b	nD5, $02
0008BC47 E10A                       	smpsAlterNote       $0A
0008BC49 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008BC53 E110                       	smpsAlterNote       $10
0008BC55 BB02                       	dc.b	nBb4, $02
0008BC57 E10A                       	smpsAlterNote       $0A
0008BC59 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008BC5D E110                       	smpsAlterNote       $10
0008BC5F BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008BC63 E10F                       	smpsAlterNote       $0F
0008BC65 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008BC69 E110                       	smpsAlterNote       $10
0008BC6B BB02                       	dc.b	nBb4, $02
0008BC6D E10F                       	smpsAlterNote       $0F
0008BC6F BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008BC79 E10C                       	smpsAlterNote       $0C
0008BC7B B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008BC83 E10B                       	smpsAlterNote       $0B
0008BC85 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008BC89 E10F                       	smpsAlterNote       $0F
0008BC8B BA02                       	dc.b	nA4, $02
0008BC8F E0C0                       	smpsPan             panCenter, $00
0008BC91 E601                       	smpsAlterVol        $01
0008BC93 E109                       	smpsAlterNote       $09
0008BC95 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008BCA1 E108                       	smpsAlterNote       $08
0008BCA3 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008BCA9 E107                       	smpsAlterNote       $07
0008BCAB B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008BCB1 E109                       	smpsAlterNote       $09
0008BCB3 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BCB7 E108                       	smpsAlterNote       $08
0008BCB9 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BCBD E107                       	smpsAlterNote       $07
0008BCBF B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BCC3 E106                       	smpsAlterNote       $06
0008BCC5 B103                       	dc.b	nC4, $03
0008BCC7 E10C                       	smpsAlterNote       $0C
0008BCC9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BCCF E080                       	smpsPan             panLeft, $00
0008BCD1 07                         	dc.b	$07
0008BCD2 E6FE                       	smpsAlterVol        $FE
0008BCD4 E10B                       	smpsAlterNote       $0B
0008BCD6 B20D                       	dc.b	nCs4, $0D
0008BCD8 E105                       	smpsAlterNote       $05
0008BCDA E701                       	dc.b	smpsNoAttack, $01
0008BCDC E104                       	smpsAlterNote       $04
0008BCDE E701                       	dc.b	smpsNoAttack, $01
0008BCE0 E108                       	smpsAlterNote       $08
0008BCE2 E701                       	dc.b	smpsNoAttack, $01
0008BCE4 E10E                       	smpsAlterNote       $0E
0008BCE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BCEA E10B                       	smpsAlterNote       $0B
0008BCEC E701                       	dc.b	smpsNoAttack, $01
0008BCEE E105                       	smpsAlterNote       $05
0008BCF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BCF4 E10B                       	smpsAlterNote       $0B
0008BCF6 E701                       	dc.b	smpsNoAttack, $01
0008BCF8 E10E                       	smpsAlterNote       $0E
0008BCFA E701                       	dc.b	smpsNoAttack, $01
0008BCFC E10F                       	smpsAlterNote       $0F
0008BCFE 8001                       	dc.b	nRst, $01
0008BD00 E10B                       	smpsAlterNote       $0B
0008BD02 B30D                       	dc.b	nD4, $0D
0008BD04 E105                       	smpsAlterNote       $05
0008BD06 E701                       	dc.b	smpsNoAttack, $01
0008BD08 E104                       	smpsAlterNote       $04
0008BD0A E701                       	dc.b	smpsNoAttack, $01
0008BD0C E108                       	smpsAlterNote       $08
0008BD0E E701                       	dc.b	smpsNoAttack, $01
0008BD10 E10E                       	smpsAlterNote       $0E
0008BD12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD16 E10B                       	smpsAlterNote       $0B
0008BD18 E701                       	dc.b	smpsNoAttack, $01
0008BD1A E105                       	smpsAlterNote       $05
0008BD1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD20 E10B                       	smpsAlterNote       $0B
0008BD22 E701                       	dc.b	smpsNoAttack, $01
0008BD24 E10E                       	smpsAlterNote       $0E
0008BD26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD2A E108                       	smpsAlterNote       $08
0008BD2C E701                       	dc.b	smpsNoAttack, $01
0008BD2E E104                       	smpsAlterNote       $04
0008BD30 E701                       	dc.b	smpsNoAttack, $01
0008BD32 E105                       	smpsAlterNote       $05
0008BD34 E701                       	dc.b	smpsNoAttack, $01
0008BD36 E10B                       	smpsAlterNote       $0B
0008BD38 E701                       	dc.b	smpsNoAttack, $01
0008BD3A E10F                       	smpsAlterNote       $0F
0008BD3C E701                       	dc.b	smpsNoAttack, $01
0008BD3E E10B                       	smpsAlterNote       $0B
0008BD40 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD44 E10C                       	smpsAlterNote       $0C
0008BD46 B50D                       	dc.b	nE4, $0D
0008BD48 E106                       	smpsAlterNote       $06
0008BD4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD4E E10C                       	smpsAlterNote       $0C
0008BD50 E701                       	dc.b	smpsNoAttack, $01
0008BD52 E10F                       	smpsAlterNote       $0F
0008BD54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD58 E109                       	smpsAlterNote       $09
0008BD5A E701                       	dc.b	smpsNoAttack, $01
0008BD5C E105                       	smpsAlterNote       $05
0008BD5E E701                       	dc.b	smpsNoAttack, $01
0008BD60 E106                       	smpsAlterNote       $06
0008BD62 E701                       	dc.b	smpsNoAttack, $01
0008BD64 E10C                       	smpsAlterNote       $0C
0008BD66 E701                       	dc.b	smpsNoAttack, $01
0008BD68 E110                       	smpsAlterNote       $10
0008BD6A E701                       	dc.b	smpsNoAttack, $01
0008BD6C E10B                       	smpsAlterNote       $0B
0008BD6E B30E                       	dc.b	nD4, $0E
0008BD70 E105                       	smpsAlterNote       $05
0008BD72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD76 E10B                       	smpsAlterNote       $0B
0008BD78 E701                       	dc.b	smpsNoAttack, $01
0008BD7A E10E                       	smpsAlterNote       $0E
0008BD7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD80 E108                       	smpsAlterNote       $08
0008BD82 E701                       	dc.b	smpsNoAttack, $01
0008BD84 E104                       	smpsAlterNote       $04
0008BD86 E701                       	dc.b	smpsNoAttack, $01
0008BD88 E105                       	smpsAlterNote       $05
0008BD8A E701                       	dc.b	smpsNoAttack, $01
0008BD8C E10B                       	smpsAlterNote       $0B
0008BD8E E701                       	dc.b	smpsNoAttack, $01
0008BD90 E10F                       	smpsAlterNote       $0F
0008BD92 E701                       	dc.b	smpsNoAttack, $01
0008BD94 E10B                       	smpsAlterNote       $0B
0008BD96 E701                       	dc.b	smpsNoAttack, $01
0008BD98 E108                       	smpsAlterNote       $08
0008BD9A E701                       	dc.b	smpsNoAttack, $01
0008BD9C E104                       	smpsAlterNote       $04
0008BD9E E701                       	dc.b	smpsNoAttack, $01
0008BDA0 E108                       	smpsAlterNote       $08
0008BDA2 E701                       	dc.b	smpsNoAttack, $01
0008BDA4 E10E                       	smpsAlterNote       $0E
0008BDA6 E701                       	dc.b	smpsNoAttack, $01
0008BDA8 E10F                       	smpsAlterNote       $0F
0008BDAA E701                       	dc.b	smpsNoAttack, $01
0008BDAC E10B                       	smpsAlterNote       $0B
0008BDAE E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008BDB2 E108                       	smpsAlterNote       $08
0008BDB4 E701                       	dc.b	smpsNoAttack, $01
0008BDB6 E105                       	smpsAlterNote       $05
0008BDB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDBC E10B                       	smpsAlterNote       $0B
0008BDBE E701                       	dc.b	smpsNoAttack, $01
0008BDC0 E10F                       	smpsAlterNote       $0F
0008BDC2 E701                       	dc.b	smpsNoAttack, $01
0008BDC4 E10E                       	smpsAlterNote       $0E
0008BDC6 E701                       	dc.b	smpsNoAttack, $01
0008BDC8 E108                       	smpsAlterNote       $08
0008BDCA E701                       	dc.b	smpsNoAttack, $01
0008BDCC E104                       	smpsAlterNote       $04
0008BDCE E701                       	dc.b	smpsNoAttack, $01
0008BDD0 E108                       	smpsAlterNote       $08
0008BDD2 E701                       	dc.b	smpsNoAttack, $01
0008BDD4 E10B                       	smpsAlterNote       $0B
0008BDD6 E701                       	dc.b	smpsNoAttack, $01
0008BDD8 E10F                       	smpsAlterNote       $0F
0008BDDA E701                       	dc.b	smpsNoAttack, $01
0008BDDC E10B                       	smpsAlterNote       $0B
0008BDDE B30D                       	dc.b	nD4, $0D
0008BDE0 E108                       	smpsAlterNote       $08
0008BDE2 E701                       	dc.b	smpsNoAttack, $01
0008BDE4 E105                       	smpsAlterNote       $05
0008BDE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDEA E10B                       	smpsAlterNote       $0B
0008BDEC E701                       	dc.b	smpsNoAttack, $01
0008BDEE E10F                       	smpsAlterNote       $0F
0008BDF0 E701                       	dc.b	smpsNoAttack, $01
0008BDF2 E10E                       	smpsAlterNote       $0E
0008BDF4 E701                       	dc.b	smpsNoAttack, $01
0008BDF6 E108                       	smpsAlterNote       $08
0008BDF8 E701                       	dc.b	smpsNoAttack, $01
0008BDFA E104                       	smpsAlterNote       $04
0008BDFC E701                       	dc.b	smpsNoAttack, $01
0008BDFE E108                       	smpsAlterNote       $08
0008BE00 E701                       	dc.b	smpsNoAttack, $01
0008BE02 E10B                       	smpsAlterNote       $0B
0008BE04 E701                       	dc.b	smpsNoAttack, $01
0008BE06 E10F                       	smpsAlterNote       $0F
0008BE08 E701                       	dc.b	smpsNoAttack, $01
0008BE0A E10B                       	smpsAlterNote       $0B
0008BE0C E701                       	dc.b	smpsNoAttack, $01
0008BE0E E105                       	smpsAlterNote       $05
0008BE10 E701                       	dc.b	smpsNoAttack, $01
0008BE12 E104                       	smpsAlterNote       $04
0008BE14 E701                       	dc.b	smpsNoAttack, $01
0008BE16 E108                       	smpsAlterNote       $08
0008BE18 E701                       	dc.b	smpsNoAttack, $01
0008BE1A E10E                       	smpsAlterNote       $0E
0008BE1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE20 E10B                       	smpsAlterNote       $0B
0008BE22 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008BE26 E108                       	smpsAlterNote       $08
0008BE28 E701                       	dc.b	smpsNoAttack, $01
0008BE2A E104                       	smpsAlterNote       $04
0008BE2C E701                       	dc.b	smpsNoAttack, $01
0008BE2E E108                       	smpsAlterNote       $08
0008BE30 E701                       	dc.b	smpsNoAttack, $01
0008BE32 E10B                       	smpsAlterNote       $0B
0008BE34 E701                       	dc.b	smpsNoAttack, $01
0008BE38 E0C0                       	smpsPan             panCenter, $00
0008BE3A E601                       	smpsAlterVol        $01
0008BE3C E108                       	smpsAlterNote       $08
0008BE3E A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008BE4A 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008BE52 E080                       	smpsPan             panLeft, $00
0008BE54 07                         	dc.b	$07
0008BE55 E6FF                       	smpsAlterVol        $FF
0008BE57 E10D                       	smpsAlterNote       $0D
0008BE59 B60D                       	dc.b	nF4, $0D
0008BE5B E10A                       	smpsAlterNote       $0A
0008BE5D E701                       	dc.b	smpsNoAttack, $01
0008BE5F E106                       	smpsAlterNote       $06
0008BE61 E701                       	dc.b	smpsNoAttack, $01
0008BE63 E10A                       	smpsAlterNote       $0A
0008BE65 E701                       	dc.b	smpsNoAttack, $01
0008BE67 E110                       	smpsAlterNote       $10
0008BE69 E701                       	dc.b	smpsNoAttack, $01
0008BE6B E111                       	smpsAlterNote       $11
0008BE6D E701                       	dc.b	smpsNoAttack, $01
0008BE6F E10D                       	smpsAlterNote       $0D
0008BE71 E701                       	dc.b	smpsNoAttack, $01
0008BE73 E107                       	smpsAlterNote       $07
0008BE75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE79 E10A                       	smpsAlterNote       $0A
0008BE7B E701                       	dc.b	smpsNoAttack, $01
0008BE7D E110                       	smpsAlterNote       $10
0008BE7F E701                       	dc.b	smpsNoAttack, $01
0008BE81 E111                       	smpsAlterNote       $11
0008BE83 8001                       	dc.b	nRst, $01
0008BE85 E10D                       	smpsAlterNote       $0D
0008BE87 B80D                       	dc.b	nG4, $0D
0008BE89 E10A                       	smpsAlterNote       $0A
0008BE8B E701                       	dc.b	smpsNoAttack, $01
0008BE8D E106                       	smpsAlterNote       $06
0008BE8F E701                       	dc.b	smpsNoAttack, $01
0008BE91 E10A                       	smpsAlterNote       $0A
0008BE93 E701                       	dc.b	smpsNoAttack, $01
0008BE95 E110                       	smpsAlterNote       $10
0008BE97 E701                       	dc.b	smpsNoAttack, $01
0008BE99 E111                       	smpsAlterNote       $11
0008BE9B E701                       	dc.b	smpsNoAttack, $01
0008BE9D E10D                       	smpsAlterNote       $0D
0008BE9F E701                       	dc.b	smpsNoAttack, $01
0008BEA1 E107                       	smpsAlterNote       $07
0008BEA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEA7 E10D                       	smpsAlterNote       $0D
0008BEA9 E701                       	dc.b	smpsNoAttack, $01
0008BEAB E110                       	smpsAlterNote       $10
0008BEAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEB1 E10A                       	smpsAlterNote       $0A
0008BEB3 E701                       	dc.b	smpsNoAttack, $01
0008BEB5 E106                       	smpsAlterNote       $06
0008BEB7 E701                       	dc.b	smpsNoAttack, $01
0008BEB9 E107                       	smpsAlterNote       $07
0008BEBB E701                       	dc.b	smpsNoAttack, $01
0008BEBD E10D                       	smpsAlterNote       $0D
0008BEBF E701                       	dc.b	smpsNoAttack, $01
0008BEC1 E111                       	smpsAlterNote       $11
0008BEC3 E701                       	dc.b	smpsNoAttack, $01
0008BEC5 E10D                       	smpsAlterNote       $0D
0008BEC7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BECB E10F                       	smpsAlterNote       $0F
0008BECD BA0D                       	dc.b	nA4, $0D
0008BECF E109                       	smpsAlterNote       $09
0008BED1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BED5 E10C                       	smpsAlterNote       $0C
0008BED7 E701                       	dc.b	smpsNoAttack, $01
0008BED9 E112                       	smpsAlterNote       $12
0008BEDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEDF E10C                       	smpsAlterNote       $0C
0008BEE1 E701                       	dc.b	smpsNoAttack, $01
0008BEE3 E109                       	smpsAlterNote       $09
0008BEE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEE9 E10F                       	smpsAlterNote       $0F
0008BEEB E701                       	dc.b	smpsNoAttack, $01
0008BEED E113                       	smpsAlterNote       $13
0008BEEF E701                       	dc.b	smpsNoAttack, $01
0008BEF1 E112                       	smpsAlterNote       $12
0008BEF3 E701                       	dc.b	smpsNoAttack, $01
0008BEF5 E10C                       	smpsAlterNote       $0C
0008BEF7 E701                       	dc.b	smpsNoAttack, $01
0008BEF9 E108                       	smpsAlterNote       $08
0008BEFB E701                       	dc.b	smpsNoAttack, $01
0008BEFD E10C                       	smpsAlterNote       $0C
0008BEFF E701                       	dc.b	smpsNoAttack, $01
0008BF01 E10F                       	smpsAlterNote       $0F
0008BF03 E701                       	dc.b	smpsNoAttack, $01
0008BF05 E113                       	smpsAlterNote       $13
0008BF07 E701                       	dc.b	smpsNoAttack, $01
0008BF09 E10F                       	smpsAlterNote       $0F
0008BF0B E701                       	dc.b	smpsNoAttack, $01
0008BF0D E109                       	smpsAlterNote       $09
0008BF0F E701                       	dc.b	smpsNoAttack, $01
0008BF11 E108                       	smpsAlterNote       $08
0008BF13 E701                       	dc.b	smpsNoAttack, $01
0008BF15 E10C                       	smpsAlterNote       $0C
0008BF17 E701                       	dc.b	smpsNoAttack, $01
0008BF19 E112                       	smpsAlterNote       $12
0008BF1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF1F E10F                       	smpsAlterNote       $0F
0008BF21 E701                       	dc.b	smpsNoAttack, $01
0008BF23 E109                       	smpsAlterNote       $09
0008BF25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF29 E10F                       	smpsAlterNote       $0F
0008BF2B E701                       	dc.b	smpsNoAttack, $01
0008BF2D E112                       	smpsAlterNote       $12
0008BF2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF33 E10C                       	smpsAlterNote       $0C
0008BF35 E701                       	dc.b	smpsNoAttack, $01
0008BF37 E108                       	smpsAlterNote       $08
0008BF39 E701                       	dc.b	smpsNoAttack, $01
0008BF3B E109                       	smpsAlterNote       $09
0008BF3D E701                       	dc.b	smpsNoAttack, $01
0008BF3F E10C                       	smpsAlterNote       $0C
0008BF41 B50A                       	dc.b	nE4, $0A
0008BF43 E10D                       	smpsAlterNote       $0D
0008BF45 B60E                       	dc.b	nF4, $0E
0008BF47 E107                       	smpsAlterNote       $07
0008BF49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF4D E10D                       	smpsAlterNote       $0D
0008BF4F E701                       	dc.b	smpsNoAttack, $01
0008BF51 E110                       	smpsAlterNote       $10
0008BF53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF57 E10A                       	smpsAlterNote       $0A
0008BF59 E701                       	dc.b	smpsNoAttack, $01
0008BF5B E106                       	smpsAlterNote       $06
0008BF5D E701                       	dc.b	smpsNoAttack, $01
0008BF5F E107                       	smpsAlterNote       $07
0008BF61 E701                       	dc.b	smpsNoAttack, $01
0008BF63 E10D                       	smpsAlterNote       $0D
0008BF65 E701                       	dc.b	smpsNoAttack, $01
0008BF67 E111                       	smpsAlterNote       $11
0008BF69 E701                       	dc.b	smpsNoAttack, $01
0008BF6B E10D                       	smpsAlterNote       $0D
0008BF6D B80D                       	dc.b	nG4, $0D
0008BF6F E10A                       	smpsAlterNote       $0A
0008BF71 E701                       	dc.b	smpsNoAttack, $01
0008BF73 E107                       	smpsAlterNote       $07
0008BF75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF79 E10D                       	smpsAlterNote       $0D
0008BF7B E701                       	dc.b	smpsNoAttack, $01
0008BF7D E111                       	smpsAlterNote       $11
0008BF7F E701                       	dc.b	smpsNoAttack, $01
0008BF81 E110                       	smpsAlterNote       $10
0008BF83 E701                       	dc.b	smpsNoAttack, $01
0008BF85 E10A                       	smpsAlterNote       $0A
0008BF87 E701                       	dc.b	smpsNoAttack, $01
0008BF89 E106                       	smpsAlterNote       $06
0008BF8B E701                       	dc.b	smpsNoAttack, $01
0008BF8D E10A                       	smpsAlterNote       $0A
0008BF8F E701                       	dc.b	smpsNoAttack, $01
0008BF91 E10D                       	smpsAlterNote       $0D
0008BF93 E701                       	dc.b	smpsNoAttack, $01
0008BF95 E111                       	smpsAlterNote       $11
0008BF97 E701                       	dc.b	smpsNoAttack, $01
0008BF99 E10D                       	smpsAlterNote       $0D
0008BF9B E701                       	dc.b	smpsNoAttack, $01
0008BF9D E107                       	smpsAlterNote       $07
0008BF9F E701                       	dc.b	smpsNoAttack, $01
0008BFA1 E106                       	smpsAlterNote       $06
0008BFA3 E701                       	dc.b	smpsNoAttack, $01
0008BFA5 E10A                       	smpsAlterNote       $0A
0008BFA7 E701                       	dc.b	smpsNoAttack, $01
0008BFA9 E110                       	smpsAlterNote       $10
0008BFAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFAF E10D                       	smpsAlterNote       $0D
0008BFB1 E701                       	dc.b	smpsNoAttack, $01
0008BFB3 E10F                       	smpsAlterNote       $0F
0008BFB5 BA0D                       	dc.b	nA4, $0D
0008BFB7 E10C                       	smpsAlterNote       $0C
0008BFB9 E701                       	dc.b	smpsNoAttack, $01
0008BFBB E108                       	smpsAlterNote       $08
0008BFBD E701                       	dc.b	smpsNoAttack, $01
0008BFBF E109                       	smpsAlterNote       $09
0008BFC1 E701                       	dc.b	smpsNoAttack, $01
0008BFC3 E10F                       	smpsAlterNote       $0F
0008BFC5 E701                       	dc.b	smpsNoAttack, $01
0008BFC7 E113                       	smpsAlterNote       $13
0008BFC9 E701                       	dc.b	smpsNoAttack, $01
0008BFCB E10F                       	smpsAlterNote       $0F
0008BFCD E701                       	dc.b	smpsNoAttack, $01
0008BFCF E10C                       	smpsAlterNote       $0C
0008BFD1 E701                       	dc.b	smpsNoAttack, $01
0008BFD3 E108                       	smpsAlterNote       $08
0008BFD5 E701                       	dc.b	smpsNoAttack, $01
0008BFD7 E10C                       	smpsAlterNote       $0C
0008BFD9 E701                       	dc.b	smpsNoAttack, $01
0008BFDB E112                       	smpsAlterNote       $12
0008BFDD E701                       	dc.b	smpsNoAttack, $01
0008BFDF E113                       	smpsAlterNote       $13
0008BFE1 E701                       	dc.b	smpsNoAttack, $01
0008BFE3 E10F                       	smpsAlterNote       $0F
0008BFE5 E701                       	dc.b	smpsNoAttack, $01
0008BFE7 E109                       	smpsAlterNote       $09
0008BFE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFED E10C                       	smpsAlterNote       $0C
0008BFEF E701                       	dc.b	smpsNoAttack, $01
0008BFF1 E112                       	smpsAlterNote       $12
0008BFF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFF7 E10C                       	smpsAlterNote       $0C
0008BFF9 E701                       	dc.b	smpsNoAttack, $01
0008BFFB E109                       	smpsAlterNote       $09
0008BFFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C001 E10F                       	smpsAlterNote       $0F
0008C003 E701                       	dc.b	smpsNoAttack, $01
0008C005 E113                       	smpsAlterNote       $13
0008C007 E701                       	dc.b	smpsNoAttack, $01
0008C009 E112                       	smpsAlterNote       $12
0008C00B E701                       	dc.b	smpsNoAttack, $01
0008C00D E10C                       	smpsAlterNote       $0C
0008C00F E701                       	dc.b	smpsNoAttack, $01
0008C011 E109                       	smpsAlterNote       $09
0008C013 8001                       	dc.b	nRst, $01
0008C015 E10D                       	smpsAlterNote       $0D
0008C017 B60A                       	dc.b	nF4, $0A
0008C019 E10C                       	smpsAlterNote       $0C
0008C01B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C01F E10B                       	smpsAlterNote       $0B
0008C021 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C025 E10C                       	smpsAlterNote       $0C
0008C027 B503                       	dc.b	nE4, $03
0008C029 E10D                       	smpsAlterNote       $0D
0008C02B B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C035 E10C                       	smpsAlterNote       $0C
0008C037 E701                       	dc.b	smpsNoAttack, $01
0008C039 E108                       	smpsAlterNote       $08
0008C03B E701                       	dc.b	smpsNoAttack, $01
0008C03D E10C                       	smpsAlterNote       $0C
0008C03F E701                       	dc.b	smpsNoAttack, $01
0008C041 E112                       	smpsAlterNote       $12
0008C043 E701                       	dc.b	smpsNoAttack, $01
0008C045 E113                       	smpsAlterNote       $13
0008C047 E701                       	dc.b	smpsNoAttack, $01
0008C049 E10F                       	smpsAlterNote       $0F
0008C04B E701                       	dc.b	smpsNoAttack, $01
0008C04D E109                       	smpsAlterNote       $09
0008C04F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C053 E10C                       	smpsAlterNote       $0C
0008C055 E701                       	dc.b	smpsNoAttack, $01
0008C057 E112                       	smpsAlterNote       $12
0008C059 E701                       	dc.b	smpsNoAttack, $01
0008C05B E113                       	smpsAlterNote       $13
0008C05D 8001                       	dc.b	nRst, $01
0008C05F E10D                       	smpsAlterNote       $0D
0008C061 C20D                       	dc.b	nF5, $0D
0008C063 E10A                       	smpsAlterNote       $0A
0008C065 E701                       	dc.b	smpsNoAttack, $01
0008C067 E106                       	smpsAlterNote       $06
0008C069 E701                       	dc.b	smpsNoAttack, $01
0008C06B E10A                       	smpsAlterNote       $0A
0008C06D E701                       	dc.b	smpsNoAttack, $01
0008C06F E110                       	smpsAlterNote       $10
0008C071 E701                       	dc.b	smpsNoAttack, $01
0008C073 E111                       	smpsAlterNote       $11
0008C075 E701                       	dc.b	smpsNoAttack, $01
0008C077 E10D                       	smpsAlterNote       $0D
0008C079 E701                       	dc.b	smpsNoAttack, $01
0008C07B E107                       	smpsAlterNote       $07
0008C07D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C081 E10A                       	smpsAlterNote       $0A
0008C083 E701                       	dc.b	smpsNoAttack, $01
0008C085 E110                       	smpsAlterNote       $10
0008C087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C08B E10A                       	smpsAlterNote       $0A
0008C08D E701                       	dc.b	smpsNoAttack, $01
0008C08F E107                       	smpsAlterNote       $07
0008C091 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C095 E10D                       	smpsAlterNote       $0D
0008C097 E701                       	dc.b	smpsNoAttack, $01
0008C099 E111                       	smpsAlterNote       $11
0008C09B E701                       	dc.b	smpsNoAttack, $01
0008C09D E110                       	smpsAlterNote       $10
0008C09F E701                       	dc.b	smpsNoAttack, $01
0008C0A1 E10A                       	smpsAlterNote       $0A
0008C0A3 E701                       	dc.b	smpsNoAttack, $01
0008C0A5 E106                       	smpsAlterNote       $06
0008C0A7 E701                       	dc.b	smpsNoAttack, $01
0008C0A9 E10A                       	smpsAlterNote       $0A
0008C0AB E701                       	dc.b	smpsNoAttack, $01
0008C0AD E10D                       	smpsAlterNote       $0D
0008C0AF E701                       	dc.b	smpsNoAttack, $01
0008C0B1 E111                       	smpsAlterNote       $11
0008C0B3 E701                       	dc.b	smpsNoAttack, $01
0008C0B5 E10D                       	smpsAlterNote       $0D
0008C0B7 E701                       	dc.b	smpsNoAttack, $01
0008C0B9 E107                       	smpsAlterNote       $07
0008C0BB E701                       	dc.b	smpsNoAttack, $01
0008C0BD E106                       	smpsAlterNote       $06
0008C0BF E701                       	dc.b	smpsNoAttack, $01
0008C0C1 E10A                       	smpsAlterNote       $0A
0008C0C3 E701                       	dc.b	smpsNoAttack, $01
0008C0C5 E110                       	smpsAlterNote       $10
0008C0C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0CB E10D                       	smpsAlterNote       $0D
0008C0CD E701                       	dc.b	smpsNoAttack, $01
0008C0CF E107                       	smpsAlterNote       $07
0008C0D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0D5 E10D                       	smpsAlterNote       $0D
0008C0D7 E701                       	dc.b	smpsNoAttack, $01
0008C0D9 E110                       	smpsAlterNote       $10
0008C0DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0DF E10A                       	smpsAlterNote       $0A
0008C0E1 E701                       	dc.b	smpsNoAttack, $01
0008C0E3 E106                       	smpsAlterNote       $06
0008C0E5 E701                       	dc.b	smpsNoAttack, $01
0008C0E7 E107                       	smpsAlterNote       $07
0008C0E9 E701                       	dc.b	smpsNoAttack, $01
0008C0EB E10D                       	smpsAlterNote       $0D
0008C0ED E701                       	dc.b	smpsNoAttack, $01
0008C0EF E111                       	smpsAlterNote       $11
0008C0F1 E701                       	dc.b	smpsNoAttack, $01
0008C0F3 E10D                       	smpsAlterNote       $0D
0008C0F5 E701                       	dc.b	smpsNoAttack, $01
0008C0F7 E10A                       	smpsAlterNote       $0A
0008C0F9 E701                       	dc.b	smpsNoAttack, $01
0008C0FB E107                       	smpsAlterNote       $07
0008C0FD 8001                       	dc.b	nRst, $01
0008C0FF E10D                       	smpsAlterNote       $0D
0008C101 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C107 E601                       	smpsAlterVol        $01
0008C109 E110                       	smpsAlterNote       $10
0008C10B BB0D                       	dc.b	nBb4, $0D
0008C10D E10A                       	smpsAlterNote       $0A
0008C10F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C113 E110                       	smpsAlterNote       $10
0008C115 E701                       	dc.b	smpsNoAttack, $01
0008C117 E113                       	smpsAlterNote       $13
0008C119 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C11D E10D                       	smpsAlterNote       $0D
0008C11F E701                       	dc.b	smpsNoAttack, $01
0008C121 E109                       	smpsAlterNote       $09
0008C123 E701                       	dc.b	smpsNoAttack, $01
0008C125 E10A                       	smpsAlterNote       $0A
0008C127 E701                       	dc.b	smpsNoAttack, $01
0008C129 E110                       	smpsAlterNote       $10
0008C12B E701                       	dc.b	smpsNoAttack, $01
0008C12D E114                       	smpsAlterNote       $14
0008C12F E701                       	dc.b	smpsNoAttack, $01
0008C131 E110                       	smpsAlterNote       $10
0008C133 E701                       	dc.b	smpsNoAttack, $01
0008C135 E10D                       	smpsAlterNote       $0D
0008C137 E701                       	dc.b	smpsNoAttack, $01
0008C139 E109                       	smpsAlterNote       $09
0008C13B E701                       	dc.b	smpsNoAttack, $01
0008C13D E10A                       	smpsAlterNote       $0A
0008C13F 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C143 E107                       	smpsAlterNote       $07
0008C145 E701                       	dc.b	smpsNoAttack, $01
0008C147 E103                       	smpsAlterNote       $03
0008C149 E701                       	dc.b	smpsNoAttack, $01
0008C14B E107                       	smpsAlterNote       $07
0008C14D E701                       	dc.b	smpsNoAttack, $01
0008C14F E10D                       	smpsAlterNote       $0D
0008C151 E701                       	dc.b	smpsNoAttack, $01
0008C153 E10E                       	smpsAlterNote       $0E
0008C155 E701                       	dc.b	smpsNoAttack, $01
0008C157 E10A                       	smpsAlterNote       $0A
0008C159 E701                       	dc.b	smpsNoAttack, $01
0008C15B E104                       	smpsAlterNote       $04
0008C15D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C161 E107                       	smpsAlterNote       $07
0008C163 E701                       	dc.b	smpsNoAttack, $01
0008C165 E10D                       	smpsAlterNote       $0D
0008C167 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C16B E107                       	smpsAlterNote       $07
0008C16D E701                       	dc.b	smpsNoAttack, $01
0008C16F E104                       	smpsAlterNote       $04
0008C171 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C175 E10B                       	smpsAlterNote       $0B
0008C177 BF0D                       	dc.b	nD5, $0D
0008C179 E108                       	smpsAlterNote       $08
0008C17B E701                       	dc.b	smpsNoAttack, $01
0008C17D E105                       	smpsAlterNote       $05
0008C17F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C183 E10B                       	smpsAlterNote       $0B
0008C185 E701                       	dc.b	smpsNoAttack, $01
0008C187 E10F                       	smpsAlterNote       $0F
0008C189 E701                       	dc.b	smpsNoAttack, $01
0008C18B E10E                       	smpsAlterNote       $0E
0008C18D E701                       	dc.b	smpsNoAttack, $01
0008C18F E108                       	smpsAlterNote       $08
0008C191 E701                       	dc.b	smpsNoAttack, $01
0008C193 E104                       	smpsAlterNote       $04
0008C195 E701                       	dc.b	smpsNoAttack, $01
0008C197 E108                       	smpsAlterNote       $08
0008C199 E701                       	dc.b	smpsNoAttack, $01
0008C19B E10B                       	smpsAlterNote       $0B
0008C19D E701                       	dc.b	smpsNoAttack, $01
0008C19F E10F                       	smpsAlterNote       $0F
0008C1A1 E701                       	dc.b	smpsNoAttack, $01
0008C1A3 E10B                       	smpsAlterNote       $0B
0008C1A5 E701                       	dc.b	smpsNoAttack, $01
0008C1A7 E105                       	smpsAlterNote       $05
0008C1A9 E701                       	dc.b	smpsNoAttack, $01
0008C1AB E104                       	smpsAlterNote       $04
0008C1AD E701                       	dc.b	smpsNoAttack, $01
0008C1AF E105                       	smpsAlterNote       $05
0008C1B1 8001                       	dc.b	nRst, $01
0008C1B3 E10C                       	smpsAlterNote       $0C
0008C1B5 C10C                       	dc.b	nE5, $0C
0008C1B7 E10D                       	smpsAlterNote       $0D
0008C1B9 C201                       	dc.b	nF5, $01
0008C1BB E10E                       	smpsAlterNote       $0E
0008C1BD C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008C1C1 E10D                       	smpsAlterNote       $0D
0008C1C3 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008C1C7 E10A                       	smpsAlterNote       $0A
0008C1C9 E701                       	dc.b	smpsNoAttack, $01
0008C1CB E106                       	smpsAlterNote       $06
0008C1CD E701                       	dc.b	smpsNoAttack, $01
0008C1CF E10A                       	smpsAlterNote       $0A
0008C1D1 E701                       	dc.b	smpsNoAttack, $01
0008C1D3 E10D                       	smpsAlterNote       $0D
0008C1D5 E701                       	dc.b	smpsNoAttack, $01
0008C1D7 E111                       	smpsAlterNote       $11
0008C1D9 E701                       	dc.b	smpsNoAttack, $01
0008C1DB E10D                       	smpsAlterNote       $0D
0008C1DD E701                       	dc.b	smpsNoAttack, $01
0008C1DF E107                       	smpsAlterNote       $07
0008C1E1 E701                       	dc.b	smpsNoAttack, $01
0008C1E3 E106                       	smpsAlterNote       $06
0008C1E5 E701                       	dc.b	smpsNoAttack, $01
0008C1E7 E10A                       	smpsAlterNote       $0A
0008C1E9 E701                       	dc.b	smpsNoAttack, $01
0008C1EB E110                       	smpsAlterNote       $10
0008C1ED E701                       	dc.b	smpsNoAttack, $01
0008C1EF E111                       	smpsAlterNote       $11
0008C1F1 8001                       	dc.b	nRst, $01
0008C1F3 E10D                       	smpsAlterNote       $0D
0008C1F5 C40D                       	dc.b	nG5, $0D
0008C1F7 E10A                       	smpsAlterNote       $0A
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E106                       	smpsAlterNote       $06
0008C1FD E701                       	dc.b	smpsNoAttack, $01
0008C1FF E10A                       	smpsAlterNote       $0A
0008C201 E701                       	dc.b	smpsNoAttack, $01
0008C203 E10D                       	smpsAlterNote       $0D
0008C205 E701                       	dc.b	smpsNoAttack, $01
0008C207 E10C                       	smpsAlterNote       $0C
0008C209 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008C215 8001                       	dc.b	nRst, $01
0008C217 E10D                       	smpsAlterNote       $0D
0008C219 C20D                       	dc.b	nF5, $0D
0008C21B E10A                       	smpsAlterNote       $0A
0008C21D E701                       	dc.b	smpsNoAttack, $01
0008C21F E106                       	smpsAlterNote       $06
0008C221 E701                       	dc.b	smpsNoAttack, $01
0008C223 E10A                       	smpsAlterNote       $0A
0008C225 E701                       	dc.b	smpsNoAttack, $01
0008C227 E110                       	smpsAlterNote       $10
0008C229 E701                       	dc.b	smpsNoAttack, $01
0008C22B E111                       	smpsAlterNote       $11
0008C22D E701                       	dc.b	smpsNoAttack, $01
0008C22F E10D                       	smpsAlterNote       $0D
0008C231 E701                       	dc.b	smpsNoAttack, $01
0008C233 E107                       	smpsAlterNote       $07
0008C235 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C239 E10A                       	smpsAlterNote       $0A
0008C23B E701                       	dc.b	smpsNoAttack, $01
0008C23D E110                       	smpsAlterNote       $10
0008C23F E701                       	dc.b	smpsNoAttack, $01
0008C241 E111                       	smpsAlterNote       $11
0008C243 8001                       	dc.b	nRst, $01
0008C245 E10F                       	smpsAlterNote       $0F
0008C247 C60A                       	dc.b	nA5, $0A
0008C249 E10D                       	smpsAlterNote       $0D
0008C24B C406 8001                  	dc.b	nG5, $06, nRst, $01
0008C24F E10C                       	smpsAlterNote       $0C
0008C251 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C25D 8001                       	dc.b	nRst, $01
0008C25F E10D                       	smpsAlterNote       $0D
0008C261 C20D                       	dc.b	nF5, $0D
0008C263 E107                       	smpsAlterNote       $07
0008C265 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C269 E10A                       	smpsAlterNote       $0A
0008C26B E701                       	dc.b	smpsNoAttack, $01
0008C26D E110                       	smpsAlterNote       $10
0008C26F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C273 E10A                       	smpsAlterNote       $0A
0008C275 E701                       	dc.b	smpsNoAttack, $01
0008C277 E107                       	smpsAlterNote       $07
0008C279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C27D E10D                       	smpsAlterNote       $0D
0008C27F E701                       	dc.b	smpsNoAttack, $01
0008C281 E111                       	smpsAlterNote       $11
0008C283 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C287 E10D                       	smpsAlterNote       $0D
0008C289 C40D                       	dc.b	nG5, $0D
0008C28B E107                       	smpsAlterNote       $07
0008C28D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C291 E10A                       	smpsAlterNote       $0A
0008C293 E701                       	dc.b	smpsNoAttack, $01
0008C295 E10D                       	smpsAlterNote       $0D
0008C297 8001                       	dc.b	nRst, $01
0008C299 E10C                       	smpsAlterNote       $0C
0008C29B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C2A7 E10D                       	smpsAlterNote       $0D
0008C2A9 C20E                       	dc.b	nF5, $0E
0008C2AB E107                       	smpsAlterNote       $07
0008C2AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2B1 E10D                       	smpsAlterNote       $0D
0008C2B3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C2B9 E0C0                       	smpsPan             panCenter, $00
0008C2BB E603                       	smpsAlterVol        $03
0008C2BD E108                       	smpsAlterNote       $08
0008C2BF B406                       	dc.b	nEb4, $06
0008C2C1 E10C                       	smpsAlterNote       $0C
0008C2C3 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C2C7 E108                       	smpsAlterNote       $08
0008C2C9 B403                       	dc.b	nEb4, $03
0008C2CB E109                       	smpsAlterNote       $09
0008C2CD B803 8001                  	dc.b	nG4, $03, nRst, $01
0008C2D1 E10C                       	smpsAlterNote       $0C
0008C2D3 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008C2DB 03                         	dc.b	$03
0008C2DC E6FD                       	smpsAlterVol        $FD
0008C2DE F6F1 F4                    	smpsJump            music84_Jump00
0008C2E1                            
0008C2E1                            ; PSG1 Data
0008C2E1                            music84_PSG1:
0008C2E1 E1FD                       	smpsAlterNote       $FD
0008C2E3 EC04                       	smpsPSGAlterVol     $04
0008C2E5 9203                       	dc.b	nF1, $03
0008C2E7 E1FE                       	smpsAlterNote       $FE
0008C2E9 9603                       	dc.b	nA1, $03
0008C2EB EC04                       	smpsPSGAlterVol     $04
0008C2ED E701                       	dc.b	smpsNoAttack, $01
0008C2EF E1FF                       	smpsAlterNote       $FF
0008C2F1 ECFC                       	smpsPSGAlterVol     $FC
0008C2F3 9B03                       	dc.b	nD2, $03
0008C2F5 E1FD                       	smpsAlterNote       $FD
0008C2F7 9403                       	dc.b	nG1, $03
0008C2F9 EC04                       	smpsPSGAlterVol     $04
0008C2FB E701                       	dc.b	smpsNoAttack, $01
0008C2FD E1FE                       	smpsAlterNote       $FE
0008C2FF ECFC                       	smpsPSGAlterVol     $FC
0008C301 9703                       	dc.b	nBb1, $03
0008C303 E1FF                       	smpsAlterNote       $FF
0008C305 9B03                       	dc.b	nD2, $03
0008C307 EC04                       	smpsPSGAlterVol     $04
0008C309 E701                       	dc.b	smpsNoAttack, $01
0008C30B E1FE                       	smpsAlterNote       $FE
0008C30D ECFC                       	smpsPSGAlterVol     $FC
0008C30F A002                       	dc.b	nG2, $02
0008C311 EC04                       	smpsPSGAlterVol     $04
0008C313 E701                       	dc.b	smpsNoAttack, $01
0008C315 E1FF                       	smpsAlterNote       $FF
0008C317 ECFC                       	smpsPSGAlterVol     $FC
0008C319 A203                       	dc.b	nA2, $03
0008C31B EC0B                       	smpsPSGAlterVol     $0B
0008C31D 800A                       	dc.b	nRst, $0A
0008C31F E105                       	smpsAlterNote       $05
0008C321 01                         	dc.b	$01
0008C322 E1FC                       	smpsAlterNote       $FC
0008C324 01                         	dc.b	$01
0008C325 E105                       	smpsAlterNote       $05
0008C327 01                         	dc.b	$01
0008C328 E1FD                       	smpsAlterNote       $FD
0008C32A 01                         	dc.b	$01
0008C32B E105                       	smpsAlterNote       $05
0008C32D 01                         	dc.b	$01
0008C32E E1FD                       	smpsAlterNote       $FD
0008C330 01                         	dc.b	$01
0008C331 E1FA                       	smpsAlterNote       $FA
0008C333 01                         	dc.b	$01
0008C334 E1FC                       	smpsAlterNote       $FC
0008C336 01                         	dc.b	$01
0008C337 E105                       	smpsAlterNote       $05
0008C339 01                         	dc.b	$01
0008C33A E108                       	smpsAlterNote       $08
0008C33C 0101                       	dc.b	$01, $01
0008C33E E105                       	smpsAlterNote       $05
0008C340 01                         	dc.b	$01
0008C341 E1FA                       	smpsAlterNote       $FA
0008C343 0101                       	dc.b	$01, $01
0008C345 E1FD                       	smpsAlterNote       $FD
0008C347 01                         	dc.b	$01
0008C348 E105                       	smpsAlterNote       $05
0008C34A 01                         	dc.b	$01
0008C34B E108                       	smpsAlterNote       $08
0008C34D 01                         	dc.b	$01
0008C34E E105                       	smpsAlterNote       $05
0008C350 01                         	dc.b	$01
0008C351 E1FC                       	smpsAlterNote       $FC
0008C353 01                         	dc.b	$01
0008C354 E105                       	smpsAlterNote       $05
0008C356 01                         	dc.b	$01
0008C357 E1FD                       	smpsAlterNote       $FD
0008C359 01                         	dc.b	$01
0008C35A                            
0008C35A                            music84_Jump07:
0008C35A E105                       	smpsAlterNote       $05
0008C35C 8001                       	dc.b	nRst, $01
0008C35E E1FD                       	smpsAlterNote       $FD
0008C360 01                         	dc.b	$01
0008C361 E1FA                       	smpsAlterNote       $FA
0008C363 01                         	dc.b	$01
0008C364 E1FC                       	smpsAlterNote       $FC
0008C366 01                         	dc.b	$01
0008C367 E1FD                       	smpsAlterNote       $FD
0008C369 ECF5                       	smpsPSGAlterVol     $F5
0008C36B 9206                       	dc.b	nF1, $06
0008C36D EC04                       	smpsPSGAlterVol     $04
0008C36F E701                       	dc.b	smpsNoAttack, $01
0008C371 EC07                       	smpsPSGAlterVol     $07
0008C373 8003                       	dc.b	nRst, $03
0008C375 ECF5                       	smpsPSGAlterVol     $F5
0008C377 9206                       	dc.b	nF1, $06
0008C379 EC04                       	smpsPSGAlterVol     $04
0008C37B E701                       	dc.b	smpsNoAttack, $01
0008C37D EC07                       	smpsPSGAlterVol     $07
0008C37F 8006                       	dc.b	nRst, $06
0008C381 E100                       	smpsAlterNote       $00
0008C383 01                         	dc.b	$01
0008C384 E104                       	smpsAlterNote       $04
0008C386 01                         	dc.b	$01
0008C387 E100                       	smpsAlterNote       $00
0008C389 01                         	dc.b	$01
0008C38A E1FB                       	smpsAlterNote       $FB
0008C38C 01                         	dc.b	$01
0008C38D E1FD                       	smpsAlterNote       $FD
0008C38F ECF5                       	smpsPSGAlterVol     $F5
0008C391 9406                       	dc.b	nG1, $06
0008C393 EC04                       	smpsPSGAlterVol     $04
0008C395 E701                       	dc.b	smpsNoAttack, $01
0008C397 EC07                       	smpsPSGAlterVol     $07
0008C399 8003                       	dc.b	nRst, $03
0008C39B ECF5                       	smpsPSGAlterVol     $F5
0008C39D 9407                       	dc.b	nG1, $07
0008C39F EC0B                       	smpsPSGAlterVol     $0B
0008C3A1 8006                       	dc.b	nRst, $06
0008C3A3 E100                       	smpsAlterNote       $00
0008C3A5 01                         	dc.b	$01
0008C3A6 E103                       	smpsAlterNote       $03
0008C3A8 0101                       	dc.b	$01, $01
0008C3AA E1FD                       	smpsAlterNote       $FD
0008C3AC 01                         	dc.b	$01
0008C3AD ECF5                       	smpsPSGAlterVol     $F5
0008C3AF 9207                       	dc.b	nF1, $07
0008C3B1 EC0B                       	smpsPSGAlterVol     $0B
0008C3B3 8004                       	dc.b	nRst, $04
0008C3B5 ECF5                       	smpsPSGAlterVol     $F5
0008C3B7 9206                       	dc.b	nF1, $06
0008C3B9 EC04                       	smpsPSGAlterVol     $04
0008C3BB E701                       	dc.b	smpsNoAttack, $01
0008C3BD EC07                       	smpsPSGAlterVol     $07
0008C3BF 8006                       	dc.b	nRst, $06
0008C3C1 E103                       	smpsAlterNote       $03
0008C3C3 01                         	dc.b	$01
0008C3C4 E104                       	smpsAlterNote       $04
0008C3C6 01                         	dc.b	$01
0008C3C7 E100                       	smpsAlterNote       $00
0008C3C9 01                         	dc.b	$01
0008C3CA E1FA                       	smpsAlterNote       $FA
0008C3CC 01                         	dc.b	$01
0008C3CD E1FD                       	smpsAlterNote       $FD
0008C3CF ECF5                       	smpsPSGAlterVol     $F5
0008C3D1 9206                       	dc.b	nF1, $06
0008C3D3 EC04                       	smpsPSGAlterVol     $04
0008C3D5 E701                       	dc.b	smpsNoAttack, $01
0008C3D7 EC07                       	smpsPSGAlterVol     $07
0008C3D9 8003                       	dc.b	nRst, $03
0008C3DB ECF5                       	smpsPSGAlterVol     $F5
0008C3DD 9106                       	dc.b	nE1, $06
0008C3DF EC04                       	smpsPSGAlterVol     $04
0008C3E1 E701                       	dc.b	smpsNoAttack, $01
0008C3E3 EC07                       	smpsPSGAlterVol     $07
0008C3E5 8006                       	dc.b	nRst, $06
0008C3E7 E100                       	smpsAlterNote       $00
0008C3E9 01                         	dc.b	$01
0008C3EA E104                       	smpsAlterNote       $04
0008C3EC 01                         	dc.b	$01
0008C3ED E100                       	smpsAlterNote       $00
0008C3EF 01                         	dc.b	$01
0008C3F0 E1FD                       	smpsAlterNote       $FD
0008C3F2 01                         	dc.b	$01
0008C3F3 ECF5                       	smpsPSGAlterVol     $F5
0008C3F5 9206                       	dc.b	nF1, $06
0008C3F7 EC04                       	smpsPSGAlterVol     $04
0008C3F9 E701                       	dc.b	smpsNoAttack, $01
0008C3FB EC07                       	smpsPSGAlterVol     $07
0008C3FD 8003                       	dc.b	nRst, $03
0008C3FF ECF5                       	smpsPSGAlterVol     $F5
0008C401 9207                       	dc.b	nF1, $07
0008C403 EC0B                       	smpsPSGAlterVol     $0B
0008C405 8007                       	dc.b	nRst, $07
0008C407 E103                       	smpsAlterNote       $03
0008C409 0101                       	dc.b	$01, $01
0008C40B E1FD                       	smpsAlterNote       $FD
0008C40D 01                         	dc.b	$01
0008C40E E1FB                       	smpsAlterNote       $FB
0008C410 01                         	dc.b	$01
0008C411 E1FD                       	smpsAlterNote       $FD
0008C413 ECF5                       	smpsPSGAlterVol     $F5
0008C415 9406                       	dc.b	nG1, $06
0008C417 EC0B                       	smpsPSGAlterVol     $0B
0008C419 8004                       	dc.b	nRst, $04
0008C41B ECF5                       	smpsPSGAlterVol     $F5
0008C41D 9406                       	dc.b	nG1, $06
0008C41F EC04                       	smpsPSGAlterVol     $04
0008C421 E701                       	dc.b	smpsNoAttack, $01
0008C423 EC07                       	smpsPSGAlterVol     $07
0008C425 8006                       	dc.b	nRst, $06
0008C427 E100                       	smpsAlterNote       $00
0008C429 01                         	dc.b	$01
0008C42A E104                       	smpsAlterNote       $04
0008C42C 01                         	dc.b	$01
0008C42D E100                       	smpsAlterNote       $00
0008C42F 01                         	dc.b	$01
0008C430 E1F9                       	smpsAlterNote       $F9
0008C432 01                         	dc.b	$01
0008C433 E1FD                       	smpsAlterNote       $FD
0008C435 ECF5                       	smpsPSGAlterVol     $F5
0008C437 9206                       	dc.b	nF1, $06
0008C439 EC04                       	smpsPSGAlterVol     $04
0008C43B E701                       	dc.b	smpsNoAttack, $01
0008C43D EC07                       	smpsPSGAlterVol     $07
0008C43F 8003                       	dc.b	nRst, $03
0008C441 ECF5                       	smpsPSGAlterVol     $F5
0008C443 9207                       	dc.b	nF1, $07
0008C445 EC0B                       	smpsPSGAlterVol     $0B
0008C447 8006                       	dc.b	nRst, $06
0008C449 E100                       	smpsAlterNote       $00
0008C44B 01                         	dc.b	$01
0008C44C E104                       	smpsAlterNote       $04
0008C44E 01                         	dc.b	$01
0008C44F E103                       	smpsAlterNote       $03
0008C451 01                         	dc.b	$01
0008C452 E1FD                       	smpsAlterNote       $FD
0008C454 01                         	dc.b	$01
0008C455 ECF5                       	smpsPSGAlterVol     $F5
0008C457 9207                       	dc.b	nF1, $07
0008C459 EC0B                       	smpsPSGAlterVol     $0B
0008C45B 8004                       	dc.b	nRst, $04
0008C45D ECF5                       	smpsPSGAlterVol     $F5
0008C45F 9206                       	dc.b	nF1, $06
0008C461 EC0B                       	smpsPSGAlterVol     $0B
0008C463 8007                       	dc.b	nRst, $07
0008C465 E103                       	smpsAlterNote       $03
0008C467 0101                       	dc.b	$01, $01
0008C469 E100                       	smpsAlterNote       $00
0008C46B 01                         	dc.b	$01
0008C46C E1FA                       	smpsAlterNote       $FA
0008C46E 01                         	dc.b	$01
0008C46F E1FD                       	smpsAlterNote       $FD
0008C471 ECF5                       	smpsPSGAlterVol     $F5
0008C473 9206                       	dc.b	nF1, $06
0008C475 EC04                       	smpsPSGAlterVol     $04
0008C477 E701                       	dc.b	smpsNoAttack, $01
0008C479 EC07                       	smpsPSGAlterVol     $07
0008C47B 8003                       	dc.b	nRst, $03
0008C47D ECF5                       	smpsPSGAlterVol     $F5
0008C47F 9206                       	dc.b	nF1, $06
0008C481 EC04                       	smpsPSGAlterVol     $04
0008C483 E701                       	dc.b	smpsNoAttack, $01
0008C485 EC07                       	smpsPSGAlterVol     $07
0008C487 8006                       	dc.b	nRst, $06
0008C489 E100                       	smpsAlterNote       $00
0008C48B 01                         	dc.b	$01
0008C48C E104                       	smpsAlterNote       $04
0008C48E 01                         	dc.b	$01
0008C48F E100                       	smpsAlterNote       $00
0008C491 01                         	dc.b	$01
0008C492 E1FD                       	smpsAlterNote       $FD
0008C494 01                         	dc.b	$01
0008C495 ECF5                       	smpsPSGAlterVol     $F5
0008C497 9206                       	dc.b	nF1, $06
0008C499 EC04                       	smpsPSGAlterVol     $04
0008C49B E701                       	dc.b	smpsNoAttack, $01
0008C49D EC07                       	smpsPSGAlterVol     $07
0008C49F 8003                       	dc.b	nRst, $03
0008C4A1 ECF5                       	smpsPSGAlterVol     $F5
0008C4A3 9207                       	dc.b	nF1, $07
0008C4A5 EC0B                       	smpsPSGAlterVol     $0B
0008C4A7 8007                       	dc.b	nRst, $07
0008C4A9 E103                       	smpsAlterNote       $03
0008C4AB 0101                       	dc.b	$01, $01
0008C4AD E1FD                       	smpsAlterNote       $FD
0008C4AF 01                         	dc.b	$01
0008C4B0 E1FA                       	smpsAlterNote       $FA
0008C4B2 01                         	dc.b	$01
0008C4B3 E1FD                       	smpsAlterNote       $FD
0008C4B5 ECF5                       	smpsPSGAlterVol     $F5
0008C4B7 9206                       	dc.b	nF1, $06
0008C4B9 EC0B                       	smpsPSGAlterVol     $0B
0008C4BB 8004                       	dc.b	nRst, $04
0008C4BD ECF5                       	smpsPSGAlterVol     $F5
0008C4BF 9206                       	dc.b	nF1, $06
0008C4C1 EC04                       	smpsPSGAlterVol     $04
0008C4C3 E701                       	dc.b	smpsNoAttack, $01
0008C4C5 EC07                       	smpsPSGAlterVol     $07
0008C4C7 8006                       	dc.b	nRst, $06
0008C4C9 E103                       	smpsAlterNote       $03
0008C4CB 01                         	dc.b	$01
0008C4CC E104                       	smpsAlterNote       $04
0008C4CE 01                         	dc.b	$01
0008C4CF E100                       	smpsAlterNote       $00
0008C4D1 01                         	dc.b	$01
0008C4D2 E1FA                       	smpsAlterNote       $FA
0008C4D4 01                         	dc.b	$01
0008C4D5 E1FD                       	smpsAlterNote       $FD
0008C4D7 ECF5                       	smpsPSGAlterVol     $F5
0008C4D9 9206                       	dc.b	nF1, $06
0008C4DB EC04                       	smpsPSGAlterVol     $04
0008C4DD E701                       	dc.b	smpsNoAttack, $01
0008C4DF EC07                       	smpsPSGAlterVol     $07
0008C4E1 8003                       	dc.b	nRst, $03
0008C4E3 ECF5                       	smpsPSGAlterVol     $F5
0008C4E5 9206                       	dc.b	nF1, $06
0008C4E7 EC04                       	smpsPSGAlterVol     $04
0008C4E9 E701                       	dc.b	smpsNoAttack, $01
0008C4EB EC07                       	smpsPSGAlterVol     $07
0008C4ED 8006                       	dc.b	nRst, $06
0008C4EF E100                       	smpsAlterNote       $00
0008C4F1 01                         	dc.b	$01
0008C4F2 E104                       	smpsAlterNote       $04
0008C4F4 01                         	dc.b	$01
0008C4F5 E103                       	smpsAlterNote       $03
0008C4F7 01                         	dc.b	$01
0008C4F8 E1FD                       	smpsAlterNote       $FD
0008C4FA 01                         	dc.b	$01
0008C4FB ECF5                       	smpsPSGAlterVol     $F5
0008C4FD 9107                       	dc.b	nE1, $07
0008C4FF EC0B                       	smpsPSGAlterVol     $0B
0008C501 8004                       	dc.b	nRst, $04
0008C503 ECF5                       	smpsPSGAlterVol     $F5
0008C505 9106                       	dc.b	nE1, $06
0008C507 EC0B                       	smpsPSGAlterVol     $0B
0008C509 8007                       	dc.b	nRst, $07
0008C50B E103                       	smpsAlterNote       $03
0008C50D 0101                       	dc.b	$01, $01
0008C50F E100                       	smpsAlterNote       $00
0008C511 01                         	dc.b	$01
0008C512 E1FA                       	smpsAlterNote       $FA
0008C514 01                         	dc.b	$01
0008C515 E1FD                       	smpsAlterNote       $FD
0008C517 ECF5                       	smpsPSGAlterVol     $F5
0008C519 9106                       	dc.b	nE1, $06
0008C51B EC04                       	smpsPSGAlterVol     $04
0008C51D E701                       	dc.b	smpsNoAttack, $01
0008C51F EC07                       	smpsPSGAlterVol     $07
0008C521 8003                       	dc.b	nRst, $03
0008C523 ECF5                       	smpsPSGAlterVol     $F5
0008C525 9106                       	dc.b	nE1, $06
0008C527 EC04                       	smpsPSGAlterVol     $04
0008C529 E701                       	dc.b	smpsNoAttack, $01
0008C52B EC07                       	smpsPSGAlterVol     $07
0008C52D 8006                       	dc.b	nRst, $06
0008C52F E100                       	smpsAlterNote       $00
0008C531 01                         	dc.b	$01
0008C532 E104                       	smpsAlterNote       $04
0008C534 01                         	dc.b	$01
0008C535 E100                       	smpsAlterNote       $00
0008C537 01                         	dc.b	$01
0008C538 E1FA                       	smpsAlterNote       $FA
0008C53A 01                         	dc.b	$01
0008C53B E1FD                       	smpsAlterNote       $FD
0008C53D ECF5                       	smpsPSGAlterVol     $F5
0008C53F 9106                       	dc.b	nE1, $06
0008C541 EC04                       	smpsPSGAlterVol     $04
0008C543 E701                       	dc.b	smpsNoAttack, $01
0008C545 EC07                       	smpsPSGAlterVol     $07
0008C547 8003                       	dc.b	nRst, $03
0008C549 ECF5                       	smpsPSGAlterVol     $F5
0008C54B 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C54F EC04                       	smpsPSGAlterVol     $04
0008C551 E701                       	dc.b	smpsNoAttack, $01
0008C553 ECFC                       	smpsPSGAlterVol     $FC
0008C555 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008C559 EC04                       	smpsPSGAlterVol     $04
0008C55B E701                       	dc.b	smpsNoAttack, $01
0008C55D ECFC                       	smpsPSGAlterVol     $FC
0008C55F 9106                       	dc.b	nE1, $06
0008C561 EC04                       	smpsPSGAlterVol     $04
0008C563 E701                       	dc.b	smpsNoAttack, $01
0008C565 EC07                       	smpsPSGAlterVol     $07
0008C567 8006                       	dc.b	nRst, $06
0008C569 E100                       	smpsAlterNote       $00
0008C56B 01                         	dc.b	$01
0008C56C E104                       	smpsAlterNote       $04
0008C56E 01                         	dc.b	$01
0008C56F E100                       	smpsAlterNote       $00
0008C571 01                         	dc.b	$01
0008C572 E1FA                       	smpsAlterNote       $FA
0008C574 01                         	dc.b	$01
0008C575 E1F9                       	smpsAlterNote       $F9
0008C577 01                         	dc.b	$01
0008C578 E1FD                       	smpsAlterNote       $FD
0008C57A 01                         	dc.b	$01
0008C57B E103                       	smpsAlterNote       $03
0008C57D 01                         	dc.b	$01
0008C57E E104                       	smpsAlterNote       $04
0008C580 01                         	dc.b	$01
0008C581 E100                       	smpsAlterNote       $00
0008C583 01                         	dc.b	$01
0008C584 E1FA                       	smpsAlterNote       $FA
0008C586 0101                       	dc.b	$01, $01
0008C588 E1FD                       	smpsAlterNote       $FD
0008C58A ECF5                       	smpsPSGAlterVol     $F5
0008C58C 9206                       	dc.b	nF1, $06
0008C58E EC04                       	smpsPSGAlterVol     $04
0008C590 E701                       	dc.b	smpsNoAttack, $01
0008C592 EC07                       	smpsPSGAlterVol     $07
0008C594 8003                       	dc.b	nRst, $03
0008C596 ECF5                       	smpsPSGAlterVol     $F5
0008C598 9206                       	dc.b	nF1, $06
0008C59A EC04                       	smpsPSGAlterVol     $04
0008C59C E701                       	dc.b	smpsNoAttack, $01
0008C59E EC07                       	smpsPSGAlterVol     $07
0008C5A0 8006                       	dc.b	nRst, $06
0008C5A2 E100                       	smpsAlterNote       $00
0008C5A4 01                         	dc.b	$01
0008C5A5 E104                       	smpsAlterNote       $04
0008C5A7 01                         	dc.b	$01
0008C5A8 E103                       	smpsAlterNote       $03
0008C5AA 01                         	dc.b	$01
0008C5AB E1FD                       	smpsAlterNote       $FD
0008C5AD 01                         	dc.b	$01
0008C5AE ECF5                       	smpsPSGAlterVol     $F5
0008C5B0 9407                       	dc.b	nG1, $07
0008C5B2 EC0B                       	smpsPSGAlterVol     $0B
0008C5B4 8004                       	dc.b	nRst, $04
0008C5B6 ECF5                       	smpsPSGAlterVol     $F5
0008C5B8 9406                       	dc.b	nG1, $06
0008C5BA EC0B                       	smpsPSGAlterVol     $0B
0008C5BC 8007                       	dc.b	nRst, $07
0008C5BE E103                       	smpsAlterNote       $03
0008C5C0 0101                       	dc.b	$01, $01
0008C5C2 E1FD                       	smpsAlterNote       $FD
0008C5C4 01                         	dc.b	$01
0008C5C5 E1F9                       	smpsAlterNote       $F9
0008C5C7 01                         	dc.b	$01
0008C5C8 E1FD                       	smpsAlterNote       $FD
0008C5CA ECF5                       	smpsPSGAlterVol     $F5
0008C5CC 9206                       	dc.b	nF1, $06
0008C5CE EC04                       	smpsPSGAlterVol     $04
0008C5D0 E701                       	dc.b	smpsNoAttack, $01
0008C5D2 EC07                       	smpsPSGAlterVol     $07
0008C5D4 8003                       	dc.b	nRst, $03
0008C5D6 ECF5                       	smpsPSGAlterVol     $F5
0008C5D8 9206                       	dc.b	nF1, $06
0008C5DA EC04                       	smpsPSGAlterVol     $04
0008C5DC E701                       	dc.b	smpsNoAttack, $01
0008C5DE EC07                       	smpsPSGAlterVol     $07
0008C5E0 8006                       	dc.b	nRst, $06
0008C5E2 E100                       	smpsAlterNote       $00
0008C5E4 01                         	dc.b	$01
0008C5E5 E104                       	smpsAlterNote       $04
0008C5E7 01                         	dc.b	$01
0008C5E8 E100                       	smpsAlterNote       $00
0008C5EA 01                         	dc.b	$01
0008C5EB E1FA                       	smpsAlterNote       $FA
0008C5ED 01                         	dc.b	$01
0008C5EE E1FD                       	smpsAlterNote       $FD
0008C5F0 ECF5                       	smpsPSGAlterVol     $F5
0008C5F2 9206                       	dc.b	nF1, $06
0008C5F4 EC04                       	smpsPSGAlterVol     $04
0008C5F6 E701                       	dc.b	smpsNoAttack, $01
0008C5F8 EC07                       	smpsPSGAlterVol     $07
0008C5FA 8003                       	dc.b	nRst, $03
0008C5FC ECF5                       	smpsPSGAlterVol     $F5
0008C5FE 9107                       	dc.b	nE1, $07
0008C600 EC0B                       	smpsPSGAlterVol     $0B
0008C602 8006                       	dc.b	nRst, $06
0008C604 E100                       	smpsAlterNote       $00
0008C606 01                         	dc.b	$01
0008C607 E103                       	smpsAlterNote       $03
0008C609 0101                       	dc.b	$01, $01
0008C60B E1FD                       	smpsAlterNote       $FD
0008C60D 01                         	dc.b	$01
0008C60E ECF5                       	smpsPSGAlterVol     $F5
0008C610 9207                       	dc.b	nF1, $07
0008C612 EC0B                       	smpsPSGAlterVol     $0B
0008C614 8004                       	dc.b	nRst, $04
0008C616 ECF5                       	smpsPSGAlterVol     $F5
0008C618 9206                       	dc.b	nF1, $06
0008C61A EC04                       	smpsPSGAlterVol     $04
0008C61C E701                       	dc.b	smpsNoAttack, $01
0008C61E EC07                       	smpsPSGAlterVol     $07
0008C620 8006                       	dc.b	nRst, $06
0008C622 E103                       	smpsAlterNote       $03
0008C624 01                         	dc.b	$01
0008C625 E104                       	smpsAlterNote       $04
0008C627 01                         	dc.b	$01
0008C628 E100                       	smpsAlterNote       $00
0008C62A 01                         	dc.b	$01
0008C62B E1FB                       	smpsAlterNote       $FB
0008C62D 01                         	dc.b	$01
0008C62E E1FD                       	smpsAlterNote       $FD
0008C630 ECF5                       	smpsPSGAlterVol     $F5
0008C632 9406                       	dc.b	nG1, $06
0008C634 EC04                       	smpsPSGAlterVol     $04
0008C636 E701                       	dc.b	smpsNoAttack, $01
0008C638 EC07                       	smpsPSGAlterVol     $07
0008C63A 8003                       	dc.b	nRst, $03
0008C63C ECF5                       	smpsPSGAlterVol     $F5
0008C63E 9406                       	dc.b	nG1, $06
0008C640 EC04                       	smpsPSGAlterVol     $04
0008C642 E701                       	dc.b	smpsNoAttack, $01
0008C644 EC07                       	smpsPSGAlterVol     $07
0008C646 8006                       	dc.b	nRst, $06
0008C648 E100                       	smpsAlterNote       $00
0008C64A 01                         	dc.b	$01
0008C64B E104                       	smpsAlterNote       $04
0008C64D 01                         	dc.b	$01
0008C64E E100                       	smpsAlterNote       $00
0008C650 01                         	dc.b	$01
0008C651 E1FD                       	smpsAlterNote       $FD
0008C653 01                         	dc.b	$01
0008C654 ECF5                       	smpsPSGAlterVol     $F5
0008C656 9206                       	dc.b	nF1, $06
0008C658 EC04                       	smpsPSGAlterVol     $04
0008C65A E701                       	dc.b	smpsNoAttack, $01
0008C65C EC07                       	smpsPSGAlterVol     $07
0008C65E 8003                       	dc.b	nRst, $03
0008C660 ECF5                       	smpsPSGAlterVol     $F5
0008C662 9207                       	dc.b	nF1, $07
0008C664 EC0B                       	smpsPSGAlterVol     $0B
0008C666 8007                       	dc.b	nRst, $07
0008C668 E103                       	smpsAlterNote       $03
0008C66A 0101                       	dc.b	$01, $01
0008C66C E1FD                       	smpsAlterNote       $FD
0008C66E 01                         	dc.b	$01
0008C66F E1FA                       	smpsAlterNote       $FA
0008C671 01                         	dc.b	$01
0008C672 E1FD                       	smpsAlterNote       $FD
0008C674 ECF5                       	smpsPSGAlterVol     $F5
0008C676 9206                       	dc.b	nF1, $06
0008C678 EC0B                       	smpsPSGAlterVol     $0B
0008C67A 8004                       	dc.b	nRst, $04
0008C67C ECF5                       	smpsPSGAlterVol     $F5
0008C67E 9206                       	dc.b	nF1, $06
0008C680 EC04                       	smpsPSGAlterVol     $04
0008C682 E701                       	dc.b	smpsNoAttack, $01
0008C684 EC07                       	smpsPSGAlterVol     $07
0008C686 8006                       	dc.b	nRst, $06
0008C688 E100                       	smpsAlterNote       $00
0008C68A 01                         	dc.b	$01
0008C68B E104                       	smpsAlterNote       $04
0008C68D 01                         	dc.b	$01
0008C68E E100                       	smpsAlterNote       $00
0008C690 01                         	dc.b	$01
0008C691 E1FA                       	smpsAlterNote       $FA
0008C693 01                         	dc.b	$01
0008C694 E1FD                       	smpsAlterNote       $FD
0008C696 ECF5                       	smpsPSGAlterVol     $F5
0008C698 9206                       	dc.b	nF1, $06
0008C69A EC04                       	smpsPSGAlterVol     $04
0008C69C E704                       	dc.b	smpsNoAttack, $04
0008C69E ECFC                       	smpsPSGAlterVol     $FC
0008C6A0 9207                       	dc.b	nF1, $07
0008C6A2 EC0B                       	smpsPSGAlterVol     $0B
0008C6A4 8006                       	dc.b	nRst, $06
0008C6A6 E100                       	smpsAlterNote       $00
0008C6A8 01                         	dc.b	$01
0008C6A9 E104                       	smpsAlterNote       $04
0008C6AB 01                         	dc.b	$01
0008C6AC E103                       	smpsAlterNote       $03
0008C6AE 01                         	dc.b	$01
0008C6AF E1FD                       	smpsAlterNote       $FD
0008C6B1 01                         	dc.b	$01
0008C6B2 ECF5                       	smpsPSGAlterVol     $F5
0008C6B4 9207                       	dc.b	nF1, $07
0008C6B6 EC0B                       	smpsPSGAlterVol     $0B
0008C6B8 8004                       	dc.b	nRst, $04
0008C6BA ECF5                       	smpsPSGAlterVol     $F5
0008C6BC 9206                       	dc.b	nF1, $06
0008C6BE EC0B                       	smpsPSGAlterVol     $0B
0008C6C0 8007                       	dc.b	nRst, $07
0008C6C2 E103                       	smpsAlterNote       $03
0008C6C4 0101                       	dc.b	$01, $01
0008C6C6 E100                       	smpsAlterNote       $00
0008C6C8 01                         	dc.b	$01
0008C6C9 E1FA                       	smpsAlterNote       $FA
0008C6CB 01                         	dc.b	$01
0008C6CC E1FD                       	smpsAlterNote       $FD
0008C6CE ECF5                       	smpsPSGAlterVol     $F5
0008C6D0 9206                       	dc.b	nF1, $06
0008C6D2 EC04                       	smpsPSGAlterVol     $04
0008C6D4 E704                       	dc.b	smpsNoAttack, $04
0008C6D6 ECFC                       	smpsPSGAlterVol     $FC
0008C6D8 9206                       	dc.b	nF1, $06
0008C6DA EC04                       	smpsPSGAlterVol     $04
0008C6DC E701                       	dc.b	smpsNoAttack, $01
0008C6DE EC07                       	smpsPSGAlterVol     $07
0008C6E0 8006                       	dc.b	nRst, $06
0008C6E2 E100                       	smpsAlterNote       $00
0008C6E4 01                         	dc.b	$01
0008C6E5 E104                       	smpsAlterNote       $04
0008C6E7 01                         	dc.b	$01
0008C6E8 E100                       	smpsAlterNote       $00
0008C6EA 01                         	dc.b	$01
0008C6EB E1FD                       	smpsAlterNote       $FD
0008C6ED 01                         	dc.b	$01
0008C6EE ECF5                       	smpsPSGAlterVol     $F5
0008C6F0 9206                       	dc.b	nF1, $06
0008C6F2 EC04                       	smpsPSGAlterVol     $04
0008C6F4 E701                       	dc.b	smpsNoAttack, $01
0008C6F6 EC07                       	smpsPSGAlterVol     $07
0008C6F8 8003                       	dc.b	nRst, $03
0008C6FA ECF5                       	smpsPSGAlterVol     $F5
0008C6FC 9207                       	dc.b	nF1, $07
0008C6FE EC0B                       	smpsPSGAlterVol     $0B
0008C700 8007                       	dc.b	nRst, $07
0008C702 E103                       	smpsAlterNote       $03
0008C704 0101                       	dc.b	$01, $01
0008C706 E1FD                       	smpsAlterNote       $FD
0008C708 01                         	dc.b	$01
0008C709 E1FA                       	smpsAlterNote       $FA
0008C70B 01                         	dc.b	$01
0008C70C E1FD                       	smpsAlterNote       $FD
0008C70E ECF5                       	smpsPSGAlterVol     $F5
0008C710 9106                       	dc.b	nE1, $06
0008C712 EC0B                       	smpsPSGAlterVol     $0B
0008C714 8004                       	dc.b	nRst, $04
0008C716 ECF5                       	smpsPSGAlterVol     $F5
0008C718 9106                       	dc.b	nE1, $06
0008C71A EC04                       	smpsPSGAlterVol     $04
0008C71C E701                       	dc.b	smpsNoAttack, $01
0008C71E EC07                       	smpsPSGAlterVol     $07
0008C720 8006                       	dc.b	nRst, $06
0008C722 E100                       	smpsAlterNote       $00
0008C724 01                         	dc.b	$01
0008C725 E104                       	smpsAlterNote       $04
0008C727 01                         	dc.b	$01
0008C728 E100                       	smpsAlterNote       $00
0008C72A 01                         	dc.b	$01
0008C72B E1FA                       	smpsAlterNote       $FA
0008C72D 01                         	dc.b	$01
0008C72E E1FD                       	smpsAlterNote       $FD
0008C730 ECF5                       	smpsPSGAlterVol     $F5
0008C732 9106                       	dc.b	nE1, $06
0008C734 EC04                       	smpsPSGAlterVol     $04
0008C736 E701                       	dc.b	smpsNoAttack, $01
0008C738 EC07                       	smpsPSGAlterVol     $07
0008C73A 8003                       	dc.b	nRst, $03
0008C73C ECF5                       	smpsPSGAlterVol     $F5
0008C73E 9106                       	dc.b	nE1, $06
0008C740 EC04                       	smpsPSGAlterVol     $04
0008C742 E701                       	dc.b	smpsNoAttack, $01
0008C744 EC07                       	smpsPSGAlterVol     $07
0008C746 8006                       	dc.b	nRst, $06
0008C748 E100                       	smpsAlterNote       $00
0008C74A 01                         	dc.b	$01
0008C74B E104                       	smpsAlterNote       $04
0008C74D 01                         	dc.b	$01
0008C74E E103                       	smpsAlterNote       $03
0008C750 01                         	dc.b	$01
0008C751 E1FD                       	smpsAlterNote       $FD
0008C753 01                         	dc.b	$01
0008C754 ECF5                       	smpsPSGAlterVol     $F5
0008C756 9107                       	dc.b	nE1, $07
0008C758 EC0B                       	smpsPSGAlterVol     $0B
0008C75A 8004                       	dc.b	nRst, $04
0008C75C ECF5                       	smpsPSGAlterVol     $F5
0008C75E 9106                       	dc.b	nE1, $06
0008C760 EC0B                       	smpsPSGAlterVol     $0B
0008C762 8007                       	dc.b	nRst, $07
0008C764 E103                       	smpsAlterNote       $03
0008C766 0101                       	dc.b	$01, $01
0008C768 E100                       	smpsAlterNote       $00
0008C76A 01                         	dc.b	$01
0008C76B E1FA                       	smpsAlterNote       $FA
0008C76D 01                         	dc.b	$01
0008C76E E1FD                       	smpsAlterNote       $FD
0008C770 ECF5                       	smpsPSGAlterVol     $F5
0008C772 9106                       	dc.b	nE1, $06
0008C774 EC04                       	smpsPSGAlterVol     $04
0008C776 E701                       	dc.b	smpsNoAttack, $01
0008C778 EC07                       	smpsPSGAlterVol     $07
0008C77A 8003                       	dc.b	nRst, $03
0008C77C ECF5                       	smpsPSGAlterVol     $F5
0008C77E 9106                       	dc.b	nE1, $06
0008C780 EC04                       	smpsPSGAlterVol     $04
0008C782 E701                       	dc.b	smpsNoAttack, $01
0008C784 EC07                       	smpsPSGAlterVol     $07
0008C786 8003                       	dc.b	nRst, $03
0008C788 ECF5                       	smpsPSGAlterVol     $F5
0008C78A 9207                       	dc.b	nF1, $07
0008C78C EC0B                       	smpsPSGAlterVol     $0B
0008C78E 8006                       	dc.b	nRst, $06
0008C790 E100                       	smpsAlterNote       $00
0008C792 01                         	dc.b	$01
0008C793 E104                       	smpsAlterNote       $04
0008C795 01                         	dc.b	$01
0008C796 E103                       	smpsAlterNote       $03
0008C798 01                         	dc.b	$01
0008C799 E1FD                       	smpsAlterNote       $FD
0008C79B 01                         	dc.b	$01
0008C79C E1F9                       	smpsAlterNote       $F9
0008C79E 01                         	dc.b	$01
0008C79F E1FD                       	smpsAlterNote       $FD
0008C7A1 01                         	dc.b	$01
0008C7A2 E100                       	smpsAlterNote       $00
0008C7A4 01                         	dc.b	$01
0008C7A5 E104                       	smpsAlterNote       $04
0008C7A7 01                         	dc.b	$01
0008C7A8 E1FD                       	smpsAlterNote       $FD
0008C7AA ECF5                       	smpsPSGAlterVol     $F5
0008C7AC 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C7B0 EC04                       	smpsPSGAlterVol     $04
0008C7B2 E701                       	dc.b	smpsNoAttack, $01
0008C7B4 EC07                       	smpsPSGAlterVol     $07
0008C7B6 8009                       	dc.b	nRst, $09
0008C7B8 E100                       	smpsAlterNote       $00
0008C7BA 01                         	dc.b	$01
0008C7BB E104                       	smpsAlterNote       $04
0008C7BD 01                         	dc.b	$01
0008C7BE E103                       	smpsAlterNote       $03
0008C7C0 01                         	dc.b	$01
0008C7C1 E1FD                       	smpsAlterNote       $FD
0008C7C3 01                         	dc.b	$01
0008C7C4 E1F9                       	smpsAlterNote       $F9
0008C7C6 01                         	dc.b	$01
0008C7C7 E1FD                       	smpsAlterNote       $FD
0008C7C9 01                         	dc.b	$01
0008C7CA E100                       	smpsAlterNote       $00
0008C7CC 01                         	dc.b	$01
0008C7CD E104                       	smpsAlterNote       $04
0008C7CF 01                         	dc.b	$01
0008C7D0 E100                       	smpsAlterNote       $00
0008C7D2 01                         	dc.b	$01
0008C7D3 E1FA                       	smpsAlterNote       $FA
0008C7D5 01                         	dc.b	$01
0008C7D6 E1F9                       	smpsAlterNote       $F9
0008C7D8 01                         	dc.b	$01
0008C7D9 E1FD                       	smpsAlterNote       $FD
0008C7DB 01                         	dc.b	$01
0008C7DC E103                       	smpsAlterNote       $03
0008C7DE 0101                       	dc.b	$01, $01
0008C7E0 E100                       	smpsAlterNote       $00
0008C7E2 01                         	dc.b	$01
0008C7E3 E1FD                       	smpsAlterNote       $FD
0008C7E5 ECF5                       	smpsPSGAlterVol     $F5
0008C7E7 9202                       	dc.b	nF1, $02
0008C7E9 EC04                       	smpsPSGAlterVol     $04
0008C7EB E701                       	dc.b	smpsNoAttack, $01
0008C7ED ECFC                       	smpsPSGAlterVol     $FC
0008C7EF 9106                       	dc.b	nE1, $06
0008C7F1 EC04                       	smpsPSGAlterVol     $04
0008C7F3 E701                       	dc.b	smpsNoAttack, $01
0008C7F5 EC07                       	smpsPSGAlterVol     $07
0008C7F7 8006                       	dc.b	nRst, $06
0008C7F9 E100                       	smpsAlterNote       $00
0008C7FB 01                         	dc.b	$01
0008C7FC E104                       	smpsAlterNote       $04
0008C7FE 01                         	dc.b	$01
0008C7FF E100                       	smpsAlterNote       $00
0008C801 01                         	dc.b	$01
0008C802 E1FD                       	smpsAlterNote       $FD
0008C804 01                         	dc.b	$01
0008C805 E1F9                       	smpsAlterNote       $F9
0008C807 01                         	dc.b	$01
0008C808 E1FD                       	smpsAlterNote       $FD
0008C80A 01                         	dc.b	$01
0008C80B E103                       	smpsAlterNote       $03
0008C80D 01                         	dc.b	$01
0008C80E E104                       	smpsAlterNote       $04
0008C810 01                         	dc.b	$01
0008C811 E1FD                       	smpsAlterNote       $FD
0008C813 ECF5                       	smpsPSGAlterVol     $F5
0008C815 9102                       	dc.b	nE1, $02
0008C817 EC04                       	smpsPSGAlterVol     $04
0008C819 E701                       	dc.b	smpsNoAttack, $01
0008C81B ECFC                       	smpsPSGAlterVol     $FC
0008C81D 920D                       	dc.b	nF1, $0D
0008C81F E100                       	smpsAlterNote       $00
0008C821 E701                       	dc.b	smpsNoAttack, $01
0008C823 E104                       	smpsAlterNote       $04
0008C825 E701                       	dc.b	smpsNoAttack, $01
0008C827 E100                       	smpsAlterNote       $00
0008C829 E701                       	dc.b	smpsNoAttack, $01
0008C82B E1FD                       	smpsAlterNote       $FD
0008C82D E701                       	dc.b	smpsNoAttack, $01
0008C82F E1F9                       	smpsAlterNote       $F9
0008C831 E701                       	dc.b	smpsNoAttack, $01
0008C833 E1FD                       	smpsAlterNote       $FD
0008C835 E701                       	dc.b	smpsNoAttack, $01
0008C837 E103                       	smpsAlterNote       $03
0008C839 E701                       	dc.b	smpsNoAttack, $01
0008C83B E104                       	smpsAlterNote       $04
0008C83D E701                       	dc.b	smpsNoAttack, $01
0008C83F E100                       	smpsAlterNote       $00
0008C841 E701                       	dc.b	smpsNoAttack, $01
0008C843 E1FA                       	smpsAlterNote       $FA
0008C845 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C849 E1FD                       	smpsAlterNote       $FD
0008C84B E701                       	dc.b	smpsNoAttack, $01
0008C84D E103                       	smpsAlterNote       $03
0008C84F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C853 E1FD                       	smpsAlterNote       $FD
0008C855 E701                       	dc.b	smpsNoAttack, $01
0008C857 E1F9                       	smpsAlterNote       $F9
0008C859 E701                       	dc.b	smpsNoAttack, $01
0008C85B E1FA                       	smpsAlterNote       $FA
0008C85D E701                       	dc.b	smpsNoAttack, $01
0008C85F E100                       	smpsAlterNote       $00
0008C861 EC04                       	smpsPSGAlterVol     $04
0008C863 E701                       	dc.b	smpsNoAttack, $01
0008C865 EC07                       	smpsPSGAlterVol     $07
0008C867 E104                       	smpsAlterNote       $04
0008C869 8001                       	dc.b	nRst, $01
0008C86B E100                       	smpsAlterNote       $00
0008C86D 01                         	dc.b	$01
0008C86E E1FD                       	smpsAlterNote       $FD
0008C870 01                         	dc.b	$01
0008C871 E1F9                       	smpsAlterNote       $F9
0008C873 01                         	dc.b	$01
0008C874 E1FD                       	smpsAlterNote       $FD
0008C876 01                         	dc.b	$01
0008C877 E103                       	smpsAlterNote       $03
0008C879 01                         	dc.b	$01
0008C87A E104                       	smpsAlterNote       $04
0008C87C 01                         	dc.b	$01
0008C87D E1FD                       	smpsAlterNote       $FD
0008C87F ECF5                       	smpsPSGAlterVol     $F5
0008C881 9106                       	dc.b	nE1, $06
0008C883 EC04                       	smpsPSGAlterVol     $04
0008C885 E701                       	dc.b	smpsNoAttack, $01
0008C887 EC07                       	smpsPSGAlterVol     $07
0008C889 8003                       	dc.b	nRst, $03
0008C88B ECF5                       	smpsPSGAlterVol     $F5
0008C88D 9106                       	dc.b	nE1, $06
0008C88F EC04                       	smpsPSGAlterVol     $04
0008C891 E701                       	dc.b	smpsNoAttack, $01
0008C893 EC07                       	smpsPSGAlterVol     $07
0008C895 8006                       	dc.b	nRst, $06
0008C897 E100                       	smpsAlterNote       $00
0008C899 01                         	dc.b	$01
0008C89A E104                       	smpsAlterNote       $04
0008C89C 01                         	dc.b	$01
0008C89D E100                       	smpsAlterNote       $00
0008C89F 01                         	dc.b	$01
0008C8A0 E1FA                       	smpsAlterNote       $FA
0008C8A2 01                         	dc.b	$01
0008C8A3 E1FD                       	smpsAlterNote       $FD
0008C8A5 ECF5                       	smpsPSGAlterVol     $F5
0008C8A7 9206                       	dc.b	nF1, $06
0008C8A9 EC04                       	smpsPSGAlterVol     $04
0008C8AB E701                       	dc.b	smpsNoAttack, $01
0008C8AD EC07                       	smpsPSGAlterVol     $07
0008C8AF 8003                       	dc.b	nRst, $03
0008C8B1 ECF5                       	smpsPSGAlterVol     $F5
0008C8B3 9207                       	dc.b	nF1, $07
0008C8B5 EC0B                       	smpsPSGAlterVol     $0B
0008C8B7 8006                       	dc.b	nRst, $06
0008C8B9 E100                       	smpsAlterNote       $00
0008C8BB 01                         	dc.b	$01
0008C8BC E103                       	smpsAlterNote       $03
0008C8BE 0101                       	dc.b	$01, $01
0008C8C0 E1FD                       	smpsAlterNote       $FD
0008C8C2 01                         	dc.b	$01
0008C8C3 ECF5                       	smpsPSGAlterVol     $F5
0008C8C5 9107                       	dc.b	nE1, $07
0008C8C7 EC0B                       	smpsPSGAlterVol     $0B
0008C8C9 8004                       	dc.b	nRst, $04
0008C8CB ECF5                       	smpsPSGAlterVol     $F5
0008C8CD 9106                       	dc.b	nE1, $06
0008C8CF EC04                       	smpsPSGAlterVol     $04
0008C8D1 E701                       	dc.b	smpsNoAttack, $01
0008C8D3 EC07                       	smpsPSGAlterVol     $07
0008C8D5 8006                       	dc.b	nRst, $06
0008C8D7 E103                       	smpsAlterNote       $03
0008C8D9 01                         	dc.b	$01
0008C8DA E104                       	smpsAlterNote       $04
0008C8DC 01                         	dc.b	$01
0008C8DD E100                       	smpsAlterNote       $00
0008C8DF 01                         	dc.b	$01
0008C8E0 E1FA                       	smpsAlterNote       $FA
0008C8E2 01                         	dc.b	$01
0008C8E3 E1FD                       	smpsAlterNote       $FD
0008C8E5 ECF5                       	smpsPSGAlterVol     $F5
0008C8E7 9106                       	dc.b	nE1, $06
0008C8E9 EC04                       	smpsPSGAlterVol     $04
0008C8EB E701                       	dc.b	smpsNoAttack, $01
0008C8ED EC07                       	smpsPSGAlterVol     $07
0008C8EF 8003                       	dc.b	nRst, $03
0008C8F1 ECF5                       	smpsPSGAlterVol     $F5
0008C8F3 9106                       	dc.b	nE1, $06
0008C8F5 EC04                       	smpsPSGAlterVol     $04
0008C8F7 E701                       	dc.b	smpsNoAttack, $01
0008C8F9 EC07                       	smpsPSGAlterVol     $07
0008C8FB 8003                       	dc.b	nRst, $03
0008C8FD ECF5                       	smpsPSGAlterVol     $F5
0008C8FF 9207                       	dc.b	nF1, $07
0008C901 EC0B                       	smpsPSGAlterVol     $0B
0008C903 8006                       	dc.b	nRst, $06
0008C905 E100                       	smpsAlterNote       $00
0008C907 01                         	dc.b	$01
0008C908 E103                       	smpsAlterNote       $03
0008C90A 0101                       	dc.b	$01, $01
0008C90C E1FD                       	smpsAlterNote       $FD
0008C90E 01                         	dc.b	$01
0008C90F E1F9                       	smpsAlterNote       $F9
0008C911 01                         	dc.b	$01
0008C912 E1FA                       	smpsAlterNote       $FA
0008C914 01                         	dc.b	$01
0008C915 E100                       	smpsAlterNote       $00
0008C917 01                         	dc.b	$01
0008C918 E104                       	smpsAlterNote       $04
0008C91A 01                         	dc.b	$01
0008C91B E1FD                       	smpsAlterNote       $FD
0008C91D ECF5                       	smpsPSGAlterVol     $F5
0008C91F 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C923 EC04                       	smpsPSGAlterVol     $04
0008C925 E701                       	dc.b	smpsNoAttack, $01
0008C927 EC07                       	smpsPSGAlterVol     $07
0008C929 8009                       	dc.b	nRst, $09
0008C92B E100                       	smpsAlterNote       $00
0008C92D 01                         	dc.b	$01
0008C92E E103                       	smpsAlterNote       $03
0008C930 0101                       	dc.b	$01, $01
0008C932 E1FD                       	smpsAlterNote       $FD
0008C934 01                         	dc.b	$01
0008C935 E1F9                       	smpsAlterNote       $F9
0008C937 01                         	dc.b	$01
0008C938 E1FA                       	smpsAlterNote       $FA
0008C93A 01                         	dc.b	$01
0008C93B E100                       	smpsAlterNote       $00
0008C93D 01                         	dc.b	$01
0008C93E E104                       	smpsAlterNote       $04
0008C940 01                         	dc.b	$01
0008C941 E100                       	smpsAlterNote       $00
0008C943 01                         	dc.b	$01
0008C944 E1FD                       	smpsAlterNote       $FD
0008C946 01                         	dc.b	$01
0008C947 E1F9                       	smpsAlterNote       $F9
0008C949 01                         	dc.b	$01
0008C94A E1FD                       	smpsAlterNote       $FD
0008C94C 01                         	dc.b	$01
0008C94D E103                       	smpsAlterNote       $03
0008C94F 01                         	dc.b	$01
0008C950 E104                       	smpsAlterNote       $04
0008C952 01                         	dc.b	$01
0008C953 E100                       	smpsAlterNote       $00
0008C955 01                         	dc.b	$01
0008C956 E1FD                       	smpsAlterNote       $FD
0008C958 ECF5                       	smpsPSGAlterVol     $F5
0008C95A 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008C95E EC04                       	smpsPSGAlterVol     $04
0008C960 E701                       	dc.b	smpsNoAttack, $01
0008C962 EC07                       	smpsPSGAlterVol     $07
0008C964 8006                       	dc.b	nRst, $06
0008C966 E100                       	smpsAlterNote       $00
0008C968 01                         	dc.b	$01
0008C969 E104                       	smpsAlterNote       $04
0008C96B 01                         	dc.b	$01
0008C96C E103                       	smpsAlterNote       $03
0008C96E 01                         	dc.b	$01
0008C96F E1FD                       	smpsAlterNote       $FD
0008C971 01                         	dc.b	$01
0008C972 E1F9                       	smpsAlterNote       $F9
0008C974 01                         	dc.b	$01
0008C975 E1FD                       	smpsAlterNote       $FD
0008C977 01                         	dc.b	$01
0008C978 E100                       	smpsAlterNote       $00
0008C97A 01                         	dc.b	$01
0008C97B E104                       	smpsAlterNote       $04
0008C97D 01                         	dc.b	$01
0008C97E E1FD                       	smpsAlterNote       $FD
0008C980 ECF5                       	smpsPSGAlterVol     $F5
0008C982 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008C986 E100                       	smpsAlterNote       $00
0008C988 E701                       	dc.b	smpsNoAttack, $01
0008C98A E104                       	smpsAlterNote       $04
0008C98C E701                       	dc.b	smpsNoAttack, $01
0008C98E E100                       	smpsAlterNote       $00
0008C990 E701                       	dc.b	smpsNoAttack, $01
0008C992 E1FD                       	smpsAlterNote       $FD
0008C994 E701                       	dc.b	smpsNoAttack, $01
0008C996 E1F9                       	smpsAlterNote       $F9
0008C998 E701                       	dc.b	smpsNoAttack, $01
0008C99A E1FD                       	smpsAlterNote       $FD
0008C99C E701                       	dc.b	smpsNoAttack, $01
0008C99E E103                       	smpsAlterNote       $03
0008C9A0 E701                       	dc.b	smpsNoAttack, $01
0008C9A2 E104                       	smpsAlterNote       $04
0008C9A4 E701                       	dc.b	smpsNoAttack, $01
0008C9A6 E100                       	smpsAlterNote       $00
0008C9A8 E701                       	dc.b	smpsNoAttack, $01
0008C9AA E1FA                       	smpsAlterNote       $FA
0008C9AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9B0 E1FD                       	smpsAlterNote       $FD
0008C9B2 E701                       	dc.b	smpsNoAttack, $01
0008C9B4 E103                       	smpsAlterNote       $03
0008C9B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9BA E100                       	smpsAlterNote       $00
0008C9BC E701                       	dc.b	smpsNoAttack, $01
0008C9BE E1FA                       	smpsAlterNote       $FA
0008C9C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9C4 E100                       	smpsAlterNote       $00
0008C9C6 EC04                       	smpsPSGAlterVol     $04
0008C9C8 E701                       	dc.b	smpsNoAttack, $01
0008C9CA EC07                       	smpsPSGAlterVol     $07
0008C9CC E104                       	smpsAlterNote       $04
0008C9CE 8001                       	dc.b	nRst, $01
0008C9D0 E103                       	smpsAlterNote       $03
0008C9D2 01                         	dc.b	$01
0008C9D3 E1FD                       	smpsAlterNote       $FD
0008C9D5 01                         	dc.b	$01
0008C9D6 E1F9                       	smpsAlterNote       $F9
0008C9D8 01                         	dc.b	$01
0008C9D9 E1FD                       	smpsAlterNote       $FD
0008C9DB 01                         	dc.b	$01
0008C9DC E100                       	smpsAlterNote       $00
0008C9DE 01                         	dc.b	$01
0008C9DF E104                       	smpsAlterNote       $04
0008C9E1 01                         	dc.b	$01
0008C9E2 E1FD                       	smpsAlterNote       $FD
0008C9E4 ECF5                       	smpsPSGAlterVol     $F5
0008C9E6 9106                       	dc.b	nE1, $06
0008C9E8 EC04                       	smpsPSGAlterVol     $04
0008C9EA E701                       	dc.b	smpsNoAttack, $01
0008C9EC EC07                       	smpsPSGAlterVol     $07
0008C9EE 8003                       	dc.b	nRst, $03
0008C9F0 ECF5                       	smpsPSGAlterVol     $F5
0008C9F2 9106                       	dc.b	nE1, $06
0008C9F4 EC04                       	smpsPSGAlterVol     $04
0008C9F6 E701                       	dc.b	smpsNoAttack, $01
0008C9F8 EC07                       	smpsPSGAlterVol     $07
0008C9FA 8006                       	dc.b	nRst, $06
0008C9FC E100                       	smpsAlterNote       $00
0008C9FE 01                         	dc.b	$01
0008C9FF E104                       	smpsAlterNote       $04
0008CA01 01                         	dc.b	$01
0008CA02 E100                       	smpsAlterNote       $00
0008CA04 01                         	dc.b	$01
0008CA05 E1FD                       	smpsAlterNote       $FD
0008CA07 01                         	dc.b	$01
0008CA08 ECF5                       	smpsPSGAlterVol     $F5
0008CA0A 9206                       	dc.b	nF1, $06
0008CA0C EC04                       	smpsPSGAlterVol     $04
0008CA0E E701                       	dc.b	smpsNoAttack, $01
0008CA10 EC07                       	smpsPSGAlterVol     $07
0008CA12 8003                       	dc.b	nRst, $03
0008CA14 ECF5                       	smpsPSGAlterVol     $F5
0008CA16 9207                       	dc.b	nF1, $07
0008CA18 EC0B                       	smpsPSGAlterVol     $0B
0008CA1A 8007                       	dc.b	nRst, $07
0008CA1C E103                       	smpsAlterNote       $03
0008CA1E 0101                       	dc.b	$01, $01
0008CA20 E1FD                       	smpsAlterNote       $FD
0008CA22 01                         	dc.b	$01
0008CA23 E1FA                       	smpsAlterNote       $FA
0008CA25 01                         	dc.b	$01
0008CA26 E1FD                       	smpsAlterNote       $FD
0008CA28 ECF5                       	smpsPSGAlterVol     $F5
0008CA2A 9106                       	dc.b	nE1, $06
0008CA2C EC0B                       	smpsPSGAlterVol     $0B
0008CA2E 8004                       	dc.b	nRst, $04
0008CA30 ECF5                       	smpsPSGAlterVol     $F5
0008CA32 9106                       	dc.b	nE1, $06
0008CA34 EC04                       	smpsPSGAlterVol     $04
0008CA36 E701                       	dc.b	smpsNoAttack, $01
0008CA38 EC07                       	smpsPSGAlterVol     $07
0008CA3A 8006                       	dc.b	nRst, $06
0008CA3C E100                       	smpsAlterNote       $00
0008CA3E 01                         	dc.b	$01
0008CA3F E104                       	smpsAlterNote       $04
0008CA41 01                         	dc.b	$01
0008CA42 E100                       	smpsAlterNote       $00
0008CA44 01                         	dc.b	$01
0008CA45 E1FA                       	smpsAlterNote       $FA
0008CA47 01                         	dc.b	$01
0008CA48 E1FD                       	smpsAlterNote       $FD
0008CA4A ECF5                       	smpsPSGAlterVol     $F5
0008CA4C 9206                       	dc.b	nF1, $06
0008CA4E EC04                       	smpsPSGAlterVol     $04
0008CA50 E701                       	dc.b	smpsNoAttack, $01
0008CA52 EC07                       	smpsPSGAlterVol     $07
0008CA54 8003                       	dc.b	nRst, $03
0008CA56 ECF5                       	smpsPSGAlterVol     $F5
0008CA58 9206                       	dc.b	nF1, $06
0008CA5A EC04                       	smpsPSGAlterVol     $04
0008CA5C E701                       	dc.b	smpsNoAttack, $01
0008CA5E EC07                       	smpsPSGAlterVol     $07
0008CA60 8006                       	dc.b	nRst, $06
0008CA62 E100                       	smpsAlterNote       $00
0008CA64 01                         	dc.b	$01
0008CA65 E104                       	smpsAlterNote       $04
0008CA67 01                         	dc.b	$01
0008CA68 E103                       	smpsAlterNote       $03
0008CA6A 01                         	dc.b	$01
0008CA6B E1FD                       	smpsAlterNote       $FD
0008CA6D 01                         	dc.b	$01
0008CA6E ECF5                       	smpsPSGAlterVol     $F5
0008CA70 9107                       	dc.b	nE1, $07
0008CA72 EC0B                       	smpsPSGAlterVol     $0B
0008CA74 8004                       	dc.b	nRst, $04
0008CA76 ECF5                       	smpsPSGAlterVol     $F5
0008CA78 9106                       	dc.b	nE1, $06
0008CA7A EC0B                       	smpsPSGAlterVol     $0B
0008CA7C 8007                       	dc.b	nRst, $07
0008CA7E E103                       	smpsAlterNote       $03
0008CA80 0101                       	dc.b	$01, $01
0008CA82 E100                       	smpsAlterNote       $00
0008CA84 01                         	dc.b	$01
0008CA85 E1FA                       	smpsAlterNote       $FA
0008CA87 01                         	dc.b	$01
0008CA88 E1FD                       	smpsAlterNote       $FD
0008CA8A ECF5                       	smpsPSGAlterVol     $F5
0008CA8C 9206                       	dc.b	nF1, $06
0008CA8E EC04                       	smpsPSGAlterVol     $04
0008CA90 E701                       	dc.b	smpsNoAttack, $01
0008CA92 EC07                       	smpsPSGAlterVol     $07
0008CA94 8003                       	dc.b	nRst, $03
0008CA96 ECF5                       	smpsPSGAlterVol     $F5
0008CA98 9206                       	dc.b	nF1, $06
0008CA9A EC04                       	smpsPSGAlterVol     $04
0008CA9C E701                       	dc.b	smpsNoAttack, $01
0008CA9E EC07                       	smpsPSGAlterVol     $07
0008CAA0 8006                       	dc.b	nRst, $06
0008CAA2 E100                       	smpsAlterNote       $00
0008CAA4 01                         	dc.b	$01
0008CAA5 E104                       	smpsAlterNote       $04
0008CAA7 01                         	dc.b	$01
0008CAA8 E100                       	smpsAlterNote       $00
0008CAAA 01                         	dc.b	$01
0008CAAB E1FD                       	smpsAlterNote       $FD
0008CAAD 01                         	dc.b	$01
0008CAAE ECF5                       	smpsPSGAlterVol     $F5
0008CAB0 9106                       	dc.b	nE1, $06
0008CAB2 EC04                       	smpsPSGAlterVol     $04
0008CAB4 E701                       	dc.b	smpsNoAttack, $01
0008CAB6 EC07                       	smpsPSGAlterVol     $07
0008CAB8 8003                       	dc.b	nRst, $03
0008CABA ECF5                       	smpsPSGAlterVol     $F5
0008CABC 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CAC0 EC04                       	smpsPSGAlterVol     $04
0008CAC2 E701                       	dc.b	smpsNoAttack, $01
0008CAC4 ECFC                       	smpsPSGAlterVol     $FC
0008CAC6 9103                       	dc.b	nE1, $03
0008CAC8 EC04                       	smpsPSGAlterVol     $04
0008CACA E701                       	dc.b	smpsNoAttack, $01
0008CACC ECFC                       	smpsPSGAlterVol     $FC
0008CACE 9102                       	dc.b	nE1, $02
0008CAD0 EC04                       	smpsPSGAlterVol     $04
0008CAD2 E701                       	dc.b	smpsNoAttack, $01
0008CAD4 ECFC                       	smpsPSGAlterVol     $FC
0008CAD6 9103                       	dc.b	nE1, $03
0008CAD8 EC0B                       	smpsPSGAlterVol     $0B
0008CADA 800A                       	dc.b	nRst, $0A
0008CADC E100                       	smpsAlterNote       $00
0008CADE 01                         	dc.b	$01
0008CADF E104                       	smpsAlterNote       $04
0008CAE1 01                         	dc.b	$01
0008CAE2 E100                       	smpsAlterNote       $00
0008CAE4 01                         	dc.b	$01
0008CAE5 E1FA                       	smpsAlterNote       $FA
0008CAE7 01                         	dc.b	$01
0008CAE8 E1F9                       	smpsAlterNote       $F9
0008CAEA 01                         	dc.b	$01
0008CAEB E1FD                       	smpsAlterNote       $FD
0008CAED 01                         	dc.b	$01
0008CAEE E103                       	smpsAlterNote       $03
0008CAF0 0101                       	dc.b	$01, $01
0008CAF2 E100                       	smpsAlterNote       $00
0008CAF4 01                         	dc.b	$01
0008CAF5 E1FA                       	smpsAlterNote       $FA
0008CAF7 0101                       	dc.b	$01, $01
0008CAF9 E1FD                       	smpsAlterNote       $FD
0008CAFB ECF5                       	smpsPSGAlterVol     $F5
0008CAFD 9206                       	dc.b	nF1, $06
0008CAFF EC04                       	smpsPSGAlterVol     $04
0008CB01 E704                       	dc.b	smpsNoAttack, $04
0008CB03 ECFC                       	smpsPSGAlterVol     $FC
0008CB05 9206                       	dc.b	nF1, $06
0008CB07 EC04                       	smpsPSGAlterVol     $04
0008CB09 E701                       	dc.b	smpsNoAttack, $01
0008CB0B EC07                       	smpsPSGAlterVol     $07
0008CB0D 8006                       	dc.b	nRst, $06
0008CB0F E100                       	smpsAlterNote       $00
0008CB11 01                         	dc.b	$01
0008CB12 E104                       	smpsAlterNote       $04
0008CB14 01                         	dc.b	$01
0008CB15 E103                       	smpsAlterNote       $03
0008CB17 01                         	dc.b	$01
0008CB18 E1FD                       	smpsAlterNote       $FD
0008CB1A 01                         	dc.b	$01
0008CB1B ECF5                       	smpsPSGAlterVol     $F5
0008CB1D 9407                       	dc.b	nG1, $07
0008CB1F EC0B                       	smpsPSGAlterVol     $0B
0008CB21 8004                       	dc.b	nRst, $04
0008CB23 ECF5                       	smpsPSGAlterVol     $F5
0008CB25 9406                       	dc.b	nG1, $06
0008CB27 EC0B                       	smpsPSGAlterVol     $0B
0008CB29 8007                       	dc.b	nRst, $07
0008CB2B E103                       	smpsAlterNote       $03
0008CB2D 0101                       	dc.b	$01, $01
0008CB2F E1FD                       	smpsAlterNote       $FD
0008CB31 01                         	dc.b	$01
0008CB32 E1F9                       	smpsAlterNote       $F9
0008CB34 01                         	dc.b	$01
0008CB35 E1FD                       	smpsAlterNote       $FD
0008CB37 ECF5                       	smpsPSGAlterVol     $F5
0008CB39 9206                       	dc.b	nF1, $06
0008CB3B EC04                       	smpsPSGAlterVol     $04
0008CB3D E701                       	dc.b	smpsNoAttack, $01
0008CB3F EC07                       	smpsPSGAlterVol     $07
0008CB41 8003                       	dc.b	nRst, $03
0008CB43 ECF5                       	smpsPSGAlterVol     $F5
0008CB45 9206                       	dc.b	nF1, $06
0008CB47 EC04                       	smpsPSGAlterVol     $04
0008CB49 E701                       	dc.b	smpsNoAttack, $01
0008CB4B EC07                       	smpsPSGAlterVol     $07
0008CB4D 8006                       	dc.b	nRst, $06
0008CB4F E100                       	smpsAlterNote       $00
0008CB51 01                         	dc.b	$01
0008CB52 E104                       	smpsAlterNote       $04
0008CB54 01                         	dc.b	$01
0008CB55 E100                       	smpsAlterNote       $00
0008CB57 01                         	dc.b	$01
0008CB58 E1FA                       	smpsAlterNote       $FA
0008CB5A 01                         	dc.b	$01
0008CB5B E1FD                       	smpsAlterNote       $FD
0008CB5D ECF5                       	smpsPSGAlterVol     $F5
0008CB5F 9206                       	dc.b	nF1, $06
0008CB61 EC04                       	smpsPSGAlterVol     $04
0008CB63 E701                       	dc.b	smpsNoAttack, $01
0008CB65 EC07                       	smpsPSGAlterVol     $07
0008CB67 8003                       	dc.b	nRst, $03
0008CB69 ECF5                       	smpsPSGAlterVol     $F5
0008CB6B 9107                       	dc.b	nE1, $07
0008CB6D EC0B                       	smpsPSGAlterVol     $0B
0008CB6F 8006                       	dc.b	nRst, $06
0008CB71 E100                       	smpsAlterNote       $00
0008CB73 01                         	dc.b	$01
0008CB74 E103                       	smpsAlterNote       $03
0008CB76 0101                       	dc.b	$01, $01
0008CB78 E1FD                       	smpsAlterNote       $FD
0008CB7A 01                         	dc.b	$01
0008CB7B ECF5                       	smpsPSGAlterVol     $F5
0008CB7D 9207                       	dc.b	nF1, $07
0008CB7F EC0B                       	smpsPSGAlterVol     $0B
0008CB81 8004                       	dc.b	nRst, $04
0008CB83 ECF5                       	smpsPSGAlterVol     $F5
0008CB85 9206                       	dc.b	nF1, $06
0008CB87 EC04                       	smpsPSGAlterVol     $04
0008CB89 E701                       	dc.b	smpsNoAttack, $01
0008CB8B EC07                       	smpsPSGAlterVol     $07
0008CB8D 8006                       	dc.b	nRst, $06
0008CB8F E103                       	smpsAlterNote       $03
0008CB91 01                         	dc.b	$01
0008CB92 E104                       	smpsAlterNote       $04
0008CB94 01                         	dc.b	$01
0008CB95 E100                       	smpsAlterNote       $00
0008CB97 01                         	dc.b	$01
0008CB98 E1FB                       	smpsAlterNote       $FB
0008CB9A 01                         	dc.b	$01
0008CB9B E1FD                       	smpsAlterNote       $FD
0008CB9D ECF5                       	smpsPSGAlterVol     $F5
0008CB9F 9406                       	dc.b	nG1, $06
0008CBA1 EC04                       	smpsPSGAlterVol     $04
0008CBA3 E701                       	dc.b	smpsNoAttack, $01
0008CBA5 EC07                       	smpsPSGAlterVol     $07
0008CBA7 8003                       	dc.b	nRst, $03
0008CBA9 ECF5                       	smpsPSGAlterVol     $F5
0008CBAB 9406                       	dc.b	nG1, $06
0008CBAD EC04                       	smpsPSGAlterVol     $04
0008CBAF E701                       	dc.b	smpsNoAttack, $01
0008CBB1 EC07                       	smpsPSGAlterVol     $07
0008CBB3 8006                       	dc.b	nRst, $06
0008CBB5 E100                       	smpsAlterNote       $00
0008CBB7 01                         	dc.b	$01
0008CBB8 E104                       	smpsAlterNote       $04
0008CBBA 01                         	dc.b	$01
0008CBBB E100                       	smpsAlterNote       $00
0008CBBD 01                         	dc.b	$01
0008CBBE E1FD                       	smpsAlterNote       $FD
0008CBC0 01                         	dc.b	$01
0008CBC1 ECF5                       	smpsPSGAlterVol     $F5
0008CBC3 9206                       	dc.b	nF1, $06
0008CBC5 EC04                       	smpsPSGAlterVol     $04
0008CBC7 E701                       	dc.b	smpsNoAttack, $01
0008CBC9 EC07                       	smpsPSGAlterVol     $07
0008CBCB 8003                       	dc.b	nRst, $03
0008CBCD ECF5                       	smpsPSGAlterVol     $F5
0008CBCF 9207                       	dc.b	nF1, $07
0008CBD1 EC0B                       	smpsPSGAlterVol     $0B
0008CBD3 8007                       	dc.b	nRst, $07
0008CBD5 E103                       	smpsAlterNote       $03
0008CBD7 0101                       	dc.b	$01, $01
0008CBD9 E1FD                       	smpsAlterNote       $FD
0008CBDB 01                         	dc.b	$01
0008CBDC E1FA                       	smpsAlterNote       $FA
0008CBDE 01                         	dc.b	$01
0008CBDF E1FD                       	smpsAlterNote       $FD
0008CBE1 ECF5                       	smpsPSGAlterVol     $F5
0008CBE3 9206                       	dc.b	nF1, $06
0008CBE5 EC0B                       	smpsPSGAlterVol     $0B
0008CBE7 8004                       	dc.b	nRst, $04
0008CBE9 ECF5                       	smpsPSGAlterVol     $F5
0008CBEB 9206                       	dc.b	nF1, $06
0008CBED EC04                       	smpsPSGAlterVol     $04
0008CBEF E701                       	dc.b	smpsNoAttack, $01
0008CBF1 EC07                       	smpsPSGAlterVol     $07
0008CBF3 8006                       	dc.b	nRst, $06
0008CBF5 E100                       	smpsAlterNote       $00
0008CBF7 01                         	dc.b	$01
0008CBF8 E104                       	smpsAlterNote       $04
0008CBFA 01                         	dc.b	$01
0008CBFB E100                       	smpsAlterNote       $00
0008CBFD 01                         	dc.b	$01
0008CBFE E1FA                       	smpsAlterNote       $FA
0008CC00 01                         	dc.b	$01
0008CC01 E1FD                       	smpsAlterNote       $FD
0008CC03 ECF5                       	smpsPSGAlterVol     $F5
0008CC05 9206                       	dc.b	nF1, $06
0008CC07 EC04                       	smpsPSGAlterVol     $04
0008CC09 E701                       	dc.b	smpsNoAttack, $01
0008CC0B EC07                       	smpsPSGAlterVol     $07
0008CC0D 8003                       	dc.b	nRst, $03
0008CC0F ECF5                       	smpsPSGAlterVol     $F5
0008CC11 9207                       	dc.b	nF1, $07
0008CC13 EC0B                       	smpsPSGAlterVol     $0B
0008CC15 8006                       	dc.b	nRst, $06
0008CC17 E100                       	smpsAlterNote       $00
0008CC19 01                         	dc.b	$01
0008CC1A E103                       	smpsAlterNote       $03
0008CC1C 0101                       	dc.b	$01, $01
0008CC1E E1FD                       	smpsAlterNote       $FD
0008CC20 01                         	dc.b	$01
0008CC21 ECF5                       	smpsPSGAlterVol     $F5
0008CC23 9207                       	dc.b	nF1, $07
0008CC25 EC0B                       	smpsPSGAlterVol     $0B
0008CC27 8004                       	dc.b	nRst, $04
0008CC29 ECF5                       	smpsPSGAlterVol     $F5
0008CC2B 9206                       	dc.b	nF1, $06
0008CC2D EC0B                       	smpsPSGAlterVol     $0B
0008CC2F 8007                       	dc.b	nRst, $07
0008CC31 E103                       	smpsAlterNote       $03
0008CC33 0101                       	dc.b	$01, $01
0008CC35 E100                       	smpsAlterNote       $00
0008CC37 01                         	dc.b	$01
0008CC38 E1FA                       	smpsAlterNote       $FA
0008CC3A 01                         	dc.b	$01
0008CC3B E1FD                       	smpsAlterNote       $FD
0008CC3D ECF5                       	smpsPSGAlterVol     $F5
0008CC3F 9206                       	dc.b	nF1, $06
0008CC41 EC04                       	smpsPSGAlterVol     $04
0008CC43 E701                       	dc.b	smpsNoAttack, $01
0008CC45 EC07                       	smpsPSGAlterVol     $07
0008CC47 8003                       	dc.b	nRst, $03
0008CC49 ECF5                       	smpsPSGAlterVol     $F5
0008CC4B 9206                       	dc.b	nF1, $06
0008CC4D EC04                       	smpsPSGAlterVol     $04
0008CC4F E701                       	dc.b	smpsNoAttack, $01
0008CC51 EC07                       	smpsPSGAlterVol     $07
0008CC53 8006                       	dc.b	nRst, $06
0008CC55 E100                       	smpsAlterNote       $00
0008CC57 01                         	dc.b	$01
0008CC58 E104                       	smpsAlterNote       $04
0008CC5A 01                         	dc.b	$01
0008CC5B E100                       	smpsAlterNote       $00
0008CC5D 01                         	dc.b	$01
0008CC5E E1FD                       	smpsAlterNote       $FD
0008CC60 01                         	dc.b	$01
0008CC61 ECF5                       	smpsPSGAlterVol     $F5
0008CC63 9206                       	dc.b	nF1, $06
0008CC65 EC04                       	smpsPSGAlterVol     $04
0008CC67 E701                       	dc.b	smpsNoAttack, $01
0008CC69 EC07                       	smpsPSGAlterVol     $07
0008CC6B 8003                       	dc.b	nRst, $03
0008CC6D ECF5                       	smpsPSGAlterVol     $F5
0008CC6F 9207                       	dc.b	nF1, $07
0008CC71 EC0B                       	smpsPSGAlterVol     $0B
0008CC73 8007                       	dc.b	nRst, $07
0008CC75 E104                       	smpsAlterNote       $04
0008CC77 0101                       	dc.b	$01, $01
0008CC79 E1FB                       	smpsAlterNote       $FB
0008CC7B 01                         	dc.b	$01
0008CC7C E1F6                       	smpsAlterNote       $F6
0008CC7E 0101                       	dc.b	$01, $01
0008CC80 E1FF                       	smpsAlterNote       $FF
0008CC82 01                         	dc.b	$01
0008CC83 E105                       	smpsAlterNote       $05
0008CC85 01                         	dc.b	$01
0008CC86 E104                       	smpsAlterNote       $04
0008CC88 01                         	dc.b	$01
0008CC89 E1FB                       	smpsAlterNote       $FB
0008CC8B 01                         	dc.b	$01
0008CC8C E1F5                       	smpsAlterNote       $F5
0008CC8E 01                         	dc.b	$01
0008CC8F E1FC                       	smpsAlterNote       $FC
0008CC91 ECF5                       	smpsPSGAlterVol     $F5
0008CC93 8B0E                       	dc.b	nBb0, $0E
0008CC95 E102                       	smpsAlterNote       $02
0008CC97 EC0B                       	smpsPSGAlterVol     $0B
0008CC99 8001                       	dc.b	nRst, $01
0008CC9B E101                       	smpsAlterNote       $01
0008CC9D 01                         	dc.b	$01
0008CC9E E1FC                       	smpsAlterNote       $FC
0008CCA0 01                         	dc.b	$01
0008CCA1 E1F9                       	smpsAlterNote       $F9
0008CCA3 0101                       	dc.b	$01, $01
0008CCA5 E1FF                       	smpsAlterNote       $FF
0008CCA7 01                         	dc.b	$01
0008CCA8 E102                       	smpsAlterNote       $02
0008CCAA 01                         	dc.b	$01
0008CCAB E1FF                       	smpsAlterNote       $FF
0008CCAD 01                         	dc.b	$01
0008CCAE E1FC                       	smpsAlterNote       $FC
0008CCB0 01                         	dc.b	$01
0008CCB1 E1F8                       	smpsAlterNote       $F8
0008CCB3 01                         	dc.b	$01
0008CCB4 E1FC                       	smpsAlterNote       $FC
0008CCB6 01                         	dc.b	$01
0008CCB7 E101                       	smpsAlterNote       $01
0008CCB9 01                         	dc.b	$01
0008CCBA E102                       	smpsAlterNote       $02
0008CCBC 01                         	dc.b	$01
0008CCBD E1FF                       	smpsAlterNote       $FF
0008CCBF 01                         	dc.b	$01
0008CCC0 E1FB                       	smpsAlterNote       $FB
0008CCC2 ECF5                       	smpsPSGAlterVol     $F5
0008CCC4 8D0D                       	dc.b	nC1, $0D
0008CCC6 E101                       	smpsAlterNote       $01
0008CCC8 EC0B                       	smpsPSGAlterVol     $0B
0008CCCA 8001                       	dc.b	nRst, $01
0008CCCC E102                       	smpsAlterNote       $02
0008CCCE 01                         	dc.b	$01
0008CCCF E1FF                       	smpsAlterNote       $FF
0008CCD1 01                         	dc.b	$01
0008CCD2 E1F9                       	smpsAlterNote       $F9
0008CCD4 0101                       	dc.b	$01, $01
0008CCD6 E1FC                       	smpsAlterNote       $FC
0008CCD8 01                         	dc.b	$01
0008CCD9 E101                       	smpsAlterNote       $01
0008CCDB 0101                       	dc.b	$01, $01
0008CCDD E1FC                       	smpsAlterNote       $FC
0008CCDF 01                         	dc.b	$01
0008CCE0 E1F9                       	smpsAlterNote       $F9
0008CCE2 0101                       	dc.b	$01, $01
0008CCE4 E1FF                       	smpsAlterNote       $FF
0008CCE6 01                         	dc.b	$01
0008CCE7 E102                       	smpsAlterNote       $02
0008CCE9 01                         	dc.b	$01
0008CCEA E101                       	smpsAlterNote       $01
0008CCEC 01                         	dc.b	$01
0008CCED E1FC                       	smpsAlterNote       $FC
0008CCEF ECF5                       	smpsPSGAlterVol     $F5
0008CCF1 8F0D                       	dc.b	nD1, $0D
0008CCF3 E1FF                       	smpsAlterNote       $FF
0008CCF5 EC04                       	smpsPSGAlterVol     $04
0008CCF7 E701                       	dc.b	smpsNoAttack, $01
0008CCF9 EC07                       	smpsPSGAlterVol     $07
0008CCFB E103                       	smpsAlterNote       $03
0008CCFD 8001                       	dc.b	nRst, $01
0008CCFF E102                       	smpsAlterNote       $02
0008CD01 01                         	dc.b	$01
0008CD02 E1FD                       	smpsAlterNote       $FD
0008CD04 01                         	dc.b	$01
0008CD05 E1F9                       	smpsAlterNote       $F9
0008CD07 01                         	dc.b	$01
0008CD08 E1FD                       	smpsAlterNote       $FD
0008CD0A 01                         	dc.b	$01
0008CD0B E100                       	smpsAlterNote       $00
0008CD0D 01                         	dc.b	$01
0008CD0E E103                       	smpsAlterNote       $03
0008CD10 01                         	dc.b	$01
0008CD11 E100                       	smpsAlterNote       $00
0008CD13 01                         	dc.b	$01
0008CD14 E1FA                       	smpsAlterNote       $FA
0008CD16 01                         	dc.b	$01
0008CD17 E1F9                       	smpsAlterNote       $F9
0008CD19 01                         	dc.b	$01
0008CD1A E1FD                       	smpsAlterNote       $FD
0008CD1C 01                         	dc.b	$01
0008CD1D E102                       	smpsAlterNote       $02
0008CD1F 0101                       	dc.b	$01, $01
0008CD21 E100                       	smpsAlterNote       $00
0008CD23 01                         	dc.b	$01
0008CD24 E1FD                       	smpsAlterNote       $FD
0008CD26 ECF5                       	smpsPSGAlterVol     $F5
0008CD28 910D                       	dc.b	nE1, $0D
0008CD2A E103                       	smpsAlterNote       $03
0008CD2C EC0B                       	smpsPSGAlterVol     $0B
0008CD2E 8001 01                    	dc.b	nRst, $01, $01
0008CD31 E100                       	smpsAlterNote       $00
0008CD33 01                         	dc.b	$01
0008CD34 E1FA                       	smpsAlterNote       $FA
0008CD36 0101                       	dc.b	$01, $01
0008CD38 E100                       	smpsAlterNote       $00
0008CD3A 01                         	dc.b	$01
0008CD3B E103                       	smpsAlterNote       $03
0008CD3D 01                         	dc.b	$01
0008CD3E E1FD                       	smpsAlterNote       $FD
0008CD40 ECF5                       	smpsPSGAlterVol     $F5
0008CD42 9206                       	dc.b	nF1, $06
0008CD44 EC04                       	smpsPSGAlterVol     $04
0008CD46 E701                       	dc.b	smpsNoAttack, $01
0008CD48 EC07                       	smpsPSGAlterVol     $07
0008CD4A 8003                       	dc.b	nRst, $03
0008CD4C ECF5                       	smpsPSGAlterVol     $F5
0008CD4E 9207                       	dc.b	nF1, $07
0008CD50 EC0B                       	smpsPSGAlterVol     $0B
0008CD52 8006                       	dc.b	nRst, $06
0008CD54 E100                       	smpsAlterNote       $00
0008CD56 01                         	dc.b	$01
0008CD57 E103                       	smpsAlterNote       $03
0008CD59 0101                       	dc.b	$01, $01
0008CD5B E1FD                       	smpsAlterNote       $FD
0008CD5D 01                         	dc.b	$01
0008CD5E ECF5                       	smpsPSGAlterVol     $F5
0008CD60 9407                       	dc.b	nG1, $07
0008CD62 EC0B                       	smpsPSGAlterVol     $0B
0008CD64 8004                       	dc.b	nRst, $04
0008CD66 ECF5                       	smpsPSGAlterVol     $F5
0008CD68 9406                       	dc.b	nG1, $06
0008CD6A EC04                       	smpsPSGAlterVol     $04
0008CD6C E701                       	dc.b	smpsNoAttack, $01
0008CD6E EC07                       	smpsPSGAlterVol     $07
0008CD70 8006                       	dc.b	nRst, $06
0008CD72 E103                       	smpsAlterNote       $03
0008CD74 01                         	dc.b	$01
0008CD75 E104                       	smpsAlterNote       $04
0008CD77 01                         	dc.b	$01
0008CD78 E100                       	smpsAlterNote       $00
0008CD7A 01                         	dc.b	$01
0008CD7B E1F9                       	smpsAlterNote       $F9
0008CD7D 01                         	dc.b	$01
0008CD7E E1FD                       	smpsAlterNote       $FD
0008CD80 ECF5                       	smpsPSGAlterVol     $F5
0008CD82 9206                       	dc.b	nF1, $06
0008CD84 EC04                       	smpsPSGAlterVol     $04
0008CD86 E701                       	dc.b	smpsNoAttack, $01
0008CD88 EC07                       	smpsPSGAlterVol     $07
0008CD8A 8003                       	dc.b	nRst, $03
0008CD8C ECF5                       	smpsPSGAlterVol     $F5
0008CD8E 9206                       	dc.b	nF1, $06
0008CD90 EC04                       	smpsPSGAlterVol     $04
0008CD92 E701                       	dc.b	smpsNoAttack, $01
0008CD94 EC07                       	smpsPSGAlterVol     $07
0008CD96 8006                       	dc.b	nRst, $06
0008CD98 E100                       	smpsAlterNote       $00
0008CD9A 01                         	dc.b	$01
0008CD9B E104                       	smpsAlterNote       $04
0008CD9D 01                         	dc.b	$01
0008CD9E E103                       	smpsAlterNote       $03
0008CDA0 01                         	dc.b	$01
0008CDA1 E1FD                       	smpsAlterNote       $FD
0008CDA3 01                         	dc.b	$01
0008CDA4 ECF5                       	smpsPSGAlterVol     $F5
0008CDA6 9407                       	dc.b	nG1, $07
0008CDA8 EC0B                       	smpsPSGAlterVol     $0B
0008CDAA 8004                       	dc.b	nRst, $04
0008CDAC ECF5                       	smpsPSGAlterVol     $F5
0008CDAE 9406                       	dc.b	nG1, $06
0008CDB0 EC0B                       	smpsPSGAlterVol     $0B
0008CDB2 8007                       	dc.b	nRst, $07
0008CDB4 E103                       	smpsAlterNote       $03
0008CDB6 0101                       	dc.b	$01, $01
0008CDB8 E100                       	smpsAlterNote       $00
0008CDBA 01                         	dc.b	$01
0008CDBB E1F9                       	smpsAlterNote       $F9
0008CDBD 01                         	dc.b	$01
0008CDBE E1FD                       	smpsAlterNote       $FD
0008CDC0 ECF5                       	smpsPSGAlterVol     $F5
0008CDC2 9206                       	dc.b	nF1, $06
0008CDC4 EC04                       	smpsPSGAlterVol     $04
0008CDC6 E701                       	dc.b	smpsNoAttack, $01
0008CDC8 EC07                       	smpsPSGAlterVol     $07
0008CDCA 8003                       	dc.b	nRst, $03
0008CDCC ECF5                       	smpsPSGAlterVol     $F5
0008CDCE 9206                       	dc.b	nF1, $06
0008CDD0 EC04                       	smpsPSGAlterVol     $04
0008CDD2 E701                       	dc.b	smpsNoAttack, $01
0008CDD4 EC07                       	smpsPSGAlterVol     $07
0008CDD6 8006                       	dc.b	nRst, $06
0008CDD8 E100                       	smpsAlterNote       $00
0008CDDA 01                         	dc.b	$01
0008CDDB E104                       	smpsAlterNote       $04
0008CDDD 01                         	dc.b	$01
0008CDDE E100                       	smpsAlterNote       $00
0008CDE0 01                         	dc.b	$01
0008CDE1 E1FB                       	smpsAlterNote       $FB
0008CDE3 01                         	dc.b	$01
0008CDE4 E1FD                       	smpsAlterNote       $FD
0008CDE6 ECF5                       	smpsPSGAlterVol     $F5
0008CDE8 9406                       	dc.b	nG1, $06
0008CDEA EC04                       	smpsPSGAlterVol     $04
0008CDEC E701                       	dc.b	smpsNoAttack, $01
0008CDEE EC07                       	smpsPSGAlterVol     $07
0008CDF0 8003                       	dc.b	nRst, $03
0008CDF2 ECF5                       	smpsPSGAlterVol     $F5
0008CDF4 9407                       	dc.b	nG1, $07
0008CDF6 EC0B                       	smpsPSGAlterVol     $0B
0008CDF8 8006                       	dc.b	nRst, $06
0008CDFA E100                       	smpsAlterNote       $00
0008CDFC 01                         	dc.b	$01
0008CDFD E103                       	smpsAlterNote       $03
0008CDFF 0101                       	dc.b	$01, $01
0008CE01 E1FD                       	smpsAlterNote       $FD
0008CE03 01                         	dc.b	$01
0008CE04 ECF5                       	smpsPSGAlterVol     $F5
0008CE06 9207                       	dc.b	nF1, $07
0008CE08 EC0B                       	smpsPSGAlterVol     $0B
0008CE0A 8004                       	dc.b	nRst, $04
0008CE0C ECF5                       	smpsPSGAlterVol     $F5
0008CE0E 9206                       	dc.b	nF1, $06
0008CE10 EC04                       	smpsPSGAlterVol     $04
0008CE12 E701                       	dc.b	smpsNoAttack, $01
0008CE14 ECFC                       	smpsPSGAlterVol     $FC
0008CE16 E1FC                       	smpsAlterNote       $FC
0008CE18 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008CE1C EC04                       	smpsPSGAlterVol     $04
0008CE1E E701                       	dc.b	smpsNoAttack, $01
0008CE20 ECFC                       	smpsPSGAlterVol     $FC
0008CE22 9003                       	dc.b	nEb1, $03
0008CE24 E1FD                       	smpsAlterNote       $FD
0008CE26 9403                       	dc.b	nG1, $03
0008CE28 EC04                       	smpsPSGAlterVol     $04
0008CE2A E701                       	dc.b	smpsNoAttack, $01
0008CE2C E1FE                       	smpsAlterNote       $FE
0008CE2E ECFC                       	smpsPSGAlterVol     $FC
0008CE30 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008CE34 EC04                       	smpsPSGAlterVol     $04
0008CE36 E701                       	dc.b	smpsNoAttack, $01
0008CE38 EC07                       	smpsPSGAlterVol     $07
0008CE3A 8009                       	dc.b	nRst, $09
0008CE3C E100                       	smpsAlterNote       $00
0008CE3E 01                         	dc.b	$01
0008CE3F F6F5 19                    	smpsJump            music84_Jump07
0008CE42                            
0008CE42                            ; PSG2 Data
0008CE42                            music84_PSG2:
0008CE42 E1FC                       	smpsAlterNote       $FC
0008CE44 EC04                       	smpsPSGAlterVol     $04
0008CE46 8F03                       	dc.b	nD1, $03
0008CE48 E1FD                       	smpsAlterNote       $FD
0008CE4A 9203                       	dc.b	nF1, $03
0008CE4C EC04                       	smpsPSGAlterVol     $04
0008CE4E E701                       	dc.b	smpsNoAttack, $01
0008CE50 E1FE                       	smpsAlterNote       $FE
0008CE52 ECFC                       	smpsPSGAlterVol     $FC
0008CE54 9603                       	dc.b	nA1, $03
0008CE56 E1FD                       	smpsAlterNote       $FD
0008CE58 9103                       	dc.b	nE1, $03
0008CE5A EC04                       	smpsPSGAlterVol     $04
0008CE5C E701                       	dc.b	smpsNoAttack, $01
0008CE5E ECFC                       	smpsPSGAlterVol     $FC
0008CE60 9403                       	dc.b	nG1, $03
0008CE62 E1FE                       	smpsAlterNote       $FE
0008CE64 9703                       	dc.b	nBb1, $03
0008CE66 EC04                       	smpsPSGAlterVol     $04
0008CE68 E701                       	dc.b	smpsNoAttack, $01
0008CE6A E1FF                       	smpsAlterNote       $FF
0008CE6C ECFC                       	smpsPSGAlterVol     $FC
0008CE6E 9B02                       	dc.b	nD2, $02
0008CE70 EC04                       	smpsPSGAlterVol     $04
0008CE72 E701                       	dc.b	smpsNoAttack, $01
0008CE74 ECFC                       	smpsPSGAlterVol     $FC
0008CE76 E1FE                       	smpsAlterNote       $FE
0008CE78 9A03                       	dc.b	nCs2, $03
0008CE7A EC0B                       	smpsPSGAlterVol     $0B
0008CE7C 800A                       	dc.b	nRst, $0A
0008CE7E E102                       	smpsAlterNote       $02
0008CE80 01                         	dc.b	$01
0008CE81 E10A                       	smpsAlterNote       $0A
0008CE83 01                         	dc.b	$01
0008CE84 E102                       	smpsAlterNote       $02
0008CE86 01                         	dc.b	$01
0008CE87 E1FC                       	smpsAlterNote       $FC
0008CE89 01                         	dc.b	$01
0008CE8A E10A                       	smpsAlterNote       $0A
0008CE8C 01                         	dc.b	$01
0008CE8D E1FC                       	smpsAlterNote       $FC
0008CE8F 01                         	dc.b	$01
0008CE90 E108                       	smpsAlterNote       $08
0008CE92 01                         	dc.b	$01
0008CE93 E10A                       	smpsAlterNote       $0A
0008CE95 01                         	dc.b	$01
0008CE96 E102                       	smpsAlterNote       $02
0008CE98 01                         	dc.b	$01
0008CE99 E1F7                       	smpsAlterNote       $F7
0008CE9B 0101                       	dc.b	$01, $01
0008CE9D E102                       	smpsAlterNote       $02
0008CE9F 01                         	dc.b	$01
0008CEA0 E108                       	smpsAlterNote       $08
0008CEA2 0101                       	dc.b	$01, $01
0008CEA4 E1FC                       	smpsAlterNote       $FC
0008CEA6 01                         	dc.b	$01
0008CEA7 E10A                       	smpsAlterNote       $0A
0008CEA9 01                         	dc.b	$01
0008CEAA E1F7                       	smpsAlterNote       $F7
0008CEAC 01                         	dc.b	$01
0008CEAD E102                       	smpsAlterNote       $02
0008CEAF 01                         	dc.b	$01
0008CEB0 E10A                       	smpsAlterNote       $0A
0008CEB2 01                         	dc.b	$01
0008CEB3 E102                       	smpsAlterNote       $02
0008CEB5 01                         	dc.b	$01
0008CEB6 E1FC                       	smpsAlterNote       $FC
0008CEB8 01                         	dc.b	$01
0008CEB9                            
0008CEB9                            music84_Jump06:
0008CEB9 E10A                       	smpsAlterNote       $0A
0008CEBB 8001                       	dc.b	nRst, $01
0008CEBD E1FC                       	smpsAlterNote       $FC
0008CEBF 01                         	dc.b	$01
0008CEC0 E108                       	smpsAlterNote       $08
0008CEC2 01                         	dc.b	$01
0008CEC3 E10A                       	smpsAlterNote       $0A
0008CEC5 01                         	dc.b	$01
0008CEC6 E1FC                       	smpsAlterNote       $FC
0008CEC8 ECF5                       	smpsPSGAlterVol     $F5
0008CECA 8F06                       	dc.b	nD1, $06
0008CECC EC04                       	smpsPSGAlterVol     $04
0008CECE E701                       	dc.b	smpsNoAttack, $01
0008CED0 EC07                       	smpsPSGAlterVol     $07
0008CED2 8003                       	dc.b	nRst, $03
0008CED4 ECF5                       	smpsPSGAlterVol     $F5
0008CED6 8F06                       	dc.b	nD1, $06
0008CED8 EC04                       	smpsPSGAlterVol     $04
0008CEDA E701                       	dc.b	smpsNoAttack, $01
0008CEDC EC07                       	smpsPSGAlterVol     $07
0008CEDE 8006                       	dc.b	nRst, $06
0008CEE0 E1FF                       	smpsAlterNote       $FF
0008CEE2 01                         	dc.b	$01
0008CEE3 E102                       	smpsAlterNote       $02
0008CEE5 01                         	dc.b	$01
0008CEE6 E1FF                       	smpsAlterNote       $FF
0008CEE8 01                         	dc.b	$01
0008CEE9 E1F9                       	smpsAlterNote       $F9
0008CEEB 01                         	dc.b	$01
0008CEEC E1FC                       	smpsAlterNote       $FC
0008CEEE ECF5                       	smpsPSGAlterVol     $F5
0008CEF0 9006                       	dc.b	nEb1, $06
0008CEF2 EC04                       	smpsPSGAlterVol     $04
0008CEF4 E701                       	dc.b	smpsNoAttack, $01
0008CEF6 EC07                       	smpsPSGAlterVol     $07
0008CEF8 8003                       	dc.b	nRst, $03
0008CEFA ECF5                       	smpsPSGAlterVol     $F5
0008CEFC 9007                       	dc.b	nEb1, $07
0008CEFE EC0B                       	smpsPSGAlterVol     $0B
0008CF00 8006                       	dc.b	nRst, $06
0008CF02 E1FF                       	smpsAlterNote       $FF
0008CF04 01                         	dc.b	$01
0008CF05 E103                       	smpsAlterNote       $03
0008CF07 0101                       	dc.b	$01, $01
0008CF09 E1FC                       	smpsAlterNote       $FC
0008CF0B 01                         	dc.b	$01
0008CF0C ECF5                       	smpsPSGAlterVol     $F5
0008CF0E 8F07                       	dc.b	nD1, $07
0008CF10 EC0B                       	smpsPSGAlterVol     $0B
0008CF12 8004                       	dc.b	nRst, $04
0008CF14 ECF5                       	smpsPSGAlterVol     $F5
0008CF16 8F06                       	dc.b	nD1, $06
0008CF18 EC04                       	smpsPSGAlterVol     $04
0008CF1A E701                       	dc.b	smpsNoAttack, $01
0008CF1C EC07                       	smpsPSGAlterVol     $07
0008CF1E 8006                       	dc.b	nRst, $06
0008CF20 E102                       	smpsAlterNote       $02
0008CF22 01                         	dc.b	$01
0008CF23 E103                       	smpsAlterNote       $03
0008CF25 01                         	dc.b	$01
0008CF26 E1FF                       	smpsAlterNote       $FF
0008CF28 01                         	dc.b	$01
0008CF29 E1F9                       	smpsAlterNote       $F9
0008CF2B 01                         	dc.b	$01
0008CF2C E1FC                       	smpsAlterNote       $FC
0008CF2E ECF5                       	smpsPSGAlterVol     $F5
0008CF30 8F06                       	dc.b	nD1, $06
0008CF32 EC04                       	smpsPSGAlterVol     $04
0008CF34 E701                       	dc.b	smpsNoAttack, $01
0008CF36 EC07                       	smpsPSGAlterVol     $07
0008CF38 8003                       	dc.b	nRst, $03
0008CF3A ECF5                       	smpsPSGAlterVol     $F5
0008CF3C 8F06                       	dc.b	nD1, $06
0008CF3E EC04                       	smpsPSGAlterVol     $04
0008CF40 E701                       	dc.b	smpsNoAttack, $01
0008CF42 EC07                       	smpsPSGAlterVol     $07
0008CF44 8006                       	dc.b	nRst, $06
0008CF46 E1FF                       	smpsAlterNote       $FF
0008CF48 01                         	dc.b	$01
0008CF49 E103                       	smpsAlterNote       $03
0008CF4B 01                         	dc.b	$01
0008CF4C E1FF                       	smpsAlterNote       $FF
0008CF4E 01                         	dc.b	$01
0008CF4F E1FC                       	smpsAlterNote       $FC
0008CF51 01                         	dc.b	$01
0008CF52 ECF5                       	smpsPSGAlterVol     $F5
0008CF54 8F06                       	dc.b	nD1, $06
0008CF56 EC04                       	smpsPSGAlterVol     $04
0008CF58 E701                       	dc.b	smpsNoAttack, $01
0008CF5A EC07                       	smpsPSGAlterVol     $07
0008CF5C 8003                       	dc.b	nRst, $03
0008CF5E ECF5                       	smpsPSGAlterVol     $F5
0008CF60 8F07                       	dc.b	nD1, $07
0008CF62 EC0B                       	smpsPSGAlterVol     $0B
0008CF64 8007                       	dc.b	nRst, $07
0008CF66 E101                       	smpsAlterNote       $01
0008CF68 0101                       	dc.b	$01, $01
0008CF6A E1FC                       	smpsAlterNote       $FC
0008CF6C 01                         	dc.b	$01
0008CF6D E1F9                       	smpsAlterNote       $F9
0008CF6F 01                         	dc.b	$01
0008CF70 E1FC                       	smpsAlterNote       $FC
0008CF72 ECF5                       	smpsPSGAlterVol     $F5
0008CF74 9006                       	dc.b	nEb1, $06
0008CF76 EC0B                       	smpsPSGAlterVol     $0B
0008CF78 8004                       	dc.b	nRst, $04
0008CF7A ECF5                       	smpsPSGAlterVol     $F5
0008CF7C 9006                       	dc.b	nEb1, $06
0008CF7E EC04                       	smpsPSGAlterVol     $04
0008CF80 E701                       	dc.b	smpsNoAttack, $01
0008CF82 EC07                       	smpsPSGAlterVol     $07
0008CF84 8006                       	dc.b	nRst, $06
0008CF86 E100                       	smpsAlterNote       $00
0008CF88 01                         	dc.b	$01
0008CF89 E102                       	smpsAlterNote       $02
0008CF8B 01                         	dc.b	$01
0008CF8C E100                       	smpsAlterNote       $00
0008CF8E 01                         	dc.b	$01
0008CF8F E1FD                       	smpsAlterNote       $FD
0008CF91 01                         	dc.b	$01
0008CF92 E1FF                       	smpsAlterNote       $FF
0008CF94 ECF5                       	smpsPSGAlterVol     $F5
0008CF96 9B06                       	dc.b	nD2, $06
0008CF98 EC04                       	smpsPSGAlterVol     $04
0008CF9A E701                       	dc.b	smpsNoAttack, $01
0008CF9C EC07                       	smpsPSGAlterVol     $07
0008CF9E 8003                       	dc.b	nRst, $03
0008CFA0 ECF5                       	smpsPSGAlterVol     $F5
0008CFA2 9B07                       	dc.b	nD2, $07
0008CFA4 EC0B                       	smpsPSGAlterVol     $0B
0008CFA6 8006                       	dc.b	nRst, $06
0008CFA8 E102                       	smpsAlterNote       $02
0008CFAA 01                         	dc.b	$01
0008CFAB E106                       	smpsAlterNote       $06
0008CFAD 01                         	dc.b	$01
0008CFAE E105                       	smpsAlterNote       $05
0008CFB0 01                         	dc.b	$01
0008CFB1 E1FF                       	smpsAlterNote       $FF
0008CFB3 01                         	dc.b	$01
0008CFB4 ECF5                       	smpsPSGAlterVol     $F5
0008CFB6 9B07                       	dc.b	nD2, $07
0008CFB8 EC0B                       	smpsPSGAlterVol     $0B
0008CFBA 8004                       	dc.b	nRst, $04
0008CFBC ECF5                       	smpsPSGAlterVol     $F5
0008CFBE 9B06                       	dc.b	nD2, $06
0008CFC0 EC0B                       	smpsPSGAlterVol     $0B
0008CFC2 8007                       	dc.b	nRst, $07
0008CFC4 E105                       	smpsAlterNote       $05
0008CFC6 0101                       	dc.b	$01, $01
0008CFC8 E102                       	smpsAlterNote       $02
0008CFCA 01                         	dc.b	$01
0008CFCB E1FC                       	smpsAlterNote       $FC
0008CFCD 01                         	dc.b	$01
0008CFCE E1FF                       	smpsAlterNote       $FF
0008CFD0 ECF5                       	smpsPSGAlterVol     $F5
0008CFD2 9B06                       	dc.b	nD2, $06
0008CFD4 EC04                       	smpsPSGAlterVol     $04
0008CFD6 E701                       	dc.b	smpsNoAttack, $01
0008CFD8 EC07                       	smpsPSGAlterVol     $07
0008CFDA 8003                       	dc.b	nRst, $03
0008CFDC ECF5                       	smpsPSGAlterVol     $F5
0008CFDE 9B06                       	dc.b	nD2, $06
0008CFE0 EC04                       	smpsPSGAlterVol     $04
0008CFE2 E701                       	dc.b	smpsNoAttack, $01
0008CFE4 EC07                       	smpsPSGAlterVol     $07
0008CFE6 8006                       	dc.b	nRst, $06
0008CFE8 E102                       	smpsAlterNote       $02
0008CFEA 01                         	dc.b	$01
0008CFEB E106                       	smpsAlterNote       $06
0008CFED 01                         	dc.b	$01
0008CFEE E102                       	smpsAlterNote       $02
0008CFF0 01                         	dc.b	$01
0008CFF1 E1FF                       	smpsAlterNote       $FF
0008CFF3 01                         	dc.b	$01
0008CFF4 ECF5                       	smpsPSGAlterVol     $F5
0008CFF6 9B06                       	dc.b	nD2, $06
0008CFF8 EC04                       	smpsPSGAlterVol     $04
0008CFFA E701                       	dc.b	smpsNoAttack, $01
0008CFFC EC07                       	smpsPSGAlterVol     $07
0008CFFE 8003                       	dc.b	nRst, $03
0008D000 ECF5                       	smpsPSGAlterVol     $F5
0008D002 9B07                       	dc.b	nD2, $07
0008D004 EC0B                       	smpsPSGAlterVol     $0B
0008D006 8007                       	dc.b	nRst, $07
0008D008 E105                       	smpsAlterNote       $05
0008D00A 0101                       	dc.b	$01, $01
0008D00C E1FF                       	smpsAlterNote       $FF
0008D00E 01                         	dc.b	$01
0008D00F E1FC                       	smpsAlterNote       $FC
0008D011 01                         	dc.b	$01
0008D012 E1FF                       	smpsAlterNote       $FF
0008D014 ECF5                       	smpsPSGAlterVol     $F5
0008D016 9B06                       	dc.b	nD2, $06
0008D018 EC0B                       	smpsPSGAlterVol     $0B
0008D01A 8004                       	dc.b	nRst, $04
0008D01C ECF5                       	smpsPSGAlterVol     $F5
0008D01E 9B06                       	dc.b	nD2, $06
0008D020 EC04                       	smpsPSGAlterVol     $04
0008D022 E701                       	dc.b	smpsNoAttack, $01
0008D024 EC07                       	smpsPSGAlterVol     $07
0008D026 8006                       	dc.b	nRst, $06
0008D028 E105                       	smpsAlterNote       $05
0008D02A 01                         	dc.b	$01
0008D02B E106                       	smpsAlterNote       $06
0008D02D 01                         	dc.b	$01
0008D02E E102                       	smpsAlterNote       $02
0008D030 01                         	dc.b	$01
0008D031 E1FC                       	smpsAlterNote       $FC
0008D033 01                         	dc.b	$01
0008D034 E1FF                       	smpsAlterNote       $FF
0008D036 ECF5                       	smpsPSGAlterVol     $F5
0008D038 9B06                       	dc.b	nD2, $06
0008D03A EC04                       	smpsPSGAlterVol     $04
0008D03C E701                       	dc.b	smpsNoAttack, $01
0008D03E EC07                       	smpsPSGAlterVol     $07
0008D040 8003                       	dc.b	nRst, $03
0008D042 ECF5                       	smpsPSGAlterVol     $F5
0008D044 9B06                       	dc.b	nD2, $06
0008D046 EC04                       	smpsPSGAlterVol     $04
0008D048 E701                       	dc.b	smpsNoAttack, $01
0008D04A EC07                       	smpsPSGAlterVol     $07
0008D04C 8006                       	dc.b	nRst, $06
0008D04E E102                       	smpsAlterNote       $02
0008D050 01                         	dc.b	$01
0008D051 E106                       	smpsAlterNote       $06
0008D053 01                         	dc.b	$01
0008D054 E105                       	smpsAlterNote       $05
0008D056 01                         	dc.b	$01
0008D057 E1FF                       	smpsAlterNote       $FF
0008D059 01                         	dc.b	$01
0008D05A ECF5                       	smpsPSGAlterVol     $F5
0008D05C 9B07                       	dc.b	nD2, $07
0008D05E EC0B                       	smpsPSGAlterVol     $0B
0008D060 8004                       	dc.b	nRst, $04
0008D062 ECF5                       	smpsPSGAlterVol     $F5
0008D064 9B06                       	dc.b	nD2, $06
0008D066 EC0B                       	smpsPSGAlterVol     $0B
0008D068 8007                       	dc.b	nRst, $07
0008D06A E105                       	smpsAlterNote       $05
0008D06C 0101                       	dc.b	$01, $01
0008D06E E102                       	smpsAlterNote       $02
0008D070 01                         	dc.b	$01
0008D071 E1FC                       	smpsAlterNote       $FC
0008D073 01                         	dc.b	$01
0008D074 E1FF                       	smpsAlterNote       $FF
0008D076 ECF5                       	smpsPSGAlterVol     $F5
0008D078 9B06                       	dc.b	nD2, $06
0008D07A EC04                       	smpsPSGAlterVol     $04
0008D07C E701                       	dc.b	smpsNoAttack, $01
0008D07E EC07                       	smpsPSGAlterVol     $07
0008D080 8003                       	dc.b	nRst, $03
0008D082 ECF5                       	smpsPSGAlterVol     $F5
0008D084 9B06                       	dc.b	nD2, $06
0008D086 EC04                       	smpsPSGAlterVol     $04
0008D088 E701                       	dc.b	smpsNoAttack, $01
0008D08A EC07                       	smpsPSGAlterVol     $07
0008D08C 8006                       	dc.b	nRst, $06
0008D08E E102                       	smpsAlterNote       $02
0008D090 01                         	dc.b	$01
0008D091 E106                       	smpsAlterNote       $06
0008D093 01                         	dc.b	$01
0008D094 E102                       	smpsAlterNote       $02
0008D096 01                         	dc.b	$01
0008D097 E1FF                       	smpsAlterNote       $FF
0008D099 01                         	dc.b	$01
0008D09A ECF5                       	smpsPSGAlterVol     $F5
0008D09C 9B06                       	dc.b	nD2, $06
0008D09E EC04                       	smpsPSGAlterVol     $04
0008D0A0 E701                       	dc.b	smpsNoAttack, $01
0008D0A2 EC07                       	smpsPSGAlterVol     $07
0008D0A4 8003                       	dc.b	nRst, $03
0008D0A6 ECF5                       	smpsPSGAlterVol     $F5
0008D0A8 9B07                       	dc.b	nD2, $07
0008D0AA E1FE                       	smpsAlterNote       $FE
0008D0AC 9706                       	dc.b	nBb1, $06
0008D0AE EC04                       	smpsPSGAlterVol     $04
0008D0B0 E701                       	dc.b	smpsNoAttack, $01
0008D0B2 ECFC                       	smpsPSGAlterVol     $FC
0008D0B4 9703                       	dc.b	nBb1, $03
0008D0B6 EC04                       	smpsPSGAlterVol     $04
0008D0B8 E701                       	dc.b	smpsNoAttack, $01
0008D0BA ECFC                       	smpsPSGAlterVol     $FC
0008D0BC 9702                       	dc.b	nBb1, $02
0008D0BE EC04                       	smpsPSGAlterVol     $04
0008D0C0 E701                       	dc.b	smpsNoAttack, $01
0008D0C2 ECFC                       	smpsPSGAlterVol     $FC
0008D0C4 9606                       	dc.b	nA1, $06
0008D0C6 EC04                       	smpsPSGAlterVol     $04
0008D0C8 E701                       	dc.b	smpsNoAttack, $01
0008D0CA EC07                       	smpsPSGAlterVol     $07
0008D0CC 8006                       	dc.b	nRst, $06
0008D0CE E101                       	smpsAlterNote       $01
0008D0D0 01                         	dc.b	$01
0008D0D1 E107                       	smpsAlterNote       $07
0008D0D3 01                         	dc.b	$01
0008D0D4 E101                       	smpsAlterNote       $01
0008D0D6 01                         	dc.b	$01
0008D0D7 E1F8                       	smpsAlterNote       $F8
0008D0D9 01                         	dc.b	$01
0008D0DA E1F7                       	smpsAlterNote       $F7
0008D0DC 01                         	dc.b	$01
0008D0DD E1FC                       	smpsAlterNote       $FC
0008D0DF 01                         	dc.b	$01
0008D0E0 E106                       	smpsAlterNote       $06
0008D0E2 01                         	dc.b	$01
0008D0E3 E107                       	smpsAlterNote       $07
0008D0E5 01                         	dc.b	$01
0008D0E6 E101                       	smpsAlterNote       $01
0008D0E8 01                         	dc.b	$01
0008D0E9 E1F8                       	smpsAlterNote       $F8
0008D0EB 0101                       	dc.b	$01, $01
0008D0ED E1FC                       	smpsAlterNote       $FC
0008D0EF ECF5                       	smpsPSGAlterVol     $F5
0008D0F1 8F06                       	dc.b	nD1, $06
0008D0F3 EC04                       	smpsPSGAlterVol     $04
0008D0F5 E701                       	dc.b	smpsNoAttack, $01
0008D0F7 EC07                       	smpsPSGAlterVol     $07
0008D0F9 8003                       	dc.b	nRst, $03
0008D0FB ECF5                       	smpsPSGAlterVol     $F5
0008D0FD 8F06                       	dc.b	nD1, $06
0008D0FF EC04                       	smpsPSGAlterVol     $04
0008D101 E701                       	dc.b	smpsNoAttack, $01
0008D103 EC07                       	smpsPSGAlterVol     $07
0008D105 8006                       	dc.b	nRst, $06
0008D107 E1FF                       	smpsAlterNote       $FF
0008D109 01                         	dc.b	$01
0008D10A E102                       	smpsAlterNote       $02
0008D10C 01                         	dc.b	$01
0008D10D E101                       	smpsAlterNote       $01
0008D10F 01                         	dc.b	$01
0008D110 E1FC                       	smpsAlterNote       $FC
0008D112 01                         	dc.b	$01
0008D113 ECF5                       	smpsPSGAlterVol     $F5
0008D115 9007                       	dc.b	nEb1, $07
0008D117 EC0B                       	smpsPSGAlterVol     $0B
0008D119 8004                       	dc.b	nRst, $04
0008D11B ECF5                       	smpsPSGAlterVol     $F5
0008D11D 9006                       	dc.b	nEb1, $06
0008D11F EC0B                       	smpsPSGAlterVol     $0B
0008D121 8007                       	dc.b	nRst, $07
0008D123 E103                       	smpsAlterNote       $03
0008D125 0101                       	dc.b	$01, $01
0008D127 E1FC                       	smpsAlterNote       $FC
0008D129 01                         	dc.b	$01
0008D12A E1F9                       	smpsAlterNote       $F9
0008D12C 01                         	dc.b	$01
0008D12D E1FC                       	smpsAlterNote       $FC
0008D12F ECF5                       	smpsPSGAlterVol     $F5
0008D131 8F06                       	dc.b	nD1, $06
0008D133 EC04                       	smpsPSGAlterVol     $04
0008D135 E701                       	dc.b	smpsNoAttack, $01
0008D137 EC07                       	smpsPSGAlterVol     $07
0008D139 8003                       	dc.b	nRst, $03
0008D13B ECF5                       	smpsPSGAlterVol     $F5
0008D13D 8F06                       	dc.b	nD1, $06
0008D13F EC04                       	smpsPSGAlterVol     $04
0008D141 E701                       	dc.b	smpsNoAttack, $01
0008D143 EC07                       	smpsPSGAlterVol     $07
0008D145 8006                       	dc.b	nRst, $06
0008D147 E1FF                       	smpsAlterNote       $FF
0008D149 01                         	dc.b	$01
0008D14A E103                       	smpsAlterNote       $03
0008D14C 01                         	dc.b	$01
0008D14D E1FF                       	smpsAlterNote       $FF
0008D14F 01                         	dc.b	$01
0008D150 E1F9                       	smpsAlterNote       $F9
0008D152 01                         	dc.b	$01
0008D153 E1FC                       	smpsAlterNote       $FC
0008D155 ECF5                       	smpsPSGAlterVol     $F5
0008D157 8F06                       	dc.b	nD1, $06
0008D159 EC04                       	smpsPSGAlterVol     $04
0008D15B E701                       	dc.b	smpsNoAttack, $01
0008D15D EC07                       	smpsPSGAlterVol     $07
0008D15F 8003                       	dc.b	nRst, $03
0008D161 ECF5                       	smpsPSGAlterVol     $F5
0008D163 8F07                       	dc.b	nD1, $07
0008D165 EC0B                       	smpsPSGAlterVol     $0B
0008D167 8006                       	dc.b	nRst, $06
0008D169 E1FF                       	smpsAlterNote       $FF
0008D16B 01                         	dc.b	$01
0008D16C E102                       	smpsAlterNote       $02
0008D16E 0101                       	dc.b	$01, $01
0008D170 E1FC                       	smpsAlterNote       $FC
0008D172 01                         	dc.b	$01
0008D173 ECF5                       	smpsPSGAlterVol     $F5
0008D175 8F07                       	dc.b	nD1, $07
0008D177 EC0B                       	smpsPSGAlterVol     $0B
0008D179 8004                       	dc.b	nRst, $04
0008D17B ECF5                       	smpsPSGAlterVol     $F5
0008D17D 8F06                       	dc.b	nD1, $06
0008D17F EC04                       	smpsPSGAlterVol     $04
0008D181 E701                       	dc.b	smpsNoAttack, $01
0008D183 EC07                       	smpsPSGAlterVol     $07
0008D185 8006                       	dc.b	nRst, $06
0008D187 E101                       	smpsAlterNote       $01
0008D189 01                         	dc.b	$01
0008D18A E102                       	smpsAlterNote       $02
0008D18C 01                         	dc.b	$01
0008D18D E1FF                       	smpsAlterNote       $FF
0008D18F 01                         	dc.b	$01
0008D190 E1F9                       	smpsAlterNote       $F9
0008D192 01                         	dc.b	$01
0008D193 E1FC                       	smpsAlterNote       $FC
0008D195 ECF5                       	smpsPSGAlterVol     $F5
0008D197 9006                       	dc.b	nEb1, $06
0008D199 EC04                       	smpsPSGAlterVol     $04
0008D19B E701                       	dc.b	smpsNoAttack, $01
0008D19D EC07                       	smpsPSGAlterVol     $07
0008D19F 8003                       	dc.b	nRst, $03
0008D1A1 ECF5                       	smpsPSGAlterVol     $F5
0008D1A3 9006                       	dc.b	nEb1, $06
0008D1A5 EC04                       	smpsPSGAlterVol     $04
0008D1A7 E701                       	dc.b	smpsNoAttack, $01
0008D1A9 EC07                       	smpsPSGAlterVol     $07
0008D1AB 8006                       	dc.b	nRst, $06
0008D1AD E100                       	smpsAlterNote       $00
0008D1AF 01                         	dc.b	$01
0008D1B0 E102                       	smpsAlterNote       $02
0008D1B2 01                         	dc.b	$01
0008D1B3 E100                       	smpsAlterNote       $00
0008D1B5 01                         	dc.b	$01
0008D1B6 E1FF                       	smpsAlterNote       $FF
0008D1B8 01                         	dc.b	$01
0008D1B9 ECF5                       	smpsPSGAlterVol     $F5
0008D1BB 9B06                       	dc.b	nD2, $06
0008D1BD EC04                       	smpsPSGAlterVol     $04
0008D1BF E701                       	dc.b	smpsNoAttack, $01
0008D1C1 EC07                       	smpsPSGAlterVol     $07
0008D1C3 8003                       	dc.b	nRst, $03
0008D1C5 ECF5                       	smpsPSGAlterVol     $F5
0008D1C7 9B07                       	dc.b	nD2, $07
0008D1C9 EC0B                       	smpsPSGAlterVol     $0B
0008D1CB 8007                       	dc.b	nRst, $07
0008D1CD E105                       	smpsAlterNote       $05
0008D1CF 0101                       	dc.b	$01, $01
0008D1D1 E1FF                       	smpsAlterNote       $FF
0008D1D3 01                         	dc.b	$01
0008D1D4 E1FC                       	smpsAlterNote       $FC
0008D1D6 01                         	dc.b	$01
0008D1D7 E1FF                       	smpsAlterNote       $FF
0008D1D9 ECF5                       	smpsPSGAlterVol     $F5
0008D1DB 9B06                       	dc.b	nD2, $06
0008D1DD EC0B                       	smpsPSGAlterVol     $0B
0008D1DF 8004                       	dc.b	nRst, $04
0008D1E1 ECF5                       	smpsPSGAlterVol     $F5
0008D1E3 9B06                       	dc.b	nD2, $06
0008D1E5 EC04                       	smpsPSGAlterVol     $04
0008D1E7 E701                       	dc.b	smpsNoAttack, $01
0008D1E9 EC07                       	smpsPSGAlterVol     $07
0008D1EB 8006                       	dc.b	nRst, $06
0008D1ED E102                       	smpsAlterNote       $02
0008D1EF 01                         	dc.b	$01
0008D1F0 E106                       	smpsAlterNote       $06
0008D1F2 01                         	dc.b	$01
0008D1F3 E102                       	smpsAlterNote       $02
0008D1F5 01                         	dc.b	$01
0008D1F6 E1FC                       	smpsAlterNote       $FC
0008D1F8 01                         	dc.b	$01
0008D1F9 E1FF                       	smpsAlterNote       $FF
0008D1FB ECF5                       	smpsPSGAlterVol     $F5
0008D1FD 9B06                       	dc.b	nD2, $06
0008D1FF EC04                       	smpsPSGAlterVol     $04
0008D201 E701                       	dc.b	smpsNoAttack, $01
0008D203 EC07                       	smpsPSGAlterVol     $07
0008D205 8003                       	dc.b	nRst, $03
0008D207 ECF5                       	smpsPSGAlterVol     $F5
0008D209 9B07                       	dc.b	nD2, $07
0008D20B EC0B                       	smpsPSGAlterVol     $0B
0008D20D 8006                       	dc.b	nRst, $06
0008D20F E102                       	smpsAlterNote       $02
0008D211 01                         	dc.b	$01
0008D212 E105                       	smpsAlterNote       $05
0008D214 0101                       	dc.b	$01, $01
0008D216 E1FF                       	smpsAlterNote       $FF
0008D218 01                         	dc.b	$01
0008D219 ECF5                       	smpsPSGAlterVol     $F5
0008D21B 9B07                       	dc.b	nD2, $07
0008D21D EC0B                       	smpsPSGAlterVol     $0B
0008D21F 8004                       	dc.b	nRst, $04
0008D221 ECF5                       	smpsPSGAlterVol     $F5
0008D223 9B06                       	dc.b	nD2, $06
0008D225 EC0B                       	smpsPSGAlterVol     $0B
0008D227 8007                       	dc.b	nRst, $07
0008D229 E105                       	smpsAlterNote       $05
0008D22B 0101                       	dc.b	$01, $01
0008D22D E102                       	smpsAlterNote       $02
0008D22F 01                         	dc.b	$01
0008D230 E1FC                       	smpsAlterNote       $FC
0008D232 01                         	dc.b	$01
0008D233 E1FF                       	smpsAlterNote       $FF
0008D235 ECF5                       	smpsPSGAlterVol     $F5
0008D237 9B06                       	dc.b	nD2, $06
0008D239 EC04                       	smpsPSGAlterVol     $04
0008D23B E701                       	dc.b	smpsNoAttack, $01
0008D23D EC07                       	smpsPSGAlterVol     $07
0008D23F 8003                       	dc.b	nRst, $03
0008D241 ECF5                       	smpsPSGAlterVol     $F5
0008D243 9B06                       	dc.b	nD2, $06
0008D245 EC04                       	smpsPSGAlterVol     $04
0008D247 E701                       	dc.b	smpsNoAttack, $01
0008D249 EC07                       	smpsPSGAlterVol     $07
0008D24B 8006                       	dc.b	nRst, $06
0008D24D E102                       	smpsAlterNote       $02
0008D24F 01                         	dc.b	$01
0008D250 E106                       	smpsAlterNote       $06
0008D252 01                         	dc.b	$01
0008D253 E102                       	smpsAlterNote       $02
0008D255 01                         	dc.b	$01
0008D256 E1FF                       	smpsAlterNote       $FF
0008D258 01                         	dc.b	$01
0008D259 ECF5                       	smpsPSGAlterVol     $F5
0008D25B 9B06                       	dc.b	nD2, $06
0008D25D EC04                       	smpsPSGAlterVol     $04
0008D25F E701                       	dc.b	smpsNoAttack, $01
0008D261 EC07                       	smpsPSGAlterVol     $07
0008D263 8003                       	dc.b	nRst, $03
0008D265 ECF5                       	smpsPSGAlterVol     $F5
0008D267 9B07                       	dc.b	nD2, $07
0008D269 EC0B                       	smpsPSGAlterVol     $0B
0008D26B 8007                       	dc.b	nRst, $07
0008D26D E105                       	smpsAlterNote       $05
0008D26F 0101                       	dc.b	$01, $01
0008D271 E1FF                       	smpsAlterNote       $FF
0008D273 01                         	dc.b	$01
0008D274 E1FC                       	smpsAlterNote       $FC
0008D276 01                         	dc.b	$01
0008D277 E1FF                       	smpsAlterNote       $FF
0008D279 ECF5                       	smpsPSGAlterVol     $F5
0008D27B 9B06                       	dc.b	nD2, $06
0008D27D EC0B                       	smpsPSGAlterVol     $0B
0008D27F 8004                       	dc.b	nRst, $04
0008D281 ECF5                       	smpsPSGAlterVol     $F5
0008D283 9B06                       	dc.b	nD2, $06
0008D285 EC04                       	smpsPSGAlterVol     $04
0008D287 E701                       	dc.b	smpsNoAttack, $01
0008D289 EC07                       	smpsPSGAlterVol     $07
0008D28B 8006                       	dc.b	nRst, $06
0008D28D E102                       	smpsAlterNote       $02
0008D28F 01                         	dc.b	$01
0008D290 E106                       	smpsAlterNote       $06
0008D292 01                         	dc.b	$01
0008D293 E102                       	smpsAlterNote       $02
0008D295 01                         	dc.b	$01
0008D296 E1FC                       	smpsAlterNote       $FC
0008D298 01                         	dc.b	$01
0008D299 E1FF                       	smpsAlterNote       $FF
0008D29B ECF5                       	smpsPSGAlterVol     $F5
0008D29D 9B06                       	dc.b	nD2, $06
0008D29F EC04                       	smpsPSGAlterVol     $04
0008D2A1 E701                       	dc.b	smpsNoAttack, $01
0008D2A3 EC07                       	smpsPSGAlterVol     $07
0008D2A5 8003                       	dc.b	nRst, $03
0008D2A7 ECF5                       	smpsPSGAlterVol     $F5
0008D2A9 9B06                       	dc.b	nD2, $06
0008D2AB EC04                       	smpsPSGAlterVol     $04
0008D2AD E701                       	dc.b	smpsNoAttack, $01
0008D2AF EC07                       	smpsPSGAlterVol     $07
0008D2B1 8006                       	dc.b	nRst, $06
0008D2B3 E102                       	smpsAlterNote       $02
0008D2B5 01                         	dc.b	$01
0008D2B6 E106                       	smpsAlterNote       $06
0008D2B8 01                         	dc.b	$01
0008D2B9 E105                       	smpsAlterNote       $05
0008D2BB 01                         	dc.b	$01
0008D2BC E1FF                       	smpsAlterNote       $FF
0008D2BE 01                         	dc.b	$01
0008D2BF ECF5                       	smpsPSGAlterVol     $F5
0008D2C1 9B07                       	dc.b	nD2, $07
0008D2C3 EC0B                       	smpsPSGAlterVol     $0B
0008D2C5 8004                       	dc.b	nRst, $04
0008D2C7 ECF5                       	smpsPSGAlterVol     $F5
0008D2C9 9B06                       	dc.b	nD2, $06
0008D2CB EC0B                       	smpsPSGAlterVol     $0B
0008D2CD 8007                       	dc.b	nRst, $07
0008D2CF E105                       	smpsAlterNote       $05
0008D2D1 0101                       	dc.b	$01, $01
0008D2D3 E101                       	smpsAlterNote       $01
0008D2D5 01                         	dc.b	$01
0008D2D6 E1FB                       	smpsAlterNote       $FB
0008D2D8 01                         	dc.b	$01
0008D2D9 E1FE                       	smpsAlterNote       $FE
0008D2DB ECF5                       	smpsPSGAlterVol     $F5
0008D2DD 9A06                       	dc.b	nCs2, $06
0008D2DF EC04                       	smpsPSGAlterVol     $04
0008D2E1 E701                       	dc.b	smpsNoAttack, $01
0008D2E3 EC07                       	smpsPSGAlterVol     $07
0008D2E5 8003                       	dc.b	nRst, $03
0008D2E7 ECF5                       	smpsPSGAlterVol     $F5
0008D2E9 9A06                       	dc.b	nCs2, $06
0008D2EB EC04                       	smpsPSGAlterVol     $04
0008D2ED E701                       	dc.b	smpsNoAttack, $01
0008D2EF EC07                       	smpsPSGAlterVol     $07
0008D2F1 8003                       	dc.b	nRst, $03
0008D2F3 E1FC                       	smpsAlterNote       $FC
0008D2F5 ECF5                       	smpsPSGAlterVol     $F5
0008D2F7 8F07                       	dc.b	nD1, $07
0008D2F9 EC0B                       	smpsPSGAlterVol     $0B
0008D2FB 8006                       	dc.b	nRst, $06
0008D2FD E1FF                       	smpsAlterNote       $FF
0008D2FF 01                         	dc.b	$01
0008D300 E103                       	smpsAlterNote       $03
0008D302 01                         	dc.b	$01
0008D303 E102                       	smpsAlterNote       $02
0008D305 01                         	dc.b	$01
0008D306 E1FC                       	smpsAlterNote       $FC
0008D308 01                         	dc.b	$01
0008D309 E1F8                       	smpsAlterNote       $F8
0008D30B 01                         	dc.b	$01
0008D30C E1FC                       	smpsAlterNote       $FC
0008D30E 01                         	dc.b	$01
0008D30F E1FF                       	smpsAlterNote       $FF
0008D311 01                         	dc.b	$01
0008D312 E103                       	smpsAlterNote       $03
0008D314 01                         	dc.b	$01
0008D315 E1FC                       	smpsAlterNote       $FC
0008D317 ECF5                       	smpsPSGAlterVol     $F5
0008D319 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D31D EC04                       	smpsPSGAlterVol     $04
0008D31F E701                       	dc.b	smpsNoAttack, $01
0008D321 EC07                       	smpsPSGAlterVol     $07
0008D323 8009                       	dc.b	nRst, $09
0008D325 E1FF                       	smpsAlterNote       $FF
0008D327 01                         	dc.b	$01
0008D328 E103                       	smpsAlterNote       $03
0008D32A 01                         	dc.b	$01
0008D32B E102                       	smpsAlterNote       $02
0008D32D 01                         	dc.b	$01
0008D32E E1FC                       	smpsAlterNote       $FC
0008D330 01                         	dc.b	$01
0008D331 E1F8                       	smpsAlterNote       $F8
0008D333 01                         	dc.b	$01
0008D334 E1FC                       	smpsAlterNote       $FC
0008D336 01                         	dc.b	$01
0008D337 E1FF                       	smpsAlterNote       $FF
0008D339 01                         	dc.b	$01
0008D33A E103                       	smpsAlterNote       $03
0008D33C 01                         	dc.b	$01
0008D33D E1FF                       	smpsAlterNote       $FF
0008D33F 01                         	dc.b	$01
0008D340 E1F9                       	smpsAlterNote       $F9
0008D342 01                         	dc.b	$01
0008D343 E1F8                       	smpsAlterNote       $F8
0008D345 01                         	dc.b	$01
0008D346 E1FC                       	smpsAlterNote       $FC
0008D348 01                         	dc.b	$01
0008D349 E102                       	smpsAlterNote       $02
0008D34B 0101                       	dc.b	$01, $01
0008D34D E1FF                       	smpsAlterNote       $FF
0008D34F 01                         	dc.b	$01
0008D350 E1FC                       	smpsAlterNote       $FC
0008D352 ECF5                       	smpsPSGAlterVol     $F5
0008D354 8F02                       	dc.b	nD1, $02
0008D356 EC04                       	smpsPSGAlterVol     $04
0008D358 E701                       	dc.b	smpsNoAttack, $01
0008D35A ECFC                       	smpsPSGAlterVol     $FC
0008D35C E1FB                       	smpsAlterNote       $FB
0008D35E 8D06                       	dc.b	nC1, $06
0008D360 EC04                       	smpsPSGAlterVol     $04
0008D362 E701                       	dc.b	smpsNoAttack, $01
0008D364 EC07                       	smpsPSGAlterVol     $07
0008D366 8006                       	dc.b	nRst, $06
0008D368 E1FE                       	smpsAlterNote       $FE
0008D36A 01                         	dc.b	$01
0008D36B E102                       	smpsAlterNote       $02
0008D36D 01                         	dc.b	$01
0008D36E E1FE                       	smpsAlterNote       $FE
0008D370 01                         	dc.b	$01
0008D371 E1FB                       	smpsAlterNote       $FB
0008D373 01                         	dc.b	$01
0008D374 E1F7                       	smpsAlterNote       $F7
0008D376 01                         	dc.b	$01
0008D377 E1FB                       	smpsAlterNote       $FB
0008D379 01                         	dc.b	$01
0008D37A E101                       	smpsAlterNote       $01
0008D37C 01                         	dc.b	$01
0008D37D E102                       	smpsAlterNote       $02
0008D37F 01                         	dc.b	$01
0008D380 E1FB                       	smpsAlterNote       $FB
0008D382 ECF5                       	smpsPSGAlterVol     $F5
0008D384 8D02                       	dc.b	nC1, $02
0008D386 EC04                       	smpsPSGAlterVol     $04
0008D388 E701                       	dc.b	smpsNoAttack, $01
0008D38A E1FC                       	smpsAlterNote       $FC
0008D38C ECFC                       	smpsPSGAlterVol     $FC
0008D38E 8F0D                       	dc.b	nD1, $0D
0008D390 E1FF                       	smpsAlterNote       $FF
0008D392 E701                       	dc.b	smpsNoAttack, $01
0008D394 E103                       	smpsAlterNote       $03
0008D396 E701                       	dc.b	smpsNoAttack, $01
0008D398 E1FF                       	smpsAlterNote       $FF
0008D39A E701                       	dc.b	smpsNoAttack, $01
0008D39C E1FC                       	smpsAlterNote       $FC
0008D39E E701                       	dc.b	smpsNoAttack, $01
0008D3A0 E1F8                       	smpsAlterNote       $F8
0008D3A2 E701                       	dc.b	smpsNoAttack, $01
0008D3A4 E1FC                       	smpsAlterNote       $FC
0008D3A6 E701                       	dc.b	smpsNoAttack, $01
0008D3A8 E102                       	smpsAlterNote       $02
0008D3AA E701                       	dc.b	smpsNoAttack, $01
0008D3AC E103                       	smpsAlterNote       $03
0008D3AE E701                       	dc.b	smpsNoAttack, $01
0008D3B0 E1FF                       	smpsAlterNote       $FF
0008D3B2 E701                       	dc.b	smpsNoAttack, $01
0008D3B4 E1F9                       	smpsAlterNote       $F9
0008D3B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3BA E1FC                       	smpsAlterNote       $FC
0008D3BC E701                       	dc.b	smpsNoAttack, $01
0008D3BE E102                       	smpsAlterNote       $02
0008D3C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3C4 E1FC                       	smpsAlterNote       $FC
0008D3C6 E701                       	dc.b	smpsNoAttack, $01
0008D3C8 E1F9                       	smpsAlterNote       $F9
0008D3CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3CE E1FF                       	smpsAlterNote       $FF
0008D3D0 EC04                       	smpsPSGAlterVol     $04
0008D3D2 E701                       	dc.b	smpsNoAttack, $01
0008D3D4 EC07                       	smpsPSGAlterVol     $07
0008D3D6 E103                       	smpsAlterNote       $03
0008D3D8 8001                       	dc.b	nRst, $01
0008D3DA E102                       	smpsAlterNote       $02
0008D3DC 01                         	dc.b	$01
0008D3DD E1FB                       	smpsAlterNote       $FB
0008D3DF 01                         	dc.b	$01
0008D3E0 E1F7                       	smpsAlterNote       $F7
0008D3E2 01                         	dc.b	$01
0008D3E3 E1FB                       	smpsAlterNote       $FB
0008D3E5 01                         	dc.b	$01
0008D3E6 E102                       	smpsAlterNote       $02
0008D3E8 01                         	dc.b	$01
0008D3E9 E103                       	smpsAlterNote       $03
0008D3EB 01                         	dc.b	$01
0008D3EC E1FB                       	smpsAlterNote       $FB
0008D3EE ECF5                       	smpsPSGAlterVol     $F5
0008D3F0 8E06                       	dc.b	nCs1, $06
0008D3F2 EC04                       	smpsPSGAlterVol     $04
0008D3F4 E701                       	dc.b	smpsNoAttack, $01
0008D3F6 EC07                       	smpsPSGAlterVol     $07
0008D3F8 8003                       	dc.b	nRst, $03
0008D3FA ECF5                       	smpsPSGAlterVol     $F5
0008D3FC 8E06                       	dc.b	nCs1, $06
0008D3FE EC04                       	smpsPSGAlterVol     $04
0008D400 E701                       	dc.b	smpsNoAttack, $01
0008D402 EC07                       	smpsPSGAlterVol     $07
0008D404 8006                       	dc.b	nRst, $06
0008D406 E1FE                       	smpsAlterNote       $FE
0008D408 01                         	dc.b	$01
0008D409 E102                       	smpsAlterNote       $02
0008D40B 01                         	dc.b	$01
0008D40C E1FE                       	smpsAlterNote       $FE
0008D40E 01                         	dc.b	$01
0008D40F E1F9                       	smpsAlterNote       $F9
0008D411 01                         	dc.b	$01
0008D412 E1FC                       	smpsAlterNote       $FC
0008D414 ECF5                       	smpsPSGAlterVol     $F5
0008D416 8F06                       	dc.b	nD1, $06
0008D418 EC04                       	smpsPSGAlterVol     $04
0008D41A E701                       	dc.b	smpsNoAttack, $01
0008D41C EC07                       	smpsPSGAlterVol     $07
0008D41E 8003                       	dc.b	nRst, $03
0008D420 ECF5                       	smpsPSGAlterVol     $F5
0008D422 8F07                       	dc.b	nD1, $07
0008D424 EC0B                       	smpsPSGAlterVol     $0B
0008D426 8006                       	dc.b	nRst, $06
0008D428 E1FF                       	smpsAlterNote       $FF
0008D42A 01                         	dc.b	$01
0008D42B E102                       	smpsAlterNote       $02
0008D42D 0101                       	dc.b	$01, $01
0008D42F E1FB                       	smpsAlterNote       $FB
0008D431 01                         	dc.b	$01
0008D432 ECF5                       	smpsPSGAlterVol     $F5
0008D434 8E07                       	dc.b	nCs1, $07
0008D436 EC0B                       	smpsPSGAlterVol     $0B
0008D438 8004                       	dc.b	nRst, $04
0008D43A ECF5                       	smpsPSGAlterVol     $F5
0008D43C 8E06                       	dc.b	nCs1, $06
0008D43E EC04                       	smpsPSGAlterVol     $04
0008D440 E701                       	dc.b	smpsNoAttack, $01
0008D442 EC07                       	smpsPSGAlterVol     $07
0008D444 8006                       	dc.b	nRst, $06
0008D446 E101                       	smpsAlterNote       $01
0008D448 01                         	dc.b	$01
0008D449 E102                       	smpsAlterNote       $02
0008D44B 01                         	dc.b	$01
0008D44C E1FE                       	smpsAlterNote       $FE
0008D44E 01                         	dc.b	$01
0008D44F E1F8                       	smpsAlterNote       $F8
0008D451 01                         	dc.b	$01
0008D452 E1FB                       	smpsAlterNote       $FB
0008D454 ECF5                       	smpsPSGAlterVol     $F5
0008D456 8E06                       	dc.b	nCs1, $06
0008D458 EC04                       	smpsPSGAlterVol     $04
0008D45A E701                       	dc.b	smpsNoAttack, $01
0008D45C EC07                       	smpsPSGAlterVol     $07
0008D45E 8003                       	dc.b	nRst, $03
0008D460 ECF5                       	smpsPSGAlterVol     $F5
0008D462 8E06                       	dc.b	nCs1, $06
0008D464 EC04                       	smpsPSGAlterVol     $04
0008D466 E701                       	dc.b	smpsNoAttack, $01
0008D468 EC07                       	smpsPSGAlterVol     $07
0008D46A 8004                       	dc.b	nRst, $04
0008D46C E1FC                       	smpsAlterNote       $FC
0008D46E ECF5                       	smpsPSGAlterVol     $F5
0008D470 8F06                       	dc.b	nD1, $06
0008D472 EC0B                       	smpsPSGAlterVol     $0B
0008D474 8006                       	dc.b	nRst, $06
0008D476 E1FF                       	smpsAlterNote       $FF
0008D478 01                         	dc.b	$01
0008D479 E102                       	smpsAlterNote       $02
0008D47B 0101                       	dc.b	$01, $01
0008D47D E1FC                       	smpsAlterNote       $FC
0008D47F 01                         	dc.b	$01
0008D480 E1F8                       	smpsAlterNote       $F8
0008D482 01                         	dc.b	$01
0008D483 E1F9                       	smpsAlterNote       $F9
0008D485 01                         	dc.b	$01
0008D486 E1FF                       	smpsAlterNote       $FF
0008D488 01                         	dc.b	$01
0008D489 E103                       	smpsAlterNote       $03
0008D48B 01                         	dc.b	$01
0008D48C E1FC                       	smpsAlterNote       $FC
0008D48E ECF5                       	smpsPSGAlterVol     $F5
0008D490 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D494 EC04                       	smpsPSGAlterVol     $04
0008D496 E701                       	dc.b	smpsNoAttack, $01
0008D498 EC07                       	smpsPSGAlterVol     $07
0008D49A 8009                       	dc.b	nRst, $09
0008D49C E1FF                       	smpsAlterNote       $FF
0008D49E 01                         	dc.b	$01
0008D49F E102                       	smpsAlterNote       $02
0008D4A1 0101                       	dc.b	$01, $01
0008D4A3 E1FC                       	smpsAlterNote       $FC
0008D4A5 01                         	dc.b	$01
0008D4A6 E1F8                       	smpsAlterNote       $F8
0008D4A8 01                         	dc.b	$01
0008D4A9 E1F9                       	smpsAlterNote       $F9
0008D4AB 01                         	dc.b	$01
0008D4AC E1FF                       	smpsAlterNote       $FF
0008D4AE 01                         	dc.b	$01
0008D4AF E103                       	smpsAlterNote       $03
0008D4B1 01                         	dc.b	$01
0008D4B2 E1FF                       	smpsAlterNote       $FF
0008D4B4 01                         	dc.b	$01
0008D4B5 E1FC                       	smpsAlterNote       $FC
0008D4B7 01                         	dc.b	$01
0008D4B8 E1F8                       	smpsAlterNote       $F8
0008D4BA 01                         	dc.b	$01
0008D4BB E1FC                       	smpsAlterNote       $FC
0008D4BD 01                         	dc.b	$01
0008D4BE E102                       	smpsAlterNote       $02
0008D4C0 01                         	dc.b	$01
0008D4C1 E103                       	smpsAlterNote       $03
0008D4C3 01                         	dc.b	$01
0008D4C4 E1FF                       	smpsAlterNote       $FF
0008D4C6 01                         	dc.b	$01
0008D4C7 E1FC                       	smpsAlterNote       $FC
0008D4C9 ECF5                       	smpsPSGAlterVol     $F5
0008D4CB 8F03                       	dc.b	nD1, $03
0008D4CD E1FB                       	smpsAlterNote       $FB
0008D4CF 8D06                       	dc.b	nC1, $06
0008D4D1 EC04                       	smpsPSGAlterVol     $04
0008D4D3 E701                       	dc.b	smpsNoAttack, $01
0008D4D5 EC07                       	smpsPSGAlterVol     $07
0008D4D7 8006                       	dc.b	nRst, $06
0008D4D9 E1FE                       	smpsAlterNote       $FE
0008D4DB 01                         	dc.b	$01
0008D4DC E102                       	smpsAlterNote       $02
0008D4DE 01                         	dc.b	$01
0008D4DF E101                       	smpsAlterNote       $01
0008D4E1 01                         	dc.b	$01
0008D4E2 E1FB                       	smpsAlterNote       $FB
0008D4E4 01                         	dc.b	$01
0008D4E5 E1F7                       	smpsAlterNote       $F7
0008D4E7 01                         	dc.b	$01
0008D4E8 E1FB                       	smpsAlterNote       $FB
0008D4EA 01                         	dc.b	$01
0008D4EB E1FE                       	smpsAlterNote       $FE
0008D4ED 01                         	dc.b	$01
0008D4EE E102                       	smpsAlterNote       $02
0008D4F0 01                         	dc.b	$01
0008D4F1 E1FB                       	smpsAlterNote       $FB
0008D4F3 ECF5                       	smpsPSGAlterVol     $F5
0008D4F5 8D03                       	dc.b	nC1, $03
0008D4F7 E1FC                       	smpsAlterNote       $FC
0008D4F9 8F0D                       	dc.b	nD1, $0D
0008D4FB E1FF                       	smpsAlterNote       $FF
0008D4FD E701                       	dc.b	smpsNoAttack, $01
0008D4FF E103                       	smpsAlterNote       $03
0008D501 E701                       	dc.b	smpsNoAttack, $01
0008D503 E1FF                       	smpsAlterNote       $FF
0008D505 E701                       	dc.b	smpsNoAttack, $01
0008D507 E1FC                       	smpsAlterNote       $FC
0008D509 E701                       	dc.b	smpsNoAttack, $01
0008D50B E1F8                       	smpsAlterNote       $F8
0008D50D E701                       	dc.b	smpsNoAttack, $01
0008D50F E1FC                       	smpsAlterNote       $FC
0008D511 E701                       	dc.b	smpsNoAttack, $01
0008D513 E102                       	smpsAlterNote       $02
0008D515 E701                       	dc.b	smpsNoAttack, $01
0008D517 E103                       	smpsAlterNote       $03
0008D519 E701                       	dc.b	smpsNoAttack, $01
0008D51B E1FF                       	smpsAlterNote       $FF
0008D51D E701                       	dc.b	smpsNoAttack, $01
0008D51F E1F9                       	smpsAlterNote       $F9
0008D521 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D525 E1FC                       	smpsAlterNote       $FC
0008D527 E701                       	dc.b	smpsNoAttack, $01
0008D529 E102                       	smpsAlterNote       $02
0008D52B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D52F E1FF                       	smpsAlterNote       $FF
0008D531 E701                       	dc.b	smpsNoAttack, $01
0008D533 E1F9                       	smpsAlterNote       $F9
0008D535 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D539 E1FF                       	smpsAlterNote       $FF
0008D53B EC04                       	smpsPSGAlterVol     $04
0008D53D E701                       	dc.b	smpsNoAttack, $01
0008D53F EC07                       	smpsPSGAlterVol     $07
0008D541 E103                       	smpsAlterNote       $03
0008D543 8001                       	dc.b	nRst, $01
0008D545 E102                       	smpsAlterNote       $02
0008D547 01                         	dc.b	$01
0008D548 E1FB                       	smpsAlterNote       $FB
0008D54A 01                         	dc.b	$01
0008D54B E1F7                       	smpsAlterNote       $F7
0008D54D 01                         	dc.b	$01
0008D54E E1FB                       	smpsAlterNote       $FB
0008D550 01                         	dc.b	$01
0008D551 E1FF                       	smpsAlterNote       $FF
0008D553 01                         	dc.b	$01
0008D554 E103                       	smpsAlterNote       $03
0008D556 01                         	dc.b	$01
0008D557 E1FB                       	smpsAlterNote       $FB
0008D559 ECF5                       	smpsPSGAlterVol     $F5
0008D55B 8E06                       	dc.b	nCs1, $06
0008D55D EC04                       	smpsPSGAlterVol     $04
0008D55F E701                       	dc.b	smpsNoAttack, $01
0008D561 EC07                       	smpsPSGAlterVol     $07
0008D563 8003                       	dc.b	nRst, $03
0008D565 ECF5                       	smpsPSGAlterVol     $F5
0008D567 8E06                       	dc.b	nCs1, $06
0008D569 EC04                       	smpsPSGAlterVol     $04
0008D56B E701                       	dc.b	smpsNoAttack, $01
0008D56D EC07                       	smpsPSGAlterVol     $07
0008D56F 8006                       	dc.b	nRst, $06
0008D571 E1FE                       	smpsAlterNote       $FE
0008D573 01                         	dc.b	$01
0008D574 E102                       	smpsAlterNote       $02
0008D576 01                         	dc.b	$01
0008D577 E1FE                       	smpsAlterNote       $FE
0008D579 01                         	dc.b	$01
0008D57A E1FC                       	smpsAlterNote       $FC
0008D57C 01                         	dc.b	$01
0008D57D ECF5                       	smpsPSGAlterVol     $F5
0008D57F 8F06                       	dc.b	nD1, $06
0008D581 EC04                       	smpsPSGAlterVol     $04
0008D583 E701                       	dc.b	smpsNoAttack, $01
0008D585 EC07                       	smpsPSGAlterVol     $07
0008D587 8003                       	dc.b	nRst, $03
0008D589 ECF5                       	smpsPSGAlterVol     $F5
0008D58B 8F07                       	dc.b	nD1, $07
0008D58D EC0B                       	smpsPSGAlterVol     $0B
0008D58F 8007                       	dc.b	nRst, $07
0008D591 E102                       	smpsAlterNote       $02
0008D593 0101                       	dc.b	$01, $01
0008D595 E1FB                       	smpsAlterNote       $FB
0008D597 01                         	dc.b	$01
0008D598 E1F8                       	smpsAlterNote       $F8
0008D59A 01                         	dc.b	$01
0008D59B E1FB                       	smpsAlterNote       $FB
0008D59D ECF5                       	smpsPSGAlterVol     $F5
0008D59F 8E06                       	dc.b	nCs1, $06
0008D5A1 EC0B                       	smpsPSGAlterVol     $0B
0008D5A3 8004                       	dc.b	nRst, $04
0008D5A5 ECF5                       	smpsPSGAlterVol     $F5
0008D5A7 8E06                       	dc.b	nCs1, $06
0008D5A9 EC04                       	smpsPSGAlterVol     $04
0008D5AB E701                       	dc.b	smpsNoAttack, $01
0008D5AD EC07                       	smpsPSGAlterVol     $07
0008D5AF 8006                       	dc.b	nRst, $06
0008D5B1 E1FE                       	smpsAlterNote       $FE
0008D5B3 01                         	dc.b	$01
0008D5B4 E102                       	smpsAlterNote       $02
0008D5B6 01                         	dc.b	$01
0008D5B7 E1FE                       	smpsAlterNote       $FE
0008D5B9 01                         	dc.b	$01
0008D5BA E1F9                       	smpsAlterNote       $F9
0008D5BC 01                         	dc.b	$01
0008D5BD E1FC                       	smpsAlterNote       $FC
0008D5BF ECF5                       	smpsPSGAlterVol     $F5
0008D5C1 8F06                       	dc.b	nD1, $06
0008D5C3 EC04                       	smpsPSGAlterVol     $04
0008D5C5 E701                       	dc.b	smpsNoAttack, $01
0008D5C7 EC07                       	smpsPSGAlterVol     $07
0008D5C9 8003                       	dc.b	nRst, $03
0008D5CB ECF5                       	smpsPSGAlterVol     $F5
0008D5CD 8F06                       	dc.b	nD1, $06
0008D5CF EC04                       	smpsPSGAlterVol     $04
0008D5D1 E701                       	dc.b	smpsNoAttack, $01
0008D5D3 EC07                       	smpsPSGAlterVol     $07
0008D5D5 8006                       	dc.b	nRst, $06
0008D5D7 E1FF                       	smpsAlterNote       $FF
0008D5D9 01                         	dc.b	$01
0008D5DA E103                       	smpsAlterNote       $03
0008D5DC 01                         	dc.b	$01
0008D5DD E102                       	smpsAlterNote       $02
0008D5DF 01                         	dc.b	$01
0008D5E0 E1FB                       	smpsAlterNote       $FB
0008D5E2 01                         	dc.b	$01
0008D5E3 ECF5                       	smpsPSGAlterVol     $F5
0008D5E5 8E07                       	dc.b	nCs1, $07
0008D5E7 EC0B                       	smpsPSGAlterVol     $0B
0008D5E9 8004                       	dc.b	nRst, $04
0008D5EB ECF5                       	smpsPSGAlterVol     $F5
0008D5ED 8E06                       	dc.b	nCs1, $06
0008D5EF EC0B                       	smpsPSGAlterVol     $0B
0008D5F1 8007                       	dc.b	nRst, $07
0008D5F3 E101                       	smpsAlterNote       $01
0008D5F5 0101                       	dc.b	$01, $01
0008D5F7 E1FE                       	smpsAlterNote       $FE
0008D5F9 01                         	dc.b	$01
0008D5FA E1F9                       	smpsAlterNote       $F9
0008D5FC 01                         	dc.b	$01
0008D5FD E1FC                       	smpsAlterNote       $FC
0008D5FF ECF5                       	smpsPSGAlterVol     $F5
0008D601 8F06                       	dc.b	nD1, $06
0008D603 EC04                       	smpsPSGAlterVol     $04
0008D605 E701                       	dc.b	smpsNoAttack, $01
0008D607 EC07                       	smpsPSGAlterVol     $07
0008D609 8003                       	dc.b	nRst, $03
0008D60B ECF5                       	smpsPSGAlterVol     $F5
0008D60D 8F06                       	dc.b	nD1, $06
0008D60F EC04                       	smpsPSGAlterVol     $04
0008D611 E701                       	dc.b	smpsNoAttack, $01
0008D613 EC07                       	smpsPSGAlterVol     $07
0008D615 8006                       	dc.b	nRst, $06
0008D617 E1FF                       	smpsAlterNote       $FF
0008D619 01                         	dc.b	$01
0008D61A E103                       	smpsAlterNote       $03
0008D61C 01                         	dc.b	$01
0008D61D E1FF                       	smpsAlterNote       $FF
0008D61F 01                         	dc.b	$01
0008D620 E1FB                       	smpsAlterNote       $FB
0008D622 01                         	dc.b	$01
0008D623 ECF5                       	smpsPSGAlterVol     $F5
0008D625 8E06                       	dc.b	nCs1, $06
0008D627 EC04                       	smpsPSGAlterVol     $04
0008D629 E701                       	dc.b	smpsNoAttack, $01
0008D62B EC07                       	smpsPSGAlterVol     $07
0008D62D 8003                       	dc.b	nRst, $03
0008D62F ECF5                       	smpsPSGAlterVol     $F5
0008D631 8E07                       	dc.b	nCs1, $07
0008D633 E1FF                       	smpsAlterNote       $FF
0008D635 9B06                       	dc.b	nD2, $06
0008D637 EC04                       	smpsPSGAlterVol     $04
0008D639 E701                       	dc.b	smpsNoAttack, $01
0008D63B ECFC                       	smpsPSGAlterVol     $FC
0008D63D 9B03                       	dc.b	nD2, $03
0008D63F EC04                       	smpsPSGAlterVol     $04
0008D641 E701                       	dc.b	smpsNoAttack, $01
0008D643 ECFC                       	smpsPSGAlterVol     $FC
0008D645 9B02                       	dc.b	nD2, $02
0008D647 EC04                       	smpsPSGAlterVol     $04
0008D649 E701                       	dc.b	smpsNoAttack, $01
0008D64B ECFC                       	smpsPSGAlterVol     $FC
0008D64D E1FE                       	smpsAlterNote       $FE
0008D64F 9A03                       	dc.b	nCs2, $03
0008D651 EC0B                       	smpsPSGAlterVol     $0B
0008D653 800A                       	dc.b	nRst, $0A
0008D655 E102                       	smpsAlterNote       $02
0008D657 01                         	dc.b	$01
0008D658 E10A                       	smpsAlterNote       $0A
0008D65A 01                         	dc.b	$01
0008D65B E102                       	smpsAlterNote       $02
0008D65D 01                         	dc.b	$01
0008D65E E1F7                       	smpsAlterNote       $F7
0008D660 01                         	dc.b	$01
0008D661 E10A                       	smpsAlterNote       $0A
0008D663 01                         	dc.b	$01
0008D664 E1FC                       	smpsAlterNote       $FC
0008D666 01                         	dc.b	$01
0008D667 E108                       	smpsAlterNote       $08
0008D669 0101                       	dc.b	$01, $01
0008D66B E102                       	smpsAlterNote       $02
0008D66D 01                         	dc.b	$01
0008D66E E1F7                       	smpsAlterNote       $F7
0008D670 0101                       	dc.b	$01, $01
0008D672 E1FC                       	smpsAlterNote       $FC
0008D674 ECF5                       	smpsPSGAlterVol     $F5
0008D676 8F06                       	dc.b	nD1, $06
0008D678 EC04                       	smpsPSGAlterVol     $04
0008D67A E701                       	dc.b	smpsNoAttack, $01
0008D67C EC07                       	smpsPSGAlterVol     $07
0008D67E 8003                       	dc.b	nRst, $03
0008D680 ECF5                       	smpsPSGAlterVol     $F5
0008D682 8F06                       	dc.b	nD1, $06
0008D684 EC04                       	smpsPSGAlterVol     $04
0008D686 E701                       	dc.b	smpsNoAttack, $01
0008D688 EC07                       	smpsPSGAlterVol     $07
0008D68A 8006                       	dc.b	nRst, $06
0008D68C E1FF                       	smpsAlterNote       $FF
0008D68E 01                         	dc.b	$01
0008D68F E102                       	smpsAlterNote       $02
0008D691 01                         	dc.b	$01
0008D692 E101                       	smpsAlterNote       $01
0008D694 01                         	dc.b	$01
0008D695 E1FC                       	smpsAlterNote       $FC
0008D697 01                         	dc.b	$01
0008D698 ECF5                       	smpsPSGAlterVol     $F5
0008D69A 9007                       	dc.b	nEb1, $07
0008D69C EC0B                       	smpsPSGAlterVol     $0B
0008D69E 8004                       	dc.b	nRst, $04
0008D6A0 ECF5                       	smpsPSGAlterVol     $F5
0008D6A2 9006                       	dc.b	nEb1, $06
0008D6A4 EC0B                       	smpsPSGAlterVol     $0B
0008D6A6 8007                       	dc.b	nRst, $07
0008D6A8 E103                       	smpsAlterNote       $03
0008D6AA 0101                       	dc.b	$01, $01
0008D6AC E1FF                       	smpsAlterNote       $FF
0008D6AE 01                         	dc.b	$01
0008D6AF E1F9                       	smpsAlterNote       $F9
0008D6B1 01                         	dc.b	$01
0008D6B2 E1FC                       	smpsAlterNote       $FC
0008D6B4 ECF5                       	smpsPSGAlterVol     $F5
0008D6B6 8F06                       	dc.b	nD1, $06
0008D6B8 EC04                       	smpsPSGAlterVol     $04
0008D6BA E701                       	dc.b	smpsNoAttack, $01
0008D6BC EC07                       	smpsPSGAlterVol     $07
0008D6BE 8003                       	dc.b	nRst, $03
0008D6C0 ECF5                       	smpsPSGAlterVol     $F5
0008D6C2 8F06                       	dc.b	nD1, $06
0008D6C4 EC04                       	smpsPSGAlterVol     $04
0008D6C6 E701                       	dc.b	smpsNoAttack, $01
0008D6C8 EC07                       	smpsPSGAlterVol     $07
0008D6CA 8006                       	dc.b	nRst, $06
0008D6CC E1FF                       	smpsAlterNote       $FF
0008D6CE 01                         	dc.b	$01
0008D6CF E103                       	smpsAlterNote       $03
0008D6D1 01                         	dc.b	$01
0008D6D2 E1FF                       	smpsAlterNote       $FF
0008D6D4 01                         	dc.b	$01
0008D6D5 E1F9                       	smpsAlterNote       $F9
0008D6D7 01                         	dc.b	$01
0008D6D8 E1FC                       	smpsAlterNote       $FC
0008D6DA ECF5                       	smpsPSGAlterVol     $F5
0008D6DC 8F06                       	dc.b	nD1, $06
0008D6DE EC04                       	smpsPSGAlterVol     $04
0008D6E0 E701                       	dc.b	smpsNoAttack, $01
0008D6E2 EC07                       	smpsPSGAlterVol     $07
0008D6E4 8003                       	dc.b	nRst, $03
0008D6E6 ECF5                       	smpsPSGAlterVol     $F5
0008D6E8 8F07                       	dc.b	nD1, $07
0008D6EA EC0B                       	smpsPSGAlterVol     $0B
0008D6EC 8006                       	dc.b	nRst, $06
0008D6EE E1FF                       	smpsAlterNote       $FF
0008D6F0 01                         	dc.b	$01
0008D6F1 E102                       	smpsAlterNote       $02
0008D6F3 0101                       	dc.b	$01, $01
0008D6F5 E1FC                       	smpsAlterNote       $FC
0008D6F7 01                         	dc.b	$01
0008D6F8 ECF5                       	smpsPSGAlterVol     $F5
0008D6FA 8F07                       	dc.b	nD1, $07
0008D6FC EC0B                       	smpsPSGAlterVol     $0B
0008D6FE 8004                       	dc.b	nRst, $04
0008D700 ECF5                       	smpsPSGAlterVol     $F5
0008D702 8F06                       	dc.b	nD1, $06
0008D704 EC04                       	smpsPSGAlterVol     $04
0008D706 E701                       	dc.b	smpsNoAttack, $01
0008D708 EC07                       	smpsPSGAlterVol     $07
0008D70A 8006                       	dc.b	nRst, $06
0008D70C E101                       	smpsAlterNote       $01
0008D70E 01                         	dc.b	$01
0008D70F E102                       	smpsAlterNote       $02
0008D711 01                         	dc.b	$01
0008D712 E1FF                       	smpsAlterNote       $FF
0008D714 01                         	dc.b	$01
0008D715 E1F9                       	smpsAlterNote       $F9
0008D717 01                         	dc.b	$01
0008D718 E1FC                       	smpsAlterNote       $FC
0008D71A ECF5                       	smpsPSGAlterVol     $F5
0008D71C 9006                       	dc.b	nEb1, $06
0008D71E EC04                       	smpsPSGAlterVol     $04
0008D720 E701                       	dc.b	smpsNoAttack, $01
0008D722 EC07                       	smpsPSGAlterVol     $07
0008D724 8003                       	dc.b	nRst, $03
0008D726 ECF5                       	smpsPSGAlterVol     $F5
0008D728 9006                       	dc.b	nEb1, $06
0008D72A EC04                       	smpsPSGAlterVol     $04
0008D72C E701                       	dc.b	smpsNoAttack, $01
0008D72E EC07                       	smpsPSGAlterVol     $07
0008D730 8006                       	dc.b	nRst, $06
0008D732 E100                       	smpsAlterNote       $00
0008D734 01                         	dc.b	$01
0008D735 E102                       	smpsAlterNote       $02
0008D737 01                         	dc.b	$01
0008D738 E100                       	smpsAlterNote       $00
0008D73A 01                         	dc.b	$01
0008D73B E1FF                       	smpsAlterNote       $FF
0008D73D 01                         	dc.b	$01
0008D73E ECF5                       	smpsPSGAlterVol     $F5
0008D740 9B06                       	dc.b	nD2, $06
0008D742 EC04                       	smpsPSGAlterVol     $04
0008D744 E701                       	dc.b	smpsNoAttack, $01
0008D746 EC07                       	smpsPSGAlterVol     $07
0008D748 8003                       	dc.b	nRst, $03
0008D74A ECF5                       	smpsPSGAlterVol     $F5
0008D74C 9B07                       	dc.b	nD2, $07
0008D74E EC0B                       	smpsPSGAlterVol     $0B
0008D750 8007                       	dc.b	nRst, $07
0008D752 E105                       	smpsAlterNote       $05
0008D754 0101                       	dc.b	$01, $01
0008D756 E1FF                       	smpsAlterNote       $FF
0008D758 01                         	dc.b	$01
0008D759 E1FC                       	smpsAlterNote       $FC
0008D75B 01                         	dc.b	$01
0008D75C E1FF                       	smpsAlterNote       $FF
0008D75E ECF5                       	smpsPSGAlterVol     $F5
0008D760 9B06                       	dc.b	nD2, $06
0008D762 EC0B                       	smpsPSGAlterVol     $0B
0008D764 8004                       	dc.b	nRst, $04
0008D766 ECF5                       	smpsPSGAlterVol     $F5
0008D768 9B06                       	dc.b	nD2, $06
0008D76A EC04                       	smpsPSGAlterVol     $04
0008D76C E701                       	dc.b	smpsNoAttack, $01
0008D76E EC07                       	smpsPSGAlterVol     $07
0008D770 8006                       	dc.b	nRst, $06
0008D772 E102                       	smpsAlterNote       $02
0008D774 01                         	dc.b	$01
0008D775 E106                       	smpsAlterNote       $06
0008D777 01                         	dc.b	$01
0008D778 E102                       	smpsAlterNote       $02
0008D77A 01                         	dc.b	$01
0008D77B E1FC                       	smpsAlterNote       $FC
0008D77D 01                         	dc.b	$01
0008D77E E1FF                       	smpsAlterNote       $FF
0008D780 ECF5                       	smpsPSGAlterVol     $F5
0008D782 9B06                       	dc.b	nD2, $06
0008D784 EC04                       	smpsPSGAlterVol     $04
0008D786 E701                       	dc.b	smpsNoAttack, $01
0008D788 EC07                       	smpsPSGAlterVol     $07
0008D78A 8003                       	dc.b	nRst, $03
0008D78C ECF5                       	smpsPSGAlterVol     $F5
0008D78E 9B07                       	dc.b	nD2, $07
0008D790 EC0B                       	smpsPSGAlterVol     $0B
0008D792 8006                       	dc.b	nRst, $06
0008D794 E102                       	smpsAlterNote       $02
0008D796 01                         	dc.b	$01
0008D797 E105                       	smpsAlterNote       $05
0008D799 0101                       	dc.b	$01, $01
0008D79B E1FF                       	smpsAlterNote       $FF
0008D79D 01                         	dc.b	$01
0008D79E ECF5                       	smpsPSGAlterVol     $F5
0008D7A0 9B07                       	dc.b	nD2, $07
0008D7A2 EC0B                       	smpsPSGAlterVol     $0B
0008D7A4 8004                       	dc.b	nRst, $04
0008D7A6 ECF5                       	smpsPSGAlterVol     $F5
0008D7A8 9B06                       	dc.b	nD2, $06
0008D7AA EC04                       	smpsPSGAlterVol     $04
0008D7AC E701                       	dc.b	smpsNoAttack, $01
0008D7AE EC07                       	smpsPSGAlterVol     $07
0008D7B0 8006                       	dc.b	nRst, $06
0008D7B2 E105                       	smpsAlterNote       $05
0008D7B4 0101                       	dc.b	$01, $01
0008D7B6 E102                       	smpsAlterNote       $02
0008D7B8 01                         	dc.b	$01
0008D7B9 E1FC                       	smpsAlterNote       $FC
0008D7BB 01                         	dc.b	$01
0008D7BC E1FF                       	smpsAlterNote       $FF
0008D7BE ECF5                       	smpsPSGAlterVol     $F5
0008D7C0 9B06                       	dc.b	nD2, $06
0008D7C2 EC04                       	smpsPSGAlterVol     $04
0008D7C4 E701                       	dc.b	smpsNoAttack, $01
0008D7C6 EC07                       	smpsPSGAlterVol     $07
0008D7C8 8003                       	dc.b	nRst, $03
0008D7CA ECF5                       	smpsPSGAlterVol     $F5
0008D7CC 9B06                       	dc.b	nD2, $06
0008D7CE EC04                       	smpsPSGAlterVol     $04
0008D7D0 E701                       	dc.b	smpsNoAttack, $01
0008D7D2 EC07                       	smpsPSGAlterVol     $07
0008D7D4 8006                       	dc.b	nRst, $06
0008D7D6 E102                       	smpsAlterNote       $02
0008D7D8 01                         	dc.b	$01
0008D7D9 E106                       	smpsAlterNote       $06
0008D7DB 01                         	dc.b	$01
0008D7DC E102                       	smpsAlterNote       $02
0008D7DE 01                         	dc.b	$01
0008D7DF E1FF                       	smpsAlterNote       $FF
0008D7E1 01                         	dc.b	$01
0008D7E2 ECF5                       	smpsPSGAlterVol     $F5
0008D7E4 9B06                       	dc.b	nD2, $06
0008D7E6 EC04                       	smpsPSGAlterVol     $04
0008D7E8 E701                       	dc.b	smpsNoAttack, $01
0008D7EA EC07                       	smpsPSGAlterVol     $07
0008D7EC 8003                       	dc.b	nRst, $03
0008D7EE ECF5                       	smpsPSGAlterVol     $F5
0008D7F0 9B07                       	dc.b	nD2, $07
0008D7F2 EC0B                       	smpsPSGAlterVol     $0B
0008D7F4 8007                       	dc.b	nRst, $07
0008D7F6 E107                       	smpsAlterNote       $07
0008D7F8 0101                       	dc.b	$01, $01
0008D7FA E1FE                       	smpsAlterNote       $FE
0008D7FC 01                         	dc.b	$01
0008D7FD E1FA                       	smpsAlterNote       $FA
0008D7FF 0101                       	dc.b	$01, $01
0008D801 E103                       	smpsAlterNote       $03
0008D803 01                         	dc.b	$01
0008D804 E109                       	smpsAlterNote       $09
0008D806 01                         	dc.b	$01
0008D807 E107                       	smpsAlterNote       $07
0008D809 01                         	dc.b	$01
0008D80A E1FE                       	smpsAlterNote       $FE
0008D80C 01                         	dc.b	$01
0008D80D E108                       	smpsAlterNote       $08
0008D80F 01                         	dc.b	$01
0008D810 E1FD                       	smpsAlterNote       $FD
0008D812 ECF5                       	smpsPSGAlterVol     $F5
0008D814 940E                       	dc.b	nG1, $0E
0008D816 E103                       	smpsAlterNote       $03
0008D818 EC0B                       	smpsPSGAlterVol     $0B
0008D81A 8001 01                    	dc.b	nRst, $01, $01
0008D81D E1FD                       	smpsAlterNote       $FD
0008D81F 01                         	dc.b	$01
0008D820 E1FB                       	smpsAlterNote       $FB
0008D822 0101                       	dc.b	$01, $01
0008D824 E100                       	smpsAlterNote       $00
0008D826 01                         	dc.b	$01
0008D827 E103                       	smpsAlterNote       $03
0008D829 01                         	dc.b	$01
0008D82A E100                       	smpsAlterNote       $00
0008D82C 01                         	dc.b	$01
0008D82D E1FD                       	smpsAlterNote       $FD
0008D82F 01                         	dc.b	$01
0008D830 E1FA                       	smpsAlterNote       $FA
0008D832 01                         	dc.b	$01
0008D833 E1FD                       	smpsAlterNote       $FD
0008D835 01                         	dc.b	$01
0008D836 E103                       	smpsAlterNote       $03
0008D838 0101                       	dc.b	$01, $01
0008D83A E100                       	smpsAlterNote       $00
0008D83C 01                         	dc.b	$01
0008D83D E1FE                       	smpsAlterNote       $FE
0008D83F ECF5                       	smpsPSGAlterVol     $F5
0008D841 960D                       	dc.b	nA1, $0D
0008D843 E104                       	smpsAlterNote       $04
0008D845 EC0B                       	smpsPSGAlterVol     $0B
0008D847 8001 01                    	dc.b	nRst, $01, $01
0008D84A E101                       	smpsAlterNote       $01
0008D84C 01                         	dc.b	$01
0008D84D E1FB                       	smpsAlterNote       $FB
0008D84F 0101                       	dc.b	$01, $01
0008D851 E1FE                       	smpsAlterNote       $FE
0008D853 01                         	dc.b	$01
0008D854 E104                       	smpsAlterNote       $04
0008D856 0101                       	dc.b	$01, $01
0008D858 E1FE                       	smpsAlterNote       $FE
0008D85A 01                         	dc.b	$01
0008D85B E1FB                       	smpsAlterNote       $FB
0008D85D 0101                       	dc.b	$01, $01
0008D85F E101                       	smpsAlterNote       $01
0008D861 01                         	dc.b	$01
0008D862 E104                       	smpsAlterNote       $04
0008D864 0101                       	dc.b	$01, $01
0008D866 E1FE                       	smpsAlterNote       $FE
0008D868 ECF5                       	smpsPSGAlterVol     $F5
0008D86A 970D                       	dc.b	nBb1, $0D
0008D86C E101                       	smpsAlterNote       $01
0008D86E EC04                       	smpsPSGAlterVol     $04
0008D870 E701                       	dc.b	smpsNoAttack, $01
0008D872 EC07                       	smpsPSGAlterVol     $07
0008D874 E104                       	smpsAlterNote       $04
0008D876 8001                       	dc.b	nRst, $01
0008D878 E103                       	smpsAlterNote       $03
0008D87A 01                         	dc.b	$01
0008D87B E1FE                       	smpsAlterNote       $FE
0008D87D 01                         	dc.b	$01
0008D87E E1FA                       	smpsAlterNote       $FA
0008D880 01                         	dc.b	$01
0008D881 E1FE                       	smpsAlterNote       $FE
0008D883 01                         	dc.b	$01
0008D884 E101                       	smpsAlterNote       $01
0008D886 01                         	dc.b	$01
0008D887 E104                       	smpsAlterNote       $04
0008D889 01                         	dc.b	$01
0008D88A E101                       	smpsAlterNote       $01
0008D88C 01                         	dc.b	$01
0008D88D E1FB                       	smpsAlterNote       $FB
0008D88F 01                         	dc.b	$01
0008D890 E1FA                       	smpsAlterNote       $FA
0008D892 01                         	dc.b	$01
0008D893 E1FE                       	smpsAlterNote       $FE
0008D895 01                         	dc.b	$01
0008D896 E103                       	smpsAlterNote       $03
0008D898 0101                       	dc.b	$01, $01
0008D89A E101                       	smpsAlterNote       $01
0008D89C 01                         	dc.b	$01
0008D89D E1FE                       	smpsAlterNote       $FE
0008D89F ECF5                       	smpsPSGAlterVol     $F5
0008D8A1 990D                       	dc.b	nC2, $0D
0008D8A3 E104                       	smpsAlterNote       $04
0008D8A5 EC0B                       	smpsPSGAlterVol     $0B
0008D8A7 8001 01                    	dc.b	nRst, $01, $01
0008D8AA E102                       	smpsAlterNote       $02
0008D8AC 01                         	dc.b	$01
0008D8AD E1FC                       	smpsAlterNote       $FC
0008D8AF 0101                       	dc.b	$01, $01
0008D8B1 E102                       	smpsAlterNote       $02
0008D8B3 01                         	dc.b	$01
0008D8B4 E104                       	smpsAlterNote       $04
0008D8B6 01                         	dc.b	$01
0008D8B7 E1FF                       	smpsAlterNote       $FF
0008D8B9 ECF5                       	smpsPSGAlterVol     $F5
0008D8BB 9B06                       	dc.b	nD2, $06
0008D8BD EC04                       	smpsPSGAlterVol     $04
0008D8BF E701                       	dc.b	smpsNoAttack, $01
0008D8C1 EC07                       	smpsPSGAlterVol     $07
0008D8C3 8003                       	dc.b	nRst, $03
0008D8C5 ECF5                       	smpsPSGAlterVol     $F5
0008D8C7 9B07                       	dc.b	nD2, $07
0008D8C9 EC0B                       	smpsPSGAlterVol     $0B
0008D8CB 8006                       	dc.b	nRst, $06
0008D8CD E101                       	smpsAlterNote       $01
0008D8CF 01                         	dc.b	$01
0008D8D0 E104                       	smpsAlterNote       $04
0008D8D2 0101                       	dc.b	$01, $01
0008D8D4 E1FE                       	smpsAlterNote       $FE
0008D8D6 01                         	dc.b	$01
0008D8D7 E1FC                       	smpsAlterNote       $FC
0008D8D9 01                         	dc.b	$01
0008D8DA E1FE                       	smpsAlterNote       $FE
0008D8DC ECF5                       	smpsPSGAlterVol     $F5
0008D8DE 9C06                       	dc.b	nEb2, $06
0008D8E0 EC0B                       	smpsPSGAlterVol     $0B
0008D8E2 8004                       	dc.b	nRst, $04
0008D8E4 ECF5                       	smpsPSGAlterVol     $F5
0008D8E6 9C06                       	dc.b	nEb2, $06
0008D8E8 EC04                       	smpsPSGAlterVol     $04
0008D8EA E701                       	dc.b	smpsNoAttack, $01
0008D8EC EC07                       	smpsPSGAlterVol     $07
0008D8EE 8006                       	dc.b	nRst, $06
0008D8F0 E105                       	smpsAlterNote       $05
0008D8F2 01                         	dc.b	$01
0008D8F3 E106                       	smpsAlterNote       $06
0008D8F5 01                         	dc.b	$01
0008D8F6 E102                       	smpsAlterNote       $02
0008D8F8 01                         	dc.b	$01
0008D8F9 E1FB                       	smpsAlterNote       $FB
0008D8FB 01                         	dc.b	$01
0008D8FC E1FF                       	smpsAlterNote       $FF
0008D8FE ECF5                       	smpsPSGAlterVol     $F5
0008D900 9B06                       	dc.b	nD2, $06
0008D902 EC04                       	smpsPSGAlterVol     $04
0008D904 E701                       	dc.b	smpsNoAttack, $01
0008D906 EC07                       	smpsPSGAlterVol     $07
0008D908 8003                       	dc.b	nRst, $03
0008D90A ECF5                       	smpsPSGAlterVol     $F5
0008D90C 9B06                       	dc.b	nD2, $06
0008D90E EC04                       	smpsPSGAlterVol     $04
0008D910 E701                       	dc.b	smpsNoAttack, $01
0008D912 EC07                       	smpsPSGAlterVol     $07
0008D914 8006                       	dc.b	nRst, $06
0008D916 E101                       	smpsAlterNote       $01
0008D918 01                         	dc.b	$01
0008D919 E105                       	smpsAlterNote       $05
0008D91B 01                         	dc.b	$01
0008D91C E104                       	smpsAlterNote       $04
0008D91E 01                         	dc.b	$01
0008D91F E1FE                       	smpsAlterNote       $FE
0008D921 01                         	dc.b	$01
0008D922 ECF5                       	smpsPSGAlterVol     $F5
0008D924 9C07                       	dc.b	nEb2, $07
0008D926 EC0B                       	smpsPSGAlterVol     $0B
0008D928 8004                       	dc.b	nRst, $04
0008D92A ECF5                       	smpsPSGAlterVol     $F5
0008D92C 9C06                       	dc.b	nEb2, $06
0008D92E EC0B                       	smpsPSGAlterVol     $0B
0008D930 8007                       	dc.b	nRst, $07
0008D932 E105                       	smpsAlterNote       $05
0008D934 0101                       	dc.b	$01, $01
0008D936 E102                       	smpsAlterNote       $02
0008D938 01                         	dc.b	$01
0008D939 E1FB                       	smpsAlterNote       $FB
0008D93B 01                         	dc.b	$01
0008D93C E1FF                       	smpsAlterNote       $FF
0008D93E ECF5                       	smpsPSGAlterVol     $F5
0008D940 9B06                       	dc.b	nD2, $06
0008D942 EC04                       	smpsPSGAlterVol     $04
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 EC07                       	smpsPSGAlterVol     $07
0008D948 8003                       	dc.b	nRst, $03
0008D94A ECF5                       	smpsPSGAlterVol     $F5
0008D94C 9B06                       	dc.b	nD2, $06
0008D94E EC04                       	smpsPSGAlterVol     $04
0008D950 E701                       	dc.b	smpsNoAttack, $01
0008D952 EC07                       	smpsPSGAlterVol     $07
0008D954 8006                       	dc.b	nRst, $06
0008D956 E101                       	smpsAlterNote       $01
0008D958 01                         	dc.b	$01
0008D959 E105                       	smpsAlterNote       $05
0008D95B 01                         	dc.b	$01
0008D95C E101                       	smpsAlterNote       $01
0008D95E 01                         	dc.b	$01
0008D95F E1FC                       	smpsAlterNote       $FC
0008D961 01                         	dc.b	$01
0008D962 E1FE                       	smpsAlterNote       $FE
0008D964 ECF5                       	smpsPSGAlterVol     $F5
0008D966 9C06                       	dc.b	nEb2, $06
0008D968 EC04                       	smpsPSGAlterVol     $04
0008D96A E701                       	dc.b	smpsNoAttack, $01
0008D96C EC07                       	smpsPSGAlterVol     $07
0008D96E 8003                       	dc.b	nRst, $03
0008D970 ECF5                       	smpsPSGAlterVol     $F5
0008D972 9C07                       	dc.b	nEb2, $07
0008D974 EC0B                       	smpsPSGAlterVol     $0B
0008D976 8006                       	dc.b	nRst, $06
0008D978 E102                       	smpsAlterNote       $02
0008D97A 01                         	dc.b	$01
0008D97B E105                       	smpsAlterNote       $05
0008D97D 0101                       	dc.b	$01, $01
0008D97F E1FF                       	smpsAlterNote       $FF
0008D981 01                         	dc.b	$01
0008D982 ECF5                       	smpsPSGAlterVol     $F5
0008D984 9B07                       	dc.b	nD2, $07
0008D986 EC0B                       	smpsPSGAlterVol     $0B
0008D988 8004                       	dc.b	nRst, $04
0008D98A ECF5                       	smpsPSGAlterVol     $F5
0008D98C 9B06                       	dc.b	nD2, $06
0008D98E EC04                       	smpsPSGAlterVol     $04
0008D990 E701                       	dc.b	smpsNoAttack, $01
0008D992 EC07                       	smpsPSGAlterVol     $07
0008D994 8002                       	dc.b	nRst, $02
0008D996 E1FC                       	smpsAlterNote       $FC
0008D998 ECF5                       	smpsPSGAlterVol     $F5
0008D99A 9006                       	dc.b	nEb1, $06
0008D99C EC04                       	smpsPSGAlterVol     $04
0008D99E E701                       	dc.b	smpsNoAttack, $01
0008D9A0 ECFC                       	smpsPSGAlterVol     $FC
0008D9A2 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008D9A6 EC04                       	smpsPSGAlterVol     $04
0008D9A8 E701                       	dc.b	smpsNoAttack, $01
0008D9AA E1FD                       	smpsAlterNote       $FD
0008D9AC ECFC                       	smpsPSGAlterVol     $FC
0008D9AE 9402                       	dc.b	nG1, $02
0008D9B0 EC04                       	smpsPSGAlterVol     $04
0008D9B2 E701                       	dc.b	smpsNoAttack, $01
0008D9B4 E1FE                       	smpsAlterNote       $FE
0008D9B6 ECFC                       	smpsPSGAlterVol     $FC
0008D9B8 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D9BC EC04                       	smpsPSGAlterVol     $04
0008D9BE E701                       	dc.b	smpsNoAttack, $01
0008D9C0 EC07                       	smpsPSGAlterVol     $07
0008D9C2 8008                       	dc.b	nRst, $08
0008D9C4 F6F4 F3                    	smpsJump            music84_Jump06
0008D9C7                            
0008D9C7                            ; PSG3 Data
0008D9C7                            music84_PSG3:
0008D9C7 F500                       	smpsPSGvoice        $00
0008D9C9 E1FF                       	smpsAlterNote       $FF
0008D9CB EC0F                       	smpsPSGAlterVol     $0F
0008D9CD 803A                       	dc.b	nRst, $3A
0008D9CF                            
0008D9CF                            music84_Jump05:
0008D9CF 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008D9DB 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008D9E5 F6FF E8                    	smpsJump            music84_Jump05
0008D9E8                            
0008D9E8                            ; DAC Data
0008D9E8                            music84_DAC:
0008D9E8 E0C0                       	smpsPan             panCenter, $00
0008D9EA 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008D9F6 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008DA02 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008DA0E 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DA1A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DA26 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008DA32 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DA3E 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008DA4A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DA56 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008DA62 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DA6E 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008DA7A 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DA86 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DA92 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008DA9E 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008DAAA 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008DAB6 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008DAC2 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008DACE 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DADA 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DAE6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DAF2 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008DAFE 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DB0A 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008DB16 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008DB22 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008DB2E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DB3A 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DB46 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DB52 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DB5E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DB6A 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008DB76 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008DB82 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008DB8E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DB9A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008DBA6 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008DBB2 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DBBE 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008DBCA 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008DBD6 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008DBE2 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DBEE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DBFA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DC06 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DC12 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DC1E 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008DC2A 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008DC36 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008DC42 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008DC4E 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008DC5A 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008DC66 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008DC72 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DC7E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008DC8A 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008DC96 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DCA2 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DCAE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DCBA 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008DCC6 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008DCD2 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008DCDE 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008DCEA 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008DCF6 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008DD02 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008DD0E 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008DD1A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008DD26 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DD32 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008DD3E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DD4A 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008DD56 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008DD62 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008DD6E E0C0                       	smpsPan             panCenter, $00
0008DD70 F2                         	smpsStop
0008DD71                            
0008DD71                            music84_Voices:
0008DD71                            ;	Voice $00
0008DD71                            ;	$3D
0008DD71                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008DD71                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008DD71                            	smpsVcAlgorithm     $05
0008DD71                            	smpsVcFeedback      $07
0008DD71                            	smpsVcUnusedBits    $00
0008DD71                            	smpsVcDetune        $05, $04, $03, $04
0008DD71                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DD71                            	smpsVcRateScale     $00, $00, $00, $00
0008DD71                            	smpsVcAttackRate    $11, $11, $11, $11
0008DD71                            	smpsVcAmpMod        $00, $00, $00, $00
0008DD71                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008DD71                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008DD71                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DD71                            	smpsVcReleaseRate   $08, $08, $08, $07
0008DD71 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008DD8A                            
0008DD8A                            ;	Voice $01
0008DD8A                            ;	$04
0008DD8A                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008DD8A                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008DD8A                            	smpsVcAlgorithm     $04
0008DD8A                            	smpsVcFeedback      $00
0008DD8A                            	smpsVcUnusedBits    $00
0008DD8A                            	smpsVcDetune        $04, $03, $04, $05
0008DD8A                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008DD8A                            	smpsVcRateScale     $00, $01, $00, $01
0008DD8A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008DD8A                            	smpsVcAmpMod        $00, $00, $00, $00
0008DD8A                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008DD8A                            	smpsVcDecayRate2    $05, $00, $05, $00
0008DD8A                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008DD8A                            	smpsVcReleaseRate   $06, $06, $06, $06
0008DD8A 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008DDA3                            
0008DDA3                            ;	Voice $02
0008DDA3                            ;	$30
0008DDA3                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008DDA3                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008DDA3                            	smpsVcAlgorithm     $00
0008DDA3                            	smpsVcFeedback      $06
0008DDA3                            	smpsVcUnusedBits    $00
0008DDA3                            	smpsVcDetune        $04, $02, $00, $06
0008DDA3                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008DDA3                            	smpsVcRateScale     $00, $00, $00, $00
0008DDA3                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008DDA3                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDA3                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008DDA3                            	smpsVcDecayRate2    $01, $01, $01, $01
0008DDA3                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008DDA3                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008DDA3 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008DDBC                            
0008DDBC                            ;	Voice $03
0008DDBC                            ;	$3A
0008DDBC                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008DDBC                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008DDBC                            	smpsVcAlgorithm     $02
0008DDBC                            	smpsVcFeedback      $07
0008DDBC                            	smpsVcUnusedBits    $00
0008DDBC                            	smpsVcDetune        $04, $06, $02, $00
0008DDBC                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DDBC                            	smpsVcRateScale     $00, $00, $00, $00
0008DDBC                            	smpsVcAttackRate    $18, $19, $14, $14
0008DDBC                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDBC                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008DDBC                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DDBC                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008DDBC                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008DDBC 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008DDD5                            
0008DDD5                            ;	Voice $04
0008DDD5                            ;	$3C
0008DDD5                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008DDD5                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008DDD5                            	smpsVcAlgorithm     $04
0008DDD5                            	smpsVcFeedback      $07
0008DDD5                            	smpsVcUnusedBits    $00
0008DDD5                            	smpsVcDetune        $07, $00, $00, $03
0008DDD5                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008DDD5                            	smpsVcRateScale     $00, $00, $00, $00
0008DDD5                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008DDD5                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDD5                            	smpsVcDecayRate1    $00, $00, $00, $00
0008DDD5                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DDD5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DDD5                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008DDD5 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008DDEE                            
0008DDEE                            ;	Voice $05
0008DDEE                            ;	$38
0008DDEE                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008DDEE                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008DDEE                            	smpsVcAlgorithm     $00
0008DDEE                            	smpsVcFeedback      $07
0008DDEE                            	smpsVcUnusedBits    $00
0008DDEE                            	smpsVcDetune        $04, $06, $02, $00
0008DDEE                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008DDEE                            	smpsVcRateScale     $00, $00, $00, $00
0008DDEE                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008DDEE                            	smpsVcAmpMod        $00, $00, $00, $00
0008DDEE                            	smpsVcDecayRate1    $00, $03, $00, $17
0008DDEE                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008DDEE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008DDEE                            	smpsVcReleaseRate   $08, $05, $05, $05
0008DDEE 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008DE07                            
0008DE07                            
0008DE08 00                         		even
0008DE08                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00092018                            		even
00092018                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00095B70 00                         		even
00095B70                            Music87:	include	sound\music87.asm; Invincibility
00095B70                            triple_Header:
00095B70 =00000001                  smpsHeaderStartSong = 1
00095B70 0000                       	smpsHeaderVoice     triple_Voices
00095B72 0501                       	smpsHeaderChan      $05, $01
00095B74 0200                       	smpsHeaderTempo     $02, $00
00095B76                            
00095B7A 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00095B7E 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00095B82 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00095B86 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00095B8A 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00095B90                            
00095B90                            ; DAC Data
00095B90                            triple_DAC:
00095B90 E0C0                       	smpsPan             panCenter, $00
00095B92 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00095B98                            
00095B98                            triple_Loop01:
00095B98 8282 82                    	dc.b	dSnare, dSnare, dSnare
00095B9B                            
00095B9B                            triple_Loop00:
00095B9B 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00095BA7 06                         	dc.b	$06
00095BA8 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00095BAD 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00095BB9 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00095BC0 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00095BC5 0303 1B                    	dc.b	$03, $03, $1B
00095BC8 E0C0                       	smpsPan             panCenter, $00
00095BCA F6FF C4                    	smpsJump triple_DAC
00095BCD                            
00095BCD                            ; FM1 Data
00095BCD                            triple_FM1:
00095BCD E0C0                       	smpsPan             panCenter, $00
00095BD1 8018                       	dc.b	nRst, $18
00095BD3                            
00095BD3                            triple_Loop0B:
00095BD3 AC06 B8                    	dc.b	nG3, $06, nG4
00095BD6 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095BDB                            
00095BDB                            triple_Loop0C:
00095BDB A7B3                       	dc.b	nD3, nD4
00095BDD F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095BE2                            
00095BE2                            triple_Loop0D:
00095BE2 A9B5                       	dc.b	nE3, nE4
00095BE4 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00095BE9 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00095BF1 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00095BF6 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095C02 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00095C0E AD                         	dc.b	nAb3
00095C0F F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00095C14 8018                       	dc.b	nRst, $18
00095C16 E0C0                       	smpsPan             panCenter, $00
00095C1A F6FF B1                    	smpsJump triple_FM1
00095C1D                            
00095C1D                            ; FM2 Data
00095C1D                            triple_FM2:
00095C1D E0C0                       	smpsPan             panCenter, $00
00095C21 8018                       	dc.b	nRst, $18
00095C23                            
00095C23                            triple_Loop07:
00095C23 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095C2F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095C3B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00095C40 8003                       	dc.b	nRst, $03
00095C42                            
00095C42                            triple_Loop08:
00095C42 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095C48 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00095C4D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095C53                            
00095C53                            triple_Loop09:
00095C53 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095C5F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095C6B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00095C70 8003                       	dc.b	nRst, $03
00095C72                            
00095C72                            triple_Loop0A:
00095C72 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095C78 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00095C7D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095C83 E0C0                       	smpsPan             panCenter, $00
00095C87 F6FF 94                    	smpsJump triple_FM2
00095C8A                            
00095C8A                            ; FM3 Data
00095C8A                            triple_FM3:
00095C8A E0C0                       	smpsPan             panCenter, $00
00095C8E 8018                       	dc.b	nRst, $18
00095C90                            
00095C90                            triple_Loop06:
00095C90 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00095C97 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00095C9C 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00095CA8 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00095CB4 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00095CB7 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00095CBC 8018                       	dc.b	nRst, $18
00095CBE E0C0                       	smpsPan             panCenter, $00
00095CC2 F6FF C6                    	smpsJump triple_FM3
00095CC5                            
00095CC5                            ; FM4 Data
00095CC5                            triple_FM4:
00095CC5 E103                       	smpsAlterNote       $03
00095CC9 E0C0                       	smpsPan             panCenter, $00
00095CCB 8018                       	dc.b	nRst, $18
00095CCD                            
00095CCD                            triple_Loop02:
00095CCD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095CD9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095CE5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095CEA 8003                       	dc.b	nRst, $03
00095CEC                            
00095CEC                            triple_Loop03:
00095CEC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095CF2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00095CF7 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095CFD                            
00095CFD                            triple_Loop04:
00095CFD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095D09 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095D15 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095D1A 8003                       	dc.b	nRst, $03
00095D1C                            
00095D1C                            triple_Loop05:
00095D1C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095D22 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00095D27 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095D2D E0C0                       	smpsPan             panCenter, $00
00095D2F F6FF 94                    	smpsJump triple_FM4
00095D32                            
00095D32                            ; PSG1 Data
00095D32                            triple_PSG1:
00095D32 8018                       	dc.b	nRst, $18
00095D34                            
00095D34                            triple_Loop0E:
00095D34 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095D40 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095D4C 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095D58 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095D5C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00095D61 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095D6D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095D79 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095D85 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095D89                            
00095D89                            triple_Loop0F:
00095D89 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095D8F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00095D94 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00095D9A                            
00095D9A                            triple_Loop10:
00095D9A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095DA6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095DB2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095DBE 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095DC2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00095DC7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095DD3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095DDF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095DEB 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095DEF                            
00095DEF                            triple_Loop11:
00095DEF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095DF5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095DFA 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00095E00 F500                       	smpsPSGvoice        $00
00095E02 F6FF 2E                    	smpsJump triple_PSG1
00095E05                            
00095E05                            triple_Voices:
00095E05                            ;	Voice $00
00095E05                            ;	$3A
00095E05                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00095E05                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00095E05                            	smpsVcAlgorithm     $02
00095E05                            	smpsVcFeedback      $07
00095E05                            	smpsVcUnusedBits    $00
00095E05                            	smpsVcDetune        $00, $00, $00, $00
00095E05                            	smpsVcCoarseFreq    $01, $01, $07, $01
00095E05                            	smpsVcRateScale     $01, $02, $02, $02
00095E05                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00095E05                            	smpsVcAmpMod        $00, $00, $00, $00
00095E05                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00095E05                            	smpsVcDecayRate2    $00, $00, $00, $00
00095E05                            	smpsVcDecayLevel    $00, $01, $0F, $01
00095E05                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095E05 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00095E1E                            
00095E1E                            ;	Voice $01
00095E1E                            ;	$20
00095E1E                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00095E1E                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00095E1E                            	smpsVcAlgorithm     $00
00095E1E                            	smpsVcFeedback      $04
00095E1E                            	smpsVcUnusedBits    $00
00095E1E                            	smpsVcDetune        $00, $00, $03, $07
00095E1E                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00095E1E                            	smpsVcRateScale     $03, $03, $03, $02
00095E1E                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00095E1E                            	smpsVcAmpMod        $00, $00, $00, $00
00095E1E                            	smpsVcDecayRate1    $04, $04, $0A, $10
00095E1E                            	smpsVcDecayRate2    $08, $08, $08, $0F
00095E1E                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00095E1E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095E1E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095E1E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095E38 00                         		even
00095E38                            Music88:	incbin	sound\music88.bin; Extra Life
00095F26                            		even
00095F26                            Music89:	incbin	sound\music89.bin; Special Stage
00099DEE 00                         		even
00099DEE                            Music8A:	incbin	sound\music8A.bin; Title Screen
00099FB8                            		even
00099FB8                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009A252                            		even
0009A252                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009D0E6 00                         		even
0009D0E6                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009D302                            		even
0009D302                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009D770 00                         		even
0009D770                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009DDB0 00                         		even
0009DDB0                            Music90:	incbin	sound\music90.bin ; Continue
0009E14A 00                         		even
0009E14A                            Music91:	incbin	sound\music91.bin ; Credits
0009F418                            		even
0009F418                            Music92:	incbin	sound\music92.bin ; Drowning
0009F75A 00                         		even
0009F75A                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009F82A                            		even
0009F82A                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009F864 00                         		even
0009F864                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009F89E 00                         		even
0009F89E                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009F8D8 00                         		even
0009F8D8                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009F912 00                         		even
0009F912                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009F94C 00                         		even
0009F94C                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009F986 00                         		even
0009F986                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009F9C0 00                         		even
0009F9C0                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009F9FA 00                         		even
0009F9FA                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009FA34 00                         		even
0009FA34                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009FA6E 00                         		even
0009FA6E                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009FF5E                            		even
0009FF5E                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009FF98 00                         		even
0009FF98                            ; ---------------------------------------------------------------------------
0009FF98                            ; Sound	effect pointers
0009FF98                            ; ---------------------------------------------------------------------------
0009FF98 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009FFA4 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009FFB0 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009FFBC 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009FFC8 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009FFD4 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009FFE0 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009FFEC 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009FFF8 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A0004 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A0010 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A001C 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A0028 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A0034 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A0040 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A004C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A0058 0000 0000                  SoundD0Index:	dc.l SoundD0
000A005C                            SoundA0:	incbin	sound\soundA0.bin
000A0072                            		even
000A0072                            SoundA1:	incbin	sound\soundA1.bin
000A009C                            		even
000A009C                            SoundA2:	incbin	sound\soundA2.bin
000A00BC                            		even
000A00BC                            SoundA3:	incbin	sound\soundA3.bin
000A00EE                            		even
000A00EE                            SoundA4:	incbin	sound\soundA4.bin
000A0124                            		even
000A0124                            SoundA5:	include	sound\fart.asm
000A0124                            Fart_Header:
000A0124 =00000001                  smpsHeaderStartSong = 1
000A0124 0000                       	smpsHeaderVoice     Fart_Voices
000A0126 01                         	smpsHeaderTempoSFX  $01
000A0127 04                         	smpsHeaderChanSFX   $04
000A0128                            
000A0140                            
000A0140                            Fart_FM3:
000A0142 E607                       	smpsAlterVol        $07
000A0144 E0C0                       	smpsPan             panCenter, $00
000A0146 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A014B A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A014E E1FE                       	smpsAlterNote       $FE
000A0150 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A0153 E100                       	smpsAlterNote       $00
000A0155 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A015A F2                         	smpsStop
000A015B                            
000A015B                            ; FM4 Data
000A015B                            Fart_FM4:
000A015D E0C0                       	smpsPan             panCenter, $00
000A015F 8006                       	dc.b	nRst, $06
000A0163 E616                       	smpsAlterVol        $16
000A0165 E080                       	smpsPan             panLeft, $00
000A0167 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A016C A212                       	dc.b	nA2, $12
000A016E E60A                       	smpsAlterVol        $0A
000A0170 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0173 E603                       	smpsAlterVol        $03
000A0175 E7A2                       	dc.b	smpsNoAttack, nA2
000A0177 E603                       	smpsAlterVol        $03
000A0179 E7A2                       	dc.b	smpsNoAttack, nA2
000A017B E604                       	smpsAlterVol        $04
000A017D E7A2                       	dc.b	smpsNoAttack, nA2
000A017F E606                       	smpsAlterVol        $06
000A0181 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A0184 E610                       	smpsAlterVol        $10
000A0186 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0189 E610                       	smpsAlterVol        $10
000A018B E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A0190 F2                         	smpsStop
000A0191                            
000A0191                            ; FM5 Data
000A0191                            Fart_FM5:
000A0193 E0C0                       	smpsPan             panCenter, $00
000A0195 8009                       	dc.b	nRst, $09
000A0199 E616                       	smpsAlterVol        $16
000A019B E040                       	smpsPan             panRight, $00
000A019D F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A01A2 A215                       	dc.b	nA2, $15
000A01A4 E60A                       	smpsAlterVol        $0A
000A01A6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A01A9 E603                       	smpsAlterVol        $03
000A01AB E7A2                       	dc.b	smpsNoAttack, nA2
000A01AD E603                       	smpsAlterVol        $03
000A01AF E7A2                       	dc.b	smpsNoAttack, nA2
000A01B1 E604                       	smpsAlterVol        $04
000A01B3 E7A2                       	dc.b	smpsNoAttack, nA2
000A01B5 E606                       	smpsAlterVol        $06
000A01B7 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A01BA E610                       	smpsAlterVol        $10
000A01BC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A01BF E610                       	smpsAlterVol        $10
000A01C1 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A01C6 F2                         	smpsStop
000A01C7                            
000A01C7                            ; PSG3 Data
000A01C7                            Fart_PSG3:
000A01C7 F2                         	smpsStop
000A01C8                            
000A01C8                            ; FM Voices
000A01C8                            Fart_Voices:
000A01C8                            ;	Voice $00
000A01C8                            ;	$39
000A01C8                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A01C8                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A01C8                            	smpsVcAlgorithm     $01
000A01C8                            	smpsVcFeedback      $07
000A01C8                            	smpsVcUnusedBits    $00
000A01C8                            	smpsVcDetune        $00, $07, $03, $07
000A01C8                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A01C8                            	smpsVcRateScale     $00, $03, $03, $03
000A01C8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A01C8                            	smpsVcAmpMod        $00, $00, $00, $00
000A01C8                            	smpsVcDecayRate1    $00, $00, $00, $04
000A01C8                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A01C8                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A01C8                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A01C8 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A01E1                            
000A01E1                            ;	Voice $01
000A01E1                            ;	$00
000A01E1                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A01E1                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A01E1                            	smpsVcAlgorithm     $00
000A01E1                            	smpsVcFeedback      $00
000A01E1                            	smpsVcUnusedBits    $00
000A01E1                            	smpsVcDetune        $00, $00, $00, $00
000A01E1                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A01E1                            	smpsVcRateScale     $00, $00, $00, $00
000A01E1                            	smpsVcAttackRate    $00, $00, $00, $00
000A01E1                            	smpsVcAmpMod        $00, $00, $00, $00
000A01E1                            	smpsVcDecayRate1    $00, $00, $00, $00
000A01E1                            	smpsVcDecayRate2    $00, $00, $00, $00
000A01E1                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A01E1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A01E1 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A01E1 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A01FA                            		even
000A01FA                            SoundA6:	incbin	sound\soundA6.bin
000A022A                            		even
000A022A                            SoundA7:	incbin	sound\soundA7.bin
000A025A                            		even
000A025A                            SoundA8:	incbin	sound\soundA8.bin
000A028E                            		even
000A028E                            SoundA9:	incbin	sound\soundA9.bin
000A02A0                            		even
000A02A0                            SoundAA:	incbin	sound\soundAA.bin
000A02E2                            		even
000A02E2                            SoundAB:	incbin	sound\soundAB.bin
000A0302                            		even
000A0302                            SoundAC:	incbin	sound\soundAC.bin
000A0336                            		even
000A0336                            SoundAD:	incbin	sound\soundAD.bin
000A036C                            		even
000A036C                            SoundAE:	incbin	sound\soundAE.bin
000A03B6                            		even
000A03B6                            SoundAF:	incbin	sound\soundAF.bin
000A03E4                            		even
000A03E4                            SoundB0:	incbin	sound\soundB0.bin
000A0416                            		even
000A0416                            SoundB1:	incbin	sound\soundB1.bin
000A0442                            		even
000A0442                            SoundB2:	incbin	sound\soundB2.bin
000A0492                            		even
000A0492                            SoundB3:	incbin	sound\soundB3.bin
000A04DC                            		even
000A04DC                            SoundB4:	include	sound\soundB4.asm
000A04DC                            SndB4_Bumper_Header:
000A04DC =00000001                  smpsHeaderStartSong = 1
000A04DC 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A04DE 01                         	smpsHeaderTempoSFX  $01
000A04DF 03                         	smpsHeaderChanSFX   $03
000A04E0                            
000A04F2                            
000A04F2                            ; FM5 Data
000A04F2                            SndB4_Bumper_FM5:
000A04F4 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A04F7                            
000A04F7                            ; FM4 Data
000A04F7                            SndB4_Bumper_FM4:
000A04F7 F2                         	smpsStop
000A04F8                            
000A04F8                            SndB4_Bumper_Jump00:
000A04F8 A020                       	dc.b	nG2, $20
000A04FA F2                         	smpsStop
000A04FB                            
000A04FB                            ; FM3 Data
000A04FB                            SndB4_Bumper_FM3:
000A04FB F2                         	smpsStop
000A04FC                            
000A04FC                            SndB4_Bumper_Voices:
000A04FC                            ;	Voice $00
000A04FC                            ;	$32
000A04FC                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A04FC                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A04FC                            	smpsVcAlgorithm     $02
000A04FC                            	smpsVcFeedback      $06
000A04FC                            	smpsVcUnusedBits    $00
000A04FC                            	smpsVcDetune        $07, $07, $02, $00
000A04FC                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A04FC                            	smpsVcRateScale     $00, $00, $00, $00
000A04FC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A04FC                            	smpsVcAmpMod        $00, $00, $00, $00
000A04FC                            	smpsVcDecayRate1    $08, $00, $00, $09
000A04FC                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A04FC                            	smpsVcDecayLevel    $00, $00, $00, $00
000A04FC                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A04FC 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A04FC 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A0516 00                         		even
000A0516                            SoundB5:	incbin	sound\soundB5.bin
000A0534 00                         		even
000A0534                            SoundB6:	incbin	sound\soundB6.bin
000A0552                            		even
000A0552                            SoundB7:	incbin	sound\soundB7.bin
000A058E                            		even
000A058E                            SoundB8:	incbin	sound\soundB8.bin
000A05AC                            		even
000A05AC                            SoundB9:	incbin	sound\soundB9.bin
000A0610                            		even
000A0610                            SoundBA:	incbin	sound\soundBA.bin
000A0638                            		even
000A0638                            SoundBB:	incbin	sound\soundBB.bin
000A0664                            		even
000A0664                            SoundBC:	incbin	sound\soundBC.bin
000A06A6                            		even
000A06A6                            SoundBD:	incbin	sound\soundBD.bin
000A06FA                            		even
000A06FA                            SoundBE:	incbin	sound\soundBE.bin
000A0734                            		even
000A0734                            SoundBF:	incbin	sound\soundBF.bin
000A07A6                            		even
000A07A6                            SoundC0:	incbin	sound\soundC0.bin
000A07D4                            		even
000A07D4                            SoundC1:	incbin	sound\soundC1.bin
000A082E                            		even
000A082E                            SoundC2:	incbin	sound\soundC2.bin
000A0858                            		even
000A0858                            SoundC3:	incbin	sound\soundC3.bin
000A08D2                            		even
000A08D2                            SoundC4:	incbin	sound\soundC4.bin
000A09D0                            		even
000A09D0                            SoundC5:	incbin	sound\soundC5.bin
000A0A38                            		even
000A0A38                            SoundC6:	incbin	sound\soundC6.bin
000A0A7A                            		even
000A0A7A                            SoundC7:	incbin	sound\soundC7.bin
000A0AA8                            		even
000A0AA8                            SoundC8:	incbin	sound\soundC8.bin
000A0ABA                            		even
000A0ABA                            SoundC9:	incbin	sound\soundC9.bin
000A0AE8                            		even
000A0AE8                            SoundCA:	incbin	sound\soundCA.bin
000A0B16                            		even
000A0B16                            SoundCB:	incbin	sound\soundCB.bin
000A0B62                            		even
000A0B62                            SoundCC:	incbin	sound\C9.ssf
000A0B90                            		even
000A0B90                            SoundCD:	incbin	sound\soundCD.bin
000A0B9E                            		even
000A0B9E                            SoundCE:	incbin	sound\soundCE.bin
000A0BBC 00                         		even
000A0BBC                            SoundCF:	incbin	sound\soundCF.bin
000A0BF4                            		even
000A0BF4                            SoundD0:	incbin	sound\soundD0.bin
000A0C2E                            		even
000A0C2E                            SegaPCM:	incbin	sound\segapcm.bin
000BAD84                            SegaPCM_end:	even
000BAD84                            
000BAD84                            IdiotPCM:	incbin	sound\youare.bin
000C4E56 00                         IdiotPCM_end:	even
000C4E56                            
000C4E56                            Minecraft:	include	minecraft\code\main.asm
000C4E56                            ; Minecraft: Very Legacy Console Edition
000C4E56                            ; Main file
000C4E56                            
000C4E56                            	include	minecraft\code\variables.asm
000C4E56                            ; Minecraft: Very Legacy Console Edition
000C4E56                            ; Variable Definitions
000C4E56                            
000C4E56 =00000040                  MAP_HEIGHT	equ	64
000C4E56 =00000100                  MAP_WIDTH	equ	256
000C4E56                            
000C4E56                            		rsset	$FF0000
000C4E56 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C4E56 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C4E56                            
000C4E56                            		rsset	$FFFF8000
000C4E56 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C4E56                            
000C4E56 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C4E56 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C4E56 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C4E56 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C4E56 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C4E56                            
000C4E56                            MC_Init:
000C4E56 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C4E5A 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C4E60                            
000C4E60 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C4E64 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C4E68 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C4E6C 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C4E70                            
000C4E70                            
000C4E70                            
000C4E70 6000 FFFE                  		bra.w	*			; spin infinitely
000C4E74                            
000C4E74                            ; ===========================================================================
000C4E74                            ; ---------------------------------------------------------------------------
000C4E74                            ; Clear The Screen
000C4E74                            ; ---------------------------------------------------------------------------
000C4E74                            MC_ClearScreen:
000C4E74 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C4E78                            
000C4E78 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C4E7E 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C4E82 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C4E88 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C4E8E                            
000C4E8E 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C4E90 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C4E92                            
000C4E92 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C4E98 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C4E9C 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C4EA2 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C4EA8                            
000C4EA8 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C4EAA 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C4EAC                            
000C4EAC 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C4EB2 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C4EB6 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C4EBC 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C4EC2                            
000C4EC2 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C4EC4 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C4EC6                            
000C4EC6 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C4ECA 4E75                       		rts				; return
000C4ECC                            ; ---------------------------------------------------------------------------
000C4ECC                            
000C4ECC                            ; ===========================================================================
000C4ECC                            ; ---------------------------------------------------------------------------
000C4ECC                            ; Load The Palette
000C4ECC                            ; ---------------------------------------------------------------------------
000C4ECC                            MC_LoadPalette:
000C4ECC 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C4ECE 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C4ED0                            
000C4ED0                            .updatePalette:
000C4ED0 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C4ED6                            		
000C4ED6 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C4EDA 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C4EDC E288                       		lsr.l	#1,d0			; divide by two
000C4EDE                            
000C4EDE 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C4EE2 1200                       		move.b	d0,d1			; ^
000C4EE4 3C81                       		move.w	d1,(a6)			; ^
000C4EE6                            
000C4EE6 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C4EE8 323C 9600                  		move.w	#$9600,d1		; ^
000C4EEC 1200                       		move.b	d0,d1			; ^
000C4EEE 3C81                       		move.w	d1,(a6)			; ^
000C4EF0                            
000C4EF0 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C4EF2 323C 9700                  		move.w	#$9700,d1		; ^
000C4EF6 1200                       		move.b	d0,d1			; ^
000C4EF8 3C81                       		move.w	d1,(a6)			; ^
000C4EFA                            
000C4EFA 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C4F00                            
000C4F00                            .waitForScan:
000C4F00                            	;	move.w	(a6),ccr		; is v-blank still active?
000C4F00                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C4F00 4E75                       		rts				; return
000C4F02                            ; ---------------------------------------------------------------------------
000C4F02                            
000C4F02                            MC_Palette:
000C4F02 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C4F22 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C4F42 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C4F62 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C4F62 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C4F82                            ; end of 'ROM'
000C4F82                            EndOfRom:
000C4F82                            
000C4F82                            
